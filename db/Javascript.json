{
    "!": {
        "descr": "Logical operators are typically used with Boolean (logical) values. When they are, they return a Boolean value. However, the && and || operators actually return the value of one of the specified operands, so if these operators are used with non-Boolean values, they may return a non-Boolean value.",
        "name": "!",
        "params": [],
        "path": "javascript/operators/logical_operators#Logical_NOT",
        "syntax": "Standard Defined in several sections of the specification: Logical NOT Operator, Binary Logical Operators    ECMAScript Latest Draft (ECMA-262) Draft Defined in several sections of the specification: Logical NOT Operator, Binary Logical Operators     Browser compatibilityUpdate compatibility data on GitHub",
        "type": "Operators"
    },
    "!=": {
        "descr": "JavaScript has both strict and type–converting comparisons. A strict comparison (e.g., ===) is only true if the operands are of the same type and the contents match. The more commonly-used abstract comparison (e.g. ==) converts the operands to the same type before making the comparison. For relational abstract comparisons (e.g., <=), the operands are first converted to primitives, then to the same type, before comparison.",
        "name": "!=",
        "params": [],
        "path": "javascript/operators/comparison_operators#Inequality",
        "syntax": "x == y  Examples 1 == 1 // true '1' == 1 // true 1 == '1' // true 0 == false // true 0 == null // false var object1 = {'key': 'value'}, object2 = {'key': 'value'}; object1 == object2 //false 0 == undefined // false null == undefined // true  Inequality (!=) The inequality operator returns true if the operands are not equal. If the two operands are not of the same type, JavaScript attempts to convert the operands to an appropriate type for the comparison. If both operands are objects, then JavaScript compares internal references which are not equal when operands refer to different objects in memory.",
        "type": "Operators"
    },
    "!==": {
        "descr": "JavaScript has both strict and type–converting comparisons. A strict comparison (e.g., ===) is only true if the operands are of the same type and the contents match. The more commonly-used abstract comparison (e.g. ==) converts the operands to the same type before making the comparison. For relational abstract comparisons (e.g., <=), the operands are first converted to primitives, then to the same type, before comparison.",
        "name": "!==",
        "params": [],
        "path": "javascript/operators/comparison_operators#Nonidentity",
        "syntax": "x == y  Examples 1 == 1 // true '1' == 1 // true 1 == '1' // true 0 == false // true 0 == null // false var object1 = {'key': 'value'}, object2 = {'key': 'value'}; object1 == object2 //false 0 == undefined // false null == undefined // true  Inequality (!=) The inequality operator returns true if the operands are not equal. If the two operands are not of the same type, JavaScript attempts to convert the operands to an appropriate type for the comparison. If both operands are objects, then JavaScript compares internal references which are not equal when operands refer to different objects in memory.",
        "type": "Operators"
    },
    "$.Callbacks": {
        "descr": "The $.Callbacks() function is internally used to provide the base functionality behind the jQuery $.ajax() and $.Deferred() components. It can be used as a similar base to define functionality for new components.",
        "name": "jQuery.Callbacks",
        "params": [
            {
                "descr": "Type: String  An optional list of space-separated flags that change how the callback list behaves.",
                "name": "flags"
            }
        ],
        "path": "jquery/jquery.callbacks",
        "syntax": "jQuery.Callbacks( flags ) Returns: Callbacks",
        "type": "Callbacks Object"
    },
    "$.Deferred": {
        "descr": "The jQuery.Deferred() factory creates a new deferred object.",
        "name": "jQuery.Deferred",
        "params": [
            {
                "descr": "Type: Function( Deferred deferred )  A function that is called just before the constructor returns.",
                "name": "beforeStart"
            }
        ],
        "path": "jquery/jquery.deferred",
        "syntax": "jQuery.Deferred( [beforeStart ] ) Returns: Deferred",
        "type": "Deferred Object"
    },
    "$.ajax": {
        "descr": "An object of numeric HTTP codes and functions to be called when the response has the corresponding code. For example, the following will alert when the response status is a 404:",
        "name": "jQuery.ajax",
        "params": [
            {
                "descr": "Type: String  A string containing the URL to which the request is sent.",
                "name": "url"
            },
            {
                "descr": "Type: PlainObject  A set of key/value pairs that configure the Ajax request. ",
                "name": "settings"
            },
            {
                "descr": "Type: PlainObject  A set of key/value pairs that configure the Ajax request. ",
                "name": "settings"
            },
            {
                "descr": "(default: true) Type: Boolean  By default, all requests are sent asynchronously (i.e. ",
                "name": "async"
            },
            {
                "descr": "Type: Function( jqXHR jqXHR, PlainObject settings ) A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. ",
                "name": "beforeSend"
            },
            {
                "descr": "(default: true, false for dataType 'script' and 'jsonp') Type: Boolean  If set to false, it will force requested pages not to be cached by the browser. ",
                "name": "cache"
            },
            {
                "descr": "Type: Function( jqXHR jqXHR, String textStatus ) A function to be called when the request finishes (after success and error callbacks are executed). ",
                "name": "complete"
            },
            {
                "descr": "Type: PlainObject  An object of string/regular-expression pairs that determine how jQuery will parse the response, given its content type. ",
                "name": "contents"
            },
            {
                "descr": "(default: 'application/x-www-form-urlencoded; charset=UTF-8') Type: Boolean or String  When sending data to the server, use this content type. ",
                "name": "contentType"
            },
            {
                "descr": "Type: PlainObject  This object will be the context of all Ajax-related callbacks. ",
                "name": "context"
            },
            {
                "descr": "(default: {\"* text\": window.String, \"text html\": true, \"text json\": jQuery.parseJSON, \"text xml\": jQuery.parseXML}) Type: PlainObject  An object containing dataType-to-dataType converters. ",
                "name": "converters"
            },
            {
                "descr": "(default: false for same-domain requests, true for cross-domain requests) Type: Boolean  If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to true. This allows, for example, server-side redirection to another domain. (version added: 1.5)",
                "name": "crossDomain"
            },
            {
                "descr": "Type: PlainObject or String or Array  Data to be sent to the server. ",
                "name": "data"
            },
            {
                "descr": "Type: Function( String data, String type ) => Anything  A function to be used to handle the raw response data of XMLHttpRequest. ",
                "name": "dataFilter"
            },
            {
                "descr": "(default: Intelligent Guess (xml, json, script, or html)) Type: String  The type of data that you're expecting back from the server. ",
                "name": "dataType"
            },
            {
                "descr": "Type: Function( jqXHR jqXHR, String textStatus, String errorThrown ) A function to be called if the request fails. ",
                "name": "error"
            },
            {
                "descr": "(default: true) Type: Boolean  Whether to trigger global Ajax event handlers for this request. ",
                "name": "global"
            },
            {
                "descr": "(default: {}) Type: PlainObject  An object of additional header key/value pairs to send along with requests using the XMLHttpRequest transport. ",
                "name": "headers"
            },
            {
                "descr": "(default: false) Type: Boolean  Allow the request to be successful only if the response has changed since the last request. ",
                "name": "ifModified"
            },
            {
                "descr": "(default: depends on current location protocol) Type: Boolean  Allow the current environment to be recognized as \"local,\" (e.g. ",
                "name": "isLocal"
            },
            {
                "descr": "Type: String or Boolean  Override the callback function name in a JSONP request. ",
                "name": "jsonp"
            },
            {
                "descr": "Type: String or Function() Specify the callback function name for a JSONP request. ",
                "name": "jsonpCallback"
            },
            {
                "descr": "(default: 'GET') Type: String  The HTTP method to use for the request (e.g. ",
                "name": "method"
            },
            {
                "descr": "Type: String  A mime type to override the XHR mime type. ",
                "name": "mimeType"
            },
            {
                "descr": "Type: String  A password to be used with XMLHttpRequest in response to an HTTP access authentication request.",
                "name": "password"
            },
            {
                "descr": "(default: true) Type: Boolean  By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type \"application/x-www-form-urlencoded\". If you want to send a DOMDocument, or other non-processed data, set this option to false.",
                "name": "processData"
            },
            {
                "descr": "Type: String  Only applies when the \"script\" transport is used (e.g., cross-domain requests with \"jsonp\" or \"script\" dataType and \"GET\" type). ",
                "name": "scriptCharset"
            },
            {
                "descr": "(default: {}) Type: PlainObject   An object of numeric HTTP codes and functions to be called when the response has the corresponding code. ",
                "name": "statusCode"
            },
            {
                "descr": "Type: Function( Anything data, String textStatus, jqXHR jqXHR ) A function to be called if the request succeeds. ",
                "name": "success"
            },
            {
                "descr": "Type: Number  Set a timeout (in milliseconds) for the request. ",
                "name": "timeout"
            },
            {
                "descr": "Type: Boolean  Set this to true if you wish to use the traditional style of param serialization.",
                "name": "traditional"
            },
            {
                "descr": "(default: 'GET') Type: String  An alias for method. ",
                "name": "type"
            },
            {
                "descr": "(default: The current page) Type: String   A string containing the URL to which the request is sent.",
                "name": "url"
            },
            {
                "descr": "Type: String  A username to be used with XMLHttpRequest in response to an HTTP access authentication request.",
                "name": "username"
            },
            {
                "descr": "(default: ActiveXObject when available (IE), the XMLHttpRequest otherwise) Type: Function() Callback for creating the XMLHttpRequest object. ",
                "name": "xhr"
            },
            {
                "descr": "Type: PlainObject   An object of fieldName-fieldValue pairs to set on the native XHR object. ",
                "name": "xhrFields"
            }
        ],
        "path": "jquery/jquery.ajax",
        "syntax": "jQuery.ajax( url [, settings ] ) Returns: jqXHR",
        "type": "Ajax"
    },
    "$.ajaxPrefilter": {
        "descr": "A typical prefilter registration using $.ajaxPrefilter() looks like this:",
        "name": "jQuery.ajaxPrefilter",
        "params": [
            {
                "descr": "Type: String  An optional string containing one or more space-separated dataTypes",
                "name": "dataTypes"
            },
            {
                "descr": "Type: Function( PlainObject options, PlainObject originalOptions, jqXHR jqXHR ) A handler to set default values for future Ajax requests.",
                "name": "handler"
            }
        ],
        "path": "jquery/jquery.ajaxprefilter",
        "syntax": "jQuery.ajaxPrefilter( [dataTypes ], handler ) Returns: undefined",
        "type": "Ajax"
    },
    "$.ajaxSetup": {
        "descr": "For details on the settings available for $.ajaxSetup(), see $.ajax().",
        "name": "jQuery.ajaxSetup",
        "params": [
            {
                "descr": "Type: PlainObject  A set of key/value pairs that configure the default Ajax request. ",
                "name": "options"
            }
        ],
        "path": "jquery/jquery.ajaxsetup",
        "syntax": "jQuery.ajaxSetup( options ) Returns: PlainObject",
        "type": "Ajax"
    },
    "$.ajaxTransport": {
        "descr": "A transport is an object that provides two methods, send and abort, that are used internally by $.ajax() to issue requests. A transport is the most advanced way to enhance $.ajax() and should be used only as a last resort when prefilters and converters are insufficient.",
        "name": "jQuery.ajaxTransport",
        "params": [
            {
                "descr": "Type: String  A string identifying the data type to use",
                "name": "dataType"
            },
            {
                "descr": "Type: Function( PlainObject options, PlainObject originalOptions, jqXHR jqXHR ) A handler to return the new transport object to use with the data type provided in the first argument.",
                "name": "handler"
            }
        ],
        "path": "jquery/jquery.ajaxtransport",
        "syntax": "jQuery.ajaxTransport( dataType, handler ) Returns: undefined",
        "type": "Ajax"
    },
    "$.browser": {
        "descr": "The $.browser property provides information about the web browser that is accessing the page, as reported by the browser itself. It contains flags for each of the four most prevalent browser classes (Internet Explorer, Mozilla, Webkit, and Opera) as well as version information.",
        "name": "jQuery.browser",
        "params": [],
        "path": "jquery/jquery.browser",
        "syntax": "jQuery.browserReturns: PlainObjectversion deprecated: 1.3, removed: 1.9   Description: Contains flags for the useragent, read from navigator.userAgent. This property was removed in jQuery 1.9 and is available only through the jQuery.migrate plugin. Please try to use feature detection instead.  version added: 1.0jQuery.browser  The $.browser property provides information about the web browser that is accessing the page, as reported by the browser itself. It contains flags for each of the four most prevalent browser classes (Internet Explorer, Mozilla, Webkit, and Opera) as well as version information.",
        "type": "Utilities"
    },
    "$.contains": {
        "descr": "The $.contains() method returns true if the DOM element provided by the second argument is a descendant of the DOM element provided by the first argument, whether it is a direct child or nested more deeply. Otherwise, it returns false. Only element nodes are supported; if the second argument is a text or comment node, $.contains() will return false.",
        "name": "jQuery.contains",
        "params": [
            {
                "descr": "Type: Element  The DOM element that may contain the other element.",
                "name": "container"
            },
            {
                "descr": "Type: Element  The DOM element that may be contained by (a descendant of) the other element.",
                "name": "contained"
            }
        ],
        "path": "jquery/jquery.contains",
        "syntax": "jQuery.contains( container, contained ) Returns: Boolean",
        "type": "Utilities"
    },
    "$.cssHooks": {
        "descr": "The $.cssHooks object provides a way to define functions for getting and setting particular CSS values. It can also be used to create new cssHooks for normalizing CSS3 features such as box shadows and gradients.",
        "name": "jQuery.cssHooks",
        "params": [],
        "path": "jquery/jquery.csshooks",
        "syntax": "jQuery.cssHooksReturns: Object   Description: Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties.  version added: 1.4.3jQuery.cssHooks  The $.cssHooks object provides a way to define functions for getting and setting particular CSS values. It can also be used to create new cssHooks for normalizing CSS3 features such as box shadows and gradients.  For example, some versions of Webkit-based browsers require -webkit-border-radius to set the border-radius on an element, while earlier Firefox versions require -moz-border-radius. A css hook can normalize these vendor-prefixed properties to let .css()",
        "type": "Miscellaneous"
    },
    "$.cssNumber": {
        "descr": "You can think about jQuery.cssNumber as a list of all CSS properties you might use without a unit. It's used by .css() to determine if it needs to add px to unitless values.",
        "name": "jQuery.cssNumber",
        "params": [],
        "path": "jquery/jquery.cssnumber",
        "syntax": "jQuery.cssNumberReturns: Object   Description: An object containing all CSS properties that may be used without a unit. The .css()",
        "type": "Manipulation"
    },
    "$.data": {
        "descr": "Note: This is a low-level method; a more convenient .data() is also available.",
        "name": "jQuery.data",
        "params": [
            {
                "descr": "Type: Element  The DOM element to associate with the data.",
                "name": "element"
            },
            {
                "descr": "Type: String  A string naming the piece of data to set.",
                "name": "key"
            },
            {
                "descr": "Type: Anything  The new data value; this can be any Javascript type except undefined.",
                "name": "value"
            },
            {
                "descr": "Type: Element  The DOM element to query for the data.",
                "name": "element"
            },
            {
                "descr": "Type: String  Name of the data stored.",
                "name": "key"
            },
            {
                "descr": "Type: Element  The DOM element to query for the data.",
                "name": "element"
            }
        ],
        "path": "jquery/jquery.data",
        "syntax": "jQuery.data( element, key, value ) Returns: Object",
        "type": "Data"
    },
    "$.dequeue": {
        "descr": "Note: This is a low-level method, you should probably use .dequeue() instead.",
        "name": "jQuery.dequeue",
        "params": [
            {
                "descr": "Type: Element  A DOM element from which to remove and execute a queued function.",
                "name": "element"
            },
            {
                "descr": "Type: String  A string containing the name of the queue. ",
                "name": "queueName"
            }
        ],
        "path": "jquery/jquery.dequeue",
        "syntax": "jQuery.dequeue( element [, queueName ] ) Returns: undefined",
        "type": "Data"
    },
    "$.each": {
        "descr": "The $.each() function is not the same as $(selector).each(), which is used to iterate, exclusively, over a jQuery object. The $.each() function can be used to iterate over any collection, whether it is an object or an array. In the case of an array, the callback is passed an array index and a corresponding array value each time. (The value can also be accessed through the this keyword, but Javascript will always wrap the this value as an Object even if it is a simple string or number value.) The method returns its first argument, the object that was iterated.",
        "name": "jQuery.each",
        "params": [
            {
                "descr": "Type: ArrayLikeObject  The array or array-like object to iterate over.",
                "name": "array"
            },
            {
                "descr": "Type: Function( Integer indexInArray, Object value ) The function that will be executed on every value.",
                "name": "callback"
            },
            {
                "descr": "Type: Object  The object to iterate over.",
                "name": "object"
            },
            {
                "descr": "Type: Function( String propertyName, Object valueOfProperty ) The function that will be executed on every value.",
                "name": "callback"
            }
        ],
        "path": "jquery/jquery.each",
        "syntax": "jQuery.each( array, callback ) Returns: Object",
        "type": "Utilities"
    },
    "$.error": {
        "descr": "This method exists primarily for plugin developers who wish to override it and provide a better display (or more information) for the error messages.",
        "name": "jQuery.error",
        "params": [
            {
                "descr": "Type: String  The message to send out.",
                "name": "message"
            }
        ],
        "path": "jquery/jquery.error",
        "syntax": "jQuery.error( message ) Returns:",
        "type": "Miscellaneous"
    },
    "$.escapeSelector": {
        "descr": "This method is useful for situations where a class name or an ID contains characters that have a special meaning in CSS, such as the dot or the semicolon.",
        "name": "jQuery.escapeSelector",
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to escape.",
                "name": "selector"
            }
        ],
        "path": "jquery/jquery.escapeselector",
        "syntax": "jQuery.escapeSelector( selector ) Returns: Selector",
        "type": "Miscellaneous"
    },
    "$.extend": {
        "descr": "When two or more object arguments are supplied to $.extend(), properties from all of the objects are added to the target object. Arguments that are null or undefined are ignored.",
        "name": "jQuery.extend",
        "params": [
            {
                "descr": "Type: Object   An object that will receive the new properties if additional objects are passed in or that will extend the jQuery namespace if it is the sole argument.",
                "name": "target"
            },
            {
                "descr": "Type: Object  An object containing additional properties to merge in.",
                "name": "object1"
            },
            {
                "descr": "Type: Object  Additional objects containing properties to merge in.",
                "name": "objectN"
            },
            {
                "descr": "Type: Boolean  If true, the merge becomes recursive (aka. ",
                "name": "deep"
            },
            {
                "descr": "Type: Object  The object to extend. ",
                "name": "target"
            },
            {
                "descr": "Type: Object  An object containing additional properties to merge in.",
                "name": "object1"
            },
            {
                "descr": "Type: Object  Additional objects containing properties to merge in.",
                "name": "objectN"
            }
        ],
        "path": "jquery/jquery.extend",
        "syntax": "jQuery.extend( target [, object1 ] [, objectN ] ) Returns: Object",
        "type": "Utilities"
    },
    "$.fn.extend": {
        "descr": "Add two methods to the jQuery prototype ($.fn) object and then use one of them.",
        "name": "jQuery.fn.extend",
        "params": [
            {
                "descr": "Type: Object  An object to merge onto the jQuery prototype.",
                "name": "object"
            }
        ],
        "path": "jquery/jquery.fn.extend",
        "syntax": "jQuery.fn.extend( object ) Returns: Object",
        "type": "Utilities"
    },
    "$.fx.interval": {
        "descr": "This property is deprecated as of version 3.0, and has no effect in browsers that support the requestAnimationFrame method.",
        "name": "jQuery.fx.interval",
        "params": [],
        "path": "jquery/jquery.fx.interval",
        "syntax": "jQuery.fx.intervalReturns: Numberversion deprecated: 3.0   Description: The rate (in milliseconds) at which animations fire.",
        "type": "Effects"
    },
    "$.fx.off": {
        "descr": "When this property is set to true, all animation methods will immediately set elements to their final state when called, rather than displaying an effect. This may be desirable for a couple reasons:",
        "name": "jQuery.fx.off",
        "params": [],
        "path": "jquery/jquery.fx.off",
        "syntax": "jQuery.fx.offReturns: Boolean   Description: Globally disable all animations.  version added: 1.3jQuery.fx.off  When this property is set to true, all animation methods will immediately set elements to their final state when called, rather than displaying an effect. This may be desirable for a couple reasons:  jQuery is being used on a low-resource device. Users are encountering accessibility problems with the animations.  Animations can be turned back on by setting the property to false.  Example:  Toggle animation on and off <!doctype html> <html lang=\"en\"> <head> <meta charset=\"utf-8\"> <title>jQuery.fx.off demo</title> <style> div { width: 50px; height: 30px; margin: 5px; float: left; background: green; } </style> <script src=\"https://code.jquery.com/jquery-1.10.2.js\"></script> </head> <body> <input type=\"button\" value=\"Run\"> <button>Toggle fx</button> <div></div> <script> var toggleFx = function() { $.fx.off = !$.fx.off; }; toggleFx();\n or  $( \"button\" ).click( toggleFx );\n or  $( \"input\" ).click(function() { $( \"div\" ).toggle( \"slow\" );\n or  });\n or  </script> </body> </html>);",
        "type": "Effects"
    },
    "$.get": {
        "descr": "This is a shorthand Ajax function, which is equivalent to:",
        "name": "jQuery.get",
        "params": [
            {
                "descr": "Type: String  A string containing the URL to which the request is sent.",
                "name": "url"
            },
            {
                "descr": "Type: PlainObject or String  A plain object or string that is sent to the server with the request.",
                "name": "data"
            },
            {
                "descr": "Type: Function( PlainObject data, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. ",
                "name": "success"
            },
            {
                "descr": "Type: String  The type of data expected from the server. ",
                "name": "dataType"
            },
            {
                "descr": "Type: PlainObject  A set of key/value pairs that configure the Ajax request. ",
                "name": "settings"
            }
        ],
        "path": "jquery/jquery.get",
        "syntax": "jQuery.get( url [, data ] [, success ] [, dataType ] ) Returns: jqXHR",
        "type": "Ajax"
    },
    "$.getJSON": {
        "descr": "This is a shorthand Ajax function, which is equivalent to:",
        "name": "jQuery.getJSON",
        "params": [
            {
                "descr": "Type: String  A string containing the URL to which the request is sent.",
                "name": "url"
            },
            {
                "descr": "Type: PlainObject or String  A plain object or string that is sent to the server with the request.",
                "name": "data"
            },
            {
                "descr": "Type: Function( PlainObject data, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds.",
                "name": "success"
            }
        ],
        "path": "jquery/jquery.getjson",
        "syntax": "jQuery.getJSON( url [, data ] [, success ] ) Returns: jqXHR",
        "type": "Ajax"
    },
    "$.getScript": {
        "descr": "This is a shorthand Ajax function, which is equivalent to:",
        "name": "jQuery.getScript",
        "params": [
            {
                "descr": "Type: String  A string containing the URL to which the request is sent.",
                "name": "url"
            },
            {
                "descr": "Type: Function( String script, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds.",
                "name": "success"
            }
        ],
        "path": "jquery/jquery.getscript",
        "syntax": "jQuery.getScript( url [, success ] ) Returns: jqXHR",
        "type": "Ajax"
    },
    "$.globalEval": {
        "descr": "This method behaves differently from using a normal JavaScript eval() in that it's executed within the global context (which is important for loading external scripts dynamically).",
        "name": "jQuery.globalEval",
        "params": [
            {
                "descr": "Type: String  The JavaScript code to execute.",
                "name": "code"
            }
        ],
        "path": "jquery/jquery.globaleval",
        "syntax": "jQuery.globalEval( code ) Returns: Anything",
        "type": "Utilities"
    },
    "$.grep": {
        "descr": "The $.grep() method removes items from an array as necessary so that all remaining items pass a provided test. The test is a function that is passed an array item and the index of the item within the array. Only if the test returns true will the item be in the result array.",
        "name": "jQuery.grep",
        "params": [
            {
                "descr": "Type: ArrayLikeObject  The array-like object to search through.",
                "name": "array"
            },
            {
                "descr": "Type: Function( Object elementOfArray, Integer indexInArray ) => Boolean  The function to process each item against. ",
                "name": "function"
            },
            {
                "descr": "Type: Boolean  If \"invert\" is false, or not provided, then the function returns an array consisting of all elements for which \"callback\" returns true. ",
                "name": "invert"
            }
        ],
        "path": "jquery/jquery.grep",
        "syntax": "jQuery.grep( array, function [, invert ] ) Returns: Array",
        "type": "Utilities"
    },
    "$.hasData": {
        "descr": "The jQuery.hasData() method provides a way to determine if an element currently has any values that were set using jQuery.data(). If there is no data object associated with an element, the method returns false; otherwise it returns true.",
        "name": "jQuery.hasData",
        "params": [
            {
                "descr": "Type: Element  A DOM element to be checked for data.",
                "name": "element"
            }
        ],
        "path": "jquery/jquery.hasdata",
        "syntax": "jQuery.hasData( element ) Returns: Boolean",
        "type": "Data"
    },
    "$.holdReady": {
        "descr": "The $.holdReady() method allows the caller to delay jQuery's ready event. This advanced feature would typically be used by dynamic script loaders that want to load additional JavaScript such as jQuery plugins before allowing the ready event to occur, even though the DOM may be ready. This method must be called early in the document, such as in the <head> immediately after the jQuery script tag. Calling this method after the ready event has already fired will have no effect.",
        "name": "jQuery.holdReady",
        "params": [
            {
                "descr": "Type: Boolean  Indicates whether the ready hold is being requested or released",
                "name": "hold"
            }
        ],
        "path": "jquery/jquery.holdready",
        "syntax": "jQuery.holdReady( hold ) Returns: undefined",
        "type": "Events"
    },
    "$.htmlPrefilter": {
        "descr": "This method rarely needs to be called directly. Instead, use it as an entry point to modify existing jQuery manipulation methods. For instance, to remove all <del> tags from incoming HTML strings, do this:",
        "name": "jQuery.htmlPrefilter",
        "params": [
            {
                "descr": "Type: String  The HTML string on which to operate.",
                "name": "html"
            }
        ],
        "path": "jquery/jquery.htmlprefilter",
        "syntax": "jQuery.htmlPrefilter( html ) Returns: String",
        "type": "Manipulation"
    },
    "$.inArray": {
        "descr": "The $.inArray() method is similar to JavaScript's native .indexOf() method in that it returns -1 when it doesn't find a match. If the first element within the array matches value, $.inArray() returns 0.",
        "name": "jQuery.inArray",
        "params": [
            {
                "descr": "Type: Anything  The value to search for.",
                "name": "value"
            },
            {
                "descr": "Type: Array  An array through which to search.",
                "name": "array"
            },
            {
                "descr": "Type: Number  The index of the array at which to begin the search. ",
                "name": "fromIndex"
            }
        ],
        "path": "jquery/jquery.inarray",
        "syntax": "jQuery.inArray( value, array [, fromIndex ] ) Returns: Number",
        "type": "Utilities"
    },
    "$.isArray": {
        "descr": "$.isArray() returns a Boolean indicating whether the object is a JavaScript array (not an array-like object, such as a jQuery object).",
        "name": "jQuery.isArray",
        "params": [
            {
                "descr": "Type: Object  Object to test whether or not it is an array.",
                "name": "obj"
            }
        ],
        "path": "jquery/jquery.isarray",
        "syntax": "jQuery.isArray( obj ) Returns: boolean",
        "type": "Utilities"
    },
    "$.isEmptyObject": {
        "descr": "As of jQuery 1.4 this method checks both properties on the object itself and properties inherited from prototypes (in that it doesn't use hasOwnProperty). The argument should always be a plain JavaScript Object as other types of object (DOM elements, primitive strings/numbers, host objects) may not give consistent results across browsers. To determine if an object is a plain JavaScript object, use $.isPlainObject()",
        "name": "jQuery.isEmptyObject",
        "params": [
            {
                "descr": "Type: Object  The object that will be checked to see if it's empty.",
                "name": "object"
            }
        ],
        "path": "jquery/jquery.isemptyobject",
        "syntax": "jQuery.isEmptyObject( object ) Returns: Boolean",
        "type": "Utilities"
    },
    "$.isFunction": {
        "descr": "As of jQuery 3.3, jQuery.isFunction() has been deprecated. In most cases, its use can be replaced by typeof x === \"function\".",
        "name": "jQuery.isFunction",
        "params": [
            {
                "descr": "Type: Anything  The value to be tested.",
                "name": "value"
            }
        ],
        "path": "jquery/jquery.isfunction",
        "syntax": "jQuery.isFunction( value ) Returns: booleanversion deprecated: 3.3",
        "type": "Utilities"
    },
    "$.isNumeric": {
        "descr": "The $.isNumeric() method checks whether its argument represents a numeric value. If so, it returns true. Otherwise it returns false. The argument can be of any type.",
        "name": "jQuery.isNumeric",
        "params": [
            {
                "descr": "Type: Anything  The value to be tested.",
                "name": "value"
            }
        ],
        "path": "jquery/jquery.isnumeric",
        "syntax": "jQuery.isNumeric( value ) Returns: Boolean",
        "type": "Utilities"
    },
    "$.isPlainObject": {
        "descr": "Note: Host objects (or objects used by browser host environments to complete the execution environment of ECMAScript) have a number of inconsistencies which are difficult to robustly feature detect cross-platform. As a result of this, $.isPlainObject() may evaluate inconsistently across browsers in certain instances.",
        "name": "jQuery.isPlainObject",
        "params": [
            {
                "descr": "Type: PlainObject  The object that will be checked to see if it's a plain object.",
                "name": "object"
            }
        ],
        "path": "jquery/jquery.isplainobject",
        "syntax": "jQuery.isPlainObject( object ) Returns: Boolean",
        "type": "Utilities"
    },
    "$.isWindow": {
        "descr": "This is used in a number of places in jQuery to determine if we're operating against a browser window (such as the current window or an iframe).",
        "name": "jQuery.isWindow",
        "params": [
            {
                "descr": "Type: PlainObject  Object to test whether or not it is a window.",
                "name": "obj"
            }
        ],
        "path": "jquery/jquery.iswindow",
        "syntax": "jQuery.isWindow( obj ) Returns: booleanversion deprecated: 3.3",
        "type": "Utilities"
    },
    "$.isXMLDoc": {
        "descr": "Check an object to see if it's in an XML document.",
        "name": "jQuery.isXMLDoc",
        "params": [
            {
                "descr": "Type: Element  The DOM node that will be checked to see if it's in an XML document.",
                "name": "node"
            }
        ],
        "path": "jquery/jquery.isxmldoc",
        "syntax": "jQuery.isXMLDoc( node ) Returns: Boolean",
        "type": "Utilities"
    },
    "$.makeArray": {
        "descr": "Many methods, both in jQuery and in JavaScript in general, return objects that are array-like. For example, the jQuery factory function $() returns a jQuery object that has many of the properties of an array (a length, the [] array access operator, etc.), but is not exactly the same as an array and lacks some of an array's built-in methods (such as .pop() and .reverse()).",
        "name": "jQuery.makeArray",
        "params": [
            {
                "descr": "Type: PlainObject  Any object to turn into a native Array.",
                "name": "obj"
            }
        ],
        "path": "jquery/jquery.makearray",
        "syntax": "jQuery.makeArray( obj ) Returns: Array",
        "type": "Utilities"
    },
    "$.map": {
        "descr": "If you wish to process a jQuery object — for example, $('div').map( callback ); — use .map() instead.",
        "name": "jQuery.map",
        "params": [
            {
                "descr": "Type: Array  The Array to translate.",
                "name": "array"
            },
            {
                "descr": "Type: Function( Object elementOfArray, Integer indexInArray ) => Object  The function to process each item against. ",
                "name": "callback"
            },
            {
                "descr": "Type: Object  The Object to translate.",
                "name": "object"
            },
            {
                "descr": "Type: Function( Object propertyOfObject, String key ) => Object  The function to process each item against. ",
                "name": "callback"
            }
        ],
        "path": "jquery/jquery.map",
        "syntax": "jQuery.map( array, callback ) Returns: Array",
        "type": "Utilities"
    },
    "$.merge": {
        "descr": "The $.merge() operation forms an array that contains all elements from the two arrays. The orders of items in the arrays are preserved, with items from the second array appended. The $.merge() function is destructive. It alters the length and numeric index properties of the first object to include items from the second.",
        "name": "jQuery.merge",
        "params": [
            {
                "descr": "Type: ArrayLikeObject  The first array-like object to merge, the elements of second added.",
                "name": "first"
            },
            {
                "descr": "Type: ArrayLikeObject  The second array-like object to merge into the first, unaltered.",
                "name": "second"
            }
        ],
        "path": "jquery/jquery.merge",
        "syntax": "jQuery.merge( first, second ) Returns: Array",
        "type": "Utilities"
    },
    "$.noConflict": {
        "descr": "Many JavaScript libraries use $ as a function or variable name, just as jQuery does. In jQuery's case, $ is just an alias for jQuery, so all functionality is available without using $. If you need to use another JavaScript library alongside jQuery, return control of $ back to the other library with a call to $.noConflict(). Old references of $ are saved during jQuery initialization; noConflict() simply restores them.",
        "name": "jQuery.noConflict",
        "params": [
            {
                "descr": "Type: Boolean  A Boolean indicating whether to remove all jQuery variables from the global scope (including jQuery itself).",
                "name": "removeAll"
            }
        ],
        "path": "jquery/jquery.noconflict",
        "syntax": "jQuery.noConflict( [removeAll ] ) Returns: Object",
        "type": "Miscellaneous"
    },
    "$.noop": {
        "descr": "You can use this empty function when you wish to pass around a function that will do nothing.",
        "name": "jQuery.noop",
        "params": [],
        "path": "jquery/jquery.noop",
        "syntax": "jQuery.noop() Returns: undefined",
        "type": "Utilities"
    },
    "$.now": {
        "descr": "The $.now() method is a shorthand for the number returned by the expression (new Date).getTime().",
        "name": "jQuery.now",
        "params": [],
        "path": "jquery/jquery.now",
        "syntax": "jQuery.now() Returns: Number",
        "type": "Utilities"
    },
    "$.param": {
        "descr": "This function is used internally to convert form element values into a serialized string representation (See .serialize() for more information).",
        "name": "jQuery.param",
        "params": [
            {
                "descr": "Type: Array or PlainObject or jQuery  An array, a plain object, or a jQuery object to serialize.",
                "name": "obj"
            },
            {
                "descr": "Type: Array or PlainObject or jQuery  An array, a plain object, or a jQuery object to serialize.",
                "name": "obj"
            },
            {
                "descr": "Type: Boolean  A Boolean indicating whether to perform a traditional \"shallow\" serialization.",
                "name": "traditional"
            }
        ],
        "path": "jquery/jquery.param",
        "syntax": "jQuery.param( obj ) Returns: String",
        "type": "Ajax"
    },
    "$.parseHTML": {
        "descr": "jQuery.parseHTML uses native methods to convert the string to a set of DOM nodes, which can then be inserted into the document. These methods do render all trailing or leading text (even if that's just whitespace). To prevent trailing/leading whitespace from being converted to text nodes you can pass the HTML string through jQuery.trim.",
        "name": "jQuery.parseHTML",
        "params": [
            {
                "descr": "Type: String  HTML string to be parsed",
                "name": "data"
            },
            {
                "descr": "(default: document) Type: Element  Document element to serve as the context in which the HTML fragment will be created",
                "name": "context"
            },
            {
                "descr": "(default: false) Type: Boolean  A Boolean indicating whether to include scripts passed in the HTML string",
                "name": "keepScripts"
            }
        ],
        "path": "jquery/jquery.parsehtml",
        "syntax": "jQuery.parseHTML( data [, context ] [, keepScripts ] ) Returns: Array",
        "type": "Utilities"
    },
    "$.parseJSON": {
        "descr": "As of jQuery 3.0, $.parseJSON is deprecated. To parse JSON strings use the native JSON.parse method instead.",
        "name": "jQuery.parseJSON",
        "params": [
            {
                "descr": "Type: String  The JSON string to parse.",
                "name": "json"
            }
        ],
        "path": "jquery/jquery.parsejson",
        "syntax": "jQuery.parseJSON( json ) Returns: String or Number or Object or Array or Booleanversion deprecated: 3.0",
        "type": "Utilities"
    },
    "$.parseXML": {
        "descr": "jQuery.parseXML uses the native parsing function of the browser to create a valid XML Document. This document can then be passed to jQuery to create a typical jQuery object that can be traversed and manipulated.",
        "name": "jQuery.parseXML",
        "params": [
            {
                "descr": "Type: String  a well-formed XML string to be parsed",
                "name": "data"
            }
        ],
        "path": "jquery/jquery.parsexml",
        "syntax": "jQuery.parseXML( data ) Returns: XMLDocument",
        "type": "Utilities"
    },
    "$.post": {
        "descr": "This is a shorthand Ajax function, which is equivalent to:",
        "name": "jQuery.post",
        "params": [
            {
                "descr": "Type: String  A string containing the URL to which the request is sent.",
                "name": "url"
            },
            {
                "descr": "Type: PlainObject or String  A plain object or string that is sent to the server with the request.",
                "name": "data"
            },
            {
                "descr": "Type: Function( PlainObject data, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. ",
                "name": "success"
            },
            {
                "descr": "Type: String  The type of data expected from the server. ",
                "name": "dataType"
            },
            {
                "descr": "Type: PlainObject  A set of key/value pairs that configure the Ajax request. ",
                "name": "settings"
            }
        ],
        "path": "jquery/jquery.post",
        "syntax": "jQuery.post( url [, data ] [, success ] [, dataType ] ) Returns: jqXHR",
        "type": "Ajax"
    },
    "$.proxy": {
        "descr": "This method is most useful for attaching event handlers to an element where the context is pointing back to a different object. Additionally, jQuery makes sure that even if you bind the function returned from jQuery.proxy() it will still unbind the correct function if passed the original.",
        "name": "jQuery.proxy",
        "params": [
            {
                "descr": "Type: Function() The function whose context will be changed.",
                "name": "function"
            },
            {
                "descr": "Type: PlainObject  The object to which the context (this) of the function should be set.",
                "name": "context"
            },
            {
                "descr": "Type: PlainObject  The object to which the context of the function should be set.",
                "name": "context"
            },
            {
                "descr": "Type: String  The name of the function whose context will be changed (should be a property of the context object).",
                "name": "name"
            },
            {
                "descr": "Type: Function() The function whose context will be changed.",
                "name": "function"
            },
            {
                "descr": "Type: PlainObject  The object to which the context (this) of the function should be set.",
                "name": "context"
            },
            {
                "descr": "Type: Anything  Any number of arguments to be passed to the function referenced in the function argument.",
                "name": "additionalArguments"
            },
            {
                "descr": "Type: PlainObject  The object to which the context of the function should be set.",
                "name": "context"
            },
            {
                "descr": "Type: String  The name of the function whose context will be changed (should be a property of the context object).",
                "name": "name"
            },
            {
                "descr": "Type: Anything  Any number of arguments to be passed to the function named in the name argument.",
                "name": "additionalArguments"
            }
        ],
        "path": "jquery/jquery.proxy",
        "syntax": "jQuery.proxy( function, context ) Returns: Function",
        "type": "Utilities"
    },
    "$.queue": {
        "descr": "Note: This is a low-level method, you should probably use .queue() instead.",
        "name": "jQuery.queue",
        "params": [
            {
                "descr": "Type: Element  A DOM element to inspect for an attached queue.",
                "name": "element"
            },
            {
                "descr": "Type: String  A string containing the name of the queue. ",
                "name": "queueName"
            },
            {
                "descr": "Type: Element  A DOM element where the array of queued functions is attached.",
                "name": "element"
            },
            {
                "descr": "Type: String  A string containing the name of the queue. ",
                "name": "queueName"
            },
            {
                "descr": "Type: Array  An array of functions to replace the current queue contents.",
                "name": "newQueue"
            },
            {
                "descr": "Type: Element  A DOM element on which to add a queued function.",
                "name": "element"
            },
            {
                "descr": "Type: String  A string containing the name of the queue. ",
                "name": "queueName"
            },
            {
                "descr": "Type: Function() The new function to add to the queue.",
                "name": "callback"
            }
        ],
        "path": "jquery/jquery.queue",
        "syntax": "jQuery.queue( element [, queueName ] ) Returns: Array",
        "type": "Data"
    },
    "$.ready": {
        "descr": "As of jQuery 3.0, use of this object is supported via jQuery.when or the native Promise.resolve(). Code should not make assumptions about whether this object is a jQuery.Deferred, native Promise, or some other type of promise object.",
        "name": "jQuery.ready",
        "params": [],
        "path": "jquery/jquery.ready",
        "syntax": "jQuery.readyReturns: Thenable   Description: A Promise-like object (or \"thenable\") that resolves when the document is ready.",
        "type": "Events"
    },
    "$.readyException": {
        "descr": "This method is fired when an error is thrown synchronously in a function wrapped in jQuery() or jQuery( document ).ready(), or equivalent. By default it re-throws the error in a timeout so that it's logged in the console and passed to window.onerror instead of being swallowed. Overwrite this method if you want to handle such errors differently.",
        "name": "jQuery.readyException",
        "params": [
            {
                "descr": "Type: Error  An error thrown in the function wrapped in jQuery().",
                "name": "error"
            }
        ],
        "path": "jquery/jquery.readyexception",
        "syntax": "jQuery.readyException( error ) Returns: Selector",
        "type": "Miscellaneous"
    },
    "$.removeData": {
        "descr": "Note: This is a low-level method, you should probably use .removeData() instead.",
        "name": "jQuery.removeData",
        "params": [
            {
                "descr": "Type: Element  A DOM element from which to remove data.",
                "name": "element"
            },
            {
                "descr": "Type: String  A string naming the piece of data to remove.",
                "name": "name"
            }
        ],
        "path": "jquery/jquery.removedata",
        "syntax": "jQuery.removeData( element [, name ] ) Returns: jQuery",
        "type": "Data"
    },
    "$.speed": {
        "descr": "The $.speed() method provides a way to define properties, such as duration, easing, and queue, to use in a custom animation. By using it, you don't have to implement the logic that deals with default values and optional parameters.",
        "name": "jQuery.speed",
        "params": [
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.",
                "name": "duration"
            },
            {
                "descr": "Type: PlainObject     easing (default: swing) Type: String  A string indicating which easing function to use for the transition.",
                "name": "settings"
            },
            {
                "descr": "Type: Function() A function to call once the animation is complete.",
                "name": "complete"
            },
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.",
                "name": "duration"
            },
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.",
                "name": "easing"
            },
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.",
                "name": "complete"
            },
            {
                "descr": "Type: PlainObject     duration (default: 400) Type: Number or String  A string or number determining how long the animation will run.",
                "name": "settings"
            },
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.",
                "name": "easing"
            },
            {
                "descr": "Type: Function() A function to call once the animation is complete.",
                "name": "complete"
            }
        ],
        "path": "jquery/jquery.speed",
        "syntax": "jQuery.speed( [duration ] [, settings ] ) Returns: PlainObject",
        "type": "Effects"
    },
    "$.sub": {
        "descr": "This method is deprecated as of jQuery 1.7 and will be moved to a plugin in jQuery 1.8.",
        "name": "jQuery.sub",
        "params": [],
        "path": "jquery/jquery.sub",
        "syntax": "jQuery.sub() Returns: jQueryversion deprecated: 1.7, removed: 1.9",
        "type": "Miscellaneous"
    },
    "$.trim": {
        "descr": "The $.trim() function removes all newlines, spaces (including non-breaking spaces), and tabs from the beginning and end of the supplied string. If these whitespace characters occur in the middle of the string, they are preserved.",
        "name": "jQuery.trim",
        "params": [
            {
                "descr": "Type: String  The string to trim.",
                "name": "str"
            }
        ],
        "path": "jquery/jquery.trim",
        "syntax": "jQuery.trim( str ) Returns: String",
        "type": "Utilities"
    },
    "$.type": {
        "descr": "A number of techniques are used to determine the exact return value for an object. The [[Class]] is determined as follows:",
        "name": "jQuery.type",
        "params": [
            {
                "descr": "Type: Anything  Object to get the internal JavaScript [[Class]] of.",
                "name": "obj"
            }
        ],
        "path": "jquery/jquery.type",
        "syntax": "jQuery.type( obj ) Returns: String",
        "type": "Utilities"
    },
    "$.unique": {
        "descr": "As of jQuery 3.0, this method is deprecated and just an alias of jQuery.uniqueSort(). Please use that method instead.",
        "name": "jQuery.unique",
        "params": [
            {
                "descr": "Type: Array  The Array of DOM elements.",
                "name": "array"
            }
        ],
        "path": "jquery/jquery.unique",
        "syntax": "jQuery.unique( array ) Returns: Arrayversion deprecated: 3.0",
        "type": "Utilities"
    },
    "$.uniqueSort": {
        "descr": "The $.uniqueSort() function searches through an array of objects, sorting the array, and removing any duplicate nodes. A node is considered a duplicate if it is the exact same node as one already in the array; two different nodes with identical attributes are not considered to be duplicates. This function only works on plain JavaScript arrays of DOM elements, and is chiefly used internally by jQuery. You probably will never need to use it.",
        "name": "jQuery.uniqueSort",
        "params": [
            {
                "descr": "Type: Array  The Array of DOM elements.",
                "name": "array"
            }
        ],
        "path": "jquery/jquery.uniquesort",
        "syntax": "jQuery.uniqueSort( array ) Returns: Array",
        "type": "Utilities"
    },
    "$.when": {
        "descr": "If no arguments are passed to jQuery.when(), it will return a resolved Promise.",
        "name": "jQuery.when",
        "params": [
            {
                "descr": "Type: Deferred or Promise or Thenable  Zero or more Thenable objects.",
                "name": "deferreds"
            }
        ],
        "path": "jquery/jquery.when",
        "syntax": "jQuery.when( deferreds ) Returns: Promise",
        "type": "Deferred Object"
    },
    "%": {
        "descr": "Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).",
        "name": "%",
        "params": [],
        "path": "javascript/operators/arithmetic_operators#Remainder",
        "syntax": "Operator: x + y  Examples // Number + Number -> addition 1 + 2 // 3 // Boolean + Number -> addition true + 1 // 2 // Boolean + Boolean -> addition false + false // 0 // Number + String -> concatenation 5 + 'foo' // \"5foo\" // String + Boolean -> concatenation 'foo' + false // \"foofalse\" // String + String -> concatenation 'foo' + 'bar' // \"foobar\"  Subtraction (-)",
        "type": "Operators"
    },
    "%=": {
        "descr": "An assignment operator assigns a value to its left operand based on the value of its right operand.",
        "name": "%=",
        "params": [],
        "path": "javascript/operators/assignment_operators#Remainder_assignment",
        "syntax": "Operator: x = y  Examples // Assuming the following variables // x = 5 // y = 10 // z = 25 x = y // x is 10 x = y = z // x, y and z are all 25  Addition assignment The addition assignment operator adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible. See the addition operator for more details. Syntax Operator: x += y Meaning: x = x + y  Examples // Assuming the following variables // foo = 'foo' // bar = 5 // baz = true // Number + Number -> addition bar += 2 // 7 // Boolean + Number -> addition baz += 1 // 2 // Boolean + Boolean -> addition baz += false // 1 // Number + String -> concatenation bar += 'foo' // \"5foo\" // String + Boolean -> concatenation foo += false // \"foofalse\" // String + String -> concatenation foo += 'bar' // \"foobar\"  Subtraction assignment The subtraction assignment operator subtracts the value of the right operand from a variable and assigns the result to the variable. See the subtraction operator for more details. Syntax Operator: x -= y Meaning: x = x - y  Examples // Assuming the following variable // bar = 5 bar -= 2 // 3 bar -= 'foo' // NaN  Multiplication assignment The multiplication assignment operator multiplies a variable by the value of the right operand and assigns the result to the variable. See the multiplication operator for more details. Syntax Operator: x *= y Meaning: x = x * y  Examples // Assuming the following variable // bar = 5 bar *= 2 // 10 bar *= 'foo' // NaN  Division assignment The division assignment operator divides a variable by the value of the right operand and assigns the result to the variable. See the division operator for more details. Syntax Operator: x /= y Meaning: x = x / y  Examples // Assuming the following variable // bar = 5 bar /= 2 // 2.5 bar /= 'foo' // NaN bar /= 0 // Infinity  Remainder assignment The remainder assignment operator divides a variable by the value of the right operand and assigns the remainder to the variable. See the remainder operator for more details. Syntax Operator: x %= y Meaning: x = x % y  Examples // Assuming the following variable // bar = 5 bar %= 2 // 1 bar %= 'foo' // NaN bar %= 0 // NaN  Exponentiation assignment The exponentiation assignment operator evaluates to the result of raising first operand to the power second operand. See the exponentiation operator for more details. Syntax Operator: x **= y Meaning: x = x ** y  Examples // Assuming the following variable // bar = 5 bar **= 2 // 25 bar **= 'foo' // NaN Left shift assignment The left shift assignment operator moves the specified amount of bits to the left and assigns the result to the variable. See the left shift operator for more details. Syntax Operator: x <<= y Meaning: x = x << y  Examples var bar = 5; // (00000000000000000000000000000101) bar <<= 2; // 20 (00000000000000000000000000010100)",
        "type": "Operators"
    },
    "&": {
        "descr": "Bitwise operators treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.",
        "name": "&",
        "params": [],
        "path": "javascript/operators/bitwise_operators#Bitwise_AND",
        "syntax": "Standard Defined in several sections of the specification: Bitwise NOT operator, Bitwise shift operators, Binary bitwise operators    ECMAScript Latest Draft (ECMA-262) Draft Defined in several sections of the specification: Bitwise NOT operator, Bitwise shift operators, Binary bitwise operators     Browser compatibilityUpdate compatibility data on GitHub",
        "type": "Operators"
    },
    "&&": {
        "descr": "Logical operators are typically used with Boolean (logical) values. When they are, they return a Boolean value. However, the && and || operators actually return the value of one of the specified operands, so if these operators are used with non-Boolean values, they may return a non-Boolean value.",
        "name": "&&",
        "params": [],
        "path": "javascript/operators/logical_operators#Logical_AND",
        "syntax": "Standard Defined in several sections of the specification: Logical NOT Operator, Binary Logical Operators    ECMAScript Latest Draft (ECMA-262) Draft Defined in several sections of the specification: Logical NOT Operator, Binary Logical Operators     Browser compatibilityUpdate compatibility data on GitHub",
        "type": "Operators"
    },
    "&=": {
        "descr": "An assignment operator assigns a value to its left operand based on the value of its right operand.",
        "name": "&=",
        "params": [],
        "path": "javascript/operators/assignment_operators#Bitwise_AND_assignment",
        "syntax": "Operator: x = y  Examples // Assuming the following variables // x = 5 // y = 10 // z = 25 x = y // x is 10 x = y = z // x, y and z are all 25  Addition assignment The addition assignment operator adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible. See the addition operator for more details. Syntax Operator: x += y Meaning: x = x + y  Examples // Assuming the following variables // foo = 'foo' // bar = 5 // baz = true // Number + Number -> addition bar += 2 // 7 // Boolean + Number -> addition baz += 1 // 2 // Boolean + Boolean -> addition baz += false // 1 // Number + String -> concatenation bar += 'foo' // \"5foo\" // String + Boolean -> concatenation foo += false // \"foofalse\" // String + String -> concatenation foo += 'bar' // \"foobar\"  Subtraction assignment The subtraction assignment operator subtracts the value of the right operand from a variable and assigns the result to the variable. See the subtraction operator for more details. Syntax Operator: x -= y Meaning: x = x - y  Examples // Assuming the following variable // bar = 5 bar -= 2 // 3 bar -= 'foo' // NaN  Multiplication assignment The multiplication assignment operator multiplies a variable by the value of the right operand and assigns the result to the variable. See the multiplication operator for more details. Syntax Operator: x *= y Meaning: x = x * y  Examples // Assuming the following variable // bar = 5 bar *= 2 // 10 bar *= 'foo' // NaN  Division assignment The division assignment operator divides a variable by the value of the right operand and assigns the result to the variable. See the division operator for more details. Syntax Operator: x /= y Meaning: x = x / y  Examples // Assuming the following variable // bar = 5 bar /= 2 // 2.5 bar /= 'foo' // NaN bar /= 0 // Infinity  Remainder assignment The remainder assignment operator divides a variable by the value of the right operand and assigns the remainder to the variable. See the remainder operator for more details. Syntax Operator: x %= y Meaning: x = x % y  Examples // Assuming the following variable // bar = 5 bar %= 2 // 1 bar %= 'foo' // NaN bar %= 0 // NaN  Exponentiation assignment The exponentiation assignment operator evaluates to the result of raising first operand to the power second operand. See the exponentiation operator for more details. Syntax Operator: x **= y Meaning: x = x ** y  Examples // Assuming the following variable // bar = 5 bar **= 2 // 25 bar **= 'foo' // NaN Left shift assignment The left shift assignment operator moves the specified amount of bits to the left and assigns the result to the variable. See the left shift operator for more details. Syntax Operator: x <<= y Meaning: x = x << y  Examples var bar = 5; // (00000000000000000000000000000101) bar <<= 2; // 20 (00000000000000000000000000010100)",
        "type": "Operators"
    },
    "*": {
        "descr": "Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).",
        "name": "*",
        "params": [],
        "path": "javascript/operators/arithmetic_operators#Multiplication",
        "syntax": "Operator: x + y  Examples // Number + Number -> addition 1 + 2 // 3 // Boolean + Number -> addition true + 1 // 2 // Boolean + Boolean -> addition false + false // 0 // Number + String -> concatenation 5 + 'foo' // \"5foo\" // String + Boolean -> concatenation 'foo' + false // \"foofalse\" // String + String -> concatenation 'foo' + 'bar' // \"foobar\"  Subtraction (-)",
        "type": "Operators"
    },
    "**": {
        "descr": "Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).",
        "name": "**",
        "params": [],
        "path": "javascript/operators/arithmetic_operators#Exponentiation",
        "syntax": "Operator: x + y  Examples // Number + Number -> addition 1 + 2 // 3 // Boolean + Number -> addition true + 1 // 2 // Boolean + Boolean -> addition false + false // 0 // Number + String -> concatenation 5 + 'foo' // \"5foo\" // String + Boolean -> concatenation 'foo' + false // \"foofalse\" // String + String -> concatenation 'foo' + 'bar' // \"foobar\"  Subtraction (-)",
        "type": "Operators"
    },
    "*=": {
        "descr": "An assignment operator assigns a value to its left operand based on the value of its right operand.",
        "name": "*=",
        "params": [],
        "path": "javascript/operators/assignment_operators#Multiplication_assignment",
        "syntax": "Operator: x = y  Examples // Assuming the following variables // x = 5 // y = 10 // z = 25 x = y // x is 10 x = y = z // x, y and z are all 25  Addition assignment The addition assignment operator adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible. See the addition operator for more details. Syntax Operator: x += y Meaning: x = x + y  Examples // Assuming the following variables // foo = 'foo' // bar = 5 // baz = true // Number + Number -> addition bar += 2 // 7 // Boolean + Number -> addition baz += 1 // 2 // Boolean + Boolean -> addition baz += false // 1 // Number + String -> concatenation bar += 'foo' // \"5foo\" // String + Boolean -> concatenation foo += false // \"foofalse\" // String + String -> concatenation foo += 'bar' // \"foobar\"  Subtraction assignment The subtraction assignment operator subtracts the value of the right operand from a variable and assigns the result to the variable. See the subtraction operator for more details. Syntax Operator: x -= y Meaning: x = x - y  Examples // Assuming the following variable // bar = 5 bar -= 2 // 3 bar -= 'foo' // NaN  Multiplication assignment The multiplication assignment operator multiplies a variable by the value of the right operand and assigns the result to the variable. See the multiplication operator for more details. Syntax Operator: x *= y Meaning: x = x * y  Examples // Assuming the following variable // bar = 5 bar *= 2 // 10 bar *= 'foo' // NaN  Division assignment The division assignment operator divides a variable by the value of the right operand and assigns the result to the variable. See the division operator for more details. Syntax Operator: x /= y Meaning: x = x / y  Examples // Assuming the following variable // bar = 5 bar /= 2 // 2.5 bar /= 'foo' // NaN bar /= 0 // Infinity  Remainder assignment The remainder assignment operator divides a variable by the value of the right operand and assigns the remainder to the variable. See the remainder operator for more details. Syntax Operator: x %= y Meaning: x = x % y  Examples // Assuming the following variable // bar = 5 bar %= 2 // 1 bar %= 'foo' // NaN bar %= 0 // NaN  Exponentiation assignment The exponentiation assignment operator evaluates to the result of raising first operand to the power second operand. See the exponentiation operator for more details. Syntax Operator: x **= y Meaning: x = x ** y  Examples // Assuming the following variable // bar = 5 bar **= 2 // 25 bar **= 'foo' // NaN Left shift assignment The left shift assignment operator moves the specified amount of bits to the left and assigns the result to the variable. See the left shift operator for more details. Syntax Operator: x <<= y Meaning: x = x << y  Examples var bar = 5; // (00000000000000000000000000000101) bar <<= 2; // 20 (00000000000000000000000000010100)",
        "type": "Operators"
    },
    "+": {
        "descr": "Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).",
        "name": "+",
        "params": [],
        "path": "javascript/operators/arithmetic_operators#Addition",
        "syntax": "Operator: x + y  Examples // Number + Number -> addition 1 + 2 // 3 // Boolean + Number -> addition true + 1 // 2 // Boolean + Boolean -> addition false + false // 0 // Number + String -> concatenation 5 + 'foo' // \"5foo\" // String + Boolean -> concatenation 'foo' + false // \"foofalse\" // String + String -> concatenation 'foo' + 'bar' // \"foobar\"  Subtraction (-)",
        "type": "Operators"
    },
    "++": {
        "descr": "Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).",
        "name": "++",
        "params": [],
        "path": "javascript/operators/arithmetic_operators#Increment",
        "syntax": "Operator: x + y  Examples // Number + Number -> addition 1 + 2 // 3 // Boolean + Number -> addition true + 1 // 2 // Boolean + Boolean -> addition false + false // 0 // Number + String -> concatenation 5 + 'foo' // \"5foo\" // String + Boolean -> concatenation 'foo' + false // \"foofalse\" // String + String -> concatenation 'foo' + 'bar' // \"foobar\"  Subtraction (-)",
        "type": "Operators"
    },
    "+=": {
        "descr": "An assignment operator assigns a value to its left operand based on the value of its right operand.",
        "name": "+=",
        "params": [],
        "path": "javascript/operators/assignment_operators#Addition_assignment",
        "syntax": "Operator: x = y  Examples // Assuming the following variables // x = 5 // y = 10 // z = 25 x = y // x is 10 x = y = z // x, y and z are all 25  Addition assignment The addition assignment operator adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible. See the addition operator for more details. Syntax Operator: x += y Meaning: x = x + y  Examples // Assuming the following variables // foo = 'foo' // bar = 5 // baz = true // Number + Number -> addition bar += 2 // 7 // Boolean + Number -> addition baz += 1 // 2 // Boolean + Boolean -> addition baz += false // 1 // Number + String -> concatenation bar += 'foo' // \"5foo\" // String + Boolean -> concatenation foo += false // \"foofalse\" // String + String -> concatenation foo += 'bar' // \"foobar\"  Subtraction assignment The subtraction assignment operator subtracts the value of the right operand from a variable and assigns the result to the variable. See the subtraction operator for more details. Syntax Operator: x -= y Meaning: x = x - y  Examples // Assuming the following variable // bar = 5 bar -= 2 // 3 bar -= 'foo' // NaN  Multiplication assignment The multiplication assignment operator multiplies a variable by the value of the right operand and assigns the result to the variable. See the multiplication operator for more details. Syntax Operator: x *= y Meaning: x = x * y  Examples // Assuming the following variable // bar = 5 bar *= 2 // 10 bar *= 'foo' // NaN  Division assignment The division assignment operator divides a variable by the value of the right operand and assigns the result to the variable. See the division operator for more details. Syntax Operator: x /= y Meaning: x = x / y  Examples // Assuming the following variable // bar = 5 bar /= 2 // 2.5 bar /= 'foo' // NaN bar /= 0 // Infinity  Remainder assignment The remainder assignment operator divides a variable by the value of the right operand and assigns the remainder to the variable. See the remainder operator for more details. Syntax Operator: x %= y Meaning: x = x % y  Examples // Assuming the following variable // bar = 5 bar %= 2 // 1 bar %= 'foo' // NaN bar %= 0 // NaN  Exponentiation assignment The exponentiation assignment operator evaluates to the result of raising first operand to the power second operand. See the exponentiation operator for more details. Syntax Operator: x **= y Meaning: x = x ** y  Examples // Assuming the following variable // bar = 5 bar **= 2 // 25 bar **= 'foo' // NaN Left shift assignment The left shift assignment operator moves the specified amount of bits to the left and assigns the result to the variable. See the left shift operator for more details. Syntax Operator: x <<= y Meaning: x = x << y  Examples var bar = 5; // (00000000000000000000000000000101) bar <<= 2; // 20 (00000000000000000000000000010100)",
        "type": "Operators"
    },
    "-": {
        "descr": "Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).",
        "name": "-",
        "params": [],
        "path": "javascript/operators/arithmetic_operators#Unary_negation",
        "syntax": "Operator: x + y  Examples // Number + Number -> addition 1 + 2 // 3 // Boolean + Number -> addition true + 1 // 2 // Boolean + Boolean -> addition false + false // 0 // Number + String -> concatenation 5 + 'foo' // \"5foo\" // String + Boolean -> concatenation 'foo' + false // \"foofalse\" // String + String -> concatenation 'foo' + 'bar' // \"foobar\"  Subtraction (-)",
        "type": "Operators"
    },
    "--": {
        "descr": "Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).",
        "name": "--",
        "params": [],
        "path": "javascript/operators/arithmetic_operators#Decrement",
        "syntax": "Operator: x + y  Examples // Number + Number -> addition 1 + 2 // 3 // Boolean + Number -> addition true + 1 // 2 // Boolean + Boolean -> addition false + false // 0 // Number + String -> concatenation 5 + 'foo' // \"5foo\" // String + Boolean -> concatenation 'foo' + false // \"foofalse\" // String + String -> concatenation 'foo' + 'bar' // \"foobar\"  Subtraction (-)",
        "type": "Operators"
    },
    "-=": {
        "descr": "An assignment operator assigns a value to its left operand based on the value of its right operand.",
        "name": "-=",
        "params": [],
        "path": "javascript/operators/assignment_operators#Subtraction_assignment",
        "syntax": "Operator: x = y  Examples // Assuming the following variables // x = 5 // y = 10 // z = 25 x = y // x is 10 x = y = z // x, y and z are all 25  Addition assignment The addition assignment operator adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible. See the addition operator for more details. Syntax Operator: x += y Meaning: x = x + y  Examples // Assuming the following variables // foo = 'foo' // bar = 5 // baz = true // Number + Number -> addition bar += 2 // 7 // Boolean + Number -> addition baz += 1 // 2 // Boolean + Boolean -> addition baz += false // 1 // Number + String -> concatenation bar += 'foo' // \"5foo\" // String + Boolean -> concatenation foo += false // \"foofalse\" // String + String -> concatenation foo += 'bar' // \"foobar\"  Subtraction assignment The subtraction assignment operator subtracts the value of the right operand from a variable and assigns the result to the variable. See the subtraction operator for more details. Syntax Operator: x -= y Meaning: x = x - y  Examples // Assuming the following variable // bar = 5 bar -= 2 // 3 bar -= 'foo' // NaN  Multiplication assignment The multiplication assignment operator multiplies a variable by the value of the right operand and assigns the result to the variable. See the multiplication operator for more details. Syntax Operator: x *= y Meaning: x = x * y  Examples // Assuming the following variable // bar = 5 bar *= 2 // 10 bar *= 'foo' // NaN  Division assignment The division assignment operator divides a variable by the value of the right operand and assigns the result to the variable. See the division operator for more details. Syntax Operator: x /= y Meaning: x = x / y  Examples // Assuming the following variable // bar = 5 bar /= 2 // 2.5 bar /= 'foo' // NaN bar /= 0 // Infinity  Remainder assignment The remainder assignment operator divides a variable by the value of the right operand and assigns the remainder to the variable. See the remainder operator for more details. Syntax Operator: x %= y Meaning: x = x % y  Examples // Assuming the following variable // bar = 5 bar %= 2 // 1 bar %= 'foo' // NaN bar %= 0 // NaN  Exponentiation assignment The exponentiation assignment operator evaluates to the result of raising first operand to the power second operand. See the exponentiation operator for more details. Syntax Operator: x **= y Meaning: x = x ** y  Examples // Assuming the following variable // bar = 5 bar **= 2 // 25 bar **= 'foo' // NaN Left shift assignment The left shift assignment operator moves the specified amount of bits to the left and assigns the result to the variable. See the left shift operator for more details. Syntax Operator: x <<= y Meaning: x = x << y  Examples var bar = 5; // (00000000000000000000000000000101) bar <<= 2; // 20 (00000000000000000000000000010100)",
        "type": "Operators"
    },
    ":animated selector": {
        "descr": "Note: If you use a custom jQuery build without the effects module, the :animated selector will throw an error.",
        "name": ":animated selector",
        "params": [],
        "path": "jquery/animated-selector",
        "syntax": "animated selector  Description: Select all elements that are in the progress of an animation at the time the selector is run.  version added: 1.2jQuery( \":animated\" )  Note: If you use a custom jQuery build without the effects module, the :animated",
        "type": "Selectors"
    },
    ":button selector": {
        "descr": "An equivalent selector to $( \":button\" ) using valid CSS is $( \"button, input[type='button']\" ).",
        "name": ":button selector",
        "params": [],
        "path": "jquery/button-selector",
        "syntax": "button selector  Description: Selects all button elements and elements of type button.  version added: 1.0jQuery( \":button\" )  An equivalent selector to $( \":button\" )",
        "type": "Selectors"
    },
    ":checkbox selector": {
        "descr": "$( \":checkbox\" ) is equivalent to $( \"[type=checkbox]\" ). As with other pseudo-class selectors (those that begin with a \":\") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector (\"*\") is implied. In other words, the bare $(':checkbox') is equivalent to $( \"*:checkbox\" ), so $( \"input:checkbox\" ) should be used instead.",
        "name": ":checkbox selector",
        "params": [],
        "path": "jquery/checkbox-selector",
        "syntax": "checkbox selector  Description: Selects all elements of type checkbox.  version added: 1.0jQuery( \":checkbox\" )  $( \":checkbox\" )",
        "type": "Selectors"
    },
    ":checked selector": {
        "descr": "The :checked selector works for checkboxes, radio buttons, and options of select elements.",
        "name": ":checked selector",
        "params": [],
        "path": "jquery/checked-selector",
        "syntax": "checked selector  Description: Matches all elements that are checked or selected.  version added: 1.0jQuery( \":checked\" )  The :checked",
        "type": "Selectors"
    },
    ":contains() selector": {
        "descr": "The matching text can appear directly within the selected element, in any of that element's descendants, or a combination thereof. As with attribute value selectors, text inside the parentheses of :contains() can be written as a bare word or surrounded by quotation marks. The text must have matching case to be selected.",
        "name": ":contains() selector",
        "params": [],
        "path": "jquery/contains-selector",
        "syntax": "contains selector  Description: Select all elements that contain the specified text.   version added: 1.1.4jQuery( \":contains(text)\" ) text: A string of text to look for. It's case sensitive.",
        "type": "Selectors"
    },
    ":disabled selector": {
        "descr": "As with other pseudo-class selectors (those that begin with a \":\"), it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector (\"*\") is implied. In other words, the bare $(':disabled') is equivalent to $('*:disabled'), so $('input:disabled') or similar should be used instead.",
        "name": ":disabled selector",
        "params": [],
        "path": "jquery/disabled-selector",
        "syntax": "disabled selector  Description: Selects all elements that are disabled.  version added: 1.0jQuery( \":disabled\" )  As with other pseudo-class selectors (those that begin with a \":\"), it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector (\"*\") is implied. In other words, the bare $(':disabled')",
        "type": "Selectors"
    },
    ":empty selector": {
        "descr": "This is the inverse of :parent.",
        "name": ":empty selector",
        "params": [],
        "path": "jquery/empty-selector",
        "syntax": "empty selector  Description: Select all elements that have no children (including text nodes).",
        "type": "Selectors"
    },
    ":enabled selector": {
        "descr": "As with other pseudo-class selectors (those that begin with a \":\") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ( \"*\" ) is implied. In other words, the bare $( \":enabled\" ) is equivalent to $( \"*:enabled\" ), so $( \"input:enabled\" ) or similar should be used instead.",
        "name": ":enabled selector",
        "params": [],
        "path": "jquery/enabled-selector",
        "syntax": "enabled selector  Description: Selects all elements that are enabled.  version added: 1.0jQuery( \":enabled\" )  As with other pseudo-class selectors (those that begin with a \":\") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ( \"*\" ) is implied. In other words, the bare $( \":enabled\" )",
        "type": "Selectors"
    },
    ":eq() selector": {
        "descr": "The index-related selectors (:eq(), :lt(), :gt(), :even, :odd) filter the set of elements that have matched the expressions that precede them. They narrow the set down based on the order of the elements within this matched set. For example, if elements are first selected with a class selector (.myclass) and four elements are returned, these elements are given indices 0 through 3 for the purposes of these selectors.",
        "name": ":eq() selector",
        "params": [],
        "path": "jquery/eq-selector",
        "syntax": "eq selector  Description: Select the element at index n within the matched set.    version added: 1.0jQuery( \":eq(index)\" ) index: Zero-based index of the element to match.",
        "type": "Selectors"
    },
    ":even selector": {
        "descr": "In particular, note that the 0-based indexing means that, counter-intuitively, :even selects the first element, third element, and so on within the matched set.",
        "name": ":even selector",
        "params": [],
        "path": "jquery/even-selector",
        "syntax": "even selector  Description: Selects even elements, zero-indexed. See also odd.  version added: 1.0jQuery( \":even\" )  In particular, note that the 0-based indexing means that, counter-intuitively, :even",
        "type": "Selectors"
    },
    ":file selector": {
        "descr": ":file is equivalent to [type=\"file\"]. As with other pseudo-class selectors (those that begin with a \":\") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector (\"*\") is implied. In other words, the bare $( \":file\" ) is equivalent to $(\"*:file\" ), so $( \"input:file\" ) should be used instead.",
        "name": ":file selector",
        "params": [],
        "path": "jquery/file-selector",
        "syntax": "file selector  Description: Selects all elements of type file.  version added: 1.0jQuery( \":file\" )  :file",
        "type": "Selectors"
    },
    ":first selector": {
        "descr": "The :first pseudo-class is equivalent to :eq( 0 ). It could also be written as :lt( 1 ). While this matches only a single element, :first-child can match more than one: One for each parent.",
        "name": ":first selector",
        "params": [],
        "path": "jquery/first-selector",
        "syntax": "first selector  Description: Selects the first matched DOM element.  version added: 1.0jQuery( \":first\" )  The :first",
        "type": "Selectors"
    },
    ":first-child selector": {
        "descr": "While :first matches only a single element, the :first-child selector can match more than one: one for each parent. This is equivalent to :nth-child(1).",
        "name": ":first-child selector",
        "params": [],
        "path": "jquery/first-child-selector",
        "syntax": "first-child selector  Description: Selects all elements that are the first child of their parent.  version added: 1.1.4jQuery( \":first-child\" )  While :first matches only a single element, the :first-child",
        "type": "Selectors"
    },
    ":first-of-type selector": {
        "descr": "The :first-of-type selector matches elements that have no other element with both the same parent and the same element name coming before it in the document tree.",
        "name": ":first-of-type selector",
        "params": [],
        "path": "jquery/first-of-type-selector",
        "syntax": "first-of-type selector  Description: Selects all elements that are the first among siblings of the same element name.  version added: 1.9jQuery( \":first-of-type\" )  The :first-of-type",
        "type": "Selectors"
    },
    ":focus selector": {
        "descr": "As with other pseudo-class selectors (those that begin with a \":\"), it is recommended to precede :focus with a tag name or some other selector; otherwise, the universal selector ( \"*\" ) is implied. In other words, the bare $( \":focus\" ) is equivalent to $( \"*:focus\" ). If you are looking for the currently focused element, $( document.activeElement ) will retrieve it without having to search the whole DOM tree.",
        "name": ":focus selector",
        "params": [],
        "path": "jquery/focus-selector",
        "syntax": "focus selector  Description: Selects element if it is currently focused.  version added: 1.6jQuery( \":focus\" )  As with other pseudo-class selectors (those that begin with a \":\"), it is recommended to precede :focus",
        "type": "Selectors"
    },
    ":gt() selector": {
        "descr": "index-related selectors",
        "name": ":gt() selector",
        "params": [],
        "path": "jquery/gt-selector",
        "syntax": "gt selector  Description: Select all elements at an index greater than index within the matched set.    version added: 1.0jQuery( \":gt(index)\" ) index: Zero-based index.",
        "type": "Selectors"
    },
    ":has() selector": {
        "descr": "The expression $( \"div:has(p)\" ) matches a <div> if a <p> exists anywhere among its descendants, not just as a direct child.",
        "name": ":has() selector",
        "params": [],
        "path": "jquery/has-selector",
        "syntax": "has selector  Description: Selects elements which contain at least one element that matches the specified selector.   version added: 1.1.4jQuery( \":has(selector)\" ) selector: Any selector.",
        "type": "Selectors"
    },
    ":header selector": {
        "descr": "Adds a background and text color to all the headers on the page.",
        "name": ":header selector",
        "params": [],
        "path": "jquery/header-selector",
        "syntax": "header selector  Description: Selects all elements that are headers, like h1, h2, h3 and so on.  version added: 1.2jQuery( \":header\" ) Additional Notes:  Because :header",
        "type": "Selectors"
    },
    ":hidden selector": {
        "descr": "Elements can be considered hidden for several reasons:",
        "name": ":hidden selector",
        "params": [],
        "path": "jquery/hidden-selector",
        "syntax": "hidden selector  Description: Selects all elements that are hidden.  version added: 1.0jQuery( \":hidden\" )  Elements can be considered hidden for several reasons:",
        "type": "Selectors"
    },
    ":image selector": {
        "descr": ":image is equivalent to [type=\"image\"]",
        "name": ":image selector",
        "params": [],
        "path": "jquery/image-selector",
        "syntax": "image selector  Description: Selects all elements of type image.  version added: 1.0jQuery( \":image\" )  :image",
        "type": "Selectors"
    },
    ":input selector": {
        "descr": "The :input selector basically selects all form controls.",
        "name": ":input selector",
        "params": [],
        "path": "jquery/input-selector",
        "syntax": "input selector  Description: Selects all input, textarea, select and button elements.  version added: 1.0jQuery( \":input\" )  The :input",
        "type": "Selectors"
    },
    ":lang() selector": {
        "descr": "The :lang() selector matches elements that have a language value equal to the supplied language code or that start with the supplied language code immediately followed by \"-\". For example, the selector $(\"div:lang(en)\")will match <div lang=\"en\"> and <div lang=\"en-us\"> (and any of their descendant <div>s), but not <div lang=\"fr\">",
        "name": ":lang() selector",
        "params": [],
        "path": "jquery/lang-selector",
        "syntax": "lang selector  Description: Selects all elements of the specified language.   version added: 1.9jQuery( \":lang(language)\" ) language: A language code.",
        "type": "Selectors"
    },
    ":last selector": {
        "descr": "Note that :last selects a single element by filtering the current jQuery collection and matching the last element within it.",
        "name": ":last selector",
        "params": [],
        "path": "jquery/last-selector",
        "syntax": "last selector  Description: Selects the last matched element.  version added: 1.0jQuery( \":last\" )  Note that :last",
        "type": "Selectors"
    },
    ":last-child selector": {
        "descr": "While :last matches only a single element, :last-child can match more than one: one for each parent.",
        "name": ":last-child selector",
        "params": [],
        "path": "jquery/last-child-selector",
        "syntax": "last-child selector  Description: Selects all elements that are the last child of their parent.  version added: 1.1.4jQuery( \":last-child\" )  While :last matches only a single element, :last-child",
        "type": "Selectors"
    },
    ":last-of-type selector": {
        "descr": "The :last-of-type selector matches elements that have no other element with the same parent and the same element name coming after it in the document tree.",
        "name": ":last-of-type selector",
        "params": [],
        "path": "jquery/last-of-type-selector",
        "syntax": "last-of-type selector  Description: Selects all elements that are the last among siblings of the same element name.  version added: 1.9jQuery( \":last-of-type\" )  The :last-of-type",
        "type": "Selectors"
    },
    ":lt() selector": {
        "descr": "index-related selectors",
        "name": ":lt() selector",
        "params": [],
        "path": "jquery/lt-selector",
        "syntax": "lt selector  Description: Select all elements at an index less than index within the matched set.    version added: 1.0jQuery( \":lt(index)\" ) index: Zero-based index.",
        "type": "Selectors"
    },
    ":not() selector": {
        "descr": "All selectors are accepted inside :not(), for example: :not(div a) and :not(div,a).",
        "name": ":not() selector",
        "params": [],
        "path": "jquery/not-selector",
        "syntax": "not selector  Description: Selects all elements that do not match the given selector.   version added: 1.0jQuery( \":not(selector)\" ) selector: A selector with which to filter by.",
        "type": "Selectors"
    },
    ":nth-child() selector": {
        "descr": "Because jQuery's implementation of :nth- selectors is strictly derived from the CSS specification, the value of n is \"1-indexed\", meaning that the counting starts at 1. For other selector expressions such as :eq() or :even jQuery follows JavaScript's \"0-indexed\" counting. Given a single <ul> containing two <li>s, $( \"li:nth-child(1)\" ) selects the first <li> while $( \"li:eq(1)\" ) selects the second.",
        "name": ":nth-child() selector",
        "params": [],
        "path": "jquery/nth-child-selector",
        "syntax": "nth-child selector  Description: Selects all elements that are the nth-child of their parent.   version added: 1.1.4jQuery( \":nth-child(index/even/odd/equation)\" ) index: The index of each child to match, starting with 1",
        "type": "Selectors"
    },
    ":nth-last-child() selector": {
        "descr": "Because jQuery's implementation of :nth- selectors is strictly derived from the CSS specification, the value of n is \"1-indexed\", meaning that the counting starts at 1. For other selector expressions such as :eq() or :even jQuery follows JavaScript's \"0-indexed\" counting. Given a single <ul> containing three <li>s, $( \"li:nth-last-child(1)\" ) selects the third, last, <li>.",
        "name": ":nth-last-child() selector",
        "params": [],
        "path": "jquery/nth-last-child-selector",
        "syntax": "nth-last-child selector  Description: Selects all elements that are the nth-child of their parent, counting from the last element to the first.   version added: 1.9jQuery( \":nth-last-child(index/even/odd/equation)\" ) index: The index of each child to match, starting with the last one (1",
        "type": "Selectors"
    },
    ":nth-last-of-type() selector": {
        "descr": "Because jQuery's implementation of :nth- selectors is strictly derived from the CSS specification, the value of n is \"1-indexed\", meaning that the counting starts at 1. For other selector expressions such as :eq() or :even jQuery follows JavaScript's \"0-indexed\" counting. Given a single <ul> containing three <li>s, $('li:nth-last-of-type(1)') selects the third, last, <li>.",
        "name": ":nth-last-of-type() selector",
        "params": [],
        "path": "jquery/nth-last-of-type-selector",
        "syntax": "nth-last-of-type selector  Description: Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first.   version added: 1.9jQuery( \":nth-last-of-type(index/even/odd/equation)\" ) index: The index of each child to match, starting with the last one (1",
        "type": "Selectors"
    },
    ":nth-of-type() selector": {
        "descr": "Because jQuery's implementation of :nth- selectors is strictly derived from the CSS specification, the value of n is \"1-indexed\", meaning that the counting starts at 1. For other selector expressions such as :eq() or :even jQuery follows JavaScript's \"0-indexed\" counting.",
        "name": ":nth-of-type() selector",
        "params": [],
        "path": "jquery/nth-of-type-selector",
        "syntax": "nth-of-type selector  Description: Selects all elements that are the nth child of their parent in relation to siblings with the same element name.   version added: 1.9jQuery( \":nth-of-type(index/even/odd/equation)\" ) index: The index of each child to match, starting with 1",
        "type": "Selectors"
    },
    ":odd selector": {
        "descr": "In particular, note that the 0-based indexing means that, counter-intuitively, :odd selects the second element, fourth element, and so on within the matched set.",
        "name": ":odd selector",
        "params": [],
        "path": "jquery/odd-selector",
        "syntax": "odd selector  Description: Selects odd elements, zero-indexed. See also even.  version added: 1.0jQuery( \":odd\" )  In particular, note that the 0-based indexing means that, counter-intuitively, :odd",
        "type": "Selectors"
    },
    ":only-child selector": {
        "descr": "If the parent has other child elements, nothing is matched.",
        "name": ":only-child selector",
        "params": [],
        "path": "jquery/only-child-selector",
        "syntax": "only-child selector  Description: Selects all elements that are the only child of their parent.  version added: 1.1.4jQuery( \":only-child\" )  If the parent has other child elements, nothing is matched.",
        "type": "Selectors"
    },
    ":only-of-type selector": {
        "descr": "If the parent has other child elements with the same element name, nothing is matched.",
        "name": ":only-of-type selector",
        "params": [],
        "path": "jquery/only-of-type-selector",
        "syntax": "only-of-type selector  Description: Selects all elements that have no siblings with the same element name.  version added: 1.9jQuery( \":only-of-type\" )  If the parent has other child elements with the same element name, nothing is matched.",
        "type": "Selectors"
    },
    ":parent selector": {
        "descr": "This is the inverse of :empty.",
        "name": ":parent selector",
        "params": [],
        "path": "jquery/parent-selector",
        "syntax": "parent selector  Description: Select all elements that have at least one child node (either an element or text).",
        "type": "Selectors"
    },
    ":password selector": {
        "descr": "$( \":password\" ) is equivalent to $( \"[type=password]\" ). As with other pseudo-class selectors (those that begin with a \":\") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ( \"*\" ) is implied. In other words, the bare $( \":password\" ) is equivalent to $( \"*:password\" ), so $( \"input:password\" ) should be used instead.",
        "name": ":password selector",
        "params": [],
        "path": "jquery/password-selector",
        "syntax": "password selector  Description: Selects all elements of type password.  version added: 1.0jQuery( \":password\" )  $( \":password\" )",
        "type": "Selectors"
    },
    ":radio selector": {
        "descr": "$( \":radio\" ) is equivalent to $( \"[type=radio]\" ). As with other pseudo-class selectors (those that begin with a \":\") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector (\"*\") is implied. In other words, the bare $( \":radio\" ) is equivalent to $( \"*:radio\" ), so $( \"input:radio\" ) should be used instead.",
        "name": ":radio selector",
        "params": [],
        "path": "jquery/radio-selector",
        "syntax": "radio selector  Description: Selects all elements of type radio.  version added: 1.0jQuery( \":radio\" )  $( \":radio\" )",
        "type": "Selectors"
    },
    ":reset selector": {
        "descr": ":reset is equivalent to [type=\"reset\"]",
        "name": ":reset selector",
        "params": [],
        "path": "jquery/reset-selector",
        "syntax": "reset selector  Description: Selects all elements of type reset.  version added: 1.0jQuery( \":reset\" )  :reset",
        "type": "Selectors"
    },
    ":root selector": {
        "descr": "In HTML, the root of the document, and thus the element that $(\":root\") selects, is always the <html> element.",
        "name": ":root selector",
        "params": [],
        "path": "jquery/root-selector",
        "syntax": "root selector  Description: Selects the element that is the root of the document.  version added: 1.9jQuery( \":root\" )  In HTML, the root of the document, and thus the element that $(\":root\")",
        "type": "Selectors"
    },
    ":selected selector": {
        "descr": "The :selected selector works for <option> elements. It does not work for checkboxes or radio inputs; use :checked for them.",
        "name": ":selected selector",
        "params": [],
        "path": "jquery/selected-selector",
        "syntax": "selected selector  Description: Selects all elements that are selected.  version added: 1.0jQuery( \":selected\" )  The :selected",
        "type": "Selectors"
    },
    ":submit selector": {
        "descr": "The :submit selector typically applies to button or input elements. Note that some browsers treat <button> element as type=\"submit\" implicitly while others (such as Internet Explorer) do not. To ensure that markup works consistently across all browsers and guarantee that it is possible to consistently select buttons that will submit a form, always specify a type property.",
        "name": ":submit selector",
        "params": [],
        "path": "jquery/submit-selector",
        "syntax": "submit selector  Description: Selects all elements of type submit.  version added: 1.0jQuery( \":submit\" )  The :submit",
        "type": "Selectors"
    },
    ":target selector": {
        "descr": "If the document's URI contains a fragment identifier, or hash, then the :target selector will match the element with an ID that matches the identifier. For example, given a document with a URI of https://example.com/#foo, $( \"p:target\" ) will select the <p id=\"foo\"> element.",
        "name": ":target selector",
        "params": [],
        "path": "jquery/target-selector",
        "syntax": "target selector  Description: Selects the target element indicated by the fragment identifier of the document's URI.  version added: 1.9jQuery( \":target\" )  If the document's URI contains a fragment identifier, or hash, then the :target",
        "type": "Selectors"
    },
    ":text selector": {
        "descr": "$( \":text\" ) allows us to select all <input type=\"text\"> elements. As with other pseudo-class selectors (those that begin with a \":\") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ( \"*\" ) is implied. In other words, the bare $( \":text\" ) is equivalent to $( \"*:text\" ), so $( \"input:text\" ) should be used instead.",
        "name": ":text selector",
        "params": [],
        "path": "jquery/text-selector",
        "syntax": "text selector  Description: Selects all input elements of type text.  version added: 1.0jQuery( \":text\" )  $( \":text\" )",
        "type": "Selectors"
    },
    ":visible selector": {
        "descr": "Elements are considered visible if they consume space in the document. Visible elements have a width or height that is greater than zero.",
        "name": ":visible selector",
        "params": [],
        "path": "jquery/visible-selector",
        "syntax": "visible selector  Description: Selects all elements that are visible.  version added: 1.0jQuery( \":visible\" )  Elements are considered visible if they consume space in the document. Visible elements have a width or height that is greater than zero.",
        "type": "Selectors"
    },
    "<": {
        "descr": "JavaScript has both strict and type–converting comparisons. A strict comparison (e.g., ===) is only true if the operands are of the same type and the contents match. The more commonly-used abstract comparison (e.g. ==) converts the operands to the same type before making the comparison. For relational abstract comparisons (e.g., <=), the operands are first converted to primitives, then to the same type, before comparison.",
        "name": "<",
        "params": [],
        "path": "javascript/operators/comparison_operators#Less_than_operator",
        "syntax": "x == y  Examples 1 == 1 // true '1' == 1 // true 1 == '1' // true 0 == false // true 0 == null // false var object1 = {'key': 'value'}, object2 = {'key': 'value'}; object1 == object2 //false 0 == undefined // false null == undefined // true  Inequality (!=) The inequality operator returns true if the operands are not equal. If the two operands are not of the same type, JavaScript attempts to convert the operands to an appropriate type for the comparison. If both operands are objects, then JavaScript compares internal references which are not equal when operands refer to different objects in memory.",
        "type": "Operators"
    },
    "<<": {
        "descr": "Bitwise operators treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.",
        "name": "<<",
        "params": [],
        "path": "javascript/operators/bitwise_operators#Left_shift",
        "syntax": "Standard Defined in several sections of the specification: Bitwise NOT operator, Bitwise shift operators, Binary bitwise operators    ECMAScript Latest Draft (ECMA-262) Draft Defined in several sections of the specification: Bitwise NOT operator, Bitwise shift operators, Binary bitwise operators     Browser compatibilityUpdate compatibility data on GitHub",
        "type": "Operators"
    },
    "<<=": {
        "descr": "An assignment operator assigns a value to its left operand based on the value of its right operand.",
        "name": "<<=",
        "params": [],
        "path": "javascript/operators/assignment_operators#Left_shift_assignment",
        "syntax": "Operator: x = y  Examples // Assuming the following variables // x = 5 // y = 10 // z = 25 x = y // x is 10 x = y = z // x, y and z are all 25  Addition assignment The addition assignment operator adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible. See the addition operator for more details. Syntax Operator: x += y Meaning: x = x + y  Examples // Assuming the following variables // foo = 'foo' // bar = 5 // baz = true // Number + Number -> addition bar += 2 // 7 // Boolean + Number -> addition baz += 1 // 2 // Boolean + Boolean -> addition baz += false // 1 // Number + String -> concatenation bar += 'foo' // \"5foo\" // String + Boolean -> concatenation foo += false // \"foofalse\" // String + String -> concatenation foo += 'bar' // \"foobar\"  Subtraction assignment The subtraction assignment operator subtracts the value of the right operand from a variable and assigns the result to the variable. See the subtraction operator for more details. Syntax Operator: x -= y Meaning: x = x - y  Examples // Assuming the following variable // bar = 5 bar -= 2 // 3 bar -= 'foo' // NaN  Multiplication assignment The multiplication assignment operator multiplies a variable by the value of the right operand and assigns the result to the variable. See the multiplication operator for more details. Syntax Operator: x *= y Meaning: x = x * y  Examples // Assuming the following variable // bar = 5 bar *= 2 // 10 bar *= 'foo' // NaN  Division assignment The division assignment operator divides a variable by the value of the right operand and assigns the result to the variable. See the division operator for more details. Syntax Operator: x /= y Meaning: x = x / y  Examples // Assuming the following variable // bar = 5 bar /= 2 // 2.5 bar /= 'foo' // NaN bar /= 0 // Infinity  Remainder assignment The remainder assignment operator divides a variable by the value of the right operand and assigns the remainder to the variable. See the remainder operator for more details. Syntax Operator: x %= y Meaning: x = x % y  Examples // Assuming the following variable // bar = 5 bar %= 2 // 1 bar %= 'foo' // NaN bar %= 0 // NaN  Exponentiation assignment The exponentiation assignment operator evaluates to the result of raising first operand to the power second operand. See the exponentiation operator for more details. Syntax Operator: x **= y Meaning: x = x ** y  Examples // Assuming the following variable // bar = 5 bar **= 2 // 25 bar **= 'foo' // NaN Left shift assignment The left shift assignment operator moves the specified amount of bits to the left and assigns the result to the variable. See the left shift operator for more details. Syntax Operator: x <<= y Meaning: x = x << y  Examples var bar = 5; // (00000000000000000000000000000101) bar <<= 2; // 20 (00000000000000000000000000010100)",
        "type": "Operators"
    },
    "<=": {
        "descr": "JavaScript has both strict and type–converting comparisons. A strict comparison (e.g., ===) is only true if the operands are of the same type and the contents match. The more commonly-used abstract comparison (e.g. ==) converts the operands to the same type before making the comparison. For relational abstract comparisons (e.g., <=), the operands are first converted to primitives, then to the same type, before comparison.",
        "name": "<=",
        "params": [],
        "path": "javascript/operators/comparison_operators#Less_than_or_equal_operator",
        "syntax": "x == y  Examples 1 == 1 // true '1' == 1 // true 1 == '1' // true 0 == false // true 0 == null // false var object1 = {'key': 'value'}, object2 = {'key': 'value'}; object1 == object2 //false 0 == undefined // false null == undefined // true  Inequality (!=) The inequality operator returns true if the operands are not equal. If the two operands are not of the same type, JavaScript attempts to convert the operands to an appropriate type for the comparison. If both operands are objects, then JavaScript compares internal references which are not equal when operands refer to different objects in memory.",
        "type": "Operators"
    },
    "=": {
        "descr": "An assignment operator assigns a value to its left operand based on the value of its right operand.",
        "name": "=",
        "params": [],
        "path": "javascript/operators/assignment_operators#Assignment",
        "syntax": "Operator: x = y  Examples // Assuming the following variables // x = 5 // y = 10 // z = 25 x = y // x is 10 x = y = z // x, y and z are all 25  Addition assignment The addition assignment operator adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible. See the addition operator for more details. Syntax Operator: x += y Meaning: x = x + y  Examples // Assuming the following variables // foo = 'foo' // bar = 5 // baz = true // Number + Number -> addition bar += 2 // 7 // Boolean + Number -> addition baz += 1 // 2 // Boolean + Boolean -> addition baz += false // 1 // Number + String -> concatenation bar += 'foo' // \"5foo\" // String + Boolean -> concatenation foo += false // \"foofalse\" // String + String -> concatenation foo += 'bar' // \"foobar\"  Subtraction assignment The subtraction assignment operator subtracts the value of the right operand from a variable and assigns the result to the variable. See the subtraction operator for more details. Syntax Operator: x -= y Meaning: x = x - y  Examples // Assuming the following variable // bar = 5 bar -= 2 // 3 bar -= 'foo' // NaN  Multiplication assignment The multiplication assignment operator multiplies a variable by the value of the right operand and assigns the result to the variable. See the multiplication operator for more details. Syntax Operator: x *= y Meaning: x = x * y  Examples // Assuming the following variable // bar = 5 bar *= 2 // 10 bar *= 'foo' // NaN  Division assignment The division assignment operator divides a variable by the value of the right operand and assigns the result to the variable. See the division operator for more details. Syntax Operator: x /= y Meaning: x = x / y  Examples // Assuming the following variable // bar = 5 bar /= 2 // 2.5 bar /= 'foo' // NaN bar /= 0 // Infinity  Remainder assignment The remainder assignment operator divides a variable by the value of the right operand and assigns the remainder to the variable. See the remainder operator for more details. Syntax Operator: x %= y Meaning: x = x % y  Examples // Assuming the following variable // bar = 5 bar %= 2 // 1 bar %= 'foo' // NaN bar %= 0 // NaN  Exponentiation assignment The exponentiation assignment operator evaluates to the result of raising first operand to the power second operand. See the exponentiation operator for more details. Syntax Operator: x **= y Meaning: x = x ** y  Examples // Assuming the following variable // bar = 5 bar **= 2 // 25 bar **= 'foo' // NaN Left shift assignment The left shift assignment operator moves the specified amount of bits to the left and assigns the result to the variable. See the left shift operator for more details. Syntax Operator: x <<= y Meaning: x = x << y  Examples var bar = 5; // (00000000000000000000000000000101) bar <<= 2; // 20 (00000000000000000000000000010100)",
        "type": "Operators"
    },
    "==": {
        "descr": "JavaScript has both strict and type–converting comparisons. A strict comparison (e.g., ===) is only true if the operands are of the same type and the contents match. The more commonly-used abstract comparison (e.g. ==) converts the operands to the same type before making the comparison. For relational abstract comparisons (e.g., <=), the operands are first converted to primitives, then to the same type, before comparison.",
        "name": "==",
        "params": [],
        "path": "javascript/operators/comparison_operators#Equality",
        "syntax": "x == y  Examples 1 == 1 // true '1' == 1 // true 1 == '1' // true 0 == false // true 0 == null // false var object1 = {'key': 'value'}, object2 = {'key': 'value'}; object1 == object2 //false 0 == undefined // false null == undefined // true  Inequality (!=) The inequality operator returns true if the operands are not equal. If the two operands are not of the same type, JavaScript attempts to convert the operands to an appropriate type for the comparison. If both operands are objects, then JavaScript compares internal references which are not equal when operands refer to different objects in memory.",
        "type": "Operators"
    },
    "===": {
        "descr": "JavaScript has both strict and type–converting comparisons. A strict comparison (e.g., ===) is only true if the operands are of the same type and the contents match. The more commonly-used abstract comparison (e.g. ==) converts the operands to the same type before making the comparison. For relational abstract comparisons (e.g., <=), the operands are first converted to primitives, then to the same type, before comparison.",
        "name": "===",
        "params": [],
        "path": "javascript/operators/comparison_operators#Identity",
        "syntax": "x == y  Examples 1 == 1 // true '1' == 1 // true 1 == '1' // true 0 == false // true 0 == null // false var object1 = {'key': 'value'}, object2 = {'key': 'value'}; object1 == object2 //false 0 == undefined // false null == undefined // true  Inequality (!=) The inequality operator returns true if the operands are not equal. If the two operands are not of the same type, JavaScript attempts to convert the operands to an appropriate type for the comparison. If both operands are objects, then JavaScript compares internal references which are not equal when operands refer to different objects in memory.",
        "type": "Operators"
    },
    ">": {
        "descr": "JavaScript has both strict and type–converting comparisons. A strict comparison (e.g., ===) is only true if the operands are of the same type and the contents match. The more commonly-used abstract comparison (e.g. ==) converts the operands to the same type before making the comparison. For relational abstract comparisons (e.g., <=), the operands are first converted to primitives, then to the same type, before comparison.",
        "name": ">",
        "params": [],
        "path": "javascript/operators/comparison_operators#Greater_than_operator",
        "syntax": "x == y  Examples 1 == 1 // true '1' == 1 // true 1 == '1' // true 0 == false // true 0 == null // false var object1 = {'key': 'value'}, object2 = {'key': 'value'}; object1 == object2 //false 0 == undefined // false null == undefined // true  Inequality (!=) The inequality operator returns true if the operands are not equal. If the two operands are not of the same type, JavaScript attempts to convert the operands to an appropriate type for the comparison. If both operands are objects, then JavaScript compares internal references which are not equal when operands refer to different objects in memory.",
        "type": "Operators"
    },
    ">=": {
        "descr": "JavaScript has both strict and type–converting comparisons. A strict comparison (e.g., ===) is only true if the operands are of the same type and the contents match. The more commonly-used abstract comparison (e.g. ==) converts the operands to the same type before making the comparison. For relational abstract comparisons (e.g., <=), the operands are first converted to primitives, then to the same type, before comparison.",
        "name": ">=",
        "params": [],
        "path": "javascript/operators/comparison_operators#Greater_than_or_equal_operator",
        "syntax": "x == y  Examples 1 == 1 // true '1' == 1 // true 1 == '1' // true 0 == false // true 0 == null // false var object1 = {'key': 'value'}, object2 = {'key': 'value'}; object1 == object2 //false 0 == undefined // false null == undefined // true  Inequality (!=) The inequality operator returns true if the operands are not equal. If the two operands are not of the same type, JavaScript attempts to convert the operands to an appropriate type for the comparison. If both operands are objects, then JavaScript compares internal references which are not equal when operands refer to different objects in memory.",
        "type": "Operators"
    },
    ">>": {
        "descr": "Bitwise operators treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.",
        "name": ">>",
        "params": [],
        "path": "javascript/operators/bitwise_operators#Right_shift",
        "syntax": "Standard Defined in several sections of the specification: Bitwise NOT operator, Bitwise shift operators, Binary bitwise operators    ECMAScript Latest Draft (ECMA-262) Draft Defined in several sections of the specification: Bitwise NOT operator, Bitwise shift operators, Binary bitwise operators     Browser compatibilityUpdate compatibility data on GitHub",
        "type": "Operators"
    },
    ">>=": {
        "descr": "An assignment operator assigns a value to its left operand based on the value of its right operand.",
        "name": ">>=",
        "params": [],
        "path": "javascript/operators/assignment_operators#Right_shift_assignment",
        "syntax": "Operator: x = y  Examples // Assuming the following variables // x = 5 // y = 10 // z = 25 x = y // x is 10 x = y = z // x, y and z are all 25  Addition assignment The addition assignment operator adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible. See the addition operator for more details. Syntax Operator: x += y Meaning: x = x + y  Examples // Assuming the following variables // foo = 'foo' // bar = 5 // baz = true // Number + Number -> addition bar += 2 // 7 // Boolean + Number -> addition baz += 1 // 2 // Boolean + Boolean -> addition baz += false // 1 // Number + String -> concatenation bar += 'foo' // \"5foo\" // String + Boolean -> concatenation foo += false // \"foofalse\" // String + String -> concatenation foo += 'bar' // \"foobar\"  Subtraction assignment The subtraction assignment operator subtracts the value of the right operand from a variable and assigns the result to the variable. See the subtraction operator for more details. Syntax Operator: x -= y Meaning: x = x - y  Examples // Assuming the following variable // bar = 5 bar -= 2 // 3 bar -= 'foo' // NaN  Multiplication assignment The multiplication assignment operator multiplies a variable by the value of the right operand and assigns the result to the variable. See the multiplication operator for more details. Syntax Operator: x *= y Meaning: x = x * y  Examples // Assuming the following variable // bar = 5 bar *= 2 // 10 bar *= 'foo' // NaN  Division assignment The division assignment operator divides a variable by the value of the right operand and assigns the result to the variable. See the division operator for more details. Syntax Operator: x /= y Meaning: x = x / y  Examples // Assuming the following variable // bar = 5 bar /= 2 // 2.5 bar /= 'foo' // NaN bar /= 0 // Infinity  Remainder assignment The remainder assignment operator divides a variable by the value of the right operand and assigns the remainder to the variable. See the remainder operator for more details. Syntax Operator: x %= y Meaning: x = x % y  Examples // Assuming the following variable // bar = 5 bar %= 2 // 1 bar %= 'foo' // NaN bar %= 0 // NaN  Exponentiation assignment The exponentiation assignment operator evaluates to the result of raising first operand to the power second operand. See the exponentiation operator for more details. Syntax Operator: x **= y Meaning: x = x ** y  Examples // Assuming the following variable // bar = 5 bar **= 2 // 25 bar **= 'foo' // NaN Left shift assignment The left shift assignment operator moves the specified amount of bits to the left and assigns the result to the variable. See the left shift operator for more details. Syntax Operator: x <<= y Meaning: x = x << y  Examples var bar = 5; // (00000000000000000000000000000101) bar <<= 2; // 20 (00000000000000000000000000010100)",
        "type": "Operators"
    },
    ">>>": {
        "descr": "Bitwise operators treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.",
        "name": ">>>",
        "params": [],
        "path": "javascript/operators/bitwise_operators#Unsigned_right_shift",
        "syntax": "Standard Defined in several sections of the specification: Bitwise NOT operator, Bitwise shift operators, Binary bitwise operators    ECMAScript Latest Draft (ECMA-262) Draft Defined in several sections of the specification: Bitwise NOT operator, Bitwise shift operators, Binary bitwise operators     Browser compatibilityUpdate compatibility data on GitHub",
        "type": "Operators"
    },
    ">>>=": {
        "descr": "An assignment operator assigns a value to its left operand based on the value of its right operand.",
        "name": ">>>=",
        "params": [],
        "path": "javascript/operators/assignment_operators#Unsigned_right_shift_assignment",
        "syntax": "Operator: x = y  Examples // Assuming the following variables // x = 5 // y = 10 // z = 25 x = y // x is 10 x = y = z // x, y and z are all 25  Addition assignment The addition assignment operator adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible. See the addition operator for more details. Syntax Operator: x += y Meaning: x = x + y  Examples // Assuming the following variables // foo = 'foo' // bar = 5 // baz = true // Number + Number -> addition bar += 2 // 7 // Boolean + Number -> addition baz += 1 // 2 // Boolean + Boolean -> addition baz += false // 1 // Number + String -> concatenation bar += 'foo' // \"5foo\" // String + Boolean -> concatenation foo += false // \"foofalse\" // String + String -> concatenation foo += 'bar' // \"foobar\"  Subtraction assignment The subtraction assignment operator subtracts the value of the right operand from a variable and assigns the result to the variable. See the subtraction operator for more details. Syntax Operator: x -= y Meaning: x = x - y  Examples // Assuming the following variable // bar = 5 bar -= 2 // 3 bar -= 'foo' // NaN  Multiplication assignment The multiplication assignment operator multiplies a variable by the value of the right operand and assigns the result to the variable. See the multiplication operator for more details. Syntax Operator: x *= y Meaning: x = x * y  Examples // Assuming the following variable // bar = 5 bar *= 2 // 10 bar *= 'foo' // NaN  Division assignment The division assignment operator divides a variable by the value of the right operand and assigns the result to the variable. See the division operator for more details. Syntax Operator: x /= y Meaning: x = x / y  Examples // Assuming the following variable // bar = 5 bar /= 2 // 2.5 bar /= 'foo' // NaN bar /= 0 // Infinity  Remainder assignment The remainder assignment operator divides a variable by the value of the right operand and assigns the remainder to the variable. See the remainder operator for more details. Syntax Operator: x %= y Meaning: x = x % y  Examples // Assuming the following variable // bar = 5 bar %= 2 // 1 bar %= 'foo' // NaN bar %= 0 // NaN  Exponentiation assignment The exponentiation assignment operator evaluates to the result of raising first operand to the power second operand. See the exponentiation operator for more details. Syntax Operator: x **= y Meaning: x = x ** y  Examples // Assuming the following variable // bar = 5 bar **= 2 // 25 bar **= 'foo' // NaN Left shift assignment The left shift assignment operator moves the specified amount of bits to the left and assigns the result to the variable. See the left shift operator for more details. Syntax Operator: x <<= y Meaning: x = x << y  Examples var bar = 5; // (00000000000000000000000000000101) bar <<= 2; // 20 (00000000000000000000000000010100)",
        "type": "Operators"
    },
    "@@iterator": {
        "descr": "The [@@iterator]() method returns a new Iterator object that iterates over the code points of a String value, returning each code point as a String value.",
        "name": "string.@@iterator",
        "params": [],
        "path": "javascript/global_objects/string/@@iterator",
        "syntax": "str[Symbol.iterator] Return value A new Iterator object. Examples Using [@@iterator]()",
        "type": "String"
    },
    "@@match": {
        "descr": "The [@@match]() method retrieves the matches when matching a string against a regular expression.",
        "name": "regExp.@@match",
        "params": [
            {
                "descr": "A String that is a target of the match.",
                "name": "str"
            }
        ],
        "path": "javascript/global_objects/regexp/@@match",
        "syntax": "regexp[Symbol.match](str)",
        "type": "RegExp"
    },
    "@@replace": {
        "descr": "The [@@replace]() method replaces some or all matches of a this pattern in a string by a replacement, and returns the result of the replacement as a new string. The replacement can be a string or a function to be called for each match.",
        "name": "regExp.@@replace",
        "params": [
            {
                "descr": "A String that is a target of the replacement.",
                "name": "str"
            },
            {
                "descr": "The String that replaces the substring. ",
                "name": "newSubStr (replacement)"
            },
            {
                "descr": "A function to be invoked to create the new substring. ",
                "name": "function (replacement)"
            }
        ],
        "path": "javascript/global_objects/regexp/@@replace",
        "syntax": "regexp[Symbol.replace](str, newSubStr|function)",
        "type": "RegExp"
    },
    "@@search": {
        "descr": "The [@@search]() method executes a search for a match between a this regular expression and a string.",
        "name": "regExp.@@search",
        "params": [
            {
                "descr": "A String that is a target of the search.",
                "name": "str"
            },
            {
                "descr": "If successful, [@@search]() returns the index of the first match of the regular expression inside the string. ",
                "name": "integer"
            }
        ],
        "path": "javascript/global_objects/regexp/@@search",
        "syntax": "regexp[Symbol.search](str)",
        "type": "RegExp"
    },
    "@@species": {
        "descr": "The RegExp[@@species] accessor property returns the RegExp constructor.",
        "name": "RegExp.@@species",
        "params": [],
        "path": "javascript/global_objects/regexp/@@species",
        "syntax": "RegExp[Symbol.species]  Description The species accessor property returns the default constructor for RegExp objects. Subclass constructors may over-ride it to change the constructor assignment. Examples The species property returns the default constructor function, which is the RegExp constructor for RegExp objects: RegExp[Symbol.species]; // function RegExp()",
        "type": "RegExp"
    },
    "@@split": {
        "descr": "The [@@split]() method splits a String object into an array of strings by separating the string into substrings.",
        "name": "regExp.@@split",
        "params": [
            {
                "descr": "The target of the split operation.",
                "name": "str"
            },
            {
                "descr": "Optional. Integer specifying a limit on the number of splits to be found. ",
                "name": "limit"
            }
        ],
        "path": "javascript/global_objects/regexp/@@split",
        "syntax": "regexp[Symbol.split](str[, limit])",
        "type": "RegExp"
    },
    "@@toPrimitive": {
        "descr": "The [@@toPrimitive]() method converts a Date object to a primitive value.",
        "name": "date.@@toPrimitive",
        "params": [],
        "path": "javascript/global_objects/date/@@toprimitive",
        "syntax": "Date()[Symbol.toPrimitive](hint);",
        "type": "Date"
    },
    "@@unscopables": {
        "descr": "The @@unscopable symbol property contains property names that were not included in the ECMAScript standard prior to the ES2015 version. These properties are excluded from with statement bindings.",
        "name": "array.@@unscopables",
        "params": [],
        "path": "javascript/global_objects/array/@@unscopables",
        "syntax": "arr[Symbol.unscopables] Description The default array properties that are excluded from with bindings are: copyWithin, entries, fill, find, findIndex, includes, keys, and values. See Symbol.unscopables for how to set unscopables for your own objects.    Property attributes of Array.prototype[@@unscopables]      Writable no   Enumerable no   Configurable yes    Examples The following code works fine in ES5 and below. However, in ECMAScript 2015 and later, the Array.prototype.keys()",
        "type": "Array"
    },
    "AbortController.abort": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "AbortController.abort",
        "params": [],
        "path": "dom/abortcontroller/abort",
        "syntax": "controller.abort();",
        "type": "Fetch"
    },
    "AbortController.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "AbortController.constructor",
        "params": [],
        "path": "dom/abortcontroller/abortcontroller",
        "syntax": "var controller = new AbortController();",
        "type": "Fetch"
    },
    "AbortController.signal": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "AbortController.signal",
        "params": [],
        "path": "dom/abortcontroller/signal",
        "syntax": "var signal = abortController.signal; Value An AbortSignal object instance. Examples In the following snippet, we aim to download a video using the Fetch API. We first create a controller using the AbortController()",
        "type": "Fetch"
    },
    "AbortSignal.aborted": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "AbortSignal.aborted",
        "params": [],
        "path": "dom/abortsignal/aborted",
        "syntax": "var isAborted = abortSignal.aborted; Value A Boolean Examples In the following snippet, we create a new AbortController object, and get its AbortSignal (available in the signal property). Later on we check whether or not it the signal has been aborted using the aborted",
        "type": "Fetch"
    },
    "AbortSignal.onabort": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "AbortSignal.onabort",
        "params": [],
        "path": "dom/abortsignal/onabort",
        "syntax": "abortSignal.onabort = function() { ... };",
        "type": "Fetch"
    },
    "AbsoluteOrientationSensor.constructor": {
        "descr": "The AbsoluteOrientationSensor constructor creates a new AbsoluteOrientationSensor object which describes the device's physical orientation in relation to the Earth's reference coordinate system.",
        "name": "AbsoluteOrientationSensor.constructor",
        "params": [
            {
                "descr": "Options are as follows:   frequency: The desired number of times per second a sample should be taken, meaning the number of times per second that sensor.onreading will be called. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/absoluteorientationsensor/absoluteorientationsensor",
        "syntax": "var absoluteOrientationSensor = new AbsoluteOrientationSensor([options])",
        "type": "Sensors"
    },
    "AbstractWorker.onerror": {
        "descr": "The AbstractWorker.onerror property of the AbstractWorker interface represents an EventHandler, that is a function to be called when the error event occurs and bubbles through the Worker.",
        "name": "AbstractWorker.onerror",
        "params": [],
        "path": "dom/abstractworker/onerror",
        "syntax": "myWorker.onerror = function() { ... };",
        "type": "Web Workers"
    },
    "Accelerometer.constructor": {
        "descr": "The Accelerometer constructor creates a new Accelerometer object which returns the acceleration of the device along all three axes at the time it is read.",
        "name": "Accelerometer.constructor",
        "params": [
            {
                "descr": "Options are as follows:   frequency: The desired number of times per second a sample should be taken, meaning the number of times per second that sensor.onerror will be called. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/accelerometer/accelerometer",
        "syntax": "var accelerometer = new Accelerometer([options])",
        "type": "Sensors"
    },
    "Accelerometer.x": {
        "descr": "The x read-only property of the Accelerometer interface returns a double precision integer containing the acceleration of the device along the its x axis.",
        "name": "Accelerometer.x",
        "params": [],
        "path": "dom/accelerometer/x",
        "syntax": "var xAcceleration = accelerometer.x Value A Number. Example Acceleration is typically read in the Sensor.onreading event callback. In the example below this occurs sixty times a second. let accelerometer = new Accelerometer({frequency: 60});\n or  accelerometer.addEventListener('reading', e => { console.log(\"Acceleration along the X-axis \" + accelerometer.x);\n or  console.log(\"Acceleration along the Y-axis \" + accelerometer.y);\n or  console.log(\"Acceleration along the Z-axis \" + accelerometer.z);\n or  });\n or  accelerometer.start();",
        "type": "Sensors"
    },
    "Accelerometer.y": {
        "descr": "The y read-only property of the Accelerometer interface returns a double precision integer containing the acceleration of the device along the its y axis.",
        "name": "Accelerometer.y",
        "params": [],
        "path": "dom/accelerometer/y",
        "syntax": "var yAcceleration = accelerometer.y Value A Number. Example Acceleration is typically read in the Sensor.onreading event callback. In the example below this occurs sixty times a second. let accelerometer = new Accelerometer({frequency: 60});\n or  accelerometer.addEventListener('reading', e => { console.log(\"Acceleration along the X-axis \" + accelerometer.x);\n or  console.log(\"Acceleration along the Y-axis \" + accelerometer.y);\n or  console.log(\"Acceleration along the Z-axis \" + accelerometer.z);\n or  });\n or  accelerometer.start();",
        "type": "Sensors"
    },
    "Accelerometer.z": {
        "descr": "The z read-only property of the Accelerometer interface returns a double precision integer containing the acceleration of the device along the its z axis.",
        "name": "Accelerometer.z",
        "params": [],
        "path": "dom/accelerometer/z",
        "syntax": "var zAcceleration = accelerometer.z Value A Number. Example Acceleration is typically read in the Sensor.onreading event callback. In the example below this occurs sixty times a second. let accelerometer = new Accelerometer({frequency: 60});\n or  accelerometer.addEventListener('reading', e => { console.log(\"Acceleration along the X-axis \" + accelerometer.x);\n or  console.log(\"Acceleration along the Y-axis \" + accelerometer.y);\n or  console.log(\"Acceleration along the Z-axis \" + accelerometer.z);\n or  });\n or  accelerometer.start();",
        "type": "Sensors"
    },
    "AddressErrors.addressLine": {
        "descr": "An object based on AddressErrors includes an addressLine property when validation of the address finds one or more errors in the array of strings in the address's addressLine. The returned string explains the error and should offer suggestions for how to correct it.",
        "name": "AddressErrors.addressLine",
        "params": [],
        "path": "dom/addresserrors/addressline",
        "syntax": "var addressLineError = AddressErrors.addressLine; Value If an error occurred during validation of the address due to one of the strings in the addressLine array having an invalid value, this property is set to a DOMString providing a human-readable error message explaining the validation error. The text should also include, when possible, advice about how to go about correcting the error. If the PaymentAddress object's addressLine property was determined to be valid, this property is not included in the AddressErrors dictionary. Specifications    Specification Status Comment   Payment Request APIThe definition of 'AddressErrors.addressLine' in that specification. Candidate Recommendation Initial definition.    Browser compatibility No compatibility data found. Please contribute data for \"api.AddressErrors.addressLine\" (depth: 1) to the MDN compatibility data repository.",
        "type": "Payments"
    },
    "AddressErrors.city": {
        "descr": "An object based on AddressErrors includes a city property when validation of the address fails for the value given for the address's city property. The returned string explains the error and should offer suggestions for how to correct it.",
        "name": "AddressErrors.city",
        "params": [],
        "path": "dom/addresserrors/city",
        "syntax": "var cityError = AddressErrors.city; Value If the value specified in the PaymentAddress object's city property could not be validated, this property contains a DOMString offering a human-readable explanation of the validation error and offers suggestions for correcting it. If the city value was validated successfully, this property is not included in the AddressErrors object. Specifications    Specification Status Comment   Payment Request APIThe definition of 'AddressErrors.city' in that specification. Candidate Recommendation Initial definition.    Browser compatibility No compatibility data found. Please contribute data for \"api.AddressErrors.city\" (depth: 1) to the MDN compatibility data repository.",
        "type": "Payments"
    },
    "AddressErrors.country": {
        "descr": "An object based on AddressErrors includes a country property if during validation of the address the specified value of country was determined to be invalid. The value is a string describing the error and should offer suggestions for how to correct it.",
        "name": "AddressErrors.country",
        "params": [],
        "path": "dom/addresserrors/country",
        "syntax": "var countryError = AddressErrors.country; Value If an error occurred during validation of the address due to the country property having an invalid value, this property is set to a DOMString providing a human-readable error message explaining the validation error. The text should also include, when possible, advice about how to go about correcting the error. If the PaymentAddress object's country property was determined to be valid, this property is not included in the dictionary. Specifications    Specification Status Comment   Payment Request APIThe definition of 'AddressErrors.country' in that specification. Candidate Recommendation Initial definition.    Browser compatibility No compatibility data found. Please contribute data for \"api.AddressErrors.country\" (depth: 1) to the MDN compatibility data repository.",
        "type": "Payments"
    },
    "AddressErrors.dependentLocality": {
        "descr": "An object based on AddressErrors includes a dependentLocality property when the address's dependentLocality property couldn't be validated. The returned string explains the error and should offer suggestions for how to correct it.",
        "name": "AddressErrors.dependentLocality",
        "params": [],
        "path": "dom/addresserrors/dependentlocality",
        "syntax": "var localityError = AddressErrors.dependentLocality; Value If the value specified in the PaymentAddress object's dependentLocality property could not be validated, this property contains a DOMString offering a human-readable explanation of the validation error and offers suggestions for correcting it. If the dependentLocality value was validated successfully, this property is not included in the AddressErrors object. Specifications    Specification Status Comment   Payment Request APIThe definition of 'AddressErrors.dependentLocality' in that specification. Candidate Recommendation Initial definition.    Browser compatibility No compatibility data found. Please contribute data for \"api.AddressErrors.dependentLocality\" (depth: 1) to the MDN compatibility data repository.",
        "type": "Payments"
    },
    "AddressErrors.organization": {
        "descr": "An object based on AddressErrors includes an organization property when the address's organization property couldn't be validated. The returned string explains the error and should offer suggestions for how to correct it.",
        "name": "AddressErrors.organization",
        "params": [],
        "path": "dom/addresserrors/organization",
        "syntax": "var organizationError = AddressErrors.organization; Value If the value specified in the PaymentAddress object's organization property could not be validated, this property contains a DOMString offering a human-readable explanation of the validation error and offers suggestions for correcting it. For example, if validation simply ensures that only permitted characters are included in the organization's name, this might return a string such as \"The organization name may only contain the letters A-Z, digits, spaces, and commas.\" If the organization value was validated successfully, this property is not included in the AddressErrors object. Specifications    Specification Status Comment   Payment Request APIThe definition of 'AddressErrors.organization' in that specification. Candidate Recommendation Initial definition.    Browser compatibility No compatibility data found. Please contribute data for \"api.AddressErrors.organization\" (depth: 1) to the MDN compatibility data repository.",
        "type": "Payments"
    },
    "AddressErrors.phone": {
        "descr": "An object based on AddressErrors includes a phone property when the address's phone property couldn't be validated. The returned string explains the error and should offer suggestions for how to correct it.",
        "name": "AddressErrors.phone",
        "params": [],
        "path": "dom/addresserrors/phone",
        "syntax": "var phoneError = AddressErrors.phone; Value If the value specified in the PaymentAddress object's phone property could not be validated, this property contains a DOMString offering a human-readable explanation of the validation error and offers suggestions for correcting it. If the phone value was validated successfully, this property is not included in the AddressErrors object. Specifications    Specification Status Comment   Payment Request APIThe definition of 'AddressErrors.phone' in that specification. Candidate Recommendation Initial definition.    Browser compatibility No compatibility data found. Please contribute data for \"api.AddressErrors.phone\" (depth: 1) to the MDN compatibility data repository.",
        "type": "Payments"
    },
    "AddressErrors.postalCode": {
        "descr": "An object based on AddressErrors includes a postalCode property when the address's postalCode property couldn't be validated. The returned string explains the error and should offer suggestions for how to correct it.",
        "name": "AddressErrors.postalCode",
        "params": [],
        "path": "dom/addresserrors/postalcode",
        "syntax": "var postcodeError = AddressErrors.postCode; Value If the value specified in the PaymentAddress object's postalCode property could not be validated, this property contains a DOMString offering a human-readable explanation of the validation error and offers suggestions for correcting it. If the postalCode value was validated successfully, this property is not included in the AddressErrors object. Specifications    Specification Status Comment   Payment Request APIThe definition of 'AddressErrors.postalCode' in that specification. Candidate Recommendation Initial definition.    Browser compatibility No compatibility data found. Please contribute data for \"api.AddressErrors.postalCode\" (depth: 1) to the MDN compatibility data repository.",
        "type": "Payments"
    },
    "AddressErrors.recipient": {
        "descr": "An object based on AddressErrors includes a recipient property when the address's recipient property couldn't be validated. The returned string explains the error and should offer suggestions for how to correct it.",
        "name": "AddressErrors.recipient",
        "params": [],
        "path": "dom/addresserrors/recipient",
        "syntax": "var recipientError = AddressErrors.recipient; Value If the value specified in the PaymentAddress object's recipient property could not be validated, this property contains a DOMString offering a human-readable explanation of the validation error and offers suggestions for correcting it. If the recipient value was validated successfully, this property is not included in the AddressErrors object. Specifications    Specification Status Comment   Payment Request APIThe definition of 'AddressErrors.recipient' in that specification. Candidate Recommendation Initial definition.    Browser compatibility No compatibility data found. Please contribute data for \"api.AddressErrors.recipient\" (depth: 1) to the MDN compatibility data repository.",
        "type": "Payments"
    },
    "AddressErrors.region": {
        "descr": "An object based on AddressErrors includes a region property when the address's region property couldn't be validated. The returned string explains the error and should offer suggestions for how to correct it.",
        "name": "AddressErrors.region",
        "params": [],
        "path": "dom/addresserrors/region",
        "syntax": "var regionError = AddressErrors.region; Value If the value specified in the PaymentAddress object's region property could not be validated, this property contains a DOMString offering a human-readable explanation of the validation error and offers suggestions for correcting it. If the region value was validated successfully, this property is not included in the AddressErrors object. Specifications    Specification Status Comment   Payment Request APIThe definition of 'AddressErrors.region' in that specification. Candidate Recommendation Initial definition.    Browser compatibility No compatibility data found. Please contribute data for \"api.AddressErrors.region\" (depth: 1) to the MDN compatibility data repository.",
        "type": "Payments"
    },
    "AddressErrors.regionCode": {
        "descr": "An object based on AddressErrors includes a regionCode property when the address's regionCode property couldn't be validated. The returned string explains the error and should offer suggestions for how to correct it.",
        "name": "AddressErrors.regionCode",
        "params": [],
        "path": "dom/addresserrors/regioncode",
        "syntax": "var regionCodeError = AddressErrors.regionCode; Value If the value specified in the PaymentAddress object's regionCode property could not be validated, this property contains a DOMString offering a human-readable explanation of the validation error and offers suggestions for correcting it. If the regionCode value was validated successfully, this property is not included in the AddressErrors object. Usage notes The region code is derived from the ISO 3166-2 country subdivision name standard. Specifications    Specification Status Comment   Payment Request APIThe definition of 'AddressErrors.regionCode' in that specification. Candidate Recommendation Initial definition.    Browser compatibility No compatibility data found. Please contribute data for \"api.AddressErrors.regionCode\" (depth: 1) to the MDN compatibility data repository.",
        "type": "Payments"
    },
    "AddressErrors.sortingCode": {
        "descr": "An object based on AddressErrors includes a sortingCode property when the address's sortingCode property couldn't be validated. The returned string explains the error and should offer suggestions for how to correct it.",
        "name": "AddressErrors.sortingCode",
        "params": [],
        "path": "dom/addresserrors/sortingcode",
        "syntax": "var sortingCodeError = AddressErrors.sortingCode; Value If the value specified in the PaymentAddress object's sortingCode property could not be validated, this property contains a DOMString offering a human-readable explanation of the validation error and offers suggestions for correcting it. If the sortingCode value was validated successfully, this property is not included in the AddressErrors object. Specifications    Specification Status Comment   Payment Request APIThe definition of 'AddressErrors.sortingCode' in that specification. Candidate Recommendation Initial definition.    Browser compatibility No compatibility data found. Please contribute data for \"api.AddressErrors.sortingCode\" (depth: 1) to the MDN compatibility data repository.",
        "type": "Payments"
    },
    "Ajax events": {
        "descr": "Ajax requests produce a number of different events that you can subscribe to. Here's a full list of the events and in what order they are triggered.",
        "name": "Ajax events",
        "params": [],
        "path": "jquery/ajax_events",
        "syntax": "document, calling any handlers which may be listening. You can listen for these events like so:  $(document).bind(\"ajaxSend\", function(){ $(\"#loading\").show();\n or  }).bind(\"ajaxComplete\", function(){ $(\"#loading\").hide();\n or  });",
        "type": "Ajax"
    },
    "All selector (\"*\"": {
        "descr": "Caution: The all, or universal, selector is extremely slow, except when used by itself.",
        "name": "All selector (\"*\"",
        "params": [],
        "path": "jquery/all-selector",
        "syntax": "all selector  Description: Selects all elements.  version added: 1.0jQuery( \"*\" )  Caution: The all, or universal, selector is extremely slow, except when used by itself.",
        "type": "Selectors"
    },
    "AmbientLightSensor.constructor": {
        "descr": "The AmbinentLightSensor() constructor creates a new AmbientLightSensor object, which returns the current light level or illuminance of the ambient light around the hosting device.",
        "name": "AmbientLightSensor.constructor",
        "params": [
            {
                "descr": "Currently only one option is supported:   frequency: The desired number of times per second a sample should be taken, meaning the number of times per second that sensor.onreading will be called. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/ambientlightsensor/ambientlightsensor",
        "syntax": "var ambientLightSensor = new AmbientLightSensor(options)",
        "type": "Ambient Light"
    },
    "AmbientLightSensor.illuminance": {
        "descr": "The illuminance property of the AmbientLightSensor interface returns the current light level in lux of the ambient light level around the hosting device.",
        "name": "AmbientLightSensor.illuminance",
        "params": [],
        "path": "dom/ambientlightsensor/illuminance",
        "syntax": "var level = AmbientLightSensor.illuminance Value A Number indicating the current light level in lux. Example if ( 'AmbientLightSensor' in window ) { const sensor = new AmbientLightSensor();\n or  sensor.onreading = () => { console.log('Current light level:', sensor.illuminance);\n or  }; sensor.onerror = (event) => { console.log(event.error.name, event.error.message);\n or  }; sensor.start();\n or  });",
        "type": "Ambient Light"
    },
    "AnalyserNode.constructor": {
        "descr": "Inherits parameters from the AudioNodeOptions dictionary.",
        "name": "AnalyserNode.constructor",
        "params": [
            {
                "descr": "A reference to an AudioContext or OfflineAudioContext.",
                "name": "context"
            },
            {
                "descr": "Options are as follows:   fftSize: The desired initial size of the FFT for frequency-domain analysis. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/analysernode/analysernode",
        "syntax": "var analyserNode = new AnalyserNode(context, options);",
        "type": "Audio"
    },
    "AnalyserNode.fftSize": {
        "descr": "An unsigned integer, representing the window size of the FFT, given in number of samples. A higher value will result in more details in the frequency domain but fewer details in the time domain.",
        "name": "AnalyserNode.fftSize",
        "params": [],
        "path": "dom/analysernode/fftsize",
        "syntax": "var curValue = analyserNode.fftSize; analyserNode.fftSize = newValue;  Value An unsigned integer, representing the window size of the FFT, given in number of samples. A higher value will result in more details in the frequency domain but fewer details in the time domain. Must be a power of 2 between 252^5 and 2152^15, so one of: 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, and 32768. Defaults to 2048. Note: If its value is not a power of 2, or it is outside the specified range, a DOMException with the name IndexSizeError is thrown. Example The following example shows basic usage of an AudioContext to create an AnalyserNode, then requestAnimationFrame and <canvas> to collect time domain data repeatedly and draw an \"oscilloscope style\" output of the current audio input. For more complete applied examples/information, check out our Voice-change-O-matic demo (see app.js lines 128–205 for relevant code).",
        "type": "Audio"
    },
    "AnalyserNode.frequencyBinCount": {
        "descr": "An unsigned integer, equal to the number of values that AnalyserNode.getByteFrequencyData() and AnalyserNode.getFloatFrequencyData() copy into the provided TypedArray.",
        "name": "AnalyserNode.frequencyBinCount",
        "params": [],
        "path": "dom/analysernode/frequencybincount",
        "syntax": "var arrayLength = analyserNode.frequencyBinCount;  Value An unsigned integer, equal to the number of values that AnalyserNode.getByteFrequencyData()",
        "type": "Audio"
    },
    "AnalyserNode.getByteFrequencyData": {
        "descr": "The getByteFrequencyData() method of the AnalyserNode interface copies the current frequency data into a Uint8Array (unsigned byte array) passed into it.",
        "name": "AnalyserNode.getByteFrequencyData",
        "params": [
            {
                "descr": "The Uint8Array that the frequency domain data will be copied to. ",
                "name": "array"
            },
            {
                "descr": "The Uint8Array that the frequency domain data will be copied to.",
                "name": "array"
            }
        ],
        "path": "dom/analysernode/getbytefrequencydata",
        "syntax": "var audioCtx = new AudioContext();\n or  var analyser = audioCtx.createAnalyser();\n or  var dataArray = new Uint8Array(analyser.frequencyBinCount);\n or  // Uint8Array should be the same length as the frequencyBinCount void analyser.getByteFrequencyData(dataArray);\n or  // fill the Uint8Array with data returned from getByteFrequencyData());",
        "type": "Audio"
    },
    "AnalyserNode.getByteTimeDomainData": {
        "descr": "The getByteTimeDomainData() method of the AnalyserNode Interface copies the current waveform, or time-domain, data into a Uint8Array (unsigned byte array) passed into it.",
        "name": "AnalyserNode.getByteTimeDomainData",
        "params": [
            {
                "descr": "The Uint8Array that the time domain data will be copied to. ",
                "name": "array"
            },
            {
                "descr": "The Uint8Array that the time domain data will be copied to.",
                "name": "array"
            }
        ],
        "path": "dom/analysernode/getbytetimedomaindata",
        "syntax": "var audioCtx = new AudioContext();\n or  var analyser = audioCtx.createAnalyser();\n or  var dataArray = new Uint8Array(analyser.fftSize);\n or  // Uint8Array should be the same length as the fftSize analyser.getByteTimeDomainData(dataArray);\n or  // fill the Uint8Array with data returned from getByteTimeDomainData());",
        "type": "Audio"
    },
    "AnalyserNode.getFloatFrequencyData": {
        "descr": "The getFloatFrequencyData() method of the AnalyserNode Interface copies the current frequency data into a Float32Array array passed into it.",
        "name": "AnalyserNode.getFloatFrequencyData",
        "params": [
            {
                "descr": "The Float32Array that the frequency domain data will be copied to. ",
                "name": "array"
            }
        ],
        "path": "dom/analysernode/getfloatfrequencydata",
        "syntax": "var audioCtx = new AudioContext();\n or  var analyser = audioCtx.createAnalyser();\n or  var dataArray = new Float32Array(analyser.frequencyBinCount);\n or  // Float32Array should be the same length as the frequencyBinCount void analyser.getFloatFrequencyData(dataArray);\n or  // fill the Float32Array with data returned from getFloatFrequencyData());",
        "type": "Audio"
    },
    "AnalyserNode.getFloatTimeDomainData": {
        "descr": "The getFloatTimeDomainData() method of the AnalyserNode Interface copies the current waveform, or time-domain, data into a Float32Array array passed into it.",
        "name": "AnalyserNode.getFloatTimeDomainData",
        "params": [
            {
                "descr": "The Float32Array that the time domain data will be copied to. ",
                "name": "array"
            },
            {
                "descr": "The Float32Array that the time domain data will be copied to.",
                "name": "array"
            }
        ],
        "path": "dom/analysernode/getfloattimedomaindata",
        "syntax": "var audioCtx = new AudioContext();\n or  var analyser = audioCtx.createAnalyser();\n or  var dataArray = new Float32Array(analyser.fftSize);\n or  // Float32Array needs to be the same length as the fftSize analyser.getFloatTimeDomainData(dataArray);\n or  // fill the Float32Array with data returned from getFloatTimeDomainData());",
        "type": "Audio"
    },
    "AnalyserNode.maxDecibels": {
        "descr": "A double, representing the maximum decibel value for scaling the FFT analysis data, where 0 dB is the loudest possible sound, -10 dB is a 10th of that, etc. The default value is -30 dB.",
        "name": "AnalyserNode.maxDecibels",
        "params": [],
        "path": "dom/analysernode/maxdecibels",
        "syntax": "var curValue = analyserNode.maxDecibels; analyserNode.maxDecibels = newValue;  Value A double, representing the maximum decibel value for scaling the FFT analysis data, where 0 dB is the loudest possible sound, -10 dB is a 10th of that, etc. The default value is -30 dB. When getting data from getFloatFrequencyData()",
        "type": "Audio"
    },
    "AnalyserNode.minDecibels": {
        "descr": "A double, representing the minimum decibel value for scaling the FFT analysis data, where 0 dB is the loudest possible sound, -10 dB is a 10th of that, etc. The default value is -100 dB.",
        "name": "AnalyserNode.minDecibels",
        "params": [],
        "path": "dom/analysernode/mindecibels",
        "syntax": "var curValue = analyserNode.minDecibels; analyserNode.minDecibels = newValue;  Value A double, representing the minimum decibel value for scaling the FFT analysis data, where 0 dB is the loudest possible sound, -10 dB is a 10th of that, etc. The default value is -100 dB. When getting data from getFloatFrequencyData()",
        "type": "Audio"
    },
    "AnalyserNode.smoothingTimeConstant": {
        "descr": "A double within the range 0 to 1 (0 meaning no time averaging). The default value is 0.8.",
        "name": "AnalyserNode.smoothingTimeConstant",
        "params": [],
        "path": "dom/analysernode/smoothingtimeconstant",
        "syntax": "var smoothValue = analyserNode.smoothingTimeConstant; analyserNode.smoothingTimeConstant = newValue;  Value A double within the range 0 to 1 (0 meaning no time averaging). The default value is 0.8",
        "type": "Audio"
    },
    "Animation.cancel": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Animation.cancel",
        "params": [],
        "path": "dom/animation/cancel",
        "syntax": "Animation.cancel();",
        "type": "Animation"
    },
    "Animation.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Animation.constructor",
        "params": [
            {
                "descr": "The target effect, as an object based on the AnimationEffectReadOnly interface, to assign to the animation. ",
                "name": "effect Optional"
            },
            {
                "descr": "Specifies the timeline with which to associate the animation, as an object of a type based on the AnimationTimeline interface. ",
                "name": "timeline Optional"
            }
        ],
        "path": "dom/animation/animation",
        "syntax": "var animation = new Animation([effect][, timeline]);",
        "type": "Animation"
    },
    "Animation.currentTime": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Animation.currentTime",
        "params": [],
        "path": "dom/animation/currenttime",
        "syntax": "var currentTime = Animation.currentTime; Animation.currentTime = newTime; Value A number representing the current time in milliseconds, or null to deactivate the animation. Examples In the Drink Me/Eat Me game, Alice's height is animated so it can go from small to large or large to small. At the start of the game, her height is set between the two extremes by setting her animation's currentTime to half her KeyframeEffect's duration: aliceChange.currentTime = aliceChange.effect.timing.duration / 2; A more generic means of seeking to the 50% mark of an animation would be: animation.currentTime = animation.effect.getComputedTiming().delay + animation.effect.getComputedTiming().activeDuration / 2;",
        "type": "Animation"
    },
    "Animation.effect": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Animation.effect",
        "params": [],
        "path": "dom/animation/effect",
        "syntax": "var effect = Animation.effect; Animation.effect = AnimationEffectReadOnly Value A AnimationEffectReadOnly object describing the target animation effect for the animation, or null to indicate no active effect.    Specification Status Comment   Web AnimationsThe definition of 'Animation.effect' in that specification. Working Draft Editor's draft.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   No  ?   63   63   48 Disabled    This property is supported in Firefox 48 but is read-only. It became writable in Firefox 51. Disabled From version 48: this feature is behind the dom.animations-api.core.enabled preference (needs to be set to true). To change preferences in Firefox, visit about:config.    No  No  No       Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   No  No  ?   63   63   48 Disabled    This property is supported in Firefox 48 but is read-only. It became writable in Firefox 51. Disabled From version 48: this feature is behind the dom.animations-api.core.enabled",
        "type": "Animation"
    },
    "Animation.finish": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Animation.finish",
        "params": [
            {
                "descr": "The player's playback rate is 0 or the animation's playback rate is greater than 0 and the end time of the animation is infinity.",
                "name": "InvalidState"
            }
        ],
        "path": "dom/animation/finish",
        "syntax": "Animation.finish();",
        "type": "Animation"
    },
    "Animation.finished": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Animation.finished",
        "params": [],
        "path": "dom/animation/finished",
        "syntax": "var animationsPromise = Animation.finished;  Value A Promise object which will resolve once the animation has finished running. Examples The following code waits until all animations running on the element elem have finished, then deletes the element from the DOM tree: Promise.all( elem.getAnimations().map( function(animation) { return animation.finished } ) ).then( function() { return elem.remove();\n or  } );",
        "type": "Animation"
    },
    "Animation.id": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Animation.id",
        "params": [],
        "path": "dom/animation/id",
        "syntax": "var animationsId = Animation.id; Animation.id = newIdString;  Value A DOMString which can be used to identify the animation, or null if the animation has no id. Examples In the Follow the White Rabbit example, you can assign the rabbitDownAnimation an id like so: rabbitDownAnimation.effect.id = \"rabbitGo\";  Specifications    Specification Status Comment   Web AnimationsThe definition of 'Animation.id' in that specification. Working Draft Editor's draft.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   50  ?   48   48  46 — 48Disabled   Disabled From version 46 until version 48 (exclusive): this feature is behind the dom.animations-api.core.enabled",
        "type": "Animation"
    },
    "Animation.oncancel": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Animation.oncancel",
        "params": [],
        "path": "dom/animation/oncancel",
        "syntax": "var cancelHandler = Animation.oncancel; Animation.oncancel = cancelHandler; Value A function to be executed when the animation is cancelled, or null if there is no cancel event handler. Examples If this animation is canceled, remove its element. animation.oncancel = function() { animation.effect.target.remove();\n or  };);",
        "type": "Animation"
    },
    "Animation.onfinish": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Animation.onfinish",
        "params": [],
        "path": "dom/animation/onfinish",
        "syntax": "var finishHandler = Animation.onfinish; Animation.onfinish = finishHandler; Value A function to be called to handle the finish event, or null if no finish event handler is set. Examples Animation.onfinish is used several times in the Alice in Web Animations API Land Growing/Shrinking Alice Game. Here is one instance where we add pointer events back to an element after its opacity animation has faded it in: // Add an animation to the game's ending credits var endingUI = document.getElementById(\"ending-ui\");\n or  var bringUI = endingUI.animate(keysFade, timingFade);\n or  // Pause said animation's credits bringUI.pause();\n or  // This function removes pointer events on the credits. hide(endingUI);\n or  // When the credits are later faded in, // we re-add the pointer events when they're done bringUI.onfinish = function() { endingUI.style.pointerEvents = 'auto'; };);",
        "type": "Animation"
    },
    "Animation.pause": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Animation.pause",
        "params": [
            {
                "descr": "The animation's currentTime is unresolved (for example, if it's never been played or isn't currently playing) and the end time of the animation is positive infinity.",
                "name": "InvalidStateError"
            }
        ],
        "path": "dom/animation/pause",
        "syntax": "animation.pause();",
        "type": "Animation"
    },
    "Animation.play": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Animation.play",
        "params": [],
        "path": "dom/animation/play",
        "syntax": "animation.play();",
        "type": "Animation"
    },
    "Animation.playState": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Animation.playState",
        "params": [
            {
                "descr": "The current time of the animation is unresolved and there are no pending tasks.",
                "name": "idle"
            },
            {
                "descr": "The animation is running.",
                "name": "running"
            },
            {
                "descr": "The animation was suspended and the Animation.currentTime property is not updating.",
                "name": "paused"
            },
            {
                "descr": "The animation has reached one of its boundaries and the Animation.currentTime property is not updating.",
                "name": "finished"
            }
        ],
        "path": "dom/animation/playstate",
        "syntax": "var currentPlayState = Animation.playState; Animation.playState = newState;  Value  idle The current time of the animation is unresolved and there are no pending tasks. running The animation is running. paused The animation was suspended and the Animation.currentTime property is not updating. finished The animation has reached one of its boundaries and the Animation.currentTime property is not updating.  Previously, Web Animations defined a pending value to indicate that some asynchronous operation such as initiating playback was yet to complete. This is now indicated by the separate Animation.pending property. Example In the Growing/Shrinking Alice Game example, players can get an ending with Alice crying into a pool of tears. In the game, for performance reasons, the tears should only be animating when they're visible. So they must be paused as soon as they are animated like so: // Setting up the tear animations tears.forEach(function(el) { el.animate( tearsFalling, { delay: getRandomMsRange(-1000, 1000), // randomized for each tear duration: getRandomMsRange(2000, 6000), // randomized for each tear iterations: Infinity, easing: 'cubic-bezier(0.6, 0.04, 0.98, 0.335)' });\n or  el.pause();\n or  });\n or  // Play the tears falling when the ending needs to be shown. tears.forEach(function(el) { el.play();\n or  });\n or  // Reset the crying tears animations and pause them. tears.forEach(function(el) { el.pause();\n or  el.currentTime = 0; });",
        "type": "Animation"
    },
    "Animation.playbackRate": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Animation.playbackRate",
        "params": [],
        "path": "dom/animation/playbackrate",
        "syntax": "var currentPlaybackRate = Animation.playbackRate; Animation.playbackRate = newRate;  Value Takes a number that can be 0, negative, or positive. Negative values reverse the animation. The value is a scaling factor, so for example a value of 2 would double the playback rate.  Setting an animation’s playbackRate to 0 effectively pauses the animation (however, its playstate does not necessarily become paused).",
        "type": "Animation"
    },
    "Animation.ready": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Animation.ready",
        "params": [],
        "path": "dom/animation/ready",
        "syntax": "var readyPromise = Animation.ready;  Value A Promise which resolves when the animation is ready to be played. You'll typically use a construct similar to this when using the ready promise: animation.ready.then(function() { // Do whatever needs to be done when // the animation is ready to run });",
        "type": "Animation"
    },
    "Animation.reverse": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Animation.reverse",
        "params": [],
        "path": "dom/animation/reverse",
        "syntax": "animation.reverse();",
        "type": "Animation"
    },
    "Animation.startTime": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Animation.startTime",
        "params": [],
        "path": "dom/animation/starttime",
        "syntax": "var animationStartedWhen = Animation.startTime; Animation.startTime = newStartTime; Value A floating-point number representing the current time in milliseconds, or null if no time is set. You can read this value to determine what the start time is currently set at, and you can change this value to make the animation start at a different time. Examples In the Running on Web Animations API example, the we can sync all new animated cats by giving them all the same startTime as the original running cat: var catRunning = document.getElementById (\"withWAAPI\").animate(keyframes, timing);\n or  /* A function that makes new cats. */ function addCat(){ var newCat = document.createElement(\"div\");\n or  newCat.classList.add(\"cat\");\n or  return newCat; } /* This is the function that adds a cat to the WAAPI column */ function animateNewCatWithWAAPI() { // make a new cat var newCat = addCat();\n or  // animate said cat with the WAAPI's \"animate\" function var newAnimationPlayer = newCat.animate(keyframes, timing);\n or  // set the animation's start time to be the same as the original .cat#withWAAPI newAnimationPlayer.startTime = catRunning.startTime; // Add the cat to the pile. WAAPICats.appendChild(newCat);\n or  });",
        "type": "Animation"
    },
    "Animation.timeline": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Animation.timeline",
        "params": [],
        "path": "dom/animation/timeline",
        "syntax": "var animationsTimeline = Animation.timeline; Animation.timeline = newTimeline; Value A timeline object to use as the timing source for the animation, or null to use the default, which is the Document's timeline. Examples Here we set the animation's timeline to be the same as the document's timeline (this is the default timeline for all animations, by the way):",
        "type": "Animation"
    },
    "Animation.updatePlaybackRate": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Animation.updatePlaybackRate",
        "params": [
            {
                "descr": "The new speed to set. This may be a positive number (to speed up or slow down the animation), a negative number (to make it play backwards), or zero (to effectively pause the animation).",
                "name": "playbackRate"
            }
        ],
        "path": "dom/animation/updateplaybackrate",
        "syntax": "Animation.updatePlaybackRate(2);",
        "type": "Animation"
    },
    "AnimationEffect.getComputedTiming": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "AnimationEffect.getComputedTiming",
        "params": [
            {
                "descr": "Returns the calculated value of the iteration duration. ",
                "name": "duration"
            },
            {
                "descr": "The auto value is replaced with the appropriate EffectTiming.fill value.",
                "name": "fill"
            },
            {
                "descr": "The end time of the animation in milliseconds from the animation's start (if the KeyframeEffect is associated with an Animation). ",
                "name": "endTime"
            },
            {
                "descr": "The length of time in milliseconds that the animation's effects will run. ",
                "name": "activeDuration"
            },
            {
                "descr": "The current time of the animation in milliseconds. ",
                "name": "localTime"
            },
            {
                "descr": "Indicates how far along the animation is through its current iteration with values between 0 and 1. ",
                "name": "progress"
            },
            {
                "descr": "The number of times this animation has looped, starting from 0. ",
                "name": "currentIteration"
            }
        ],
        "path": "dom/animationeffect/getcomputedtiming",
        "syntax": "var currentTimeValues = animation.getComputedTiming();",
        "type": "Animation"
    },
    "AnimationEffect.getTiming": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "AnimationEffect.getTiming",
        "params": [],
        "path": "dom/animationeffect/gettiming",
        "syntax": "animationTiming = animation.getTiming();",
        "type": "Animation"
    },
    "AnimationEffect.updateTiming": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "AnimationEffect.updateTiming",
        "params": [
            {
                "descr": "An OptionalEffectTiming object containing the timing properties to update.",
                "name": "timing"
            }
        ],
        "path": "dom/animationeffect/updatetiming",
        "syntax": "animation.updateTiming(timing);",
        "type": "Animation"
    },
    "AnimationEvent.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "AnimationEvent.constructor",
        "params": [
            {
                "descr": "A DOMString representing the name of the type of the AnimationEvent. ",
                "name": "type"
            },
            {
                "descr": "A DOMString containing the value of the animation-name CSS property associated with the transition. ",
                "name": "animationName Optional"
            },
            {
                "descr": "A float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused. ",
                "name": "elapsedTime Optional"
            },
            {
                "descr": "Is a DOMString, starting with \"::\", containing the name of the pseudo-element the animation runs on. ",
                "name": "pseudoElement Optional"
            }
        ],
        "path": "dom/animationevent/animationevent",
        "syntax": "animationEvent = new AnimationEvent(type, {animationName: aPropertyName, elapsedTime : aFloat, pseudoElement: aPseudoElementName});",
        "type": "Animation"
    },
    "AnimationEvent.initAnimationEvent": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "AnimationEvent.initAnimationEvent",
        "params": [
            {
                "descr": "A DOMString identifying the specific type of animation event that occurred. ",
                "name": "typeArg"
            },
            {
                "descr": "A Boolean flag indicating if the event can bubble (true) or not (false).",
                "name": "canBubbleArg"
            },
            {
                "descr": "A Boolean flag indicating if the event associated action can be avoided (true) or not (false).",
                "name": "cancelableArg"
            },
            {
                "descr": "A DOMString containing the value of the animation-name CSS property associated with the transition.",
                "name": "animationNameArg"
            },
            {
                "descr": "A float indicating the amount of time the animation has been running, in seconds, as of the time the event was fired, excluding any time the animation was paused. ",
                "name": "elapsedTimeArg"
            }
        ],
        "path": "dom/animationevent/initanimationevent",
        "syntax": "animationEvent.initAnimationEvent(typeArg, canBubbleArg, cancelableArg, animationNameArg, elapsedTimeArg);",
        "type": "Animation"
    },
    "AnimationPlaybackEvent.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "AnimationPlaybackEvent.constructor",
        "params": [
            {
                "descr": "A DOMString representing the name of the event.",
                "name": "type"
            },
            {
                "descr": "An optional EventInit dictionary object containing the following fields:   bubbles Optional  Defaults to false, of type Boolean, indicating if the event bubbles or not.",
                "name": "eventInitDict Optional"
            },
            {
                "descr": "Defaults to false, of type Boolean, indicating if the event can be canceled or not.",
                "name": "cancelable Optional"
            },
            {
                "descr": "Defaults to null, of type any — an event-dependent value associated with the event.",
                "name": "detail Optional"
            }
        ],
        "path": "dom/animationplaybackevent/animationplaybackevent",
        "syntax": "var animationPlaybackEvent = new AnimationPlaybackEvent(type, eventInitDict);",
        "type": "Animation"
    },
    "AnimationTimeline.currentTime": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "AnimationTimeline.currentTime",
        "params": [],
        "path": "dom/animationtimeline/currenttime",
        "syntax": "var currentTime = AnimationTimeline.currentTime; Value A number representing the timeline's current time in milliseconds, or null if the timeline is inactive. Reduced time precision To offer protection against timing attacks and fingerprinting, the precision of animationTimeline.currentTime might get rounded depending on browser settings. In Firefox, the privacy.reduceTimerPrecision preference is enabled by default and defaults to 20us in Firefox 59; in 60 it will be 2ms. // reduced time precision (2ms) in Firefox 60 animationTimeline.currentTime; // 23.404 // 24.192 // 25.514 // ... // reduced time precision with `privacy.resistFingerprinting` enabled animationTimeline.currentTime; // 49.8 // 50.6 // 51.7 // ...",
        "type": "Animation"
    },
    "Arithmetic Operators": {
        "descr": "Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).",
        "name": "Arithmetic Operators",
        "params": [],
        "path": "javascript/operators/arithmetic_operators",
        "syntax": "Operator: x + y  Examples // Number + Number -> addition 1 + 2 // 3 // Boolean + Number -> addition true + 1 // 2 // Boolean + Boolean -> addition false + false // 0 // Number + String -> concatenation 5 + 'foo' // \"5foo\" // String + Boolean -> concatenation 'foo' + false // \"foofalse\" // String + String -> concatenation 'foo' + 'bar' // \"foobar\"  Subtraction (-)",
        "type": "Operators"
    },
    "Array": {
        "descr": "The JavaScript Array object is a global object that is used in the construction of arrays; which are high-level, list-like objects.",
        "name": "Array",
        "params": [
            {
                "descr": "A JavaScript array is initialized with the given elements, except in the case where a single argument is passed to the Array constructor and that argument is a number (see the arrayLength parameter below). Note that this special case only applies to JavaScript arrays created with the Array constructor, not array literals created with the bracket syntax.",
                "name": "elementN"
            },
            {
                "descr": "If the only argument passed to the Array constructor is an integer between 0 and 232-1 (inclusive), this returns a new JavaScript array with its length property set to that number (Note: this implies an array of arrayLength empty slots, not slots with actual undefined values). If the argument is any other number, a RangeError exception is thrown.",
                "name": "arrayLength"
            },
            {
                "descr": "The Array constructor's length property whose value is 1.",
                "name": "Array.length"
            },
            {
                "descr": "The constructor function that is used to create derived objects.",
                "name": "get Array[@@species]"
            },
            {
                "descr": "Allows the addition of properties to all array objects.",
                "name": "Array.prototype"
            },
            {
                "descr": "Creates a new Array instance from an array-like or iterable object.",
                "name": "Array.from()"
            },
            {
                "descr": "Returns true if a variable is an array, if not false.",
                "name": "Array.isArray()"
            },
            {
                "descr": "Creates a new Array instance with a variable number of arguments, regardless of number or type of the arguments.",
                "name": "Array.of()"
            },
            {
                "descr": "Specifies the function that creates an object's prototype.",
                "name": "Array.prototype.constructor"
            },
            {
                "descr": "Reflects the number of elements in an array.",
                "name": "Array.prototype.length"
            },
            {
                "descr": "A symbol containing property names to exclude from a with binding scope.",
                "name": "Array.prototype[@@unscopables]"
            },
            {
                "descr": "Copies a sequence of array elements within the array.",
                "name": "Array.prototype.copyWithin()"
            },
            {
                "descr": "Fills all the elements of an array from a start index to an end index with a static value.",
                "name": "Array.prototype.fill()"
            },
            {
                "descr": "Removes the last element from an array and returns that element.",
                "name": "Array.prototype.pop()"
            },
            {
                "descr": "Adds one or more elements to the end of an array and returns the new length of the array.",
                "name": "Array.prototype.push()"
            },
            {
                "descr": "Reverses the order of the elements of an array in place — the first becomes the last, and the last becomes the first.",
                "name": "Array.prototype.reverse()"
            },
            {
                "descr": "Removes the first element from an array and returns that element.",
                "name": "Array.prototype.shift()"
            },
            {
                "descr": "Sorts the elements of an array in place and returns the array.",
                "name": "Array.prototype.sort()"
            },
            {
                "descr": "Adds and/or removes elements from an array.",
                "name": "Array.prototype.splice()"
            },
            {
                "descr": "Adds one or more elements to the front of an array and returns the new length of the array.",
                "name": "Array.prototype.unshift()"
            },
            {
                "descr": "Returns a new array comprised of this array joined with other array(s) and/or value(s).",
                "name": "Array.prototype.concat()"
            },
            {
                "descr": "Determines whether an array contains a certain element, returning true or false as appropriate.",
                "name": "Array.prototype.includes()"
            },
            {
                "descr": "Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.",
                "name": "Array.prototype.indexOf()"
            },
            {
                "descr": "Joins all elements of an array into a string.",
                "name": "Array.prototype.join()"
            },
            {
                "descr": "Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.",
                "name": "Array.prototype.lastIndexOf()"
            },
            {
                "descr": "Extracts a section of an array and returns a new array.",
                "name": "Array.prototype.slice()"
            },
            {
                "descr": "Returns an array literal representing the specified array; you can use this value to create a new array. ",
                "name": "Array.prototype.toSource()"
            },
            {
                "descr": "Returns a string representing the array and its elements. ",
                "name": "Array.prototype.toString()"
            },
            {
                "descr": "Returns a localized string representing the array and its elements. ",
                "name": "Array.prototype.toLocaleString()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the key/value pairs for each index in the array.",
                "name": "Array.prototype.entries()"
            },
            {
                "descr": "Returns true if every element in this array satisfies the provided testing function.",
                "name": "Array.prototype.every()"
            },
            {
                "descr": "Creates a new array with all of the elements of this array for which the provided filtering function returns true.",
                "name": "Array.prototype.filter()"
            },
            {
                "descr": "Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.",
                "name": "Array.prototype.find()"
            },
            {
                "descr": "Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.",
                "name": "Array.prototype.findIndex()"
            },
            {
                "descr": "Calls a function for each element in the array.",
                "name": "Array.prototype.forEach()"
            },
            {
                "descr": "Returns a new Array Iterator that contains the keys for each index in the array.",
                "name": "Array.prototype.keys()"
            },
            {
                "descr": "Creates a new array with the results of calling a provided function on every element in this array.",
                "name": "Array.prototype.map()"
            },
            {
                "descr": "Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.",
                "name": "Array.prototype.reduce()"
            },
            {
                "descr": "Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.",
                "name": "Array.prototype.reduceRight()"
            },
            {
                "descr": "Returns true if at least one element in this array satisfies the provided testing function.",
                "name": "Array.prototype.some()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array.",
                "name": "Array.prototype.values()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array.",
                "name": "Array.prototype[@@iterator]()"
            }
        ],
        "path": "javascript/global_objects/array",
        "syntax": "[element0, element1, ..., elementN] new Array(element0, element1[, ...[, elementN]]) new Array(arrayLength)",
        "type": "Array"
    },
    "Array comprehensions": {
        "descr": "Obsolete since Gecko 58 (Firefox 58 / Thunderbird 58 / SeaMonkey 2.55)This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "Array comprehensions",
        "params": [],
        "path": "javascript/operators/array_comprehensions",
        "syntax": "Array.prototype.map, Array.prototype.filter, arrow functions, and spread syntax.  Obsolete since Gecko 58 (Firefox 58 / Thunderbird 58 / SeaMonkey 2.55)This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "type": "Operators"
    },
    "Array.@@species": {
        "descr": "The Array[@@species] accessor property returns the Array constructor.",
        "name": "Array.@@species",
        "params": [],
        "path": "javascript/global_objects/array/@@species",
        "syntax": "Array[Symbol.species]  Return value The Array constructor. Description The species accessor property returns the default constructor for Array objects. Subclass constructors may override it to change the constructor assignment. Examples The species property returns the default constructor function, which is the Array constructor for Array objects: Array[Symbol.species]; // function Array()",
        "type": "Array"
    },
    "Array.from": {
        "descr": "The Array.from() method creates a new, shallow-copied Array instance from an array-like or iterable object.",
        "name": "Array.from",
        "params": [
            {
                "descr": "An array-like or iterable object to convert to an array.",
                "name": "arrayLike"
            },
            {
                "descr": "Map function to call on every element of the array.",
                "name": "mapFnOptional"
            },
            {
                "descr": "Value to use as this when executing mapFn.",
                "name": "thisArgOptional"
            }
        ],
        "path": "javascript/global_objects/array/from",
        "syntax": "Array.from(arrayLike[, mapFn[, thisArg]])",
        "type": "Array"
    },
    "Array.isArray": {
        "descr": "The Array.isArray() method determines whether the passed value is an Array.",
        "name": "Array.isArray",
        "params": [
            {
                "descr": "The value to be checked.",
                "name": "value"
            }
        ],
        "path": "javascript/global_objects/array/isarray",
        "syntax": "Array.isArray(value)",
        "type": "Array"
    },
    "Array.of": {
        "descr": "The Array.of() method creates a new Array instance with a variable number of arguments, regardless of number or type of the arguments.",
        "name": "Array.of",
        "params": [
            {
                "descr": "Elements of which to create the array.",
                "name": "elementN"
            }
        ],
        "path": "javascript/global_objects/array/of",
        "syntax": "Array.of(element0[, element1[, ...[, elementN]]])",
        "type": "Array"
    },
    "Array.prototype": {
        "descr": "Array instances inherit from Array.prototype. As with all constructors, you can change the constructor's prototype object to make changes to all Array instances. For example, you can add new methods and properties to extend all Array objects. This is used for polyfilling, for example.",
        "name": "Array.prototype",
        "params": [
            {
                "descr": "Specifies the function that creates an object's prototype.",
                "name": "Array.prototype.constructor"
            },
            {
                "descr": "Reflects the number of elements in an array.",
                "name": "Array.prototype.length"
            },
            {
                "descr": "A symbol containing property names to exclude from a with binding scope.",
                "name": "Array.prototype[@@unscopables]"
            },
            {
                "descr": "Copies a sequence of array elements within the array.",
                "name": "Array.prototype.copyWithin()"
            },
            {
                "descr": "Fills all the elements of an array from a start index to an end index with a static value.",
                "name": "Array.prototype.fill()"
            },
            {
                "descr": "Removes the last element from an array and returns that element.",
                "name": "Array.prototype.pop()"
            },
            {
                "descr": "Adds one or more elements to the end of an array and returns the new length of the array.",
                "name": "Array.prototype.push()"
            },
            {
                "descr": "Reverses the order of the elements of an array in place — the first becomes the last, and the last becomes the first.",
                "name": "Array.prototype.reverse()"
            },
            {
                "descr": "Removes the first element from an array and returns that element.",
                "name": "Array.prototype.shift()"
            },
            {
                "descr": "Sorts the elements of an array in place and returns the array.",
                "name": "Array.prototype.sort()"
            },
            {
                "descr": "Adds and/or removes elements from an array.",
                "name": "Array.prototype.splice()"
            },
            {
                "descr": "Adds one or more elements to the front of an array and returns the new length of the array.",
                "name": "Array.prototype.unshift()"
            },
            {
                "descr": "Returns a new array comprised of this array joined with other array(s) and/or value(s).",
                "name": "Array.prototype.concat()"
            },
            {
                "descr": "Determines whether an array contains a certain element, returning true or false as appropriate.",
                "name": "Array.prototype.includes()"
            },
            {
                "descr": "Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.",
                "name": "Array.prototype.indexOf()"
            },
            {
                "descr": "Joins all elements of an array into a string.",
                "name": "Array.prototype.join()"
            },
            {
                "descr": "Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.",
                "name": "Array.prototype.lastIndexOf()"
            },
            {
                "descr": "Extracts a section of an array and returns a new array.",
                "name": "Array.prototype.slice()"
            },
            {
                "descr": "Returns an array literal representing the specified array; you can use this value to create a new array. ",
                "name": "Array.prototype.toSource()"
            },
            {
                "descr": "Returns a string representing the array and its elements. ",
                "name": "Array.prototype.toString()"
            },
            {
                "descr": "Returns a localized string representing the array and its elements. ",
                "name": "Array.prototype.toLocaleString()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the key/value pairs for each index in the array.",
                "name": "Array.prototype.entries()"
            },
            {
                "descr": "Returns true if every element in this array satisfies the provided testing function.",
                "name": "Array.prototype.every()"
            },
            {
                "descr": "Creates a new array with all of the elements of this array for which the provided filtering function returns true.",
                "name": "Array.prototype.filter()"
            },
            {
                "descr": "Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.",
                "name": "Array.prototype.find()"
            },
            {
                "descr": "Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.",
                "name": "Array.prototype.findIndex()"
            },
            {
                "descr": "Calls a function for each element in the array.",
                "name": "Array.prototype.forEach()"
            },
            {
                "descr": "Returns a new Array Iterator that contains the keys for each index in the array.",
                "name": "Array.prototype.keys()"
            },
            {
                "descr": "Creates a new array with the results of calling a provided function on every element in this array.",
                "name": "Array.prototype.map()"
            },
            {
                "descr": "Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.",
                "name": "Array.prototype.reduce()"
            },
            {
                "descr": "Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.",
                "name": "Array.prototype.reduceRight()"
            },
            {
                "descr": "Returns true if at least one element in this array satisfies the provided testing function.",
                "name": "Array.prototype.some()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array.",
                "name": "Array.prototype.values()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array.",
                "name": "Array.prototype[@@iterator]()"
            }
        ],
        "path": "javascript/global_objects/array/prototype",
        "syntax": "Array.prototype.toSource()",
        "type": "Array"
    },
    "ArrayBuffer": {
        "descr": "The ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer. You cannot directly manipulate the contents of an ArrayBuffer; instead, you create one of the typed array objects or a DataView object which represents the buffer in a specific format, and use that to read and write the contents of the buffer.",
        "name": "ArrayBuffer",
        "params": [
            {
                "descr": "The size, in bytes, of the array buffer to create.",
                "name": "length"
            },
            {
                "descr": "The ArrayBuffer constructor's length property whose value is 1.",
                "name": "ArrayBuffer.length"
            },
            {
                "descr": "The constructor function that is used to create derived objects.",
                "name": "get ArrayBuffer[@@species]"
            },
            {
                "descr": "Allows the addition of properties to all ArrayBuffer objects.",
                "name": "ArrayBuffer.prototype"
            },
            {
                "descr": "Returns true if arg is one of the ArrayBuffer views, such as typed array objects or a DataView. ",
                "name": "ArrayBuffer.isView(arg)"
            },
            {
                "descr": "Returns a new ArrayBuffer whose contents are taken from the oldBuffer's data and then is either truncated or zero-extended by newByteLength.",
                "name": "ArrayBuffer.transfer(oldBuffer [, newByteLength])"
            },
            {
                "descr": "Specifies the function that creates an object's prototype. ",
                "name": "ArrayBuffer.prototype.constructor"
            },
            {
                "descr": "The size, in bytes, of the array. ",
                "name": "ArrayBuffer.prototype.byteLength Read only"
            },
            {
                "descr": "Returns a new ArrayBuffer whose contents are a copy of this ArrayBuffer's bytes from begin, inclusive, up to end, exclusive. ",
                "name": "ArrayBuffer.prototype.slice()"
            },
            {
                "descr": "Has the same functionality as ArrayBuffer.prototype.slice().",
                "name": "ArrayBuffer.slice()"
            }
        ],
        "path": "javascript/global_objects/arraybuffer",
        "syntax": "new ArrayBuffer(length)",
        "type": "ArrayBuffer"
    },
    "ArrayBuffer.@@species": {
        "descr": "The ArrayBuffer[@@species] accessor property returns the ArrayBuffer constructor.",
        "name": "ArrayBuffer.@@species",
        "params": [],
        "path": "javascript/global_objects/arraybuffer/@@species",
        "syntax": "ArrayBuffer[Symbol.species]  Description The species accessor property returns the default constructor for ArrayBuffer objects. Subclass constructors may over-ride it to change the constructor assignment. Examples The species property returns the default constructor function, which is the ArrayBuffer constructor for ArrayBuffer objects: ArrayBuffer[Symbol.species]; // function ArrayBuffer()",
        "type": "ArrayBuffer"
    },
    "ArrayBuffer.isView": {
        "descr": "The ArrayBuffer.isView() method returns true if arg is one of the ArrayBuffer views, such as typed array objects or a DataView; false otherwise.",
        "name": "ArrayBuffer.isView",
        "params": [
            {
                "descr": "The argument to be checked.",
                "name": "arg"
            }
        ],
        "path": "javascript/global_objects/arraybuffer/isview",
        "syntax": "ArrayBuffer.isView(arg)",
        "type": "ArrayBuffer"
    },
    "Arrow functions": {
        "descr": "An arrow function expression has a shorter syntax than a function expression and does not have its own this, arguments, super, or new.target. These function expressions are best suited for non-method functions, and they cannot be used as constructors.",
        "name": "Arrow functions",
        "params": [],
        "path": "javascript/functions/arrow_functions",
        "syntax": "this, arguments, super, or new.target. These function expressions are best suited for non-method functions, and they cannot be used as constructors.  Syntax Basic syntax (param1, param2, …, paramN) => { statements } (param1, param2, …, paramN) => expression // equivalent to: => { return expression; } // Parentheses are optional when there's only one parameter name: (singleParam) => { statements } singleParam => { statements } // The parameter list for a function with no parameters should be written with a pair of parentheses. () => { statements }",
        "type": "Function"
    },
    "Assignment Operators": {
        "descr": "An assignment operator assigns a value to its left operand based on the value of its right operand.",
        "name": "Assignment Operators",
        "params": [],
        "path": "javascript/operators/assignment_operators",
        "syntax": "Operator: x = y  Examples // Assuming the following variables // x = 5 // y = 10 // z = 25 x = y // x is 10 x = y = z // x, y and z are all 25  Addition assignment The addition assignment operator adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible. See the addition operator for more details. Syntax Operator: x += y Meaning: x = x + y  Examples // Assuming the following variables // foo = 'foo' // bar = 5 // baz = true // Number + Number -> addition bar += 2 // 7 // Boolean + Number -> addition baz += 1 // 2 // Boolean + Boolean -> addition baz += false // 1 // Number + String -> concatenation bar += 'foo' // \"5foo\" // String + Boolean -> concatenation foo += false // \"foofalse\" // String + String -> concatenation foo += 'bar' // \"foobar\"  Subtraction assignment The subtraction assignment operator subtracts the value of the right operand from a variable and assigns the result to the variable. See the subtraction operator for more details. Syntax Operator: x -= y Meaning: x = x - y  Examples // Assuming the following variable // bar = 5 bar -= 2 // 3 bar -= 'foo' // NaN  Multiplication assignment The multiplication assignment operator multiplies a variable by the value of the right operand and assigns the result to the variable. See the multiplication operator for more details. Syntax Operator: x *= y Meaning: x = x * y  Examples // Assuming the following variable // bar = 5 bar *= 2 // 10 bar *= 'foo' // NaN  Division assignment The division assignment operator divides a variable by the value of the right operand and assigns the result to the variable. See the division operator for more details. Syntax Operator: x /= y Meaning: x = x / y  Examples // Assuming the following variable // bar = 5 bar /= 2 // 2.5 bar /= 'foo' // NaN bar /= 0 // Infinity  Remainder assignment The remainder assignment operator divides a variable by the value of the right operand and assigns the remainder to the variable. See the remainder operator for more details. Syntax Operator: x %= y Meaning: x = x % y  Examples // Assuming the following variable // bar = 5 bar %= 2 // 1 bar %= 'foo' // NaN bar %= 0 // NaN  Exponentiation assignment The exponentiation assignment operator evaluates to the result of raising first operand to the power second operand. See the exponentiation operator for more details. Syntax Operator: x **= y Meaning: x = x ** y  Examples // Assuming the following variable // bar = 5 bar **= 2 // 25 bar **= 'foo' // NaN Left shift assignment The left shift assignment operator moves the specified amount of bits to the left and assigns the result to the variable. See the left shift operator for more details. Syntax Operator: x <<= y Meaning: x = x << y  Examples var bar = 5; // (00000000000000000000000000000101) bar <<= 2; // 20 (00000000000000000000000000010100)",
        "type": "Operators"
    },
    "AsyncFunction": {
        "descr": "The AsyncFunction creates a new async function object. In JavaScript every asynchronous function is actually an AsyncFunction object.",
        "name": "AsyncFunction",
        "params": [
            {
                "descr": "Names to be used by the function as formal argument names. ",
                "name": "arg1, arg2, ... argN"
            },
            {
                "descr": "A string containing the JavaScript statements comprising the function definition.",
                "name": "functionBody"
            },
            {
                "descr": "The AsyncFunction constructor's length property whose value is 1.",
                "name": "AsyncFunction.length"
            },
            {
                "descr": "Allows the addition of properties to all async function objects.",
                "name": "AsyncFunction.prototype"
            },
            {
                "descr": "The initial value is AsyncFunction.",
                "name": "AsyncFunction.constructor"
            },
            {
                "descr": "Returns \"AsyncFunction\".",
                "name": "AsyncFunction.prototype[@@toStringTag]"
            }
        ],
        "path": "javascript/global_objects/asyncfunction",
        "syntax": "new AsyncFunction([arg1[, arg2[, ...argN]],] functionBody)",
        "type": "Function"
    },
    "Atomics": {
        "descr": "The Atomics object provides atomic operations as static methods. They are used with SharedArrayBuffer objects.",
        "name": "Atomics",
        "params": [
            {
                "descr": "The value of this property is \"Atomics\".",
                "name": "Atomics[Symbol.toStringTag]"
            },
            {
                "descr": "Adds the provided value to the existing value at the specified index of the array. ",
                "name": "Atomics.add()"
            },
            {
                "descr": "Computes a bitwise AND on the value at the specified index of the array with the provided value. ",
                "name": "Atomics.and()"
            },
            {
                "descr": "Stores a value at the specified index of the array, if it equals a value. ",
                "name": "Atomics.compareExchange()"
            },
            {
                "descr": "Stores a value at the specified index of the array. ",
                "name": "Atomics.exchange()"
            },
            {
                "descr": "Returns the value at the specified index of the array.",
                "name": "Atomics.load()"
            },
            {
                "descr": "Computes a bitwise OR on the value at the specified index of the array with the provided value. ",
                "name": "Atomics.or()"
            },
            {
                "descr": "Stores a value at the specified index of the array. ",
                "name": "Atomics.store()"
            },
            {
                "descr": "Subtracts a value at the specified index of the array. ",
                "name": "Atomics.sub()"
            },
            {
                "descr": "Computes a bitwise XOR on the value at the specified index of the array with the provided value. ",
                "name": "Atomics.xor()"
            },
            {
                "descr": "Verifies that the specified index of the array still contains a value and sleeps awaiting or times out. ",
                "name": "Atomics.wait()"
            },
            {
                "descr": "Notifies agents that are waiting on the specified index of the array. ",
                "name": "Atomics.notify()"
            },
            {
                "descr": "An optimization primitive that can be used to determine whether to use locks or atomic operations. ",
                "name": "Atomics.isLockFree(size)"
            }
        ],
        "path": "javascript/global_objects/atomics",
        "syntax": "SharedArrayBuffer on January 5, 2018 to help reduce the efficacy of speculative side-channel attacks. This was a temporary removal while mitigations were put in place.    No   No   Support was removed to mitigate speculative execution side-channel attacks (Windows blog).    57 Disabled    57 Disabled    Support was disabled by default to mitigate speculative execution side-channel attacks (Mozilla Security Blog). Disabled From version 57: this feature is behind the javascript.options.shared_memory",
        "type": "Atomics"
    },
    "Atomics.add": {
        "descr": "The static Atomics.add() method adds a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.",
        "name": "Atomics.add",
        "params": [
            {
                "descr": "A shared integer typed array. One of Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, or Uint32Array.",
                "name": "typedArray"
            },
            {
                "descr": "The position in the typedArray to add a value to.",
                "name": "index"
            },
            {
                "descr": "The number to add.",
                "name": "value"
            }
        ],
        "path": "javascript/global_objects/atomics/add",
        "syntax": "Atomics.add(typedArray, index, value)",
        "type": "Atomics"
    },
    "Atomics.and": {
        "descr": "The static Atomics.and() method computes a bitwise AND with a given value at a given position in the array, and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.",
        "name": "Atomics.and",
        "params": [
            {
                "descr": "A shared integer typed array. One of Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, or Uint32Array.",
                "name": "typedArray"
            },
            {
                "descr": "The position in the typedArray to compute the bitwise AND.",
                "name": "index"
            },
            {
                "descr": "The number to compute the bitwise AND with.",
                "name": "value"
            }
        ],
        "path": "javascript/global_objects/atomics/and",
        "syntax": "Atomics.and(typedArray, index, value)",
        "type": "Atomics"
    },
    "Atomics.compareExchange": {
        "descr": "The static Atomics.compareExchange() method exchanges a given replacement value at a given position in the array, if a given expected value equals the old value. It returns the old value at that position whether it was equal to the expected value or not. This atomic operation guarantees that no other write happens until the modified value is written back.",
        "name": "Atomics.compareExchange",
        "params": [
            {
                "descr": "A shared integer typed array. One of Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, or Uint32Array.",
                "name": "typedArray"
            },
            {
                "descr": "The position in the typedArray to exchange a value.",
                "name": "index"
            },
            {
                "descr": "The value to check for equality.",
                "name": "expectedValue"
            },
            {
                "descr": "The number to exchange.",
                "name": "replacementValue"
            }
        ],
        "path": "javascript/global_objects/atomics/compareexchange",
        "syntax": "Atomics.compareExchange(typedArray, index, expectedValue, replacementValue)",
        "type": "Atomics"
    },
    "Atomics.exchange": {
        "descr": "The static Atomics.exchange() method stores a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens between the read of the old value and the write of the new value.",
        "name": "Atomics.exchange",
        "params": [
            {
                "descr": "A shared integer typed array. One of Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, or Uint32Array.",
                "name": "typedArray"
            },
            {
                "descr": "The position in the typedArray to exchange a value.",
                "name": "index"
            },
            {
                "descr": "The number to exchange.",
                "name": "value"
            }
        ],
        "path": "javascript/global_objects/atomics/exchange",
        "syntax": "Atomics.exchange(typedArray, index, value)",
        "type": "Atomics"
    },
    "Atomics.isLockFree": {
        "descr": "The static Atomics.isLockFree() method is used to determine whether to use locks or atomic operations. It returns true, if the given size is one of the BYTES_PER_ELEMENT property of integer TypedArray types.",
        "name": "Atomics.isLockFree",
        "params": [
            {
                "descr": "The size in bytes to check.",
                "name": "size"
            }
        ],
        "path": "javascript/global_objects/atomics/islockfree",
        "syntax": "Atomics.isLockFree(size)",
        "type": "Atomics"
    },
    "Atomics.load": {
        "descr": "The static Atomics.load() method returns a value at a given position in the array.",
        "name": "Atomics.load",
        "params": [
            {
                "descr": "A shared integer typed array. One of Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, or Uint32Array.",
                "name": "typedArray"
            },
            {
                "descr": "The position in the typedArray to load from.",
                "name": "index"
            }
        ],
        "path": "javascript/global_objects/atomics/load",
        "syntax": "Atomics.load(typedArray, index)",
        "type": "Atomics"
    },
    "Atomics.notify": {
        "descr": "The static Atomics.notify() method notifies up some agents that are sleeping in the wait queue.",
        "name": "Atomics.notify",
        "params": [
            {
                "descr": "A shared Int32Array.",
                "name": "typedArray"
            },
            {
                "descr": "The position in the typedArray to wake up on.",
                "name": "index"
            },
            {
                "descr": "The number of sleeping agents to notify. ",
                "name": "count"
            }
        ],
        "path": "javascript/global_objects/atomics/notify",
        "syntax": "Atomics.notify(typedArray, index, count)",
        "type": "Atomics"
    },
    "Atomics.or": {
        "descr": "The static Atomics.or() method computes a bitwise OR with a given value at a given position in the array, and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.",
        "name": "Atomics.or",
        "params": [
            {
                "descr": "A shared integer typed array. One of Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, or Uint32Array.",
                "name": "typedArray"
            },
            {
                "descr": "The position in the typedArray to compute the bitwise OR.",
                "name": "index"
            },
            {
                "descr": "The number to compute the bitwise OR with.",
                "name": "value"
            }
        ],
        "path": "javascript/global_objects/atomics/or",
        "syntax": "Atomics.or(typedArray, index, value)",
        "type": "Atomics"
    },
    "Atomics.store": {
        "descr": "The static Atomics.store() method stores a given value at the given position in the array and returns that value.",
        "name": "Atomics.store",
        "params": [
            {
                "descr": "A shared integer typed array. One of Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, or Uint32Array.",
                "name": "typedArray"
            },
            {
                "descr": "The position in the typedArray to store a value in.",
                "name": "index"
            },
            {
                "descr": "The number to store.",
                "name": "value"
            }
        ],
        "path": "javascript/global_objects/atomics/store",
        "syntax": "Atomics.store(typedArray, index, value)",
        "type": "Atomics"
    },
    "Atomics.sub": {
        "descr": "The static Atomics.sub() method substracts a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.",
        "name": "Atomics.sub",
        "params": [
            {
                "descr": "A shared integer typed array. One of Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, or Uint32Array.",
                "name": "typedArray"
            },
            {
                "descr": "The position in the typedArray to subtract a value from.",
                "name": "index"
            },
            {
                "descr": "The number to subtract.",
                "name": "value"
            }
        ],
        "path": "javascript/global_objects/atomics/sub",
        "syntax": "Atomics.sub(typedArray, index, value)",
        "type": "Atomics"
    },
    "Atomics.wait": {
        "descr": "The static Atomics.wait() method verifies that a given position in an Int32Array still contains a given value and if so sleeps, awaiting a wakeup or a timeout. It returns a string which is either \"ok\", \"not-equal\", or \"timed-out\".",
        "name": "Atomics.wait",
        "params": [
            {
                "descr": "A shared Int32Array.",
                "name": "typedArray"
            },
            {
                "descr": "The position in the typedArray to wait on.",
                "name": "index"
            },
            {
                "descr": "The expected value to test .",
                "name": "value"
            },
            {
                "descr": "Time to wait in milliseconds. Infinity, if no time is provided.",
                "name": "timeout Optional"
            }
        ],
        "path": "javascript/global_objects/atomics/wait",
        "syntax": "Atomics.wait(typedArray, index, value[, timeout])",
        "type": "Atomics"
    },
    "Atomics.xor": {
        "descr": "The static Atomics.xor() method computes a bitwise XOR with a given value at a given position in the array, and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.",
        "name": "Atomics.xor",
        "params": [
            {
                "descr": "A shared integer typed array. One of Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, or Uint32Array.",
                "name": "typedArray"
            },
            {
                "descr": "The position in the typedArray to compute the bitwise XOR.",
                "name": "index"
            },
            {
                "descr": "The number to compute the bitwise XOR with.",
                "name": "value"
            }
        ],
        "path": "javascript/global_objects/atomics/xor",
        "syntax": "Atomics.xor(typedArray, index, value)",
        "type": "Atomics"
    },
    "Attr.localName": {
        "descr": "The Attr.localName read-only property returns the local part of the qualified name of an element.",
        "name": "Attr.localName",
        "params": [],
        "path": "dom/attr/localname",
        "syntax": "name = attribute.localName  Return value A DOMString representing the local part of the attribute's qualified name. Example The following example shows \"id\" in an alert dialog. HTML Content <button id=\"example\">Click me</button> JavaScript Content const element = document.querySelector(\"#example\");\n or  element.addEventListener(\"click\", function() { const attribute = element.attributes[0]; alert(attribute.localName);\n or  });",
        "type": "Nodes"
    },
    "Attr.namespaceURI": {
        "descr": "The Attr.namespaceURI read-only property returns the namespace URI of the attribute, or null if the element is not in a namespace.",
        "name": "Attr.namespaceURI",
        "params": [],
        "path": "dom/attr/namespaceuri",
        "syntax": "namespace = attribute.namespaceURI Example In this snippet, an attribute is being examined for its localName and its namespaceURI. If the namespaceURI returns the XUL namespace and the localName returns \"browser\", then the node is understood to be a XUL <browser/>. if (attribute.localName == \"value\" && attribute.namespaceURI == \"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\") { // this is a XUL value }",
        "type": "Nodes"
    },
    "Attr.prefix": {
        "descr": "The Attr.prefix read-only property returns the namespace prefix of the specified attribute, or null if no prefix is specified.",
        "name": "Attr.prefix",
        "params": [],
        "path": "dom/attr/prefix",
        "syntax": "string = attribute.prefix  Examples The following logs \"x\" to the console. <div x:id=\"example\" onclick=\"console.log(this.attributes[0].prefix)\"/>",
        "type": "Nodes"
    },
    "Attribute contains prefix selector [name|=\"value\"]": {
        "descr": "This selector was introduced into the CSS specification to handle language attributes.",
        "name": "Attribute contains prefix selector [name|=\"value\"]",
        "params": [],
        "path": "jquery/attribute-contains-prefix-selector",
        "syntax": "attributeContainsPrefix selector  Description: Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-).",
        "type": "Selectors"
    },
    "Attribute contains selector [name*=\"value\"]": {
        "descr": "This is the most generous of the jQuery attribute selectors that match against a value. It will select an element if the selector's string appears anywhere within the element's attribute value. Compare this selector with the Attribute Contains Word selector (e.g. [attr~=\"word\"]), which is more appropriate in many cases.",
        "name": "Attribute contains selector [name*=\"value\"]",
        "params": [],
        "path": "jquery/attribute-contains-selector",
        "syntax": "attributeContains selector  Description: Selects elements that have the specified attribute with a value containing a given substring.   version added: 1.0jQuery( \"[attribute*='value']\" ) attribute: An attribute name.",
        "type": "Selectors"
    },
    "Attribute contains word selector [name~=\"value\"]": {
        "descr": "This selector matches the test string against each word in the attribute value, where a \"word\" is defined as a string delimited by whitespace. The selector matches if the test string is exactly equal to any of the words.",
        "name": "Attribute contains word selector [name~=\"value\"]",
        "params": [],
        "path": "jquery/attribute-contains-word-selector",
        "syntax": "attributeContainsWord selector  Description: Selects elements that have the specified attribute with a value containing a given word, delimited by spaces.   version added: 1.0jQuery( \"[attribute~='value']\" ) attribute: An attribute name.",
        "type": "Selectors"
    },
    "Attribute ends with selector [name$=\"value\"]": {
        "descr": "Finds all inputs with an attribute name that ends with 'letter' and puts text in them.",
        "name": "Attribute ends with selector [name$=\"value\"]",
        "params": [],
        "path": "jquery/attribute-ends-with-selector",
        "syntax": "attributeEndsWith selector  Description: Selects elements that have the specified attribute with a value ending exactly with a given string. The comparison is case sensitive.   version added: 1.0jQuery( \"[attribute$='value']\" ) attribute: An attribute name.",
        "type": "Selectors"
    },
    "Attribute equals selector [name=\"value\"]": {
        "descr": "Finds all inputs with a value of \"Hot Fuzz\" and changes the text of the next sibling span.",
        "name": "Attribute equals selector [name=\"value\"]",
        "params": [],
        "path": "jquery/attribute-equals-selector",
        "syntax": "attributeEquals selector  Description: Selects elements that have the specified attribute with a value exactly equal to a certain value.   version added: 1.0jQuery( \"[attribute='value']\" ) attribute: An attribute name.",
        "type": "Selectors"
    },
    "Attribute not equal selector [name!=\"value\"]": {
        "descr": "This selector is equivalent to :not([attr='value']).",
        "name": "Attribute not equal selector [name!=\"value\"]",
        "params": [],
        "path": "jquery/attribute-not-equal-selector",
        "syntax": "attributeNotEqual selector  Description: Select elements that either don't have the specified attribute, or do have the specified attribute but not with a certain value.   version added: 1.0jQuery( \"[attribute!='value']\" ) attribute: An attribute name.",
        "type": "Selectors"
    },
    "Attribute starts with selector [name^=\"value\"]": {
        "descr": "This selector can be useful for identifying elements in pages produced by server-side frameworks that produce HTML with systematic element IDs. However it will be slower than using a class selector so leverage classes, if you can, to group like elements.",
        "name": "Attribute starts with selector [name^=\"value\"]",
        "params": [],
        "path": "jquery/attribute-starts-with-selector",
        "syntax": "attributeStartsWith selector  Description: Selects elements that have the specified attribute with a value beginning exactly with a given string.   version added: 1.0jQuery( \"[attribute^='value']\" ) attribute: An attribute name.",
        "type": "Selectors"
    },
    "AudioBuffer.constructor": {
        "descr": "The AudioBuffer constructor of the Web Audio API creates a new AudioBuffer object.",
        "name": "AudioBuffer.constructor",
        "params": [
            {
                "descr": "Options are as follows:   length: The size of the audio buffer in sample-frames. ",
                "name": "options"
            },
            {
                "descr": "A reference to an AudioContext. ",
                "name": "context"
            },
            {
                "descr": "One or more of the options are negative or otherwise has an invalid value (such as numberOfChannels being higher than supported, or a sampleRate outside the nominal range).",
                "name": "NotSupportedError"
            },
            {
                "descr": "There isn't enough memory available to allocate the buffer.",
                "name": "RangeError"
            }
        ],
        "path": "dom/audiobuffer/audiobuffer",
        "syntax": "var audioBuffer = new AudioBuffer(options);\n or  var audioBuffer = new AudioBuffer(context[, options]);",
        "type": "Audio"
    },
    "AudioBuffer.copyFromChannel": {
        "descr": "undefined.",
        "name": "AudioBuffer.copyFromChannel",
        "params": [
            {
                "descr": "A Float32Array to copy the channel's samples to.",
                "name": "destination"
            },
            {
                "descr": "The channel number of the current AudioBuffer to copy the channel data from.",
                "name": "channelNumber"
            },
            {
                "descr": "An optional offset into the source channel's buffer from which to begin copying samples. ",
                "name": "startInChannel Optional"
            },
            {
                "descr": "One of the input parameters has a value that is outside the accepted range:  The value of channelNumber specifies a channel number which doesn't exist (that is, it's greater than or equal to the value of numberOfChannels on the channel). The value of startInChannel is outside the current range of samples that already exist in the source buffer; that is, it's greater than its current length.",
                "name": "indexSizeError"
            }
        ],
        "path": "dom/audiobuffer/copyfromchannel",
        "syntax": "myArrayBuffer.copyFromChannel(destination, channelNumber, startInChannel);",
        "type": "Audio"
    },
    "AudioBuffer.copyToChannel": {
        "descr": "The copyToChannel() method of the AudioBuffer interface copies the samples to the specified channel of the AudioBuffer, from the source array.",
        "name": "AudioBuffer.copyToChannel",
        "params": [
            {
                "descr": "A Float32Array that the channel data will be copied from.",
                "name": "source"
            },
            {
                "descr": "The channel number of the current AudioBuffer to copy the channel data to. ",
                "name": "channelNumber"
            },
            {
                "descr": "An optional offset to copy the data to. ",
                "name": "startInChannel Optional"
            }
        ],
        "path": "dom/audiobuffer/copytochannel",
        "syntax": "myArrayBuffer.copyToChannel(source, channelNumber, startInChannel);",
        "type": "Audio"
    },
    "AudioBuffer.duration": {
        "descr": "The duration property of the AudioBuffer interface returns a double representing the duration, in seconds, of the PCM data stored in the buffer.",
        "name": "AudioBuffer.duration",
        "params": [],
        "path": "dom/audiobuffer/duration",
        "syntax": "var myArrayBuffer = audioCtx.createBuffer(2, frameCount, audioCtx.sampleRate);\n or  myArrayBuffer.duration;);",
        "type": "Audio"
    },
    "AudioBuffer.getChannelData": {
        "descr": "The getChannelData() method of the AudioBuffer Interface returns a Float32Array containing the PCM data associated with the channel, defined by the channel parameter (with 0 representing the first channel).",
        "name": "AudioBuffer.getChannelData",
        "params": [
            {
                "descr": "The channel property is an index representing the particular channel to get data for. ",
                "name": "channel"
            }
        ],
        "path": "dom/audiobuffer/getchanneldata",
        "syntax": "var myArrayBuffer = audioCtx.createBuffer(2, frameCount, audioCtx.sampleRate);\n or  var nowBuffering = myArrayBuffer.getChannelData(channel);",
        "type": "Audio"
    },
    "AudioBuffer.length": {
        "descr": "The length property of the AudioBuffer interface returns an integer representing the length, in sample-frames, of the PCM data stored in the buffer.",
        "name": "AudioBuffer.length",
        "params": [],
        "path": "dom/audiobuffer/length",
        "syntax": "var myArrayBuffer = audioCtx.createBuffer(2, frameCount, audioCtx.sampleRate);\n or  myArrayBuffer.length;);",
        "type": "Audio"
    },
    "AudioBuffer.numberOfChannels": {
        "descr": "The numberOfChannels property of the AudioBuffer interface returns an integer representing the number of discrete audio channels described by the PCM data stored in the buffer.",
        "name": "AudioBuffer.numberOfChannels",
        "params": [],
        "path": "dom/audiobuffer/numberofchannels",
        "syntax": "var myArrayBuffer = audioCtx.createBuffer(2, frameCount, audioCtx.sampleRate);\n or  myArrayBuffer.numberOfChannels;);",
        "type": "Audio"
    },
    "AudioBuffer.sampleRate": {
        "descr": "The sampleRate property of the AudioBuffer interface returns a float representing the sample rate, in samples per second, of the PCM data stored in the buffer.",
        "name": "AudioBuffer.sampleRate",
        "params": [],
        "path": "dom/audiobuffer/samplerate",
        "syntax": "var myArrayBuffer = audioCtx.createBuffer(2, frameCount, audioCtx.sampleRate);\n or  myArrayBuffer.sampleRate;);",
        "type": "Audio"
    },
    "AudioBufferSourceNode.buffer": {
        "descr": "The buffer property of the AudioBufferSourceNode interface provides the ability to play back audio using an AudioBuffer as the source of the sound data.",
        "name": "AudioBufferSourceNode.buffer",
        "params": [],
        "path": "dom/audiobuffersourcenode/buffer",
        "syntax": "AudioBufferSourceNode.buffer = soundBuffer;  Value An AudioBuffer which contains the data representing the sound which the node will play. Example  For a full working example, see this code running live, or view the source.  var myArrayBuffer = audioCtx.createBuffer(2, frameCount, audioCtx.sampleRate);\n or  button.onclick = function() { // Fill the buffer with white noise; //just random values between -1.0 and 1.0 for (var channel = 0; channel < channels; channel++) { // This gives us the actual ArrayBuffer that contains the data var nowBuffering = myArrayBuffer.getChannelData(channel);\n or  for (var i = 0; i < frameCount; i++) { // Math.random() is in [0; 1.0] // audio needs to be in [-1.0; 1.0] nowBuffering[i] = Math.random() * 2 - 1; } } // Get an AudioBufferSourceNode. // This is the AudioNode to use when we want to play an AudioBuffer var source = audioCtx.createBufferSource();\n or  // set the buffer in the AudioBufferSourceNode source.buffer = myArrayBuffer;);",
        "type": "Audio"
    },
    "AudioBufferSourceNode.constructor": {
        "descr": "The AudioBufferSourceNode() constructor creates a new AudioBufferSourceNode object instance.",
        "name": "AudioBufferSourceNode.constructor",
        "params": [
            {
                "descr": "A reference to an AudioContext.",
                "name": "context"
            },
            {
                "descr": "Options are as follows:   buffer: An instance of AudioBuffer to be played. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/audiobuffersourcenode/audiobuffersourcenode",
        "syntax": "var audioBufferSourceNode = new AudioBufferSourceNode(context, options)",
        "type": "Audio"
    },
    "AudioBufferSourceNode.detune": {
        "descr": "For example, values of +100 and -100 detune the source up or down by one semitone, while +1200 and -1200 detune it up or down by one octave.",
        "name": "AudioBufferSourceNode.detune",
        "params": [],
        "path": "dom/audiobuffersourcenode/detune",
        "syntax": "var source = audioCtx.createBufferSource();\n or  source.detune.value = 100; // value in cents);",
        "type": "Audio"
    },
    "AudioBufferSourceNode.loop": {
        "descr": "The loop property of the AudioBufferSourceNode interface is a Boolean indicating if the audio asset must be replayed when the end of the AudioBuffer is reached.",
        "name": "AudioBufferSourceNode.loop",
        "params": [],
        "path": "dom/audiobuffersourcenode/loop",
        "syntax": "var loopingEnabled = AudioBufferSourceNode.loop;  AudioBufferSourceNode.loop = true | false;  Value A Boolean which is true if looping is enabled; otherwise, the value is false. When looping is enabled, the sound begins playing at the time specified as the start point when start()",
        "type": "Audio"
    },
    "AudioBufferSourceNode.loopEnd": {
        "descr": "The loopEnd property of the AudioBufferSourceNode interface specifies is a floating point number specifying, in seconds, at what offset into playing the AudioBuffer playback should loop back to the time indicated by the loopStart property. This is only used if the loop property is true.",
        "name": "AudioBufferSourceNode.loopEnd",
        "params": [],
        "path": "dom/audiobuffersourcenode/loopend",
        "syntax": "AudioBufferSourceNode.loopEnd = endOffsetInSeconds; var endOffsetInSeconds = AudioBufferSourceNode.loopEnd;  Value A floating-point number indicating the offset, in seconds, into the audio buffer at which each loop will loop return to the beginning of the loop (that is, the current play time gets reset to AudioBufferSourceNode.loopStart). This property is only used if the loop",
        "type": "Audio"
    },
    "AudioBufferSourceNode.loopStart": {
        "descr": "The loopStart property of the AudioBufferSourceNode interface is a floating-point value indicating, in seconds, where in the AudioBuffer the restart of the play must happen.",
        "name": "AudioBufferSourceNode.loopStart",
        "params": [],
        "path": "dom/audiobuffersourcenode/loopstart",
        "syntax": "AudioBufferSourceNode.loopStart = startOffsetInSeconds; startOffsetInSeconds = AudioBufferSourceNode.loopStart;  Value A floating-point number indicating the offset, in seconds, into the audio buffer at which each loop should begin during playback. This value is only used when the loop parameter is true. Example In this example, the AudioContext.decodeAudioData()",
        "type": "Audio"
    },
    "AudioBufferSourceNode.playbackRate": {
        "descr": "The playbackRate property of the AudioBufferSourceNode interface Is a k-rate AudioParam that defines the speed at which the audio asset will be played.",
        "name": "AudioBufferSourceNode.playbackRate",
        "params": [],
        "path": "dom/audiobuffersourcenode/playbackrate",
        "syntax": "AudioBufferSourceNode.playbackRate.value = playbackRateProportion;  Value An AudioParam whose value is a floating-point value indicating the playback rate of the audio as a decimal proportion of the original sampling rate. Consider a sound buffer containing audio sampled at 44.1 kHz (44,100 samples per second). Let's see what a few values of playbackRate",
        "type": "Audio"
    },
    "AudioBufferSourceNode.start": {
        "descr": "The start() method of the AudioBufferSourceNode Interface is used to schedule playback of the audio data contained in the buffer, or to begin playback immediately.",
        "name": "AudioBufferSourceNode.start",
        "params": [
            {
                "descr": "The time, in seconds, at which the sound should begin to play, in the same time coordinate system used by the AudioContext. ",
                "name": "when Optional"
            },
            {
                "descr": "An offset, specified as the number of seconds in the same time coordinate system as the AudioContext, to the time within the audio buffer that playback should begin. ",
                "name": "offset Optional"
            },
            {
                "descr": "The duration of the sound to be played, specified in seconds. ",
                "name": "duration Optional"
            },
            {
                "descr": "A negative value was specified for one or more of the three time parameters. ",
                "name": "TypeError"
            },
            {
                "descr": "start() has already been called. ",
                "name": "InvalidStateError"
            }
        ],
        "path": "dom/audiobuffersourcenode/start",
        "syntax": "AudioBufferSourceNode.start([when][, offset][, duration]);",
        "type": "Audio"
    },
    "AudioContext.baseLatency": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "AudioContext.baseLatency",
        "params": [],
        "path": "dom/audiocontext/baselatency",
        "syntax": "var baseLatency = audioCtx.baseLatency; Value A double representing the base latency in seconds. Example //default latency (\"interactive\") const audioCtx1 = new AudioContext();\n or  console.log(audioCtx1.baseLatency);\n or //0.01 //higher latency (\"playback\") const audioCtx2 = new AudioContext({ latencyHint: 'playback' });\n or  console.log(audioCtx2.baseLatency);\n or //0.02);",
        "type": "Audio"
    },
    "AudioContext.close": {
        "descr": "The close() method of the AudioContext Interface closes the audio context, releasing any system audio resources that it uses.",
        "name": "AudioContext.close",
        "params": [],
        "path": "dom/audiocontext/close",
        "syntax": "var audioCtx = new AudioContext();\n or  audioCtx.close().then(function() { ... });\n or  await audioCtx.close();",
        "type": "Audio"
    },
    "AudioContext.constructor": {
        "descr": "The AudioContext() constructor creates a new AudioContext object which represents an audio-processing graph, built from audio modules linked together, each represented by an AudioNode.",
        "name": "AudioContext.constructor",
        "params": [
            {
                "descr": "An object based on the AudioContextOptions dictionary that contains zero or more optional properties to configure the new context. ",
                "name": "options Optional"
            },
            {
                "descr": "The sampleRate to be used by the AudioContext, specified in samples per second. ",
                "name": "sampleRate Optional"
            },
            {
                "descr": "The specified sampleRate isn't supported by the context.",
                "name": "NotSupportedError"
            }
        ],
        "path": "dom/audiocontext/audiocontext",
        "syntax": "var audioCtx = new AudioContext();\n or  var audioCtx = new AudioContext(options);",
        "type": "Audio"
    },
    "AudioContext.createJavaScriptNode": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "AudioContext.createJavaScriptNode",
        "params": [
            {
                "descr": "The buffer size must be in units of sample frames, i.e., one of: 256, 512, 1024, 2048, 4096, 8192, or 16384. ",
                "name": "bufferSize"
            },
            {
                "descr": "The number of input channels in the audio stream.",
                "name": "numInputChannels"
            },
            {
                "descr": "The number of output channels in the audio stream.",
                "name": "numOutputChannels"
            }
        ],
        "path": "dom/audiocontext/createjavascriptnode",
        "syntax": "var jsNode = audioCtx.createJavaScriptNode(bufferSize, numInputChannels, numOutputChannels);",
        "type": "Audio"
    },
    "AudioContext.createMediaElementSource": {
        "descr": "The createMediaElementSource() method of the AudioContext Interface is used to create a new MediaElementAudioSourceNode object, given an existing HTML <audio> or <video> element, the audio from which can then be played and manipulated.",
        "name": "AudioContext.createMediaElementSource",
        "params": [
            {
                "descr": "An HTMLMediaElement object that you want to feed into an audio processing graph to manipulate.",
                "name": "myMediaElement"
            }
        ],
        "path": "dom/audiocontext/createmediaelementsource",
        "syntax": "var audioCtx = new AudioContext();\n or  var source = audioCtx.createMediaElementSource(myMediaElement);",
        "type": "Audio"
    },
    "AudioContext.createMediaStreamDestination": {
        "descr": "The createMediaStreamDestination() method of the AudioContext Interface is used to create a new MediaStreamAudioDestinationNode object associated with a WebRTC MediaStream representing an audio stream, which may be stored in a local file or sent to another computer.",
        "name": "AudioContext.createMediaStreamDestination",
        "params": [],
        "path": "dom/audiocontext/createmediastreamdestination",
        "syntax": "var audioCtx = new AudioContext();\n or  var destination = audioCtx.createMediaStreamDestination();",
        "type": "Audio"
    },
    "AudioContext.createMediaStreamTrackSource": {
        "descr": "Draft This page is not complete.",
        "name": "AudioContext.createMediaStreamTrackSource",
        "params": [],
        "path": "dom/audiocontext/createmediastreamtracksource",
        "syntax": "var audioCtx = new AudioContext();\n or  var track = audioCtx.createMediaStreamTrackSource();",
        "type": "Audio"
    },
    "AudioContext.getOutputTimestamp": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "AudioContext.getOutputTimestamp",
        "params": [],
        "path": "dom/audiocontext/getoutputtimestamp",
        "syntax": "var timestamp = AudioContext.getOutputTimestamp()",
        "type": "Audio"
    },
    "AudioContext.outputLatency": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "AudioContext.outputLatency",
        "params": [],
        "path": "dom/audiocontext/outputlatency",
        "syntax": "var latency = audioCtx.outputLatency;  Value A double representing the output latency in seconds. Example const audioCtx = new AudioContext();\n or  console.log(audioCtx.outputLatency);",
        "type": "Audio"
    },
    "AudioContext.suspend": {
        "descr": "The suspend() method of the AudioContext Interface suspends the progression of time in the audio context, temporarily halting audio hardware access and reducing CPU/battery usage in the process — this is useful if you want an application to power down the audio hardware when it will not be using an audio context for a while.",
        "name": "AudioContext.suspend",
        "params": [],
        "path": "dom/audiocontext/suspend",
        "syntax": "var audioCtx = new AudioContext();\n or  audioCtx.suspend().then(function() { ... });",
        "type": "Audio"
    },
    "AudioContextOptions.latencyHint": {
        "descr": "The AudioContextOptions dictionary (used when instantiating an AudioContext) may contain a property named latencyHint, which indicates the preferred maximum latency in seconds for the audio context. The value is specified either as a member of the string enum AudioContextLatencyCategory or a double-precision value.",
        "name": "AudioContextOptions.latencyHint",
        "params": [],
        "path": "dom/audiocontextoptions/latencyhint",
        "syntax": "audioContextOptions.latencyHint = \"interactive\"; audioContextOptions.latencyHint = 0.2; var latencyHint = audioContextOptions.latencyHint; Value The preferred maximum latency for the AudioContext. There are two ways this value can be specified. The best way to specify the preferred latency is to use a value form the string enum AudioContextLatencyCategory. In fact, the default value of latencyHint is \"interactive\" (meaning the browser should try to use the lowest possible and reliable latency it can).",
        "type": "Audio"
    },
    "AudioContextOptions.sampleRate": {
        "descr": "The AudioContextOptions dictionary (used when instantiating an AudioContext) may contain a property named sampleRate, which indicates the sample rate to use for the new context. The value must be a floating-point value indicating the sample rate, in samples per second, for which to configure the new context; additionally, the value must be one which is supported by AudioBuffer.sampleRate.",
        "name": "AudioContextOptions.sampleRate",
        "params": [],
        "path": "dom/audiocontextoptions/samplerate",
        "syntax": "audioContextOptions.sampleRate = 44100; var sampleRate = audioContextOptions.sampleRate; Value The desired sample rate for the AudioContext, specified in samples per second. The value must be compatible with AudioBuffer.sampleRate. This value should typically be between 8,000 Hz and 96,000 Hz; the default will vary depending on the output device, but the sample rate 44,100 Hz is the most common. If the sampleRate property is not included in the options, or the options are not specified when creating the audio context, the new context's output device's preferred sample rate is used by default. Specifications    Specification Status Comment   Web Audio APIThe definition of 'AudioContextOptions.sampleRate' in that specification. Working Draft Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  No   No   See issue 432248 for Chrome support.    No  61  No  No  ?        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support  No  ?   No  61  ?   ?   ?     See also   AudioContext: The interface describing an audio context  AudioContext()",
        "type": "Audio"
    },
    "AudioDestinationNode.maxChannelCount": {
        "descr": "The maxchannelCount property of the AudioDestinationNode interface is an unsigned long defining the maximum amount of channels that the physical device can handle.",
        "name": "AudioDestinationNode.maxChannelCount",
        "params": [],
        "path": "dom/audiodestinationnode/maxchannelcount",
        "syntax": "var audioCtx = new AudioContext();\n or  var myDestination = audioCtx.destination; myDestination.maxChannelCount = 2;);",
        "type": "Audio"
    },
    "AudioListener": {
        "descr": "The AudioListener interface represents the position and orientation of the unique person listening to the audio scene, and is used in audio spatialization. All PannerNodes spatialize in relation to the AudioListener stored in the BaseAudioContext.listener attribute.",
        "name": "AudioListener",
        "params": [
            {
                "descr": "Represents the horizontal position of the listener in a right-hand cartesian coordinate sytem. ",
                "name": "AudioListener.positionX"
            },
            {
                "descr": "Represents the vertical position of the listener in a right-hand cartesian coordinate sytem. ",
                "name": "AudioListener.positionY"
            },
            {
                "descr": "Represents the longitudinal (back and forth) position of the listener in a right-hand cartesian coordinate sytem. ",
                "name": "AudioListener.positionZ"
            },
            {
                "descr": "Represents the horizontal position of the listener's forward direction in the same cartesian coordinate sytem as the position (positionX, positionY, and positionZ) values. ",
                "name": "AudioListener.forwardX"
            },
            {
                "descr": "Represents the vertical position of the listener's forward direction in the same cartesian coordinate sytem as the position (positionX, positionY, and positionZ) values. ",
                "name": "AudioListener.forwardY"
            },
            {
                "descr": "Represents the longitudinal (back and forth) position of the listener's forward direction in the same cartesian coordinate sytem as the position (positionX, positionY, and positionZ) values. ",
                "name": "AudioListener.forwardZ"
            },
            {
                "descr": "Represents the horizontal position of the top of the listener's head in the same cartesian coordinate sytem as the position (positionX, positionY, and positionZ) values. ",
                "name": "AudioListener.upX"
            },
            {
                "descr": "Represents the vertical position of the top of the listener's head in the same cartesian coordinate sytem as the position (positionX, positionY, and positionZ) values. ",
                "name": "AudioListener.upY"
            },
            {
                "descr": "Represents the longitudinal (back and forth) position of the top of the listener's head in the same cartesian coordinate sytem as the position (positionX, positionY, and positionZ) values. ",
                "name": "AudioListener.upZ"
            },
            {
                "descr": "A double value representing the amount of pitch shift to use when rendering a doppler effect.",
                "name": "AudioListener.dopplerFactor"
            },
            {
                "descr": "Is a double value representing the speed of sound, in meters per second.",
                "name": "AudioListener.speedOfSound"
            },
            {
                "descr": "Sets the orientation of the listener.",
                "name": "AudioListener.setOrientation()"
            },
            {
                "descr": "Sets the position of the listener.",
                "name": "AudioListener.setPosition()"
            }
        ],
        "path": "dom/audiolistener",
        "syntax": "AudioListener.positionX, while setting the same property is done with AudioListener.positionX.value. This is why these values are not marked read only, which is how they appear in the specification's IDL.   AudioListener.positionX Represents the horizontal position of the listener in a right-hand cartesian coordinate sytem. The default is 0. AudioListener.positionY Represents the vertical position of the listener in a right-hand cartesian coordinate sytem. The default is 0. AudioListener.positionZ Represents the longitudinal (back and forth) position of the listener in a right-hand cartesian coordinate sytem. The default is 0. AudioListener.forwardX",
        "type": "Audio"
    },
    "AudioListener.forwardX": {
        "descr": "The forwardX read-only property of the AudioListener interface is an AudioParam representing the x value of the direction vector defining the forward direction the listener is pointing in.",
        "name": "AudioListener.forwardX",
        "params": [],
        "path": "dom/audiolistener/forwardx",
        "syntax": "var audioCtx = new AudioContext();\n or  var myListener = audioCtx.listener; myListener.forwardX.value = 0;);",
        "type": "Audio"
    },
    "AudioListener.forwardY": {
        "descr": "The forwardY read-only property of the AudioListener interface is an AudioParam representing the y value of the direction vector defining the forward direction the listener is pointing in.",
        "name": "AudioListener.forwardY",
        "params": [],
        "path": "dom/audiolistener/forwardy",
        "syntax": "var audioCtx = new AudioContext();\n or  var myListener = audioCtx.listener; myListener.forwardY.value = 0;);",
        "type": "Audio"
    },
    "AudioListener.forwardZ": {
        "descr": "The forwardZ read-only property of the AudioListener interface is an AudioParam representing the z value of the direction vector defining the forward direction the listener is pointing in.",
        "name": "AudioListener.forwardZ",
        "params": [],
        "path": "dom/audiolistener/forwardz",
        "syntax": "var audioCtx = new AudioContext();\n or  var myListener = audioCtx.listener; myListener.forwardZ.value = 0;);",
        "type": "Audio"
    },
    "AudioListener.positionX": {
        "descr": "The positionX read-only property of the AudioListener interface is an AudioParam representing the x position of the listener in 3D cartesian space.",
        "name": "AudioListener.positionX",
        "params": [],
        "path": "dom/audiolistener/positionx",
        "syntax": "var audioCtx = new AudioContext();\n or  var myListener = audioCtx.listener; myListener.positionX.value = 1;);",
        "type": "Audio"
    },
    "AudioListener.positionY": {
        "descr": "The positionY read-only property of the AudioListener interface is an AudioParam representing the y position of the listener in 3D cartesian space.",
        "name": "AudioListener.positionY",
        "params": [],
        "path": "dom/audiolistener/positiony",
        "syntax": "var audioCtx = new AudioContext();\n or  var myListener = audioCtx.listener; myListener.positionY.value = 1;);",
        "type": "Audio"
    },
    "AudioListener.positionZ": {
        "descr": "The positionZ read-only property of the AudioListener interface is an AudioParam representing the z position of the listener in 3D cartesian space.",
        "name": "AudioListener.positionZ",
        "params": [],
        "path": "dom/audiolistener/positionz",
        "syntax": "var audioCtx = new AudioContext();\n or  var myListener = audioCtx.listener; myListener.positionZ.value = 1;);",
        "type": "Audio"
    },
    "AudioListener.setOrientation": {
        "descr": "The setOrientation() method of the AudioListener interface defines the orientation of the listener.",
        "name": "AudioListener.setOrientation",
        "params": [
            {
                "descr": "The x value of the front vector of the listener.",
                "name": "x"
            },
            {
                "descr": "The y value of the front vector of the listener.",
                "name": "y"
            },
            {
                "descr": "The z value of the front vector of the listener.",
                "name": "z"
            },
            {
                "descr": "The x value of the up vector of the listener.",
                "name": "xUp"
            },
            {
                "descr": "The y value of the up vector of the listener.",
                "name": "yUp"
            },
            {
                "descr": "The z value of the up vector of the listener.",
                "name": "zUp"
            }
        ],
        "path": "dom/audiolistener/setorientation",
        "syntax": "var audioCtx = new AudioContext();\n or  var myListener = audioCtx.listener; myListener.setOrientation(0,0,-1,0,1,0);",
        "type": "Audio"
    },
    "AudioListener.setPosition": {
        "descr": "The setPosition() method of the AudioListener Interface defines the position of the listener.",
        "name": "AudioListener.setPosition",
        "params": [
            {
                "descr": "The x position of the listener in 3D space.",
                "name": "x"
            },
            {
                "descr": "The y position of the listener in 3D space.",
                "name": "y"
            },
            {
                "descr": "The z position of the listener in 3D space.",
                "name": "z"
            }
        ],
        "path": "dom/audiolistener/setposition",
        "syntax": "var audioCtx = new AudioContext();\n or  var myListener = audioCtx.listener; myListener.setPosition(1,1,1);",
        "type": "Audio"
    },
    "AudioListener.upX": {
        "descr": "The upX read-only property of the AudioListener interface is an AudioParam representing the x value of the direction vector defining the up direction the listener is pointing in.",
        "name": "AudioListener.upX",
        "params": [],
        "path": "dom/audiolistener/upx",
        "syntax": "var audioCtx = new AudioContext();\n or  var myListener = audioCtx.listener; myListener.upX.value = 0;);",
        "type": "Audio"
    },
    "AudioListener.upY": {
        "descr": "The upY read-only property of the AudioListener interface is an AudioParam representing the y value of the direction vector defining the up direction the listener is pointing in.",
        "name": "AudioListener.upY",
        "params": [],
        "path": "dom/audiolistener/upy",
        "syntax": "var audioCtx = new AudioContext();\n or  var myListener = audioCtx.listener; myListener.upY.value = 0;);",
        "type": "Audio"
    },
    "AudioListener.upZ": {
        "descr": "The upZ read-only property of the AudioListener interface is an AudioParam representing the z value of the direction vector defining the up direction the listener is pointing in.",
        "name": "AudioListener.upZ",
        "params": [],
        "path": "dom/audiolistener/upz",
        "syntax": "var audioCtx = new AudioContext();\n or  var myListener = audioCtx.listener; myListener.upZ.value = 0;);",
        "type": "Audio"
    },
    "AudioNode.channelCount": {
        "descr": "The channelCount property of the AudioNode interface represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node.",
        "name": "AudioNode.channelCount",
        "params": [],
        "path": "dom/audionode/channelcount",
        "syntax": "var oscillator = audioCtx.createOscillator();\n or  var channels = oscillator.channelCount;);",
        "type": "Audio"
    },
    "AudioNode.channelCountMode": {
        "descr": "The channelCountMode property of the AudioNode interface represents an enumerated value describing the way channels must be matched between the node's inputs and outputs.",
        "name": "AudioNode.channelCountMode",
        "params": [],
        "path": "dom/audionode/channelcountmode",
        "syntax": "var oscillator = audioCtx.createOscillator();\n or  oscillator.channelCountMode = 'explicit';);",
        "type": "Audio"
    },
    "AudioNode.channelInterpretation": {
        "descr": "The channelInterpretation property of the AudioNode interface represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.",
        "name": "AudioNode.channelInterpretation",
        "params": [],
        "path": "dom/audionode/channelinterpretation",
        "syntax": "var oscillator = audioCtx.createOscillator();\n or  oscillator.channelInterpretation = 'discrete';);",
        "type": "Audio"
    },
    "AudioNode.connect": {
        "descr": "The connect() method of the AudioNode interface lets you connect one of the node's outputs to a target, which may be either another AudioNode (thereby directing the sound data to the specified node) or an AudioParam, so that the node's output data is automatically used to change the value of that parameter over time.",
        "name": "AudioNode.connect",
        "params": [
            {
                "descr": "The AudioNode or AudioParam to which to connect.",
                "name": "destination"
            },
            {
                "descr": "An index specifying which output of the current AudioNode to connect to the destination. ",
                "name": "outputIndex Optional"
            },
            {
                "descr": "An index describing which input of the destination you want to connect the current AudioNode to; the default is 0. ",
                "name": "inputIndex Optional"
            },
            {
                "descr": "The value specified as outputIndex or inputIndex doesn't correspond to an existing input or output.",
                "name": "IndexSizeError"
            },
            {
                "descr": "The destination node is not part of the same audio context as the source node.",
                "name": "InvalidAccessError"
            },
            {
                "descr": "The specified connection would create a cycle (in which the audio loops back through the same nodes repeatedly) and there are no DelayNodes in the cycle to prevent the resulting waveform from getting stuck constructing the same audio frame indefinitely.",
                "name": "NotSupportedError"
            }
        ],
        "path": "dom/audionode/connect",
        "syntax": "var destinationNode = AudioNode.connect(destination, outputIndex, inputIndex);\n or  AudioNode.connect(destination, outputIndex);",
        "type": "Audio"
    },
    "AudioNode.context": {
        "descr": "The AudioContext or OfflineAudioContext object that was used to construct this AudioNode.",
        "name": "AudioNode.context",
        "params": [],
        "path": "dom/audionode/context",
        "syntax": "var aContext = anAudioNode.context; Value The AudioContext or OfflineAudioContext object that was used to construct this AudioNode. Example const AudioContext = window.AudioContext || window.webkitAudioContext; const audioCtx = new AudioContext();\n or  const oscillator = audioCtx.createOscillator();\n or  const gainNode = audioCtx.createGain();\n or  oscillator.connect(gainNode).connect(audioCtx.destination);\n or  console.log(oscillator.context);\n or  // AudioContext console.log(oscillator.context === audioCtx);\n or  // true);",
        "type": "Audio"
    },
    "AudioNode.disconnect": {
        "descr": "The disconnect() method of the AudioNode interface lets you disconnect one or more nodes from the node on which the method is called.",
        "name": "AudioNode.disconnect",
        "params": [
            {
                "descr": "An AudioNode or AudioParam specifying the node or nodes to disconnect from. ",
                "name": "destination Optional"
            },
            {
                "descr": "An index describing which output from the current AudioNode is to be disconnected. ",
                "name": "output Optional"
            },
            {
                "descr": "An index describing which input into the specified destination AudioNode is to be disconnected. ",
                "name": "input Optional"
            },
            {
                "descr": "A value specified for input or output is invalid, referring to a node which doesn't exist or outside the permitted range.",
                "name": "IndexSizeError"
            },
            {
                "descr": "The node on which disconnect() was called isn't connected to the specified destination node.",
                "name": "InvalidAccessError"
            }
        ],
        "path": "dom/audionode/disconnect",
        "syntax": "AudioNode.disconnect();\n or  AudioNode.disconnect(output);\n or  AudioNode.disconnect(destination);\n or  AudioNode.disconnect(destination, output);\n or  AudioNode.disconnect(destination, output, input);",
        "type": "Audio"
    },
    "AudioNode.numberOfInputs": {
        "descr": "An integer ≥ 0.",
        "name": "AudioNode.numberOfInputs",
        "params": [],
        "path": "dom/audionode/numberofinputs",
        "syntax": "var numInputs = audioNode.numberOfInputs; Value An integer ≥ 0. Example const audioCtx = new AudioContext();\n or  const oscillator = audioCtx.createOscillator();\n or  const gainNode = audioCtx.createGain();\n or  oscillator.connect(gainNode).connect(audioCtx.destination);\n or  console.log(oscillator.numberOfInputs);\n or  // 0 console.log(gainNode.numberOfInputs);\n or  // 1 console.log(audioCtx.destination.numberOfInputs);\n or  // 1);",
        "type": "Audio"
    },
    "AudioNode.numberOfOutputs": {
        "descr": "An integer ≥ 0.",
        "name": "AudioNode.numberOfOutputs",
        "params": [],
        "path": "dom/audionode/numberofoutputs",
        "syntax": "var numOutputs = audioNode.numberOfOutputs; Value An integer ≥ 0. Example const audioCtx = new AudioContext();\n or  const oscillator = audioCtx.createOscillator();\n or  const gainNode = audioCtx.createGain();\n or  oscillator.connect(gainNode).connect(audioCtx.destination);\n or  console.log(oscillator.numberOfOutputs);\n or  // 1 console.log(gainNode.numberOfOutputs);\n or  // 1 console.log(audioCtx.destination.numberOfOutputs);\n or  // 0);",
        "type": "Audio"
    },
    "AudioNodeOptions": {
        "descr": "The AudioNodeOptions dictionary of the Web Audio API specifies options that can be used when creating new AudioNode objects.",
        "name": "AudioNodeOptions",
        "params": [
            {
                "descr": "Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. ",
                "name": "channelCount Optional"
            },
            {
                "descr": "Represents an enumerated value describing the way channels must be matched between the node's inputs and outputs. ",
                "name": "channelCountMode Optional"
            },
            {
                "descr": "Represents an enumerated value describing the meaning of the channels. ",
                "name": "channelInterpretation Optional"
            }
        ],
        "path": "dom/audionodeoptions",
        "syntax": "var audioNodeOptions = { \"channelCount\" : 2, \"channelCountMode\" : \"max\", \"channelInterpretation\" : \"discrete\" } Properties   channelCount Optional  Represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node. (See AudioNode.channelCount for more information.) Its usage and precise definition depend on the value of AudioNodeOptions.channelCountMode",
        "type": "Audio"
    },
    "AudioParam.cancelAndHoldAtTime": {
        "descr": "The cancelAndHoldAtTime() property of the AudioParam interface cancels all scheduled future changes to the AudioParam but holds its value at a given time until further changes are made using other methods.",
        "name": "AudioParam.cancelAndHoldAtTime",
        "params": [
            {
                "descr": "A double representing the time (in seconds) after the AudioContext was first created after which all scheduled changes will be cancelled.",
                "name": "cancelTime"
            }
        ],
        "path": "dom/audioparam/cancelandholdattime",
        "syntax": "var audioParam = AudioParam.cancelAndHoldAtTime(cancelTime)",
        "type": "Audio"
    },
    "AudioParam.cancelScheduledValues": {
        "descr": "The cancelScheduledValues() method of the AudioParam Interface cancels all scheduled future changes to the AudioParam.",
        "name": "AudioParam.cancelScheduledValues",
        "params": [
            {
                "descr": "A double representing the time (in seconds) after the AudioContext was first created after which all scheduled changes will be cancelled.",
                "name": "startTime"
            }
        ],
        "path": "dom/audioparam/cancelscheduledvalues",
        "syntax": "var AudioParam = AudioParam.cancelScheduledValues(startTime)",
        "type": "Audio"
    },
    "AudioParam.defaultValue": {
        "descr": "A floating-point Number.",
        "name": "AudioParam.defaultValue",
        "params": [],
        "path": "dom/audioparam/defaultvalue",
        "syntax": "var defaultVal = audioParam.defaultValue; Value A floating-point Number. Example const audioCtx = new AudioContext();\n or  const gainNode = audioCtx.createGain();\n or  const defaultVal = gainNode.gain.defaultValue; console.log(defaultVal);\n or  //1 console.log(defaultVal === gainNode.gain.value);\n or  //true);",
        "type": "Audio"
    },
    "AudioParam.exponentialRampToValueAtTime": {
        "descr": "The exponentialRampToValueAtTime() method of the AudioParam Interface schedules a gradual exponential change in the value of the AudioParam. The change starts at the time specified for the previous event, follows an exponential ramp to the new value given in the value parameter, and reaches the new value at the time given in the endTime parameter.",
        "name": "AudioParam.exponentialRampToValueAtTime",
        "params": [
            {
                "descr": "A floating point number representing the value the AudioParam will ramp to by the given time.",
                "name": "value"
            },
            {
                "descr": "A double representing the exact time (in seconds) after the ramping starts that the changing of the value will stop.",
                "name": "endTime"
            }
        ],
        "path": "dom/audioparam/exponentialramptovalueattime",
        "syntax": "var AudioParam = AudioParam.exponentialRampToValueAtTime(value, endTime)",
        "type": "Audio"
    },
    "AudioParam.linearRampToValueAtTime": {
        "descr": "NOTE: both the example and live example are incorrect, see https://github.com/WebAudio/web-audio-api/issues/341",
        "name": "AudioParam.linearRampToValueAtTime",
        "params": [
            {
                "descr": "A floating point number representing the value the AudioParam will ramp to by the given time.",
                "name": "value"
            },
            {
                "descr": "A double representing the exact time (in seconds) after the ramping starts that the changing of the value will stop.",
                "name": "endTime"
            }
        ],
        "path": "dom/audioparam/linearramptovalueattime",
        "syntax": "var AudioParam = AudioParam.linearRampToValueAtTime(value, endTime)",
        "type": "Audio"
    },
    "AudioParam.maxValue": {
        "descr": "A floating-point Number indicating the maximum value permitted for the parameter's nominal range.",
        "name": "AudioParam.maxValue",
        "params": [],
        "path": "dom/audioparam/maxvalue",
        "syntax": "var maxVal = audioParam.maxValue; Value A floating-point Number indicating the maximum value permitted for the parameter's nominal range. The default value of maxValue is the maximum positive single-precision floating-point value (+340,282,346,638,528,859,811,704,183,484,516,925,440).",
        "type": "Audio"
    },
    "AudioParam.minValue": {
        "descr": "A floating-point Number indicating the minimum value permitted for the parameter's nominal range.",
        "name": "AudioParam.minValue",
        "params": [],
        "path": "dom/audioparam/minvalue",
        "syntax": "var minVal = audioParam.minValue; Value A floating-point Number indicating the minimum value permitted for the parameter's nominal range. The default value of minValue is the minimum negative single-precision floating-point value (-340,282,346,638,528,859,811,704,183,484,516,925,440).",
        "type": "Audio"
    },
    "AudioParam.setTargetAtTime": {
        "descr": "A reference to this AudioParam object. Some older browser implementations of this interface return void.",
        "name": "AudioParam.setTargetAtTime",
        "params": [
            {
                "descr": "The value the parameter will start to transition towards at the given start time.",
                "name": "target"
            },
            {
                "descr": "The time that the exponential transition will begin, in the same time coordinate system as AudioContext.currentTime. ",
                "name": "startTime"
            },
            {
                "descr": "The time-constant value, given in seconds, of an exponential approach to the target value. ",
                "name": "timeConstant"
            }
        ],
        "path": "dom/audioparam/settargetattime",
        "syntax": "var paramRef = param.setTargetAtTime(target, startTime, timeConstant);",
        "type": "Audio"
    },
    "AudioParam.setValueAtTime": {
        "descr": "A reference to this AudioParam object. In some browsers older implementations of this interface return void.",
        "name": "AudioParam.setValueAtTime",
        "params": [
            {
                "descr": "A floating point number representing the value the AudioParam will change to at the given time.",
                "name": "value"
            },
            {
                "descr": "A double representing the time (in seconds) after the AudioContext was first created that the change in value will happen. ",
                "name": "startTime"
            }
        ],
        "path": "dom/audioparam/setvalueattime",
        "syntax": "var AudioParam = AudioParam.setValueAtTime(value, startTime)",
        "type": "Audio"
    },
    "AudioParam.setValueCurveAtTime": {
        "descr": "A reference to this AudioParam object. Some older browser implementations of this interface return undefined.",
        "name": "AudioParam.setValueCurveAtTime",
        "params": [
            {
                "descr": "An array of floating-point numbers representing the value curve the AudioParam will change through along the specified duration. ",
                "name": "values"
            },
            {
                "descr": "A double representing the time (in seconds) after the AudioContext was first created that the change in value will happen. ",
                "name": "startTime"
            },
            {
                "descr": "A double representing the total time (in seconds) over which the parameter's value will change following the specified curve. ",
                "name": "duration"
            },
            {
                "descr": "The specified array of values has fewer than 2 items in it.",
                "name": "InvalidStateError"
            },
            {
                "descr": "The specified startTime is either negative or a non-finite value, or duration is not a finite, strictly positive number.",
                "name": "RangeError"
            },
            {
                "descr": "One or more of the values in the values array is non-finite. ",
                "name": "TypeError"
            }
        ],
        "path": "dom/audioparam/setvaluecurveattime",
        "syntax": "var paramRef = param.setValueCurveAtTime(values, startTime, duration);",
        "type": "Audio"
    },
    "AudioParam.value": {
        "descr": "A floating-point Number indicating the parameter's value. This value will be between the values specified by the minValue and maxValue properties.",
        "name": "AudioParam.value",
        "params": [],
        "path": "dom/audioparam/value",
        "syntax": "var curValue = audioParam.value; audioParam.value = newValue; Value A floating-point Number indicating the parameter's value. This value will be between the values specified by the minValue and maxValue properties. The default value of minValue is the minimum negative single-precision floating-point value (-340,282,346,638,528,859,811,704,183,484,516,925,440), and the default value of maxValue",
        "type": "Audio"
    },
    "AudioScheduledSourceNode.onended": {
        "descr": "The onended event handler for the AudioScheduledSourceNode interface specifies an EventHandler to be executed when the ended event occurs on the node. This event is sent to the node when the concrete interface (such as AudioBufferSourceNode, OscillatorNode, or ConstantSourceNode) determines that it has stopped playing.",
        "name": "AudioScheduledSourceNode.onended",
        "params": [],
        "path": "dom/audioscheduledsourcenode/onended",
        "syntax": "AudioScheduledSourceNode.onended = EventHandler;  Value A function which is called by the browser when the ended event occurs on the AudioScheduledSourceNode. The function receives as input a single parameter, which is an object of type Event describing the event that occurred. Example In this simple example, an event listener for the ended event is set up to enable a \"Start\" button in the user interface when the node stops playing. node.onended = function(event) { document.getElementById(\"startButton\").disabled = false; }",
        "type": "Audio"
    },
    "AudioScheduledSourceNode.start": {
        "descr": "The start() method on AudioScheduledSourceNode schedules a sound to begin playback at the specified time. If no time is specified, then the sound begins playing immediately.",
        "name": "AudioScheduledSourceNode.start",
        "params": [
            {
                "descr": "The time, in seconds, at which the sound should begin to play. ",
                "name": "when Optional"
            },
            {
                "descr": "A floating-point number indicating the offset, in seconds, into the audio buffer where playback should begin. ",
                "name": "offset Optional"
            },
            {
                "descr": "A floating-point number indicating the duration, in seconds, to be played. ",
                "name": "duration Optional"
            },
            {
                "descr": "The node has already been started. ",
                "name": "InvalidStateNode"
            },
            {
                "descr": "The value specified for when is negative.",
                "name": "RangeError"
            }
        ],
        "path": "dom/audioscheduledsourcenode/start",
        "syntax": "AudioScheduledSourceNode.start([when [, offset [, duration]]]);",
        "type": "Audio"
    },
    "AudioScheduledSourceNode.stop": {
        "descr": "The stop() method on AudioScheduledSourceNode schedules a sound to cease playback at the specified time. If no time is specified, then the sound stops playing immediately.",
        "name": "AudioScheduledSourceNode.stop",
        "params": [
            {
                "descr": "The time, in seconds, at which the sound should stop playing. ",
                "name": "when Optional"
            },
            {
                "descr": "The node has not been started by calling start().",
                "name": "InvalidStateNode"
            },
            {
                "descr": "The value specified for when is negative.",
                "name": "RangeError"
            }
        ],
        "path": "dom/audioscheduledsourcenode/stop",
        "syntax": "AudioScheduledSourceNode.stop([when]);",
        "type": "Audio"
    },
    "AudioTrack": {
        "descr": "The AudioTrack interface represents a single audio track from one of the HTML media elements, <audio> or <video>. The most common use for accessing an AudioTrack object is to toggle its enabled property in order to mute and unmute the track.",
        "name": "AudioTrack",
        "params": [
            {
                "descr": "A Boolean value which controls whether or not the audio track's sound is enabled. ",
                "name": "enabled"
            },
            {
                "descr": "A DOMString which uniquely identifies the track within the media. ",
                "name": "id Read only"
            },
            {
                "descr": "A DOMString specifying the category into which the track falls. ",
                "name": "kind Read only"
            },
            {
                "descr": "A DOMString providing a human-readable label for the track. ",
                "name": "label Read only"
            },
            {
                "descr": "A DOMString specifying the audio track's primary language, or an empty string if unknown. ",
                "name": "language Read only"
            },
            {
                "descr": "The SourceBuffer that created the track. ",
                "name": "sourceBuffer Read only"
            }
        ],
        "path": "dom/audiotrack",
        "syntax": "forEach()",
        "type": "Audio"
    },
    "AudioTrack.enabled": {
        "descr": "The AudioTrack property enabled specifies whether or not the described audio track is currently enabled for use. If the track is disabled by setting enabled to false, the track is muted and does not produce audio.",
        "name": "AudioTrack.enabled",
        "params": [],
        "path": "dom/audiotrack/enabled",
        "syntax": "isAudioEnabled = AudioTrack.enabled; AudioTrack.enabled = true | false; Value The enabled property is a Boolean whose value is true if the track is enabled; enabled tracks produce audio while the media is playing. Setting enabled to false effectively mutes the audio track, preventing it from contributing to the media's audio performance. Example This example switches between the main and commentary audio tracks of a media element. function swapCommentaryMain() { var videoElem = document.getElementById(\"main-video\");\n or  var audioTrackMain; var audioTrackCommentary; videoElem.audioTracks.forEach(track) { if (track.kind === \"main\") { audioTrackMain = track; } else if (track.kind === \"commentary\") { audioTrackCommentary = track; } } if (audioTrackMain && audioTrackCommentary) { var commentaryEnabled = audioTrackCommentary.enabled; audioTrackCommentary.enabled = audioTrackMain.enabled; audioTrackMain.enabled = commentaryEnabled; } });",
        "type": "Audio"
    },
    "AudioTrack.id": {
        "descr": "The id property contains a string which uniquely identifies the track represented by the AudioTrack. This ID can be used with the AudioTrackList.getTrackById() method to locate a specific track within the media associated with a media element.",
        "name": "AudioTrack.id",
        "params": [],
        "path": "dom/audiotrack/id",
        "syntax": "var trackID = AudioTrack.id; Value A DOMString which identifies the track, suitable for use when calling getTrackById()",
        "type": "Audio"
    },
    "AudioTrack.kind": {
        "descr": "The kind property contains a string indicating the category of audio contained in the AudioTrack. The kind can be used to determine the scenarios in which specific tracks should be enabled or disabled. See Audio track kind strings for a list of the kinds available for audio tracks.",
        "name": "AudioTrack.kind",
        "params": [
            {
                "descr": "A potential alternative to the main track, such as a different audio take or a version of the soundtrack with only the music and no dialogue.",
                "name": "\"alternative\""
            },
            {
                "descr": "An audio track providing audible descriptions of the action depicted in a video track.",
                "name": "\"descriptions\""
            },
            {
                "descr": "The primary audio track.",
                "name": "\"main\""
            },
            {
                "descr": "The primary audio track with audio descriptions mixed into it.",
                "name": "\"main-desc\""
            },
            {
                "descr": "A translated version of the primary audio track.",
                "name": "\"translation\""
            },
            {
                "descr": "An audio track containing a commentary. ",
                "name": "\"commentary\""
            },
            {
                "descr": "The track doesn't have an explicit kind, or the kind provided by the track's metadata isn't recognized by the user agent.",
                "name": "\"\" (empty string)"
            }
        ],
        "path": "dom/audiotrack/kind",
        "syntax": "var trackKind = AudioTrack.kind; Value A DOMString specifying the type of content the media represents. The string is one of those found in Audio track kind strings below. Audio track kind strings The kinds available for audio tracks are:  \"alternative\" A potential alternative to the main track, such as a different audio take or a version of the soundtrack with only the music and no dialogue. \"descriptions\" An audio track providing audible descriptions of the action depicted in a video track. \"main\" The primary audio track. \"main-desc\" The primary audio track with audio descriptions mixed into it. \"translation\" A translated version of the primary audio track. \"commentary\" An audio track containing a commentary. This might be used to contain the director's commentary track on a movie, for example.  \"\" (empty string) The track doesn't have an explicit kind, or the kind provided by the track's metadata isn't recognized by the user agent.  Specifications",
        "type": "Audio"
    },
    "AudioTrack.label": {
        "descr": "The read-only AudioTrack property label returns a string specifying the audio track's human-readable label, if one is available; otherwise, it returns an empty string.",
        "name": "AudioTrack.label",
        "params": [],
        "path": "dom/audiotrack/label",
        "syntax": "var audioTrackLabel = AudioTrack.label; Value A DOMString specifying the track's human-readable label, if one is available in the track metadata. Otherwise, an empty string (\"\") is returned.",
        "type": "Audio"
    },
    "AudioTrack.language": {
        "descr": "The read-only AudioTrack property language returns a string identifying the language used in the audio track. For tracks that include multiple languages (such as a movie in English in which a few lines are spoken in other languages), this should be the video's primary language.",
        "name": "AudioTrack.language",
        "params": [],
        "path": "dom/audiotrack/language",
        "syntax": "var audioTrackLanguage = AudioTrack.language; Value A DOMString specifying the BCP 47 (RFC 5646) format language tag of the primary language used in the audio track, or an empty string (\"\"",
        "type": "Audio"
    },
    "AudioTrackList": {
        "descr": "The AudioTrackList interface is used to represent a list of the audio tracks contained within a given HTML media element, with each track represented by a separate AudioTrack object in the list.",
        "name": "AudioTrackList",
        "params": [
            {
                "descr": "The number of tracks in the list.",
                "name": "length Read only"
            },
            {
                "descr": "An event handler to be called when the addtrack event is fired, indicating that a new audio track has been added to the media element.",
                "name": "onaddtrack"
            },
            {
                "descr": "An event handler to be called when the change event occurs. ",
                "name": "onchange"
            },
            {
                "descr": "An event handler to call when the removetrack event is sent, indicating that an audio track has been removed from the media element.",
                "name": "onremovetrack"
            },
            {
                "descr": "Returns the AudioTrack found within the AudioTrackList whose id matches the specified string. ",
                "name": "getTrackById()"
            }
        ],
        "path": "dom/audiotracklist",
        "syntax": "forEach()",
        "type": "Audio"
    },
    "AudioTrackList.getTrackById": {
        "descr": "The AudioTrackList method getTrackById() returns the first AudioTrack object from the track list whose id matches the specified string. This lets you find a specified track if you know its ID string.",
        "name": "AudioTrackList.getTrackById",
        "params": [
            {
                "descr": "A DOMString indicating the ID of the track to locate within the track list.",
                "name": "id"
            }
        ],
        "path": "dom/audiotracklist/gettrackbyid",
        "syntax": "var theTrack = AudioTrackList.getTrackById(id);",
        "type": "Audio"
    },
    "AudioTrackList.length": {
        "descr": "The read-only AudioTrackList property length returns the number of entries in the AudioTrackList, each of which is an AudioTrack representing one audio track in the media element. A value of 0 indicates that there are no audio tracks in the media.",
        "name": "AudioTrackList.length",
        "params": [],
        "path": "dom/audiotracklist/length",
        "syntax": "var trackCount = AudioTrackList.length; Value A number indicating how many audio tracks are included in the AudioTrackList. Each track can be accessed by treating the AudioTrackList as an array of objects of type AudioTrack. Example This snippet gets the number of audio tracks in the first <video> element found in the DOM by querySelector()",
        "type": "Audio"
    },
    "AudioTrackList.onaddtrack": {
        "descr": "The AudioTrackList property onaddtrack is an event handler which is called when the addtrack event occurs, indicating that a new audio track has been added to the media element whose audio tracks the AudioTrackList represents.",
        "name": "AudioTrackList.onaddtrack",
        "params": [],
        "path": "dom/audiotracklist/onaddtrack",
        "syntax": "AudioTrackList.onaddtrack = eventHandler; Value Set onaddtrack to a function that accepts as input a TrackEvent object which indicates in its track property which audio track has been added to the media. Usage notes The addtrack event is called whenever a new track is added to the media element whose audio tracks are represented by the AudioTrackList object. This happens when tracks are added to the element when the media is first attached to the element; one addtrack event will occur for each audio track in the media resource. Example This snippet establishes a handler for the addtrack event that calls a function, addToTrackList()",
        "type": "Audio"
    },
    "AudioTrackList.onchange": {
        "descr": "The AudioTrackList property onchange is an event handler which is called when the change event occurs, indicating that one or more of the AudioTracks in the AudioTrackList have been enabled or disabled.",
        "name": "AudioTrackList.onchange",
        "params": [],
        "path": "dom/audiotracklist/onchange",
        "syntax": "AudioTrackList.onchange = eventHandler; Value Set onchange to a function that should be called whenever tracks are enabled or disabled on the media element. Example This snippet establishes a handler for the change event that looks at each of the tracks in the list, calling a function to update the state of a user interface control that indicates the current state of the track. var trackList = document.querySelector(\"video\").audioTracks; trackList.onchange = function(event) { trackList.forEach(function(track) { updateTrackEnabledButton(track.id, track.enabled);\n or  });\n or  };);",
        "type": "Audio"
    },
    "AudioTrackList.onremovetrack": {
        "descr": "The AudioTrackList onremovetrack event handler is called when the removetrack event occurs, indicating that an audio track has been removed from the media element, and therefore also from the AudioTrackList.",
        "name": "AudioTrackList.onremovetrack",
        "params": [],
        "path": "dom/audiotracklist/onremovetrack",
        "syntax": "AudioTrackList.onremovetrack = eventHandler; Value Set onremovetrack to a function that accepts as input a TrackEvent object which indicates in its track property which audio track has been removed from the media element. Example This simple example just fetches the current number of audio tracks in the media element whenever a track is removed from the media element. document.querySelector(\"my-video\").audioTracks.onremovetrack = function(event) { myTrackCount = document.querySelector(\"my-video\").audioTracks.length; };",
        "type": "Audio"
    },
    "AuthenticatorAssertionResponse.authenticatorData": {
        "descr": "Draft This page is not complete.",
        "name": "AuthenticatorAssertionResponse.authenticatorData",
        "params": [
            {
                "descr": "(variable length) - A COSE encoded public key. ",
                "name": "credentialPublicKey"
            }
        ],
        "path": "dom/authenticatorassertionresponse/authenticatordata",
        "syntax": "var authnrData = assertion.response.authnrData;  Value An ArrayBuffer that has a byteLength of at least 37 bytes containing the following fields:   rpIdHash (32 bytes) - A SHA256 hash of the relying party ID (i.e. - domain) that was seen by the browser. The server will ensure that this hash matches a hash of its own origin in order to prevent phishing or other man-in-the-middle attacks.  flags (1 bytes) - A bitfield that indicates various attributes that were asserted by the authenticator. The bits are as follows, where \"bit 0\" is the least significant bit and all bits not specifically mentioned below are \"reserved for future use\":  Bit 0, User Presence (UP) - If set, authenticator validated that the user was present through some Test of User Presence (TUP), such as touching a button on the authenticator. Bit 2, User Verification (UV) - If set, authenticator verified the actual user, through a biometric, PIN, or other authentication method. Bit 6, Attested Credential Data (AT) - If set, attestedCredentialData will immediately follow the first 37 bytes of this authenticatorData. Bit 7, Extension data (ED) - If set, extension data is present. Extension data will follow attestedCredentialData if it is present, or will immediatelly follow the first 37 bytes of the authenticatorData if no attestedCredentialData is present.    signCount (4 bytes) - A signature count from the authenticator. The server will use this counter to detect authenticator cloning.  attestedCredentialData (variable length) - The credential that was created. This is only present during a navigator.credentials.create() call. This is a sequence of bytes with the following format:   AAGUID (16 bytes) - Authenticator Attestation Globally Unique Identifier, a unique number that identifies the model of the authenticator (not the specific instance of the authenticator) so that a relying party can understand the characteristics of the authenticator by looking up its metadata statement.  credentialIdLength (2 bytes) - The length of the credential ID that immediately follows these bytes.  credentialId (variable length) - A unqiue identifier for this credential so that it can be requested for future authentications. The credential is \"credentialIdLength\" bytes long.  credentialPublicKey (variable length) - A COSE encoded public key. This public key will be stored on the server associated with a user's account and be used for future authentications.    extensions (variable length) - An optional CBOR map of extensions.  Examples",
        "type": "Credential Management"
    },
    "AuthenticatorAttestationResponse.attestationObject": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "AuthenticatorAttestationResponse.attestationObject",
        "params": [
            {
                "descr": "The same as AuthenticatorAssertionResponse.authenticatorData. ",
                "name": "authenticatorData"
            },
            {
                "descr": "A text string that indicates the format of the attStmt. ",
                "name": "fmt"
            },
            {
                "descr": "A an attestation statement that is of the format defined by \"fmt\". ",
                "name": "attStmt"
            }
        ],
        "path": "dom/authenticatorattestationresponse/attestationobject",
        "syntax": "Candidate Recommendation Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  65 Disabled    65 Disabled    Only support USB U2F tokens Disabled From version 65: this feature is behind the Web Authentication API preference (needs to be set to true). To change preferences in Chrome, visit chrome://flags.    18  60   60   Only support USB U2F tokens    ?   ?   ?        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support  ?   ?   ?   ?   ?   ?   ?      Edit this page on MDN",
        "type": "Credential Management"
    },
    "AuthenticatorResponse.clientDataJSON": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "AuthenticatorResponse.clientDataJSON",
        "params": [
            {
                "descr": "TBD",
                "name": "clientDataJSON.type"
            },
            {
                "descr": "TBD",
                "name": "clientDataJSON.challenge"
            },
            {
                "descr": "TBD",
                "name": "clientDataJSON.origin"
            },
            {
                "descr": "TBD",
                "name": "clientDataJSON.tokenBindingId Optional"
            },
            {
                "descr": "TBD",
                "name": "clientDataJSON.clientExtensions Optional"
            },
            {
                "descr": "TBD",
                "name": "clientDataJSON.authenticatorExtensions Optional"
            }
        ],
        "path": "dom/authenticatorresponse/clientdatajson",
        "syntax": "Optional  TBD clientDataJSON.clientExtensions Optional  TBD clientDataJSON.authenticatorExtensions Optional  TBD  Examples function arrayBufferToStr(buf) { return String.fromCharCode.apply(null, new Uint8Array(buf));\n or  } // pk is a PublicKeyCredential that is the result of a create() or get() Promise var clientDataStr = arrayBufferToStr(pk.clientDataJSON);\n or  var clientDataObj = JSON.parse(clientDataStr);\n or  console.log (clientDataObj.type);\n or  // \"webauthn.create\" or \"webauthn.get\" console.log (clientDataObj.challenge);\n or  // base64 encoded String containing the original challenge console.log (clientDataObj.origin);\n or  // the window.origin);",
        "type": "Credential Management"
    },
    "Background Tasks API": {
        "descr": "Draft This page is not complete.",
        "name": "Background Tasks API",
        "params": [
            {
                "descr": "An object of this type is passed to the idle callback to provide an estimate of how long the idle period is expected to last, as well as whether or not the callback is running because its timeout period has expired.",
                "name": "IdleDeadline"
            }
        ],
        "path": "dom/background_tasks_api",
        "syntax": "let taskList = []; let totalTaskCount = 0; let currentTaskNumber = 0; let taskHandle = null;  These variables are used to manage the list of tasks that are waiting to be performed, as well as status information about the task queue and its execution:   taskList is an Array of objects, each representing one task waiting to be run.  totalTaskCount is a counter of the number of tasks that have been added to the queue; it will only go up, never down. We use this to do the math to present progress as a precentage of total work to do.  currentTaskNumber is used to track how many tasks have been processed so far.  taskHandle is a reference to the task currently being processed.  let totalTaskCountElem = document.getElementById(\"totalTaskCount\");\n or  let currentTaskNumberElem = document.getElementById(\"currentTaskNumber\");\n or  let progressBarElem = document.getElementById(\"progress\");\n or  let startButtonElem = document.getElementById(\"startButton\");\n or  let logElem = document.getElementById(\"log\");",
        "type": "Scheduling"
    },
    "BaseAudioContext.createAnalyser": {
        "descr": "Note: For more on using this node, see the AnalyserNode page.",
        "name": "BaseAudioContext.createAnalyser",
        "params": [],
        "path": "dom/baseaudiocontext/createanalyser",
        "syntax": "var analyserNode = baseAudioContext.createAnalyser();",
        "type": "Audio"
    },
    "BaseAudioContext.createBiquadFilter": {
        "descr": "The createBiquadFilter() method of the BaseAudioContext interface creates a BiquadFilterNode, which represents a second order filter configurable as several different common filter types.",
        "name": "BaseAudioContext.createBiquadFilter",
        "params": [],
        "path": "dom/baseaudiocontext/createbiquadfilter",
        "syntax": "baseAudioContext.createBiquadFilter();",
        "type": "Audio"
    },
    "BaseAudioContext.createBuffer": {
        "descr": "The createBuffer() method of the BaseAudioContext Interface is used to create a new, empty AudioBuffer object, which can then be populated by data, and played via an AudioBufferSourceNode",
        "name": "BaseAudioContext.createBuffer",
        "params": [
            {
                "descr": "An integer representing the number of channels this buffer should have. ",
                "name": "numOfChannels"
            },
            {
                "descr": "An integer representing the size of the buffer in sample-frames (where each sample-frame is the size of a sample in bytes multiplied by numOfChannels). ",
                "name": "length"
            },
            {
                "descr": "The sample rate of the linear audio data in sample-frames per second. ",
                "name": "sampleRate"
            },
            {
                "descr": "One or more of the options are negative or otherwise has an invalid value (such as numberOfChannels being higher than supported, or a sampleRate outside the nominal range).",
                "name": "NotSupportedError"
            },
            {
                "descr": "There isn't enough memory available to allocate the buffer.",
                "name": "RangeError"
            }
        ],
        "path": "dom/baseaudiocontext/createbuffer",
        "syntax": "var buffer = baseAudioContext.createBuffer(numOfchannels, length, sampleRate);",
        "type": "Audio"
    },
    "BaseAudioContext.createBufferSource": {
        "descr": "The createBufferSource() method of the BaseAudioContext Interface is used to create a new AudioBufferSourceNode, which can be used to play audio data contained within an AudioBuffer object. AudioBuffers are created using BaseAudioContext.createBuffer or returned by BaseAudioContext.decodeAudioData when it successfully decodes an audio track.",
        "name": "BaseAudioContext.createBufferSource",
        "params": [],
        "path": "dom/baseaudiocontext/createbuffersource",
        "syntax": "var source = baseAudioContext.createBufferSource();",
        "type": "Audio"
    },
    "BaseAudioContext.createChannelMerger": {
        "descr": "The createChannelMerger() method of the BaseAudioContext interface creates a ChannelMergerNode, which combines channels from multiple audio streams into a single audio stream.",
        "name": "BaseAudioContext.createChannelMerger",
        "params": [
            {
                "descr": "The number of channels in the input audio streams, which the output stream will contain; the default is 6 if this parameter is not specified.",
                "name": "numberOfInputs"
            }
        ],
        "path": "dom/baseaudiocontext/createchannelmerger",
        "syntax": "baseAudioContext.createChannelMerger(numberOfInputs);",
        "type": "Audio"
    },
    "BaseAudioContext.createChannelSplitter": {
        "descr": "The createChannelSplitter() method of the BaseAudioContext Interface is used to create a ChannelSplitterNode, which is used to access the individual channels of an audio stream and process them separately.",
        "name": "BaseAudioContext.createChannelSplitter",
        "params": [
            {
                "descr": "The number of channels in the input audio stream that you want to output separately; the default is 6 if this parameter is not specified.",
                "name": "numberOfOutputs"
            }
        ],
        "path": "dom/baseaudiocontext/createchannelsplitter",
        "syntax": "baseAudioContext.createChannelSplitter(numberOfOutputs);",
        "type": "Audio"
    },
    "BaseAudioContext.createConstantSource": {
        "descr": "The createConstantSource() property of the BaseAudioContext interface creates a ConstantSourceNode object, which is an audio source that continuously outputs a monaural (one-channel) sound signal whose samples all have the same value.",
        "name": "BaseAudioContext.createConstantSource",
        "params": [],
        "path": "dom/baseaudiocontext/createconstantsource",
        "syntax": "var constantSourceNode = AudioContext.createConstantSource()",
        "type": "Audio"
    },
    "BaseAudioContext.createConvolver": {
        "descr": "The createConvolver() method of the BaseAudioContext interface creates a ConvolverNode, which is commonly used to apply reverb effects to your audio. See the spec definition of Convolution for more information.",
        "name": "BaseAudioContext.createConvolver",
        "params": [],
        "path": "dom/baseaudiocontext/createconvolver",
        "syntax": "baseAudioContext.createConvolver();",
        "type": "Audio"
    },
    "BaseAudioContext.createDelay": {
        "descr": "A DelayNode. The default DelayNode.delayTime is 0 seconds.",
        "name": "BaseAudioContext.createDelay",
        "params": [
            {
                "descr": "The maximum amount of time, in seconds, that the audio signal can be delayed by. ",
                "name": "maxDelayTime Optional"
            }
        ],
        "path": "dom/baseaudiocontext/createdelay",
        "syntax": "var delayNode = audioCtx.createDelay(maxDelayTime);",
        "type": "Audio"
    },
    "BaseAudioContext.createDynamicsCompressor": {
        "descr": "The createDynamicsCompressor() method of the BaseAudioContext Interface is used to create a DynamicsCompressorNode, which can be used to apply compression to an audio signal.",
        "name": "BaseAudioContext.createDynamicsCompressor",
        "params": [],
        "path": "dom/baseaudiocontext/createdynamicscompressor",
        "syntax": "baseAudioCtx.createDynamicsCompressor();",
        "type": "Audio"
    },
    "BaseAudioContext.createGain": {
        "descr": "The createGain() method of the BaseAudioContext interface creates a GainNode, which can be used to control the overall gain (or volume) of the audio graph.",
        "name": "BaseAudioContext.createGain",
        "params": [],
        "path": "dom/baseaudiocontext/creategain",
        "syntax": "var gainNode = AudioContext.createGain();",
        "type": "Audio"
    },
    "BaseAudioContext.createIIRFilter": {
        "descr": "The createIIRFilter() method of the BaseAudioContext interface creates an IIRFilterNode, which represents a general infinite impulse response (IIR) filter which can be configured to serve as various types of filter.",
        "name": "BaseAudioContext.createIIRFilter",
        "params": [
            {
                "descr": "An array of floating-point values specifying the feedforward (numerator) coefficients for the transfer function of the IIR filter. ",
                "name": "feedforward"
            },
            {
                "descr": "An array of floating-point values specifying the feedback (denominator) coefficients for the transfer function of the IIR filter. ",
                "name": "feedback"
            },
            {
                "descr": "All of the feedforward coefficients are 0, and/or the first feedback coefficient is 0.",
                "name": "InvalidStateError"
            },
            {
                "descr": "One or both of the input arrays exceeds 20 members.",
                "name": "NotSupportedError"
            }
        ],
        "path": "dom/baseaudiocontext/createiirfilter",
        "syntax": "var iirFilter = AudioContext.createIIRFilter(feedforward, feedback);",
        "type": "Audio"
    },
    "BaseAudioContext.createOscillator": {
        "descr": "The createOscillator() method of the BaseAudioContext interface creates an OscillatorNode, a source representing a periodic waveform. It basically generates a constant tone.",
        "name": "BaseAudioContext.createOscillator",
        "params": [],
        "path": "dom/baseaudiocontext/createoscillator",
        "syntax": "var oscillatorNode = audioCtx.createOscillator();",
        "type": "Audio"
    },
    "BaseAudioContext.createPanner": {
        "descr": "The createPanner() method of the BaseAudioContext Interface is used to create a new PannerNode, which is used to spatialize an incoming audio stream in 3D space.",
        "name": "BaseAudioContext.createPanner",
        "params": [],
        "path": "dom/baseaudiocontext/createpanner",
        "syntax": "baseAudioCtx.createPanner();",
        "type": "Audio"
    },
    "BaseAudioContext.createPeriodicWave": {
        "descr": "The createPeriodicWave() method of the BaseAudioContext Interface is used to create a PeriodicWave, which is used to define a periodic waveform that can be used to shape the output of an OscillatorNode.",
        "name": "BaseAudioContext.createPeriodicWave",
        "params": [
            {
                "descr": "An array of cosine terms (traditionally the A terms).",
                "name": "real"
            },
            {
                "descr": "An array of sine terms (traditionally the B terms).",
                "name": "imag"
            },
            {
                "descr": "An dictionary object that specifies whether normalization should be disabled (if not specified, normalization is enabled by default.) It takes one property:   disableNormalization: If set to true, normalization is disabled for the periodic wave. The default is false.",
                "name": "constraints Optional"
            }
        ],
        "path": "dom/baseaudiocontext/createperiodicwave",
        "syntax": "var wave = AudioContext.createPeriodicWave(real, imag[, constraints]);",
        "type": "Audio"
    },
    "BaseAudioContext.createScriptProcessor": {
        "descr": "The createScriptProcessor() method of the BaseAudioContext interface creates a ScriptProcessorNode used for direct audio processing.",
        "name": "BaseAudioContext.createScriptProcessor",
        "params": [
            {
                "descr": "The buffer size in units of sample-frames. ",
                "name": "bufferSize"
            },
            {
                "descr": "Integer specifying the number of channels for this node's input, defaults to 2. ",
                "name": "numberOfInputChannels"
            },
            {
                "descr": "Integer specifying the number of channels for this node's output, defaults to 2. ",
                "name": "numberOfOutputChannels"
            }
        ],
        "path": "dom/baseaudiocontext/createscriptprocessor",
        "syntax": "var scriptProcessor = audioCtx.createScriptProcessor(bufferSize, numberOfInputChannels, numberOfOutputChannels);",
        "type": "Audio"
    },
    "BaseAudioContext.createStereoPanner": {
        "descr": "The createStereoPanner() method of the BaseAudioContext interface creates a StereoPannerNode, which can be used to apply stereo panning to an audio source. It positions an incoming audio stream in a stereo image using a low-cost equal-power panning algorithm.",
        "name": "BaseAudioContext.createStereoPanner",
        "params": [],
        "path": "dom/baseaudiocontext/createstereopanner",
        "syntax": "baseAudioContext.createStereoPanner();",
        "type": "Audio"
    },
    "BaseAudioContext.createWaveShaper": {
        "descr": "The createWaveShaper() method of the BaseAudioContext interface creates a WaveShaperNode, which represents a non-linear distortion. It is used to apply distortion effects to your audio.",
        "name": "BaseAudioContext.createWaveShaper",
        "params": [],
        "path": "dom/baseaudiocontext/createwaveshaper",
        "syntax": "baseAudioCtx.createWaveShaper();",
        "type": "Audio"
    },
    "BaseAudioContext.currentTime": {
        "descr": "The currentTime read-only property of the BaseAudioContext interface returns a double representing an ever-increasing hardware timestamp in seconds that can be used for scheduling audio playback, visualizing timelines, etc. It starts at 0.",
        "name": "BaseAudioContext.currentTime",
        "params": [],
        "path": "dom/baseaudiocontext/currenttime",
        "syntax": "var curTime = baseAudioContext.currentTime;  Example var AudioContext = window.AudioContext || window.webkitAudioContext; var audioCtx = new AudioContext();\n or  // Older webkit/blink browsers require a prefix ... console.log(audioCtx.currentTime);",
        "type": "Audio"
    },
    "BaseAudioContext.decodeAudioData": {
        "descr": "The decodeAudioData() method of the BaseAudioContext Interface is used to asynchronously decode audio file data contained in an ArrayBuffer. In this case the ArrayBuffer is loaded from XMLHttpRequest and FileReader. The decoded AudioBuffer is resampled to the AudioContext's sampling rate, then passed to a callback or promise.",
        "name": "BaseAudioContext.decodeAudioData",
        "params": [
            {
                "descr": "An ArrayBuffer containing the audio data to be decoded, usually grabbed from XMLHttpRequest, WindowOrWorkerGlobalScope.fetch() or FileReader.",
                "name": "ArrayBuffer"
            },
            {
                "descr": "A callback function to be invoked when the decoding successfully finishes. ",
                "name": "DecodeSuccessCallback"
            },
            {
                "descr": "An optional error callback, to be invoked if an error occurs when the audio data is being decoded.",
                "name": "DecodeErrorCallback"
            }
        ],
        "path": "dom/baseaudiocontext/decodeaudiodata",
        "syntax": "baseAudioContext.decodeAudioData(ArrayBuffer, successCallback, errorCallback);",
        "type": "Audio"
    },
    "BaseAudioContext.destination": {
        "descr": "The destination property of the BaseAudioContext interface returns an AudioDestinationNode representing the final destination of all audio in the context. It often represents an actual audio-rendering device such as your device's speakers.",
        "name": "BaseAudioContext.destination",
        "params": [],
        "path": "dom/baseaudiocontext/destination",
        "syntax": "baseAudioContext.destination;  Value An AudioDestinationNode. Example  Note: for a full example implementation, see one of our Web Audio Demos on the MDN Github repo, like voice-change-o-matic.  var AudioContext = window.AudioContext || window.webkitAudioContext; var audioCtx = new AudioContext();\n or  // Older webkit/blink browsers require a prefix var oscillatorNode = audioCtx.createOscillator();\n or  var gainNode = audioCtx.createGain();\n or  oscillatorNode.connect(gainNode);\n or  gainNode.connect(audioCtx.destination);",
        "type": "Audio"
    },
    "BaseAudioContext.listener": {
        "descr": "The listener property of the BaseAudioContext interface returns an AudioListener object that can then be used for implementing 3D audio spatialization.",
        "name": "BaseAudioContext.listener",
        "params": [],
        "path": "dom/baseaudiocontext/listener",
        "syntax": "baseAudioContext.listener;  Value An AudioListener object. Example  Note: for a full Web Audio spatialization example, see our panner-node demo.  var AudioContext = window.AudioContext || window.webkitAudioContext; var audioCtx = new AudioContext();\n or  // Older webkit/blink browsers require a prefix ... var myListener = audioCtx.listener;);",
        "type": "Audio"
    },
    "BaseAudioContext.onstatechange": {
        "descr": "The onstatechange property of the BaseAudioContext interface defines an event handler function to be called when the statechange event fires: this occurs when the audio context's state changes.",
        "name": "BaseAudioContext.onstatechange",
        "params": [],
        "path": "dom/baseaudiocontext/onstatechange",
        "syntax": "baseAudioContext.onstatechange = function() { ... };",
        "type": "Audio"
    },
    "BaseAudioContext.resume": {
        "descr": "The resume() method of the BaseAudioContext Interface resumes the progression of time in an audio context that has previously been suspended.",
        "name": "BaseAudioContext.resume",
        "params": [],
        "path": "dom/baseaudiocontext/resume",
        "syntax": "Promise<> baseAudioContext.resume();",
        "type": "Audio"
    },
    "BaseAudioContext.sampleRate": {
        "descr": "The sampleRate property of the BaseAudioContext interface returns a floating point number representing the sample rate, in samples per second, used by all nodes in this audio context. This limitation means that sample-rate converters are not supported.",
        "name": "BaseAudioContext.sampleRate",
        "params": [],
        "path": "dom/baseaudiocontext/samplerate",
        "syntax": "baseAudioContext.sampleRate;  Value A floating point number indicating the audio context's sample rate, in samples per second. Example  Note: for a full Web Audio example implementation, see one of our Web Audio Demos on the MDN Github repo, like panner-node. Try entering audioCtx.sampleRate into your browser console.  var AudioContext = window.AudioContext || window.webkitAudioContext; var audioCtx = new AudioContext();\n or  // Older webkit/blink browsers require a prefix ... console.log(audioCtx.sampleRate);",
        "type": "Audio"
    },
    "BaseAudioContext.state": {
        "descr": "The state read-only property of the BaseAudioContext interface returns the current state of the AudioContext.",
        "name": "BaseAudioContext.state",
        "params": [],
        "path": "dom/baseaudiocontext/state",
        "syntax": "baseAudioContext.state; Value A DOMString. Possible values are:   suspended: The audio context has been suspended (with the AudioContext.suspend()",
        "type": "Audio"
    },
    "BasicCardRequest.supportedNetworks": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "BasicCardRequest.supportedNetworks",
        "params": [],
        "path": "dom/basiccardrequest/supportednetworks",
        "syntax": "supportedNetworks : [value [, ... value]] Value An array containing one or more DOMStrings, which describe the card networks the retailer supports. Legal values are defined in the W3C's document Card Network Identifiers Approved for use with Payment Request API, and are currently:  amex cartebancaire diners discover jcb mastercard mir unionpay visa  Example The following example shows a sample definition of the first parameter of the PaymentRequest()",
        "type": "Payments"
    },
    "BasicCardRequest.supportedTypes": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "BasicCardRequest.supportedTypes",
        "params": [],
        "path": "dom/basiccardrequest/supportedtypes",
        "syntax": "basicCardRequest.supportedTypes = [cardType1...cardTypeN]; Value An array containing one or more DOMStrings, which describe the card types the retailer supports. Legal values are defined in BasicCardType enum, and are currently:  credit debit prepaid  Example The following example shows a sample definition of the first parameter of the PaymentRequest()",
        "type": "Payments"
    },
    "BasicCardResponse.billingAddress": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "BasicCardResponse.billingAddress",
        "params": [],
        "path": "dom/basiccardresponse/billingaddress",
        "syntax": "\"billingAddress\" : PaymentAddress Value A PaymentAddress object representing the billing address of the card. Example Let's look at a sample payment request: var request = new PaymentRequest(supportedInstruments, details, options);\n or  // Call show() to trigger the browser's payment flow. request.show().then(function(instrumentResponse) { // Do something with the response from the UI. console.log(instrumentResponse.details);\n or  }) .catch(function(err) { // Do something with the error from request.show(). });",
        "type": "Payments"
    },
    "BasicCardResponse.cardNumber": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "BasicCardResponse.cardNumber",
        "params": [],
        "path": "dom/basiccardresponse/cardnumber",
        "syntax": "\"cardNumber\" : \"number\" Value A DOMString representing the credit card number. Example Let's look at a sample payment request: var request = new PaymentRequest(supportedInstruments, details, options);\n or  // Call show() to trigger the browser's payment flow. request.show().then(function(instrumentResponse) { // Do something with the response from the UI. console.log(instrumentResponse.details);\n or  }) .catch(function(err) { // Do something with the error from request.show(). });",
        "type": "Payments"
    },
    "BasicCardResponse.cardSecurityCode": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "BasicCardResponse.cardSecurityCode",
        "params": [],
        "path": "dom/basiccardresponse/cardsecuritycode",
        "syntax": "\"cardSecurityCode\" : \"number\" Value A DOMString representing the card security code. Example Let's look at a sample payment request: var request = new PaymentRequest(supportedInstruments, details, options);\n or  // Call show() to trigger the browser's payment flow. request.show().then(function(instrumentResponse) { // Do something with the response from the UI. console.log(instrumentResponse.details);\n or  }) .catch(function(err) { // Do something with the error from request.show(). });",
        "type": "Payments"
    },
    "BasicCardResponse.cardholderName": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "BasicCardResponse.cardholderName",
        "params": [],
        "path": "dom/basiccardresponse/cardholdername",
        "syntax": "\"cardholderName\" : \"name\" Value A DOMString representing the cardholder name. Example Let's look at a sample payment request: var request = new PaymentRequest(supportedInstruments, details, options);\n or  // Call show() to trigger the browser's payment flow. request.show().then(function(instrumentResponse) { // Do something with the response from the UI. console.log(instrumentResponse.details);\n or  }) .catch(function(err) { // Do something with the error from request.show(). });",
        "type": "Payments"
    },
    "BasicCardResponse.expiryMonth": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "BasicCardResponse.expiryMonth",
        "params": [],
        "path": "dom/basiccardresponse/expirymonth",
        "syntax": "\"expiryMonth\" : \"number\" Value A DOMString representing the card expiry month as a two-digit number in the range 01 to 12. Example Let's look at a sample payment request: var request = new PaymentRequest(supportedInstruments, details, options);\n or  // Call show() to trigger the browser's payment flow. request.show().then(function(instrumentResponse) { // Do something with the response from the UI. console.log(instrumentResponse.details);\n or  }) .catch(function(err) { // Do something with the error from request.show(). });",
        "type": "Payments"
    },
    "BasicCardResponse.expiryYear": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "BasicCardResponse.expiryYear",
        "params": [],
        "path": "dom/basiccardresponse/expiryyear",
        "syntax": "\"expiryYear\" : \"number\" Value A DOMString representing the card expiry year as a four-digit number in the range 0000 to 9999. Example Let's look at a sample payment request: var request = new PaymentRequest(supportedInstruments, details, options);\n or  // Call show() to trigger the browser's payment flow. request.show().then(function(instrumentResponse) { // Do something with the response from the UI. console.log(instrumentResponse.details);\n or  }) .catch(function(err) { // Do something with the error from request.show(). });",
        "type": "Payments"
    },
    "BatteryManager.charging": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "BatteryManager.charging",
        "params": [],
        "path": "dom/batterymanager/charging",
        "syntax": "var charging = battery.charging On return, charging indicates whether or not the battery, which is a BatteryManager object, is currently being charged; if the battery is charging, this value is true. Otherwise, the value is false. Example HTML Content <div id=\"charging\">(charging state unknown)</div>",
        "type": "Battery Status"
    },
    "BatteryManager.chargingTime": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "BatteryManager.chargingTime",
        "params": [],
        "path": "dom/batterymanager/chargingtime",
        "syntax": "var time = battery.chargingTime On return, time is the remaining time in seconds until the battery, which is a BatteryManager object, is fully charged, or 0 if the battery is already fully charged. If the battery is currently discharging, this value is Infinity. Example HTML Content <div id=\"chargingTime\">(charging time unknown)</div>",
        "type": "Battery Status"
    },
    "BatteryManager.dischargingTime": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "BatteryManager.dischargingTime",
        "params": [],
        "path": "dom/batterymanager/dischargingtime",
        "syntax": "var time = battery.dischargingTime On return, time is the remaining time in seconds until the battery, which is a BatteryManager object, is fully discharged and the system will suspend. This value is Infinity if the battery is currently charging rather than discharging, or if the system is unable to report the remaining discharging time. Example HTML Content <div id=\"dischargingTime\">(discharging time unknown)</div>",
        "type": "Battery Status"
    },
    "BatteryManager.level": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "BatteryManager.level",
        "params": [],
        "path": "dom/batterymanager/level",
        "syntax": "var level = battery.level On return, level is a number representing the system's battery charge level scaled to a value between 0.0 and 1.0. A value of 0 means the battery, which is a BatteryManager object, is empty and the system is about to be suspended. A value of 1.0 means the battery is full. A value of 1.0 is also returned if the implementation isn't able to determine the battery charge level or if the system is not battery-powered. Example HTML Content <div id=\"level\">(battery level unknown)</div>",
        "type": "Battery Status"
    },
    "BatteryManager.onchargingchange": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "BatteryManager.onchargingchange",
        "params": [],
        "path": "dom/batterymanager/onchargingchange",
        "syntax": "battery.onchargingchange = funcRef Where battery is a BatteryManager object, and funcRef is a function to be called when the chargingchange event occurs. Example HTML Content <div id=\"level\">(battery level unknown)</div> <div id=\"chargingTime\">(charging time unknown)</div>",
        "type": "Battery Status"
    },
    "BatteryManager.onchargingtimechange": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "BatteryManager.onchargingtimechange",
        "params": [],
        "path": "dom/batterymanager/onchargingtimechange",
        "syntax": "battery.onchargingtimechange = funcRef Where battery is a BatteryManager object, and funcRef is a function to be called when the chargingtimechange event occurs. Example HTML Content <div id=\"level\">(battery level unknown)</div> <div id=\"chargingTime\">(charging time unknown)</div>",
        "type": "Battery Status"
    },
    "BatteryManager.ondischargingtimechange": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "BatteryManager.ondischargingtimechange",
        "params": [],
        "path": "dom/batterymanager/ondischargingtimechange",
        "syntax": "battery.ondischargingtimechange = funcRef Where battery is a BatteryManager object, and funcRef is a function to be called when the dischargingtimechange event occurs. Example HTML Content <div id=\"level\">(battery level unknown)</div> <div id=\"chargingTime\">(charging time unknown)</div>",
        "type": "Battery Status"
    },
    "BatteryManager.onlevelchange": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "BatteryManager.onlevelchange",
        "params": [],
        "path": "dom/batterymanager/onlevelchange",
        "syntax": "navigator.battery.onlevelchange = funcRef Where battery is a BatteryManager object, and funcRef is a function to be called when the levelchange event occurs. Example HTML Content <div id=\"level\">(battery level unknown)</div> <div id=\"stateBaterry\">(charging state unknown)</div>",
        "type": "Battery Status"
    },
    "BeforeInstallPromptEvent.prompt": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "BeforeInstallPromptEvent.prompt",
        "params": [],
        "path": "dom/beforeinstallpromptevent/prompt",
        "syntax": "BeforeInstallPromptEvent.prompt()",
        "type": "Events"
    },
    "BiquadFilterNode.Q": {
        "descr": "The Q property of the BiquadFilterNode interface Is a k-rate AudioParam, a double representing a Q factor, or quality factor.",
        "name": "BiquadFilterNode.Q",
        "params": [],
        "path": "dom/biquadfilternode/q",
        "syntax": "var audioCtx = new AudioContext();\n or  var biquadFilter = audioCtx.createBiquadFilter();\n or  biquadfilter.Q.value = 100;);",
        "type": "Audio"
    },
    "BiquadFilterNode.constructor": {
        "descr": "The BiquadFilterNode() constructor of the Web Audio API creates a new BiquadFilterNode object, which represents a simple low-order filter, and is created using the AudioContext.createBiquadFilter() method.",
        "name": "BiquadFilterNode.constructor",
        "params": [
            {
                "descr": "A reference to an AudioContext.",
                "name": "context"
            },
            {
                "descr": "Options are as follows:   type: One of \"lowpass\", \"highpass\", \"bandpass\", \"lowshelf\", \"highshelf\", \"peaking\", \"notch\", \"allpass\". ",
                "name": "options Optional"
            }
        ],
        "path": "dom/biquadfilternode/biquadfilternode",
        "syntax": "var biquadFilterNode = new BiquadFilterNode(context, options)",
        "type": "Audio"
    },
    "BiquadFilterNode.detune": {
        "descr": "The detune property of the BiquadFilterNode interface is an a-rate AudioParam representing detuning of the frequency in cents.",
        "name": "BiquadFilterNode.detune",
        "params": [],
        "path": "dom/biquadfilternode/detune",
        "syntax": "var audioCtx = new AudioContext();\n or  var biquadFilter = audioCtx.createBiquadFilter();\n or  biquadFilter.detune.value = 100;);",
        "type": "Audio"
    },
    "BiquadFilterNode.frequency": {
        "descr": "The frequency property of the BiquadFilterNode interface Is a k-rate AudioParam, a double representing a frequency in the current filtering algorithm measured in hertz (Hz).",
        "name": "BiquadFilterNode.frequency",
        "params": [],
        "path": "dom/biquadfilternode/frequency",
        "syntax": "var audioCtx = new AudioContext();\n or  var biquadFilter = audioCtx.createBiquadFilter();\n or  biquadFilter.frequency.value = 3000;);",
        "type": "Audio"
    },
    "BiquadFilterNode.gain": {
        "descr": "The gain property of the BiquadFilterNode interface Is a k-rate AudioParam, a double representing the gain used in the current filtering algorithm.",
        "name": "BiquadFilterNode.gain",
        "params": [],
        "path": "dom/biquadfilternode/gain",
        "syntax": "var audioCtx = new AudioContext();\n or  var biquadFilter = audioCtx.createBiquadFilter();\n or  biquadfilter.gain.value = 25;);",
        "type": "Audio"
    },
    "BiquadFilterNode.getFrequencyResponse": {
        "descr": "The getFrequencyResponse() method of the BiquadFilterNode interface takes the current filtering algorithm's settings and calculates the frequency response for frequencies specified in a specified array of frequencies.",
        "name": "BiquadFilterNode.getFrequencyResponse",
        "params": [
            {
                "descr": "A Float32Array containing an array of frequencies, specified in Hertz, which you want to filter.",
                "name": "frequencyArray"
            },
            {
                "descr": "A Float32Array to receive the computed magnitudes of the freqency response for each frequency value in the frequencyArray. ",
                "name": "magResponseOutput"
            },
            {
                "descr": "A Float32Array to receive the computed phase response values in radians for each frequency value in the input frequencyArray. ",
                "name": "phaseResponseOutput"
            },
            {
                "descr": "The three arrays provided are not all of the same length.",
                "name": "InvalidAccessError"
            }
        ],
        "path": "dom/biquadfilternode/getfrequencyresponse",
        "syntax": "BiquadFilterNode.getFrequencyResponse(frequencyArray, magResponseOutput, phaseResponseOutput);",
        "type": "Audio"
    },
    "BiquadFilterNode.type": {
        "descr": "The type property of the BiquadFilterNode interface is a string (enum) value defining the kind of filtering algorithm the node is implementing.",
        "name": "BiquadFilterNode.type",
        "params": [],
        "path": "dom/biquadfilternode/type",
        "syntax": "var audioCtx = new AudioContext();\n or  var biquadFilter = audioCtx.createBiquadFilter();\n or  biquadfilter.type = 'lowpass';);",
        "type": "Audio"
    },
    "Bitwise Operators": {
        "descr": "Bitwise operators treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.",
        "name": "Bitwise Operators",
        "params": [],
        "path": "javascript/operators/bitwise_operators",
        "syntax": "Standard Defined in several sections of the specification: Bitwise NOT operator, Bitwise shift operators, Binary bitwise operators    ECMAScript Latest Draft (ECMA-262) Draft Defined in several sections of the specification: Bitwise NOT operator, Bitwise shift operators, Binary bitwise operators     Browser compatibilityUpdate compatibility data on GitHub",
        "type": "Operators"
    },
    "Blob.constructor": {
        "descr": "The Blob() constructor returns a new Blob object. The content of the blob consists of the concatenation of the values given in the parameter array.",
        "name": "Blob.constructor",
        "params": [],
        "path": "dom/blob/blob",
        "syntax": "var aBlob = new Blob( array[, options]);",
        "type": "File"
    },
    "Blob.size": {
        "descr": "The Blob.size property returns the size in bytes of the Blob or a File.",
        "name": "Blob.size",
        "params": [],
        "path": "dom/blob/size",
        "syntax": "var sizeInBytes = blob.size  Value A number. Example // fileInput is a HTMLInputElement: <input type=\"file\" multiple id=\"myfileinput\"> var fileInput = document.getElementById(\"myfileinput\");\n or  // files is a FileList object (simliar to NodeList) var files = fileInput.files; for (var i = 0; i < files.length; i++) { console.log(files[i].name + \" has a size of \" + files[i].size + \" Bytes\");\n or  });",
        "type": "File"
    },
    "Blob.slice": {
        "descr": "The Blob.slice() method is used to create a new Blob object containing the data in the specified range of bytes of the source Blob.",
        "name": "Blob.slice",
        "params": [
            {
                "descr": "An index into the Blob indicating the first byte to include in the new Blob. ",
                "name": "start Optional"
            },
            {
                "descr": "An index into the Blob indicating the first byte that will *not* be included in the new Blob (i.e. ",
                "name": "end Optional"
            },
            {
                "descr": "The content type to assign to the new Blob; this will be the value of its type property. ",
                "name": "contentType Optional"
            }
        ],
        "path": "dom/blob/slice",
        "syntax": "var blob = instanceOfBlob.slice([start [, end [, contentType]]]);",
        "type": "File"
    },
    "Blob.type": {
        "descr": "The type property of a Blob object provides the MIME type of the file. It returns an empty string if the type couldn't determined.",
        "name": "Blob.type",
        "params": [],
        "path": "dom/blob/type",
        "syntax": "var mimetype = instanceOfFile.type Value A string Example var i, fileInput, files, allowedFileTypes; // fileInput is a HTMLInputElement: <input type=\"file\" multiple id=\"myfileinput\"> fileInput = document.getElementById(\"myfileinput\");\n or  // files is a FileList object (simliar to NodeList) files = fileInput.files; // our application only allows *.png, *.jpeg and *.gif images allowedFileTypes = [\"image/png\", \"image/jpeg\", \"image/gif\"]; for (i = 0; i < files.length; i++) { // Test if file.type is an allowed file type. if (allowedFileTypes.indexOf(files[i].type) > -1) { // file type matched is one of allowed file types. Do something here. } });",
        "type": "File"
    },
    "BlobBuilder": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "BlobBuilder",
        "params": [
            {
                "descr": "The data to append to the Blob being constructed.",
                "name": "data"
            },
            {
                "descr": "Specifies how strings containing \\n are to be written out. ",
                "name": "endings"
            },
            {
                "descr": "The MIME type of the data to be returned in the Blob. ",
                "name": "contentType Optional"
            },
            {
                "descr": "The file name.",
                "name": "name"
            },
            {
                "descr": "The MIME type of the data to be returned in the File. ",
                "name": "contentType Optional"
            }
        ],
        "path": "dom/blobbuilder",
        "syntax": "data The data to append to the Blob being constructed. endings Specifies how strings containing \\n are to be written out. This can be \"transparent\" (endings unchanged) or \"native\"",
        "type": "Miscellaneous"
    },
    "BlobEvent.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "BlobEvent.constructor",
        "params": [
            {
                "descr": "Is an Blob associated with the event.",
                "name": "data"
            },
            {
                "descr": "A DOMHighResTimeStamp to be used in initializing the blob event.",
                "name": "timecode Optional"
            }
        ],
        "path": "dom/blobevent/blobevent",
        "syntax": "blobEvent = new BlobEvent({data: aSpecificBlob}[, timecode]);",
        "type": "Media Streams"
    },
    "Body.arrayBuffer": {
        "descr": "The arrayBuffer() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with an ArrayBuffer.",
        "name": "Body.arrayBuffer",
        "params": [],
        "path": "dom/body/arraybuffer",
        "syntax": "response.arrayBuffer().then(function(buffer) { // do something with buffer });",
        "type": "Fetch"
    },
    "Body.blob": {
        "descr": "The blob() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with a Blob.",
        "name": "Body.blob",
        "params": [],
        "path": "dom/body/blob",
        "syntax": "response.blob().then(function(myBlob) { // do something with myBlob });",
        "type": "Fetch"
    },
    "Body.body": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Body.body",
        "params": [],
        "path": "dom/body/body",
        "syntax": "var stream = responseInstance.body; Value A ReadableStream. Example In our simple stream pump example we fetch an image, expose the response's stream using response.body, create a reader using ReadableStream.getReader()",
        "type": "Fetch"
    },
    "Body.bodyUsed": {
        "descr": "The bodyUsedread-only property of the Body mixin contains a Boolean that indicates whether the body has been read yet.",
        "name": "Body.bodyUsed",
        "params": [],
        "path": "dom/body/bodyused",
        "syntax": "var myBodyUsed = response.bodyUsed; Value A Boolean. Example In our fetch request example (run fetch request live), we create a new request using the Request.Request",
        "type": "Fetch"
    },
    "Body.formData": {
        "descr": "The formData() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with a FormData object.",
        "name": "Body.formData",
        "params": [],
        "path": "dom/body/formdata",
        "syntax": "response.formData() .then(function(formdata) { // do something with your formdata });",
        "type": "Fetch"
    },
    "Body.json": {
        "descr": "The json() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with the result of parsing the body text as JSON.",
        "name": "Body.json",
        "params": [],
        "path": "dom/body/json",
        "syntax": "response.json().then(function(data) { // do something with your data });",
        "type": "Fetch"
    },
    "Body.text": {
        "descr": "The text() method of the Body mixin takes a Response stream and reads it to completion. It returns a promise that resolves with a USVString object (text). The response is always decoded using UTF-8.",
        "name": "Body.text",
        "params": [],
        "path": "dom/body/text",
        "syntax": "response.text().then(function (text) { // do something with the text response });",
        "type": "Fetch"
    },
    "Boolean": {
        "descr": "The Boolean object is an object wrapper for a boolean value.",
        "name": "Boolean",
        "params": [
            {
                "descr": "Optional. The initial value of the Boolean object.",
                "name": "value"
            },
            {
                "descr": "Length property whose value is 1.",
                "name": "Boolean.length"
            },
            {
                "descr": "Represents the prototype for the Boolean constructor.",
                "name": "Boolean.prototype"
            },
            {
                "descr": "Returns the function that created an instance's prototype. ",
                "name": "Boolean.prototype.constructor"
            },
            {
                "descr": "Returns a string containing the source of the Boolean object; you can use this string to create an equivalent object. ",
                "name": "Boolean.prototype.toSource()"
            },
            {
                "descr": "Returns a string of either \"true\" or \"false\" depending upon the value of the object. ",
                "name": "Boolean.prototype.toString()"
            },
            {
                "descr": "Returns the primitive value of the Boolean object. ",
                "name": "Boolean.prototype.valueOf()"
            }
        ],
        "path": "javascript/global_objects/boolean",
        "syntax": "new Boolean([value])",
        "type": "Boolean"
    },
    "BroadcastChannel.close": {
        "descr": "The BroadcastChannel.close() terminates the connection to the underlying channel, allowing the object to be garbage collected. This is a necessary step to perform as there is no other way for a browser to know that this channel is not needed anymore.",
        "name": "BroadcastChannel.close",
        "params": [],
        "path": "dom/broadcastchannel/close",
        "syntax": "var str = channel.close();",
        "type": "Broadcast Channel"
    },
    "BroadcastChannel.constructor": {
        "descr": "The BroadcastChannel() constructor creates a new BroadcastChannel and connects it to the underlying channel.",
        "name": "BroadcastChannel.constructor",
        "params": [
            {
                "descr": "Is a DOMString representing the name of the channel; there is one single channel with this name for all browsing contexts with the same origin.",
                "name": "channel"
            }
        ],
        "path": "dom/broadcastchannel/broadcastchannel",
        "syntax": "channel = new BroadcastChannel(channel);",
        "type": "Broadcast Channel"
    },
    "BroadcastChannel.name": {
        "descr": "The read-only BroadcastChannel.name property returns a DOMString, which uniquely identifies the given channel with its name. This name is passed to the BroadcastChannel() constructor at creation time and is therefore read-only.",
        "name": "BroadcastChannel.name",
        "params": [],
        "path": "dom/broadcastchannel/name",
        "syntax": "var str = channel.name;  Examples // Connect to a channel var bc = new BroadcastChannel('test_channel');\n or  // More operations (like postMessage, …) // Log the channel name to the console console.log(bc.name);\n or  // \"test_channel\" // When done, disconnect from the channel bc.close();",
        "type": "Broadcast Channel"
    },
    "BroadcastChannel.onmessage": {
        "descr": "The BroadcastChannel.onmessage event handler is a property that specifies the function to execute when a message event, of type MessageEvent, is received by this BroadcastChannel. Such an event is sent by the browser with a message broadcasted to the channel.",
        "name": "BroadcastChannel.onmessage",
        "params": [],
        "path": "dom/broadcastchannel/onmessage",
        "syntax": "channel.onmessage = function;  Values   function is the name of a user-defined function, without the ()",
        "type": "Broadcast Channel"
    },
    "BroadcastChannel.onmessageerror": {
        "descr": "The onmessageerror event handler of the BroadcastChannel interface is an EventListener, called whenever an MessageEvent of type messageerror is fired on the BroadcastChannel instance — that is, when it receives a message that cannot be deserialized.",
        "name": "BroadcastChannel.onmessageerror",
        "params": [],
        "path": "dom/broadcastchannel/onmessageerror",
        "syntax": "bc.onmessageerror = function() { ... };",
        "type": "Broadcast Channel"
    },
    "BroadcastChannel.postMessage": {
        "descr": "The BroadcastChannel.postMessage() sends a message, which can be of any kind of Object, to each listener in any browser context with the same origin. The message is transmitted as a message event targeted at each BroadcastChannel bound to the channel.",
        "name": "BroadcastChannel.postMessage",
        "params": [],
        "path": "dom/broadcastchannel/postmessage",
        "syntax": "var str = channel.postMessage(object);",
        "type": "Broadcast Channel"
    },
    "BudgetService.getBudget": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "BudgetService.getBudget",
        "params": [],
        "path": "dom/budgetservice/getbudget",
        "syntax": "var aPromise = BudgetService.getBudget();\n or  aPromise.then(function(budgetState[]){ ... });",
        "type": "Budget"
    },
    "BudgetService.getCost": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "BudgetService.getCost",
        "params": [
            {
                "descr": "Must be \"silent-push\".",
                "name": "operation"
            }
        ],
        "path": "dom/budgetservice/getcost",
        "syntax": "var aPromise = BudgetService.getCost(operation);\n or  aPromise.then(function(someDouble){ ... });",
        "type": "Budget"
    },
    "BudgetService.reserve": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "BudgetService.reserve",
        "params": [
            {
                "descr": "desc",
                "name": "operation"
            }
        ],
        "path": "dom/budgetservice/reserve",
        "syntax": "var aPromise = BudgetService.reserve(operation);\n or  aPromise.then(function(boolean){ ... });",
        "type": "Budget"
    },
    "ByteLengthQueuingStrategy.constructor": {
        "descr": "Draft This page is not complete.",
        "name": "ByteLengthQueuingStrategy.constructor",
        "params": [
            {
                "descr": "An object containing a highWaterMark property. ",
                "name": "{highWaterMark}"
            }
        ],
        "path": "dom/bytelengthqueuingstrategy/bytelengthqueuingstrategy",
        "syntax": "var byteLengthQS = new ByteLengthQueuingStrategy({highWaterMark});",
        "type": "Media Streams"
    },
    "ByteLengthQueuingStrategy.size": {
        "descr": "Draft This page is not complete.",
        "name": "ByteLengthQueuingStrategy.size",
        "params": [
            {
                "descr": "A chunk of data being passed through the stream.",
                "name": "chunk"
            }
        ],
        "path": "dom/bytelengthqueuingstrategy/size",
        "syntax": "var size = byteLengthQueuingStrategyInstance.size(chunk);",
        "type": "Media Streams"
    },
    "CDATASection": {
        "descr": "The CDATASection interface represents a CDATA section that can be used within XML to include extended portions of unescaped text. The symbols < and & don’t need escaping as they normally do when inside a CDATA section.",
        "name": "CDATASection",
        "params": [],
        "path": "dom/cdatasection",
        "syntax": "< and & don’t need escaping as they normally do when inside a CDATA section. In XML, a CDATA section looks like: <![CDATA[ ... ]]>  For example: <foo>Here is a CDATA section: <![CDATA[ < > & ]]> with all kinds of unescaped text.</foo>  The only sequence which is not allowed within a CDATA section is the closing sequence of a CDATA section itself: <![CDATA[ ]]> will cause an error ]]>  Note that CDATA sections should not be used within HTML; they only work in XML.  Properties This interface has no specific properties and implements those of its parent Text. Methods This interface has no specific methods and implements those of its parent Text. Specifications    Specification Status Comment     DOMThe definition of 'CDATASection' in that specification. Living Standard Re-added in issue #295 due to web breakage   DOM4The definition of 'CDATASection' in that specification. Obsolete Removed in favour of the more generic Text interface   Document Object Model (DOM) Level 3 Core SpecificationThe definition of 'CDATASection' in that specification. Obsolete No change from Document Object Model (DOM) Level 2 Core Specification    Document Object Model (DOM) Level 2 Core SpecificationThe definition of 'CDATASection' in that specification. Obsolete No change from Document Object Model (DOM) Level 1 Specification.   Document Object Model (DOM) Level 1 SpecificationThe definition of 'CDATASection' in that specification. Obsolete Initial definition    Browser compatibilityUpdate compatibility data on GitHub",
        "type": "Miscellaneous"
    },
    "CSS.escape": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "CSS.escape",
        "params": [
            {
                "descr": "The DOMString to be escaped.",
                "name": "str"
            }
        ],
        "path": "dom/css/escape",
        "syntax": "escapedStr = CSS.escape(str);",
        "type": "CSS"
    },
    "CSS.supports": {
        "descr": "The CSS.supports() static methods returns a Boolean value indicating if the browser supports a given CSS feature, or not.",
        "name": "CSS.supports",
        "params": [
            {
                "descr": "A DOMString containing the name of the CSS property to check.",
                "name": "propertyName"
            },
            {
                "descr": "A DOMString containing the value of the CSS property to check.",
                "name": "value"
            },
            {
                "descr": "A DOMString containing the condition to check.",
                "name": "supportCondition"
            }
        ],
        "path": "dom/css/supports",
        "syntax": "boolValue = CSS.supports(propertyName, value);\n or  boolValue = CSS.supports(supportCondition);",
        "type": "CSS"
    },
    "CSSGroupingRule": {
        "descr": "An object implementing the CSSGroupingRule interface represents any CSS at-rule that contains other rules nested within it.",
        "name": "CSSGroupingRule",
        "params": [],
        "path": "dom/cssgroupingrule",
        "syntax": "interface CSSGroupingRule : CSSRule { readonly attribute CSSRuleList cssRules; unsigned long insertRule (DOMString rule, unsigned long index);\n or  void deleteRule (unsigned long index);\n or  });",
        "type": "CSS"
    },
    "CSSKeywordValue.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "CSSKeywordValue.constructor",
        "params": [
            {
                "descr": "Sets or returns the value of the new CSSKeywordValue.",
                "name": "value"
            }
        ],
        "path": "dom/csskeywordvalue/csskeywordvalue",
        "syntax": "var cssKeywordValue = new CSSKeywordValue(val)",
        "type": "CSS"
    },
    "CSSKeywordValue.value": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "CSSKeywordValue.value",
        "params": [],
        "path": "dom/csskeywordvalue/value",
        "syntax": "var val = cssKeywordValue.value cssKeywordValue.value = val Value A USVString. Examples The following example resets the CSS display property to its defaults. let indicator = Document.getElementById('indicator');\n or  indicator.attributeStyleMap.set('display', new CSSKeywordValue('initial'));\n or  indicator.attributeStyleMap.get('display').value // 'initial');",
        "type": "CSS"
    },
    "CSSMediaRule": {
        "descr": "The CSSMediaRule is an interface representing a single CSS @media rule. It implements the CSSConditionRule interface, and therefore the CSSGroupingRule and the CSSRule interface with a type value of 4 (CSSRule.MEDIA_RULE).",
        "name": "CSSMediaRule",
        "params": [
            {
                "descr": "Specifies a MediaList representing the intended destination medium for style information.",
                "name": "CSSMediaRule.media Read only"
            }
        ],
        "path": "dom/cssmediarule",
        "syntax": "interface CSSMediaRule : CSSConditionRule { readonly attribute MediaList media; }  Properties As a CSSConditionRule, and therefore both a CSSGroupingRule and a CSSRule, CSSMediaRule also implements the properties of these interfaces. It has the following specific property:   CSSMediaRule.media Read only   Specifies a MediaList representing the intended destination medium for style information.  Methods As a CSSConditionRule, and therefore both a CSSGroupingRule and a CSSRule, CSSMediaRule also implements the methods of that interface. It has no specific methods. Specifications    Specification Status Comment     CSS Conditional Rules Module Level 3The definition of 'CSSMediaRule' in that specification. Candidate Recommendation Make it derived from the CSSConditionRule.   CSS Object Model (CSSOM)The definition of 'CSSMediaRule' in that specification. Working Draft No changes from Document Object Model (DOM) Level 2 Style Specification    Document Object Model (DOM) Level 2 Style SpecificationThe definition of 'CSSMediaRule' in that specification. Obsolete      Browser compatibilityUpdate compatibility data on GitHub",
        "type": "CSS"
    },
    "CSSNamespaceRule": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "CSSNamespaceRule",
        "params": [
            {
                "descr": "Returns a DOMString with the name of the prefix associated to this namespace. ",
                "name": "CSSNamespaceRule.prefix"
            }
        ],
        "path": "dom/cssnamespacerule",
        "syntax": "interface CSSNamespaceRule : CSSRule { readonly attribute DOMString namespaceURI; readonly attribute DOMString? prefix; };  Properties As a CSSRule, CSSNamespaceRule also implements the properties of that interface. It has some specific properties:  CSSNamespaceRule.namespaceURI Returns a DOMString containing the text of the URI of the given namespace. CSSNamespaceRule.prefix Returns a DOMString with the name of the prefix associated to this namespace. If there is no such prefix, returns null.  Methods As a CSSRule, CSSNamespaceRule also implements the methods of that interface. It has no specific methods: Specification    Specification Status Comment     CSS Object Model (CSSOM)The definition of 'CSSNamespaceRule' in that specification. Working Draft Initial definition.    Browser compatibilityUpdate compatibility data on GitHub",
        "type": "CSS"
    },
    "CSSNamespaceRule.namespaceURI": {
        "descr": "The CSSNamespaceRule.namespaceURI read-only property returns a DOMString containing the text of the URI of the given namespace.",
        "name": "CSSNamespaceRule.namespaceURI",
        "params": [],
        "path": "dom/cssnamespacerule/namespaceuri",
        "syntax": "var namespaceURI = CSSNamespaceRule.namespaceURI Returns A DOMString containing a URI. Specifications    Specification Status Comment   CSS Object Model (CSSOM)The definition of 'namespaceURI' in that specification. Working Draft Initial definition.    Browser compatibilityUpdate compatibility data on GitHub",
        "type": "CSS"
    },
    "CSSNamespaceRule.prefix": {
        "descr": "The CSSNamespaceRule.prefix read-only property returns a DOMString with the name of the prefix associated to this namespace. If there is no such prefix, returns null.",
        "name": "CSSNamespaceRule.prefix",
        "params": [],
        "path": "dom/cssnamespacerule/prefix",
        "syntax": "var prefix = CSSNamespaceRule.prefix Returns A DOMString containing the prefix associated to this namespace. Specifications    Specification Status Comment   CSS Object Model (CSSOM)The definition of 'namespaceURI' in that specification. Working Draft Initial definition.    Browser compatibilityUpdate compatibility data on GitHub",
        "type": "CSS"
    },
    "CSSPageRule": {
        "descr": "CSSPageRule is an interface representing a single CSS @page rule. It implements the CSSRule interface with a type value of 6 (CSSRule.PAGE_RULE).",
        "name": "CSSPageRule",
        "params": [
            {
                "descr": "Represents the text of the page selector associated with the at-rule.",
                "name": "CSSPageRule.selectorText"
            },
            {
                "descr": "Returns the declaration block associated with the at-rule.",
                "name": "CSSPageRule.style Read only"
            }
        ],
        "path": "dom/csspagerule",
        "syntax": "interface CSSPageRule : CSSRule { attribute DOMString selectorText; readonly attribute CSSStyleDeclaration style; };  Properties As a CSSRule, CSSPageRule also implements the properties of this interface. It has the following specific properties:  CSSPageRule.selectorText Represents the text of the page selector associated with the at-rule.  CSSPageRule.style Read only   Returns the declaration block associated with the at-rule.  Methods As a CSSRule, CSSPageRule also implements the methods of that interface. It has no specific methods. Specifications    Specification Status Comment     CSS Object Model (CSSOM)The definition of 'CSSPageRule' in that specification. Working Draft No changes from Document Object Model (DOM) Level 2 Style Specification    Document Object Model (DOM) Level 2 Style SpecificationThe definition of 'CSSPageRule' in that specification. Obsolete Initial definition    Browser compatibilityUpdate compatibility data on GitHub",
        "type": "CSS"
    },
    "CSSPositionValue.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "CSSPositionValue.constructor",
        "params": [
            {
                "descr": "A position along the web page's horizontal axis.",
                "name": "x"
            },
            {
                "descr": "A position along the web page's vertical axix.",
                "name": "y"
            }
        ],
        "path": "dom/csspositionvalue/csspositionvalue",
        "syntax": "cvar cssPositionValue = new CSSPositionValue(x, y)",
        "type": "CSS"
    },
    "CSSPositionValue.x": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "CSSPositionValue.x",
        "params": [],
        "path": "dom/csspositionvalue/x",
        "syntax": "var x = CSSPositionValue.x Value A CSSNumericValue. Example The following example positions a container <div> 5 pixels from the top and 10 pixels from the left of the page.  let someDiv = document.getElementById('container');\n or  let position = new CSSPositionValue(CSS.px(5), CSS.px(10));\n or  someDiv.attributeStyleMap.set('object-position', position);\n or  console.log(position.x.value, position.y.value);",
        "type": "CSS"
    },
    "CSSPositionValue.y": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "CSSPositionValue.y",
        "params": [],
        "path": "dom/csspositionvalue/y",
        "syntax": "var y = CSSPositionValue.y Value A CSSNumericValue. Example The following example positions a container <div> 5 pixels from the top and 10 pixels from the left of the page.  let someDiv = document.getElementById('container');\n or  let position = new CSSPositionValue(CSS.px(5), CSS.px(10));\n or  someDiv.attributeStyleMap.set('object-position', position);\n or  console.log(position.x.value, position.y.value);",
        "type": "CSS"
    },
    "CSSPrimitiveValue": {
        "descr": "The CSSPrimitiveValue interface derives from the CSSValue interface and represents the current computed value of a CSS property.",
        "name": "CSSPrimitiveValue",
        "params": [
            {
                "descr": "An unsigned short representing the type of the value. ",
                "name": "CSSPrimitiveValue.primitiveType Read only"
            },
            {
                "descr": "This method is used to get the counter value. ",
                "name": "CSSPrimitiveValue.getCounterValue()"
            },
            {
                "descr": "This method is used to get a float value in a specified unit. ",
                "name": "CSSPrimitiveValue.getFloatValue()"
            },
            {
                "descr": "This method is used to get the RGB color. ",
                "name": "CSSPrimitiveValue.getRGBColorValue()"
            },
            {
                "descr": "This method is used to get the Rect value. ",
                "name": "CSSPrimitiveValue.getRectValue()"
            },
            {
                "descr": "This method is used to get the string value. ",
                "name": "CSSPrimitiveValue.getStringValue()"
            },
            {
                "descr": "A method to set the float value with a specified unit. ",
                "name": "CSSPrimitiveValue.setFloatValue()"
            },
            {
                "descr": "A method to set the string value with the specified unit. ",
                "name": "CSSPrimitiveValue.setStringValue()"
            }
        ],
        "path": "dom/cssprimitivevalue",
        "syntax": "rect()",
        "type": "CSS"
    },
    "CSSPrimitiveValue.getCounterValue": {
        "descr": "The getCounterValue() method of the CSSPrimitiveValue interface is used to get the counter value. If this CSS value doesn't contain a counter value, a DOMException is raised. Modification to the corresponding style property can be achieved using the Counter interface.",
        "name": "CSSPrimitiveValue.getCounterValue",
        "params": [],
        "path": "dom/cssprimitivevalue/getcountervalue",
        "syntax": "var counterValue = cssPrimitiveValue.getCounterValue();",
        "type": "CSS"
    },
    "CSSPrimitiveValue.getFloatValue": {
        "descr": "The getFloatValue() method of the CSSPrimitiveValue interface is used to get a float value in a specified unit. If this CSS value doesn't contain a float value or can't be converted into the specified unit, a DOMException is raised.",
        "name": "CSSPrimitiveValue.getFloatValue",
        "params": [
            {
                "descr": "An unsigned short representing the code for the unit type, in which the value should be returned. ",
                "name": "unitType"
            }
        ],
        "path": "dom/cssprimitivevalue/getfloatvalue",
        "syntax": "var floatValue = cssPrimitiveValue.getFloatValue(unit);",
        "type": "CSS"
    },
    "CSSPrimitiveValue.getRGBColorValue": {
        "descr": "The getRGBColorValue() method of the CSSPrimitiveValue interface is used to get an RGB color value. If this CSS value doesn't contain a RGB color value, a DOMException is raised. Modification to the corresponding style property can be achieved using the RGBColor interface.",
        "name": "CSSPrimitiveValue.getRGBColorValue",
        "params": [],
        "path": "dom/cssprimitivevalue/getrgbcolorvalue",
        "syntax": "var rgbColorValue = cssPrimitiveValue.getRGBColorValue();",
        "type": "CSS"
    },
    "CSSPrimitiveValue.getRectValue": {
        "descr": "The getRectValue() method of the CSSPrimitiveValue interface is used to get a rect value. If this CSS value doesn't contain a rect value, a DOMException is raised. Modification to the corresponding style property can be achieved using the Rect interface.",
        "name": "CSSPrimitiveValue.getRectValue",
        "params": [],
        "path": "dom/cssprimitivevalue/getrectvalue",
        "syntax": "var rectValue = cssPrimitiveValue.getRectValue();",
        "type": "CSS"
    },
    "CSSPrimitiveValue.getStringValue": {
        "descr": "The getStringValue() method of the CSSPrimitiveValue interface is used to get a string value. If this CSS value doesn't contain a string value, a DOMException is raised.",
        "name": "CSSPrimitiveValue.getStringValue",
        "params": [],
        "path": "dom/cssprimitivevalue/getstringvalue",
        "syntax": "var stringValue = cssPrimitiveValue.getStringValue();",
        "type": "CSS"
    },
    "CSSPrimitiveValue.primitiveType": {
        "descr": "The primitiveType read-only property of the CSSPrimitiveValue interface represents the type of a CSS value.",
        "name": "CSSPrimitiveValue.primitiveType",
        "params": [],
        "path": "dom/cssprimitivevalue/primitivetype",
        "syntax": "type = cssPrimitiveValue.primitiveType;  Value An unsigned short representing the type of the value. Possible values are:    Constant Description   CSS_ATTR The value is an attr()",
        "type": "CSS"
    },
    "CSSPrimitiveValue.setFloatValue": {
        "descr": "The setFloatValue() method of the CSSPrimitiveValue interface is used to set a float value. If the property attached to this value can't accept the specified unit or the float value, the value will be unchanged and a DOMException will be raised.",
        "name": "CSSPrimitiveValue.setFloatValue",
        "params": [
            {
                "descr": "An unsigned short representing the code for the unit type, in which the value should be returned. ",
                "name": "unitType"
            },
            {
                "descr": "A float representing the new float value.",
                "name": "floatValue"
            }
        ],
        "path": "dom/cssprimitivevalue/setfloatvalue",
        "syntax": "cssPrimitiveValue.setFloatValue(unitType, floatValue);",
        "type": "CSS"
    },
    "CSSPrimitiveValue.setStringValue": {
        "descr": "The setStringValue() method of the CSSPrimitiveValue interface is used to set a string value. If the property attached to this value can't accept the specified unit or the string value, the value will be unchanged and a DOMException will be raised.",
        "name": "CSSPrimitiveValue.setStringValue",
        "params": [
            {
                "descr": "An unsigned short representing the type of the value. ",
                "name": "stringType"
            },
            {
                "descr": "A DOMString representing the new string value.",
                "name": "stringValue"
            }
        ],
        "path": "dom/cssprimitivevalue/setstringvalue",
        "syntax": "cssPrimitiveValue.setStringValue(stringType, stringValue);",
        "type": "CSS"
    },
    "CSSRule": {
        "descr": "The CSSRule interface represents a single CSS rule. There are several types of rules, listed in the Type constants section below.",
        "name": "CSSRule",
        "params": [],
        "path": "dom/cssrule",
        "syntax": "CSSRule interface specifies the properties common to all rules, while properties unique to specific rule types are specified in the more specialized interfaces for those rules' respective types. References to a CSSRule may be obtained by looking at a CSSStyleSheet's cssRules list. Properties common to all CSSRule instances  CSSRule.cssText Represents the textual representation of the rule, e.g. \"h1,h2 { font-size: 16pt }\" or \"@import 'url'\". To access or modify parts of the rule (e.g. the value of \"font-size\" in the example) use the properties on the specialized interface for the rule's type.  CSSRule.parentRule",
        "type": "CSS"
    },
    "CSSRule.cssText": {
        "descr": "Not to be confused with element-style CSSStyleDeclaration.cssText.",
        "name": "CSSRule.cssText",
        "params": [],
        "path": "dom/cssrule/csstext",
        "syntax": "string = cssRule.cssText  Example <style> body { background-color: darkblue; } </style> <script> var stylesheet = document.styleSheets[0]; alert(stylesheet.cssRules[0].cssText);\n or  // body { background-color: darkblue; } </script>);",
        "type": "CSS"
    },
    "CSSRule.parentStyleSheet": {
        "descr": "parentStyleSheet returns the stylesheet object in which the current rule is defined.",
        "name": "CSSRule.parentStyleSheet",
        "params": [],
        "path": "dom/cssrule/parentstylesheet",
        "syntax": "var stylesheet = cssRule.parentStyleSheet  Parameters   stylesheet is a stylesheet object.  Example if ( bgRule.parentStyleSheet != mySheet ) { // alien style rule! }",
        "type": "CSS"
    },
    "CSSRuleList": {
        "descr": "A CSSRuleList is an (indirect-modify only) array-like object containing an ordered collection of CSSRule objects.",
        "name": "CSSRuleList",
        "params": [],
        "path": "dom/cssrulelist",
        "syntax": "CSSRule can be accessed as rules.item(index),",
        "type": "CSS"
    },
    "CSSStyleDeclaration": {
        "descr": "The CSSStyleDeclaration API represents an object that is a CSS declaration block, that exposes style information and various style-related methods and properties.",
        "name": "CSSStyleDeclaration",
        "params": [
            {
                "descr": "Textual representation of the declaration block. ",
                "name": "CSSStyleDeclaration.cssText"
            },
            {
                "descr": "The number of properties. See the item() method below.",
                "name": "CSSStyleDeclaration.length Read only"
            },
            {
                "descr": "The containing CSSRule.",
                "name": "CSSStyleDeclaration.parentRule Read only"
            },
            {
                "descr": "Returns the optional priority, \"important\".",
                "name": "CSSStyleDeclaration.getPropertyPriority()"
            },
            {
                "descr": "Returns the property value given a property name.",
                "name": "CSSStyleDeclaration.getPropertyValue()"
            },
            {
                "descr": "Returns a property name.",
                "name": "CSSStyleDeclaration.item()"
            },
            {
                "descr": "Removes a property from the CSS declaration block.",
                "name": "CSSStyleDeclaration.removeProperty()"
            },
            {
                "descr": "Modifies an existing CSS property or creates a new CSS property in the declaration block.",
                "name": "CSSStyleDeclaration.setProperty()"
            },
            {
                "descr": "Only supported via getComputedStyle in Firefox. ",
                "name": "CSSStyleDeclaration.getPropertyCSSValue()"
            }
        ],
        "path": "dom/cssstyledeclaration",
        "syntax": "CSSStyleDeclaration.cssText Textual representation of the declaration block. Setting this attribute changes the style.  CSSStyleDeclaration.length Read only   The number of properties. See the item()",
        "type": "CSS"
    },
    "CSSStyleDeclaration.cssText": {
        "descr": "Not to be confused with stylesheet style-rule CSSRule.cssText.",
        "name": "CSSStyleDeclaration.cssText",
        "params": [],
        "path": "dom/cssstyledeclaration/csstext",
        "syntax": "string = elem.style.cssText  Example <span id=\"s1\" style=\"color: red;\"> Some text </span> <script> var elem = document.getElementById(\"s1\");\n or  alert(elem.style.cssText);\n or  // \"color: red;\" </script>);",
        "type": "CSS"
    },
    "CSSStyleDeclaration.getPropertyCSSValue": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "CSSStyleDeclaration.getPropertyCSSValue",
        "params": [],
        "path": "dom/cssstyledeclaration/getpropertycssvalue",
        "syntax": "var value = style.getPropertyCSSValue(property);",
        "type": "CSS"
    },
    "CSSStyleDeclaration.getPropertyPriority": {
        "descr": "The CSSStyleDeclaration.getPropertyPriority() method interface returns a DOMString that provides all explicitly set priorities on the CSS property.",
        "name": "CSSStyleDeclaration.getPropertyPriority",
        "params": [],
        "path": "dom/cssstyledeclaration/getpropertypriority",
        "syntax": "var priority = style.getPropertyPriority(property);",
        "type": "CSS"
    },
    "CSSStyleDeclaration.getPropertyValue": {
        "descr": "The CSSStyleDeclaration.getPropertyValue() method interface returns a DOMString containing the value of a specified CSS property.",
        "name": "CSSStyleDeclaration.getPropertyValue",
        "params": [],
        "path": "dom/cssstyledeclaration/getpropertyvalue",
        "syntax": "var value = style.getPropertyValue(property);",
        "type": "CSS"
    },
    "CSSStyleDeclaration.item": {
        "descr": "JavaScript has a special simpler syntax for obtaining an item from a NodeList by index:",
        "name": "CSSStyleDeclaration.item",
        "params": [],
        "path": "dom/cssstyledeclaration/item",
        "syntax": "var propertyName = style.item(index);",
        "type": "CSS"
    },
    "CSSStyleDeclaration.length": {
        "descr": "The read-only property returns an integer that represents the number of style declarations in this CSS declaration block.",
        "name": "CSSStyleDeclaration.length",
        "params": [],
        "path": "dom/cssstyledeclaration/length",
        "syntax": "var num = styles.length; Value An integer that provides the number of styles explictly set on the parent of the instance. Example The following gets the number of explicitly set styles on the following HTML element: <div id=\"div1\" style=\"margin: 0 10px; background-color: #CA1; font-family: monospace\"></div> JavaScript code: var myDiv = document.getElementById('div1');\n or  var divStyle = myDiv.style; var len = divStyles.length; // 3);",
        "type": "CSS"
    },
    "CSSStyleDeclaration.parentRule": {
        "descr": "The CSSStyleDeclaration.parentRule read-only property returns a CSSRule that is the parent of this style block, e.g. a CSSStyleRule representing the style for a CSS selector.",
        "name": "CSSStyleDeclaration.parentRule",
        "params": [],
        "path": "dom/cssstyledeclaration/parentrule",
        "syntax": "var rule = styles.parentRule; Value The CSS rule that contains this declaration block or null if this CSSStyleDeclaration is not attached to a CSSRule. Example The following JavaScript code gets the parent CSS style rule from a CSSStyleDeclaration: var declaration = document.styleSheets[0].rules[0].style; var rule = declaration.parentRule;  Specifications    Specification Status Comment     CSS Object Model (CSSOM)The definition of 'CSSStyleDeclaration.parentRule' in that specification. Working Draft     Document Object Model (DOM) Level 2 Style SpecificationThe definition of 'CSSStyleDeclaration' in that specification. Obsolete      Browser compatibilityUpdate compatibility data on GitHub",
        "type": "CSS"
    },
    "CSSStyleDeclaration.removeProperty": {
        "descr": "The CSSStyleDeclaration.removeProperty() method interface removes a property from a CSS style declaration object.",
        "name": "CSSStyleDeclaration.removeProperty",
        "params": [],
        "path": "dom/cssstyledeclaration/removeproperty",
        "syntax": "var oldValue = style.removeProperty(property);",
        "type": "CSS"
    },
    "CSSStyleDeclaration.setProperty": {
        "descr": "The CSSStyleDeclaration.setProperty() method interface sets a new value for a property on a CSS style declaration object.",
        "name": "CSSStyleDeclaration.setProperty",
        "params": [],
        "path": "dom/cssstyledeclaration/setproperty",
        "syntax": "style.setProperty(propertyName, value, priority);",
        "type": "CSS"
    },
    "CSSStyleRule": {
        "descr": "CSSStyleRule represents a single CSS style rule. It implements the CSSRule interface with a type value of 1 (CSSRule.STYLE_RULE).",
        "name": "CSSStyleRule",
        "params": [],
        "path": "dom/cssstylerule",
        "syntax": "interface CSSStyleRule : CSSRule { attribute DOMString selectorText; readonly attribute CSSStyleDeclaration style; }; Properties  CSSStyleRule.selectorText Gets the textual representation of the selector for this rule, e.g. \"h1,h2\". CSSStyleRule.style Returns the CSSStyleDeclaration object for the rule.  Specifications    Specification Status Comment     CSS Object Model (CSSOM)The definition of 'CSSStyleRule' in that specification. Working Draft No changes   Document Object Model (DOM) Level 2 Style SpecificationThe definition of 'CSSRule' in that specification. Obsolete      Browser compatibilityUpdate compatibility data on GitHub",
        "type": "CSS"
    },
    "CSSStyleRule.selectorText": {
        "descr": "The CSSRule.selectorText property gets the textual representation of the selector for the rule set. This is readonly in some browsers; to set stylesheet rules dynamically cross-browser, see Using dynamic styling information.",
        "name": "CSSStyleRule.selectorText",
        "params": [],
        "path": "dom/cssstylerule/selectortext",
        "syntax": "string = cssRule.selectorText  Example // for cssrule: body { background-color: darkblue; } var stylesheet = document.styleSheets[0]; alert(stylesheet.cssRules[0].selectorText);\n or  // body);",
        "type": "CSS"
    },
    "CSSStyleRule.style": {
        "descr": "The CSSRule.style property is the CSSStyleDeclaration interface for the declaration block of the CSSRule.",
        "name": "CSSStyleRule.style",
        "params": [],
        "path": "dom/cssstylerule/style",
        "syntax": "styleObj = cssRule.style  Example function stilo() { alert(document.styleSheets[0].cssRules[0].style.cssText);\n or  } // displays \"background-color: gray;\");",
        "type": "CSS"
    },
    "CSSStyleSheet": {
        "descr": "The CSSStyleSheet interface represents a single CSS style sheet. It inherits properties and methods from its parent, StyleSheet.",
        "name": "CSSStyleSheet",
        "params": [],
        "path": "dom/cssstylesheet",
        "syntax": "StyleSheet.  CSSStyleSheet.cssRules Returns a live CSSRuleList, listing the CSSRule objects in the style sheet. This is normally used to access individual rules like this:  styleSheet.cssRules[i] // where i = 0..cssRules.length-1 To add or remove items in cssRules, use the CSSStyleSheet's deleteRule()",
        "type": "CSS"
    },
    "CSSStyleSheet.deleteRule": {
        "descr": "The CSSStyleSheet.deleteRule() method removes a style rule from the current style sheet object.",
        "name": "CSSStyleSheet.deleteRule",
        "params": [],
        "path": "dom/cssstylesheet/deleterule",
        "syntax": "stylesheet.deleteRule(index)",
        "type": "CSS"
    },
    "CSSStyleSheet.insertRule": {
        "descr": "The CSSStyleSheet.insertRule() method inserts a new CSS rule into the current style sheet, with some restrictions.",
        "name": "CSSStyleSheet.insertRule",
        "params": [
            {
                "descr": "A DOMString containing the rule to be inserted. ",
                "name": "rule"
            },
            {
                "descr": "A positive integer less than or equal to stylesheet.cssRules.length, representing the newly inserted rule's position in CSSStyleSheet.cssRules. ",
                "name": "index Optional"
            }
        ],
        "path": "dom/cssstylesheet/insertrule",
        "syntax": "stylesheet.insertRule(rule[, index])",
        "type": "CSS"
    },
    "CSSStyleValue.parse": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "CSSStyleValue.parse",
        "params": [
            {
                "descr": "A CSS property to set.",
                "name": "property"
            },
            {
                "descr": "A comma-separated string containing one or more values to apply to the provided property.",
                "name": "cssText"
            }
        ],
        "path": "dom/cssstylevalue/parse",
        "syntax": "CSSStyleValue.parse(property, cssText)",
        "type": "CSS"
    },
    "CSSStyleValue.parseAll": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "CSSStyleValue.parseAll",
        "params": [
            {
                "descr": "A CSS property to set.",
                "name": "property"
            },
            {
                "descr": "A comma-separated string containing one or more values to apply to the provided property.",
                "name": "cssText"
            }
        ],
        "path": "dom/cssstylevalue/parseall",
        "syntax": "CSSStyleValue.parseAll(property, value)",
        "type": "CSS"
    },
    "CSSSupportsRule": {
        "descr": "The CSSSupportsRule interface describes an object representing a single CSS @supports at-rule. It implements the CSSConditionRule interface, and therefore the CSSRule and CSSGroupingRule interfaces with a type value of 12 (CSSRule.SUPPORTS_RULE).",
        "name": "CSSSupportsRule",
        "params": [],
        "path": "dom/csssupportsrule",
        "syntax": "interface CSSSupportsRule : CSSConditionRule { }  Properties As a CSSConditionRule and therefore a CSSRule and a CSSGroupingRule, CSSSupportsRule also implements the properties of these interfaces. It has no specific properties. Methods As a CSSConditionRule and therefore a CSSRuleand a CSSGroupingRule, CSSSupportsRule also implements the methods of that interface. It has no specific methods. Specification    Specification Status Comment     CSS Conditional Rules Module Level 3The definition of 'CSSSupportsRule' in that specification. Candidate Recommendation Initial definition    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  No  Yes  17 Disabled    17 Disabled    From Firefox 17 to 19, methods and properties were defined on CSSSupportsRule. From version 20, they were on CSSConditionRule. Disabled From version 17: this feature is behind the layout.css.supports-rule.enable preference (needs to be set to true). To change preferences in Firefox, visit about:config.    No  12.1  No       Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support  No  No  Yes  17 Disabled    17 Disabled    From Firefox 17 to 19, methods and properties were defined on CSSSupportsRule",
        "type": "CSS"
    },
    "CSSValue.cssText": {
        "descr": "The cssText property of the CSSValue interface represents the current computed CSS property value.",
        "name": "CSSValue.cssText",
        "params": [],
        "path": "dom/cssvalue/csstext",
        "syntax": "cssText = cssValue.cssText;  Value A DOMString representing the current CSS property value. Example var styleDeclaration = document.styleSheets[0].cssRules[0].style; var cssValue = styleDeclaration.getPropertyCSSValue(\"color\");\n or  console.log(cssValue.cssText);",
        "type": "CSS"
    },
    "CSSValue.cssValueType": {
        "descr": "The cssValueType read-only property of the CSSValue interface represents the type of the current computed CSS property value.",
        "name": "CSSValue.cssValueType",
        "params": [],
        "path": "dom/cssvalue/cssvaluetype",
        "syntax": "cssValueType = cssValue.cssValueType;  Value An unsigned short representing a code defining the type of the value. Possible values are:    Constant Description   CSS_CUSTOM The value is a custom value.   CSS_INHERIT The value is inherited and the cssText contains \"inherit\".   CSS_PRIMITIVE_VALUE The value is a primitive value and an instance of the CSSPrimitiveValue interface can be obtained by using binding-specific casting methods on this instance of the CSSValue interface.   CSS_VALUE_LIST The value is a CSSValue list and an instance of the CSSValueList interface can be obtained by using binding-specific casting methods on this instance of the CSSValue interface.    Example var styleDeclaration = document.styleSheets[0].cssRules[0].style; var cssValue = styleDeclaration.getPropertyCSSValue(\"color\");\n or  console.log(cssValue.cssValueType);",
        "type": "CSS"
    },
    "CSSValueList": {
        "descr": "The CSSValueList interface derives from the CSSValue interface and provides the abstraction of an ordered collection of CSS values.",
        "name": "CSSValueList",
        "params": [
            {
                "descr": "An unsigned long representing the number of CSSValues in the list.",
                "name": "CSSValueList.length Read only"
            },
            {
                "descr": "This method is used to retrieve a CSSValue by ordinal index. ",
                "name": "CSSValueList.item()"
            }
        ],
        "path": "dom/cssvaluelist",
        "syntax": "none identifier. So, an empty list means that the property has the value none. The items in the CSSValueList are accessible via an integral index, starting from 0.  Properties Inherits properties from its parent, CSSValue.   CSSValueList.length Read only   An unsigned long representing the number of CSSValues in the list.  Methods  CSSValueList.item()",
        "type": "CSS"
    },
    "CSSValueList.item": {
        "descr": "The item() method of the CSSValueList interface is used to retrieve a CSSValue by ordinal index.",
        "name": "CSSValueList.item",
        "params": [
            {
                "descr": "An unsigned long representing the index of the CSS value within the collection.",
                "name": "index"
            }
        ],
        "path": "dom/cssvaluelist/item",
        "syntax": "var cssValue = cssValueList.item(index);",
        "type": "CSS"
    },
    "CSSValueList.length": {
        "descr": "The length read-only property of the CSSValueList interface represents the number of CSSValues in the list. The range of valid values of the indices is 0 to length-1 inclusive.",
        "name": "CSSValueList.length",
        "params": [],
        "path": "dom/cssvaluelist/length",
        "syntax": "var length = cssValueList.length;  Value An unsigned long representing the number of CSSValues. Specifications    Specification Status Comment   Document Object Model (DOM) Level 2 Style SpecificationThe definition of 'CSSValueList.length' in that specification. Obsolete Initial definition    Browser compatibilityUpdate compatibility data on GitHub",
        "type": "CSS"
    },
    "Cache.add": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Cache.add",
        "params": [
            {
                "descr": "The request you want to add to the cache. ",
                "name": "request"
            }
        ],
        "path": "dom/cache/add",
        "syntax": "cache.add(request).then(function() { // request has been added to the cache });",
        "type": "Service Workers"
    },
    "Cache.addAll": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Cache.addAll",
        "params": [
            {
                "descr": "An array of string URLs that you want to be fetched and added to the cache.",
                "name": "requests"
            }
        ],
        "path": "dom/cache/addall",
        "syntax": "cache.addAll(requests[]).then(function() { // requests have been added to the cache });",
        "type": "Service Workers"
    },
    "Cache.delete": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Cache.delete",
        "params": [
            {
                "descr": "The Request you are looking to delete.",
                "name": "request"
            },
            {
                "descr": "An object whose properties control how matching is done in the delete operation. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/cache/delete",
        "syntax": "cache.delete(request,{options}).then(function(true) { //your cache entry has been deleted });",
        "type": "Service Workers"
    },
    "Cache.keys": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Cache.keys",
        "params": [
            {
                "descr": "The Request want to return, if a specific key is desired.",
                "name": "request Optional"
            },
            {
                "descr": "An object whose properties control how matching is done in the keys operation. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/cache/keys",
        "syntax": "cache.keys(request,{options}).then(function(keys) { //do something with your array of requests });",
        "type": "Service Workers"
    },
    "Cache.match": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Cache.match",
        "params": [
            {
                "descr": "The Request you are attempting to find in the Cache. ",
                "name": "request"
            },
            {
                "descr": "An object that sets options for the match operation. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/cache/match",
        "syntax": "cache.match(request, {options}).then(function(response) { // Do something with the response });",
        "type": "Service Workers"
    },
    "Cache.matchAll": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Cache.matchAll",
        "params": [
            {
                "descr": "The Request you are attempting to find in the Cache.",
                "name": "request"
            },
            {
                "descr": "An options object allowing you to set specific control options for the matching done in the match operation. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/cache/matchall",
        "syntax": "cache.matchAll(request,{options}).then(function(response) { //do something with the response array });",
        "type": "Service Workers"
    },
    "Cache.put": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Cache.put",
        "params": [
            {
                "descr": "The Request you want to add to the cache.",
                "name": "request"
            },
            {
                "descr": "The Response you want to match up to the request.",
                "name": "response"
            }
        ],
        "path": "dom/cache/put",
        "syntax": "cache.put(request, response).then(function() { // request/response pair has been added to the cache });",
        "type": "Service Workers"
    },
    "CacheStorage.delete": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "CacheStorage.delete",
        "params": [
            {
                "descr": "The name of the cache you want to delete.",
                "name": "cacheName"
            }
        ],
        "path": "dom/cachestorage/delete",
        "syntax": "caches.delete(cacheName).then(function(boolean) { // your cache is now deleted });",
        "type": "Storage"
    },
    "CacheStorage.has": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "CacheStorage.has",
        "params": [
            {
                "descr": "A DOMString representing the name of the Cache object you are looking for in the CacheStorage.",
                "name": "cacheName"
            }
        ],
        "path": "dom/cachestorage/has",
        "syntax": "caches.has(cacheName).then(function(boolean) { // true: your cache exists! });",
        "type": "Storage"
    },
    "CacheStorage.keys": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "CacheStorage.keys",
        "params": [],
        "path": "dom/cachestorage/keys",
        "syntax": "caches.keys().then(function(keyList) { //do something with your keyList });",
        "type": "Storage"
    },
    "CacheStorage.match": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "CacheStorage.match",
        "params": [
            {
                "descr": "The Request you want to match. This can be a Request object or a URL string.",
                "name": "request"
            },
            {
                "descr": "An object whose properties control how matching is done in the match operation. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/cachestorage/match",
        "syntax": "caches.match(request, options).then(function(response) { // Do something with the response });",
        "type": "Storage"
    },
    "CacheStorage.open": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "CacheStorage.open",
        "params": [
            {
                "descr": "The name of the cache you want to open.",
                "name": "cacheName"
            }
        ],
        "path": "dom/cachestorage/open",
        "syntax": "// \"caches\" is a global read-only variable, which is an instance of CacheStorage, // For more info, refer to: https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/caches caches.open(cacheName).then(function(cache) { // Do something with your cache });",
        "type": "Storage"
    },
    "Canvas API: Applying styles and colors": {
        "descr": "« PreviousNext »",
        "name": "Canvas API: Applying styles and colors",
        "params": [
            {
                "descr": "Sets the style used when filling shapes.",
                "name": "fillStyle = color"
            },
            {
                "descr": "Sets the style for shapes' outlines.",
                "name": "strokeStyle = color"
            },
            {
                "descr": "Applies the specified transparency value to all future shapes drawn on the canvas. ",
                "name": "globalAlpha = transparencyValue"
            },
            {
                "descr": "Sets the width of lines drawn in the future.",
                "name": "lineWidth = value"
            },
            {
                "descr": "Sets the appearance of the ends of lines.",
                "name": "lineCap = type"
            },
            {
                "descr": "Sets the appearance of the \"corners\" where lines meet.",
                "name": "lineJoin = type"
            },
            {
                "descr": "Establishes a limit on the miter when two lines join at a sharp angle, to let you control how thick the junction becomes.",
                "name": "miterLimit = value"
            },
            {
                "descr": "Returns the current line dash pattern array containing an even number of non-negative numbers.",
                "name": "getLineDash()"
            },
            {
                "descr": "Sets the current line dash pattern.",
                "name": "setLineDash(segments)"
            },
            {
                "descr": "Specifies where to start a dash array on a line.",
                "name": "lineDashOffset = value"
            },
            {
                "descr": "The ends of lines are squared off at the endpoints.",
                "name": "butt"
            },
            {
                "descr": "The ends of lines are rounded.",
                "name": "round"
            },
            {
                "descr": "The ends of lines are squared off by adding a box with an equal width and half the height of the line's thickness.",
                "name": "square"
            },
            {
                "descr": "Rounds off the corners of a shape by filling an additional sector of disc centered at the common endpoint of connected segments. ",
                "name": "round"
            },
            {
                "descr": "Fills an additional triangular area between the common endpoint of connected segments, and the separate outside rectangular corners of each segment.",
                "name": "bevel"
            },
            {
                "descr": "Connected segments are joined by extending their outside edges to connect at a single point, with the effect of filling an additional lozenge-shaped area. ",
                "name": "miter"
            },
            {
                "descr": "miterLength / lineWidth = 1 / sin ( min θ / 2 )",
                "name": "max"
            },
            {
                "descr": "Creates a linear gradient object with a starting point of (x1, y1) and an end point of (x2, y2).",
                "name": "createLinearGradient(x1, y1, x2, y2)"
            },
            {
                "descr": "Creates a radial gradient. The parameters represent two circles, one with its center at (x1, y1) and a radius of r1, and the other with its center at (x2, y2) with a radius of r2.",
                "name": "createRadialGradient(x1, y1, r1, x2, y2, r2)"
            },
            {
                "descr": "Creates a new color stop on the gradient object. ",
                "name": "gradient.addColorStop(position, color)"
            },
            {
                "descr": "Creates and returns a new canvas pattern object. ",
                "name": "createPattern(image, type)"
            },
            {
                "descr": "Tiles the image in both vertical and horizontal directions.",
                "name": "repeat"
            },
            {
                "descr": "Tiles the image horizontally but not vertically.",
                "name": "repeat-x"
            },
            {
                "descr": "Tiles the image vertically but not horizontally.",
                "name": "repeat-y"
            },
            {
                "descr": "Doesn't tile the image. It's used only once.",
                "name": "no-repeat"
            },
            {
                "descr": "Indicates the horizontal distance the shadow should extend from the object. ",
                "name": "shadowOffsetX = float"
            },
            {
                "descr": "Indicates the vertical distance the shadow should extend from the object. ",
                "name": "shadowOffsetY = float"
            },
            {
                "descr": "Indicates the size of the blurring effect; this value doesn't correspond to a number of pixels and is not affected by the current transformation matrix. ",
                "name": "shadowBlur = float"
            },
            {
                "descr": "A standard CSS color value indicating the color of the shadow effect; by default, it is fully-transparent black.",
                "name": "shadowColor = color"
            },
            {
                "descr": "\": The non-zero winding rule, which is the default rule.",
                "name": "\"nonzero"
            },
            {
                "descr": ": The even-odd winding rule.",
                "name": "\"evenodd\""
            }
        ],
        "path": "dom/canvas_api/tutorial/applying_styles_and_colors",
        "syntax": "lineCap example The lineCap property determines how the end points of every line are drawn. There are three possible values for this property and those are: butt, round and square. By default this property is set to butt.   butt The ends of lines are squared off at the endpoints. round The ends of lines are rounded. square The ends of lines are squared off by adding a box with an equal width and half the height of the line's thickness.  In this example, we'll draw three lines, each with a different value for the lineCap property. I also added two guides to see the exact differences between the three. Each of these lines starts and ends exactly on these guides. The line on the left uses the default butt option. You'll notice that it's drawn completely flush with the guides. The second is set to use the round option. This adds a semicircle to the end that has a radius half the width of the line. The line on the right uses the square option. This adds a box with an equal width and half the height of the line thickness. function draw() { var ctx = document.getElementById('canvas').getContext('2d');\n or  var lineCap = ['butt', 'round', 'square']; // Draw guides ctx.strokeStyle = '#09f'; ctx.beginPath();\n or  ctx.moveTo(10, 10);\n or  ctx.lineTo(140, 10);\n or  ctx.moveTo(10, 140);\n or  ctx.lineTo(140, 140);\n or  ctx.stroke();\n or  // Draw lines ctx.strokeStyle = 'black'; for (var i = 0; i < lineCap.length; i++) { ctx.lineWidth = 15; ctx.lineCap = lineCap[i]; ctx.beginPath();\n or  ctx.moveTo(25 + i * 50, 10);\n or  ctx.lineTo(25 + i * 50, 140);\n or  ctx.stroke();\n or  } });",
        "type": "Canvas"
    },
    "Canvas API: Compositing": {
        "descr": "« PreviousNext »",
        "name": "Canvas API: Compositing",
        "params": [
            {
                "descr": "This sets the type of compositing operation to apply when drawing new shapes, where type is a string identifying which of the twelve compositing operations to use.",
                "name": "globalCompositeOperation = type"
            },
            {
                "descr": "Turns the path currently being built into the current clipping path.",
                "name": "clip()"
            }
        ],
        "path": "dom/canvas_api/tutorial/compositing",
        "syntax": "clearRect()",
        "type": "Canvas"
    },
    "Canvas API: Drawing shapes": {
        "descr": "« PreviousNext »",
        "name": "Canvas API: Drawing shapes",
        "params": [
            {
                "descr": "Draws a filled rectangle.",
                "name": "fillRect(x, y, width, height)"
            },
            {
                "descr": "Draws a rectangular outline.",
                "name": "strokeRect(x, y, width, height)"
            },
            {
                "descr": "Clears the specified rectangular area, making it fully transparent.",
                "name": "clearRect(x, y, width, height)"
            },
            {
                "descr": "Creates a new path. Once created, future drawing commands are directed into the path and used to build the path up.",
                "name": "beginPath()"
            },
            {
                "descr": "Methods to set different paths for objects.",
                "name": "Path methods"
            },
            {
                "descr": "Adds a straight line to the path, going to the start of the current sub-path.",
                "name": "closePath()"
            },
            {
                "descr": "Draws the shape by stroking its outline.",
                "name": "stroke()"
            },
            {
                "descr": "Draws a solid shape by filling the path's content area.",
                "name": "fill()"
            },
            {
                "descr": "Moves the pen to the coordinates specified by x and y.",
                "name": "moveTo(x, y)"
            },
            {
                "descr": "Draws a line from the current drawing position to the position specified by x and y.",
                "name": "lineTo(x, y)"
            },
            {
                "descr": "Draws an arc which is centered at (x, y) position with radius r starting at startAngle and ending at endAngle going in the given direction indicated by anticlockwise (defaulting to clockwise).",
                "name": "arc(x, y, radius, startAngle, endAngle, anticlockwise)"
            },
            {
                "descr": "Draws an arc with the given control points and radius, connected to the previous point by a straight line.",
                "name": "arcTo(x1, y1, x2, y2, radius)"
            },
            {
                "descr": "Draws a quadratic Bézier curve from the current pen position to the end point specified by x and y, using the control point specified by cp1x and cp1y.",
                "name": "quadraticCurveTo(cp1x, cp1y, x, y)"
            },
            {
                "descr": "Draws a cubic Bézier curve from the current pen position to the end point specified by x and y, using the control points specified by (cp1x, cp1y) and (cp2x, cp2y).",
                "name": "bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)"
            },
            {
                "descr": "Draws a rectangle whose top-left corner is specified by (x, y) with the specified width and height.",
                "name": "rect(x, y, width, height)"
            },
            {
                "descr": "The Path2D() constructor returns a newly instantiated Path2D object, optionally with another path as an argument (creates a copy), or optionally with a string consisting of SVG path data.",
                "name": "Path2D()"
            },
            {
                "descr": "Adds a path to the current path with an optional transformation matrix.",
                "name": "Path2D.addPath(path [, transform])"
            }
        ],
        "path": "dom/canvas_api/tutorial/drawing_shapes",
        "syntax": "beginPath()",
        "type": "Canvas"
    },
    "Canvas API: Drawing text": {
        "descr": "« PreviousNext »",
        "name": "Canvas API: Drawing text",
        "params": [
            {
                "descr": "Fills a given text at the given (x,y) position. ",
                "name": "fillText(text, x, y [, maxWidth])"
            },
            {
                "descr": "Strokes a given text at the given (x,y) position. ",
                "name": "strokeText(text, x, y [, maxWidth])"
            },
            {
                "descr": "The current text style being used when drawing text. ",
                "name": "font = value"
            },
            {
                "descr": "Text alignment setting. Possible values: start, end, left, right or center. ",
                "name": "textAlign = value"
            },
            {
                "descr": "Baseline alignment setting. Possible values: top, hanging, middle, alphabetic, ideographic, bottom. ",
                "name": "textBaseline = value"
            },
            {
                "descr": "Directionality. Possible values: ltr, rtl, inherit. ",
                "name": "direction = value"
            },
            {
                "descr": "Returns a TextMetrics object containing the width, in pixels, that the specified text will be when drawn in the current text style.",
                "name": "measureText()"
            }
        ],
        "path": "dom/canvas_api/tutorial/drawing_text",
        "syntax": "font property. The default font is 10px sans-serif. textAlign = value Text alignment setting. Possible values: start, end, left, right or center. The default value is start. textBaseline = value Baseline alignment setting. Possible values: top, hanging, middle, alphabetic, ideographic, bottom. The default value is alphabetic. direction = value Directionality. Possible values: ltr, rtl, inherit. The default value is inherit.  These properties might be familiar to you, if you have worked with CSS before. The following diagram from the WHATWG demonstrates the various baselines supported by the textBaseline property. A textBaseline example Edit the code below and see your changes update live in the canvas: ctx.font = '48px serif'; ctx.textBaseline = 'hanging'; ctx.strokeText('Hello world', 0, 100);",
        "type": "Canvas"
    },
    "Canvas API: Transformations": {
        "descr": "« PreviousNext »",
        "name": "Canvas API: Transformations",
        "params": [
            {
                "descr": "Saves the entire state of the canvas.",
                "name": "save()"
            },
            {
                "descr": "Restores the most recently saved canvas state.",
                "name": "restore()"
            },
            {
                "descr": "Moves the canvas and its origin on the grid. ",
                "name": "translate(x, y)"
            },
            {
                "descr": "Rotates the canvas clockwise around the current origin by the angle number of radians.",
                "name": "rotate(angle)"
            },
            {
                "descr": "Scales the canvas units by x horizontally and by y vertically. ",
                "name": "scale(x, y)"
            },
            {
                "descr": "Multiplies the current transformation matrix with the matrix described by its arguments. ",
                "name": "transform(a, b, c, d, e, f)"
            },
            {
                "descr": "Horizontal scaling.",
                "name": "a (m11)"
            },
            {
                "descr": "Horizontal skewing.",
                "name": "b (m12)"
            },
            {
                "descr": "Vertical skewing.",
                "name": "c (m21)"
            },
            {
                "descr": "Vertical scaling.",
                "name": "d (m22)"
            },
            {
                "descr": "Horizontal moving.",
                "name": "e (dx)"
            },
            {
                "descr": "Vertical moving.",
                "name": "f (dy)"
            },
            {
                "descr": "Resets the current transform to the identity matrix, and then invokes the transform() method with the same arguments. ",
                "name": "setTransform(a, b, c, d, e, f)"
            },
            {
                "descr": "Resets the current transform to the identity matrix. ",
                "name": "resetTransform()"
            }
        ],
        "path": "dom/canvas_api/tutorial/transformations",
        "syntax": "save()",
        "type": "Canvas"
    },
    "Canvas API: Using images": {
        "descr": "« PreviousNext »",
        "name": "Canvas API: Using images",
        "params": [
            {
                "descr": "These are images created using the Image() constructor, as well as any <img> element.",
                "name": "HTMLImageElement"
            },
            {
                "descr": "These are images embedded using the <image> element.",
                "name": "SVGImageElement"
            },
            {
                "descr": "Using an HTML <video> element as your image source grabs the current frame from the video and uses it as an image.",
                "name": "HTMLVideoElement"
            },
            {
                "descr": "You can use another <canvas> element as your image source.",
                "name": "HTMLCanvasElement"
            },
            {
                "descr": "Draws the CanvasImageSource specified by the image parameter at the coordinates (x, y).",
                "name": "drawImage(image, x, y)"
            },
            {
                "descr": "This adds the width and height parameters, which indicate the size to which to scale the image when drawing it onto the canvas.",
                "name": "drawImage(image, x, y, width, height)"
            },
            {
                "descr": "Given an image, this function takes the area of the source image specified by the rectangle whose top-left corner is (sx, sy) and whose width and height are sWidth and sHeight and draws it into the canvas, placing it on the canvas at (dx, dy) and scaling it to the size specified by dWidth and dHeight.",
                "name": "drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight)"
            }
        ],
        "path": "dom/canvas_api/tutorial/using_images",
        "syntax": "drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight)",
        "type": "Canvas"
    },
    "CanvasCaptureMediaStreamTrack.canvas": {
        "descr": "The CanvasCaptureMediaStreamTrack canvas read-only property returns the HTMLCanvasElement from which frames are being captured.",
        "name": "CanvasCaptureMediaStreamTrack.canvas",
        "params": [],
        "path": "dom/canvascapturemediastreamtrack/canvas",
        "syntax": "var elt = stream.canvas;  Value An HTMLCanvasElement indicating the canvas which is the source of the frames being captured. Example // Find the canvas element to capture var canvasElt = document.getElementsByTagName(\"canvas\")[0]; // Get the stream var stream = canvasElt.captureStream(25);\n or  // 25 FPS // Do things to the stream ... // Obtain the canvas associated with the stream var canvas = stream.canvas;);",
        "type": "Canvas"
    },
    "CanvasCaptureMediaStreamTrack.requestFrame": {
        "descr": "The CanvasCaptureMediaStreamTrack method requestFrame() requests that a frame be captured from the canvas and sent to the stream. Applications that need to carefully control the timing of rendering and frame capture can use requestFrame() to directly specify when it's time to capture a frame.",
        "name": "CanvasCaptureMediaStreamTrack.requestFrame",
        "params": [],
        "path": "dom/canvascapturemediastreamtrack/requestframe",
        "syntax": "stream.requestFrame();",
        "type": "Canvas"
    },
    "CanvasGradient.addColorStop": {
        "descr": "The CanvasGradient.addColorStop() method adds a new color stop, defined by an offset and a color, to a given canvas gradient.",
        "name": "CanvasGradient.addColorStop",
        "params": [
            {
                "descr": "A number between 0 and 1, inclusive, representing the position of the color stop. ",
                "name": "offset"
            },
            {
                "descr": "A CSS <color> value representing the color of the stop. ",
                "name": "color"
            }
        ],
        "path": "dom/canvasgradient/addcolorstop",
        "syntax": "void gradient.addColorStop(offset, color);",
        "type": "Canvas"
    },
    "CanvasPattern.setTransform": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "CanvasPattern.setTransform",
        "params": [
            {
                "descr": "An SVGMatrix to use as the pattern's transformation matrix.",
                "name": "matrix"
            }
        ],
        "path": "dom/canvaspattern/settransform",
        "syntax": "void pattern.setTransform(matrix);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.addHitRegion": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "CanvasRenderingContext2D.addHitRegion",
        "params": [
            {
                "descr": "A Path2D object describing the area of the hit region. ",
                "name": "path"
            },
            {
                "descr": "The fill rule to use (defaults to \"nonzero\").",
                "name": "fillRule"
            },
            {
                "descr": "The ID for this hit region to reference it for later use in events, for example.",
                "name": "id"
            },
            {
                "descr": "The ID of the parent region for cursor fallback and navigation by accessibility tools.",
                "name": "parentID"
            },
            {
                "descr": "The cursor to use when the mouse is over this region (defaults to \"inherit\"). ",
                "name": "cursor"
            },
            {
                "descr": "An element (descendant of the canvas) to which events are to be routed. ",
                "name": "control"
            },
            {
                "descr": "A text label for accessibility tools to use as a description of the region, if there is no control. ",
                "name": "label"
            },
            {
                "descr": "An ARIA role for accessibility tools to determine how to represent this region, if there is no control. ",
                "name": "role"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/addhitregion",
        "syntax": "void ctx.addHitRegion(options);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.arc": {
        "descr": "The CanvasRenderingContext2D.arc() method of the Canvas 2D API adds a circular arc to the current sub-path.",
        "name": "CanvasRenderingContext2D.arc",
        "params": [
            {
                "descr": "The x-axis (horizontal) coordinate of the arc's center.",
                "name": "x"
            },
            {
                "descr": "The y-axis (vertical) coordinate of the arc's center.",
                "name": "y"
            },
            {
                "descr": "The arc's radius. Must be non-negative.",
                "name": "radius"
            },
            {
                "descr": "The angle at which the arc starts, measured clockwise from the positive x-axis and expressed in radians.",
                "name": "startAngle"
            },
            {
                "descr": "The angle at which the arc ends, measured clockwise from the positive x-axis and expressed in radians.",
                "name": "endAngle"
            },
            {
                "descr": "An optional Boolean which, if true, causes the arc to be drawn counter-clockwise between the start and end angles. ",
                "name": "anticlockwise Optional"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/arc",
        "syntax": "void ctx.arc(x, y, radius, startAngle, endAngle [, anticlockwise]);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.arcTo": {
        "descr": "The CanvasRenderingContext2D.arcTo() method of the Canvas 2D API adds a circular arc to the current sub-path, using the given control points and radius. The arc is automatically connected to the path's latest point with a straight line, if necessary for the specified parameters.",
        "name": "CanvasRenderingContext2D.arcTo",
        "params": [
            {
                "descr": "The x-axis coordinate of the first control point.",
                "name": "x1"
            },
            {
                "descr": "The y-axis coordinate of the first control point.",
                "name": "y1"
            },
            {
                "descr": "The x-axis coordinate of the second control point.",
                "name": "x2"
            },
            {
                "descr": "The y-axis coordinate of the second control point.",
                "name": "y2"
            },
            {
                "descr": "The arc's radius. Must be non-negative.",
                "name": "radius"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/arcto",
        "syntax": "void ctx.arcTo(x1, y1, x2, y2, radius);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.beginPath": {
        "descr": "The CanvasRenderingContext2D.beginPath() method of the Canvas 2D API starts a new path by emptying the list of sub-paths. Call this method when you want to create a new path.",
        "name": "CanvasRenderingContext2D.beginPath",
        "params": [],
        "path": "dom/canvasrenderingcontext2d/beginpath",
        "syntax": "void ctx.beginPath();",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.bezierCurveTo": {
        "descr": "The CanvasRenderingContext2D.bezierCurveTo() method of the Canvas 2D API adds a cubic Bézier curve to the current sub-path. It requires three points: the first two are control points and the third one is the end point. The starting point is the latest point in the current path, which can be changed using moveTo() before creating the Bézier curve.",
        "name": "CanvasRenderingContext2D.bezierCurveTo",
        "params": [
            {
                "descr": "The x-axis coordinate of the first control point.",
                "name": "cp1x"
            },
            {
                "descr": "The y-axis coordinate of the first control point.",
                "name": "cp1y"
            },
            {
                "descr": "The x-axis coordinate of the second control point.",
                "name": "cp2x"
            },
            {
                "descr": "The y-axis coordinate of the second control point.",
                "name": "cp2y"
            },
            {
                "descr": "The x-axis coordinate of the end point.",
                "name": "x"
            },
            {
                "descr": "The y-axis coordinate of the end point.",
                "name": "y"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/beziercurveto",
        "syntax": "void ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.canvas": {
        "descr": "The CanvasRenderingContext2D.canvas property is a read-only reference to the HTMLCanvasElement object that is associated with a given context. It might be null if there is no associated <canvas> element.",
        "name": "CanvasRenderingContext2D.canvas",
        "params": [],
        "path": "dom/canvasrenderingcontext2d/canvas",
        "syntax": "ctx.canvas; Examples Given this <canvas> element: <canvas id=\"canvas\"></canvas>  ... you can get a reference to the canvas element within the CanvasRenderingContext2D by using the canvas property: var canvas = document.getElementById('canvas');\n or  var ctx = canvas.getContext('2d');\n or  ctx.canvas // HTMLCanvasElement);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.clearHitRegions": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "CanvasRenderingContext2D.clearHitRegions",
        "params": [],
        "path": "dom/canvasrenderingcontext2d/clearhitregions",
        "syntax": "void ctx.clearHitRegions();",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.clearRect": {
        "descr": "The CanvasRenderingContext2D.clearRect() method of the Canvas 2D API erases the pixels in a rectangular area by setting them to transparent black.",
        "name": "CanvasRenderingContext2D.clearRect",
        "params": [
            {
                "descr": "The x-axis coordinate of the rectangle's starting point.",
                "name": "x"
            },
            {
                "descr": "The y-axis coordinate of the rectangle's starting point.",
                "name": "y"
            },
            {
                "descr": "The rectangle's width. Positive values are to the right, and negative to the left.",
                "name": "width"
            },
            {
                "descr": "The rectangle's height. Positive values are down, and negative are up.",
                "name": "height"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/clearrect",
        "syntax": "void ctx.clearRect(x, y, width, height);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.clip": {
        "descr": "The CanvasRenderingContext2D.clip() method of the Canvas 2D API turns the current or given path into the current clipping region. It replaces any previous clipping region.",
        "name": "CanvasRenderingContext2D.clip",
        "params": [
            {
                "descr": "The algorithm by which to determine if a point is inside or outside the clipping region. ",
                "name": "fillRule"
            },
            {
                "descr": "A Path2D path to use as the clipping region.",
                "name": "path"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/clip",
        "syntax": "void ctx.clip([fillRule]);\n or  void ctx.clip(path [, fillRule]);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.closePath": {
        "descr": "The CanvasRenderingContext2D.closePath() method of the Canvas 2D API attempts to add a straight line from the current point to the start of the current sub-path. If the shape has already been closed or has only one point, this function does nothing.",
        "name": "CanvasRenderingContext2D.closePath",
        "params": [],
        "path": "dom/canvasrenderingcontext2d/closepath",
        "syntax": "void ctx.closePath();",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.createImageData": {
        "descr": "The CanvasRenderingContext2D.createImageData() method of the Canvas 2D API creates a new, blank ImageData object with the specified dimensions. All of the pixels in the new object are transparent black.",
        "name": "CanvasRenderingContext2D.createImageData",
        "params": [
            {
                "descr": "The width to give the new ImageData object. ",
                "name": "width"
            },
            {
                "descr": "The height to give the new ImageData object. ",
                "name": "height"
            },
            {
                "descr": "An existing ImageData object from which to copy the width and height. ",
                "name": "imagedata"
            },
            {
                "descr": "Thrown if either of the width or height arguments is zero.",
                "name": "IndexSizeError"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/createimagedata",
        "syntax": "ImageData ctx.createImageData(width, height);\n or  ImageData ctx.createImageData(imagedata);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.createLinearGradient": {
        "descr": "The CanvasRenderingContext2D.createLinearGradient() method of the Canvas 2D API creates a gradient along the line connecting two given coordinates.",
        "name": "CanvasRenderingContext2D.createLinearGradient",
        "params": [
            {
                "descr": "The x-axis coordinate of the start point.",
                "name": "x0"
            },
            {
                "descr": "The y-axis coordinate of the start point.",
                "name": "y0"
            },
            {
                "descr": "The x-axis coordinate of the end point.",
                "name": "x1"
            },
            {
                "descr": "The y-axis coordinate of the end point.",
                "name": "y1"
            },
            {
                "descr": "A linear CanvasGradient initialized with the specified line.",
                "name": "CanvasGradient"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/createlineargradient",
        "syntax": "CanvasGradient ctx.createLinearGradient(x0, y0, x1, y1);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.createPattern": {
        "descr": "The CanvasRenderingContext2D.createPattern() method of the Canvas 2D API creates a pattern using the specified image and repetition. This method returns a CanvasPattern.",
        "name": "CanvasRenderingContext2D.createPattern",
        "params": [
            {
                "descr": "A CanvasImageSource to be used as the pattern's image. ",
                "name": "image"
            },
            {
                "descr": "A DOMString indicating how to repeat the pattern's image. ",
                "name": "repetition"
            },
            {
                "descr": "An opaque object describing a pattern.",
                "name": "CanvasPattern"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/createpattern",
        "syntax": "CanvasPattern ctx.createPattern(image, repetition);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.createRadialGradient": {
        "descr": "The CanvasRenderingContext2D.createRadialGradient() method of the Canvas 2D API creates a radial gradient using the size and coordinates of two circles.",
        "name": "CanvasRenderingContext2D.createRadialGradient",
        "params": [
            {
                "descr": "The x-axis coordinate of the start circle.",
                "name": "x0"
            },
            {
                "descr": "The y-axis coordinate of the start circle.",
                "name": "y0"
            },
            {
                "descr": "The radius of the start circle. ",
                "name": "r0"
            },
            {
                "descr": "The x-axis coordinate of the end circle.",
                "name": "x1"
            },
            {
                "descr": "The y-axis coordinate of the end circle.",
                "name": "y1"
            },
            {
                "descr": "The radius of the end circle. Must be non-negative and finite.",
                "name": "r1"
            },
            {
                "descr": "A radial CanvasGradient initialized with the two specified circles.",
                "name": "CanvasGradient"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/createradialgradient",
        "syntax": "CanvasGradient ctx.createRadialGradient(x0, y0, r0, x1, y1, r1);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.currentTransform": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "CanvasRenderingContext2D.currentTransform",
        "params": [
            {
                "descr": "A DOMMatrix or SVGMatrix object to use as the current transformation matrix.",
                "name": "value"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/currenttransform",
        "syntax": "ctx.currentTransform [= value];   value A DOMMatrix or SVGMatrix object to use as the current transformation matrix.  Examples Using the currentTransform method This is just a simple code snippet that uses the currentTransform property to set a transformation matrix. HTML <canvas id=\"canvas\"></canvas>  JavaScript var canvas = document.getElementById('canvas');\n or  var ctx = canvas.getContext('2d');\n or  var matrix = ctx.currentTransform; matrix.a = 1; matrix.b = 1; matrix.c = 0; matrix.d = 1; matrix.e = 0; matrix.f = 0; ctx.currentTransform = matrix; ctx.fillRect(0, 0, 100, 100);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.direction": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "CanvasRenderingContext2D.direction",
        "params": [
            {
                "descr": "The text direction is left-to-right.",
                "name": "\"ltr\""
            },
            {
                "descr": "The text direction is right-to-left.",
                "name": "\"rtl\""
            },
            {
                "descr": "The text direction is inherited from the <canvas> element or the Document as appropriate.",
                "name": "\"inherit\""
            }
        ],
        "path": "dom/canvasrenderingcontext2d/direction",
        "syntax": "ctx.direction = \"ltr\" || \"rtl\" || \"inherit\";  Options Possible values:  \"ltr\" The text direction is left-to-right. \"rtl\" The text direction is right-to-left. \"inherit\" The text direction is inherited from the <canvas> element or the Document as appropriate.  The default value is \"inherit\". Examples Using the direction property This example uses the direction property to set the text direction. HTML <canvas id=\"canvas\"></canvas>  JavaScript var canvas = document.getElementById('canvas');\n or  var ctx = canvas.getContext('2d');\n or  ctx.font = '48px serif'; ctx.direction = 'ltr'; ctx.strokeText('Hello world', 0, 100);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.drawFocusIfNeeded": {
        "descr": "The CanvasRenderingContext2D.drawFocusIfNeeded() method of the Canvas 2D API draws a focus ring around the current or given path, if the specified element is focused.",
        "name": "CanvasRenderingContext2D.drawFocusIfNeeded",
        "params": [
            {
                "descr": "The element to check whether it is focused or not.",
                "name": "element"
            },
            {
                "descr": "A Path2D path to use.",
                "name": "path"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/drawfocusifneeded",
        "syntax": "void ctx.drawFocusIfNeeded(element);\n or  void ctx.drawFocusIfNeeded(path, element);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.drawImage": {
        "descr": "The CanvasRenderingContext2D.drawImage() method of the Canvas 2D API provides different ways to draw an image onto the canvas.",
        "name": "CanvasRenderingContext2D.drawImage",
        "params": [
            {
                "descr": "An element to draw into the context. ",
                "name": "image"
            },
            {
                "descr": "The x-axis coordinate of the top left corner of the sub-rectangle of the source image to draw into the destination context.",
                "name": "sx Optional"
            },
            {
                "descr": "The y-axis coordinate of the top left corner of the sub-rectangle of the source image to draw into the destination context.",
                "name": "sy Optional"
            },
            {
                "descr": "The width of the sub-rectangle of the source image to draw into the destination context. ",
                "name": "sWidth Optional"
            },
            {
                "descr": "The height of the sub-rectangle of the source image to draw into the destination context.",
                "name": "sHeight Optional"
            },
            {
                "descr": "The x-axis coordinate in the destination canvas at which to place the top-left corner of the source image.",
                "name": "dx"
            },
            {
                "descr": "The y-axis coordinate in the destination canvas at which to place the top-left corner of the source image.",
                "name": "dy"
            },
            {
                "descr": "The width to draw the image in the destination canvas. ",
                "name": "dWidth Optional"
            },
            {
                "descr": "The height to draw the image in the destination canvas. ",
                "name": "dHeight Optional"
            },
            {
                "descr": "If the canvas or source rectangle width or height is zero.",
                "name": "INDEX_SIZE_ERR"
            },
            {
                "descr": "The image has no image data.",
                "name": "INVALID_STATE_ERR"
            },
            {
                "descr": "The specified source element isn't supported.",
                "name": "TYPE_MISMATCH_ERR"
            },
            {
                "descr": "The image is not loaded yet. Use .complete === true and .onload to determine when it is ready.",
                "name": "NS_ERROR_NOT_AVAILABLE"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/drawimage",
        "syntax": "void ctx.drawImage(image, dx, dy);\n or  void ctx.drawImage(image, dx, dy, dWidth, dHeight);\n or  void ctx.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.ellipse": {
        "descr": "The CanvasRenderingContext2D.ellipse() method of the Canvas 2D API adds an elliptical arc to the current sub-path.",
        "name": "CanvasRenderingContext2D.ellipse",
        "params": [
            {
                "descr": "The x-axis (horizontal) coordinate of the ellipse's center.",
                "name": "x"
            },
            {
                "descr": "The y-axis (vertical) coordinate of the ellipse's center.",
                "name": "y"
            },
            {
                "descr": "The ellipse's major-axis radius. ",
                "name": "radiusX"
            },
            {
                "descr": "The ellipse's minor-axis radius. ",
                "name": "radiusY"
            },
            {
                "descr": "The rotation of the ellipse, expressed in radians.",
                "name": "rotation"
            },
            {
                "descr": "The angle at which the ellipse starts, measured clockwise from the positive x-axis and expressed in radians.",
                "name": "startAngle"
            },
            {
                "descr": "The angle at which the ellipse ends, measured clockwise from the positive x-axis and expressed in radians.",
                "name": "endAngle"
            },
            {
                "descr": "An optional Boolean which, if true, draws the ellipse anticlockwise (counter-clockwise). ",
                "name": "anticlockwise Optional"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/ellipse",
        "syntax": "void ctx.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle [, anticlockwise]);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.fill": {
        "descr": "The CanvasRenderingContext2D.fill() method of the Canvas 2D API fills the current or given path with the current fillStyle.",
        "name": "CanvasRenderingContext2D.fill",
        "params": [
            {
                "descr": "The algorithm by which to determine if a point is inside or outside the filling region. ",
                "name": "fillRule"
            },
            {
                "descr": "A Path2D path to fill.",
                "name": "path"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/fill",
        "syntax": "void ctx.fill([fillRule]);\n or  void ctx.fill(path [, fillRule]);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.fillRect": {
        "descr": "The CanvasRenderingContext2D.fillRect() method of the Canvas 2D API draws a rectangle that is filled according to the current fillStyle.",
        "name": "CanvasRenderingContext2D.fillRect",
        "params": [
            {
                "descr": "The x-axis coordinate of the rectangle's starting point.",
                "name": "x"
            },
            {
                "descr": "The y-axis coordinate of the rectangle's starting point.",
                "name": "y"
            },
            {
                "descr": "The rectangle's width. Positive values are to the right, and negative to the left.",
                "name": "width"
            },
            {
                "descr": "The rectangle's height. Positive values are down, and negative are up.",
                "name": "height"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/fillrect",
        "syntax": "void ctx.fillRect(x, y, width, height);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.fillStyle": {
        "descr": "The CanvasRenderingContext2D.fillStyle property of the Canvas 2D API specifies the color, gradient, or pattern to use inside shapes. The default is #000 (black).",
        "name": "CanvasRenderingContext2D.fillStyle",
        "params": [
            {
                "descr": "A DOMString parsed as CSS <color> value.",
                "name": "color"
            },
            {
                "descr": "A CanvasGradient object (a linear or radial gradient).",
                "name": "gradient"
            },
            {
                "descr": "A CanvasPattern object (a repeating image).",
                "name": "pattern"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/fillstyle",
        "syntax": "ctx.fillStyle = color; ctx.fillStyle = gradient; ctx.fillStyle = pattern;  Options  color A DOMString parsed as CSS <color> value. gradient A CanvasGradient object (a linear or radial gradient). pattern",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.fillText": {
        "descr": "The CanvasRenderingContext2D method fillText(), part of the Canvas 2D API, draws a text string at the specified coordinates, filling the string's characters with the current fillStyle. An optional parameter allows specifying a maximum width for the rendered text, which the user agent will achieve by condensing the text or by using a lower font size.",
        "name": "CanvasRenderingContext2D.fillText",
        "params": [
            {
                "descr": "A DOMString specifying the text string to render into the context. ",
                "name": "text"
            },
            {
                "descr": "The x-axis coordinate of the point at which to begin drawing the text, in pixels.",
                "name": "x"
            },
            {
                "descr": "The y-axis coordinate of the point at which to begin drawing the text, in pixels.",
                "name": "y"
            },
            {
                "descr": "The maximum number of pixels wide the text may be once rendered. ",
                "name": "maxWidth Optional"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/filltext",
        "syntax": "CanvasRenderingContext2D.fillText(text, x, y [, maxWidth]);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.filter": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "CanvasRenderingContext2D.filter",
        "params": [
            {
                "descr": "Takes an IRI pointing to an SVG filter element which may be embedded in an external XML file.",
                "name": "url() (<url>)"
            },
            {
                "descr": "CSS length. Applies a Gaussian blur to the drawing.",
                "name": "blur() (<length>)"
            },
            {
                "descr": "Percentage. Applies a linear multiplier to the drawing, making it appear more or less bright.",
                "name": "brightness() (<percentage>)"
            },
            {
                "descr": "Percentage. Adjusts the contrast of the drawing. ",
                "name": "contrast() (<percentage>)"
            },
            {
                "descr": "Applies a drop shadow effect to the drawing. ",
                "name": "drop-shadow() (<offset-x> <offset-y> <blur-radius> <color>)"
            },
            {
                "descr": "Percentage. Converts the drawing to a gray-scale picture. ",
                "name": "grayscale() (<percentage>)"
            },
            {
                "descr": "Angle. Applies a hue rotation on the drawing. ",
                "name": "hue-rotate() (<angle>)"
            },
            {
                "descr": "Percentage. Inverts the drawing. ",
                "name": "invert() (<percentage>)"
            },
            {
                "descr": "Percentage. Applies transparency to the drawing. ",
                "name": "opacity() (<percentage>)"
            },
            {
                "descr": "Saturates the drawing. A value of 0% means completely un-saturated. ",
                "name": "saturate() (<percentage>)"
            },
            {
                "descr": "Converts the drawing to sepia. A value of 100% means completely sepia. ",
                "name": "sepia() (<percentage>)"
            },
            {
                "descr": "No filter is applied. Initial value.",
                "name": "none"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/filter",
        "syntax": "ctx.filter = \"<filter-function1> [<filter-function2] [<filter-functionN]\"; ctx.filter = \"none\";  Filter functions The filter property accepts one or more of the following filter functions in a DOMString.   url()",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.font": {
        "descr": "The CanvasRenderingContext2D.font property of the Canvas 2D API specifies the current text style being used when drawing text. This string uses the same syntax as the CSS font specifier. The default font is 10px sans-serif.",
        "name": "CanvasRenderingContext2D.font",
        "params": [
            {
                "descr": "A DOMString parsed as CSS font value. ",
                "name": "value"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/font",
        "syntax": "ctx.font = value;  Options  value A DOMString parsed as CSS font value. The default font is 10px sans-serif.  Examples Using the font property This is just a simple code snippet using the font property to set a different font size and font family. HTML <canvas id=\"canvas\"></canvas>  JavaScript var canvas = document.getElementById('canvas');\n or  var ctx = canvas.getContext('2d');\n or  ctx.font = '48px serif'; ctx.strokeText('Hello world', 50, 100);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.getImageData": {
        "descr": "The CanvasRenderingContext2D method getImageData() of the Canvas 2D API returns an ImageData object representing the underlying pixel data for a specified portion of the canvas.",
        "name": "CanvasRenderingContext2D.getImageData",
        "params": [
            {
                "descr": "The x-axis coordinate of the top-left corner of the rectangle from which the ImageData will be extracted.",
                "name": "sx"
            },
            {
                "descr": "The y-axis coordinate of the top-left corner of the rectangle from which the ImageData will be extracted.",
                "name": "sy"
            },
            {
                "descr": "The width of the rectangle from which the ImageData will be extracted. ",
                "name": "sw"
            },
            {
                "descr": "The height of the rectangle from which the ImageData will be extracted. ",
                "name": "sh"
            },
            {
                "descr": "Thrown if either sw or sh are zero.",
                "name": "IndexSizeError"
            },
            {
                "descr": "The canvas contains or may contain pixels which were loaded from an origin other than the one from which the document itself was loaded. ",
                "name": "SecurityError"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/getimagedata",
        "syntax": "ctx.getImageData(sx, sy, sw, sh);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.getLineDash": {
        "descr": "The getLineDash() method of the Canvas 2D API's CanvasRenderingContext2D interface gets the current line dash pattern.",
        "name": "CanvasRenderingContext2D.getLineDash",
        "params": [],
        "path": "dom/canvasrenderingcontext2d/getlinedash",
        "syntax": "ctx.getLineDash();",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.globalAlpha": {
        "descr": "The CanvasRenderingContext2D.globalAlpha property of the Canvas 2D API specifies the alpha (transparency) value that is applied to shapes and images before they are drawn onto the canvas.",
        "name": "CanvasRenderingContext2D.globalAlpha",
        "params": [
            {
                "descr": "A number between 0.0 (fully transparent) and 1.0 (fully opaque), inclusive. ",
                "name": "value"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/globalalpha",
        "syntax": "ctx.globalAlpha = value;  Options  value A number between 0.0 (fully transparent) and 1.0",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.globalCompositeOperation": {
        "descr": "The CanvasRenderingContext2D.globalCompositeOperation property of the Canvas 2D API sets the type of compositing operation to apply when drawing new shapes, where type is a string identifying which of the compositing or blending mode operations to use.",
        "name": "CanvasRenderingContext2D.globalCompositeOperation",
        "params": [],
        "path": "dom/canvasrenderingcontext2d/globalcompositeoperation",
        "syntax": "ctx.globalCompositeOperation = type; Types  Examples Using the globalCompositeOperation property This is just a simple code snippet using the globalCompositeOperation property to draw two rectangles that exclude themselves where they overlap. HTML <canvas id=\"canvas\"></canvas>  JavaScript var canvas = document.getElementById('canvas');\n or  var ctx = canvas.getContext('2d');\n or  ctx.globalCompositeOperation = 'xor'; ctx.fillStyle = 'blue'; ctx.fillRect(10, 10, 100, 100);\n or  ctx.fillStyle = 'red'; ctx.fillRect(50, 50, 100, 100);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.imageSmoothingEnabled": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "CanvasRenderingContext2D.imageSmoothingEnabled",
        "params": [
            {
                "descr": "A Boolean indicating whether to smooth scaled images or not.",
                "name": "value"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/imagesmoothingenabled",
        "syntax": "ctx.imageSmoothingEnabled = value; Options  value A Boolean indicating whether to smooth scaled images or not.  Examples Using the imageSmoothingEnabled property This example illustrates the effect of applying the imageSmoothingEnabled property to a scaled image. The image's natural dimensions are 86 x 117. HTML <canvas id=\"canvas\"></canvas>  JavaScript var canvas = document.getElementById('canvas');\n or  var ctx = canvas.getContext('2d');\n or  var img = new Image();\n or  img.src = 'https://mdn.mozillademos.org/files/222/Canvas_createpattern.png'; img.onload = function() { ctx.msImageSmoothingEnabled = false; ctx.imageSmoothingEnabled = false; ctx.drawImage(img, 0, 0, 400, 200);\n or  };);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.imageSmoothingQuality": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "CanvasRenderingContext2D.imageSmoothingQuality",
        "params": [
            {
                "descr": "One of \"low\", \"medium\", or \"high\".",
                "name": "value"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/imagesmoothingquality",
        "syntax": "ctx.imageSmoothingQuality = \"low\" || \"medium\" || \"high\"  Options  value One of \"low\", \"medium\", or \"high\".  Examples Using the imageSmoothingQuality property This is just a simple code snippet using the imageSmoothingQuality property with a scaled image. HTML <canvas id=\"canvas\"></canvas>  JavaScript var canvas = document.getElementById(\"canvas\");\n or  var ctx = canvas.getContext(\"2d\");\n or  var img = new Image();\n or  img.src = 'https://mdn.mozillademos.org/files/222/Canvas_createpattern.png'; img.onload = function() { ctx.mozImageSmoothingEnabled = false; ctx.imageSmoothingQuality = \"Medium\"; ctx.webkitImageSmoothingEnabled = false; ctx.msImageSmoothingEnabled = false; ctx.imageSmoothingEnabled = false; ctx.drawImage(img, 0, 0, 400, 200);\n or  };);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.isPointInPath": {
        "descr": "The CanvasRenderingContext2D.isPointInPath() method of the Canvas 2D API reports whether or not the specified point is contained in the current path.",
        "name": "CanvasRenderingContext2D.isPointInPath",
        "params": [
            {
                "descr": "The x-axis coordinate of the point to check.",
                "name": "x"
            },
            {
                "descr": "The y-axis coordinate of the point to check.",
                "name": "y"
            },
            {
                "descr": "The algorithm by which to determine if a point is inside or outside the path. ",
                "name": "fillRule"
            },
            {
                "descr": "A Path2D path to check against. ",
                "name": "path"
            },
            {
                "descr": "A Boolean, which is true if the specified point is contained in the current or specified path, otherwise false.",
                "name": "Boolean"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/ispointinpath",
        "syntax": "ctx.isPointInPath(x, y [, fillRule]);\n or  ctx.isPointInPath(path, x, y [, fillRule]);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.isPointInStroke": {
        "descr": "The CanvasRenderingContext2D.isPointInStroke() method of the Canvas 2D API reports whether or not the specified point is inside the area contained by the stroking of a path.",
        "name": "CanvasRenderingContext2D.isPointInStroke",
        "params": [
            {
                "descr": "The x-axis coordinate of the point to check.",
                "name": "x"
            },
            {
                "descr": "The y-axis coordinate of the point to check.",
                "name": "y"
            },
            {
                "descr": "A Path2D path to check against. ",
                "name": "path"
            },
            {
                "descr": "A Boolean, which is true if the point is inside the area contained by the stroking of a path, otherwise false.",
                "name": "Boolean"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/ispointinstroke",
        "syntax": "ctx.isPointInStroke(x, y);\n or  ctx.isPointInStroke(path, x, y);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.lineCap": {
        "descr": "The CanvasRenderingContext2D.lineCap property of the Canvas 2D API determines the shape used to draw the end points of lines.",
        "name": "CanvasRenderingContext2D.lineCap",
        "params": [
            {
                "descr": "The ends of lines are squared off at the endpoints. ",
                "name": "\"butt\""
            },
            {
                "descr": "The ends of lines are rounded.",
                "name": "\"round\""
            },
            {
                "descr": "The ends of lines are squared off by adding a box with an equal width and half the height of the line's thickness.",
                "name": "\"square\""
            }
        ],
        "path": "dom/canvasrenderingcontext2d/linecap",
        "syntax": "ctx.lineCap = \"butt\" || \"round\" || \"square\";  Options  \"butt\" The ends of lines are squared off at the endpoints. Default value. \"round\" The ends of lines are rounded. \"square\" The ends of lines are squared off by adding a box with an equal width and half the height of the line's thickness.  Examples Using the lineCap property This is just a simple code snippet using the lineCap property to draw lines with a rounded end. HTML <canvas id=\"canvas\"></canvas>  JavaScript var canvas = document.getElementById('canvas');\n or  var ctx = canvas.getContext('2d');\n or  ctx.beginPath();\n or  ctx.moveTo(20, 20);\n or  ctx.lineWidth = 15; ctx.lineCap = 'round'; ctx.lineTo(100, 100);\n or  ctx.stroke();",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.lineDashOffset": {
        "descr": "The CanvasRenderingContext2D.lineDashOffset property of the Canvas 2D API sets the line dash pattern offset or \"phase\" to achieve a \"marching ants\" effect, for example.",
        "name": "CanvasRenderingContext2D.lineDashOffset",
        "params": [
            {
                "descr": "A float specifying the amount of the offset. ",
                "name": "value"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/linedashoffset",
        "syntax": "ctx.lineDashOffset = value;   value A float specifying the amount of the offset. Initially 0.0.  Examples Using the lineDashOffset property This is just a simple code snippet which uses the lineDashOffset property to draw a dashed line. HTML <canvas id=\"canvas\"></canvas>  JavaScript var canvas = document.getElementById('canvas');\n or  var ctx = canvas.getContext('2d');\n or  ctx.setLineDash([4, 16]);\n or  ctx.lineDashOffset = 2; ctx.beginPath();\n or  ctx.moveTo(0, 100);\n or  ctx.lineTo(400, 100);\n or  ctx.stroke();",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.lineJoin": {
        "descr": "The CanvasRenderingContext2D.lineJoin property of the Canvas 2D API determines the shape used to join two line segments where they meet.",
        "name": "CanvasRenderingContext2D.lineJoin",
        "params": [
            {
                "descr": "Rounds off the corners of a shape by filling an additional sector of disc centered at the common endpoint of connected segments. ",
                "name": "\"round\""
            },
            {
                "descr": "Fills an additional triangular area between the common endpoint of connected segments, and the separate outside rectangular corners of each segment.",
                "name": "\"bevel\""
            },
            {
                "descr": "Connected segments are joined by extending their outside edges to connect at a single point, with the effect of filling an additional lozenge-shaped area. ",
                "name": "\"miter\""
            }
        ],
        "path": "dom/canvasrenderingcontext2d/linejoin",
        "syntax": "ctx.lineJoin = \"bevel\" || \"round\" || \"miter\";  Options There are three possible values for this property: \"round\", \"bevel\", and \"miter\". The default is \"miter\".   \"round\" Rounds off the corners of a shape by filling an additional sector of disc centered at the common endpoint of connected segments. The radius for these rounded corners is equal to the line width. \"bevel\" Fills an additional triangular area between the common endpoint of connected segments, and the separate outside rectangular corners of each segment. \"miter\" Connected segments are joined by extending their outside edges to connect at a single point, with the effect of filling an additional lozenge-shaped area. This setting is affected by the miterLimit property.  Examples Using the lineJoin property This is just a simple code snippet using the lineJoin property. HTML <canvas id=\"canvas\"></canvas>  JavaScript var canvas = document.getElementById('canvas');\n or  var ctx = canvas.getContext('2d');\n or  ctx.lineWidth = 20; ctx.lineJoin = 'round'; ctx.beginPath();\n or  ctx.moveTo(20, 20);\n or  ctx.lineTo(200, 100);\n or  ctx.lineTo(300, 20);\n or  ctx.lineTo(300, 160);\n or  ctx.stroke();",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.lineTo": {
        "descr": "The CanvasRenderingContext2D method lineTo(), part of the Canvas 2D API, adds a straight line to the current sub-path by connecting the sub-path's last point to the specified (x, y) coordinates.",
        "name": "CanvasRenderingContext2D.lineTo",
        "params": [
            {
                "descr": "The x-axis coordinate of the line's end point.",
                "name": "x"
            },
            {
                "descr": "The y-axis coordinate of the line's end point.",
                "name": "y"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/lineto",
        "syntax": "ctx.lineTo(x, y);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.lineWidth": {
        "descr": "The CanvasRenderingContext2D.lineWidth property of the Canvas 2D API sets the thickness of lines in coordinate space units.",
        "name": "CanvasRenderingContext2D.lineWidth",
        "params": [
            {
                "descr": "A number specifying the line width in coordinate space units. ",
                "name": "value"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/linewidth",
        "syntax": "ctx.lineWidth = value; Options  value A number specifying the line width in coordinate space units. Zero, negative, Infinity, and NaN values are ignored. This value is 1.0 by default.  Examples Using the lineWidth property This is just a simple code snippet using the lineWidth property to draw lines with a rounded end. HTML <canvas id=\"canvas\"></canvas>  JavaScript var canvas = document.getElementById('canvas');\n or  var ctx = canvas.getContext('2d');\n or  ctx.beginPath();\n or  ctx.moveTo(20, 20);\n or  ctx.lineWidth = 15; ctx.lineTo(100, 100);\n or  ctx.stroke();",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.measureText": {
        "descr": "The CanvasRenderingContext2D.measureText() method returns a TextMetrics object that contains information about the measured text (such as its width, for example).",
        "name": "CanvasRenderingContext2D.measureText",
        "params": [
            {
                "descr": "The text String to measure.",
                "name": "text"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/measuretext",
        "syntax": "ctx.measureText(text);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.miterLimit": {
        "descr": "The CanvasRenderingContext2D.miterLimit property of the Canvas 2D API sets the miter limit ratio in coordinate space units.",
        "name": "CanvasRenderingContext2D.miterLimit",
        "params": [
            {
                "descr": "A number specifying the miter limit ratio in coordinate space units. ",
                "name": "value"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/miterlimit",
        "syntax": "ctx.miterLimit = value; Options  value A number specifying the miter limit ratio in coordinate space units. Zero, negative, Infinity, and NaN values are ignored. The default value is 10.0.  Examples Using the miterLimit property See the chapter Applying styles and color in the Canvas tutorial for more information.   Screenshot Live sample       Specifications    Specification Status Comment   HTML Living StandardThe definition of 'CanvasRenderingContext2D.miterLimit' in that specification. Living Standard      Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  Yes  12  Yes  Yes  Yes  Yes       Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support  Yes  Yes  Yes  Yes  Yes  Yes  Yes    WebKit/Blink-specific notes  In WebKit- and Blink-based Browsers, a non-standard and deprecated method ctx.setMiterLimit()",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.moveTo": {
        "descr": "The CanvasRenderingContext2D.moveTo() method of the Canvas 2D API begins a new sub-path at the point specified by the given (x, y) coordinates.",
        "name": "CanvasRenderingContext2D.moveTo",
        "params": [
            {
                "descr": "The x-axis (horizontal) coordinate of the point.",
                "name": "x"
            },
            {
                "descr": "The y-axis (vertical) coordinate of the point.",
                "name": "y"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/moveto",
        "syntax": "void ctx.moveTo(x, y);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.putImageData": {
        "descr": "The CanvasRenderingContext2D.putImageData() method of the Canvas 2D API paints data from the given ImageData object onto the canvas. If a dirty rectangle is provided, only the pixels from that rectangle are painted. This method is not affected by the canvas transformation matrix.",
        "name": "CanvasRenderingContext2D.putImageData",
        "params": [
            {
                "descr": "An ImageData object containing the array of pixel values.",
                "name": "imageData"
            },
            {
                "descr": "Horizontal position (x coordinate) at which to place the image data in the destination canvas.",
                "name": "dx"
            },
            {
                "descr": "Vertical position (y coordinate) at which to place the image data in the destination canvas.",
                "name": "dy"
            },
            {
                "descr": "Horizontal position (x coordinate) of the top-left corner from which the image data will be extracted. ",
                "name": "dirtyX Optional"
            },
            {
                "descr": "Vertical position (y coordinate) of the top-left corner from which the image data will be extracted. ",
                "name": "dirtyY Optional"
            },
            {
                "descr": "Width of the rectangle to be painted. ",
                "name": "dirtyWidth Optional"
            },
            {
                "descr": "Height of the rectangle to be painted. ",
                "name": "dirtyHeight Optional"
            },
            {
                "descr": "Thrown if any of the arguments is infinite.",
                "name": "NotSupportedError"
            },
            {
                "descr": "Thrown if the ImageData object's data has been detached.",
                "name": "InvalidStateError"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/putimagedata",
        "syntax": "void ctx.putImageData(imageData, dx, dy);\n or  void ctx.putImageData(imageData, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.quadraticCurveTo": {
        "descr": "The CanvasRenderingContext2D.quadraticCurveTo() method of the Canvas 2D API adds a quadratic Bézier curve to the current sub-path. It requires two points: the first one is a control point and the second one is the end point. The starting point is the latest point in the current path, which can be changed using moveTo() before creating the quadratic Bézier curve.",
        "name": "CanvasRenderingContext2D.quadraticCurveTo",
        "params": [
            {
                "descr": "The x-axis coordinate of the control point.",
                "name": "cpx"
            },
            {
                "descr": "The y-axis coordinate of the control point.",
                "name": "cpy"
            },
            {
                "descr": "The x-axis coordinate of the end point.",
                "name": "x"
            },
            {
                "descr": "The y-axis coordinate of the end point.",
                "name": "y"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/quadraticcurveto",
        "syntax": "void ctx.quadraticCurveTo(cpx, cpy, x, y);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.rect": {
        "descr": "The CanvasRenderingContext2D.rect() method of the Canvas 2D API adds a rectangle to the current path.",
        "name": "CanvasRenderingContext2D.rect",
        "params": [
            {
                "descr": "The x-axis coordinate of the rectangle's starting point.",
                "name": "x"
            },
            {
                "descr": "The y-axis coordinate of the rectangle's starting point.",
                "name": "y"
            },
            {
                "descr": "The rectangle's width. Positive values are to the right, and negative to the left.",
                "name": "width"
            },
            {
                "descr": "The rectangle's height. Positive values are down, and negative are up.",
                "name": "height"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/rect",
        "syntax": "void ctx.rect(x, y, width, height);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.removeHitRegion": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "CanvasRenderingContext2D.removeHitRegion",
        "params": [
            {
                "descr": "A DOMString representing the id of the region that is to be removed.",
                "name": "id"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/removehitregion",
        "syntax": "void ctx.removeHitRegion(id);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.resetTransform": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "CanvasRenderingContext2D.resetTransform",
        "params": [],
        "path": "dom/canvasrenderingcontext2d/resettransform",
        "syntax": "void ctx.resetTransform();",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.restore": {
        "descr": "The CanvasRenderingContext2D.restore() method of the Canvas 2D API restores the most recently saved canvas state by popping the top entry in the drawing state stack. If there is no saved state, this method does nothing.",
        "name": "CanvasRenderingContext2D.restore",
        "params": [],
        "path": "dom/canvasrenderingcontext2d/restore",
        "syntax": "void ctx.restore();",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.rotate": {
        "descr": "The CanvasRenderingContext2D.rotate() method of the Canvas 2D API adds a rotation to the transformation matrix.",
        "name": "CanvasRenderingContext2D.rotate",
        "params": [
            {
                "descr": "The rotation angle, clockwise in radians. ",
                "name": "angle"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/rotate",
        "syntax": "void ctx.rotate(angle);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.save": {
        "descr": "The CanvasRenderingContext2D.save() method of the Canvas 2D API saves the entire state of the canvas by pushing the current state onto a stack.",
        "name": "CanvasRenderingContext2D.save",
        "params": [],
        "path": "dom/canvasrenderingcontext2d/save",
        "syntax": "void ctx.save();",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.scale": {
        "descr": "The CanvasRenderingContext2D.scale() method of the Canvas 2D API adds a scaling transformation to the canvas units by x horizontally and by y vertically.",
        "name": "CanvasRenderingContext2D.scale",
        "params": [
            {
                "descr": "Scaling factor in the horizontal direction. ",
                "name": "x"
            },
            {
                "descr": "Scaling factor in the vertical direction. ",
                "name": "y"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/scale",
        "syntax": "void ctx.scale(x, y);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.scrollPathIntoView": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "CanvasRenderingContext2D.scrollPathIntoView",
        "params": [
            {
                "descr": "A Path2D path to use.",
                "name": "path"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/scrollpathintoview",
        "syntax": "void ctx.scrollPathIntoView();\n or  void ctx.scrollPathIntoView(path);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.setLineDash": {
        "descr": "The setLineDash() method of the Canvas 2D API's CanvasRenderingContext2D interface sets the line dash pattern used when stroking lines. It uses an array of values that specify alternating lengths of lines and gaps which describe the pattern.",
        "name": "CanvasRenderingContext2D.setLineDash",
        "params": [
            {
                "descr": "An Array of numbers that specify distances to alternately draw a line and a gap (in coordinate space units). ",
                "name": "segments"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/setlinedash",
        "syntax": "ctx.setLineDash(segments);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.setTransform": {
        "descr": "The CanvasRenderingContext2D.setTransform() method of the Canvas 2D API resets (overrides) the current transformation to the identity matrix and then invokes a transformation described by the arguments of this method.",
        "name": "CanvasRenderingContext2D.setTransform",
        "params": [
            {
                "descr": "Horizontal scaling.",
                "name": "a (m11)"
            },
            {
                "descr": "Horizontal skewing.",
                "name": "b (m12)"
            },
            {
                "descr": "Vertical skewing.",
                "name": "c (m21)"
            },
            {
                "descr": "Vertical scaling.",
                "name": "d (m22)"
            },
            {
                "descr": "Horizontal moving.",
                "name": "e (dx)"
            },
            {
                "descr": "Vertical moving.",
                "name": "f (dy)"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/settransform",
        "syntax": "void ctx.setTransform(a, b, c, d, e, f);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.shadowBlur": {
        "descr": "The CanvasRenderingContext2D.shadowBlur property of the Canvas 2D API specifies the amount of blur applied to shadows. The default is 0 (no blur).",
        "name": "CanvasRenderingContext2D.shadowBlur",
        "params": [
            {
                "descr": "A non-negative float specifying the level of shadow blur, where 0 represents no blur and larger numbers represent increasingly more blur. ",
                "name": "level"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/shadowblur",
        "syntax": "ctx.shadowBlur = level;   level A non-negative float specifying the level of shadow blur, where 0 represents no blur and larger numbers represent increasingly more blur. This value doesn't correspond to a number of pixels, and is not affected by the current transformation matrix. The default value is 0. Negative, Infinity, and NaN values are ignored.  Examples Using the shadowBlur property This example uses the shadowBlur property to add a blurred shadow to a rectangle. Note that shadows are only drawn if the shadowColor property is set to a non-transparent value, as well. HTML <canvas id=\"canvas\"></canvas>  JavaScript var canvas = document.getElementById('canvas');\n or  var ctx = canvas.getContext('2d');\n or  ctx.shadowColor = '#00f'; ctx.shadowBlur = 15; ctx.fillStyle = '#fee'; ctx.fillRect(20, 20, 140, 100);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.shadowColor": {
        "descr": "The CanvasRenderingContext2D.shadowColor property of the Canvas 2D API specifies the color of shadows.",
        "name": "CanvasRenderingContext2D.shadowColor",
        "params": [
            {
                "descr": "A DOMString parsed as a CSS <color> value. ",
                "name": "color"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/shadowcolor",
        "syntax": "ctx.shadowColor = color;   color A DOMString parsed as a CSS <color> value. The default value is fully-transparent black.  Examples Using the shadowColor property This example uses the shadowColor property to set the color of a shadow around a rectangle. Note that shadows are only drawn if the shadowColor property is set (non-transparent) and either the shadowBlur",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.shadowOffsetX": {
        "descr": "The CanvasRenderingContext2D.shadowOffsetX property of the Canvas 2D API specifies the distance that shadows will be offset horizontally.",
        "name": "CanvasRenderingContext2D.shadowOffsetX",
        "params": [
            {
                "descr": "A float specifying the distance that shadows will be offset horizontally. ",
                "name": "offset"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/shadowoffsetx",
        "syntax": "ctx.shadowOffsetX = offset;   offset A float specifying the distance that shadows will be offset horizontally. The default value is 0. Infinity and NaN values are ignored.  Examples Using the shadowOffsetX property This example uses the shadowOffsetX property to apply a horizontal offset to a shadow. Note that shadows are only drawn if the shadowColor property is set to a non-transparent value, as well. HTML <canvas id=\"canvas\"></canvas>  JavaScript var canvas = document.getElementById('canvas');\n or  var ctx = canvas.getContext('2d');\n or  ctx.shadowColor = 'red'; ctx.shadowOffsetX = 25; ctx.shadowBlur = 10; ctx.fillStyle = 'black'; ctx.fillRect(10, 10, 100, 100);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.shadowOffsetY": {
        "descr": "The CanvasRenderingContext2D.shadowOffsetY property of the Canvas 2D API specifies the distance that shadows will be offset vertically.",
        "name": "CanvasRenderingContext2D.shadowOffsetY",
        "params": [
            {
                "descr": "A float specifying the distance that shadows will be offset vertically. ",
                "name": "offset"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/shadowoffsety",
        "syntax": "ctx.shadowOffsetY = offset;   offset A float specifying the distance that shadows will be offset vertically. The default value is 0. Infinity and NaN values are ignored.  Examples Using the shadowOffsetY property This example uses the shadowOffsetY property to apply a vertical offset to a shadow. Note that shadows are only drawn if the shadowColor property is set to a non-transparent value, as well. HTML <canvas id=\"canvas\"></canvas>  JavaScript var canvas = document.getElementById('canvas');\n or  var ctx = canvas.getContext('2d');\n or  ctx.shadowColor = 'red'; ctx.shadowOffsetY = 25; ctx.shadowBlur = 10; ctx.fillStyle = 'black'; ctx.fillRect(10, 10, 100, 100);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.stroke": {
        "descr": "The CanvasRenderingContext2D.stroke() method of the Canvas 2D API strokes (outlines) the current or given path with the current stroke style using the non-zero winding rule.",
        "name": "CanvasRenderingContext2D.stroke",
        "params": [
            {
                "descr": "A Path2D path to stroke.",
                "name": "path"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/stroke",
        "syntax": "void ctx.stroke();\n or  void ctx.stroke(path);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.strokeRect": {
        "descr": "The CanvasRenderingContext2D.strokeRect() method of the Canvas 2D API draws a rectangle that is stroked (outlined) according to the current strokeStyle and other context settings.",
        "name": "CanvasRenderingContext2D.strokeRect",
        "params": [
            {
                "descr": "The x-axis coordinate of the rectangle's starting point.",
                "name": "x"
            },
            {
                "descr": "The y-axis coordinate of the rectangle's starting point.",
                "name": "y"
            },
            {
                "descr": "The rectangle's width. Positive values are to the right, and negative to the left.",
                "name": "width"
            },
            {
                "descr": "The rectangle's height. Positive values are down, and negative are up.",
                "name": "height"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/strokerect",
        "syntax": "void ctx.strokeRect(x, y, width, height);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.strokeStyle": {
        "descr": "The CanvasRenderingContext2D.strokeStyle property of the Canvas 2D API specifies the color, gradient, or pattern to use for the strokes (border lines) around shapes. The default is #000 (black).",
        "name": "CanvasRenderingContext2D.strokeStyle",
        "params": [
            {
                "descr": "A DOMString parsed as CSS <color> value.",
                "name": "color"
            },
            {
                "descr": "A CanvasGradient object (a linear or radial gradient).",
                "name": "gradient"
            },
            {
                "descr": "A CanvasPattern object (a repeating image).",
                "name": "pattern"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/strokestyle",
        "syntax": "ctx.strokeStyle = color; ctx.strokeStyle = gradient; ctx.strokeStyle = pattern;  Options  color A DOMString parsed as CSS <color> value. gradient A CanvasGradient object (a linear or radial gradient). pattern",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.strokeText": {
        "descr": "The CanvasRenderingContext2D method strokeText(), part of the Canvas 2D API, strokes — that is, draws the outlines of — the characters of a text string at the specified coordinates. An optional parameter allows specifying a maximum width for the rendered text, which the user agent will achieve by condensing the text or by using a lower font size.",
        "name": "CanvasRenderingContext2D.strokeText",
        "params": [
            {
                "descr": "A DOMString specifying the text string to render into the context. ",
                "name": "text"
            },
            {
                "descr": "The x-axis coordinate of the point at which to begin drawing the text.",
                "name": "x"
            },
            {
                "descr": "The y-axis coordinate of the point at which to begin drawing the text.",
                "name": "y"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/stroketext",
        "syntax": "CanvasRenderingContext2D.strokeText(text, x, y [, maxWidth]);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.textAlign": {
        "descr": "The CanvasRenderingContext2D.textAlign property of the Canvas 2D API specifies the current text alignment used when drawing text.",
        "name": "CanvasRenderingContext2D.textAlign",
        "params": [
            {
                "descr": "The text is left-aligned.",
                "name": "\"left\""
            },
            {
                "descr": "The text is right-aligned.",
                "name": "\"right\""
            },
            {
                "descr": "The text is centered.",
                "name": "\"center\""
            },
            {
                "descr": "The text is aligned at the normal start of the line (left-aligned for left-to-right locales, right-aligned for right-to-left locales).",
                "name": "\"start\""
            },
            {
                "descr": "The text is aligned at the normal end of the line (right-aligned for left-to-right locales, left-aligned for right-to-left locales).",
                "name": "\"end\""
            }
        ],
        "path": "dom/canvasrenderingcontext2d/textalign",
        "syntax": "ctx.textAlign = \"left\" || \"right\" || \"center\" || \"start\" || \"end\";  Options Possible values:  \"left\" The text is left-aligned. \"right\" The text is right-aligned. \"center\" The text is centered. \"start\" The text is aligned at the normal start of the line (left-aligned for left-to-right locales, right-aligned for right-to-left locales). \"end\"",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.textBaseline": {
        "descr": "The CanvasRenderingContext2D.textBaseline property of the Canvas 2D API specifies the current text baseline used when drawing text.",
        "name": "CanvasRenderingContext2D.textBaseline",
        "params": [
            {
                "descr": "The text baseline is the top of the em square.",
                "name": "\"top\""
            },
            {
                "descr": "The text baseline is the hanging baseline. ",
                "name": "\"hanging\""
            },
            {
                "descr": "The text baseline is the middle of the em square.",
                "name": "\"middle\""
            },
            {
                "descr": "The text baseline is the normal alphabetic baseline. ",
                "name": "\"alphabetic\""
            },
            {
                "descr": "The text baseline is the ideographic baseline; this is the bottom of the body of the characters, if the main body of characters protrudes beneath the alphabetic baseline. ",
                "name": "\"ideographic\""
            },
            {
                "descr": "The text baseline is the bottom of the bounding box. ",
                "name": "\"bottom\""
            }
        ],
        "path": "dom/canvasrenderingcontext2d/textbaseline",
        "syntax": "ctx.textBaseline = \"top\" || \"hanging\" || \"middle\" || \"alphabetic\" || \"ideographic\" || \"bottom\";  Options Possible values:  \"top\" The text baseline is the top of the em square. \"hanging\" The text baseline is the hanging baseline. (Used by Tibetan and other Indic scripts.) \"middle\"",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.transform": {
        "descr": "The CanvasRenderingContext2D.transform() method of the Canvas 2D API multiplies the current transformation with the matrix described by the arguments of this method. You are able to scale, rotate, move and skew the context.",
        "name": "CanvasRenderingContext2D.transform",
        "params": [
            {
                "descr": "Horizontal scaling.",
                "name": "a (m11)"
            },
            {
                "descr": "Horizontal skewing.",
                "name": "b (m12)"
            },
            {
                "descr": "Vertical skewing.",
                "name": "c (m21)"
            },
            {
                "descr": "Vertical scaling.",
                "name": "d (m22)"
            },
            {
                "descr": "Horizontal moving.",
                "name": "e (dx)"
            },
            {
                "descr": "Vertical moving.",
                "name": "f (dy)"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/transform",
        "syntax": "void ctx.transform(a, b, c, d, e, f);",
        "type": "Canvas"
    },
    "CanvasRenderingContext2D.translate": {
        "descr": "The CanvasRenderingContext2D.translate() method of the Canvas 2D API adds a translation transformation by moving the canvas and its origin x horizontally and y vertically on the grid.",
        "name": "CanvasRenderingContext2D.translate",
        "params": [
            {
                "descr": "Distance to move in the horizontal direction.",
                "name": "x"
            },
            {
                "descr": "Distance to move in the vertical direction.",
                "name": "y"
            }
        ],
        "path": "dom/canvasrenderingcontext2d/translate",
        "syntax": "void ctx.translate(x, y);",
        "type": "Canvas"
    },
    "Category: Event Object": {
        "descr": "jQuery's event system normalizes the event object according to W3C standards. The event object is guaranteed to be passed to the event handler. Most properties from the original event are copied over and normalized to the new event object.",
        "name": "Category: Event Object",
        "params": [],
        "path": "jquery/category/events/event-object",
        "syntax": "jQuery.Event()",
        "type": "Categories"
    },
    "Category: Manipulation": {
        "descr": "All of the methods in this section manipulate the DOM in some manner. A few of them simply change one of the attributes of an element (also listed in the Attributes category), while others set an element's style properties (also listed in the CSS category). Still others modify entire elements (or groups of elements) themselves—inserting, copying, removing, and so on. All of these methods are referred to as \"setters,\" as they change the values of properties. A few of these methods—such as .attr(), .html(), and .val()—also act as \"getters,\" retrieving information from DOM elements for later use.",
        "name": "Category: Manipulation",
        "params": [],
        "path": "jquery/category/manipulation",
        "syntax": ".attr()",
        "type": "Categories"
    },
    "Channel Messaging API: Using channel messaging": {
        "descr": "The Channel Messaging API allows two separate scripts running in different browsing contexts attached to the same document (e.g., two IFrames, or the main document and an IFrame, or two documents via a SharedWorker) to communicate directly, passing messages between one another through two-way channels (or pipes) with a port at each end.",
        "name": "Channel Messaging API: Using channel messaging",
        "params": [],
        "path": "dom/channel_messaging_api/using_channel_messaging",
        "syntax": "<iframe>. Secondly, have a look at our multimessaging demo (run this live), which shows a slightly more complex setup that can send multiple messages between the main page and an IFrame.",
        "type": "Channel Messaging"
    },
    "ChannelMergerNode.constructor": {
        "descr": "The ChannelMergerNode() constructor creates a new ChannelMergerNode object instance.",
        "name": "ChannelMergerNode.constructor",
        "params": [
            {
                "descr": "A BaseAudioContext representing the audio context you want the node to be associated with.",
                "name": "context"
            },
            {
                "descr": "A ChannelMergerOptions dictionary object defining the properties you want the ChannelMergerNode to have (It also inherits the options defined in the AudioNodeOptions dictionary):   numberOfInputs: A number defining the number of inputs the ChannelMergerNode should have. If not specified, the default value used is 6.",
                "name": "options Optional"
            }
        ],
        "path": "dom/channelmergernode/channelmergernode",
        "syntax": "var myNode = new ChannelMergerNode(context, options);",
        "type": "Audio"
    },
    "ChannelSplitterNode.constructor": {
        "descr": "The ChannelSplitterNode() constructor of the Web Audio API creates a new ChannelSplitterNode object instance, representing a node that splits the input into a separate output for each of the source node's audio channels.",
        "name": "ChannelSplitterNode.constructor",
        "params": [
            {
                "descr": "A BaseAudioContext representing the audio context you want the node to be associated with.",
                "name": "context"
            },
            {
                "descr": "A ChannelSplitterOptions dictionary object defining the properties you want the ChannelSplitterNode to have (It also inherits the options defined in the AudioNodeOptions dictionary):   numberOfOutputs: A number defining the number of inputs the ChannelSplitterNode should have. If not specified, the default value used is 6.",
                "name": "options Optional"
            }
        ],
        "path": "dom/channelsplitternode/channelsplitternode",
        "syntax": "var splitter = new ChannelSpitterNode(context, options);",
        "type": "Audio"
    },
    "Child selector (\"parent > child\"": {
        "descr": "The child combinator (E > F) can be thought of as a more specific form of the descendant combinator (E F) in that it selects only first-level descendants.",
        "name": "Child selector (\"parent > child\"",
        "params": [],
        "path": "jquery/child-selector",
        "syntax": "child selector  Description: Selects all direct child elements specified by \"child\" of elements specified by \"parent\".   version added: 1.0jQuery( \"parent > child\" ) parent: Any valid selector.",
        "type": "Selectors"
    },
    "ChildNode.after": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ChildNode.after",
        "params": [
            {
                "descr": "A set of Node or DOMString objects to insert.",
                "name": "nodes"
            }
        ],
        "path": "dom/childnode/after",
        "syntax": "[Throws, Unscopable] void ChildNode.after((Node or DOMString)... nodes);",
        "type": "Nodes"
    },
    "ChildNode.before": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ChildNode.before",
        "params": [
            {
                "descr": "A set of Node or DOMString objects to insert.",
                "name": "nodes"
            }
        ],
        "path": "dom/childnode/before",
        "syntax": "[Throws, Unscopable] void ChildNode.before((Node or DOMString)... nodes);",
        "type": "Nodes"
    },
    "ChildNode.remove": {
        "descr": "The ChildNode.remove() method removes the object from the tree it belongs to.",
        "name": "ChildNode.remove",
        "params": [],
        "path": "dom/childnode/remove",
        "syntax": "node.remove();",
        "type": "Nodes"
    },
    "ChildNode.replaceWith": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ChildNode.replaceWith",
        "params": [
            {
                "descr": "A set of Node or DOMString objects to replace.",
                "name": "nodes"
            }
        ],
        "path": "dom/childnode/replacewith",
        "syntax": "[Throws, Unscopable] void ChildNode.replaceWith((Node or DOMString)... nodes);",
        "type": "Nodes"
    },
    "Class selector (\".class\"": {
        "descr": "For class selectors, jQuery uses JavaScript's native getElementsByClassName() function if the browser supports it.",
        "name": "Class selector (\".class\"",
        "params": [],
        "path": "jquery/class-selector",
        "syntax": "class selector  Description: Selects all elements with the given class.    version added: 1.0jQuery( \".class\" ) class: A class to search for. An element can have multiple classes; only one of them must match.",
        "type": "Selectors"
    },
    "Classes": {
        "descr": "JavaScript classes, introduced in ECMAScript 2015, are primarily syntactical sugar over JavaScript's existing prototype-based inheritance. The class syntax does not introduce a new object-oriented inheritance model to JavaScript.",
        "name": "Classes",
        "params": [],
        "path": "javascript/classes",
        "syntax": "class keyword with the name of the class (\"Rectangle\" here).",
        "type": "Classes"
    },
    "Client.frameType": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Client.frameType",
        "params": [],
        "path": "dom/client/frametype",
        "syntax": "var myFrameType = Client.frameType; Example TBD  Specifications    Specification Status Comment   Service WorkersThe definition of 'frameType' in that specification. Working Draft Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   43  17  44   44   Service workers (and Push) have been disabled in the Firefox 45 & 52 Extended Support Releases (ESR).    No  30  No       Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   43  43  17  44  30  No  4.0     Edit this page on MDN",
        "type": "Service Workers"
    },
    "Client.id": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Client.id",
        "params": [],
        "path": "dom/client/id",
        "syntax": "var clientId = Client.id; Example TBD  Specifications    Specification Status Comment   Service WorkersThe definition of 'id' in that specification. Working Draft Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   40  ?   44   44   Service workers (and Push) have been disabled in the Firefox 45 & 52 Extended Support Releases (ESR).    No  27  No       Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   40  40  ?   44  27  No  4.0     Edit this page on MDN",
        "type": "Service Workers"
    },
    "Client.postMessage": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Client.postMessage",
        "params": [
            {
                "descr": "The message to send to the service worker. ",
                "name": "message"
            },
            {
                "descr": "A sequence of objects to transfer. ",
                "name": "transfer Optional"
            }
        ],
        "path": "dom/client/postmessage",
        "syntax": "Client.postMessage(message[, transfer]);",
        "type": "Service Workers"
    },
    "Client.type": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Client.type",
        "params": [],
        "path": "dom/client/type",
        "syntax": "var myClientType = Client.type; Value A string, representing the client type. The value can be one of  window worker sharedworker all  Example // service worker client (e.g. a document) function sendMessage(message) { return new Promise(function(resolve, reject) { // note that this is the ServiceWorker.postMessage version navigator.serviceWorker.controller.postMessage(message);\n or  window.serviceWorker.onMessage = function(e) { resolve(e.data);\n or  }; });\n or  } // controlling service worker self.addEventListener(\"message\", function(e) { // e.source is a client object e.source.postMessage(\"Hello! Your message was: \" + e.data);\n or  // Let's also post the type value back to the client  e.source.postMessage(e.source.type);\n or  });",
        "type": "Service Workers"
    },
    "Client.url": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Client.url",
        "params": [],
        "path": "dom/client/url",
        "syntax": "var clientUrl = Client.url; Value A USVString. Example self.addEventListener('notificationclick', function(event) { console.log('On notification click: ', event.notification.tag);\n or  event.notification.close();\n or  // This looks to see if the current is already open and // focuses if it is event.waitUntil(clients.matchAll({ type: 'window' }).then(function(clientList) { for (var i = 0; i < clientList.length; i++) { var client = clientList[i]; if (client.url == '/' && 'focus' in client) return client.focus();\n or  } if (clients.openWindow) return clients.openWindow('/');\n or  }));\n or  });",
        "type": "Service Workers"
    },
    "Clients.claim": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Clients.claim",
        "params": [],
        "path": "dom/clients/claim",
        "syntax": "await clients.claim();",
        "type": "Service Workers"
    },
    "Clients.get": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Clients.get",
        "params": [
            {
                "descr": "A DOMString representing the id of the client you want to get.",
                "name": "id"
            }
        ],
        "path": "dom/clients/get",
        "syntax": "self.clients.get(id).then(function(client) { // do something with your returned client });",
        "type": "Service Workers"
    },
    "Clients.matchAll": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Clients.matchAll",
        "params": [
            {
                "descr": "An options object allowing you to set options for the matching operation. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/clients/matchall",
        "syntax": "ServiceWorkerClients.matchAll(options).then(function(clients) { // do something with your clients list });",
        "type": "Service Workers"
    },
    "Clients.openWindow": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Clients.openWindow",
        "params": [
            {
                "descr": "A USVString representing the URL of the client you want to open in the window. ",
                "name": "url"
            }
        ],
        "path": "dom/clients/openwindow",
        "syntax": "ServiceWorkerClients.openWindow(url).then(function(WindowClient) { // do something with your WindowClient });",
        "type": "Service Workers"
    },
    "Clipboard": {
        "descr": "The Clipboard interface implements the Clipboard API, providing—if the user grants permission—both read and write access to the contents of the system clipboard. The Clipboard API can be used to implement cut, copy, and paste features within a web application.",
        "name": "Clipboard",
        "params": [
            {
                "descr": "Requests arbitrary data (such as images) from the clipboard, returning a Promise. ",
                "name": "read()"
            },
            {
                "descr": "Requests text from the system clipboard; returns a Promise which is resolved with a DOMString containing the clipboard's text once it's available.",
                "name": "readText()"
            },
            {
                "descr": "Writes arbitrary data to the system clipboard. ",
                "name": "write()"
            },
            {
                "descr": "Writes text to the system clipboard, returning a Promise which is resolved once the text is fully copied into the clipboard.",
                "name": "writeText()"
            }
        ],
        "path": "dom/clipboard",
        "syntax": "Promise which is resolved once the clipboard access has been completed. The promise is rejected if clipboard access is denied. Methods Clipboard is based on the EventTarget interface, and includes its methods.  read()",
        "type": "Clipboard"
    },
    "Clipboard.read": {
        "descr": "The read() method of the Clipboard interface requests a copy of the clipboard's contents, delivering the data to the returned Promise when the promise is resolved. Unlike readText(), the read() method can return arbitrary data, such as images.",
        "name": "Clipboard.read",
        "params": [],
        "path": "dom/clipboard/read",
        "syntax": "var promise = navigator.clipboard.read();",
        "type": "Clipboard"
    },
    "Clipboard.readText": {
        "descr": "The Clipboard interface's readText() method returns a Promise which resolves with a copy of the textual contents of the system clipboard.",
        "name": "Clipboard.readText",
        "params": [],
        "path": "dom/clipboard/readtext",
        "syntax": "var promise = navigator.clipboard.readText()",
        "type": "Clipboard"
    },
    "Clipboard.write": {
        "descr": "The Clipboard method write() writes arbitrary data, such as images, to the clipboard. This can be used to implement cut and copy functionality.",
        "name": "Clipboard.write",
        "params": [
            {
                "descr": "A DataTransfer object containing data to be written to the clipboard.",
                "name": "dataTransfer"
            }
        ],
        "path": "dom/clipboard/write",
        "syntax": "var promise = navigator.clipboard.write(dataTransfer)",
        "type": "Clipboard"
    },
    "Clipboard.writeText": {
        "descr": "The Clipboard interface's writeText() property writes the specified text string to the system clipboard.",
        "name": "Clipboard.writeText",
        "params": [
            {
                "descr": "The DOMString to be written to the clipboard.",
                "name": "newClipText"
            },
            {
                "descr": "Writing to the clipboard is available without permission in secure contexts and browser extensions, but only from user-initiated event callbacks. ",
                "name": "Return value   A Promise which is resolved once the clipboard's contents have been updated. The promise is rejected if the caller does not have permission to write to the clipboard. Example This example sets the clipboard's contents to the string \"<empty clipboard>\". navigator.clipboard.writeText(\"<empty clipboard>\").then(function() { /* clipboard successfully set */ }, function() { /* clipboard write failed */ });  Specifications    Specification Status Comment   Clipboard API and eventsThe definition of 'writeText()' in that specification. Working Draft Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  66  ?   63   63"
            }
        ],
        "path": "dom/clipboard/writetext",
        "syntax": "var promise = navigator.clipboard.writeText(newClipText)",
        "type": "Clipboard"
    },
    "ClipboardEvent.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ClipboardEvent.constructor",
        "params": [
            {
                "descr": "Is a DOMString representing the name of the type of the ClipboardEvent. ",
                "name": "type"
            },
            {
                "descr": "Options are as follows:   dataType: A DOMString containing the MIME-type of the data contained in the data argument. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/clipboardevent/clipboardevent",
        "syntax": "var clipboardEvent = new ClipboardEvent(type[, options]);",
        "type": "Clipboard"
    },
    "CloseEvent.constructor": {
        "descr": "The CloseEvent() constructor creates a new CloseEvent.",
        "name": "CloseEvent.constructor",
        "params": [
            {
                "descr": "Is a DOMString representing the name of the event.",
                "name": "typeArg"
            },
            {
                "descr": "Is a CloseEventInit dictionary, having the following fields:   \"wasClean\", optional and defaulting to false, of type long, indicates if the connection has been closed cleanly or not. ",
                "name": "closeEventInitOptional"
            }
        ],
        "path": "dom/closeevent/closeevent",
        "syntax": "event = new CloseEvent(typeArg, closeEventInit);",
        "type": "Events"
    },
    "Comma Operator": {
        "descr": "The comma operator evaluates each of its operands (from left to right) and returns the value of the last operand.",
        "name": "Comma Operator",
        "params": [
            {
                "descr": "Any expressions.",
                "name": "expr1, expr2, expr3..."
            }
        ],
        "path": "javascript/operators/comma_operator",
        "syntax": "expr1, expr2, expr3... Parameters   expr1, expr2, expr3...  Any expressions.  Description You can use the comma operator when you want to include multiple expressions in a location that requires a single expression. The most common usage of this operator is to supply multiple parameters in a for loop. Examples If a is a 2-dimensional array with 10 elements on each side, the following code uses the comma operator to increment two variables at once. The following code prints the values of the diagonal elements in the array: for (var i = 0, j = 9; i <= 9; i++, j--) console.log('a[' + i + '][' + j + '] = ' + a[i][j]);",
        "type": "Operators"
    },
    "Comment.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Comment.constructor",
        "params": [],
        "path": "dom/comment/comment",
        "syntax": "comment1 = new Comment();\n or  // Create an empty comment comment2 = new Comment(\"This is a comment\");",
        "type": "Nodes"
    },
    "Comparison Operators": {
        "descr": "JavaScript has both strict and type–converting comparisons. A strict comparison (e.g., ===) is only true if the operands are of the same type and the contents match. The more commonly-used abstract comparison (e.g. ==) converts the operands to the same type before making the comparison. For relational abstract comparisons (e.g., <=), the operands are first converted to primitives, then to the same type, before comparison.",
        "name": "Comparison Operators",
        "params": [],
        "path": "javascript/operators/comparison_operators",
        "syntax": "x == y  Examples 1 == 1 // true '1' == 1 // true 1 == '1' // true 0 == false // true 0 == null // false var object1 = {'key': 'value'}, object2 = {'key': 'value'}; object1 == object2 //false 0 == undefined // false null == undefined // true  Inequality (!=) The inequality operator returns true if the operands are not equal. If the two operands are not of the same type, JavaScript attempts to convert the operands to an appropriate type for the comparison. If both operands are objects, then JavaScript compares internal references which are not equal when operands refer to different objects in memory.",
        "type": "Operators"
    },
    "CompositionEvent.constructor": {
        "descr": "The CompositionEvent() constructor creates a new CompositionEvent object instance.",
        "name": "CompositionEvent.constructor",
        "params": [
            {
                "descr": "Is a DOMString representing the name of the event.",
                "name": "typeArg"
            },
            {
                "descr": "A CompositionEventInit dictionary object, which can contain the following members:   data: Initializes the data attribute of the CompositionEvent object to the characters generated by the IME composition.   Note: The CompositionEventInit dictionary inherits from the UIEventInit dictionary, so can also accept members defined on there.",
                "name": "CompositionEventInitOptional"
            }
        ],
        "path": "dom/compositionevent/compositionevent",
        "syntax": "myEvent = new CompositionEvent(typeArg, CompositionEventInit)",
        "type": "Events"
    },
    "CompositionEvent.data": {
        "descr": "The data read-only property of the CompositionEvent interface returns the characters generated by the input method that raised the event; its exact nature varies depending on the type of event that generated the CompositionEvent object.",
        "name": "CompositionEvent.data",
        "params": [],
        "path": "dom/compositionevent/data",
        "syntax": "myData = CompositionEvent.data Value A DOMString representing the event data:  For compositionstart events, this is the currently selected text that will be replaced by the string being composed. This value doesn't change even if content changes the selection range; rather, it indicates the string that was selected when composition started. For compositionupdate, this is the string as it stands currently as editing is ongoing. For compositionend events, this is the string as committed to the editor.  Specifications    Specification Status Comment     Document Object Model (DOM) Level 3 Events SpecificationThe definition of 'data' in that specification. Obsolete Initial definition.    Browser compatibilityUpdate compatibility data on GitHub",
        "type": "Events"
    },
    "Conditional Operator": {
        "descr": "The conditional (ternary) operator is the only JavaScript operator that takes three operands. This operator is frequently used as a shortcut for the if statement.",
        "name": "Conditional Operator",
        "params": [
            {
                "descr": "An expression whose value is used as a condition.",
                "name": "condition"
            },
            {
                "descr": "Expressions with values of any type.",
                "name": "exprT, exprF"
            }
        ],
        "path": "javascript/operators/conditional_operator",
        "syntax": "condition ? exprT : exprF  Parameters  condition An expression whose value is used as a condition.    exprT, exprF  Expressions with values of any type.  Description If condition can be converted to true (it is truthy), the operator returns the value of exprT",
        "type": "Operators"
    },
    "ConstantSourceNode.constructor": {
        "descr": "The ConstantSourceNode() constructor creates a new ConstantSourceNode object instance, representing an audio source which constantly outputs samples whose values are always the same.",
        "name": "ConstantSourceNode.constructor",
        "params": [
            {
                "descr": "An AudioContext representing the audio context you want the node to be associated with.",
                "name": "context"
            },
            {
                "descr": "A ConstantSourceOptions dictionary object defining the properties you want the ConstantSourceNode to have:   offset: A read-only AudioParam specifying the constant value generated by the source. ",
                "name": "options"
            }
        ],
        "path": "dom/constantsourcenode/constantsourcenode",
        "syntax": "var constantSourceNode = new ConstantSourceNode(context, options);",
        "type": "Audio"
    },
    "ConstantSourceNode.offset": {
        "descr": "The read-only offset property of the ConstantSourceNode interface returns a AudioParam object indicating the numeric a-rate value which is always returned by the source when asked for the next sample.",
        "name": "ConstantSourceNode.offset",
        "params": [],
        "path": "dom/constantsourcenode/offset",
        "syntax": "let offsetParameter = ConstantAudioNode.offset; let offset = ConstantSourceNode.offset.value; ConstantSourceNode.offset.value = newValue; Value An AudioParam object indicating the a-rate value returned for every sample by this node. The default value is 1.0. To access the offset parameter's current value, access the parameter's value property, as shown in the syntax box above. Example This example shows how to set up a ConstantSourceNode so its offset is used as the input to a pair of GainNodes; this snippet is derived from the complete example you can find in Controlling multiple parameters with ConstantSourcenode. gainNode2 = context.createGain();\n or  gainNode3 = context.createGain();\n or  gainNode2.gain.value = gainNode3.gain.value = 0.5; volumeSliderControl.value = gainNode2.gain.value; constantNode = context.createConstantSource();\n or  constantSource.connect(gainNode2.gain);\n or  constantSource.connect(gainNode3.gain);",
        "type": "Audio"
    },
    "ConvolverNode.buffer": {
        "descr": "The buffer property of the ConvolverNode interface represents a mono, stereo, or 4-channel AudioBuffer containing the (possibly multichannel) impulse response used by the ConvolverNode to create the reverb effect.",
        "name": "ConvolverNode.buffer",
        "params": [],
        "path": "dom/convolvernode/buffer",
        "syntax": "var audioCtx = new AudioContext();\n or  var convolver = audioCtx.createConvolver();\n or  convolver.buffer = myAudioBuffer;);",
        "type": "Audio"
    },
    "ConvolverNode.constructor": {
        "descr": "The ConvolverNode() constructor of the Web Audio API creates a new ConvolverNode object instance.",
        "name": "ConvolverNode.constructor",
        "params": [
            {
                "descr": "A reference to an AudioContext.",
                "name": "context"
            },
            {
                "descr": "Options are as follows:   audioBuffer: A mono, stereo, or 4-channel AudioBuffer containing the (possibly multichannel) impulse response used by the ConvolverNode to create the reverb effect. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/convolvernode/convolvernode",
        "syntax": "var convolverNode = new ConvolverNode(context, options)",
        "type": "Audio"
    },
    "ConvolverNode.normalize": {
        "descr": "The normalize property of the ConvolverNode interface is a boolean that controls whether the impulse response from the buffer will be scaled by an equal-power normalization when the buffer attribute is set, or not.",
        "name": "ConvolverNode.normalize",
        "params": [],
        "path": "dom/convolvernode/normalize",
        "syntax": "var audioCtx = new AudioContext();\n or  var convolver = audioCtx.createConvolver();\n or  convolver.normalize = false;);",
        "type": "Audio"
    },
    "Coordinates.longitude": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "Coordinates.longitude",
        "params": [],
        "path": "dom/coordinates/longitude",
        "syntax": "longitude = coordinates.longitude  Value The value in longitude is the geographical longitude of the location on Earth described by the Coordinates object, in decimal degrees. The value is defined by the World Geodetic System 1984 specification (WGS 84).",
        "type": "Geolocation"
    },
    "CountQueuingStrategy.constructor": {
        "descr": "Draft This page is not complete.",
        "name": "CountQueuingStrategy.constructor",
        "params": [
            {
                "descr": "An object containing a highWaterMark property. ",
                "name": "{highWaterMark}"
            }
        ],
        "path": "dom/countqueuingstrategy/countqueuingstrategy",
        "syntax": "var countQS = new CountQueuingStrategy({highWaterMark});",
        "type": "Media Streams"
    },
    "CountQueuingStrategy.size": {
        "descr": "Draft This page is not complete.",
        "name": "CountQueuingStrategy.size",
        "params": [],
        "path": "dom/countqueuingstrategy/size",
        "syntax": "var size = countQueuingStrategyInstance.size();",
        "type": "Media Streams"
    },
    "CredentialsContainer.create": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "CredentialsContainer.create",
        "params": [
            {
                "descr": "An object of type CredentialCreationOptions that contains options for the requested new Credentials object. ",
                "name": "options"
            }
        ],
        "path": "dom/credentialscontainer/create",
        "syntax": "var promise = CredentialsContainer.create([options])",
        "type": "Credential Management"
    },
    "CredentialsContainer.get": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "CredentialsContainer.get",
        "params": [
            {
                "descr": "An object of type CredentialRequestOptions that contains options for the request. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/credentialscontainer/get",
        "syntax": "var promise = CredentialsContainer.get([options])",
        "type": "Credential Management"
    },
    "CredentialsContainer.preventSilentAccess": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "CredentialsContainer.preventSilentAccess",
        "params": [],
        "path": "dom/credentialscontainer/preventsilentaccess",
        "syntax": "var Promise = CredentialsContainer.preventSilentAccess()",
        "type": "Credential Management"
    },
    "CredentialsContainer.store": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "CredentialsContainer.store",
        "params": [
            {
                "descr": "A valid Credential instance.",
                "name": "Credentials"
            }
        ],
        "path": "dom/credentialscontainer/store",
        "syntax": "CredentialsContainer.store(Credential).then(function(Credential) { ... } )",
        "type": "Credential Management"
    },
    "Crypto.getRandomValues": {
        "descr": "The Crypto.getRandomValues() method lets you get cryptographically strong random values. The array given as the parameter is filled with random numbers (random in its cryptographic meaning).",
        "name": "Crypto.getRandomValues",
        "params": [
            {
                "descr": "Is an integer-based TypedArray, that is an Int8Array, a Uint8Array, an Int16Array, a Uint16Array, an Int32Array, or a Uint32Array. ",
                "name": "typedArray"
            }
        ],
        "path": "dom/crypto/getrandomvalues",
        "syntax": "cryptoObj.getRandomValues(typedArray);",
        "type": "Cryptography"
    },
    "Crypto.subtle": {
        "descr": "The Crypto.subtle read-only property returns a SubtleCrypto object allowing to perform cryptographical operations.",
        "name": "Crypto.subtle",
        "params": [],
        "path": "dom/crypto/subtle",
        "syntax": "var crypto = crypto.subtle; Specifications    Specification Status Comment   Web Cryptography APIThe definition of 'Crypto.subtle' in that specification. Recommendation Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   37  12  34   34  32 — 34Disabled   Disabled From version 32 until version 34 (exclusive): this feature is behind the dom.webcrypto.enabled",
        "type": "Cryptography"
    },
    "CustomElementRegistry.define": {
        "descr": "The define() method of the CustomElementRegistry interface defines a new custom element.",
        "name": "CustomElementRegistry.define",
        "params": [
            {
                "descr": "Name for the new custom element. ",
                "name": "name"
            },
            {
                "descr": "Constructor for the new custom element.",
                "name": "constructor"
            },
            {
                "descr": "Object that controls how the element is defined. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/customelementregistry/define",
        "syntax": "customElements.define(name, constructor, options);",
        "type": "Custom Elements"
    },
    "CustomElementRegistry.get": {
        "descr": "The get() method of the CustomElementRegistry interface returns the constructor for a previously-defined custom element.",
        "name": "CustomElementRegistry.get",
        "params": [
            {
                "descr": "The name of the custom element whose constructor you want to return a reference to.",
                "name": "name"
            }
        ],
        "path": "dom/customelementregistry/get",
        "syntax": "constructor = customElements.get(name);",
        "type": "Custom Elements"
    },
    "CustomElementRegistry.whenDefined": {
        "descr": "The whenDefined() method of the CustomElementRegistry interface returns a Promise that resolves when the named element is defined.",
        "name": "CustomElementRegistry.whenDefined",
        "params": [
            {
                "descr": "Custom element name.",
                "name": "name"
            }
        ],
        "path": "dom/customelementregistry/whendefined",
        "syntax": "Promise<> customElements.whenDefined(name);",
        "type": "Custom Elements"
    },
    "CustomEvent.constructor": {
        "descr": "The CustomEvent() constructor creates a new CustomEvent.",
        "name": "CustomEvent.constructor",
        "params": [
            {
                "descr": "A DOMString representing the name of the event.",
                "name": "typeArg"
            },
            {
                "descr": "A CustomEventInit dictionary, having the following fields:   \"detail\", optional and defaulting to null, of type any, that is an event-dependent value associated with the event. ",
                "name": "customEventInit Optional"
            }
        ],
        "path": "dom/customevent/customevent",
        "syntax": "event = new CustomEvent(typeArg, customEventInit);",
        "type": "Events"
    },
    "CustomEvent.detail": {
        "descr": "The detail readonly property of the CustomEvent interface returns any data passed when initializing the event.",
        "name": "CustomEvent.detail",
        "params": [],
        "path": "dom/customevent/detail",
        "syntax": "let myDetail = customEventInstance.detail; Return value Whatever data the event was initialized with. Example // add an appropriate event listener obj.addEventListener(\"cat\", function(e) { process(e.detail) });\n or  // create and dispatch the event let event = new CustomEvent(\"cat\", { detail: { hazcheeseburger: true } });\n or  obj.dispatchEvent(event);\n or  // Will return an object contaning the hazcheeseburger property let myDetail = event.detail;);",
        "type": "Events"
    },
    "DOMConfiguration": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "DOMConfiguration",
        "params": [
            {
                "descr": "Is a DOMStringList",
                "name": "DOMConfiguration.parameterNames Read only"
            },
            {
                "descr": "Returns a Boolean",
                "name": "DOMConfiguration.canSetParameter()"
            },
            {
                "descr": "Returns a DOMUserData",
                "name": "DOMConfiguration.getParameter()"
            },
            {
                "descr": "Sets a parameter",
                "name": "DOMConfiguration.setParameter()"
            }
        ],
        "path": "dom/domconfiguration",
        "syntax": "DOMConfiguration.parameterNames Read only   Is a DOMStringList   Methods  DOMConfiguration.canSetParameter()",
        "type": "DOM"
    },
    "DOMException": {
        "descr": "The DOMException interface represents an abnormal event (called an exception) which occurs as a result of calling a method or accessing a property of a web API. This is basically how error conditions are described in web APIs.",
        "name": "DOMException",
        "params": [
            {
                "descr": "Returns a DOMException object with a specified message and name.",
                "name": "DOMException()"
            },
            {
                "descr": "Returns a short that contains one of the error code constants, or 0 if none match. ",
                "name": "DOMException.code Read only"
            },
            {
                "descr": "Returns a DOMString representing a message or description associated with the given error name.",
                "name": "DOMException.message Read only"
            },
            {
                "descr": "Returns a DOMString that contains one of the strings associated with an error name.",
                "name": "DOMException.name Read only"
            },
            {
                "descr": "The node tree hierarchy is not correct. ",
                "name": "HierarchyRequestError"
            }
        ],
        "path": "dom/domexception",
        "syntax": "SyntaxError The string did not match the expected pattern. (Legacy code value: 12 and legacy constant name: SYNTAX_ERR) InvalidModificationError",
        "type": "DOM"
    },
    "DOMException.constructor": {
        "descr": "The DOMException() constructor returns a DOMException object with a specified message and name.",
        "name": "DOMException.constructor",
        "params": [
            {
                "descr": "A description of the exception. ",
                "name": "message Optional"
            },
            {
                "descr": "Returns a DOMString that contains one of the strings associated with an error constant.",
                "name": "name Optional"
            },
            {
                "descr": "A newly created DOMException object.",
                "name": "Return value  DOMException"
            }
        ],
        "path": "dom/domexception/domexception",
        "syntax": "var domException = new DOMException();\n or  var domException = new DOMException(message);\n or  var domException = new DOMException(message, name);",
        "type": "DOM"
    },
    "DOMHighResTimeStamp": {
        "descr": "The DOMHighResTimeStamp type is a double and is used to store a time value. The value could be a discrete point in time or the difference in time between two discrete points in time.",
        "name": "DOMHighResTimeStamp",
        "params": [],
        "path": "dom/domhighrestimestamp",
        "syntax": "privacy.reduceTimerPrecision preference is enabled by default and defaults to 20us in Firefox 59; in 60 it will be 2ms. // reduced time precision (2ms) in Firefox 60 event.timeStamp // 1519211809934 // 1519211810362 // 1519211811670 // ... // reduced time precision with `privacy.resistFingerprinting` enabled event.timeStamp; // 1519129853500 // 1519129858900 // 1519129864400 // ...",
        "type": "DOM"
    },
    "DOMImplementation.createDocument": {
        "descr": "The DOMImplementation.createDocument() method creates and returns an XMLDocument.",
        "name": "DOMImplementation.createDocument",
        "params": [
            {
                "descr": "Is a DOMString containing the namespace URI of the document to be created, or null if the document doesn't belong to one.",
                "name": "namespaceURI"
            },
            {
                "descr": "Is a DOMString containing the qualified name, that is an optional prefix and colon plus the local root element name, of the document to be created.",
                "name": "qualifiedNameStr"
            },
            {
                "descr": "Is the DocumentType of the document to be created. ",
                "name": "documentType Optional"
            }
        ],
        "path": "dom/domimplementation/createdocument",
        "syntax": "doc = document.implementation.createDocument(namespaceURI, qualifiedNameStr, documentType);",
        "type": "DOM"
    },
    "DOMImplementation.createDocumentType": {
        "descr": "The DOMImplementation.createDocumentType() method returns a DocumentType object which can either be used with DOMImplementation.createDocument upon document creation or can be put into the document via methods like Node.insertBefore() or Node.replaceChild().",
        "name": "DOMImplementation.createDocumentType",
        "params": [
            {
                "descr": "Is a DOMString containing the qualified name, like svg:svg.",
                "name": "qualifiedNameStr"
            },
            {
                "descr": "Is a DOMString containing the PUBLIC identifier.",
                "name": "publicId"
            },
            {
                "descr": "Is a DOMString containing the SYSTEM identifiers.",
                "name": "systemId"
            }
        ],
        "path": "dom/domimplementation/createdocumenttype",
        "syntax": "doctype = document.implementation.createDocumentType(qualifiedNameStr, publicId, systemId)",
        "type": "DOM"
    },
    "DOMImplementation.createHTMLDocument": {
        "descr": "The DOMImplementation.createHTMLDocument() method creates a new HTML Document.",
        "name": "DOMImplementation.createHTMLDocument",
        "params": [
            {
                "descr": "Is a DOMString containing the title to give the new HTML document.",
                "name": "title Optional (except in IE)"
            }
        ],
        "path": "dom/domimplementation/createhtmldocument",
        "syntax": "newDoc = document.implementation.createHTMLDocument(title);",
        "type": "DOM"
    },
    "DOMPoint.constructor": {
        "descr": "The DOMPoint() constructor creates and returns a new DOMPoint object, given the values for some or all of its properties.",
        "name": "DOMPoint.constructor",
        "params": [
            {
                "descr": "The x coordinate for the new DOMPoint.",
                "name": "x Optional"
            },
            {
                "descr": "The y coordinate for the new DOMPoint.",
                "name": "y Optional"
            },
            {
                "descr": "The z coordinate for the new DOMPoint.",
                "name": "z Optional"
            },
            {
                "descr": "The perspective value of the new DOMPoint.",
                "name": "w Optional"
            }
        ],
        "path": "dom/dompoint/dompoint",
        "syntax": "point = new DOMPoint(x, y, z, w);",
        "type": "DOM"
    },
    "DOMPoint.fromPoint": {
        "descr": "The static DOMPoint method fromPoint() creates and returns a new mutable DOMPoint object given a source point. The source point is specified as a DOMPointInit-compatible object, which includes both DOMPoint and DOMPointReadOnly.",
        "name": "DOMPoint.fromPoint",
        "params": [
            {
                "descr": "A DOMPointInit-compliant object, which includes both DOMPoint and DOMPointReadOnly, from which to take the values of the new point's properties.",
                "name": "sourcePoint"
            }
        ],
        "path": "dom/dompoint/frompoint",
        "syntax": "var point = DOMPoint.fromPoint(sourcePoint);",
        "type": "DOM"
    },
    "DOMPoint.w": {
        "descr": "The DOMPoint interface's w property holds the point's perspective value, w, for a point in space.",
        "name": "DOMPoint.w",
        "params": [],
        "path": "dom/dompoint/w",
        "syntax": "var perspective = DOMPoint.w; Value A double-precision floating-point value indicating the w perspective value for the point. This value is unrestricted, meaning that it is allowed to be infinite or invalid (that is, its value may be NaN or ±Infinity). The default is 1.0.",
        "type": "DOM"
    },
    "DOMPoint.x": {
        "descr": "The DOMPoint interface's x property holds the horizontal coordinate, x, for a point in space. In general, positive values x mean to the right, and negative values of x means to the left, barring any transforms that may have altered the orientation of the axes.",
        "name": "DOMPoint.x",
        "params": [],
        "path": "dom/dompoint/x",
        "syntax": "var xPos = DOMPoint.x; Value A double-precision floating-point value indicating the x coordinate's value for the point. This value is unrestricted, meaning that it is allowed to be infinite or invalid (that is, its value may be NaN or ±Infinity).",
        "type": "DOM"
    },
    "DOMPoint.y": {
        "descr": "The DOMPoint interface's y property holds the vertical coordinate, y, for a point in space. Unless transforms have been applied to alter the orientation, the value of y increases downward and decreases upward.",
        "name": "DOMPoint.y",
        "params": [],
        "path": "dom/dompoint/y",
        "syntax": "var yPos = DOMPoint.y; Value A double-precision floating-point value indicating the y coordinate's value for the point. This value is unrestricted, meaning that it is allowed to be infinite or invalid (that is, its value may be NaN or ±Infinity).",
        "type": "DOM"
    },
    "DOMPoint.z": {
        "descr": "The DOMPoint interface's z property specifies the depth coordinate of a point in space. Unless transforms have changed the orientation, a z of 0 is the plane of the screen, with positive values extending outward toward the user from the screen, and negative values receding into the distance behind the screen.",
        "name": "DOMPoint.z",
        "params": [],
        "path": "dom/dompoint/z",
        "syntax": "var zPos = DOMPoint.z; Value A double-precision floating-point value indicating the z coordinate's value for the point. This value is unrestricted, meaning that it is allowed to be infinite or invalid (that is, its value may be NaN or ±Infinity).",
        "type": "DOM"
    },
    "DOMPointInit.w": {
        "descr": "The DOMPointInit dictionary's w property is used to specify the w perspective value of a point in space when either creating or serializing to JSON a DOMPoint or DOMPointReadOnly object.",
        "name": "DOMPointInit.w",
        "params": [],
        "path": "dom/dompointinit/w",
        "syntax": "var DOMPointInit = { w: wPerspective }; DOMPointInit.w = wPerspective; var wPerspective = DOMPointInit.w; Value A double-precision floating-point value indicating the point's w perspective value. This value is unrestricted, meaning that it is allowed to be infinite or invalid (that is, its value may be NaN or ±Infinity).",
        "type": "DOM"
    },
    "DOMPointInit.x": {
        "descr": "The DOMPointInit dictionary's x property is used to specify the x component of a point in 2D or 3D space when either creating or serializing a DOMPoint or DOMPointReadOnly.",
        "name": "DOMPointInit.x",
        "params": [],
        "path": "dom/dompointinit/x",
        "syntax": "var DOMPointInit = { x: xPos }; DOMPointInit.x = xPos; var xPos = DOMPointInit.x; Value A double-precision floating-point value indicating the point's x coordinate. This value is unrestricted, meaning that it is allowed to be infinite or invalid (that is, its value may be NaN or ±Infinity).",
        "type": "DOM"
    },
    "DOMPointInit.y": {
        "descr": "The DOMPointInit dictionary's y property is used to specify the y-coordinate of a point in 2D or 3D space when either creating or serializing to JSON a DOMPoint or DOMPointReadOnly object.",
        "name": "DOMPointInit.y",
        "params": [],
        "path": "dom/dompointinit/y",
        "syntax": "var DOMPointInit = { y: yPos }; DOMPointInit.y = yPos; var yPos = DOMPointInit.y; Value A double-precision floating-point value indicating the point's y-coordinate. This value is unrestricted, meaning that it is allowed to be infinite or invalid (that is, its value may be NaN or ±Infinity).",
        "type": "DOM"
    },
    "DOMPointInit.z": {
        "descr": "The DOMPointInit dictionary's z property is used to specify the z-coordinate of a point in 2D or 3D space when either creating or serializing to JSON a DOMPoint or DOMPointReadOnly object.",
        "name": "DOMPointInit.z",
        "params": [],
        "path": "dom/dompointinit/z",
        "syntax": "var DOMPointInit = { z: zPos }; DOMPointInit.z = zPos; var zPos = DOMPointInit.z; Value A double-precision floating-point value indicating the point's z-coordinate. This value is unrestricted, meaning that it is allowed to be infinite or invalid (that is, its value may be NaN or ±Infinity).",
        "type": "DOM"
    },
    "DOMPointReadOnly.constructor": {
        "descr": "The DOMPointReadOnly() constructor returns a new DOMPointReadOnly object representing a point in 2D or 3D space, optionally with perspective, whose values cannot be altered by script code.",
        "name": "DOMPointReadOnly.constructor",
        "params": [
            {
                "descr": "The value of the horizontal coordinate, x, as a floating point number. ",
                "name": "x Optional"
            },
            {
                "descr": "The value of the vertical coordinate, y, as a floating point number. ",
                "name": "y Optional"
            },
            {
                "descr": "The value of the depth coordinate, z, as a floating point number. ",
                "name": "z Optional"
            },
            {
                "descr": "The value of the perspective, w, as a floating point number. ",
                "name": "w Optional"
            }
        ],
        "path": "dom/dompointreadonly/dompointreadonly",
        "syntax": "point = new DOMPointReadOnly(x, y, z, w);",
        "type": "DOM"
    },
    "DOMPointReadOnly.fromPoint": {
        "descr": "The static DOMPointReadOnly method fromPoint() creates and returns a new DOMPointReadOnly object given a source point. The source point is specified as a DOMPointInit-compatible object, which includes both DOMPoint and DOMPointReadOnly.",
        "name": "DOMPointReadOnly.fromPoint",
        "params": [
            {
                "descr": "A DOMPointInit-compliant object, which includes both DOMPoint and DOMPointReadOnly, from which to take the values of the new point's properties.",
                "name": "sourcePoint"
            }
        ],
        "path": "dom/dompointreadonly/frompoint",
        "syntax": "var point = DOMPointReadOnly.fromPoint(sourcePoint);",
        "type": "DOM"
    },
    "DOMPointReadOnly.toJSON": {
        "descr": "The DOMPointReadOnly method toJSON() returns a DOMPointInit object giving the JSON form of the point object.",
        "name": "DOMPointReadOnly.toJSON",
        "params": [],
        "path": "dom/dompointreadonly/tojson",
        "syntax": "pointJSON = DOMPointReadOnly.toJSON();",
        "type": "DOM"
    },
    "DOMPointReadOnly.w": {
        "descr": "The DOMPointReadOnly interface's w property holds the point's perspective value, w, for a read-only point in space. If your script needs to be able to change the value of this property, you should instead use the DOMPoint object.",
        "name": "DOMPointReadOnly.w",
        "params": [],
        "path": "dom/dompointreadonly/w",
        "syntax": "var perspective = DOMPointReadOnly.w; Value A double-precision floating-point value indicating the w perspective value for the point. This value is unrestricted, meaning that it is allowed to be infinite or invalid (that is, its value may be NaN or ±Infinity). The default is 1.0.",
        "type": "DOM"
    },
    "DOMPointReadOnly.x": {
        "descr": "The DOMPointReadOnly interface's x property holds the horizontal coordinate, x, for a read-only point in space. This property cannot be changed by JavaScript code in this read-only version of the DOMPoint object.",
        "name": "DOMPointReadOnly.x",
        "params": [],
        "path": "dom/dompointreadonly/x",
        "syntax": "var xPos = DOMPointReadOnly.x; Value A double-precision floating-point value indicating the x coordinate's value for the point. This value is unrestricted, meaning that it is allowed to be infinite or invalid (that is, its value may be NaN or ±Infinity).",
        "type": "DOM"
    },
    "DOMPointReadOnly.y": {
        "descr": "The DOMPointReadOnly interface's y property holds the vertical coordinate, y, for a read-only point in space. If your script needs to be able to change the value of this property, you should instead use the DOMPoint object.",
        "name": "DOMPointReadOnly.y",
        "params": [],
        "path": "dom/dompointreadonly/y",
        "syntax": "var yPos = DOMPointReadOnly.y; Value A double-precision floating-point value indicating the y coordinate's value for the point. This value is unrestricted, meaning that it is allowed to be infinite or invalid (that is, its value may be NaN or ±Infinity).",
        "type": "DOM"
    },
    "DOMPointReadOnly.z": {
        "descr": "The DOMPointReadOnly interface's z property holds the depth coordinate, z, for a read-only point in space. If your script needs to be able to change the value of this property, you should instead use the DOMPoint object.",
        "name": "DOMPointReadOnly.z",
        "params": [],
        "path": "dom/dompointreadonly/z",
        "syntax": "var zPos = DOMPointReadOnly.z; Value A double-precision floating-point value indicating the z coordinate's value for the point. This value is unrestricted, meaning that it is allowed to be infinite or invalid (that is, its value may be NaN or ±Infinity).",
        "type": "DOM"
    },
    "DOMRect.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "DOMRect.constructor",
        "params": [
            {
                "descr": "The x coordinate of the DOMRect's origin.",
                "name": "x"
            },
            {
                "descr": "The y coordinate of the DOMRect's origin.",
                "name": "y"
            },
            {
                "descr": "The width of the DOMRect.",
                "name": "width"
            },
            {
                "descr": "The height of the DOMRect.",
                "name": "height"
            }
        ],
        "path": "dom/domrect/domrect",
        "syntax": "var myDOMRect = new DOMRect(x, y, width, height);",
        "type": "DOM"
    },
    "DOMRectReadOnly.bottom": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "DOMRectReadOnly.bottom",
        "params": [],
        "path": "dom/domrectreadonly/bottom",
        "syntax": "var recBottom = DOMRect.bottom; Value A double. Specifications    Specification Status Comment   Geometry Interfaces Module Level 1The definition of 'bottom' in that specification. Candidate Recommendation Latest spec version is an ED.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  Yes  No   No   Implemented on the proprietary ClientRect",
        "type": "DOM"
    },
    "DOMRectReadOnly.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "DOMRectReadOnly.constructor",
        "params": [
            {
                "descr": "The x coordinate of the DOMRectReadOnly's origin.",
                "name": "x"
            },
            {
                "descr": "The y coordinate of the DOMRectReadOnly's origin.",
                "name": "y"
            },
            {
                "descr": "The width of the DOMRectReadOnly.",
                "name": "width"
            },
            {
                "descr": "The height of the DOMRectReadOnly.",
                "name": "height"
            }
        ],
        "path": "dom/domrectreadonly/domrectreadonly",
        "syntax": "var myDOMRectReadOnly = new DOMRectReadOnly(x, y, width, height);",
        "type": "DOM"
    },
    "DOMRectReadOnly.fromRect": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "DOMRectReadOnly.fromRect",
        "params": [
            {
                "descr": "An object specifying the location and dimensions of a rectangle. ",
                "name": "rectangle Optional"
            }
        ],
        "path": "dom/domrectreadonly/fromrect",
        "syntax": "var domRect = DOMRectReadOnly.fromRect(rectangle)",
        "type": "DOM"
    },
    "DOMRectReadOnly.height": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "DOMRectReadOnly.height",
        "params": [],
        "path": "dom/domrectreadonly/height",
        "syntax": "var recHeight = DOMRect.height; Value A double. Specifications    Specification Status Comment   Geometry Interfaces Module Level 1The definition of 'height' in that specification. Candidate Recommendation Latest spec version is an ED.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  Yes  No   No   Implemented on the proprietary ClientRect",
        "type": "DOM"
    },
    "DOMRectReadOnly.left": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "DOMRectReadOnly.left",
        "params": [],
        "path": "dom/domrectreadonly/left",
        "syntax": "var recLeft = DOMRect.left; Value A double. Specifications    Specification Status Comment   Geometry Interfaces Module Level 1The definition of 'left' in that specification. Candidate Recommendation Latest spec version is an ED.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  Yes  No   No   Implemented on the proprietary ClientRect",
        "type": "DOM"
    },
    "DOMRectReadOnly.right": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "DOMRectReadOnly.right",
        "params": [],
        "path": "dom/domrectreadonly/right",
        "syntax": "var recRight = DOMRect.right; Value A double. Specifications    Specification Status Comment   Geometry Interfaces Module Level 1The definition of 'right' in that specification. Candidate Recommendation Latest spec version is an ED.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  Yes  No   No   Implemented on the proprietary ClientRect",
        "type": "DOM"
    },
    "DOMRectReadOnly.top": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "DOMRectReadOnly.top",
        "params": [],
        "path": "dom/domrectreadonly/top",
        "syntax": "var recTop = DOMRect.top; Value A double. Specifications    Specification Status Comment   Geometry Interfaces Module Level 1The definition of 'top' in that specification. Candidate Recommendation Latest spec version is an ED.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  Yes  No   No   Implemented on the proprietary ClientRect",
        "type": "DOM"
    },
    "DOMRectReadOnly.width": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "DOMRectReadOnly.width",
        "params": [],
        "path": "dom/domrectreadonly/width",
        "syntax": "var recWidth = DOMRect.width; Value A double. Specifications    Specification Status Comment   Geometry Interfaces Module Level 1The definition of 'width' in that specification. Candidate Recommendation Latest spec version is an ED.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  Yes  No   No   Implemented on the proprietary ClientRect",
        "type": "DOM"
    },
    "DOMTokenList.add": {
        "descr": "The add() method of the DOMTokenList interface adds the given token to the list.",
        "name": "DOMTokenList.add",
        "params": [
            {
                "descr": "A DOMString representing the token you want to add to the list.",
                "name": "tokenN"
            }
        ],
        "path": "dom/domtokenlist/add",
        "syntax": "tokenList.add(token1[, token2[, ...]]);",
        "type": "DOM"
    },
    "DOMTokenList.contains": {
        "descr": "The contains() method of the DOMTokenList interface returns a Boolean — true if the underlying list contains the given token, otherwise false.",
        "name": "DOMTokenList.contains",
        "params": [
            {
                "descr": "A DOMString representing the token you want to check for the existance of in the list.",
                "name": "token"
            }
        ],
        "path": "dom/domtokenlist/contains",
        "syntax": "tokenList.contains(token);",
        "type": "DOM"
    },
    "DOMTokenList.entries": {
        "descr": "The DOMTokenList.entries() method returns an iterator allowing you to go through all key/value pairs contained in this object. The values are DOMString objects, each representing a single token.",
        "name": "DOMTokenList.entries",
        "params": [],
        "path": "dom/domtokenlist/entries",
        "syntax": "tokenList.entries();",
        "type": "DOM"
    },
    "DOMTokenList.forEach": {
        "descr": "The forEach() method of the DOMTokenList interface calls the callback given in parameter once for each value pair in the list, in insertion order.",
        "name": "DOMTokenList.forEach",
        "params": [
            {
                "descr": "Function to execute for each element, eventually taking three arguments:  currentValue The current element being processed in the array.",
                "name": "callback"
            },
            {
                "descr": "The index of the current element being processed in the array.",
                "name": "currentIndex"
            },
            {
                "descr": "The array that forEach() is being applied to.",
                "name": "listObj"
            },
            {
                "descr": "Value to use as this when executing callback.",
                "name": "argument Optional"
            }
        ],
        "path": "dom/domtokenlist/foreach",
        "syntax": "tokenList.forEach(callback);\n or  tokenList.forEach(callback, argument);",
        "type": "DOM"
    },
    "DOMTokenList.item": {
        "descr": "The item() method of the DOMTokenList interface returns an item in the list by its index.",
        "name": "DOMTokenList.item",
        "params": [
            {
                "descr": "A DOMString representing the index of the item you want to return.",
                "name": "index"
            }
        ],
        "path": "dom/domtokenlist/item",
        "syntax": "tokenList.item(index);",
        "type": "DOM"
    },
    "DOMTokenList.keys": {
        "descr": "The keys() method of the DOMTokenList interface returns an iterator allowing to go through all keys contained in this object. The keys are of type unsigned integer.",
        "name": "DOMTokenList.keys",
        "params": [],
        "path": "dom/domtokenlist/keys",
        "syntax": "tokenList.keys();",
        "type": "DOM"
    },
    "DOMTokenList.length": {
        "descr": "The length read-only property of the DOMTokenList interface is an integer representing the number of objects stored in the object.",
        "name": "DOMTokenList.length",
        "params": [],
        "path": "dom/domtokenlist/length",
        "syntax": "tokenList.length; Value An integer. Examples In the following example we retrieve the list of classes set on a <span> element as a DOMTokenList using Element.classList, then write the length of the list to the <span>'s Node.textContent. First, the HTML: <span class=\"a b c\"></span> Now the JavaScript: var span = document.querySelector(\"span\");\n or  var classes = span.classList; var length = classes.length; span.textContent = 'classList length = ' + length;);",
        "type": "DOM"
    },
    "DOMTokenList.remove": {
        "descr": "The remove() method of the DOMTokenList interface removes the specified tokens from the list.",
        "name": "DOMTokenList.remove",
        "params": [
            {
                "descr": "A DOMString representing the token you want to remove from the list. ",
                "name": "tokenN..."
            }
        ],
        "path": "dom/domtokenlist/remove",
        "syntax": "tokenList.remove(token1[, token2[, ...]]);",
        "type": "DOM"
    },
    "DOMTokenList.replace": {
        "descr": "The replace() method of the DOMTokenList interface replaces an existing token with a new token.",
        "name": "DOMTokenList.replace",
        "params": [
            {
                "descr": "A DOMString representing the token you want to replace.",
                "name": "oldToken"
            },
            {
                "descr": "A DOMString representing the token you want to replace oldToken with.",
                "name": "newToken"
            }
        ],
        "path": "dom/domtokenlist/replace",
        "syntax": "tokenList.replace(oldToken,newToken);",
        "type": "DOM"
    },
    "DOMTokenList.supports": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "DOMTokenList.supports",
        "params": [
            {
                "descr": "A DOMString containing the token to query for.",
                "name": "token"
            }
        ],
        "path": "dom/domtokenlist/supports",
        "syntax": "var boolean = element.supports(token)",
        "type": "DOM"
    },
    "DOMTokenList.toggle": {
        "descr": "The toggle() method of the DOMTokenList interface removes a given token from the list and returns false. If token doesn't exist it's added and the function returns true.",
        "name": "DOMTokenList.toggle",
        "params": [
            {
                "descr": "A DOMString representing the token you want to toggle.",
                "name": "token"
            },
            {
                "descr": "A Boolean that, if included, turns the toggle into a one way-only operation. ",
                "name": "force Optional"
            }
        ],
        "path": "dom/domtokenlist/toggle",
        "syntax": "tokenList.toggle(token, force);",
        "type": "DOM"
    },
    "DOMTokenList.value": {
        "descr": "The value property of the DOMTokenList interface returns the value of the list as a DOMString, or clears and sets the list to the given value.",
        "name": "DOMTokenList.value",
        "params": [],
        "path": "dom/domtokenlist/value",
        "syntax": "tokenList.value; Value A DOMString Examples In the following example we retrieve the list of classes set on a <span> element as a DOMTokenList using Element.classList, then write the value of the list to the <span>'s Node.textContent. First, the HTML: <span class=\"a b c\"></span> Now the JavaScript: var span = document.querySelector(\"span\");\n or  var classes = span.classList; span.textContent = classes.value;);",
        "type": "DOM"
    },
    "DOMTokenList.values": {
        "descr": "The values() method of the DOMTokenList interface returns an iterator allowing developers to go through all values contained in the DOMTokenList. The individual values are DOMString objects.",
        "name": "DOMTokenList.values",
        "params": [],
        "path": "dom/domtokenlist/values",
        "syntax": "tokenList.values();",
        "type": "DOM"
    },
    "DataTransfer": {
        "descr": "The DataTransfer object is used to hold the data that is being dragged during a drag and drop operation. It may hold one or more data items, each of one or more data types. For more information about drag and drop, see HTML Drag and Drop API.",
        "name": "DataTransfer",
        "params": [
            {
                "descr": "Creates and returns a new DataTransfer object.",
                "name": "DataTransfer()"
            },
            {
                "descr": "Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. ",
                "name": "DataTransfer.dropEffect"
            },
            {
                "descr": "Provides all of the types of operations that are possible. ",
                "name": "DataTransfer.effectAllowed"
            },
            {
                "descr": "Contains a list of all the local files available on the data transfer. ",
                "name": "DataTransfer.files"
            },
            {
                "descr": "Gives a DataTransferItemList object which is a list of all of the drag data.",
                "name": "DataTransfer.items Read only"
            },
            {
                "descr": "An array of strings giving the formats that were set in the dragstart event.",
                "name": "DataTransfer.types Read only"
            },
            {
                "descr": "Gives the drag cursor's state. This is primarily used to control the cursor during tab drags.",
                "name": "DataTransfer.mozCursor"
            },
            {
                "descr": "Gives the number of items in the drag operation.",
                "name": "DataTransfer.mozItemCount Read only"
            },
            {
                "descr": "The Node over which the mouse cursor was located when the button was pressed to initiate the drag operation. ",
                "name": "DataTransfer.mozSourceNode Read only"
            },
            {
                "descr": "This property applies only to the dragend event, and is true if the user canceled the drag operation by pressing escape. ",
                "name": "DataTransfer.mozUserCancelled Read only"
            },
            {
                "descr": "Remove the data associated with a given type. ",
                "name": "DataTransfer.clearData()"
            },
            {
                "descr": "Retrieves the data for a given type, or an empty string if data for that type does not exist or the data transfer contains no data.",
                "name": "DataTransfer.getData()"
            },
            {
                "descr": "Set the data for a given type. If data for the type does not exist, it is added at the end, such that the last item in the types list will be the new format. ",
                "name": "DataTransfer.setData()"
            },
            {
                "descr": "Set the image to be used for dragging if a custom one is desired.",
                "name": "DataTransfer.setDragImage()"
            },
            {
                "descr": "Sets the drag source to the given element.",
                "name": "DataTransfer.addElement()"
            },
            {
                "descr": "Removes the data associated with the given format for an item at the specified index. ",
                "name": "DataTransfer.mozClearDataAt()"
            },
            {
                "descr": "Retrieves the data associated with the given format for an item at the specified index, or null if it does not exist. ",
                "name": "DataTransfer.mozGetDataAt()"
            },
            {
                "descr": "A data transfer may store multiple items, each at a given zero-based index. ",
                "name": "DataTransfer.mozSetDataAt()"
            },
            {
                "descr": "Holds a list of the format types of the data that is stored for an item at the specified index. ",
                "name": "DataTransfer.mozTypesAt()"
            }
        ],
        "path": "dom/datatransfer",
        "syntax": "DataTransfer.mozCursor Gives the drag cursor's state. This is primarily used to control the cursor during tab drags.  DataTransfer.mozItemCount Read only   Gives the number of items in the drag operation.  DataTransfer.mozSourceNode Read only   The Node over which the mouse cursor was located when the button was pressed to initiate the drag operation. This value is null for external drags or if the caller can't access the node.  DataTransfer.mozUserCancelled Read only   This property applies only to the dragend event, and is true if the user canceled the drag operation by pressing escape. It will be false in all other cases, including if the drag failed for any other reason, for instance due to a drop over an invalid location.  Methods Standard methods  DataTransfer.clearData()",
        "type": "Drag & Drop"
    },
    "DataTransfer.clearData": {
        "descr": "The DataTransfer.clearData() method removes the drag operation's drag data for the given type. If data for the given type does not exist, this method does nothing.",
        "name": "DataTransfer.clearData",
        "params": [
            {
                "descr": "A string which specifies the type of data to remove. ",
                "name": "format Optional"
            }
        ],
        "path": "dom/datatransfer/cleardata",
        "syntax": "DataTransfer.clearData([format]);",
        "type": "Drag & Drop"
    },
    "DataTransfer.constructor": {
        "descr": "The DataTransfer constructor creates a new DataTransfer object instance.",
        "name": "DataTransfer.constructor",
        "params": [],
        "path": "dom/datatransfer/datatransfer",
        "syntax": "var dataTrans = new DataTransfer()",
        "type": "Drag & Drop"
    },
    "DataTransfer.dropEffect": {
        "descr": "The DataTransfer.dropEffect property controls the feedback (typically visual) the user is given during a drag and drop operation. It will affect which cursor is displayed while dragging. For example, when the user hovers over a target drop element, the browser's cursor may indicate which type of operation will occur.",
        "name": "DataTransfer.dropEffect",
        "params": [
            {
                "descr": "A copy of the source item is made at the new location.",
                "name": "copy"
            },
            {
                "descr": "An item is moved to a new location.",
                "name": "move"
            },
            {
                "descr": "A link is established to the source at the new location.",
                "name": "link"
            },
            {
                "descr": "The item may not be dropped.",
                "name": "none"
            }
        ],
        "path": "dom/datatransfer/dropeffect",
        "syntax": "dataTransfer.dropEffect;  Values A DOMString representing the drag operation effect. The possible values are:  copy A copy of the source item is made at the new location. move An item is moved to a new location. link A link is established to the source at the new location. none The item may not be dropped.  Assigning any other value to dropEffect has no effect and the old value is retained. Example This example shows the use of the dropEffect and effectAllowed properties. HTML Content <div> <p id=\"source\" ondragstart=\"dragstart_handler(event);\n or \" draggable=\"true\"> Select this element, drag it to the Drop Zone and then release the selection to move the element. </p> </div> <div id=\"target\" ondrop=\"drop_handler(event);\n or \" ondragover=\"dragover_handler(event);\n or \">Drop Zone</div>);",
        "type": "Drag & Drop"
    },
    "DataTransfer.effectAllowed": {
        "descr": "The DataTransfer.effectAllowed property specifies the effect that is allowed for a drag operation. The copy operation is used to indicate that the data being dragged will be copied from its present location to the drop location. The move operation is used to indicate that the data being dragged will be moved, and the link operation is used to indicate that some form of relationship or connection will be created between the source and drop locations.",
        "name": "DataTransfer.effectAllowed",
        "params": [
            {
                "descr": "The item may not be dropped.",
                "name": "none"
            },
            {
                "descr": "A copy of the source item may be made at the new location.",
                "name": "copy"
            },
            {
                "descr": "A copy or link operation is permitted.",
                "name": "copyLink"
            },
            {
                "descr": "A copy or move operation is permitted.",
                "name": "copyMove"
            },
            {
                "descr": "A link may be established to the source at the new location.",
                "name": "link"
            },
            {
                "descr": "A link or move operation is permitted.",
                "name": "linkMove"
            },
            {
                "descr": "An item may be moved to a new location.",
                "name": "move"
            },
            {
                "descr": "All operations are permitted.",
                "name": "all"
            },
            {
                "descr": "The default value when the effect has not been set, equivalent to all.",
                "name": "uninitialized"
            }
        ],
        "path": "dom/datatransfer/effectallowed",
        "syntax": "dataTransfer.effectAllowed;  Values A DOMString representing the drag operation that is allowed. The possible values are:  none The item may not be dropped. copy A copy of the source item may be made at the new location. copyLink A copy or link operation is permitted. copyMove A copy or move operation is permitted. link A link may be established to the source at the new location. linkMove A link or move operation is permitted. move An item may be moved to a new location. all All operations are permitted. uninitialized The default value when the effect has not been set, equivalent to all.  Assigning any other value to effectAllowed has no effect and the old value is retained. Internet Explorer will change the value to be lowercased; thus, linkMove will become linkmove, and so on. Example This example shows the use of the effectAllowed and dropEffect properties. <!DOCTYPE html> <html lang=en> <title>Examples of DataTransfer.{dropEffect,effectAllowed} properties</title> <meta content=\"width=device-width\"> <style> div { margin: 0em; padding: 2em; } #source { color: blue; border: 1px solid black; } #target { border: 1px solid black; } </style> <script> function dragstart_handler(ev) { console.log(\"dragStart: dropEffect = \" + ev.dataTransfer.dropEffect + \" ; effectAllowed = \" + ev.dataTransfer.effectAllowed);\n or  // Add this element's id to the drag payload so the drop handler will // know which element to add to its tree ev.dataTransfer.setData(\"text\", ev.target.id);\n or  ev.dataTransfer.effectAllowed = \"move\"; } function drop_handler(ev) { console.log(\"drop: dropEffect = \" + ev.dataTransfer.dropEffect + \" ; effectAllowed = \" + ev.dataTransfer.effectAllowed);\n or  ev.preventDefault();\n or  // Get the id of the target and add the moved element to the target's DOM var data = ev.dataTransfer.getData(\"text\");\n or  ev.target.appendChild(document.getElementById(data));\n or  } function dragover_handler(ev) { console.log(\"dragOver: dropEffect = \" + ev.dataTransfer.dropEffect + \" ; effectAllowed = \" + ev.dataTransfer.effectAllowed);\n or  ev.preventDefault();\n or  // Set the dropEffect to move ev.dataTransfer.dropEffect = \"move\" } </script> <body> <h1>Examples <code>DataTransfer</code>.{<code>dropEffect</code>, <code>effectAllowed</code>} properties</h1> <div> <p id=\"source\" ondragstart=\"dragstart_handler(event);\n or \" draggable=\"true\"> Select this element, drag it to the Drop Zone and then release the selection to move the element.</p> </div> <div id=\"target\" ondrop=\"drop_handler(event);\n or \" ondragover=\"dragover_handler(event);\n or \">Drop Zone</div> </body> </html>);",
        "type": "Drag & Drop"
    },
    "DataTransfer.getData": {
        "descr": "The DataTransfer.getData() method retrieves drag data (as a DOMString) for the specified type. If the drag operation does not include data, this method returns an empty string.",
        "name": "DataTransfer.getData",
        "params": [
            {
                "descr": "A DOMString representing the type of data to retrieve.",
                "name": "format"
            },
            {
                "descr": "A DOMString representing the drag data for the specified format. ",
                "name": "DOMString"
            },
            {
                "descr": "The HTML5 Drag and Drop Specification dictates a drag data store mode. ",
                "name": "Data availability"
            }
        ],
        "path": "dom/datatransfer/getdata",
        "syntax": "DOMString dataTransfer.getData(format);",
        "type": "Drag & Drop"
    },
    "DataTransfer.items": {
        "descr": "The read-only DataTransfer property items property is a list of the data transfer items in a drag operation. The list includes one item for each item in the operation and if the operation had no items, the list is empty.",
        "name": "DataTransfer.items",
        "params": [],
        "path": "dom/datatransfer/items",
        "syntax": "itemList = dataTransfer.items;  Return value A DataTransferItemList object containing DataTransferItem objects representing the items being dragged in a drag operation, one list item for each object being dragged. If the drag operation had no data, the list is empty. Example This example shows the use of the items and types properties. <!DOCTYPE html> <html lang=en> <title>Examples of DataTransfer.{types,items} properties</title> <meta content=\"width=device-width\"> <style> div { margin: 0em; padding: 2em; } #target { border: 1px solid black; } </style> <script> function dragstart_handler(ev) { console.log(\"dragStart: target.id = \" + ev.target.id);\n or  // Add this element's id to the drag payload so the drop handler will // know which element to add to its tree ev.dataTransfer.setData(\"text/plain\", ev.target.id);\n or  ev.dataTransfer.effectAllowed = \"move\"; } function drop_handler(ev) { console.log(\"drop: target.id = \" + ev.target.id);\n or  ev.preventDefault();\n or  // Get the id of the target and add the moved element to the target's DOM var data = ev.dataTransfer.getData(\"text\");\n or  ev.target.appendChild(document.getElementById(data));\n or  // Print each format type if (ev.dataTransfer.types != null) { for (var i=0; i < ev.dataTransfer.types.length; i++) { console.log(\"... types[\" + i + \"] = \" + ev.dataTransfer.types[i]);\n or  } } // Print each item's \"kind\" and \"type\" if (ev.dataTransfer.items != null) { for (var i=0; i < ev.dataTransfer.items.length; i++) { console.log(\"... items[\" + i + \"].kind = \" + ev.dataTransfer.items[i].kind + \" ; type = \" + ev.dataTransfer.items[i].type);\n or  } } } function dragover_handler(ev) { console.log(\"dragOver\");\n or  ev.preventDefault();\n or  // Set the dropEffect to move ev.dataTransfer.dropEffect = \"move\" } </script> <body> <h1>Examples of <code>DataTransfer</code>.{<code>types</code>, <code>items</code>} properties</h1> <ul> <li id=\"i1\" ondragstart=\"dragstart_handler(event);\n or \" draggable=\"true\">Drag Item 1 to the Drop Zone</li> <li id=\"i2\" ondragstart=\"dragstart_handler(event);\n or \" draggable=\"true\">Drag Item 2 to the Drop Zone</li> </ul> <div id=\"target\" ondrop=\"drop_handler(event);\n or \" ondragover=\"dragover_handler(event);\n or \">Drop Zone</div> </body> </html>);",
        "type": "Drag & Drop"
    },
    "DataTransfer.setData": {
        "descr": "The DataTransfer.setData() method sets the drag operation's drag data to the specified data and type. If data for the given type does not exist, it is added at the end of the drag data store, such that the last item in the types list will be the new type. If data for the given type already exists, the existing data is replaced in the same position. That is, the order of the types list is not changed when replacing data of the same type.",
        "name": "DataTransfer.setData",
        "params": [
            {
                "descr": "A DOMString representing the type of the drag data to add to the drag object.",
                "name": "format"
            },
            {
                "descr": "A DOMString representing the data to add to the drag object.",
                "name": "data"
            }
        ],
        "path": "dom/datatransfer/setdata",
        "syntax": "void dataTransfer.setData(format, data);",
        "type": "Drag & Drop"
    },
    "DataTransfer.setDragImage": {
        "descr": "When a drag occurs, a translucent image is generated from the drag target (the element the dragstart event is fired at), and follows the mouse pointer during the drag. This image is created automatically, so you do not need to create it yourself. However, if a custom image is desired, the DataTransfer.setDragImage() method can be used to set the custom image to be used.",
        "name": "DataTransfer.setDragImage",
        "params": [
            {
                "descr": "An image Element element to use for the drag feedback image.",
                "name": "img"
            },
            {
                "descr": "A long indicating the horizontal offset within the image.",
                "name": "xOffset"
            },
            {
                "descr": "A long indicating the vertical offset within the image.",
                "name": "yOffset"
            }
        ],
        "path": "dom/datatransfer/setdragimage",
        "syntax": "void dataTransfer.setDragImage(img, xOffset, yOffset);",
        "type": "Drag & Drop"
    },
    "DataTransfer.types": {
        "descr": "The DataTransfer.types read-only property returns an array of the drag data formats (as strings) that were set in the dragstart event. The order of the formats is the same order as the data included in the drag operation.",
        "name": "DataTransfer.types",
        "params": [],
        "path": "dom/datatransfer/types",
        "syntax": "dataTransfer.types;  Return value An array of the data formats used in the drag operation. Each format is string. If the drag operation included no data, this list will be empty. If any files are included in the drag operation, then one of the types will be the string Files.  Example This example shows the use of the types and items properties. <!DOCTYPE html> <html lang=en> <title>Examples of DataTransfer.{types,items} properties</title> <meta content=\"width=device-width\"> <style> div { margin: 0em; padding: 2em; } #target { border: 1px solid black; } </style> <script> function dragstart_handler(ev) { console.log(\"dragStart: target.id = \" + ev.target.id);\n or  // Add this element's id to the drag payload so the drop handler will // know which element to add to its tree ev.dataTransfer.setData(\"text/plain\", ev.target.id);\n or  ev.dataTransfer.effectAllowed = \"move\"; } function drop_handler(ev) { console.log(\"drop: target.id = \" + ev.target.id);\n or  ev.preventDefault();\n or  // Get the id of the target and add the moved element to the target's DOM var data = ev.dataTransfer.getData(\"text\");\n or  ev.target.appendChild(document.getElementById(data));\n or  // Print each format type if (ev.dataTransfer.types != null) { for (var i=0; i < ev.dataTransfer.types.length; i++) { console.log(\"... types[\" + i + \"] = \" + ev.dataTransfer.types[i]);\n or  } } // Print each item's \"kind\" and \"type\" if (ev.dataTransfer.items != null) { for (var i=0; i < ev.dataTransfer.items.length; i++) { console.log(\"... items[\" + i + \"].kind = \" + ev.dataTransfer.items[i].kind + \" ; type = \" + ev.dataTransfer.items[i].type);\n or  } } } function dragover_handler(ev) { console.log(\"dragOver\");\n or  ev.preventDefault();\n or  // Set the dropEffect to move ev.dataTransfer.dropEffect = \"move\" } </script> <body> <h1>Examples of <code>DataTransfer</code>.{<code>types</code>, <code>items</code>} properties</h1> <ul> <li id=\"i1\" ondragstart=\"dragstart_handler(event);\n or \" draggable=\"true\">Drag Item 1 to the Drop Zone</li> <li id=\"i2\" ondragstart=\"dragstart_handler(event);\n or \" draggable=\"true\">Drag Item 2 to the Drop Zone</li> </ul> <div id=\"target\" ondrop=\"drop_handler(event);\n or \" ondragover=\"dragover_handler(event);\n or \">Drop Zone</div> </body> </html>);",
        "type": "Drag & Drop"
    },
    "DataTransferItem.getAsFile": {
        "descr": "If the item is a file, the DataTransferItem.getAsFile() method returns the drag data item's File object. If the item is not a file, this method returns null.",
        "name": "DataTransferItem.getAsFile",
        "params": [
            {
                "descr": "If the drag data item is a file, a File object is returned; otherwise null is returned.",
                "name": "File"
            }
        ],
        "path": "dom/datatransferitem/getasfile",
        "syntax": "File = DataTransferItem.getAsFile();",
        "type": "Drag & Drop"
    },
    "DataTransferItem.getAsString": {
        "descr": "The DataTransferItem.getAsString() method invokes the given callback with the drag data item's string data as the argument if the item's kind is a Plain unicode string (i.e. kind is string).",
        "name": "DataTransferItem.getAsString",
        "params": [
            {
                "descr": "A callback function that has access to the data transfer item's string data. ",
                "name": "callback"
            },
            {
                "descr": "The drag data item's string data.",
                "name": "DOMString"
            }
        ],
        "path": "dom/datatransferitem/getasstring",
        "syntax": "dataTransferItem.getAsString(callback);",
        "type": "Drag & Drop"
    },
    "DataTransferItem.kind": {
        "descr": "The read-only DataTransferItem.kind property returns a DataTransferItem representing the drag data item kind: some text or some file.",
        "name": "DataTransferItem.kind",
        "params": [
            {
                "descr": "If the drag data item is a file.",
                "name": "'file'"
            },
            {
                "descr": "If the kind of drag data item is a plain Unicode string.",
                "name": "'string'"
            }
        ],
        "path": "dom/datatransferitem/kind",
        "syntax": "var itemKind = DataTransferItem.kind;  Return value A DOMString representing the drag data item's kind. It must be one of the following values:  'file' If the drag data item is a file. 'string' If the kind of drag data item is a plain Unicode string.  Example This example shows the use of the kind property. function drop_handler(ev) { console.log(\"Drop\");\n or  ev.preventDefault();\n or  var data = event.dataTransfer.items; for (var i = 0; i < data.length; i += 1) { if ((data[i].kind == 'string') && (data[i].type.match('^text/plain'))) { // This item is the target node data[i].getAsString(function (s){ ev.target.appendChild(document.getElementById(s));\n or  });\n or  } else if ((data[i].kind == 'string') && (data[i].type.match('^text/html'))) { // Drag data item is HTML console.log(\"... Drop: HTML\");\n or  } else if ((data[i].kind == 'file') && (data[i].type.match('^image/'))) { // Drag data item is an image file var f = data[i].getAsFile();\n or  console.log(\"... Drop: File \");\n or  } } });",
        "type": "Drag & Drop"
    },
    "DataTransferItem.type": {
        "descr": "The read-only DataTransferItem.type property returns the type (format) of the DataTransferItem object representing the drag data item. The type is a Unicode string generally given by a MIME type, although a MIME type is not required.",
        "name": "DataTransferItem.type",
        "params": [],
        "path": "dom/datatransferitem/type",
        "syntax": "dataItem.type;  Return value A DOMString representing the drag data item's type. Example This example shows the use of the type property. function drop_handler(ev) { console.log(\"Drop\");\n or  ev.preventDefault();\n or  var data = ev.dataTransfer.items; for (var i = 0; i < data.length; i += 1) { if ((data[i].kind == 'string') && (data[i].type.match('^text/plain'))) { // This item is the target node data[i].getAsString(function (s){ ev.target.appendChild(document.getElementById(s));\n or  });\n or  } else if ((data[i].kind == 'string') && (data[i].type.match('^text/html'))) { // Drag data item is HTML console.log(\"... Drop: HTML\");\n or  } else if ((data[i].kind == 'string') && (data[i].type.match('^text/uri-list'))) { // Drag data item is URI console.log(\"... Drop: URI\");\n or  } else if ((data[i].kind == 'file') && (data[i].type.match('^image/'))) { // Drag data item is an image file var f = data[i].getAsFile();\n or  console.log(\"... Drop: File \");\n or  } } });",
        "type": "Drag & Drop"
    },
    "DataTransferItemList.DataTransferItem": {
        "descr": "The DataTransferItem() getter method implements support for accessing items in the DataTransferItemList using array-style syntax (that is DataTransferItem[index]).",
        "name": "DataTransferItemList.DataTransferItem",
        "params": [
            {
                "descr": "The zero-based index of the item in the drag data list to return.",
                "name": "index"
            }
        ],
        "path": "dom/datatransferitemlist/datatransferitem",
        "syntax": "DataTransferItem[index]).",
        "type": "Drag & Drop"
    },
    "DataTransferItemList.add": {
        "descr": "The DataTransferItemList.add() method creates a new DataTransferItem using the specified data and adds it to the drag data list. The item may be a File or a string of a given type. If the item is successfully added to the list, the newly-created DataTransferItem object is returned.",
        "name": "DataTransferItemList.add",
        "params": [
            {
                "descr": "A string representing the drag item's data.",
                "name": "data"
            },
            {
                "descr": "A string of the drag item's type. ",
                "name": "type"
            },
            {
                "descr": "A File object. No type needs to be given in this case.",
                "name": "file"
            },
            {
                "descr": "A string data parameter was provided, and the list already contains an item whose kind is \"Plain Unicode string\" and whose type is equal to the specified type parameter.",
                "name": "NotSupportedError"
            }
        ],
        "path": "dom/datatransferitemlist/add",
        "syntax": "DataTransferItem = DataTransferItemList.add(data, type);\n or  DataTransferItem = DataTransferItemList.add(file);",
        "type": "Drag & Drop"
    },
    "DataTransferItemList.clear": {
        "descr": "The DataTransferItemList method clear() removes all DataTransferItem objects from the drag data items list, leaving the list empty.",
        "name": "DataTransferItemList.clear",
        "params": [],
        "path": "dom/datatransferitemlist/clear",
        "syntax": "DataTransferItemList.clear();",
        "type": "Drag & Drop"
    },
    "DataTransferItemList.length": {
        "descr": "The read-only length property of the DataTransferItemList interface returns the number of items currently in the drag item list.",
        "name": "DataTransferItemList.length",
        "params": [],
        "path": "dom/datatransferitemlist/length",
        "syntax": "length = DataTransferItemList.length;  Value The number of drag data items in the list, or 0 if the list is empty or disabled. The drag item list is considered to be disabled if the item list's DataTransfer object is not associated with a drag data store. Example This example shows the use of the length property. JavaScript function dragstart_handler(ev) { console.log(\"dragStart\");\n or  // Add this element's id to the drag payload so the drop handler will // know which element to add to its tree var dataList = ev.dataTransfer.items; dataList.add(ev.target.id, \"text/plain\");\n or  // Add some other items to the drag payload dataList.add(\"<p>... paragraph ...</p>\", \"text/html\");\n or  dataList.add(\"http://www.example.org\",\"text/uri-list\");\n or  } function drop_handler(ev) { console.log(\"Drop\");\n or  ev.preventDefault();\n or  var data = ev.dataTransfer.items; // Loop through the dropped items and log their data for (var i = 0; i < data.length; i++) { if ((data[i].kind == 'string') && (data[i].type.match('^text/plain'))) { // This item is the target node data[i].getAsString(function (s){ ev.target.appendChild(document.getElementById(s));\n or  });\n or  } else if ((data[i].kind == 'string') && (data[i].type.match('^text/html'))) { // Drag data item is HTML data[i].getAsString(function (s){ console.log(\"... Drop: HTML = \" + s);\n or  });\n or  } else if ((data[i].kind == 'string') && (data[i].type.match('^text/uri-list'))) { // Drag data item is URI data[i].getAsString(function (s){ console.log(\"... Drop: URI = \" + s);\n or  });\n or  } } } function dragover_handler(ev) { console.log(\"dragOver\");\n or  ev.preventDefault();\n or  // Set the dropEffect to move ev.dataTransfer.dropEffect = \"move\" } function dragend_handler(ev) { console.log(\"dragEnd\");\n or  var dataList = ev.dataTransfer.items; // Clear any remaining drag data dataList.clear();\n or  });",
        "type": "Drag & Drop"
    },
    "DataTransferItemList.remove": {
        "descr": "The DataTransferItemList.remove() method removes the DataTransferItem at the specified index from the list. If the index is less than zero or greater than one less than the length of the list, the list will not be changed.",
        "name": "DataTransferItemList.remove",
        "params": [
            {
                "descr": "The zero-based index number of the item in the drag data list to remove. ",
                "name": "index"
            },
            {
                "descr": "The drag data store is not in read/write mode, so the item can't be removed.",
                "name": "InvalidStateError"
            }
        ],
        "path": "dom/datatransferitemlist/remove",
        "syntax": "DataTransferItemList.remove(index);",
        "type": "Drag & Drop"
    },
    "DataView": {
        "descr": "The DataView view provides a low-level interface for reading and writing multiple number types in a binary ArrayBuffer, without having to care about the platform's endianness.",
        "name": "DataView",
        "params": [
            {
                "descr": "An existing ArrayBuffer or SharedArrayBuffer to use as the storage backing the new DataView object.",
                "name": "buffer"
            },
            {
                "descr": "The offset, in bytes, to the first byte in the above buffer for the new view to reference. ",
                "name": "byteOffset Optional"
            },
            {
                "descr": "The number of elements in the byte array. ",
                "name": "byteLength Optional"
            },
            {
                "descr": "Thrown if the byteOffset or byteLength parameter values result in the view extending past the end of the buffer. ",
                "name": "RangeError"
            },
            {
                "descr": "Specifies the function that creates an object's prototype. ",
                "name": "DataView.prototype.constructor"
            },
            {
                "descr": "The ArrayBuffer referenced by this view. ",
                "name": "DataView.prototype.buffer Read only"
            },
            {
                "descr": "The length (in bytes) of this view from the start of its ArrayBuffer. ",
                "name": "DataView.prototype.byteLength Read only"
            },
            {
                "descr": "The offset (in bytes) of this view from the start of its ArrayBuffer. ",
                "name": "DataView.prototype.byteOffset Read only"
            },
            {
                "descr": "Gets a signed 8-bit integer (byte) at the specified byte offset from the start of the view.",
                "name": "DataView.prototype.getInt8()"
            },
            {
                "descr": "Gets an unsigned 8-bit integer (unsigned byte) at the specified byte offset from the start of the view.",
                "name": "DataView.prototype.getUint8()"
            },
            {
                "descr": "Gets a signed 16-bit integer (short) at the specified byte offset from the start of the view.",
                "name": "DataView.prototype.getInt16()"
            },
            {
                "descr": "Gets an unsigned 16-bit integer (unsigned short) at the specified byte offset from the start of the view.",
                "name": "DataView.prototype.getUint16()"
            },
            {
                "descr": "Gets a signed 32-bit integer (long) at the specified byte offset from the start of the view.",
                "name": "DataView.prototype.getInt32()"
            },
            {
                "descr": "Gets an unsigned 32-bit integer (unsigned long) at the specified byte offset from the start of the view.",
                "name": "DataView.prototype.getUint32()"
            },
            {
                "descr": "Gets a signed 32-bit float (float) at the specified byte offset from the start of the view.",
                "name": "DataView.prototype.getFloat32()"
            },
            {
                "descr": "Gets a signed 64-bit float (double) at the specified byte offset from the start of the view.",
                "name": "DataView.prototype.getFloat64()"
            },
            {
                "descr": "Stores a signed 8-bit integer (byte) value at the specified byte offset from the start of the view.",
                "name": "DataView.prototype.setInt8()"
            },
            {
                "descr": "Stores an unsigned 8-bit integer (unsigned byte) value at the specified byte offset from the start of the view.",
                "name": "DataView.prototype.setUint8()"
            },
            {
                "descr": "Stores a signed 16-bit integer (short) value at the specified byte offset from the start of the view.",
                "name": "DataView.prototype.setInt16()"
            },
            {
                "descr": "Stores an unsigned 16-bit integer (unsigned short) value at the specified byte offset from the start of the view.",
                "name": "DataView.prototype.setUint16()"
            },
            {
                "descr": "Stores a signed 32-bit integer (long) value at the specified byte offset from the start of the view.",
                "name": "DataView.prototype.setInt32()"
            },
            {
                "descr": "Stores an unsigned 32-bit integer (unsigned long) value at the specified byte offset from the start of the view.",
                "name": "DataView.prototype.setUint32()"
            },
            {
                "descr": "Stores a signed 32-bit float (float) value at the specified byte offset from the start of the view.",
                "name": "DataView.prototype.setFloat32()"
            },
            {
                "descr": "Stores a signed 64-bit float (double) value at the specified byte offset from the start of the view.",
                "name": "DataView.prototype.setFloat64()"
            }
        ],
        "path": "javascript/global_objects/dataview",
        "syntax": "new DataView(buffer [, byteOffset [, byteLength]])",
        "type": "DataView"
    },
    "Date": {
        "descr": "Creates a JavaScript Date instance that represents a single moment in time. Date objects are based on a time value that is the number of milliseconds since 1 January 1970 UTC.",
        "name": "Date",
        "params": [
            {
                "descr": "Integer value representing the number of milliseconds since January 1, 1970, 00:00:00 UTC, with leap seconds ignored (Unix Epoch; but consider that most Unix timestamp functions count in seconds).",
                "name": "value"
            },
            {
                "descr": "String value representing a date. ",
                "name": "dateString"
            },
            {
                "descr": "Integer value representing the year. ",
                "name": "year"
            },
            {
                "descr": "Integer value representing the month, beginning with 0 for January to 11 for December.",
                "name": "monthIndex"
            },
            {
                "descr": "Integer value representing the day of the month.",
                "name": "day Optional"
            },
            {
                "descr": "Integer value representing the hour of the day.",
                "name": "hours Optional"
            },
            {
                "descr": "Integer value representing the minute segment of a time.",
                "name": "minutes Optional"
            },
            {
                "descr": "Integer value representing the second segment of a time.",
                "name": "seconds Optional"
            },
            {
                "descr": "Integer value representing the millisecond segment of a time.",
                "name": "milliseconds Optional"
            },
            {
                "descr": "Allows the addition of properties to a JavaScript Date object.",
                "name": "Date.prototype"
            },
            {
                "descr": "The value of Date.length is 7. This is the number of arguments handled by the constructor.",
                "name": "Date.length"
            },
            {
                "descr": "Returns the numeric value corresponding to the current time - the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC, with leap seconds ignored.",
                "name": "Date.now()"
            },
            {
                "descr": "Parses a string representation of a date and returns the number of milliseconds since 1 January, 1970, 00:00:00, UTC, with leap seconds ignored. ",
                "name": "Date.parse()"
            },
            {
                "descr": "Accepts the same parameters as the longest form of the constructor (i.e. ",
                "name": "Date.UTC()"
            },
            {
                "descr": "Returns the day of the month (1-31) for the specified date according to local time.",
                "name": "Date.prototype.getDate()"
            },
            {
                "descr": "Returns the day of the week (0-6) for the specified date according to local time.",
                "name": "Date.prototype.getDay()"
            },
            {
                "descr": "Returns the year (4 digits for 4-digit years) of the specified date according to local time.",
                "name": "Date.prototype.getFullYear()"
            },
            {
                "descr": "Returns the hour (0-23) in the specified date according to local time.",
                "name": "Date.prototype.getHours()"
            },
            {
                "descr": "Returns the milliseconds (0-999) in the specified date according to local time.",
                "name": "Date.prototype.getMilliseconds()"
            },
            {
                "descr": "Returns the minutes (0-59) in the specified date according to local time.",
                "name": "Date.prototype.getMinutes()"
            },
            {
                "descr": "Returns the month (0-11) in the specified date according to local time.",
                "name": "Date.prototype.getMonth()"
            },
            {
                "descr": "Returns the seconds (0-59) in the specified date according to local time.",
                "name": "Date.prototype.getSeconds()"
            },
            {
                "descr": "Returns the numeric value of the specified date as the number of milliseconds since January 1, 1970, 00:00:00 UTC (negative for prior times).",
                "name": "Date.prototype.getTime()"
            },
            {
                "descr": "Returns the time-zone offset in minutes for the current locale.",
                "name": "Date.prototype.getTimezoneOffset()"
            },
            {
                "descr": "Returns the day (date) of the month (1-31) in the specified date according to universal time.",
                "name": "Date.prototype.getUTCDate()"
            },
            {
                "descr": "Returns the day of the week (0-6) in the specified date according to universal time.",
                "name": "Date.prototype.getUTCDay()"
            },
            {
                "descr": "Returns the year (4 digits for 4-digit years) in the specified date according to universal time.",
                "name": "Date.prototype.getUTCFullYear()"
            },
            {
                "descr": "Returns the hours (0-23) in the specified date according to universal time.",
                "name": "Date.prototype.getUTCHours()"
            },
            {
                "descr": "Returns the milliseconds (0-999) in the specified date according to universal time.",
                "name": "Date.prototype.getUTCMilliseconds()"
            },
            {
                "descr": "Returns the minutes (0-59) in the specified date according to universal time.",
                "name": "Date.prototype.getUTCMinutes()"
            },
            {
                "descr": "Returns the month (0-11) in the specified date according to universal time.",
                "name": "Date.prototype.getUTCMonth()"
            },
            {
                "descr": "Returns the seconds (0-59) in the specified date according to universal time.",
                "name": "Date.prototype.getUTCSeconds()"
            },
            {
                "descr": "Returns the year (usually 2-3 digits) in the specified date according to local time. ",
                "name": "Date.prototype.getYear()"
            },
            {
                "descr": "Sets the day of the month for a specified date according to local time.",
                "name": "Date.prototype.setDate()"
            },
            {
                "descr": "Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to local time.",
                "name": "Date.prototype.setFullYear()"
            },
            {
                "descr": "Sets the hours for a specified date according to local time.",
                "name": "Date.prototype.setHours()"
            },
            {
                "descr": "Sets the milliseconds for a specified date according to local time.",
                "name": "Date.prototype.setMilliseconds()"
            },
            {
                "descr": "Sets the minutes for a specified date according to local time.",
                "name": "Date.prototype.setMinutes()"
            },
            {
                "descr": "Sets the month for a specified date according to local time.",
                "name": "Date.prototype.setMonth()"
            },
            {
                "descr": "Sets the seconds for a specified date according to local time.",
                "name": "Date.prototype.setSeconds()"
            },
            {
                "descr": "Sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC, allowing for negative numbers for times prior.",
                "name": "Date.prototype.setTime()"
            },
            {
                "descr": "Sets the day of the month for a specified date according to universal time.",
                "name": "Date.prototype.setUTCDate()"
            },
            {
                "descr": "Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to universal time.",
                "name": "Date.prototype.setUTCFullYear()"
            },
            {
                "descr": "Sets the hour for a specified date according to universal time.",
                "name": "Date.prototype.setUTCHours()"
            },
            {
                "descr": "Sets the milliseconds for a specified date according to universal time.",
                "name": "Date.prototype.setUTCMilliseconds()"
            },
            {
                "descr": "Sets the minutes for a specified date according to universal time.",
                "name": "Date.prototype.setUTCMinutes()"
            },
            {
                "descr": "Sets the month for a specified date according to universal time.",
                "name": "Date.prototype.setUTCMonth()"
            },
            {
                "descr": "Sets the seconds for a specified date according to universal time.",
                "name": "Date.prototype.setUTCSeconds()"
            },
            {
                "descr": "Sets the year (usually 2-3 digits) for a specified date according to local time. ",
                "name": "Date.prototype.setYear()"
            },
            {
                "descr": "Returns the \"date\" portion of the Date as a human-readable string like 'Thu Apr 12 2018'",
                "name": "Date.prototype.toDateString()"
            },
            {
                "descr": "Converts a date to a string following the ISO 8601 Extended Format.",
                "name": "Date.prototype.toISOString()"
            },
            {
                "descr": "Returns a string representing the Date using toISOString(). ",
                "name": "Date.prototype.toJSON()"
            },
            {
                "descr": "Returns a string representing the Date based on the GMT (UT) time zone. ",
                "name": "Date.prototype.toGMTString()"
            },
            {
                "descr": "Returns a string with a locality sensitive representation of the date portion of this date based on system settings.",
                "name": "Date.prototype.toLocaleDateString()"
            },
            {
                "descr": "Converts a date to a string, using a format string.",
                "name": "Date.prototype.toLocaleFormat()"
            },
            {
                "descr": "Returns a string with a locality sensitive representation of this date. ",
                "name": "Date.prototype.toLocaleString()"
            },
            {
                "descr": "Returns a string with a locality sensitive representation of the time portion of this date based on system settings.",
                "name": "Date.prototype.toLocaleTimeString()"
            },
            {
                "descr": "Returns a string representing the source for an equivalent Date object; you can use this value to create a new object. ",
                "name": "Date.prototype.toSource()"
            },
            {
                "descr": "Returns a string representing the specified Date object. ",
                "name": "Date.prototype.toString()"
            },
            {
                "descr": "Returns the \"time\" portion of the Date as a human-readable string.",
                "name": "Date.prototype.toTimeString()"
            },
            {
                "descr": "Converts a date to a string using the UTC timezone.",
                "name": "Date.prototype.toUTCString()"
            },
            {
                "descr": "Returns the primitive value of a Date object. ",
                "name": "Date.prototype.valueOf()"
            }
        ],
        "path": "javascript/global_objects/date",
        "syntax": "new Date();\n or  new Date(value);\n or  new Date(dateString);\n or  new Date(year, monthIndex [, day [, hours [, minutes [, seconds [, milliseconds]]]]]);",
        "type": "Date"
    },
    "Date.UTC": {
        "descr": "The Date.UTC() method accepts the same parameters as the Date constructor, but treats them as UTC. It returns the number of milliseconds since January 1, 1970, 00:00:00 UTC.",
        "name": "Date.UTC",
        "params": [
            {
                "descr": "A full year.",
                "name": "year"
            },
            {
                "descr": "An integer between 0 and 11 representing the month.",
                "name": "month"
            },
            {
                "descr": "Optional. An integer between 1 and 31 representing the day of the month. ",
                "name": "day"
            },
            {
                "descr": "Optional. An integer between 0 and 23 representing the hours. ",
                "name": "hour"
            },
            {
                "descr": "Optional. An integer between 0 and 59 representing the minutes. ",
                "name": "minute"
            },
            {
                "descr": "Optional. An integer between 0 and 59 representing the seconds. ",
                "name": "second"
            },
            {
                "descr": "Optional. An integer between 0 and 999 representing the milliseconds. ",
                "name": "millisecond"
            }
        ],
        "path": "javascript/global_objects/date/utc",
        "syntax": "Date.UTC(year, month[, day[, hour[, minute[, second[, millisecond]]]]])",
        "type": "Date"
    },
    "Date.now": {
        "descr": "The Date.now() method returns the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC.",
        "name": "Date.now",
        "params": [],
        "path": "javascript/global_objects/date/now",
        "syntax": "var timeInMs = Date.now();",
        "type": "Date"
    },
    "Date.parse": {
        "descr": "The Date.parse() method parses a string representation of a date, and returns the number of milliseconds since January 1, 1970, 00:00:00 UTC or NaN if the string is unrecognized or, in some cases, contains illegal date values (e.g. 2015-02-31).",
        "name": "Date.parse",
        "params": [
            {
                "descr": "A string representing an RFC2822 or (a variant of) ISO 8601 date (other formats may be used, but results may be unexpected).",
                "name": "dateString"
            }
        ],
        "path": "javascript/global_objects/date/parse",
        "syntax": "Date.parse(dateString)",
        "type": "Date"
    },
    "DedicatedWorkerGlobalScope.close": {
        "descr": "The close() method of the DedicatedWorkerGlobalScope interface discards any tasks queued in the DedicatedWorkerGlobalScope's event loop, effectively closing this particular scope.",
        "name": "DedicatedWorkerGlobalScope.close",
        "params": [],
        "path": "dom/dedicatedworkerglobalscope/close",
        "syntax": "self.close();",
        "type": "Web Workers"
    },
    "DedicatedWorkerGlobalScope.name": {
        "descr": "The name read-only property of the DedicatedWorkerGlobalScope interface returns the name that the Worker was (optionally) given when it was created. This is the name that the Worker() constructor can pass to get a reference to the DedicatedWorkerGlobalScope.",
        "name": "DedicatedWorkerGlobalScope.name",
        "params": [],
        "path": "dom/dedicatedworkerglobalscope/name",
        "syntax": "var nameObj = self.name; Value A DOMString. Example If a worker is created using a constructor with a name option: var myWorker = new Worker(\"worker.js\", { name : \"myWorker\" });",
        "type": "Web Workers"
    },
    "DedicatedWorkerGlobalScope.onmessage": {
        "descr": "The onmessage property of the DedicatedWorkerGlobalScope interface represents an EventHandler to be called when the message event occurs and bubbles through the Worker — i.e. when a message is sent to the worker using the Worker.postMessage method.",
        "name": "DedicatedWorkerGlobalScope.onmessage",
        "params": [],
        "path": "dom/dedicatedworkerglobalscope/onmessage",
        "syntax": "self.onmessage = function() { ... };",
        "type": "Web Workers"
    },
    "DedicatedWorkerGlobalScope.onmessageerror": {
        "descr": "The onmessageerror event handler of the DedicatedWorkerGlobalScope interface is an EventListener, called whenever an MessageEvent of type messageerror is fired on the worker—that is, when it receives a message that cannot be deserialized.",
        "name": "DedicatedWorkerGlobalScope.onmessageerror",
        "params": [],
        "path": "dom/dedicatedworkerglobalscope/onmessageerror",
        "syntax": "onmessageerror = function() { ... };",
        "type": "Web Workers"
    },
    "DedicatedWorkerGlobalScope.postMessage": {
        "descr": "The postMessage() method of the DedicatedWorkerGlobalScope interface sends a message to the main thread that spawned it. This accepts a single parameter, which is the data to send to the worker. The data may be any value or JavaScript object handled by the structured clone algorithm, which includes cyclical references.",
        "name": "DedicatedWorkerGlobalScope.postMessage",
        "params": [
            {
                "descr": "The object to deliver to the main thread; this will be in the data field in the event delivered to the Worker.onmessage handler. ",
                "name": "aMessage"
            },
            {
                "descr": "An optional array of Transferable objects to transfer ownership of. ",
                "name": "transferList Optional"
            }
        ],
        "path": "dom/dedicatedworkerglobalscope/postmessage",
        "syntax": "postMessage(aMessage, transferList);",
        "type": "Web Workers"
    },
    "Default parameters": {
        "descr": "Default function parameters allow named parameters to be initialized with default values if no value or undefined is passed.",
        "name": "Default parameters",
        "params": [],
        "path": "javascript/functions/default_parameters",
        "syntax": "function [name]([param1[ = defaultValue1 ][, ..., paramN[ = defaultValueN ]]]) { statements }",
        "type": "Function"
    },
    "DelayNode.constructor": {
        "descr": "Inherits parameters from the AudioNodeOptions dictionary.",
        "name": "DelayNode.constructor",
        "params": [
            {
                "descr": "A reference to an AudioContext or OfflineAudioContext.",
                "name": "context"
            },
            {
                "descr": "An object specifying the delay node options. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/delaynode/delaynode",
        "syntax": "var delayNode = new DelayNode(context);\n or  var delayNode = new DelayNode(context, options);",
        "type": "Audio"
    },
    "DelayNode.delayTime": {
        "descr": "The delayTime property of the DelayNode interface is an a-rate AudioParam representing the amount of delay to apply.",
        "name": "DelayNode.delayTime",
        "params": [],
        "path": "dom/delaynode/delaytime",
        "syntax": "var audioCtx = new AudioContext();\n or  var myDelay = audioCtx.createDelay(5.0);\n or  myDelay.delayTime.value = 3.0;);",
        "type": "Audio"
    },
    "Descendant selector (\"ancestor descendant\"": {
        "descr": "A descendant of an element could be a child, grandchild, great-grandchild, and so on, of that element.",
        "name": "Descendant selector (\"ancestor descendant\"",
        "params": [],
        "path": "jquery/descendant-selector",
        "syntax": "descendant selector  Description: Selects all elements that are descendants of a given ancestor.   version added: 1.0jQuery( \"ancestor descendant\" ) ancestor: Any valid selector.",
        "type": "Selectors"
    },
    "Destructuring assignment": {
        "descr": "The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.",
        "name": "Destructuring assignment",
        "params": [],
        "path": "javascript/operators/destructuring_assignment",
        "syntax": "var a, b, rest; [a, b] = [10, 20]; console.log(a);\n or  // 10 console.log(b);\n or  // 20 [a, b, ...rest] = [10, 20, 30, 40, 50]; console.log(a);\n or  // 10 console.log(b);\n or  // 20 console.log(rest);\n or  // [30, 40, 50] ({ a, b } = { a: 10, b: 20 });\n or  console.log(a);\n or  // 10 console.log(b);\n or  // 20 // Stage 4(finished) proposal ({a, b, ...rest} = {a: 10, b: 20, c: 30, d: 40});\n or  console.log(a);\n or  // 10 console.log(b);\n or  // 20 console.log(rest);\n or  // {c: 30, d: 40});",
        "type": "Operators"
    },
    "DeviceLightEvent.value": {
        "descr": "The value property provides the current level of the ambient light.",
        "name": "DeviceLightEvent.value",
        "params": [],
        "path": "dom/devicelightevent/value",
        "syntax": "var light = instanceOfDeviceLightEvent.value; Value A positive number representing a light intensity expressed in lux. Specifications    Specification Status Comment     Ambient Light SensorThe definition of 'Ambient Light Events' in that specification. Candidate Recommendation Initial definition    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   No  Yes  62 Disabled    62 Disabled    See bug 1462308. Disabled From version 62: this feature is behind the device.sensors.ambientLight.enabled preference (needs to be set to true). To change preferences in Firefox, visit about:config. 22 — 61   Not supported for MacBook with Touch Bar and Windows 7 (see bug 754199).    No  No  No       Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   No  No  Yes  62 Disabled    62 Disabled    See bug 1462308. Disabled From version 62: this feature is behind the device.sensors.ambientLight.enabled",
        "type": "Ambient Light"
    },
    "DeviceProximityEvent.max": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "DeviceProximityEvent.max",
        "params": [],
        "path": "dom/deviceproximityevent/max",
        "syntax": "var value = instanceOfDeviceProximityEvent.max; Value A positive number indicating the maximum distance, in centimeters (cm), that the device's proximity sensor is able to detect and report.",
        "type": "Events"
    },
    "DeviceProximityEvent.min": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "DeviceProximityEvent.min",
        "params": [],
        "path": "dom/deviceproximityevent/min",
        "syntax": "var value = instanceOfDeviceProximityEvent.min; Value A positive number indicating the minimum distance, in centimeters (cm), the device's proximity sensor can report.",
        "type": "Events"
    },
    "DeviceProximityEvent.value": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "DeviceProximityEvent.value",
        "params": [],
        "path": "dom/deviceproximityevent/value",
        "syntax": "var distance = instanceOfDeviceProximityEvent.value; Value A positive number representing a distance in centimeters (cm) between the device's proximity sensor and the detected object.",
        "type": "Events"
    },
    "Document": {
        "descr": "The Document interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree. The DOM tree includes elements such as <body> and <table>, among many others. It provides functionality globally to the document, like how to obtain the page's URL and create new elements in the document.",
        "name": "Document",
        "params": [
            {
                "descr": "Creates a new Document object.",
                "name": "Document()"
            },
            {
                "descr": "Returns a list of all of the anchors in the document.",
                "name": "Document.anchors Read only"
            },
            {
                "descr": "Returns the <body> or <frameset> node of the current document.",
                "name": "Document.body"
            },
            {
                "descr": "Returns the character set being used by the document.",
                "name": "Document.characterSet Read only"
            },
            {
                "descr": "Indicates whether the document is rendered in quirks or strict mode.",
                "name": "Document.compatMode Read only"
            },
            {
                "descr": "Returns the Content-Type from the MIME Header of the current document.",
                "name": "Document.contentType Read only"
            },
            {
                "descr": "Returns the Document Type Definition (DTD) of the current document.",
                "name": "Document.doctype Read only"
            },
            {
                "descr": "Returns the Element that is a direct child of the document. ",
                "name": "Document.documentElement Read only"
            },
            {
                "descr": "Returnsthe document location as a string.",
                "name": "Document.documentURI Read only"
            },
            {
                "descr": "Returns a list of the embedded <embed> elements within the current document.",
                "name": "Document.embeds Read only"
            },
            {
                "descr": "Returns the FontFaceSet interface of the current document.",
                "name": "Document.fonts"
            },
            {
                "descr": "Returns a list of the <form> elements within the current document.",
                "name": "Document.forms Read only"
            },
            {
                "descr": "Returns the <head> element of the current document.",
                "name": "Document.head Read only"
            },
            {
                "descr": "…",
                "name": "Document.hidden Read only"
            },
            {
                "descr": "Returns a list of the images in the current document.",
                "name": "Document.images Read only"
            },
            {
                "descr": "Returns the DOM implementation associated with the current document.",
                "name": "Document.implementation Read only"
            },
            {
                "descr": "Returns the name of the style sheet set that was last enabled. ",
                "name": "Document.lastStyleSheetSet Read only"
            },
            {
                "descr": "Returns a list of all the hyperlinks in the document.",
                "name": "Document.links Read only"
            },
            {
                "descr": "Returns a Boolean that is true only if this document is synthetic, such as a standalone image, video, audio file, or the like.",
                "name": "Document.mozSyntheticDocument"
            },
            {
                "descr": "The element that's currently in full screen mode for this document.",
                "name": "Document.mozFullScreenElement Read only"
            },
            {
                "descr": "true if calling Element.mozRequestFullscreen() would succeed in the current document.",
                "name": "Document.mozFullScreenEnabled Read only"
            },
            {
                "descr": "Returns a list of the available plugins.",
                "name": "Document.plugins Read only"
            },
            {
                "descr": "Returns the Policy interface which provides a simple API for introspecting the feature policies applied to a specific document.",
                "name": "Document.policy Read only"
            },
            {
                "descr": "Returns the preferred style sheet set as specified by the page author.",
                "name": "Document.preferredStyleSheetSet Read only"
            },
            {
                "descr": "Returns all the <script> elements on the document.",
                "name": "Document.scripts Read only"
            },
            {
                "descr": "Returns a reference to the Element that scrolls the document.",
                "name": "Document.scrollingElement Read only"
            },
            {
                "descr": "Returns which style sheet set is currently in use.",
                "name": "Document.selectedStyleSheetSet"
            },
            {
                "descr": "Returns a list of the style sheet sets available on the document.",
                "name": "Document.styleSheetSets Read only"
            },
            {
                "descr": "…",
                "name": "Document.timeline Read only"
            },
            {
                "descr": "…",
                "name": "Document.undoManager Read only"
            },
            {
                "descr": "Returns a string denoting the visibility state of the document. ",
                "name": "Document.visibilityState Read only"
            },
            {
                "descr": "Returns the number of children of this ParentNode which are elements.",
                "name": "ParentNode.childElementCount Read only"
            },
            {
                "descr": "Returns a live HTMLCollection containing all of the Element objects that are children of this ParentNode, omitting all of its non-element nodes.",
                "name": "ParentNode.children Read only"
            },
            {
                "descr": "Returns the first node which is both a child of this ParentNode and is also an Element, or null if there is none.",
                "name": "ParentNode.firstElementChild Read only"
            },
            {
                "descr": "Returns the last node which is both a child of this ParentNode and is an Element, or null if there is none.",
                "name": "ParentNode.lastElementChild Read only"
            },
            {
                "descr": "Returns a semicolon-separated list of the cookies for that document or sets a single cookie.",
                "name": "Document.cookie"
            },
            {
                "descr": "Returns a reference to the window object.",
                "name": "Document.defaultView Read only"
            },
            {
                "descr": "Gets/sets the ability to edit the whole document.",
                "name": "Document.designMode"
            },
            {
                "descr": "Gets/sets directionality (rtl/ltr) of the document.",
                "name": "Document.dir Read only"
            },
            {
                "descr": "Gets/sets the domain of the current document.",
                "name": "Document.domain"
            },
            {
                "descr": "Returns the date on which the document was last modified.",
                "name": "Document.lastModified Read only"
            },
            {
                "descr": "Returns the URI of the current document.",
                "name": "Document.location Read only"
            },
            {
                "descr": "Returns loading status of the document.",
                "name": "Document.readyState Read only"
            },
            {
                "descr": "Returns the URI of the page that linked to this page.",
                "name": "Document.referrer Read only"
            },
            {
                "descr": "Sets or gets the title of the current document.",
                "name": "Document.title"
            },
            {
                "descr": "Returns the document location as a string.",
                "name": "Document.URL Read only"
            },
            {
                "descr": "Returns the Element within the shadow tree that has focus.",
                "name": "DocumentOrShadowRoot.activeElement Read only"
            },
            {
                "descr": "The element that's currently in full screen mode for this document.",
                "name": "Document.fullscreenElement Read only"
            },
            {
                "descr": "Returns the element set as the target for mouse events while the pointer is locked. ",
                "name": "DocumentOrShadowRoot.pointerLockElement Read only"
            },
            {
                "descr": "Returns a StyleSheetList of CSSStyleSheet objects for stylesheets explicitly linked into, or embedded in a document.",
                "name": "DocumentOrShadowRoot.styleSheets Read only"
            },
            {
                "descr": "Represents the event handling code for the afterscriptexecute event.",
                "name": "Document.onafterscriptexecute"
            },
            {
                "descr": "Represents the event handling code for the beforescriptexecute event.",
                "name": "Document.onbeforescriptexecute"
            },
            {
                "descr": "Represents the event handling code for the copy event.",
                "name": "Document.oncopy"
            },
            {
                "descr": "Represents the event handling code for the cut event.",
                "name": "Document.oncut"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the fullscreenchange event is raised.",
                "name": "Document.onfullscreenchange"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the fullscreenerror event is raised.",
                "name": "Document.onfullscreenerror"
            },
            {
                "descr": "Represents the event handling code for the paste event.",
                "name": "Document.onpaste"
            },
            {
                "descr": "Represents the event handling code for the pointerlockchange event.",
                "name": "Document.onpointerlockchange"
            },
            {
                "descr": "Represents the event handling code for the pointerlockerror event.",
                "name": "Document.onpointerlockerror"
            },
            {
                "descr": "Represents the event handling code for the readystatechange event.",
                "name": "Document.onreadystatechange"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the selectionchange event is raised.",
                "name": "Document.onselectionchange"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the visibilitychange event is raised.",
                "name": "Document.onvisibilitychange"
            },
            {
                "descr": "Represents the event handling code for the wheel event.",
                "name": "Document.onwheel"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the abort event is raised.",
                "name": "GlobalEventHandlers.onabort"
            },
            {
                "descr": "An EventHandler called when an animationcancel event is sent, indicating that a running CSS animation has been canceled.",
                "name": "GlobalEventHandlers.onanimationcancel"
            },
            {
                "descr": "An EventHandler called when an animationend event is sent, indicating that a CSS animation has stopped playing.",
                "name": "GlobalEventHandlers.onanimationend"
            },
            {
                "descr": "An EventHandler called when an animationiteration event has been sent, indicating that a CSS animation has begun playing a new iteration of the animation sequence.",
                "name": "GlobalEventHandlers.onanimationiteration"
            },
            {
                "descr": "An EventHandler called when an animationstart event is sent, indicating that a CSS animation has started playing.",
                "name": "GlobalEventHandlers.onanimationstart"
            },
            {
                "descr": "An EventHandler called when an auxclick event is sent, indicating that a non-primary button has been pressed on an input device (e.g. ",
                "name": "GlobalEventHandlers.onauxclick"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the blur event is raised.",
                "name": "GlobalEventHandlers.onblur"
            },
            {
                "descr": "Is an OnErrorEventHandler representing the code to be called when the error event is raised.",
                "name": "GlobalEventHandlers.onerror"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the focus event is raised.",
                "name": "GlobalEventHandlers.onfocus"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the cancel event is raised.",
                "name": "GlobalEventHandlers.oncancel"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the canplay event is raised.",
                "name": "GlobalEventHandlers.oncanplay"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the canplaythrough event is raised.",
                "name": "GlobalEventHandlers.oncanplaythrough"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the change event is raised.",
                "name": "GlobalEventHandlers.onchange"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the click event is raised.",
                "name": "GlobalEventHandlers.onclick"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the close event is raised.",
                "name": "GlobalEventHandlers.onclose"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the contextmenu event is raised.",
                "name": "GlobalEventHandlers.oncontextmenu"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the cuechange event is raised.",
                "name": "GlobalEventHandlers.oncuechange"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the dblclick event is raised.",
                "name": "GlobalEventHandlers.ondblclick"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the drag event is raised.",
                "name": "GlobalEventHandlers.ondrag"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the dragend event is raised.",
                "name": "GlobalEventHandlers.ondragend"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the dragenter event is raised.",
                "name": "GlobalEventHandlers.ondragenter"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the dragexit event is raised.",
                "name": "GlobalEventHandlers.ondragexit"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the dragleave event is raised.",
                "name": "GlobalEventHandlers.ondragleave"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the dragover event is raised.",
                "name": "GlobalEventHandlers.ondragover"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the dragstart event is raised.",
                "name": "GlobalEventHandlers.ondragstart"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the drop event is raised.",
                "name": "GlobalEventHandlers.ondrop"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the durationchange event is raised.",
                "name": "GlobalEventHandlers.ondurationchange"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the emptied event is raised.",
                "name": "GlobalEventHandlers.onemptied"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the ended event is raised.",
                "name": "GlobalEventHandlers.onended"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the gotpointercapture event type is raised.",
                "name": "GlobalEventHandlers.ongotpointercapture"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the input event is raised.",
                "name": "GlobalEventHandlers.oninput"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the invalid event is raised.",
                "name": "GlobalEventHandlers.oninvalid"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the keydown event is raised.",
                "name": "GlobalEventHandlers.onkeydown"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the keypress event is raised.",
                "name": "GlobalEventHandlers.onkeypress"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the keyup event is raised.",
                "name": "GlobalEventHandlers.onkeyup"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the load event is raised.",
                "name": "GlobalEventHandlers.onload"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the loadeddata event is raised.",
                "name": "GlobalEventHandlers.onloadeddata"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the loadedmetadata event is raised.",
                "name": "GlobalEventHandlers.onloadedmetadata"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the loadend event is raised (when progress has stopped on the loading of a resource.)",
                "name": "GlobalEventHandlers.onloadend"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the loadstart event is raised (when progress has begun on the loading of a resource.)",
                "name": "GlobalEventHandlers.onloadstart"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the lostpointercapture event type is raised.",
                "name": "GlobalEventHandlers.onlostpointercapture"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the mousedown event is raised.",
                "name": "GlobalEventHandlers.onmousedown"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the mouseenter event is raised.",
                "name": "GlobalEventHandlers.onmouseenter"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the mouseleave event is raised.",
                "name": "GlobalEventHandlers.onmouseleave"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the mousemove event is raised.",
                "name": "GlobalEventHandlers.onmousemove"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the mouseout event is raised.",
                "name": "GlobalEventHandlers.onmouseout"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the mouseover event is raised.",
                "name": "GlobalEventHandlers.onmouseover"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the mouseup event is raised.",
                "name": "GlobalEventHandlers.onmouseup"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the mousewheel event is raised. ",
                "name": "GlobalEventHandlers.onmousewheel"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the wheel event is raised.",
                "name": "GlobalEventHandlers.onwheel"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the pause event is raised.",
                "name": "GlobalEventHandlers.onpause"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the play event is raised.",
                "name": "GlobalEventHandlers.onplay"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the playing event is raised.",
                "name": "GlobalEventHandlers.onplaying"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the pointerdown event is raised.",
                "name": "GlobalEventHandlers.onpointerdown"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the pointermove event is raised.",
                "name": "GlobalEventHandlers.onpointermove"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the pointerup event is raised.",
                "name": "GlobalEventHandlers.onpointerup"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the pointercancel event is raised.",
                "name": "GlobalEventHandlers.onpointercancel"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the pointerover event is raised.",
                "name": "GlobalEventHandlers.onpointerover"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the pointerout event is raised.",
                "name": "GlobalEventHandlers.onpointerout"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the pointerevent event is raised.",
                "name": "GlobalEventHandlers.onpointerenter"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the pointerleave event is raised.",
                "name": "GlobalEventHandlers.onpointerleave"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the pointerlockchange event is raised.",
                "name": "GlobalEventHandlers.onpointerlockchange"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the pointerlockerror event is raised.",
                "name": "GlobalEventHandlers.onpointerlockerror"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the progress event is raised.",
                "name": "GlobalEventHandlers.onprogress"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the ratechange event is raised.",
                "name": "GlobalEventHandlers.onratechange"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the reset event is raised.",
                "name": "GlobalEventHandlers.onreset"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the resize event is raised.",
                "name": "GlobalEventHandlers.onresize"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the scroll event is raised.",
                "name": "GlobalEventHandlers.onscroll"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the seeked event is raised.",
                "name": "GlobalEventHandlers.onseeked"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the seeking event is raised.",
                "name": "GlobalEventHandlers.onseeking"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the select event is raised.",
                "name": "GlobalEventHandlers.onselect"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the selectionchange event is raised, i.e. ",
                "name": "GlobalEventHandlers.onselectstart"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the selectionchange event is raised, i.e. ",
                "name": "GlobalEventHandlers.onselectionchange"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the show event is raised.",
                "name": "GlobalEventHandlers.onshow"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the sort event is raised.",
                "name": "GlobalEventHandlers.onsort"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the stalled event is raised.",
                "name": "GlobalEventHandlers.onstalled"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the submit event is raised.",
                "name": "GlobalEventHandlers.onsubmit"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the suspend event is raised.",
                "name": "GlobalEventHandlers.onsuspend"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the timeupdate event is raised.",
                "name": "GlobalEventHandlers.ontimeupdate"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the volumechange event is raised.",
                "name": "GlobalEventHandlers.onvolumechange"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the touchcancel event is raised.",
                "name": "GlobalEventHandlers.ontouchcancel"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the touchend event is raised.",
                "name": "GlobalEventHandlers.ontouchend"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the touchmove event is raised.",
                "name": "GlobalEventHandlers.ontouchmove"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the touchstart event is raised.",
                "name": "GlobalEventHandlers.ontouchstart"
            },
            {
                "descr": "An EventHandler called when a transitioncancel event is sent, indicating that a CSS transition has been cancelled.",
                "name": "GlobalEventHandlers.ontransitioncancel"
            },
            {
                "descr": "An EventHandler called when a transitionend event is sent, indicating that a CSS transition has finished playing.",
                "name": "GlobalEventHandlers.ontransitionend"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the waiting event is raised.",
                "name": "GlobalEventHandlers.onwaiting"
            },
            {
                "descr": "Returns or sets the color of active links in the document body.",
                "name": "Document.alinkColor"
            },
            {
                "descr": "Provides access to all elements in the document. ",
                "name": "Document.all"
            },
            {
                "descr": "Returns an ordered list of the applets within a document.",
                "name": "Document.applets Read only"
            },
            {
                "descr": "Used with Document.load to indicate an asynchronous request.",
                "name": "Document.async"
            },
            {
                "descr": "Gets/sets the background color of the current document.",
                "name": "Document.bgColor"
            },
            {
                "descr": "Alias of Document.characterSet. ",
                "name": "Document.charset Read only"
            },
            {
                "descr": "Should return a DOMConfiguration object.",
                "name": "Document.domConfig"
            },
            {
                "descr": "Gets/sets the foreground color, or text color, of the current document.",
                "name": "document.fgColor"
            },
            {
                "descr": "true when the document is in full-screen mode.",
                "name": "Document.fullscreen"
            },
            {
                "descr": "Gets/sets the height of the current document.",
                "name": "Document.height"
            },
            {
                "descr": "Alias of Document.characterSet. ",
                "name": "Document.inputEncoding Read only"
            },
            {
                "descr": "Gets/sets the color of hyperlinks in the document.",
                "name": "Document.linkColor"
            },
            {
                "descr": "Gets/sets the color of visited hyperlinks.",
                "name": "Document.vlinkColor"
            },
            {
                "descr": "Returns the width of the current document.",
                "name": "Document.width"
            },
            {
                "descr": "Returns the encoding as determined by the XML declaration.",
                "name": "Document.xmlEncoding"
            },
            {
                "descr": "Returns true if the XML declaration specifies the document to be standalone (e.g., An external part of the DTD affects the document's content), else false.",
                "name": "Document.xmlStandalone Obsolete since Gecko 10.0"
            },
            {
                "descr": "Returns the version number as specified in the XML declaration or \"1.0\" if the declaration is absent.",
                "name": "Document.xmlVersion Obsolete since Gecko 10.0"
            },
            {
                "descr": "Adopt node from an external document.",
                "name": "Document.adoptNode()"
            },
            {
                "descr": "See Window.captureEvents.",
                "name": "Document.captureEvents()"
            },
            {
                "descr": "Gets a Range object for the document fragment under the specified coordinates.",
                "name": "Document.caretRangeFromPoint()"
            },
            {
                "descr": "Creates a new Attr object and returns it.",
                "name": "Document.createAttribute()"
            },
            {
                "descr": "Creates a new attribute node in a given namespace and returns it.",
                "name": "Document.createAttributeNS()"
            },
            {
                "descr": "Creates a new CDATA node and returns it.",
                "name": "Document.createCDATASection()"
            },
            {
                "descr": "Creates a new comment node and returns it.",
                "name": "Document.createComment()"
            },
            {
                "descr": "Creates a new document fragment.",
                "name": "Document.createDocumentFragment()"
            },
            {
                "descr": "Creates a new element with the given tag name.",
                "name": "Document.createElement()"
            },
            {
                "descr": "Creates a new element with the given tag name and namespace URI.",
                "name": "Document.createElementNS()"
            },
            {
                "descr": "Creates a new entity reference object and returns it.",
                "name": "Document.createEntityReference()"
            },
            {
                "descr": "Creates an event object.",
                "name": "Document.createEvent()"
            },
            {
                "descr": "Creates a NodeIterator object.",
                "name": "Document.createNodeIterator()"
            },
            {
                "descr": "Creates a new ProcessingInstruction object.",
                "name": "Document.createProcessingInstruction()"
            },
            {
                "descr": "Creates a Range object.",
                "name": "Document.createRange()"
            },
            {
                "descr": "Creates a text node.",
                "name": "Document.createTextNode()"
            },
            {
                "descr": "Creates a Touch object.",
                "name": "Document.createTouch()"
            },
            {
                "descr": "Creates a TouchList object.",
                "name": "Document.createTouchList()"
            },
            {
                "descr": "Creates a TreeWalker object.",
                "name": "Document.createTreeWalker()"
            },
            {
                "descr": "Enables the style sheets for the specified style sheet set.",
                "name": "Document.enableStyleSheetsForSet()"
            },
            {
                "descr": "Release the pointer lock.",
                "name": "Document.exitPointerLock()"
            },
            {
                "descr": "Returns an array of all Animation objects currently in effect, whose target elements are descendants of the document.",
                "name": "Document.getAnimations()"
            },
            {
                "descr": "Returns a list of elements with the given class name.",
                "name": "Document.getElementsByClassName()"
            },
            {
                "descr": "Returns a list of elements with the given tag name.",
                "name": "Document.getElementsByTagName()"
            },
            {
                "descr": "Returns a list of elements with the given tag name and namespace.",
                "name": "Document.getElementsByTagNameNS()"
            },
            {
                "descr": "Returns a Promise that resolves with a boolean value indicating whether the document has access to its first-party storage.",
                "name": "Document.hasStorageAccess()"
            },
            {
                "descr": "Returns a clone of a node from an external document.",
                "name": "Document.importNode()"
            },
            {
                "descr": "Replaces entities, normalizes text nodes, etc.",
                "name": "Document.normalizeDocument()"
            },
            {
                "descr": "Releases the current mouse capture if it's on an element in this document.",
                "name": "Document.releaseCapture()"
            },
            {
                "descr": "See Window.releaseEvents().",
                "name": "Document.releaseEvents()"
            },
            {
                "descr": "Returns a Promise that resolves if the access to first-party storage was granted, and rejects if access was denied.",
                "name": "Document.requestStorageAccess()"
            },
            {
                "descr": "See Window.routeEvent().",
                "name": "Document.routeEvent() Obsolete since Gecko 24"
            },
            {
                "descr": "Allows you to change the element being used as the background image for a specified element ID.",
                "name": "Document.mozSetImageElement()"
            },
            {
                "descr": "Returns an object reference to the identified element.",
                "name": "document.getElementById(String id)"
            },
            {
                "descr": "Returns the first Element node within the document, in document order, that matches the specified selectors.",
                "name": "document.querySelector(String selector)"
            },
            {
                "descr": "Returns a list of all the Element nodes within the document that match the specified selectors.",
                "name": "document.querySelectorAll(String selector)"
            },
            {
                "descr": "Compiles an XPathExpression which can then be used for (repeated) evaluations.",
                "name": "document.createExpression(String expression, XPathNSResolver resolver)"
            },
            {
                "descr": "Creates an XPathNSResolver object.",
                "name": "document.createNSResolver(Node resolver)"
            },
            {
                "descr": "Evaluates an XPath expression.",
                "name": "document.evaluate(String expression, Node contextNode, XPathNSResolver resolver, Number type, Object result)"
            },
            {
                "descr": "In majority of modern browsers, including recent versions of Firefox and Internet Explorer, this method does nothing.",
                "name": "document.clear()"
            },
            {
                "descr": "Closes a document stream for writing.",
                "name": "document.close()"
            },
            {
                "descr": "On an editable document, executes a formating command.",
                "name": "document.execCommand(String command[, Boolean showUI[, String value]])"
            },
            {
                "descr": "Returns a list of elements with the given name.",
                "name": "document.getElementsByName(String name)"
            },
            {
                "descr": "Returns true if the focus is currently located anywhere inside the specified document.",
                "name": "document.hasFocus()"
            },
            {
                "descr": "Opens a document stream for writing.",
                "name": "document.open()"
            },
            {
                "descr": "Returns true if the formating command can be executed on the current range.",
                "name": "document.queryCommandEnabled(String command)"
            },
            {
                "descr": "Returns true if the formating command is in an indeterminate state on the current range.",
                "name": "document.queryCommandIndeterm(String command)"
            },
            {
                "descr": "Returns true if the formating command has been executed on the current range.",
                "name": "document.queryCommandState(String command)"
            },
            {
                "descr": "Returns true if the formating command is supported on the current range.",
                "name": "document.queryCommandSupported(String command)"
            },
            {
                "descr": "Returns the current value of the current range for a formating command.",
                "name": "document.queryCommandValue(String command)"
            },
            {
                "descr": "Writes text in a document.",
                "name": "document.write(String text)"
            },
            {
                "descr": "Writes a line of text in a document.",
                "name": "document.writeln(String text)"
            },
            {
                "descr": "Returns a Selection object representing the range of text selected by the user, or the current position of the caret.",
                "name": "DocumentOrShadowRoot.getSelection()"
            },
            {
                "descr": "Returns the topmost element at the specified coordinates.",
                "name": "DocumentOrShadowRoot.elementFromPoint()"
            },
            {
                "descr": "Returns an array of all elements at the specified coordinates.",
                "name": "DocumentOrShadowRoot.elementsFromPoint()"
            },
            {
                "descr": "Returns a CaretPosition object containing the DOM node containing the caret, and caret's character offset within that node.",
                "name": "DocumentOrShadowRoot.caretPositionFromPoint()"
            },
            {
                "descr": "Returns the <script> element that is currently executing.",
                "name": "document.currentScript"
            },
            {
                "descr": "(Mozilla add-ons only!) Returns the nsIURI object representing the URI of the document. ",
                "name": "document.documentURIObject"
            },
            {
                "descr": "Returns the node upon which a popup was invoked.",
                "name": "document.popupNode"
            },
            {
                "descr": "Returns the node which is the target of the current tooltip.",
                "name": "document.tooltipNode"
            },
            {
                "descr": "This method never did anything and always threw an exception, so it was removed in Gecko 14.0 (Firefox 14.0 / Thunderbird 14.0 / SeaMonkey 2.11).",
                "name": "document.execCommandShowHelp Obsolete since Gecko 14.0"
            },
            {
                "descr": "Use the Element.getBoundingClientRect() method instead.",
                "name": "document.getBoxObjectFor"
            },
            {
                "descr": "Loads a XUL overlay dynamically. ",
                "name": "document.loadOverlay"
            },
            {
                "descr": "This method never did anything but throw an exception, and was removed in Gecko 14.0 (Firefox 14.0 / Thunderbird 14.0 / SeaMonkey 2.11).",
                "name": "document.queryCommandText Obsolete since Gecko 14.0"
            },
            {
                "descr": "Returns size in bytes of the document. ",
                "name": "document.fileSize*"
            },
            {
                "descr": "As a work-around, document.body.contains() can be used.",
                "name": "document.contains"
            },
            {
                "descr": "Uses the non-standard name: inputEncoding",
                "name": "?"
            },
            {
                "descr": "Uses the non-standard name: charset",
                "name": "?   ?"
            },
            {
                "descr": "Uses the non-standard name: inputEncoding",
                "name": "?"
            },
            {
                "descr": "Uses the non-standard name: charset",
                "name": "?   ?"
            },
            {
                "descr": "Uses the non-standard name: inputEncoding",
                "name": "?"
            },
            {
                "descr": "Uses the non-standard name: charset",
                "name": "?   9"
            },
            {
                "descr": "Uses the non-standard name: inputEncoding",
                "name": "?"
            },
            {
                "descr": "Uses the non-standard name: inputEncoding",
                "name": "?"
            },
            {
                "descr": "Uses the non-standard name: charset",
                "name": "?   ?"
            },
            {
                "descr": "Uses the non-standard name: inputEncoding",
                "name": "?"
            },
            {
                "descr": "Uses the non-standard name: charset",
                "name": "?   ?"
            },
            {
                "descr": "Uses the non-standard name: inputEncoding",
                "name": "?"
            }
        ],
        "path": "dom/document",
        "syntax": "Document.createCDATASection()",
        "type": "CSS"
    },
    "Document Object Model: Introduction": {
        "descr": "This section provides a brief conceptual introduction to the DOM: what it is, how it provides structure for HTML and XML documents, how you can access it, and how this API presents the reference information and examples.",
        "name": "Document Object Model: Introduction",
        "params": [],
        "path": "dom/document_object_model/introduction",
        "syntax": "getElementsByTagName method in the code below must return a list of all the <P> elements in the document: var paragraphs = document.getElementsByTagName(\"P\");\n or  // paragraphs[0] is the first <p> element // paragraphs[1] is the second <p> element, etc. alert(paragraphs[0].nodeName);",
        "type": "DOM"
    },
    "DocumentFragment.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "DocumentFragment.constructor",
        "params": [],
        "path": "dom/documentfragment/documentfragment",
        "syntax": "fragment = new DocumentFragment()",
        "type": "DocumentFragment"
    },
    "DocumentFragment.querySelector": {
        "descr": "The DocumentFragment.querySelector() method returns the first element, or null if no matches are found, within the DocumentFragment (using depth-first pre-order traversal of the document's nodes) that matches the specified group of selectors.",
        "name": "DocumentFragment.querySelector",
        "params": [
            {
                "descr": "Is a DOMString containing one or more CSS selectors separated by commas.",
                "name": "selectors"
            }
        ],
        "path": "dom/documentfragment/queryselector",
        "syntax": "element = documentfragment.querySelector(selectors);",
        "type": "DocumentFragment"
    },
    "DocumentFragment.querySelectorAll": {
        "descr": "The DocumentFragment.querySelectorAll() method returns a NodeList of elements within the DocumentFragment (using depth-first pre-order traversal of the document's nodes) that matches the specified group of selectors.",
        "name": "DocumentFragment.querySelectorAll",
        "params": [
            {
                "descr": "Is a DOMString containing one or more CSS selectors separated by commas.",
                "name": "selectors"
            }
        ],
        "path": "dom/documentfragment/queryselectorall",
        "syntax": "elementList = documentframgment.querySelectorAll(selectors);",
        "type": "DocumentFragment"
    },
    "DocumentOrShadowRoot.activeElement": {
        "descr": "The activeElement read-only property of the Document and ShadowRoot interfaces returns the Element within the DOM or shadow DOM tree that currently has focus. This property is inherited from the DocumentOrShadowRoot mixin.",
        "name": "DocumentOrShadowRoot.activeElement",
        "params": [],
        "path": "dom/documentorshadowroot/activeelement",
        "syntax": "var element = DocumentOrShadowRoot.activeElement Value The Element which currently has focus, <body> or null if there is no focused element. Examples <!DOCTYPE HTML> <html> <head> <script charset=\"utf-8\"> function init() { function onMouseUp(e) { console.log(e);\n or  var outputElement = document.getElementById('output-element');\n or  var outputText = document.getElementById('output-text');\n or  var selectedTextArea = document.activeElement; var selection = selectedTextArea.value.substring( selectedTextArea.selectionStart, selectedTextArea.selectionEnd);\n or  outputElement.innerHTML = selectedTextArea.id; outputText.innerHTML = selection; } document.getElementById(\"ta-example-one\").addEventListener(\"mouseup\", onMouseUp, false);\n or  document.getElementById(\"ta-example-two\").addEventListener(\"mouseup\", onMouseUp, false);\n or  } </script> </head> <body onload=\"init()\"> <div> Select some text from one of the Textareas below: </div> <form id=\"frm-example\" action=\"#\" accept-charset=\"utf-8\"> <textarea name=\"ta-example-one\" id=\"ta-example-one\" rows=\"8\" cols=\"40\"> This is Textarea Example One: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec tincidunt, lorem a porttitor molestie, odio nibh iaculis libero, et accumsan nunc orci eu dui. </textarea> <textarea name=\"ta-example-two\" id=\"ta-example-two\" rows=\"8\" cols=\"40\"> This is Textarea Example Two: Fusce ullamcorper, nisl ac porttitor adipiscing, urna orci egestas libero, ut accumsan orci lacus laoreet diam. Morbi sed euismod diam. </textarea> </form> Active Element Id: <span id=\"output-element\"></span><br> Selected Text: <span id=\"output-text\"></span> </body> </html>);",
        "type": "Shadow DOM"
    },
    "DocumentOrShadowRoot.caretPositionFromPoint": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "DocumentOrShadowRoot.caretPositionFromPoint",
        "params": [
            {
                "descr": "The horizontal coordinate of a point.",
                "name": "x"
            },
            {
                "descr": "The vertical coordinate of a point.",
                "name": "y"
            }
        ],
        "path": "dom/documentorshadowroot/caretpositionfrompoint",
        "syntax": "var caretPosition = document.caretPositionFromPoint(float x, float y);",
        "type": "CSS"
    },
    "DocumentOrShadowRoot.elementFromPoint": {
        "descr": "The elementFromPoint() method—available on both the Document and ShadowRoot objects—returns the topmost Element at the specified coordinates (relative to the viewport).",
        "name": "DocumentOrShadowRoot.elementFromPoint",
        "params": [
            {
                "descr": "The horizontal coordinate of a point, relative to the left edge of the current viewport.",
                "name": "x"
            },
            {
                "descr": "The vertical coordinate of a point, relative to the top edge of the current viewport.",
                "name": "y"
            }
        ],
        "path": "dom/documentorshadowroot/elementfrompoint",
        "syntax": "var element = document.elementFromPoint(x, y);",
        "type": "Shadow DOM"
    },
    "DocumentOrShadowRoot.elementsFromPoint": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "DocumentOrShadowRoot.elementsFromPoint",
        "params": [
            {
                "descr": "The horizontal coordinate of a point.",
                "name": "x"
            },
            {
                "descr": "The vertical coordinate of a point.",
                "name": "y"
            }
        ],
        "path": "dom/documentorshadowroot/elementsfrompoint",
        "syntax": "var elements = document.elementsFromPoint(x, y);",
        "type": "CSS"
    },
    "DocumentOrShadowRoot.fullscreenElement": {
        "descr": "The Document.fullscreenElement read-only property returns the Element that is currently being presented in full-screen mode in this document, or null if full-screen mode is not currently in use.",
        "name": "DocumentOrShadowRoot.fullscreenElement",
        "params": [],
        "path": "dom/documentorshadowroot/fullscreenelement",
        "syntax": "var element = document.fullscreenElement; Return value The Element object that's currently in full-screen mode; if full-screen mode isn't currently in use by the document, the returned value is null. Example This example presents a function, isVideoInFullscreen()",
        "type": "Fullscreen"
    },
    "DocumentOrShadowRoot.getSelection": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "DocumentOrShadowRoot.getSelection",
        "params": [],
        "path": "dom/documentorshadowroot/getselection",
        "syntax": "var selection = documentOrShadowRootInstance.getSelection()",
        "type": "Shadow DOM"
    },
    "DocumentOrShadowRoot.pointerLockElement": {
        "descr": "The pointerLockElement property provides the element set as the target for mouse events while the pointer is locked. It is null if lock is pending, pointer is unlocked, or the target is in another document.",
        "name": "DocumentOrShadowRoot.pointerLockElement",
        "params": [],
        "path": "dom/documentorshadowroot/pointerlockelement",
        "syntax": "var element = document.pointerLockElement;  Return value An Element or null. Specifications    Specification Status Comment   Pointer LockThe definition of 'pointerLockElement' in that specification. Candidate Recommendation Extend the Document interface    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   53  Yes  Yes  Yes  40  Yes       Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   53  53  Yes  Yes  40  Yes  6.0    See also  Document.exitPointerLock()",
        "type": "Miscellaneous"
    },
    "DocumentOrShadowRoot.styleSheets": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "DocumentOrShadowRoot.styleSheets",
        "params": [],
        "path": "dom/documentorshadowroot/stylesheets",
        "syntax": "var styleSheetList = document.styleSheets;  Returns The returned object is a StyleSheetList of CSSStyleSheet objects. Examples function getStyleSheet(unique_title) { for(var i=0; i<document.styleSheets.length; i++) { var sheet = document.styleSheets[i]; if(sheet.title == unique_title) { return sheet; } } }",
        "type": "Shadow DOM"
    },
    "DocumentTimeline.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "DocumentTimeline.constructor",
        "params": [
            {
                "descr": "An object specifying options for the new timeline. ",
                "name": "options"
            }
        ],
        "path": "dom/documenttimeline/documenttimeline",
        "syntax": "var sharedTimeline = new DocumentTimeline(options);",
        "type": "Animation"
    },
    "DragEvent.constructor": {
        "descr": "This constructor is used to create a synthetic DragEvent object.",
        "name": "DragEvent.constructor",
        "params": [
            {
                "descr": "Is a DOMString representing the name of the event (see DragEvent event types).",
                "name": "type"
            },
            {
                "descr": "Is a DragEventInit dictionary, having the following fields:   \"dataTransfer\", optional and defaults to \"null\". ",
                "name": "DragEventInitOptional"
            }
        ],
        "path": "dom/dragevent/dragevent",
        "syntax": "event = new DragEvent(type, DragEventInit);",
        "type": "Drag & Drop"
    },
    "DragEvent.dataTransfer": {
        "descr": "The DragEvent.dataTransfer property holds the drag operation's data (as a DataTransfer object).",
        "name": "DragEvent.dataTransfer",
        "params": [
            {
                "descr": "A DataTransfer object which contains the drag event's data.",
                "name": "data"
            }
        ],
        "path": "dom/dragevent/datatransfer",
        "syntax": "var data = dragEvent.dataTransfer;  Return value  data A DataTransfer object which contains the drag event's data.  Example This example illustrates accessing the drag and drop data within the dragend event handler. function process_data(d) { // Process the data ... } dragTarget.addEventListener(\"dragend\", function(ev) { // Call the drag and drop data processor if (ev.dataTransfer != null) process_data(ev.dataTransfer);\n or  }, false);",
        "type": "Drag & Drop"
    },
    "DynamicsCompressorNode": {
        "descr": "The DynamicsCompressorNode interface provides a compression effect, which lowers the volume of the loudest parts of the signal in order to help prevent clipping and distortion that can occur when multiple sounds are played and multiplexed together at once. This is often used in musical production and game audio. DynamicsCompressorNode is an AudioNode that has exactly one input and one output; it is created using the AudioContext.createDynamicsCompressor() method.",
        "name": "DynamicsCompressorNode",
        "params": [
            {
                "descr": "Creates a new instance of an DynamicsCompressorNode object.",
                "name": "DynamicsCompressorNode()"
            },
            {
                "descr": "Is a k-rate AudioParam representing the decibel value above which the compression will start taking effect.",
                "name": "DynamicsCompressorNode.threshold Read only"
            },
            {
                "descr": "Is a k-rate AudioParam containing a decibel value representing the range above the threshold where the curve smoothly transitions to the compressed portion.",
                "name": "DynamicsCompressorNode.knee Read only"
            },
            {
                "descr": "Is a k-rate AudioParam representing the amount of change, in dB, needed in the input for a 1 dB change in the output.",
                "name": "DynamicsCompressorNode.ratio Read only"
            },
            {
                "descr": "Is a float representing the amount of gain reduction currently applied by the compressor to the signal.",
                "name": "DynamicsCompressorNode.reduction Read only"
            },
            {
                "descr": "Is a k-rate AudioParam representing the amount of time, in seconds, required to reduce the gain by 10 dB.",
                "name": "DynamicsCompressorNode.attack Read only"
            },
            {
                "descr": "Is a k-rate AudioParam representing the amount of time, in seconds, required to increase the gain by 10 dB.",
                "name": "DynamicsCompressorNode.release Read only"
            }
        ],
        "path": "dom/dynamicscompressornode",
        "syntax": "Working Draft      Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari     Basic support  14  Yes  25  No  15  6   DynamicsCompressorNode()",
        "type": "Audio"
    },
    "DynamicsCompressorNode.attack": {
        "descr": "The attack property of the DynamicsCompressorNode interface is a k-rate AudioParam representing the amount of time, in seconds, required to reduce the gain by 10 dB. It defines how quickly the signal is adapted when its volume is increased.",
        "name": "DynamicsCompressorNode.attack",
        "params": [],
        "path": "dom/dynamicscompressornode/attack",
        "syntax": "var audioCtx = new AudioContext();\n or  var compressor = audioCtx.createDynamicsCompressor();\n or  compressor.attack.value = 0;);",
        "type": "Audio"
    },
    "DynamicsCompressorNode.constructor": {
        "descr": "The DynamicsCompressorNode() constructor creates a new DynamicsCompressorNode object which provides a compression effect, which lowers the volume of the loudest parts of the signal, in order to help prevent clipping and distortion. That can occur when multiple sounds are played and multiplexed together at once.",
        "name": "DynamicsCompressorNode.constructor",
        "params": [
            {
                "descr": "A reference to an AudioContext.",
                "name": "context"
            },
            {
                "descr": "Options are as follows:   attack: The amount of time (in seconds) to reduce the gain by 10dB. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/dynamicscompressornode/dynamicscompressornode",
        "syntax": "var dynamicsCompressorNode = new DynamicsCompressorNode(context, options)",
        "type": "Audio"
    },
    "DynamicsCompressorNode.knee": {
        "descr": "The knee property of the DynamicsCompressorNode interface is a k-rate AudioParam containing a decibel value representing the range above the threshold where the curve smoothly transitions to the compressed portion.",
        "name": "DynamicsCompressorNode.knee",
        "params": [],
        "path": "dom/dynamicscompressornode/knee",
        "syntax": "var audioCtx = new AudioContext();\n or  var compressor = audioCtx.createDynamicsCompressor();\n or  compressor.knee.value = 40;);",
        "type": "Audio"
    },
    "DynamicsCompressorNode.ratio": {
        "descr": "The ratio property of the DynamicsCompressorNode interface Is a k-rate AudioParam representing the amount of change, in dB, needed in the input for a 1 dB change in the output.",
        "name": "DynamicsCompressorNode.ratio",
        "params": [],
        "path": "dom/dynamicscompressornode/ratio",
        "syntax": "var audioCtx = new AudioContext();\n or  var compressor = audioCtx.createDynamicsCompressor();\n or  compressor.ratio.value = 12;);",
        "type": "Audio"
    },
    "DynamicsCompressorNode.reduction": {
        "descr": "The reduction read-only property of the DynamicsCompressorNode interface is a float representing the amount of gain reduction currently applied by the compressor to the signal.",
        "name": "DynamicsCompressorNode.reduction",
        "params": [],
        "path": "dom/dynamicscompressornode/reduction",
        "syntax": "var myReduction = compressorNodeInstance.reduction;  Value A float. Example var audioCtx = new AudioContext();\n or  var compressor = audioCtx.createDynamicsCompressor();\n or  var myReduction = compressor.reduction;);",
        "type": "Audio"
    },
    "DynamicsCompressorNode.release": {
        "descr": "The release property of the DynamicsCompressorNode interface Is a k-rate AudioParam representing the amount of time, in seconds, required to increase the gain by 10 dB. It defines how quick the signal is adapted when its volume is reduced.",
        "name": "DynamicsCompressorNode.release",
        "params": [],
        "path": "dom/dynamicscompressornode/release",
        "syntax": "var audioCtx = new AudioContext();\n or  var compressor = audioCtx.createDynamicsCompressor();\n or  compressor.release.value = 0.25;);",
        "type": "Audio"
    },
    "DynamicsCompressorNode.threshold": {
        "descr": "The threshold property of the DynamicsCompressorNode interface is a k-rate AudioParam representing the decibel value above which the compression will start taking effect.",
        "name": "DynamicsCompressorNode.threshold",
        "params": [],
        "path": "dom/dynamicscompressornode/threshold",
        "syntax": "var audioCtx = new AudioContext();\n or  var compressor = audioCtx.createDynamicsCompressor();\n or  compressor.threshold.value = -50;);",
        "type": "Audio"
    },
    "EffectTiming.delay": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "EffectTiming.delay",
        "params": [],
        "path": "dom/effecttiming/delay",
        "syntax": "var timingProperties = { delay: delayInMilliseconds }; timingProperties.delay = delayInMilliseconds;  Value A number specifying the delay, in milliseconds, from the start of the animation's play cycle to the beginning of its active interval (the time index at which actual animation begins). Defaults to 0.",
        "type": "Performance"
    },
    "EffectTiming.direction": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "EffectTiming.direction",
        "params": [
            {
                "descr": "The animation runs forwards, from beginning to end, in the way we experience the flow of time.",
                "name": "\"normal\""
            },
            {
                "descr": "The animation runs backwards, or \"rewinds.\"",
                "name": "\"reverse\""
            },
            {
                "descr": "The animation switches direction after each iteration, going forward through the animation sequence the first iteration, then backward through the sequence the second iteration, and so forth.",
                "name": "\"alternate\""
            },
            {
                "descr": "Similar to \"alternate\", except the animation playback starts by going from the end of the animation sequence toward the beginning the first iteration, then goes forward during the second, and so forth.",
                "name": "\"alternate-reverse\""
            }
        ],
        "path": "dom/effecttiming/direction",
        "syntax": "var timingProperties = { direction: \"normal\" | \"reverse\" | \"alternate\" | \"alternate-reverse\" }; timingProperties.direction = \"normal\" | \"reverse\" | \"alternate\" | \"alternate-reverse\";  Value A DOMString which specifies the direction in which the animation should play as well as what to do when the playback reaches the end of the animation sequence in the current direction. It can take one of the following values, with the default being \"normal\":  \"normal\" The animation runs forwards, from beginning to end, in the way we experience the flow of time.  \"reverse\" The animation runs backwards, or \"rewinds.\" \"alternate\" The animation switches direction after each iteration, going forward through the animation sequence the first iteration, then backward through the sequence the second iteration, and so forth. \"alternate-reverse\" Similar to \"alternate\", except the animation playback starts by going from the end of the animation sequence toward the beginning the first iteration, then goes forward during the second, and so forth.  Examples In the Forgotten Key example, Alice waves her arm up and down by passing her an alternate value for her direction property: // Get Alice's arm, and wave it up and down document.getElementById(\"alice_arm\").animate([ { transform: 'rotate(10deg)' }, { transform: 'rotate(-40deg)' } ], { easing: 'steps(2, end)', iterations: Infinity, direction: 'alternate', duration: 600 });",
        "type": "Performance"
    },
    "EffectTiming.duration": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "EffectTiming.duration",
        "params": [
            {
                "descr": "The specified value is either a string other than \"auto\", a number less than zero, NaN, or some other type of object entirely.",
                "name": "TypeError"
            }
        ],
        "path": "dom/effecttiming/duration",
        "syntax": "var timingProperties = { duration: durationInMilliseconds | \"auto\" }; timingProperties.duration = durationInMilliseconds | \"auto\";  Value The number of milliseconds long a single beginning-to-end iteration of the animation should take. The default is \"auto\". This value must not be negative; otherwise, it can have any value (including positive infinity).",
        "type": "Performance"
    },
    "EffectTiming.easing": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "EffectTiming.easing",
        "params": [
            {
                "descr": "A constant rate of change, neither accelerating nor deccelerating.",
                "name": "linear"
            },
            {
                "descr": "Specifies a cubic Bézier timing function. ",
                "name": "cubic-bezier(<number>, <number>, <number>, <number>)"
            },
            {
                "descr": "A decelerated rate of change, going from fast to slow. ",
                "name": "ease"
            },
            {
                "descr": "An accelerated rate of change, going from slow to fast. ",
                "name": "ease-in"
            },
            {
                "descr": "Another decelerated rate of change, going from fast to slow. ",
                "name": "ease-out"
            },
            {
                "descr": "This rate of change speeds up in the middle. ",
                "name": "ease-in-out"
            },
            {
                "descr": "Specifies a frames timing function, which breaks the animation down into a number of equal time intervals but also displays the start (0%) and end (100%) states for an equal amount of time to the other intervals. The browser flips to a different static frame when each interval is reached, rather than animating smoothly. See GitHub for a simple example that illustrates the difference between steps() and frames().",
                "name": "frames(<integer>)"
            },
            {
                "descr": "Specifies a step timing function, which breaks the animation down into a number of equal time intervals. ",
                "name": "steps(<integer>[, [ start | end ] ]?)"
            },
            {
                "descr": "Equivalent to steps(1, start)",
                "name": "step-start"
            },
            {
                "descr": "Equivalent to steps(1, end).",
                "name": "step-end"
            }
        ],
        "path": "dom/effecttiming/easing",
        "syntax": "var timingProperties = { easing: <single-transition-timing-function> } timingProperties.easing = <single-transition-timing-function>  Value A string defining the timing function to use for easing transitions during the animation process. Accepts several pre-defined DOMString values, a steps()",
        "type": "Performance"
    },
    "EffectTiming.endDelay": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "EffectTiming.endDelay",
        "params": [],
        "path": "dom/effecttiming/enddelay",
        "syntax": "var timingProperties = { endDelay: delayInMilliseconds } timingProperties.endDelay = delayInMilliseconds;  Value A number representing the end delay, specified in milliseconds. The default value is 0. Specifications    Specification Status Comment   Web AnimationsThe definition of 'endDelay' in that specification. Working Draft Editor's draft.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   Yes  ?   63  No  Yes  No       Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   ?   ?   ?   63  No  No  ?     See also  Web Animations API  Element.animate()",
        "type": "Performance"
    },
    "EffectTiming.fill": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "EffectTiming.fill",
        "params": [
            {
                "descr": "The animation's effects are only visible while the animation is iterating or its playhead is positioned over an iteration. ",
                "name": "\"none\""
            },
            {
                "descr": "The affected element will continue to be rendered in the state of the final animation framecontinue to be applied to the after the animation has completed playing, in spite of and during any endDelay or when its playState is finished.",
                "name": "\"forwards\""
            },
            {
                "descr": "The animation's effects should be reflected by the element(s) state prior to playing, in spite of and during any delay and pending playState.",
                "name": "\"backwards\""
            },
            {
                "descr": "Combining the effects of both forwards and backwards: The animation's effects should be reflected by the element(s) state prior to playing and retained after the animation has completed playing, in spite of and during any endDelay, delay and/or pending or finished playState.",
                "name": "\"both\""
            },
            {
                "descr": "If the animation effect the fill mode is being applied to is a keyframe effect (KeyframeEffect or KeyframeEffectReadOnly), \"auto\" is equivalent to \"none\". ",
                "name": "\"auto\""
            }
        ],
        "path": "dom/effecttiming/fill",
        "syntax": "var timingProperties = { fill: \"none\" | \"forwards\" | \"backwards\" | \"both\" | \"auto\" }  Value A DOMString indicating the fill type to use in order to properly render an affected element when outside the animation's active interval (that is, when it's not actively animating). The default is \"auto\"",
        "type": "Performance"
    },
    "EffectTiming.iterationStart": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "EffectTiming.iterationStart",
        "params": [],
        "path": "dom/effecttiming/iterationstart",
        "syntax": "var timingProperties = { iterationStart = iterationNumber }; timingProperties.iterationStart = iterationNumber;  Value A floating-point value whose value is at least 0 and is not +Infinity, indicating the offset into the number of iterations the animation sequence is to run at which to start animating. iterationStart represents the iteration index at which the animation effect begins as well as its progress through that iteration. Usually you'll use a value between 0.0 and 1.0 to indicate an offset into the first run of the animation at which to begin the animation performance, but any positive, non-infinite value is allowed. Since all animations' iteration indexes start at 0, a value of 0.5 would start the animation halfway through its first iteration or loop. Meanwhile, a value of 1.2 means the animation will begin playback 20% of the way through its second iteration, and so forth.  It's currently undefined what happens if you specify a value of iterationStart which is greater than the value of AnimationEffectTimingProperties.iterations. See issue 170 in the Web Animations API specification's issue tracker for details and status of any changes to the specification in this regard.  Specifications    Specification Status Comment   Web AnimationsThe definition of 'iterationStart' in that specification. Working Draft Editor's draft.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   Yes  ?   63  No  Yes  No       Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   ?   ?   ?   63  No  No  ?     See also  Web Animations API  Element.animate()",
        "type": "Performance"
    },
    "EffectTiming.iterations": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "EffectTiming.iterations",
        "params": [
            {
                "descr": "An attempt was made to set the value of this property to a negative number or NaN. ",
                "name": "TypeError"
            }
        ],
        "path": "dom/effecttiming/iterations",
        "syntax": "var timingProperties = { iterations: numberOfIterations }; timingProperties.iterations = numberOfIterations;  Value A floating-point value specifying the number of times the animation sequence will play through. Any value from 0 (don't play the animation at all) to positive Infinity",
        "type": "Performance"
    },
    "Element selector (\"element\"": {
        "descr": "JavaScript's getElementsByTagName() function is called to return the appropriate elements when this expression is used.",
        "name": "Element selector (\"element\"",
        "params": [],
        "path": "jquery/element-selector",
        "syntax": "element selector  Description: Selects all elements with the given tag name.   version added: 1.0jQuery( \"element\" ) element: An element to search for. Refers to the tagName of DOM nodes.",
        "type": "Selectors"
    },
    "Empty": {
        "descr": "An empty statement is used to provide no statement, although the JavaScript syntax would expect one.",
        "name": "Empty",
        "params": [],
        "path": "javascript/statements/empty",
        "syntax": ";  Description The empty statement is a semicolon (;) indicating that no statement will be executed, even if JavaScript syntax requires one. The opposite behavior, where you want multiple statements, but JavaScript only allows a single one, is possible using a block statement; it combines several statements into a single one.",
        "type": "Statements"
    },
    "Error": {
        "descr": "The Error constructor creates an error object. Instances of Error objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-defined exceptions. See below for standard built-in error types.",
        "name": "Error",
        "params": [
            {
                "descr": "Optional. A human-readable description of the error.",
                "name": "message"
            },
            {
                "descr": "Optional. The value for the fileName property on the created Error object. ",
                "name": "fileName"
            },
            {
                "descr": "Optional. The value for the lineNumber property on the created Error object. ",
                "name": "lineNumber"
            },
            {
                "descr": "Creates an instance representing an error that occurs regarding the global function eval().",
                "name": "EvalError"
            },
            {
                "descr": "Creates an instance representing an error that occurs when an internal error in the JavaScript engine is thrown. ",
                "name": "InternalError"
            },
            {
                "descr": "Creates an instance representing an error that occurs when a numeric variable or parameter is outside of its valid range.",
                "name": "RangeError"
            },
            {
                "descr": "Creates an instance representing an error that occurs when de-referencing an invalid reference.",
                "name": "ReferenceError"
            },
            {
                "descr": "Creates an instance representing a syntax error that occurs while parsing code in eval().",
                "name": "SyntaxError"
            },
            {
                "descr": "Creates an instance representing an error that occurs when a variable or parameter is not of a valid type.",
                "name": "TypeError"
            },
            {
                "descr": "Creates an instance representing an error that occurs when encodeURI() or decodeURI() are passed invalid parameters.",
                "name": "URIError"
            },
            {
                "descr": "Allows the addition of properties to Error instances.",
                "name": "Error.prototype"
            },
            {
                "descr": "Specifies the function that created an instance's prototype.",
                "name": "Error.prototype.constructor"
            },
            {
                "descr": "Error message.",
                "name": "Error.prototype.message"
            },
            {
                "descr": "Error name.",
                "name": "Error.prototype.name"
            },
            {
                "descr": "Error description. Similar to message.",
                "name": "Error.prototype.description"
            },
            {
                "descr": "Error number.",
                "name": "Error.prototype.number"
            },
            {
                "descr": "Path to file that raised this error.",
                "name": "Error.prototype.fileName"
            },
            {
                "descr": "Line number in file that raised this error.",
                "name": "Error.prototype.lineNumber"
            },
            {
                "descr": "Column number in line that raised this error.",
                "name": "Error.prototype.columnNumber"
            },
            {
                "descr": "Stack trace.",
                "name": "Error.prototype.stack"
            },
            {
                "descr": "Returns a string containing the source of the specified Error object; you can use this value to create a new object. ",
                "name": "Error.prototype.toSource()"
            },
            {
                "descr": "Returns a string representing the specified object. ",
                "name": "Error.prototype.toString()"
            }
        ],
        "path": "javascript/global_objects/error",
        "syntax": "new Error([message[, fileName[, lineNumber]]])",
        "type": "Errors"
    },
    "Errors: Array sort argument": {
        "descr": "TypeError",
        "name": "Errors: Array sort argument",
        "params": [],
        "path": "javascript/errors/array_sort_argument",
        "syntax": "TypeError What went wrong? The argument of Array.prototype.sort()",
        "type": "Errors"
    },
    "Errors: Bad octal": {
        "descr": "Warning. JavaScript execution won't be halted.",
        "name": "Errors: Bad octal",
        "params": [],
        "path": "javascript/errors/bad_octal",
        "syntax": "0) followed by another decimal digit, but If all digits after the leading 0",
        "type": "Errors"
    },
    "Errors: Bad radix": {
        "descr": "RangeError",
        "name": "Errors: Bad radix",
        "params": [],
        "path": "javascript/errors/bad_radix",
        "syntax": "RangeError What went wrong? The optional radix parameter of the Number.prototype.toString()",
        "type": "Errors"
    },
    "Errors: Bad regexp flag": {
        "descr": "SyntaxError",
        "name": "Errors: Bad regexp flag",
        "params": [],
        "path": "javascript/errors/bad_regexp_flag",
        "syntax": "SyntaxError What went wrong? There are invalid regular expression flags in the code. In a regular expression literal, which consists of a pattern enclosed between slashes, the flags are defined after the second flag. They can also be defined in the constructor function of the RegExp object (second parameter). Regular expression flags can be used separately or together in any order, but there are only five of them in ECMAScript.",
        "type": "Errors"
    },
    "Errors: Bad return or yield": {
        "descr": "SyntaxError.",
        "name": "Errors: Bad return or yield",
        "params": [],
        "path": "javascript/errors/bad_return_or_yield",
        "syntax": "SyntaxError. What went wrong? A return or yield statement is called outside of a function. Maybe there are missing curly brackets somewhere? The return and yield statements must be in a function, because they end (or pause and resume) function execution and specify a value to be returned to the function caller.",
        "type": "Errors"
    },
    "Errors: Called on incompatible type": {
        "descr": "TypeError",
        "name": "Errors: Called on incompatible type",
        "params": [],
        "path": "javascript/errors/called_on_incompatible_type",
        "syntax": "TypeError What went wrong? When this error is thrown, a function (on a given object), is called with a this",
        "type": "Errors"
    },
    "Errors: Cant access lexical declaration before init": {
        "descr": "ReferenceError",
        "name": "Errors: Cant access lexical declaration before init",
        "params": [],
        "path": "javascript/errors/cant_access_lexical_declaration_before_init",
        "syntax": "ReferenceError What went wrong? A lexical variable was accessed before it was initialized. This happens within any block statement, when let or const declarations are accessed before they are defined. Examples Invalid cases In this case, the variable \"foo\" is redeclared in the block statement using let. function test() { let foo = 33; if (true) { let foo = (foo + 55);\n or  // ReferenceError: can't access lexical // declaration `foo' before initialization } } test();",
        "type": "Errors"
    },
    "Errors: Cant access property": {
        "descr": "TypeError.",
        "name": "Errors: Cant access property",
        "params": [],
        "path": "javascript/errors/cant_access_property",
        "syntax": "TypeError. What went wrong? The property access was operated on undefined or null value. Examples Invalid cases // undefined and null cases on which the substring method won't work var foo = undefined; foo.substring(1);\n or  // TypeError: x is undefined, can't access property \"substring\" of it var foo = null; foo.substring(1);\n or  // TypeError: x is null, can't access property \"substring\" of it);",
        "type": "Errors"
    },
    "Errors: Cant define property object not extensible": {
        "descr": "TypeError",
        "name": "Errors: Cant define property object not extensible",
        "params": [],
        "path": "javascript/errors/cant_define_property_object_not_extensible",
        "syntax": "TypeError What went wrong? Usually, an object is extensible and new properties can be added to it. However, in this case Object.preventExtensions()",
        "type": "Errors"
    },
    "Errors: Cant delete": {
        "descr": "TypeError in strict mode only.",
        "name": "Errors: Cant delete",
        "params": [],
        "path": "javascript/errors/cant_delete",
        "syntax": "TypeError in strict mode only. What went wrong? It was attempted to delete a property, but that property is non-configurable. The configurable attribute controls whether the property can be deleted from the object and whether its attributes (other than writable) can be changed.",
        "type": "Errors"
    },
    "Errors: Cant redefine property": {
        "descr": "TypeError",
        "name": "Errors: Cant redefine property",
        "params": [],
        "path": "javascript/errors/cant_redefine_property",
        "syntax": "TypeError What went wrong? It was attempted to redefine a property, but that property is non-configurable. The configurable attribute controls whether the property can be deleted from the object and whether its attributes (other than writable) can be changed. Usually, properties in an object created by an object initializer are configurable. However, for example, when using Object.defineProperty()",
        "type": "Errors"
    },
    "Errors: Cyclic object value": {
        "descr": "TypeError",
        "name": "Errors: Cyclic object value",
        "params": [],
        "path": "javascript/errors/cyclic_object_value",
        "syntax": "TypeError What went wrong? The JSON format per se doesn't support object references (although an IETF draft exists), hence JSON.stringify()",
        "type": "Errors"
    },
    "Errors: Dead object": {
        "descr": "TypeError",
        "name": "Errors: Dead object",
        "params": [],
        "path": "javascript/errors/dead_object",
        "syntax": "TypeError What went wrong? To improve in memory usage and to prevent memory leaks, Firefox disallows add-ons to keep strong references to DOM objects after their parent document has been destroyed. A dead object, is holding a strong (keep alive) reference to a DOM element that persists even after it was destroyed in the DOM. To avoid these issues, references to DOM nodes in foreign document should instead be stored in an object which is specific to that document, and cleaned up when the document is unloaded, or stored as weak references.",
        "type": "Errors"
    },
    "Errors: Deprecated String generics": {
        "descr": "Warning. JavaScript execution won't be halted.",
        "name": "Errors: Deprecated String generics",
        "params": [],
        "path": "javascript/errors/deprecated_string_generics",
        "syntax": "String methods are deprecated and will be removed in the future (no cross-browser support, available in Firefox only). String generics provide String",
        "type": "Errors"
    },
    "Errors: Deprecated caller or arguments usage": {
        "descr": "A strict-mode-only warning that a ReferenceError occurred. JavaScript execution won't be halted.",
        "name": "Errors: Deprecated caller or arguments usage",
        "params": [],
        "path": "javascript/errors/deprecated_caller_or_arguments_usage",
        "syntax": "ReferenceError occurred. JavaScript execution won't be halted. What went wrong? In strict mode, the Function.caller or Function.arguments properties are used and shouldn't be. They are deprecated, because they leak the function caller, are non-standard, hard to optimize and potentially a performance-harmful feature. Examples Deprecated function.caller or arguments.callee.caller  Function.caller and arguments.callee.caller are deprecated (see the reference articles for more information).",
        "type": "Errors"
    },
    "Errors: Deprecated expression closures": {
        "descr": "Warning. JavaScript execution won't be halted.",
        "name": "Errors: Deprecated expression closures",
        "params": [],
        "path": "javascript/errors/deprecated_expression_closures",
        "syntax": "SyntaxError then. Examples Deprecated syntax Expression closures omit curly braces or return statements from function declarations or from method definitions in objects. var x = function() 1; var obj = { count: function() 1 };",
        "type": "Errors"
    },
    "Errors: Deprecated octal": {
        "descr": "SyntaxError in strict mode only.",
        "name": "Errors: Deprecated octal",
        "params": [],
        "path": "javascript/errors/deprecated_octal",
        "syntax": "SyntaxError in strict mode only. What went wrong? Octal literals and octal escape sequences are deprecated and will throw a SyntaxError in strict mode. With ECMAScript 2015 and later, the standardized syntax uses a leading zero followed by a lowercase or uppercase Latin letter \"O\" (0o or 0O)",
        "type": "Errors"
    },
    "Errors: Deprecated toLocaleFormat": {
        "descr": "Warning. JavaScript execution won't be halted.",
        "name": "Errors: Deprecated toLocaleFormat",
        "params": [],
        "path": "javascript/errors/deprecated_tolocaleformat",
        "syntax": "Date.prototype.toLocaleFormat method is deprecated and shouldn't be used anymore. It uses a format string in the same format expected by the strftime()",
        "type": "Errors"
    },
    "Errors: Equal as assign": {
        "descr": "(Firefox only) SyntaxError warning which is reported only if javascript.options.strict preference is set to true.",
        "name": "Errors: Equal as assign",
        "params": [],
        "path": "javascript/errors/equal_as_assign",
        "syntax": "SyntaxError warning which is reported only if javascript.options.strict preference is set to true. What went wrong? There was an assignment (=) when you would normally expect a test for equality (==",
        "type": "Errors"
    },
    "Errors: For-each-in loops are deprecated": {
        "descr": "Warning",
        "name": "Errors: For-each-in loops are deprecated",
        "params": [],
        "path": "javascript/errors/for-each-in_loops_are_deprecated",
        "syntax": "for each (variable in obj)",
        "type": "Errors"
    },
    "Errors: Getter only": {
        "descr": "TypeError in strict mode only.",
        "name": "Errors: Getter only",
        "params": [],
        "path": "javascript/errors/getter_only",
        "syntax": "TypeError in strict mode only. What went wrong? There is an attempt to set a new value to a property for which only a getter is specified. While this will be silently ignored in non-strict mode, it will throw a TypeError in strict mode. Examples The example below shows how to set getter for a property. It doesn't specify a setter, so a TypeError will be thrown upon trying to set the temperature property to 30. For more details see also the Object.defineProperty()",
        "type": "Errors"
    },
    "Errors: Identifier after number": {
        "descr": "SyntaxError",
        "name": "Errors: Identifier after number",
        "params": [],
        "path": "javascript/errors/identifier_after_number",
        "syntax": "SyntaxError What went wrong? The names of variables, called identifiers, conform to certain rules, which your code must adhere to! A JavaScript identifier must start with a letter, underscore (_), or dollar sign ($). They can't start with a digit! Only subsequent characters can be digits (0-9).",
        "type": "Errors"
    },
    "Errors: Illegal character": {
        "descr": "SyntaxError",
        "name": "Errors: Illegal character",
        "params": [],
        "path": "javascript/errors/illegal_character",
        "syntax": "SyntaxError What went wrong? There is an invalid or unexpected token that doesn't belong at this position in the code. Use an editor that supports syntax highlighting and carefully check your code against mismatches like a minus sign ( - ) versus a dash ( –",
        "type": "Errors"
    },
    "Errors: Invalid array length": {
        "descr": "RangeError",
        "name": "Errors: Invalid array length",
        "params": [],
        "path": "javascript/errors/invalid_array_length",
        "syntax": "RangeError What went wrong? An invalid array length might appear in these situations:  When creating an Array or an ArrayBuffer which has a length which is either negative or larger or equal to 232, or when setting the Array.length property to a value which is either negative or larger or equal to 232.  Why are Array and ArrayBuffer length limited? The length property of an Array or an ArrayBuffer is represented with an unsigned 32-bit integer, that can only store values which are in the range from 0 to 232-1. If you are creating an Array, using the constructor, you probably want to use the literal notation instead, as the first argument is interpreted as the length of the Array. Otherwise, you might want to clamp the length before setting the length property, or using it as argument of the constructor. Examples Invalid cases new Array(Math.pow(2, 40)) new Array(-1) new ArrayBuffer(Math.pow(2, 32)) new ArrayBuffer(-1) let a = []; a.length = a.length - 1; // set -1 to the length property let b = new Array(Math.pow(2, 32) - 1);\n or  b.length = b.length + 1; // set 2^32 to the length property);",
        "type": "Errors"
    },
    "Errors: Invalid assignment left-hand side": {
        "descr": "ReferenceError.",
        "name": "Errors: Invalid assignment left-hand side",
        "params": [],
        "path": "javascript/errors/invalid_assignment_left-hand_side",
        "syntax": "ReferenceError. What went wrong? There was an unexpected assignment somewhere. This might be due to a mismatch of a assignment operator and a comparison operator, for example. While a single \"=\" sign assigns a value to a variable, the \"==\" or \"===\" operators compare a value. Examples if (Math.PI = 3 || Math.PI = 4) { console.log('no way!');\n or  } // ReferenceError: invalid assignment left-hand side var str = 'Hello, ' += 'is it me ' += 'you\\'re looking for?'; // ReferenceError: invalid assignment left-hand side);",
        "type": "Errors"
    },
    "Errors: Invalid const assignment": {
        "descr": "TypeError",
        "name": "Errors: Invalid const assignment",
        "params": [],
        "path": "javascript/errors/invalid_const_assignment",
        "syntax": "TypeError What went wrong? A constant is a value that cannot be altered by the program during normal execution. It cannot change through re-assignment, and it can't be redeclared. In JavaScript, constants are declared using the const keyword. Examples Invalid redeclaration Assigning a value to the same constant name in the same block-scope will throw. const COLUMNS = 80; // ... COLUMNS = 120; // TypeError: invalid assignment to const `COLUMNS' Fixing the error There are multiple options to fix this error. Check what was intended to be achieved with the constant in question. Rename If you meant to declare another constant, pick another name and re-name. This constant name is already taken in this scope. const COLUMNS = 80; const WIDE_COLUMNS = 120;  const, let or var? Do not use const if you weren't meaning to declare a constant. Maybe you meant to declare a block-scoped variable with let or global variable with var. let columns = 80; // ... let columns = 120;  Scoping Check if you are in the correct scope. Should this constant appear in this scope or was it meant to appear in a function, for example? const COLUMNS = 80; function setupBigScreenEnvironment() { const COLUMNS = 120; }",
        "type": "Errors"
    },
    "Errors: Invalid date": {
        "descr": "RangeError",
        "name": "Errors: Invalid date",
        "params": [],
        "path": "javascript/errors/invalid_date",
        "syntax": "RangeError What went wrong? A string leading to an invalid date has been provided to Date or Date.parse()",
        "type": "Errors"
    },
    "Errors: Invalid for-in initializer": {
        "descr": "SyntaxError in strict mode only.",
        "name": "Errors: Invalid for-in initializer",
        "params": [],
        "path": "javascript/errors/invalid_for-in_initializer",
        "syntax": "SyntaxError in strict mode only. What went wrong? The head of a for...in loop contains an initializer expression. That is, a variable is declared and assigned a value |for (var i = 0 in obj)",
        "type": "Errors"
    },
    "Errors: Invalid for-of initializer": {
        "descr": "SyntaxError",
        "name": "Errors: Invalid for-of initializer",
        "params": [],
        "path": "javascript/errors/invalid_for-of_initializer",
        "syntax": "SyntaxError What went wrong? The head of a for...of loop contains an initializer expression. That is, a variable is declared and assigned a value |for (var i = 0 of iterable)",
        "type": "Errors"
    },
    "Errors: JSON bad parse": {
        "descr": "SyntaxError",
        "name": "Errors: JSON bad parse",
        "params": [],
        "path": "javascript/errors/json_bad_parse",
        "syntax": "SyntaxError What went wrong? JSON.parse()",
        "type": "Errors"
    },
    "Errors: Malformed URI": {
        "descr": "URIError",
        "name": "Errors: Malformed URI",
        "params": [],
        "path": "javascript/errors/malformed_uri",
        "syntax": "URIError What went wrong? URI encoding or decoding wasn't successful. An argument given to either the decodeURI, encodeURI, encodeURIComponent, or decodeURIComponent function was not valid, so that the function was unable encode or decode properly. Examples Encoding Encoding replaces each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character. An URIError will be thrown if there is an attempt to encode a surrogate which is not part of a high-low pair, for example: encodeURI('\\uD800');\n or  // \"URIError: malformed URI sequence\" encodeURI('\\uDFFF');\n or  // \"URIError: malformed URI sequence\");",
        "type": "Errors"
    },
    "Errors: Malformed formal parameter": {
        "descr": "SyntaxError",
        "name": "Errors: Malformed formal parameter",
        "params": [],
        "path": "javascript/errors/malformed_formal_parameter",
        "syntax": "SyntaxError What went wrong? There is a Function()",
        "type": "Errors"
    },
    "Errors: Missing bracket after list": {
        "descr": "SyntaxError.",
        "name": "Errors: Missing bracket after list",
        "params": [],
        "path": "javascript/errors/missing_bracket_after_list",
        "syntax": "SyntaxError. What went wrong? There is an error with the array initializer syntax somewhere. Likely there is a closing bracket (\"]\") or a comma (\",",
        "type": "Errors"
    },
    "Errors: Missing colon after property id": {
        "descr": "SyntaxError",
        "name": "Errors: Missing colon after property id",
        "params": [],
        "path": "javascript/errors/missing_colon_after_property_id",
        "syntax": "SyntaxError What went wrong? When creating objects with the object initializer syntax, a colon (:) separates keys and values for the object's properties.",
        "type": "Errors"
    },
    "Errors: Missing curly after function body": {
        "descr": "SyntaxError",
        "name": "Errors: Missing curly after function body",
        "params": [],
        "path": "javascript/errors/missing_curly_after_function_body",
        "syntax": "SyntaxError What went wrong? There is a syntax mistake when creating a function somewhere. Also check if any closing curly brackets or parenthesis are in the correct order. Indenting or formatting the code a bit nicer might also help you to see through the jungle. Examples Forgotten closing curly bracket Oftentimes, there is a missing curly bracket in your function code: var charge = function() { if (sunny) { useSolarCells();\n or  } else { promptBikeRide();\n or  };);",
        "type": "Errors"
    },
    "Errors: Missing formal parameter": {
        "descr": "SyntaxError",
        "name": "Errors: Missing formal parameter",
        "params": [],
        "path": "javascript/errors/missing_formal_parameter",
        "syntax": "SyntaxError What went wrong? \"Formal parameter\" is a fancy way of saying \"function parameter\". Your function declaration is missing valid parameters. In the declaration of a function, the parameters must be identifiers, not any value like numbers, strings, or objects. Declaring functions and calling functions are two separate steps. Declarations require identifier as parameters, and only when calling (invoking) the function, you provide the values the function should use.",
        "type": "Errors"
    },
    "Errors: Missing initializer in const": {
        "descr": "SyntaxError",
        "name": "Errors: Missing initializer in const",
        "params": [],
        "path": "javascript/errors/missing_initializer_in_const",
        "syntax": "SyntaxError What went wrong? A constant is a value that cannot be altered by the program during normal execution. It cannot change through re-assignment, and it can't be redeclared. In JavaScript, constants are declared using the const keyword. An initializer for a constant is required; that is, you must specify its value in the same statement in which it's declared (which makes sense, given that it can't be changed later).",
        "type": "Errors"
    },
    "Errors: Missing name after dot operator": {
        "descr": "SyntaxError",
        "name": "Errors: Missing name after dot operator",
        "params": [],
        "path": "javascript/errors/missing_name_after_dot_operator",
        "syntax": "SyntaxError What went wrong? The dot operator (.) is used for property access. You will have to specify the name of the property that you want to access. For computed property access, you might need to change your property access from using a dot to using square brackets. These will allow you to compute an expression. Maybe you intended to do concatenation instead? A plus operator (+",
        "type": "Errors"
    },
    "Errors: Missing parenthesis after argument list": {
        "descr": "SyntaxError.",
        "name": "Errors: Missing parenthesis after argument list",
        "params": [],
        "path": "javascript/errors/missing_parenthesis_after_argument_list",
        "syntax": "SyntaxError. What went wrong? There is an error with how a function is called. This might be a typo, a missing operator, or an unescaped string, for example. Examples Because there is no \"+\" operator to concatenate the string, JavaScript expects the argument for the log function to be just \"PI: \". In that case, it should be terminated by a closing parenthesis. console.log('PI: ' Math.PI);\n or  // SyntaxError: missing ) after argument list);",
        "type": "Errors"
    },
    "Errors: Missing parenthesis after condition": {
        "descr": "SyntaxError",
        "name": "Errors: Missing parenthesis after condition",
        "params": [],
        "path": "javascript/errors/missing_parenthesis_after_condition",
        "syntax": "SyntaxError What went wrong? There is an error with how an if condition is written. In any programming language, code needs to make decisions and carry out actions accordingly depending on different inputs. The if statement executes a statement if a specified condition is truthy. In JavaScript, this condition must appear in parenthesis after the if keyword, like this: if (condition) { // do something if the condition is true }",
        "type": "Errors"
    },
    "Errors: Missing semicolon before statement": {
        "descr": "SyntaxError.",
        "name": "Errors: Missing semicolon before statement",
        "params": [],
        "path": "javascript/errors/missing_semicolon_before_statement",
        "syntax": "SyntaxError. What went wrong? There is a semicolon (;) missing somewhere. JavaScript statements must be terminated with semicolons. Some of them are affected by automatic semicolon insertion (ASI), but in this case you need to provide a semicolon, so that JavaScript can parse the source code correctly.",
        "type": "Errors"
    },
    "Errors: More arguments needed": {
        "descr": "TypeError.",
        "name": "Errors: More arguments needed",
        "params": [],
        "path": "javascript/errors/more_arguments_needed",
        "syntax": "TypeError. What went wrong? There is an error with how a function is called. More arguments need to be provided. Examples The Object.create()",
        "type": "Errors"
    },
    "Errors: Negative repetition count": {
        "descr": "RangeError",
        "name": "Errors: Negative repetition count",
        "params": [],
        "path": "javascript/errors/negative_repetition_count",
        "syntax": "RangeError What went wrong? The String.prototype.repeat()",
        "type": "Errors"
    },
    "Errors: No non-null object": {
        "descr": "TypeError",
        "name": "Errors: No non-null object",
        "params": [],
        "path": "javascript/errors/no_non-null_object",
        "syntax": "TypeError What went wrong? An object is expected somewhere and wasn't provided. null is not an object and won't work. You must provide a proper object in the given situation. Examples Property descriptor expected When methods like Object.create()",
        "type": "Errors"
    },
    "Errors: No variable name": {
        "descr": "SyntaxError",
        "name": "Errors: No variable name",
        "params": [],
        "path": "javascript/errors/no_variable_name",
        "syntax": "SyntaxError What went wrong? A variable is missing a name. This is likely due to a syntax error in your code. Probably a comma is wrong somewhere or you struggled with coming up with a name. Totally understandable! Naming things is so hard. Examples Missing a variable name var = \"foo\";  It's tough coming up with good variable names. We all have been there. var ohGodWhy = \"foo\"; Reserved keywords can't be variable names There are a few variable names that are reserverd keywords. You can't use these. Sorry :( var debugger = \"whoop\"; // SyntaxError: missing variable name  Declaring multiple variables Pay special attention to commas when declaring multiple variables. Is there an excess comma? Did you accidentally add commas instead of semicolons? var x, y = \"foo\", var x, = \"foo\" var first = document.getElementById('one'), var second = document.getElementById('two'), // SyntaxError: missing variable name",
        "type": "Errors"
    },
    "Errors: Non configurable array element": {
        "descr": "TypeError",
        "name": "Errors: Non configurable array element",
        "params": [],
        "path": "javascript/errors/non_configurable_array_element",
        "syntax": "TypeError What went wrong? It was attempted to shorten the length of an array, but one of the array's elements is non-configurable. When shortening an array, the elements beyond the new array length will be deleted, which failed in this situation. The configurable attribute controls whether the property can be deleted from the object and whether its attributes (other than writable) can be changed.",
        "type": "Errors"
    },
    "Errors: Not a codepoint": {
        "descr": "RangeError",
        "name": "Errors: Not a codepoint",
        "params": [],
        "path": "javascript/errors/not_a_codepoint",
        "syntax": "RangeError What went wrong? The String.fromCodePoint()",
        "type": "Errors"
    },
    "Errors: Not a constructor": {
        "descr": "TypeError",
        "name": "Errors: Not a constructor",
        "params": [],
        "path": "javascript/errors/not_a_constructor",
        "syntax": "TypeError What went wrong? There was an attempt to use an object or a variable as a constructor, but that object or variable is not a constructor. See constructor or the new operator for more information on what a constructor is. There are many global objects, like String or Array, which are constructable using new. However, some global objects are not and their properties and methods are static. The following JavaScript standard built-in objects are not a constructor: Math, JSON, Symbol, Reflect, Intl, SIMD, Atomics. Generator functions cannot be used as constructors either. Examples Invalid cases var Car = 1; new Car();\n or  // TypeError: Car is not a constructor new Math();\n or  // TypeError: Math is not a constructor new Symbol();\n or  // TypeError: Symbol is not a constructor function* f() {}; var obj = new f; // TypeError: f is not a constructor);",
        "type": "Errors"
    },
    "Errors: Not a function": {
        "descr": "TypeError.",
        "name": "Errors: Not a function",
        "params": [],
        "path": "javascript/errors/not_a_function",
        "syntax": "TypeError. What went wrong? It attempted to call a value from a function, but the value is not actually a function. Some code expects you to provide a function, but that didn't happen. Maybe there is a typo in the function name? Maybe the object you are calling the method on does not have this function? For example, JavaScript objects have no map function, but the JavaScript Array object does. There are many built-in functions in need of a (callback) function. You will have to provide a function in order to have these methods working properly:",
        "type": "Errors"
    },
    "Errors: Not defined": {
        "descr": "ReferenceError.",
        "name": "Errors: Not defined",
        "params": [],
        "path": "javascript/errors/not_defined",
        "syntax": "ReferenceError. What went wrong? There is a non-existent variable referenced somewhere. This variable needs to be declared, or you need make sure it is available in your current script or scope.  Note: When loading a library (such as jQuery), make sure it is loaded before you access library variables, such as \"$\". Put the <script>",
        "type": "Errors"
    },
    "Errors: Precision range": {
        "descr": "RangeError",
        "name": "Errors: Precision range",
        "params": [],
        "path": "javascript/errors/precision_range",
        "syntax": "RangeError What went wrong? There was an out of range precision argument in one of these methods:  Number.prototype.toExponential()",
        "type": "Errors"
    },
    "Errors: Property access denied": {
        "descr": "Error.",
        "name": "Errors: Property access denied",
        "params": [],
        "path": "javascript/errors/property_access_denied",
        "syntax": "Error. What went wrong? There was attempt to access an object for which you have no permission. This is likely an <iframe> element loaded from a different domain for which you violated the same-origin policy. Examples <!DOCTYPE html> <html> <head> <iframe id=\"myframe\" src=\"http://www1.w3c-test.org/common/blank.html\"></iframe> <script> onload = function() { console.log(frames[0].document);\n or  // Error: Permission denied to access property \"document\" } </script> </head> <body></body> </html>);",
        "type": "Errors"
    },
    "Errors: Read-only": {
        "descr": "TypeError",
        "name": "Errors: Read-only",
        "params": [],
        "path": "javascript/errors/read-only",
        "syntax": "TypeError What went wrong? The global variable or object property that was assigned to is a read-only property. (Technically, it is a non-writable data property.)",
        "type": "Errors"
    },
    "Errors: Redeclared parameter": {
        "descr": "SyntaxError",
        "name": "Errors: Redeclared parameter",
        "params": [],
        "path": "javascript/errors/redeclared_parameter",
        "syntax": "SyntaxError What went wrong? The same variable name occurs as a function parameter and is then redeclared using a let assignment in a function body again. Redeclaring the same variable within the same function or block scope using let is not allowed in JavaScript. Examples In this case, the variable \"arg\" redeclares the argument. function f(arg) { let arg = 'foo'; } // SyntaxError: redeclaration of formal parameter \"arg\"",
        "type": "Errors"
    },
    "Errors: Reduce of empty array with no initial value": {
        "descr": "TypeError",
        "name": "Errors: Reduce of empty array with no initial value",
        "params": [],
        "path": "javascript/errors/reduce_of_empty_array_with_no_initial_value",
        "syntax": "TypeError What went wrong? In JavaScript, there are several reduce functions:   Array.prototype.reduce()",
        "type": "Errors"
    },
    "Errors: Reserved identifier": {
        "descr": "SyntaxError",
        "name": "Errors: Reserved identifier",
        "params": [],
        "path": "javascript/errors/reserved_identifier",
        "syntax": "SyntaxError What went wrong? Reserved keywords will throw in if they are used as identifiers. These are reserved in strict mode and sloppy mode:  enum  The following are only reserved when they are found in strict mode code:  implements interface let package private protected public static  Examples Strict and non-strict reserved keywords The enum identifier is generally reserved. var enum = { RED: 0, GREEN: 1, BLUE: 2 }; // SyntaxError: enum is a reserved identifier  In strict mode code, more identifiers are reserved. \"use strict\"; var package = [\"potatoes\", \"rice\", \"fries\"]; // SyntaxError: package is a reserved identifier  You'll need to rename these variables. var colorEnum = { RED: 0, GREEN: 1, BLUE: 2 }; var list = [\"potatoes\", \"rice\", \"fries\"]; Update older browsers If you are using an older browser that does not yet implement let or class, for example, you should update to a more recent browser version that does support these new language features. \"use strict\"; class DocArchiver {} // SyntaxError: class is a reserved identifier // (throws in older browsers only, e.g. Firefox 44 and older)",
        "type": "Errors"
    },
    "Errors: Resulting string too large": {
        "descr": "RangeError",
        "name": "Errors: Resulting string too large",
        "params": [],
        "path": "javascript/errors/resulting_string_too_large",
        "syntax": "RangeError What went wrong? The String.prototype.repeat()",
        "type": "Errors"
    },
    "Errors: Stmt after return": {
        "descr": "Warning",
        "name": "Errors: Stmt after return",
        "params": [],
        "path": "javascript/errors/stmt_after_return",
        "syntax": "return statement, or when using a semicolon-less return statement but including an expression directly after.  When an expression exists after a valid return statement, a warning is given to indicate that the code after the return statement is unreachable, meaning it can never be run. Why should I have semicolons after return statements? In the case of semicolon-less return statements, it can be unclear whether the developer intended to return the statement on the following line, or to stop execution and return. The warning indicates that there is ambiguity in the way the return statement is written. Warnings will not be shown for semicolon-less returns if these statements follow it:  throw break var function  Examples Invalid cases function f() { var x = 3; x += 4; return x; // return exits the function immediately x -= 3; // so this line will never run; it is unreachable } function f() { return // this is treated like `return;` 3 + 4; // so the function returns, and this line is never reached }",
        "type": "Errors"
    },
    "Errors: Strict Non Simple Params": {
        "descr": "SyntaxError.",
        "name": "Errors: Strict Non Simple Params",
        "params": [],
        "path": "javascript/errors/strict_non_simple_params",
        "syntax": "SyntaxError. What went wrong? A \"use strict\" directive is written at the top of a function that has one of the following parameters:  Default parameters Rest parameters Destructuring parameters  A \"use strict\" directive is not allowed at the top of such functions per the ECMAScript specification. Examples Function statement In this case, the function sum has default parameters a=1 and b=2: function sum(a = 1, b = 2) { // SyntaxError: \"use strict\" not allowed in function with default parameter 'use strict'; return a + b; }",
        "type": "Errors"
    },
    "Errors: Too much recursion": {
        "descr": "InternalError.",
        "name": "Errors: Too much recursion",
        "params": [],
        "path": "javascript/errors/too_much_recursion",
        "syntax": "InternalError. What went wrong? A function that calls itself is called a recursive function. In some ways, recursion is analogous to a loop. Both execute the same code multiple times, and both require a condition (to avoid an infinite loop, or rather, infinite recursion in this case). When there is too much or infinite recursion, JavaScript will throw this error.",
        "type": "Errors"
    },
    "Errors: Typed array invalid arguments": {
        "descr": "TypeError",
        "name": "Errors: Typed array invalid arguments",
        "params": [],
        "path": "javascript/errors/typed_array_invalid_arguments",
        "syntax": "TypeError What went wrong? Typed array constructors require either  a length, another typed array, array-like objects, iterable objects or an ArrayBuffer object  to create a new typed array. Other constructor arguments will not create a valid typed array. Examples Typed arrays, for example a Uint8Array, can't be constructed from a string. In fact, strings can't be in typed arrays at all. var ta = new Uint8Array(\"nope\");\n or  // TypeError: invalid arguments);",
        "type": "Errors"
    },
    "Errors: Undeclared var": {
        "descr": "ReferenceError warning in strict mode only.",
        "name": "Errors: Undeclared var",
        "params": [],
        "path": "javascript/errors/undeclared_var",
        "syntax": "ReferenceError warning in strict mode only. What went wrong? A value has been assigned to an undeclared variable. In other words, there was an assignment without the var keyword. There are some differences between declared and undeclared variables, which might lead to unexpected results and that's why JavaScript presents an error in strict mode. Three things to note about declared and undeclared variables:  Declared variables are constrained in the execution context in which they are declared. Undeclared variables are always global. Declared variables are created before any code is executed. Undeclared variables do not exist until the code assigning to them is executed. Declared variables are a non-configurable property of their execution context (function or global). Undeclared variables are configurable (e.g. can be deleted).  For more details and examples, see the var",
        "type": "Errors"
    },
    "Errors: Undefined prop": {
        "descr": "(Firefox only) ReferenceError warning which is reported only if javascript.options.strict preference is set to true.",
        "name": "Errors: Undefined prop",
        "params": [],
        "path": "javascript/errors/undefined_prop",
        "syntax": "ReferenceError warning which is reported only if javascript.options.strict preference is set to true. What went wrong? The script attempted to access an object property which doesn't exist. There are two ways to access properties; see the property accessors reference page to learn more about them. Examples Invalid cases In this case, the property bar is an undefined property, so a ReferenceError will occur. var foo = {}; foo.bar; // ReferenceError: reference to undefined property \"bar\"  Valid cases To avoid the error, you need to either add a definition for bar to the object or check for the existence of the bar property before trying to access it; one way to do that is to use the Object.prototype.hasOwnProperty()",
        "type": "Errors"
    },
    "Errors: Unexpected token": {
        "descr": "SyntaxError",
        "name": "Errors: Unexpected token",
        "params": [],
        "path": "javascript/errors/unexpected_token",
        "syntax": "SyntaxError What went wrong? A specific language construct was expected, but something else was provided. This might be a simple typo. Examples Expression expected For example, when chaining expressions, trailing commas are not allowed. for (let i = 0; i < 5,; ++i) { console.log(i);\n or  } // SyntaxError: expected expression, got ')');",
        "type": "Errors"
    },
    "Errors: Unexpected type": {
        "descr": "TypeError.",
        "name": "Errors: Unexpected type",
        "params": [],
        "path": "javascript/errors/unexpected_type",
        "syntax": "TypeError. What went wrong? There was an unexpected type. This occurs oftentimes with undefined or null values. Also, certain methods, such as Object.create()",
        "type": "Errors"
    },
    "Errors: Unnamed function statement": {
        "descr": "SyntaxError",
        "name": "Errors: Unnamed function statement",
        "params": [],
        "path": "javascript/errors/unnamed_function_statement",
        "syntax": "SyntaxError What went wrong? There is a function statement in the code that requires a name. You'll need to check how functions are defined and if you need to provide a name for it, or if the function in question needs to be a function expression, an IIFE, or if the function code is placed correctly in this context at all. Examples Statements vs expressions A function statement (or function declaration) requires a name, this won't work:",
        "type": "Errors"
    },
    "Errors: Unterminated string literal": {
        "descr": "SyntaxError",
        "name": "Errors: Unterminated string literal",
        "params": [],
        "path": "javascript/errors/unterminated_string_literal",
        "syntax": "SyntaxError What went wrong? There is an unterminated String somewhere. String literals must be enclosed by single (') or double (\"",
        "type": "Errors"
    },
    "Errors: Var hides argument": {
        "descr": "TypeError warning in strict mode only.",
        "name": "Errors: Var hides argument",
        "params": [],
        "path": "javascript/errors/var_hides_argument",
        "syntax": "TypeError warning in strict mode only. What went wrong? The same variable name occurs as a function parameter and is then redeclared using a var assignment in a function body again. This might be a naming conflict and thus JavaScript warns about it. This error occurs as a warning in strict mode code only. In non-strict code, the redeclaration is silently ignored. Examples Invalid cases In this case, the variable \"arg\" redeclares the argument. 'use strict'; function f(arg) { var arg = 'foo'; }",
        "type": "Errors"
    },
    "Errors: in operator no object": {
        "descr": "TypeError",
        "name": "Errors: in operator no object",
        "params": [],
        "path": "javascript/errors/in_operator_no_object",
        "syntax": "TypeError What went wrong? The in operator can only be used to check if a property is in an object. You can't search in strings, or in numbers, or other primitive types. Examples Searching in strings Unlike in other programming languages (e.g. Python), you can't search in strings using the in",
        "type": "Errors"
    },
    "Errors: invalid right hand side instanceof operand": {
        "descr": "TypeError",
        "name": "Errors: invalid right hand side instanceof operand",
        "params": [],
        "path": "javascript/errors/invalid_right_hand_side_instanceof_operand",
        "syntax": "TypeError What went wrong? The instanceof operator expects the right hand side operands to be a constructor object, i.e. an object which has a prototype property and is callable. Examples \"test\" instanceof \"\"; // TypeError: invalid 'instanceof' operand \"\" 42 instanceof 0; // TypeError: invalid 'instanceof' operand 0 function Foo() {} var f = Foo();\n or  // Foo() is called and returns undefined var x = new Foo();\n or  x instanceof f; // TypeError: invalid 'instanceof' operand f x instanceof x; // TypeError: x is not a function);",
        "type": "Errors"
    },
    "Errors: is not iterable": {
        "descr": "TypeError",
        "name": "Errors: is not iterable",
        "params": [],
        "path": "javascript/errors/is_not_iterable",
        "syntax": "TypeError What went wrong? The value which is given as the right hand-side of for…of or as argument of a function such as Promise.all or TypedArray.from, is not an iterable object. An iterable can be a built-in iterable type such as Array, String or Map, a generator result, or an object implementing the iterable protocol. Examples Iterating over Object properties In JavaScript, Objects are not iterable unless they implement the iterable protocol. Therefore, you cannot use for…of to iterate over the properties of an object. var obj = { 'France': 'Paris', 'England': 'London' }; for (let p of obj) { // TypeError: obj is not iterable // … }",
        "type": "Errors"
    },
    "EvalError": {
        "descr": "The EvalError object indicates an error regarding the global eval() function. This exception is not thrown by JavaScript anymore, however the EvalError object remains for compatibility.",
        "name": "EvalError",
        "params": [
            {
                "descr": "Optional. Human-readable description of the error",
                "name": "message"
            },
            {
                "descr": "Optional. The name of the file containing the code that caused the exception",
                "name": "fileName"
            },
            {
                "descr": "Optional. The line number of the code that caused the exception",
                "name": "lineNumber"
            },
            {
                "descr": "Allows the addition of properties to an EvalError object.",
                "name": "EvalError.prototype"
            },
            {
                "descr": "Specifies the function that created an instance's prototype.",
                "name": "EvalError.prototype.constructor"
            },
            {
                "descr": "Error message. Although ECMA-262 specifies that EvalError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.",
                "name": "EvalError.prototype.message"
            },
            {
                "descr": "Error name. Inherited from Error.",
                "name": "EvalError.prototype.name"
            },
            {
                "descr": "Path to file that raised this error. ",
                "name": "EvalError.prototype.fileName"
            },
            {
                "descr": "Line number in file that raised this error. ",
                "name": "EvalError.prototype.lineNumber"
            },
            {
                "descr": "Column number in line that raised this error. ",
                "name": "EvalError.prototype.columnNumber"
            },
            {
                "descr": "Stack trace. Inherited from Error.",
                "name": "EvalError.prototype.stack"
            }
        ],
        "path": "javascript/global_objects/evalerror",
        "syntax": "new EvalError([message[, fileName[, lineNumber]]])",
        "type": "Errors"
    },
    "Event.bubbles": {
        "descr": "The Event property bubbles indicates whether the event bubbles up through the DOM or not.",
        "name": "Event.bubbles",
        "params": [],
        "path": "dom/event/bubbles",
        "syntax": "var doesItBubble = Event.bubbles; Value A Boolean, which is true if the event bubbles up through the DOM. Example  function goInput(e) { // checks bubbles and if (!e.bubbles) { // passes event along if it's not passItOn(e);\n or  } // already bubbling doOutput(e) });",
        "type": "Event"
    },
    "Event.cancelBubble": {
        "descr": "The Event.cancelBubble property is a historical alias to Event.stopPropagation(). Setting its value to true before returning from an event handler prevents propagation of the event. In later implementations, setting this to false does nothing. See Browser compatibility for details.",
        "name": "Event.cancelBubble",
        "params": [],
        "path": "dom/event/cancelbubble",
        "syntax": "event.cancelBubble = bool; var bool = event.cancelBubble;  Example elem.onclick = function(e) { // do cool things here e.cancelBubble = true; }",
        "type": "Event"
    },
    "Event.cancelable": {
        "descr": "Events' cancelable property indicates if the event can be canceled, and therefore prevented as if the event never happened. If the event is not cancelable, then its cancelable property will be false and the event listener cannot stop the event from occurring.",
        "name": "Event.cancelable",
        "params": [],
        "path": "dom/event/cancelable",
        "syntax": "bool = event.cancelable   The result is a Boolean, which is true if the event can be canceled.  Example For example, browser vendors are proposing that the wheel event can only be canceled the first time the listener is called — any following wheel events cannot be canceled. function preventScrollWheel(event) { if (typeof event.cancelable !== 'boolean' || event.cancelable) { // The event can be canceled, so we do so. event.preventDefault();\n or  } else { // The event cannot be canceled, so it is not safe // to call preventDefault() on it. console.warn(`The following event couldn't be canceled:`);\n or  console.dir(event);\n or  } } document.addEventListener('wheel', preventCancelableEvents);",
        "type": "Event"
    },
    "Event.composed": {
        "descr": "The read-only composed property of the Event interface returns a Boolean which indicates whether or not the event will propagate across the shadow DOM boundary into the standard DOM.",
        "name": "Event.composed",
        "params": [],
        "path": "dom/event/composed",
        "syntax": "var composed = Event.composed; Value A Boolean which is true if the event will cross from the shadow DOM into the standard DOM after reaching the shadow root (that is, the first node in the shadow DOM in which the event began to propagate). All UA-dispatched UI events are composed (click/touch/mouseover/copy/paste, etc.) — most other types of events are not composed and so will return false",
        "type": "Event"
    },
    "Event.composedPath": {
        "descr": "The composedPath() method of the Event interface returns the event’s path which is an array of the objects on which listeners will be invoked. This does not include nodes in shadow trees if the shadow root was created with its ShadowRoot.mode closed.",
        "name": "Event.composedPath",
        "params": [],
        "path": "dom/event/composedpath",
        "syntax": "var composed = Event.composedPath();",
        "type": "Event"
    },
    "Event.constructor": {
        "descr": "The Event() constructor creates a new Event.",
        "name": "Event.constructor",
        "params": [
            {
                "descr": "This is a DOMString representing the name of the event.",
                "name": "typeArg"
            },
            {
                "descr": "This is an EventInit dictionary, having the following fields:   bubbles: (optional) a Boolean indicating whether the event bubbles. ",
                "name": "eventInit Optional"
            }
        ],
        "path": "dom/event/event",
        "syntax": "event = new Event(typeArg, eventInit);",
        "type": "Event"
    },
    "Event.defaultPrevented": {
        "descr": "Returns a boolean indicating whether or not event.preventDefault() was called on the event.",
        "name": "Event.defaultPrevented",
        "params": [],
        "path": "dom/event/defaultprevented",
        "syntax": "bool = event.defaultPrevented  Example  if (e.defaultPrevented) { /* the default was prevented */ }",
        "type": "Event"
    },
    "Event.eventPhase": {
        "descr": "Indicates which phase of the event flow is currently being evaluated.",
        "name": "Event.eventPhase",
        "params": [],
        "path": "dom/event/eventphase",
        "syntax": "var phase = event.eventPhase;  Returns an integer value which specifies the current evaluation phase of the event flow; possible values are listed in Event phase constants. Constants Event phase constants These values describe which phase the event flow is currently being evaluated.    Constant Value Description     Event.NONE 0 No event is being processed at this time.   Event.CAPTURING_PHASE 1 The event is being propagated through the target's ancestor objects. This process starts with the Window, then Document, then the HTMLHtmlElement, and so on through the elements until the target's parent is reached. Event listeners registered for capture mode when EventTarget.addEventListener()",
        "type": "Event"
    },
    "Event.isTrusted": {
        "descr": "The isTrusted read-only property of the Event interface is a boolean that is true when the event was generated by a user action, and false when the event was created or modified by a script or dispatched via dispatchEvent.",
        "name": "Event.isTrusted",
        "params": [],
        "path": "dom/event/istrusted",
        "syntax": "var bool = event.isTrusted;  Example  if (e.isTrusted) { /* The event is trusted. */ } else { /* The event is not trusted. */ }",
        "type": "Event"
    },
    "Event.preventDefault": {
        "descr": "The Event interface's preventDefault() method tells the user agent that if the event does not get explicitly handled, its default action should not be taken as it normally would be. The event continues to propagate as usual, unless one of its event listeners calls stopPropagation() or stopImmediatePropagation(), either of which terminates propagation at once.",
        "name": "Event.preventDefault",
        "params": [],
        "path": "dom/event/preventdefault",
        "syntax": "Event.preventDefault();",
        "type": "Event"
    },
    "Event.stopImmediatePropagation": {
        "descr": "Prevents other listeners of the same event from being called.",
        "name": "Event.stopImmediatePropagation",
        "params": [],
        "path": "dom/event/stopimmediatepropagation",
        "syntax": "event.stopImmediatePropagation();",
        "type": "Event"
    },
    "Event.stopPropagation": {
        "descr": "Prevents further propagation of the current event in the capturing and bubbling phases.",
        "name": "Event.stopPropagation",
        "params": [],
        "path": "dom/event/stoppropagation",
        "syntax": "event.stopPropagation();",
        "type": "Event"
    },
    "Event.target": {
        "descr": "A reference to the object that dispatched the event. It is different from event.currentTarget when the event handler is called during the bubbling or capturing phase of the event.",
        "name": "Event.target",
        "params": [],
        "path": "dom/event/target",
        "syntax": "theTarget = event.target Example The event.target property can be used in order to implement event delegation. // Make a list var ul = document.createElement('ul');\n or  document.body.appendChild(ul);\n or  var li1 = document.createElement('li');\n or  var li2 = document.createElement('li');\n or  ul.appendChild(li1);\n or  ul.appendChild(li2);\n or  function hide(e){ // e.target refers to the clicked <li> element // This is different than e.currentTarget which would refer to the parent <ul> in this context e.target.style.visibility = 'hidden'; } // Attach the listener to the list // It will fire when each <li> is clicked ul.addEventListener('click', hide, false);",
        "type": "Event"
    },
    "Event.timeStamp": {
        "descr": "Returns the time (in milliseconds) at which the event was created.",
        "name": "Event.timeStamp",
        "params": [],
        "path": "dom/event/timestamp",
        "syntax": "event.timeStamp  Value This value is the number of milliseconds elapsed from the beginning of the current document's lifetime till the event was created. In newer implementations, the value is a DOMHighResTimeStamp accurate to 5 microseconds (0.005 ms). In older implementations, the value is a DOMTimeStamp",
        "type": "Event"
    },
    "Event.type": {
        "descr": "The Event.type read-only property returns a string containing the event's type. It is set when the event is constructed and is the name commonly used to refer to the specific event, such as click, load, or error",
        "name": "Event.type",
        "params": [],
        "path": "dom/event/type",
        "syntax": "event.type  Examples <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"utf-8\"> <title>Event.type Example</title> <script> var currEvent; function getEvtType(evt) { console.group();\n or  currEvent = evt.type; console.log(currEvent);\n or  document.getElementById(\"Etype\").innerHTML = currEvent; console.groupEnd();\n or  } //Keyboard events document.addEventListener(\"keypress\", getEvtType, false);\n or  //[second] document.addEventListener(\"keydown\", getEvtType, false);\n or  //first document.addEventListener(\"keyup\", getEvtType, false);\n or  //third //Mouse events document.addEventListener(\"click\", getEvtType, false);\n or  // third document.addEventListener(\"mousedown\", getEvtType, false);\n or  //first document.addEventListener(\"mouseup\", getEvtType, false);\n or  //second </script> </head> <body> <p>Press any key or click the mouse to get the event type.</p> <p>Event type: <span id=\"Etype\" style=\"color:red\">-</span></p> </body> </html>);",
        "type": "Event"
    },
    "EventListener.handleEvent": {
        "descr": "The EventListener method handleEvent() method is called by the user agent when an event is sent to the EventListener, in order to handle events that occur on an observed EventTarget.",
        "name": "EventListener.handleEvent",
        "params": [
            {
                "descr": "An Event object describing the event that has been fired and needs to be processed.",
                "name": "event"
            }
        ],
        "path": "dom/eventlistener/handleevent",
        "syntax": "eventListener.handleEvent(event);",
        "type": "Event"
    },
    "EventSource.close": {
        "descr": "The close() method of the EventSource interface closes the connection, if one is made, and sets the EventSource.readyState attribute to 2 (closed).",
        "name": "EventSource.close",
        "params": [],
        "path": "dom/eventsource/close",
        "syntax": "eventSource.close();",
        "type": "Event"
    },
    "EventSource.constructor": {
        "descr": "The EventSource() constructor returns a newly-created EventSource, which represents a remote resource.",
        "name": "EventSource.constructor",
        "params": [
            {
                "descr": "A USVString that represents the location of the remote resource serving the events/messages.",
                "name": "url"
            },
            {
                "descr": "Provides options to configure the new connection. ",
                "name": "configuration Optional"
            }
        ],
        "path": "dom/eventsource/eventsource",
        "syntax": "eventSource = new EventSource(url, configuration);",
        "type": "Event"
    },
    "EventSource.onerror": {
        "descr": "The onerror property of the EventSource interface is an EventHandler called when an error occurs and the error event is dispatched on an EventSource object.",
        "name": "EventSource.onerror",
        "params": [],
        "path": "dom/eventsource/onerror",
        "syntax": "eventSource.onerror = function Examples evtSource.onerror = function() { console.log(\"EventSource failed.\");\n or  };);",
        "type": "Event"
    },
    "EventSource.onmessage": {
        "descr": "The onmessage property of the EventSource interface is an EventHandler called when a message event is received, that is when a message is coming from the source.",
        "name": "EventSource.onmessage",
        "params": [],
        "path": "dom/eventsource/onmessage",
        "syntax": "eventSource.onmessage = function Examples evtSource.onmessage = function(e) { var newElement = document.createElement(\"li\");\n or  newElement.textContent = \"message: \" + e.data; eventList.appendChild(newElement);\n or  });",
        "type": "Event"
    },
    "EventSource.onopen": {
        "descr": "The onopen property of the EventSource interface is an EventHandler called when an open event is received, that is when the connection was just opened.",
        "name": "EventSource.onopen",
        "params": [],
        "path": "dom/eventsource/onopen",
        "syntax": "eventSource.onopen = function Examples evtSource.onopen = function() { console.log(\"Connection to server opened.\");\n or  };);",
        "type": "Event"
    },
    "EventSource.readyState": {
        "descr": "The readyState read-only property of the EventSource interface returns a number representing the state of the connection.",
        "name": "EventSource.readyState",
        "params": [],
        "path": "dom/eventsource/readystate",
        "syntax": "var myReadyState = eventSource.readyState; Value A number representing the state of the connection. Possible values are:   0 — connecting  1 — open  2 — closed  Examples var evtSource = new EventSource('sse.php');\n or  console.log(evtSource.readyState);",
        "type": "Event"
    },
    "EventSource.url": {
        "descr": "The url read-only property of the EventSource interface returns a DOMString representing the URL of the source.",
        "name": "EventSource.url",
        "params": [],
        "path": "dom/eventsource/url",
        "syntax": "var myUrl = eventSource.url; Value A DOMString representing the URL of the source. Examples var evtSource = new EventSource('sse.php');\n or  console.log(evtSource.url);",
        "type": "Event"
    },
    "EventSource.withCredentials": {
        "descr": "The withCredentials read-only property of the EventSource interface returns a Boolean indicating whether the EventSource object was instantiated with CORS credentials set.",
        "name": "EventSource.withCredentials",
        "params": [],
        "path": "dom/eventsource/withcredentials",
        "syntax": "var myWithCredentials = eventSource.withCredentials; Value A Boolean indicating whether the EventSource object was instantiated with CORS credentials set (true), or not (false",
        "type": "Event"
    },
    "EventTarget.addEventListener": {
        "descr": "The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target. Common targets are Element, Document, and Window, but the target may be any object that supports events (such as XMLHttpRequest).",
        "name": "EventTarget.addEventListener",
        "params": [
            {
                "descr": "A case-sensitive string representing the event type to listen for.",
                "name": "type"
            },
            {
                "descr": "The object which receives a notification (an object that implements the Event interface) when an event of the specified type occurs. ",
                "name": "listener"
            },
            {
                "descr": "An options object that specifies characteristics about the event listener. ",
                "name": "options Optional"
            },
            {
                "descr": "A Boolean indicating whether events of this type will be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree. ",
                "name": "useCapture Optional"
            },
            {
                "descr": "A Firefox (Gecko)-specific parameter. ",
                "name": "wantsUntrusted"
            }
        ],
        "path": "dom/eventtarget/addeventlistener",
        "syntax": "target.addEventListener(type, listener[, options]);\n or  target.addEventListener(type, listener[, useCapture]);\n or  target.addEventListener(type, listener[, useCapture, wantsUntrusted ]);\n or  // Gecko/Mozilla only);",
        "type": "Event"
    },
    "EventTarget.constructor": {
        "descr": "The EventTarget() constructor creates a new EventTarget object instance.",
        "name": "EventTarget.constructor",
        "params": [],
        "path": "dom/eventtarget/eventtarget",
        "syntax": "var myEventTarget = new EventTarget();",
        "type": "Event"
    },
    "EventTarget.dispatchEvent": {
        "descr": "Dispatches an Event at the specified EventTarget, (synchronously) invoking the affected EventListeners in the appropriate order. The normal event processing rules (including the capturing and optional bubbling phase) also apply to events dispatched manually with dispatchEvent().",
        "name": "EventTarget.dispatchEvent",
        "params": [],
        "path": "dom/eventtarget/dispatchevent",
        "syntax": "cancelled = !target.dispatchEvent(event)",
        "type": "Event"
    },
    "EventTarget.removeEventListener": {
        "descr": "The EventTarget.removeEventListener() method removes from the EventTarget an event listener previously registered with EventTarget.addEventListener(). The event listener to be removed is identified using a combination of the event type, the event listener function itself, and various optional options that may affect the matching process; see Matching event listeners for removal",
        "name": "EventTarget.removeEventListener",
        "params": [
            {
                "descr": "A string which specifies the type of event for which to remove an event listener.",
                "name": "type"
            },
            {
                "descr": "The EventListener function of the event handler to remove from the event target.",
                "name": "listener"
            },
            {
                "descr": "An options object that specifies characteristics about the event listener. ",
                "name": "options Optional"
            },
            {
                "descr": "Specifies whether the EventListener to be removed is registered as a capturing listener or not. ",
                "name": "useCapture Optional"
            }
        ],
        "path": "dom/eventtarget/removeeventlistener",
        "syntax": "target.removeEventListener(type, listener[, options]);\n or  target.removeEventListener(type, listener[, useCapture]);",
        "type": "Event"
    },
    "ExtendableEvent.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ExtendableEvent.constructor",
        "params": [
            {
                "descr": "The type of the ExtendableEvent, for example install, activate.",
                "name": "type"
            },
            {
                "descr": "An options object containing any custom settings that you want to apply to the event object. ",
                "name": "init Optional"
            }
        ],
        "path": "dom/extendableevent/extendableevent",
        "syntax": "var myExtendableEvent = new ExtendableEvent(type, init);",
        "type": "Service Workers"
    },
    "ExtendableEvent.waitUntil": {
        "descr": "The extendableEvent.waitUntil() method tells the event dispatcher that work is ongoing. It can also be used to detect whether that work was successful. In service workers, waitUntil() tells the browser that work is ongoing until the promise settles, and it shouldn't terminate the service worker if it wants that work to complete.",
        "name": "ExtendableEvent.waitUntil",
        "params": [],
        "path": "dom/extendableevent/waituntil",
        "syntax": "event.waitUntil(promise)",
        "type": "Service Workers"
    },
    "ExtendableMessageEvent.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ExtendableMessageEvent.constructor",
        "params": [
            {
                "descr": "A DOMString that defines the type of the message event being created.",
                "name": "type"
            },
            {
                "descr": "An initialisation object, which should contain the following parameters:   data: The event's data — this can be any type. ",
                "name": "init Optional"
            }
        ],
        "path": "dom/extendablemessageevent/extendablemessageevent",
        "syntax": "var myEME = new ExtendableMessageEvent(type, init);",
        "type": "Service Workers"
    },
    "ExtendableMessageEvent.data": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ExtendableMessageEvent.data",
        "params": [],
        "path": "dom/extendablemessageevent/data",
        "syntax": "var myData = ExtendableMessageEventInstance.data; Value Any data type. Examples When the following code is used inside a service worker to respond to a push messages by sending the data received via PushMessageData to the main context via a channel message, the event object of onmessage will be a ExtendableMessageEvent. var port; self.addEventListener('push', function(e) { var obj = e.data.json();\n or  if(obj.action === 'subscribe' || obj.action === 'unsubscribe') { port.postMessage(obj);\n or  } else if(obj.action === 'init' || obj.action === 'chatMsg') { port.postMessage(obj);\n or  } });\n or  self.onmessage = function(e) { console.log(e.data);\n or  port = e.ports[0]; });",
        "type": "Service Workers"
    },
    "ExtendableMessageEvent.lastEventId": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ExtendableMessageEvent.lastEventId",
        "params": [],
        "path": "dom/extendablemessageevent/lasteventid",
        "syntax": "var myLastEventId = ExtendableMessageEventInstance.lastEventId; Value A DOMString. Examples When the following code is used inside a service worker to respond to a push messages by sending the data received via PushMessageData to the main context via a channel message, the event object of onmessage will be a ExtendableMessageEvent. var port; self.addEventListener('push', function(e) { var obj = e.data.json();\n or  if(obj.action === 'subscribe' || obj.action === 'unsubscribe') { port.postMessage(obj);\n or  } else if(obj.action === 'init' || obj.action === 'chatMsg') { port.postMessage(obj);\n or  } });\n or  self.onmessage = function(e) { console.log(e.lastEventId);\n or  port = e.ports[0]; });",
        "type": "Service Workers"
    },
    "ExtendableMessageEvent.origin": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ExtendableMessageEvent.origin",
        "params": [],
        "path": "dom/extendablemessageevent/origin",
        "syntax": "var myOrigin = ExtendableMessageEventInstance.origin; Value A DOMString. Examples When the following code is used inside a service worker to respond to a push messages by sending the data received via PushMessageData to the main context via a channel message, the event object of onmessage will be a ExtendableMessageEvent. var port; self.addEventListener('push', function(e) { var obj = e.data.json();\n or  if(obj.action === 'subscribe' || obj.action === 'unsubscribe') { port.postMessage(obj);\n or  } else if(obj.action === 'init' || obj.action === 'chatMsg') { port.postMessage(obj);\n or  } });\n or  self.onmessage = function(e) { console.log(e.origin);\n or  port = e.ports[0]; });",
        "type": "Service Workers"
    },
    "ExtendableMessageEvent.ports": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ExtendableMessageEvent.ports",
        "params": [],
        "path": "dom/extendablemessageevent/ports",
        "syntax": "var myPorts = ExtendableMessageEventInstance.ports; Value An array of MessagePort objects. Examples When the following code is used inside a service worker to respond to a push messages by sending the data received via PushMessageData to the main context via a channel message, the event object of onmessage will be a ExtendableMessageEvent. var port; self.addEventListener('push', function(e) { var obj = e.data.json();\n or  if(obj.action === 'subscribe' || obj.action === 'unsubscribe') { port.postMessage(obj);\n or  } else if(obj.action === 'init' || obj.action === 'chatMsg') { port.postMessage(obj);\n or  } });\n or  self.onmessage = function(e) { port = e.ports[0]; });",
        "type": "Service Workers"
    },
    "ExtendableMessageEvent.source": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ExtendableMessageEvent.source",
        "params": [],
        "path": "dom/extendablemessageevent/source",
        "syntax": "var mySource = ExtendableMessageEventInstance.source; Value A Client, ServiceWorker or MessagePort object. Examples When the following code is used inside a service worker to respond to a push messages by sending the data received via PushMessageData to the main context via a channel message, the event object of onmessage will be a ExtendableMessageEvent. var port; self.addEventListener('push', function(e) { var obj = e.data.json();\n or  if(obj.action === 'subscribe' || obj.action === 'unsubscribe') { port.postMessage(obj);\n or  } else if(obj.action === 'init' || obj.action === 'chatMsg') { port.postMessage(obj);\n or  } });\n or  self.onmessage = function(e) { console.log(e.source);\n or  port = e.ports[0]; });",
        "type": "Service Workers"
    },
    "Fetch API: Using Fetch": {
        "descr": "The Fetch API provides a JavaScript interface for accessing and manipulating parts of the HTTP pipeline, such as requests and responses. It also provides a global fetch() method that provides an easy, logical way to fetch resources asynchronously across the network.",
        "name": "Fetch API: Using Fetch",
        "params": [],
        "path": "dom/fetch_api/using_fetch",
        "syntax": "connect-src directive of Content Security Policy rather than the directive of the resources it's retrieving. Supplying request options The fetch()",
        "type": "Fetch"
    },
    "FetchEvent.client": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "FetchEvent.client",
        "params": [],
        "path": "dom/fetchevent/client",
        "syntax": "var myClient = FetchEvent.client; Value A Client object. Example self.addEventListener('fetch', function(event) { console.log(event.client);\n or  ​});",
        "type": "Fetch"
    },
    "FetchEvent.clientId": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "FetchEvent.clientId",
        "params": [],
        "path": "dom/fetchevent/clientid",
        "syntax": "var myClientId = FetchEvent.clientId; Value A DOMString that represents the client ID. Example self.addEventListener('fetch', function(event) { console.log(event.clientId);\n or  ​});",
        "type": "Fetch"
    },
    "FetchEvent.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "FetchEvent.constructor",
        "params": [
            {
                "descr": "The type of the Event.",
                "name": "type"
            },
            {
                "descr": "An options object containing any custom settings that you want to apply to the event object. ",
                "name": "init Optional"
            }
        ],
        "path": "dom/fetchevent/fetchevent",
        "syntax": "var myFetchEvent = new FetchEvent(type, init);",
        "type": "Fetch"
    },
    "FetchEvent.isReload": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "FetchEvent.isReload",
        "params": [],
        "path": "dom/fetchevent/isreload",
        "syntax": "var reloaded = FetchEvent.isReload Value A Boolean. Example self.addEventListener('fetch', function(event) { event.respondWith( if (event.isReload) { //Return something } else { //Return something else }; );\n or  ​});",
        "type": "Fetch"
    },
    "FetchEvent.navigationPreload": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "FetchEvent.navigationPreload",
        "params": [],
        "path": "dom/fetchevent/navigationpreload",
        "syntax": "var promise = fetchEvent.navigationPreload Value A Promise that resolves to the instance of NavigationPreloadManager. Example The following example shows the implementation of a fetch event that uses a preloaded response.  addEventListener('fetch', event => { event.respondWith(async function() { // Respond from the cache if we can const cachedResponse = await caches.match(event.request);\n or  if (cachedResponse) return cachedResponse; // Else, use the preloaded response, if it's there const response = await event.preloadResponse; if (response) return response; // Else try the network. return fetch(event.request);\n or  }());\n or  });",
        "type": "Fetch"
    },
    "FetchEvent.request": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "FetchEvent.request",
        "params": [],
        "path": "dom/fetchevent/request",
        "syntax": "var recentRequest = FetchEvent.request; Value A Request object. Example This code snippet is from the service worker fetch sample (run the fetch sample live). The ServiceWorkerGlobalScope.onfetch",
        "type": "Fetch"
    },
    "FetchEvent.respondWith": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "FetchEvent.respondWith",
        "params": [],
        "path": "dom/fetchevent/respondwith",
        "syntax": "fetchEvent.respondWith( // Promise that resolves to a Response. ​)",
        "type": "Fetch"
    },
    "File": {
        "descr": "The File interface provides information about files and allows JavaScript in a web page to access their content.",
        "name": "File",
        "params": [
            {
                "descr": "Returns a newly constructed File.",
                "name": "File()"
            },
            {
                "descr": "Returns the last modified time of the file, in millisecond since the UNIX epoch (January 1st, 1970 at Midnight).",
                "name": "File.lastModified Read only"
            },
            {
                "descr": "Returns the last modified DateDate of the file referenced by the File object.",
                "name": "File.lastModifiedDate Read only"
            },
            {
                "descr": "Returns the name of the file referenced by the File object.",
                "name": "File.name Read only"
            },
            {
                "descr": "Returns the path the URL of the File is relative to.",
                "name": "File.webkitRelativePath Read only"
            },
            {
                "descr": "Returns the size of the file in bytes.",
                "name": "File.size Read only"
            },
            {
                "descr": "Returns the MIME type of the file.",
                "name": "File.type Read only"
            },
            {
                "descr": "Returns a new Blob object containing the data in the specified range of bytes of the source Blob.",
                "name": "Blob.slice([start[, end[, contentType]]])"
            }
        ],
        "path": "dom/file",
        "syntax": "File.fileName, File.fileSize, File.getAsBinary()",
        "type": "File"
    },
    "File.Using files from web applications": {
        "descr": "Using the File API, which was added to the DOM in HTML5, it's now possible for web content to ask the user to select local files and then read the contents of those files. This selection can be done by either using an HTML <input> element or by drag and drop.",
        "name": "File.Using files from web applications",
        "params": [
            {
                "descr": "The file's name as a read-only string. ",
                "name": "name"
            },
            {
                "descr": "The size of the file in bytes as a read-only 64-bit integer.",
                "name": "size"
            },
            {
                "descr": "The MIME type of the file as a read-only string or \"\" if the type couldn't be determined.",
                "name": "type"
            }
        ],
        "path": "dom/file/using_files_from_web_applications",
        "syntax": "handleFiles()",
        "type": "File"
    },
    "File.constructor": {
        "descr": "The File() constructor creates a new File object instance.",
        "name": "File.constructor",
        "params": [
            {
                "descr": "An Array of ArrayBuffer, ArrayBufferView, Blob, or DOMString objects — or a mix of any such objects. ",
                "name": "bits"
            },
            {
                "descr": "A USVString representing the file name or the path to the file.",
                "name": "name"
            },
            {
                "descr": "An options object containing optional attributes for the file. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/file/file",
        "syntax": "File(bits, name [, options]);",
        "type": "File"
    },
    "File.lastModified": {
        "descr": "The File.lastModified read-only property provides the last modified date of the file as the number of milliseconds since the Unix epoch (January 1, 1970 at midnight). Files without a known last modified date return the current date.",
        "name": "File.lastModified",
        "params": [],
        "path": "dom/file/lastmodified",
        "syntax": "var time = instanceOfFile.lastModified;  Value A number that represents the number of milliseconds since the Unix epoch. Example Reading from file input <input type=\"file\" multiple id=\"fileInput\">  const fileInput = document.getElementById('fileInput');\n or  fileInput.addEventListener('change', function(event) { // files is a FileList object (similar to NodeList) const files = event.target.files; for (let i = 0; i < files.length; i++) { const date = new Date(files[i].lastModified);\n or  alert(files[i].name + ' has a last modified date of ' + date);\n or  } });",
        "type": "File"
    },
    "File.name": {
        "descr": "Returns the name of the file represented by a File object. For security reasons, the path is excluded from this property.",
        "name": "File.name",
        "params": [],
        "path": "dom/file/name",
        "syntax": "var name = file.name; Value A string, containing the name of the file without path, such as \"My Resume.rtf\". Example <input type=\"file\" multiple onchange=\"processSelectedFiles(this)\">",
        "type": "File"
    },
    "File.type": {
        "descr": "Returns the media type (MIME) of the file represented by a File object.",
        "name": "File.type",
        "params": [],
        "path": "dom/file/type",
        "syntax": "var name = file.type; Value A string, containing the media type(MIME) indicating what type of the file is it for example \"image/png\" for PNG images",
        "type": "File"
    },
    "FileReader.abort": {
        "descr": "The abort method aborts the read operation. Upon return, the readyState will be DONE.",
        "name": "FileReader.abort",
        "params": [
            {
                "descr": "Thrown when abort is called while no read operation is in progress (that is, the state isn't LOADING).",
                "name": "DOM_FILE_ABORT_ERR"
            }
        ],
        "path": "dom/filereader/abort",
        "syntax": "instanceOfFileReader.abort();",
        "type": "File"
    },
    "FileReader.constructor": {
        "descr": "The FileReader() constructor creates a new FileReader.",
        "name": "FileReader.constructor",
        "params": [],
        "path": "dom/filereader/filereader",
        "syntax": "var reader = new FileReader();",
        "type": "File"
    },
    "FileReader.onabort": {
        "descr": "The FileReader.onabort property contains an event handler executed when the abort event is fired, i.e. when the process of reading the file is aborted.",
        "name": "FileReader.onabort",
        "params": [],
        "path": "dom/filereader/onabort",
        "syntax": "reader.onabort = function() { ... };",
        "type": "File"
    },
    "FileReader.readAsArrayBuffer": {
        "descr": "The FileReader interface's readAsArrayBuffer() method is used to start reading the contents of a specified Blob or File. When the read operation is finished, the readyState becomes DONE, and the loadend is triggered. At that time, the result attribute contains an ArrayBuffer representing the file's data.",
        "name": "FileReader.readAsArrayBuffer",
        "params": [
            {
                "descr": "The Blob or File from which to read.",
                "name": "blob"
            }
        ],
        "path": "dom/filereader/readasarraybuffer",
        "syntax": "instanceOfFileReader.readAsArrayBuffer(blob);",
        "type": "File"
    },
    "FileReader.readAsBinaryString": {
        "descr": "The readAsBinaryString method is used to start reading the contents of the specified Blob or File. When the read operation is finished, the readyState becomes DONE, and the loadend is triggered. At that time, the result attribute contains the raw binary data from the file.",
        "name": "FileReader.readAsBinaryString",
        "params": [
            {
                "descr": "The Blob or File from which to read.",
                "name": "blob"
            }
        ],
        "path": "dom/filereader/readasbinarystring",
        "syntax": "instanceOfFileReader.readAsBinaryString(blob);",
        "type": "File"
    },
    "FileReader.readAsDataURL": {
        "descr": "The readAsDataURL method is used to read the contents of the specified Blob or File. When the read operation is finished, the readyState becomes DONE, and the loadend is triggered. At that time, the result attribute contains the data as a data: URL representing the file's data as a base64 encoded string.",
        "name": "FileReader.readAsDataURL",
        "params": [
            {
                "descr": "The Blob or File from which to read.",
                "name": "blob"
            }
        ],
        "path": "dom/filereader/readasdataurl",
        "syntax": "instanceOfFileReader.readAsDataURL(blob);",
        "type": "File"
    },
    "FileReader.readAsText": {
        "descr": "The readAsText method is used to read the contents of the specified Blob or File. When the read operation is complete, the readyState is changed to DONE, the loadend event is triggered, and the result attribute contains the contents of the file as a text string.",
        "name": "FileReader.readAsText",
        "params": [
            {
                "descr": "The Blob or File from which to read.",
                "name": "blob"
            },
            {
                "descr": "A string specifying the encoding to use for the returned data. ",
                "name": "encoding Optional"
            }
        ],
        "path": "dom/filereader/readastext",
        "syntax": "instanceOfFileReader.readAsText(blob[, encoding]);",
        "type": "File"
    },
    "FileReader.result": {
        "descr": "The FileReader result property returns the file's contents. This property is only valid after the read operation is complete, and the format of the data depends on which of the methods was used to initiate the read operation.",
        "name": "FileReader.result",
        "params": [],
        "path": "dom/filereader/result",
        "syntax": "var file = instanceOfFileReader.result  Value An appropiate string or ArrayBuffer based on which of the reading methods was used to initiate the read operation. The value is null if the reading is not yet complete or was unsuccessful. The result types are described below.    Method Description     readAsArrayBuffer()",
        "type": "File"
    },
    "FileSystemDirectoryEntry.createReader": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "FileSystemDirectoryEntry.createReader",
        "params": [],
        "path": "dom/filesystemdirectoryentry/createreader",
        "syntax": "directoryReader = FileSystemDirectoryEntry.createReader();",
        "type": "File"
    },
    "FileSystemDirectoryEntry.getDirectory": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "FileSystemDirectoryEntry.getDirectory",
        "params": [
            {
                "descr": "A USVString representing an absolute path or a path relative to the directory on which the method is called, describing which directory entry to return. ",
                "name": "path Optional"
            },
            {
                "descr": "An object based on the FileSystemFlags dictionary, which allows you to specify whether or not to create the entry if it's missing and if it's an error if the file already exists. ",
                "name": "options Optional"
            },
            {
                "descr": "A method to be called once the FileSystemDirectoryEntry has been created. ",
                "name": "successCallback Optional"
            },
            {
                "descr": "A method to be called if an error occurs. ",
                "name": "errorCallback Optional"
            },
            {
                "descr": "The create option was not specified (or was specified as false), and the directory doesn't exist.",
                "name": "FileError.NOT_FOUND_ERR"
            },
            {
                "descr": "The create and exclusive options were both true, indicating that the directory should be created but must not already exist, but the directory does in fact already exist.",
                "name": "FileError.PATH_EXISTS_ERR"
            },
            {
                "descr": "The request to access the directory was denied for security reasons.",
                "name": "FileError.SECURITY_ERR"
            },
            {
                "descr": "The path specified is not a directory; it's probably a file, but might be an unsupported file descriptor such as a pipe; this depends on the user agent to some extent.",
                "name": "FileError.TYPE_MISMATCH_ERR"
            },
            {
                "descr": "If this property is true, and the requested file or directory doesn't exist, the user agent should create it. ",
                "name": "create Optional"
            },
            {
                "descr": "If true, and the create option is also true, the file must not exist prior to issuing the call. ",
                "name": "exclusive Optional"
            }
        ],
        "path": "dom/filesystemdirectoryentry/getdirectory",
        "syntax": "FileSystemDirectoryEntry.getDirectory([path][, options][, successCallback][, errorCallback]);",
        "type": "File"
    },
    "FileSystemDirectoryEntry.getFile": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "FileSystemDirectoryEntry.getFile",
        "params": [
            {
                "descr": "A USVString specifying the path, relative to the directory on which the method is called, describing which file's entry to return.",
                "name": "path Optional"
            },
            {
                "descr": "An object based on the FileSystemFlags dictionary, which allows you to specify whether or not to create the entry if it's missing and if it's an error if the file already exists. ",
                "name": "options Optional"
            },
            {
                "descr": "A method to be called once the FileSystemFileEntry has been created. ",
                "name": "successCallback Optional"
            },
            {
                "descr": "A method to be called if an error occurs. ",
                "name": "errorCallback Optional"
            },
            {
                "descr": "The create option was not specified (or was specified as false), and the file doesn't exist.",
                "name": "FileError.NOT_FOUND_ERR"
            },
            {
                "descr": "The create and exclusive options were both true, indicating that the file should be created but must not already exist, but the file does in fact already exist.",
                "name": "FileError.PATH_EXISTS_ERR"
            },
            {
                "descr": "The request to access the file was denied for security reasons.",
                "name": "FileError.SECURITY_ERR"
            },
            {
                "descr": "The path specified is not a file; it's probably a directory, but might be an unsupported file descriptor such as a pipe; this depends on the user agent to some extent.",
                "name": "FileError.TYPE_MISMATCH_ERR"
            },
            {
                "descr": "If this property is true, and the requested file or directory doesn't exist, the user agent should create it. ",
                "name": "create Optional"
            },
            {
                "descr": "If true, and the create option is also true, the file must not exist prior to issuing the call. ",
                "name": "exclusive Optional"
            }
        ],
        "path": "dom/filesystemdirectoryentry/getfile",
        "syntax": "FileSystemDirectoryEntry.getFile([path][, options][, successCallback][, errorCallback]);",
        "type": "File"
    },
    "FileSystemDirectoryEntry.removeRecursively": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "FileSystemDirectoryEntry.removeRecursively",
        "params": [
            {
                "descr": "A function to call once the directory removal process has completed. ",
                "name": "successCallback"
            },
            {
                "descr": "A function to be called if an error occurs while attempting to remove the directory subtree. ",
                "name": "errorCallback Optional"
            },
            {
                "descr": "An attempt was made to remove the root directory; this is not permitted.",
                "name": "FileError.INVALID_MODIFICATION_ERR"
            },
            {
                "descr": "The file system's state doesn't permit modification.",
                "name": "FileError.NO_MODIFICATION_ALLOWED_ERR"
            },
            {
                "descr": "The directory represented by the FileSystemDirectoryEntry no longer exists.",
                "name": "FileError.NOT_FOUND_ERR"
            },
            {
                "descr": "The directory is not accessible; perhaps it's in use by another application or is locked at the operating system level.",
                "name": "FileError.NOT_READABLE_ERR"
            },
            {
                "descr": "The directory could not be removed for security reasons. ",
                "name": "FileError.SECURITY_ERR"
            }
        ],
        "path": "dom/filesystemdirectoryentry/removerecursively",
        "syntax": "FileSystemDirectoryEntry.removeRecursively(successCallback[, errorCallback]);",
        "type": "File"
    },
    "FileSystemDirectoryReader.readEntries": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "FileSystemDirectoryReader.readEntries",
        "params": [
            {
                "descr": "A function which is called when the directory's contents have been retrieved. ",
                "name": "successCallback"
            },
            {
                "descr": "A callback function which is called if an error occurs while reading from the directory. ",
                "name": "errorCallback Optional"
            }
        ],
        "path": "dom/filesystemdirectoryreader/readentries",
        "syntax": "readEntries(successCallback[, errorCallback]);",
        "type": "File"
    },
    "FileSystemEntry.copyTo": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "FileSystemEntry.copyTo",
        "params": [
            {
                "descr": "A FileSystemDirectoryEntry object specifying the destination directory for the copy operation.",
                "name": "newParent"
            },
            {
                "descr": "If this parameter is provided, the copy is given this string as its new file or directory name.",
                "name": "newName Optional"
            },
            {
                "descr": "A function which is called when the copy operation is succesfully completed. ",
                "name": "successCallback Optional"
            },
            {
                "descr": "An optional callback which is executed if an error occurs while copying the items. ",
                "name": "errorCallback Optional"
            },
            {
                "descr": "The requested operation involves an impossible change, such as moving a directory inside itself or one of its own child directories, or copying an item within the same directory without renaming it.",
                "name": "FileError.INVALID_MODIFICATION_ERR"
            },
            {
                "descr": "The operation exceeded the user's storage quota, or there isn't enough storage space left to complete the operation.",
                "name": "FileError.QUOTA_EXCEEDED_ERR"
            }
        ],
        "path": "dom/filesystementry/copyto",
        "syntax": "FileSystemEntry.copyTo(newParent[, newName][, successCallback][, errorCallback]);",
        "type": "File"
    },
    "FileSystemEntry.fullPath": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "FileSystemEntry.fullPath",
        "params": [],
        "path": "dom/filesystementry/fullpath",
        "syntax": "var fullPath = FileSystemEntry.fullPath; Value A USVString indicating the entry's full path. Example This example shows a function which is called with a file system; it then gets a FileSystemFileEntry for a file named data.json and returns its full path. function gotFileSystem(fs) { let path = \"\"; fs.root.getFile(\"data.json\", { create: true, exclusive: true }, function(entry) { path = fullPath; }, handleError(error));\n or  return path; });",
        "type": "File"
    },
    "FileSystemEntry.getMetadata": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "FileSystemEntry.getMetadata",
        "params": [
            {
                "descr": "A function which is called when the copy operation is succesfully completed. ",
                "name": "successCallback"
            },
            {
                "descr": "An optional callback which is executed if an error occurs while looking up the metadata. ",
                "name": "errorCallback Optional"
            },
            {
                "descr": "The FileSystemEntry refers to an item which doesn't exist.",
                "name": "FileError.NOT_FOUND_ERR"
            },
            {
                "descr": "Security restrictions prohibit obtaining the requested metadata.",
                "name": "FileError.SECURITY_ERR"
            }
        ],
        "path": "dom/filesystementry/getmetadata",
        "syntax": "FileSystemEntry.getMetadata(successCallback[, errorCallback]);",
        "type": "File"
    },
    "FileSystemEntry.getParent": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "FileSystemEntry.getParent",
        "params": [
            {
                "descr": "A function which is called when the parent directory entry has been retrieved. ",
                "name": "successCallback"
            },
            {
                "descr": "An optional callback which is executed if an error occurs. ",
                "name": "errorCallback Optional"
            },
            {
                "descr": "The operation failed because the file system's state doesn't permit it. ",
                "name": "FileError.INVALID_STATE_ERR"
            },
            {
                "descr": "The specified path could not be found.",
                "name": "FileError.NOT_FOUND_ERR"
            },
            {
                "descr": "Security restrictions prohibit obtaining the parent directory's information.",
                "name": "FileError.SECURITY_ERR"
            }
        ],
        "path": "dom/filesystementry/getparent",
        "syntax": "FileSystemEntry.getParent(successCallback[, errorCallback]);",
        "type": "File"
    },
    "FileSystemEntry.isDirectory": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "FileSystemEntry.isDirectory",
        "params": [],
        "path": "dom/filesystementry/isdirectory",
        "syntax": "var isDirectory = FileSystemEntry.isDirectory; Value A Boolean indicating whether or not the FileSystemEntry is a directory. Example This example shows how this property might be used to determine whether to process the entry as a directory or file. If the entry is neither, an error handler is called with an appropriate message. if (entry.isDirectory) { processSubdirectory(entry);\n or  } else if (entry.isFile) { processFile(entry);\n or  } else { displayErrorMessage(\"Unsupported file system entry specified.\");\n or  });",
        "type": "File"
    },
    "FileSystemEntry.isFile": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "FileSystemEntry.isFile",
        "params": [],
        "path": "dom/filesystementry/isfile",
        "syntax": "var isFile = FileSystemEntry.isFile; Value A Boolean indicating whether or not the FileSystemEntry is a file. Example This example shows how this property might be used to determine whether to process the entry as a directory or file. If the entry is neither, an error handler is called with an appropriate message. if (entry.isDirectory) { processSubdirectory(entry);\n or  } else if (entry.isFile) { processFile(entry);\n or  } else { displayErrorMessage(\"Unsupported file system entry specified.\");\n or  });",
        "type": "File"
    },
    "FileSystemEntry.moveTo": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "FileSystemEntry.moveTo",
        "params": [
            {
                "descr": "A FileSystemDirectoryEntry object specifying the destination directory for the move operation.",
                "name": "newParent"
            },
            {
                "descr": "If this parameter is provided, the entry is renamed to have this string as its new file or directory name.",
                "name": "newName Optional"
            },
            {
                "descr": "A function which is called when the move operation is succesfully completed. ",
                "name": "successCallback Optional"
            },
            {
                "descr": "An optional callback which is executed if an error occurs while moving the items. ",
                "name": "errorCallback Optional"
            },
            {
                "descr": "The requested operation involves an impossible change, such as moving a directory inside itself or one of its own child directories, or copying an item within the same directory without renaming it.",
                "name": "FileError.INVALID_MODIFICATION_ERR"
            },
            {
                "descr": "The operation exceeded the user's storage quota, or there isn't enough storage space left to complete the operation.",
                "name": "FileError.QUOTA_EXCEEDED_ERR"
            }
        ],
        "path": "dom/filesystementry/moveto",
        "syntax": "FileSystemEntry.moveTo(newParent[, newName][, successCallback][, errorCallback]);",
        "type": "File"
    },
    "FileSystemEntry.name": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "FileSystemEntry.name",
        "params": [],
        "path": "dom/filesystementry/name",
        "syntax": "var name = FileSystemEntry.name; Value A USVString indicating the entry's name. Example This example shows a function called isFileWithExtension()",
        "type": "File"
    },
    "FileSystemEntry.remove": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "FileSystemEntry.remove",
        "params": [
            {
                "descr": "A function which is called once the file has been successfully removed.",
                "name": "successCallback"
            },
            {
                "descr": "An optional callback which is called if the attempt to remove the file fails.",
                "name": "errorCallback Optional"
            },
            {
                "descr": "The specified entry was the file system's root directory, or the specified entry is a directory which isn't empty.",
                "name": "FileError.INVALID_MODIFICATION_ERR"
            },
            {
                "descr": "The file system's cached state is inconsistent with its state on disk, so the file could not be deleted for safety reasons.",
                "name": "FileError.INVALID_STATE_ERR"
            },
            {
                "descr": "The file system's state doesn't permit removing the file or directory.",
                "name": "FileError.NO_MODIFICATION_ALLOWED_ERR"
            },
            {
                "descr": "The file or directory doesn't exist.",
                "name": "FileError.NOT_FOUND_ERR"
            },
            {
                "descr": "The entry couldn't be removed due to permissions or other access constraints, or because there are too many calls being made on file resources.",
                "name": "FileError.SECURITY_ERR"
            }
        ],
        "path": "dom/filesystementry/remove",
        "syntax": "FileSystemEntry.remove(successCallback[, errorCallback]);",
        "type": "File"
    },
    "FileSystemEntry.toURL": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "FileSystemEntry.toURL",
        "params": [
            {
                "descr": "An optional string specifying the MIME type to use when interpreting the file. ",
                "name": "mimeType Optional"
            }
        ],
        "path": "dom/filesystementry/tourl",
        "syntax": "FileSystemEntry.toURL([mimeType]);",
        "type": "File"
    },
    "FileSystemFileEntry.createWriter": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "FileSystemFileEntry.createWriter",
        "params": [
            {
                "descr": "A callback function which is called when the FileWriter has been created successfully; the FileWriter is passed into the callback as the only parameter.",
                "name": "successCallback"
            },
            {
                "descr": "If provided, this must be a method which is caled when an error occurs while trying to create the FileWriter. ",
                "name": "errorCallback Optional"
            }
        ],
        "path": "dom/filesystemfileentry/createwriter",
        "syntax": "FileSystemFileEntry.createWriter(successCallback[, errorCallback]);",
        "type": "File"
    },
    "FileSystemFileEntry.file": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "FileSystemFileEntry.file",
        "params": [
            {
                "descr": "A callback function which is called when the File has been created successfully; the File is passed into the callback as the only parameter.",
                "name": "successCallback"
            },
            {
                "descr": "If provided, this must be a method which is called when an error occurs while trying to create the File. ",
                "name": "errorCallback Optional"
            }
        ],
        "path": "dom/filesystemfileentry/file",
        "syntax": "FileSystemFileEntry.file(successCallback[, errorCallback]);",
        "type": "File"
    },
    "FileSystemFlags.create": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "FileSystemFlags.create",
        "params": [],
        "path": "dom/filesystemflags/create",
        "syntax": "fileSystemFlags.create = booleanValue  Values The table below describes the result of each possible combination of these flags depending on whether or not the target file or directory path already exists.    Option values File/directory condition Result   create exclusive     false n/a[1]  Path exists and matches the desired type (depending on whether the function called is getFile()",
        "type": "File"
    },
    "FileSystemFlags.exclusive": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "FileSystemFlags.exclusive",
        "params": [],
        "path": "dom/filesystemflags/exclusive",
        "syntax": "fileSystemFlags.exclusive = booleanValue  Values The table below describes the result of each possible combination of these flags depending on whether or not the target file or directory path already exists.    Option values File/directory condition Result   create exclusive     false n/a[1]  Path exists and matches the desired type (depending on whether the function called is getFile()",
        "type": "File"
    },
    "Float32Array": {
        "descr": "The Float32Array typed array represents an array of 32-bit floating point numbers (corresponding to the C float data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
        "name": "Float32Array",
        "params": [
            {
                "descr": "Returns a number value of the element size. ",
                "name": "Float32Array.BYTES_PER_ELEMENT"
            },
            {
                "descr": "Static length property whose value is 0. ",
                "name": "Float32Array.length"
            },
            {
                "descr": "Returns the string value of the constructor name. ",
                "name": "Float32Array.name"
            },
            {
                "descr": "Prototype for the TypedArray objects.",
                "name": "Float32Array.prototype"
            },
            {
                "descr": "Creates a new Float32Array from an array-like or iterable object. ",
                "name": "Float32Array.from()"
            },
            {
                "descr": "Creates a new Float32Array with a variable number of arguments. ",
                "name": "Float32Array.of()"
            },
            {
                "descr": "Returns the function that created an instance's prototype. ",
                "name": "Float32Array.prototype.constructor"
            },
            {
                "descr": "Returns the ArrayBuffer referenced by the Float32Array Fixed at construction time and thus read only.",
                "name": "Float32Array.prototype.buffer Read only"
            },
            {
                "descr": "Returns the length (in bytes) of the Float32Array from the start of its ArrayBuffer. ",
                "name": "Float32Array.prototype.byteLength Read only"
            },
            {
                "descr": "Returns the offset (in bytes) of the Float32Array from the start of its ArrayBuffer. ",
                "name": "Float32Array.prototype.byteOffset Read only"
            },
            {
                "descr": "Returns the number of elements hold in the Float32Array. ",
                "name": "Float32Array.prototype.length Read only"
            },
            {
                "descr": "Copies a sequence of array elements within the array. ",
                "name": "Float32Array.prototype.copyWithin()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the key/value pairs for each index in the array. ",
                "name": "Float32Array.prototype.entries()"
            },
            {
                "descr": "Tests whether all elements in the array pass the test provided by a function. ",
                "name": "Float32Array.prototype.every()"
            },
            {
                "descr": "Fills all the elements of an array from a start index to an end index with a static value. ",
                "name": "Float32Array.prototype.fill()"
            },
            {
                "descr": "Creates a new array with all of the elements of this array for which the provided filtering function returns true. ",
                "name": "Float32Array.prototype.filter()"
            },
            {
                "descr": "Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found. ",
                "name": "Float32Array.prototype.find()"
            },
            {
                "descr": "Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found. ",
                "name": "Float32Array.prototype.findIndex()"
            },
            {
                "descr": "Calls a function for each element in the array. ",
                "name": "Float32Array.prototype.forEach()"
            },
            {
                "descr": "Determines whether a typed array includes a certain element, returning true or false as appropriate. ",
                "name": "Float32Array.prototype.includes()"
            },
            {
                "descr": "Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. ",
                "name": "Float32Array.prototype.indexOf()"
            },
            {
                "descr": "Joins all elements of an array into a string. ",
                "name": "Float32Array.prototype.join()"
            },
            {
                "descr": "Returns a new Array Iterator that contains the keys for each index in the array. ",
                "name": "Float32Array.prototype.keys()"
            },
            {
                "descr": "Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found. ",
                "name": "Float32Array.prototype.lastIndexOf()"
            },
            {
                "descr": "Creates a new array with the results of calling a provided function on every element in this array. ",
                "name": "Float32Array.prototype.map()"
            },
            {
                "descr": "Former non-standard version of Float32Array.prototype.copyWithin().",
                "name": "Float32Array.prototype.move() Unimplemented"
            },
            {
                "descr": "Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value. ",
                "name": "Float32Array.prototype.reduce()"
            },
            {
                "descr": "Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value. ",
                "name": "Float32Array.prototype.reduceRight()"
            },
            {
                "descr": "Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first. ",
                "name": "Float32Array.prototype.reverse()"
            },
            {
                "descr": "Stores multiple values in the typed array, reading input values from a specified array.",
                "name": "Float32Array.prototype.set()"
            },
            {
                "descr": "Extracts a section of an array and returns a new array. ",
                "name": "Float32Array.prototype.slice()"
            },
            {
                "descr": "Returns true if at least one element in this array satisfies the provided testing function. ",
                "name": "Float32Array.prototype.some()"
            },
            {
                "descr": "Sorts the elements of an array in place and returns the array. ",
                "name": "Float32Array.prototype.sort()"
            },
            {
                "descr": "Returns a new Float32Array from the given start and end element index.",
                "name": "Float32Array.prototype.subarray()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array. ",
                "name": "Float32Array.prototype.values()"
            },
            {
                "descr": "Returns a localized string representing the array and its elements. ",
                "name": "Float32Array.prototype.toLocaleString()"
            },
            {
                "descr": "Returns a string representing the array and its elements. ",
                "name": "Float32Array.prototype.toString()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array.",
                "name": "Float32Array.prototype[@@iterator]()"
            }
        ],
        "path": "javascript/global_objects/float32array",
        "syntax": "new Float32Array();\n or  // new in ES2017 new Float32Array(length);\n or  new Float32Array(typedArray);\n or  new Float32Array(object);\n or  new Float32Array(buffer [, byteOffset [, length]]);",
        "type": "Global Objects"
    },
    "Float64Array": {
        "descr": "The Float64Array typed array represents an array of 64-bit floating point numbers (corresponding to the C double data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
        "name": "Float64Array",
        "params": [
            {
                "descr": "Returns a number value of the element size. ",
                "name": "Float64Array.BYTES_PER_ELEMENT"
            },
            {
                "descr": "Static length property whose value is 0. ",
                "name": "Float64Array.length"
            },
            {
                "descr": "Returns the string value of the constructor name. ",
                "name": "Float64Array.name"
            },
            {
                "descr": "Prototype for the TypedArray objects.",
                "name": "Float64Array.prototype"
            },
            {
                "descr": "Creates a new Float64Array from an array-like or iterable object. ",
                "name": "Float64Array.from()"
            },
            {
                "descr": "Creates a new Float64Array with a variable number of arguments. ",
                "name": "Float64Array.of()"
            },
            {
                "descr": "Returns the function that created an instance's prototype. ",
                "name": "Float64Array.prototype.constructor"
            },
            {
                "descr": "Returns the ArrayBuffer referenced by the Float64Array Fixed at construction time and thus read only.",
                "name": "Float64Array.prototype.buffer Read only"
            },
            {
                "descr": "Returns the length (in bytes) of the Float64Array from the start of its ArrayBuffer. ",
                "name": "Float64Array.prototype.byteLength Read only"
            },
            {
                "descr": "Returns the offset (in bytes) of the Float64Array from the start of its ArrayBuffer. ",
                "name": "Float64Array.prototype.byteOffset Read only"
            },
            {
                "descr": "Returns the number of elements hold in the Float64Array. ",
                "name": "Float64Array.prototype.length Read only"
            },
            {
                "descr": "Copies a sequence of array elements within the array. ",
                "name": "Float64Array.prototype.copyWithin()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the key/value pairs for each index in the array. ",
                "name": "Float64Array.prototype.entries()"
            },
            {
                "descr": "Tests whether all elements in the array pass the test provided by a function. ",
                "name": "Float64Array.prototype.every()"
            },
            {
                "descr": "Fills all the elements of an array from a start index to an end index with a static value. ",
                "name": "Float64Array.prototype.fill()"
            },
            {
                "descr": "Creates a new array with all of the elements of this array for which the provided filtering function returns true. ",
                "name": "Float64Array.prototype.filter()"
            },
            {
                "descr": "Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found. ",
                "name": "Float64Array.prototype.find()"
            },
            {
                "descr": "Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found. ",
                "name": "Float64Array.prototype.findIndex()"
            },
            {
                "descr": "Calls a function for each element in the array. ",
                "name": "Float64Array.prototype.forEach()"
            },
            {
                "descr": "Determines whether a typed array includes a certain element, returning true or false as appropriate. ",
                "name": "Float64Array.prototype.includes()"
            },
            {
                "descr": "Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. ",
                "name": "Float64Array.prototype.indexOf()"
            },
            {
                "descr": "Joins all elements of an array into a string. ",
                "name": "Float64Array.prototype.join()"
            },
            {
                "descr": "Returns a new Array Iterator that contains the keys for each index in the array. ",
                "name": "Float64Array.prototype.keys()"
            },
            {
                "descr": "Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found. ",
                "name": "Float64Array.prototype.lastIndexOf()"
            },
            {
                "descr": "Creates a new array with the results of calling a provided function on every element in this array. ",
                "name": "Float64Array.prototype.map()"
            },
            {
                "descr": "Former non-standard version of Float64Array.prototype.copyWithin().",
                "name": "Float64Array.prototype.move() Unimplemented"
            },
            {
                "descr": "Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value. ",
                "name": "Float64Array.prototype.reduce()"
            },
            {
                "descr": "Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value. ",
                "name": "Float64Array.prototype.reduceRight()"
            },
            {
                "descr": "Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first. ",
                "name": "Float64Array.prototype.reverse()"
            },
            {
                "descr": "Stores multiple values in the typed array, reading input values from a specified array.",
                "name": "Float64Array.prototype.set()"
            },
            {
                "descr": "Extracts a section of an array and returns a new array. ",
                "name": "Float64Array.prototype.slice()"
            },
            {
                "descr": "Returns true if at least one element in this array satisfies the provided testing function. ",
                "name": "Float64Array.prototype.some()"
            },
            {
                "descr": "Sorts the elements of an array in place and returns the array. ",
                "name": "Float64Array.prototype.sort()"
            },
            {
                "descr": "Returns a new Float64Array from the given start and end element index.",
                "name": "Float64Array.prototype.subarray()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array. ",
                "name": "Float64Array.prototype.values()"
            },
            {
                "descr": "Returns a localized string representing the array and its elements. ",
                "name": "Float64Array.prototype.toLocaleString()"
            },
            {
                "descr": "Returns a string representing the array and its elements. ",
                "name": "Float64Array.prototype.toString()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array.",
                "name": "Float64Array.prototype[@@iterator]()"
            }
        ],
        "path": "javascript/global_objects/float64array",
        "syntax": "new Float64Array();\n or  // new in ES2017 new Float64Array(length);\n or  new Float64Array(typedArray);\n or  new Float64Array(object);\n or  new Float64Array(buffer [, byteOffset [, length]]);",
        "type": "Global Objects"
    },
    "FocusEvent.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "FocusEvent.constructor",
        "params": [
            {
                "descr": "Is a DOMString representing the name of the event.",
                "name": "typeArg"
            },
            {
                "descr": "Is a FocusEventInit dictionary, having the following fields:   \"relatedTarget\", optional and defaulting to null, is an EventTarget representing the secondary target of a FocusEvent. ",
                "name": "focusEventInitOptional"
            }
        ],
        "path": "dom/focusevent/focusevent",
        "syntax": "var focusEvent = new FocusEvent(typeArg, focusEventInit);",
        "type": "Events"
    },
    "FocusEvent.relatedTarget": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "FocusEvent.relatedTarget",
        "params": [],
        "path": "dom/focusevent/relatedtarget",
        "syntax": "secondTarget = focusEvent.relatedTarget Specifications    Specification Status Comment   Document Object Model (DOM) Level 3 Events SpecificationThe definition of 'FocusEvent.relatedTarget' in that specification. Obsolete Initial definition.    Browser compatibilityUpdate compatibility data on GitHub",
        "type": "Events"
    },
    "FontFace.constructor": {
        "descr": "Draft This page is not complete.",
        "name": "FontFace.constructor",
        "params": [
            {
                "descr": "Specifies a name that will be used as the font face value for font properties. ",
                "name": "family"
            },
            {
                "descr": "The font source. This can be either:  A URL Binary font data",
                "name": "source"
            },
            {
                "descr": "A set of optional descriptors passed as an object. ",
                "name": "descriptors Optional"
            }
        ],
        "path": "dom/fontface/fontface",
        "syntax": "var fontFace = new FontFace(family, source, descriptors);",
        "type": "CSS"
    },
    "FontFace.display": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "FontFace.display",
        "params": [
            {
                "descr": "The browser invisibly prepares a fallback font. ",
                "name": "block period"
            },
            {
                "descr": "If the font face is still not loaded, the fallback font will be shown. ",
                "name": "swap period"
            },
            {
                "descr": "If the font face still is not loaded, the fallback font will be shown and no swap will occur.",
                "name": "failure period"
            }
        ],
        "path": "dom/fontface/display",
        "syntax": "var display = FontFace.display FontFace.display = display Value A CSSOMString with one of the following values.   'auto': Use the font display strategy provided by the user agent.  'block': Gives the font face a short block period and an infinite swap period. The spec recommends 3 seconds for the block period, though this may vary from browser to browser.  'fallback': Gives the font face a short block period and a short swap period. The spec recommends 100 ms or less for the block period and 3 seconds for the swap period, though these values may vary from browser to browser.  'optional': Gives the font face a short block period and no swap period. The spec recommends 100 ms or less, though this may vary from browser to browser.  'swap': Gives the font face a 0 second block period and an infinite swap period.  Specifications    Specification Status Comment   CSS Font Loading Module Level 3The definition of 'display' in that specification. Working Draft Initial definition.   CSS Fonts Module Level 4The definition of 'font-display' in that specification. Working Draft Defines the values for the display property. (They are the same as for font-display.)    Browser CompatibilityUpdate compatibility data on GitHub",
        "type": "CSS"
    },
    "FontFace.family": {
        "descr": "Draft This page is not complete.",
        "name": "FontFace.family",
        "params": [],
        "path": "dom/fontface/family",
        "syntax": "instanceOfFontFace.family = 'font family name'; var fontFace = instanceOfFontFace.family; // \"font family name\" Value A DOMString. Example var fontFace = new FontFace('Roboto', 'url(https://fonts.example.com/roboto.woff2)');\n or  console.log(fontFace.family);\n or  // 'Roboto' fontFace.family = 'newRoboto'; console.log(fontFace.family);\n or  // 'newRoboto');",
        "type": "CSS"
    },
    "FontFaceSet.check": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "FontFaceSet.check",
        "params": [],
        "path": "dom/fontfaceset/check",
        "syntax": "check()",
        "type": "CSS"
    },
    "FontFaceSet.load": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "FontFaceSet.load",
        "params": [],
        "path": "dom/fontfaceset/load",
        "syntax": "load()",
        "type": "CSS"
    },
    "FontFaceSet.ready": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "FontFaceSet.ready",
        "params": [],
        "path": "dom/fontfaceset/ready",
        "syntax": "fontFaceSet.ready.then(function(fontFaceSet) { // ... });",
        "type": "CSS"
    },
    "FormData.append": {
        "descr": "The append() method of the FormData interface appends a new value onto an existing key inside a FormData object, or adds the key if it does not already exist.",
        "name": "FormData.append",
        "params": [
            {
                "descr": "The name of the field whose data is contained in value.",
                "name": "name"
            },
            {
                "descr": "The field's value. This can be a USVString or Blob (including subclasses such as File).",
                "name": "value"
            },
            {
                "descr": "The filename reported to the server (a USVString), when a Blob or File is passed as the second parameter. ",
                "name": "filename Optional"
            }
        ],
        "path": "dom/formdata/append",
        "syntax": "formData.append(name, value);\n or  formData.append(name, value, filename);",
        "type": "XMLHTTPRequest"
    },
    "FormData.constructor": {
        "descr": "The FormData() constructor creates a new FormData object.",
        "name": "FormData.constructor",
        "params": [
            {
                "descr": "An HTML <form> element — when specified, the FormData object will be populated with the form's current keys/values using the name property of each element for the keys and their submitted value for the values. It will also encode file input content.",
                "name": "form Optional"
            }
        ],
        "path": "dom/formdata/formdata",
        "syntax": "var formData = new FormData(form)",
        "type": "XMLHTTPRequest"
    },
    "FormData.delete": {
        "descr": "The delete() method of the FormData interface deletes a key and its value(s) from a FormData object.",
        "name": "FormData.delete",
        "params": [
            {
                "descr": "The name of the key you want to delete.",
                "name": "name"
            }
        ],
        "path": "dom/formdata/delete",
        "syntax": "formData.delete(name);",
        "type": "XMLHTTPRequest"
    },
    "FormData.entries": {
        "descr": "The FormData.entries() method returns an iterator allowing to go through all key/value pairs contained in this object. The key of each pair is a USVString object; the value either a USVString, or a Blob.",
        "name": "FormData.entries",
        "params": [],
        "path": "dom/formdata/entries",
        "syntax": "formData.entries();",
        "type": "XMLHTTPRequest"
    },
    "FormData.get": {
        "descr": "The get() method of the FormData interface returns the first value associated with a given key from within a FormData object. If you expect multiple values and want all of them, use the getAll() method instead.",
        "name": "FormData.get",
        "params": [
            {
                "descr": "A USVString representing the name of the key you want to retrieve.",
                "name": "name"
            }
        ],
        "path": "dom/formdata/get",
        "syntax": "formData.get(name);",
        "type": "XMLHTTPRequest"
    },
    "FormData.getAll": {
        "descr": "The getAll() method of the FormData interface returns all the values associated with a given key from within a FormData object.",
        "name": "FormData.getAll",
        "params": [
            {
                "descr": "A USVString representing the name of the key you want to retrieve.",
                "name": "name"
            }
        ],
        "path": "dom/formdata/getall",
        "syntax": "formData.getAll(name);",
        "type": "XMLHTTPRequest"
    },
    "FormData.has": {
        "descr": "The has() method of the FormData interface returns a boolean stating whether a FormData object contains a certain key.",
        "name": "FormData.has",
        "params": [
            {
                "descr": "A USVString representing the name of the key you want to test for.",
                "name": "name"
            }
        ],
        "path": "dom/formdata/has",
        "syntax": "formData.has(name);",
        "type": "XMLHTTPRequest"
    },
    "FormData.keys": {
        "descr": "The FormData.keys() method returns an iterator allowing to go through all keys contained in this object. The keys are USVString objects.",
        "name": "FormData.keys",
        "params": [],
        "path": "dom/formdata/keys",
        "syntax": "formData.keys();",
        "type": "XMLHTTPRequest"
    },
    "FormData.set": {
        "descr": "The set() method of the FormData interface sets a new value for an existing key inside a FormData object, or adds the key/value if it does not already exist.",
        "name": "FormData.set",
        "params": [
            {
                "descr": "The name of the field whose data is contained in value.",
                "name": "name"
            },
            {
                "descr": "The field's value. In the two parameter version this is a USVString, or if it is not, it is converted to a string. ",
                "name": "value"
            },
            {
                "descr": "The filename reported to the server (a USVString), when a Blob or File is passed as the second parameter. ",
                "name": "filename Optional"
            }
        ],
        "path": "dom/formdata/set",
        "syntax": "formData.set(name, value);\n or  formData.set(name, value, filename);",
        "type": "XMLHTTPRequest"
    },
    "FormData.values": {
        "descr": "The FormData.values() method returns an iterator allowing to go through all values contained in this object. The values are USVString or Blob objects.",
        "name": "FormData.values",
        "params": [],
        "path": "dom/formdata/values",
        "syntax": "formData.values();",
        "type": "XMLHTTPRequest"
    },
    "Frame Timing API: Using the Frame Timing API": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Frame Timing API: Using the Frame Timing API",
        "params": [
            {
                "descr": "Returns a list of explicitly observed PerformanceEntry objects based on the list of entry types given to PerformanceObserver.observe().",
                "name": "PerformanceObserverEntryList.getEntries()"
            },
            {
                "descr": "Returns a list of explicitly observed PerformanceEntry objects of the given entry type.",
                "name": "PerformanceObserverEntryList.getEntriesByType()"
            },
            {
                "descr": "Returns a list of explicitly observed PerformanceEntry objects based on the given name and entry type.",
                "name": "PerformanceObserverEntryList.getEntriesByName()"
            }
        ],
        "path": "dom/frame_timing_api/using_the_frame_timing_api",
        "syntax": "function create_frame_observer() { if (window.PerformanceObserver === undefined) return; // Register the performance observer var observe_frame = new PerformanceObserver(function(list) { // Log the frame entries var perfEntries = list.getEntriesByType(\"frame\");\n or  for (var i=0; i < perfEntries.length; i++) { console.log(\"OBS #1: [\" + i + \"] = \" + perfEntries[i].name);\n or  } });\n or  // Only observe 'frame' events observe_frame.observe({entryTypes: ['frame']});\n or  } function init () { create_frame_observer();\n or  var obs = new PerformanceObserver(frame_observer_2);\n or  obs.observe({entryTypes: ['frame']});\n or  } function frame_observer_2(list) { // Log the frame entries var perfEntries = list.getEntriesByType(\"frame\");\n or  for (var i=0; i < perfEntries.length; i++) { console.log(\"OBS #2: [\" + i + \"] = \" + perfEntries[i].name);\n or  } } <body onload=\"init(event)\">);",
        "type": "Performance"
    },
    "Fullscreen API": {
        "descr": "The Fullscreen API adds methods to present a specific Element (and its descendants) in full-screen mode, and to exit full-screen mode once it is no longer needed. This makes it possible to present desired content—such as an online game—using the user's entire screen, removing all browser user interface elements and other applications from the screen until full-screen mode is shut off.",
        "name": "Fullscreen API",
        "params": [
            {
                "descr": "Requests that the user agent switch from full-screen mode back to windowed mode. ",
                "name": "Document.exitFullscreen()"
            },
            {
                "descr": "Asks the user agent to place the specified element (and, by extension, its descendants) into full-screen mode, removing all of the browser's UI elements as well as all other applications from the screen. Returns a Promise which is resolved once full-screen mode has been activated.",
                "name": "Element.requestFullscreen()"
            },
            {
                "descr": "The fullscreenElement property tells you the Element that's currently being displayed in full-screen mode on the DOM (or shadow DOM). ",
                "name": "DocumentOrShadowRoot.fullscreenElement"
            },
            {
                "descr": "The fullscreenEnabled property tells you whether or not it is possible to engage full-screen mode. ",
                "name": "Document.fullscreenEnabled"
            },
            {
                "descr": "An event handler for the fullscreenchange event that's sent to a Document when that document is placed into full-screen mode, or when that document exits full-screen mode. ",
                "name": "Document.onfullscreenchange"
            },
            {
                "descr": "An event handler for the fullscreenerror event that gets sent to a Document when an error occurs while trying to enable or disable full-screen mode for the entire document.",
                "name": "Document.onfullscreenerror"
            },
            {
                "descr": "An event handler which is called when the fullscreenchange event is sent to the element, indicating that the element has been placed into, or removed from, full-screen mode.",
                "name": "Element.onfullscreenchange"
            },
            {
                "descr": "An event handler for the fullscreenerror event when sent to an element which has encountered an error while transitioning into or out of full-screen mode.",
                "name": "Element.onfullscreenerror"
            },
            {
                "descr": "A Boolean value which is true if the document has an element currently being displayed in full-screen mode; otherwise, this returns false. ",
                "name": "Document.fullscreen"
            },
            {
                "descr": "Sent to a Document or Element when it transitions into or out of full-screen mode.",
                "name": "fullscreenchange"
            },
            {
                "descr": "Sent to a Document or Element if an error occurs while attempting to switch it into or out of full-screen mode.",
                "name": "fullscreenerror"
            },
            {
                "descr": "Provides optional settings you can specify when calling requestFullscreen().",
                "name": "FullscreenOptions"
            }
        ],
        "path": "dom/fullscreen_api",
        "syntax": "Document and Element interfaces to allow turning off and on full-screen mode. Methods on the Document interface  Document.exitFullscreen()",
        "type": "Fullscreen"
    },
    "FullscreenOptions.navigationUI": {
        "descr": "The FullscreenOptions dictionary's navigationUI property is used when calling requestFullscreen() to specify to what extent the user agent should include its standard user interface while the element is presented in full-screen mode.",
        "name": "FullscreenOptions.navigationUI",
        "params": [
            {
                "descr": "The browser's navigation interface will be hidden and the entire dimensions of the screen will be allocated to the display of the element.",
                "name": "\"hide\""
            },
            {
                "descr": "The browser will present page navigation controls and possibly other user interface; the dimensions of the element (and the perceived size of the screen) will be clamped to leave room for this user interface.",
                "name": "\"show\""
            },
            {
                "descr": "The browser will choose which of the above settings to apply. ",
                "name": "\"auto\""
            }
        ],
        "path": "dom/fullscreenoptions/navigationui",
        "syntax": "let fullscreenOptions = { navigationUI: value };  Value The value of the navigationUI property must be one of the following strings. The default is \"auto\".  \"hide\" The browser's navigation interface will be hidden and the entire dimensions of the screen will be allocated to the display of the element. \"show\" The browser will present page navigation controls and possibly other user interface; the dimensions of the element (and the perceived size of the screen) will be clamped to leave room for this user interface. \"auto\"",
        "type": "Fullscreen"
    },
    "Function": {
        "descr": "The Function creates a new Function object. Calling the constructor directly can create functions dynamically, but suffers from security and similar (but far less significant) performance issues to eval. However, unlike eval, the Function constructor creates functions which execute in the global scope only.",
        "name": "Function",
        "params": [
            {
                "descr": "Names to be used by the function as formal argument names. ",
                "name": "arg1, arg2, ... argN"
            },
            {
                "descr": "A string containing the JavaScript statements comprising the function definition.",
                "name": "functionBody"
            },
            {
                "descr": "An array corresponding to the arguments passed to a function. ",
                "name": "Function.prototype.arguments"
            },
            {
                "descr": "Used to specifiy the number of arguments expected by the function, but has been removed. ",
                "name": "Function.arity"
            },
            {
                "descr": "Specifies the function that invoked the currently executing function.",
                "name": "Function.prototype.caller"
            },
            {
                "descr": "Specifies the number of arguments expected by the function.",
                "name": "Function.prototype.length"
            },
            {
                "descr": "The name of the function.",
                "name": "Function.prototype.name"
            },
            {
                "descr": "The display name of the function.",
                "name": "Function.displayName"
            },
            {
                "descr": "Specifies the function that creates an object's prototype. ",
                "name": "Function.prototype.constructor"
            },
            {
                "descr": "Calls a function and sets its this to the provided value, arguments can be passed as an Array object.",
                "name": "Function.prototype.apply()"
            },
            {
                "descr": "Creates a new function which, when called, has its this set to the provided value, with a given sequence of arguments preceding any provided when the new function was called.",
                "name": "Function.prototype.bind()"
            },
            {
                "descr": "Calls (executes) a function and sets its this to the provided value, arguments can be passed as they are.",
                "name": "Function.prototype.call()"
            },
            {
                "descr": "Returns true if the function is a generator; otherwise returns false.",
                "name": "Function.prototype.isGenerator()"
            },
            {
                "descr": "Returns a string representing the source code of the function. ",
                "name": "Function.prototype.toSource()"
            },
            {
                "descr": "Returns a string representing the source code of the function. ",
                "name": "Function.prototype.toString()"
            }
        ],
        "path": "javascript/global_objects/function",
        "syntax": "new Function ([arg1[, arg2[, ...argN]],] functionBody)",
        "type": "Function"
    },
    "Functions": {
        "descr": "Generally speaking, a function is a \"subprogram\" that can be called by code external (or internal in the case of recursion) to the function. Like the program itself, a function is composed of a sequence of statements called the function body. Values can be passed to a function, and the function will return a value.",
        "name": "Functions",
        "params": [
            {
                "descr": "The function name.",
                "name": "name"
            },
            {
                "descr": "The name of an argument to be passed to the function.",
                "name": "param"
            },
            {
                "descr": "The statements comprising the body of the function.",
                "name": "statements"
            },
            {
                "descr": "The function name. Can be omitted, in which case the function becomes known as an anonymous function.",
                "name": "name"
            },
            {
                "descr": "The name of an argument to be passed to the function.",
                "name": "param"
            },
            {
                "descr": "The statements comprising the body of the function.",
                "name": "statements"
            },
            {
                "descr": "The function name.",
                "name": "name"
            },
            {
                "descr": "The name of an argument to be passed to the function.",
                "name": "param"
            },
            {
                "descr": "The statements comprising the body of the function.",
                "name": "statements"
            },
            {
                "descr": "The function name. Can be omitted, in which case the function becomes known as an anonymous function.",
                "name": "name"
            },
            {
                "descr": "The name of an argument to be passed to the function.",
                "name": "param"
            },
            {
                "descr": "The statements comprising the body of the function.",
                "name": "statements"
            },
            {
                "descr": "The name of an argument. Zero arguments need to be indicated with (). ",
                "name": "param"
            },
            {
                "descr": "Multiple statements need to be enclosed in brackets. ",
                "name": "statements or expression"
            },
            {
                "descr": "Zero or more names to be used by the function as formal parameters. ",
                "name": "arg1, arg2, ... argN"
            },
            {
                "descr": "A string containing the JavaScript statements comprising the function body.",
                "name": "functionBody"
            },
            {
                "descr": "Zero or more names to be used by the function as formal argument names. ",
                "name": "arg1, arg2, ... argN"
            },
            {
                "descr": "A string containing the JavaScript statements comprising the function definition.",
                "name": "functionBody"
            },
            {
                "descr": "Binds an object property to a function that will be called when that property is looked up.",
                "name": "get"
            },
            {
                "descr": "Binds an object property to a function to be called when there is an attempt to set that property.",
                "name": "set"
            }
        ],
        "path": "javascript/functions",
        "syntax": "function name([param[, param[, ... param]]]) { statements }",
        "type": "Function"
    },
    "GainNode.constructor": {
        "descr": "The GainNode() constructor of the Web Audio API creates a new GainNode object which an AudioNode that represents a change in volume.",
        "name": "GainNode.constructor",
        "params": [
            {
                "descr": "A reference to an AudioContext.",
                "name": "context"
            },
            {
                "descr": "Options are as follows:   gain: The amount of gain to apply. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/gainnode/gainnode",
        "syntax": "var gainNode = new GainNode(context, options)",
        "type": "Audio"
    },
    "GainNode.gain": {
        "descr": "The gain property of the GainNode interface is an a-rate AudioParam representing the amount of gain to apply.",
        "name": "GainNode.gain",
        "params": [],
        "path": "dom/gainnode/gain",
        "syntax": "var audioCtx = new AudioContext();\n or  var gainNode = audioCtx.createGain();\n or  gainNode.gain.value = 0.5;);",
        "type": "Audio"
    },
    "Generator": {
        "descr": "The Generator object is returned by a generator function and it conforms to both the iterable protocol and the iterator protocol.",
        "name": "Generator",
        "params": [
            {
                "descr": "Returns a value yielded by the yield expression.",
                "name": "Generator.prototype.next()"
            },
            {
                "descr": "Returns the given value and finishes the generator.",
                "name": "Generator.prototype.return()"
            },
            {
                "descr": "Throws an error to a generator (also finishes the generator, unless caught from within that generator).",
                "name": "Generator.prototype.throw()"
            },
            {
                "descr": "Returns a value yielded by the yield expression. ",
                "name": "Generator.prototype.next()"
            },
            {
                "descr": "Closes the generator, so that when calling next() an StopIteration error will be thrown. ",
                "name": "Generator.prototype.close()"
            },
            {
                "descr": "Used to send a value to a generator. ",
                "name": "Generator.prototype.send()"
            },
            {
                "descr": "Throws an error to a generator. ",
                "name": "Generator.prototype.throw()"
            }
        ],
        "path": "javascript/global_objects/generator",
        "syntax": "function* gen() { yield 1; yield 2; yield 3; } var g = gen();\n or  // \"Generator { }\");",
        "type": "Generator"
    },
    "GeneratorFunction": {
        "descr": "The GeneratorFunction creates a new generator function object. In JavaScript every generator function is actually a GeneratorFunction object.",
        "name": "GeneratorFunction",
        "params": [
            {
                "descr": "Names to be used by the function as formal argument names. ",
                "name": "arg1, arg2, ... argN"
            },
            {
                "descr": "A string containing the JavaScript statements comprising the function definition.",
                "name": "functionBody"
            },
            {
                "descr": "The GeneratorFunction constructor's length property whose value is 1.",
                "name": "GeneratorFunction.length"
            },
            {
                "descr": "Allows the addition of properties to all generator function objects.",
                "name": "GeneratorFunction.prototype"
            },
            {
                "descr": "The initial value is GeneratorFunction.",
                "name": "GeneratorFunction.constructor"
            },
            {
                "descr": "The value is %GeneratorPrototype%.",
                "name": "GeneratorFunction.prototype.prototype"
            }
        ],
        "path": "javascript/global_objects/generatorfunction",
        "syntax": "new GeneratorFunction ([arg1[, arg2[, ...argN]],] functionBody)",
        "type": "Function"
    },
    "Geolocation.clearWatch": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "Geolocation.clearWatch",
        "params": [
            {
                "descr": "The ID number returned by the Geolocation.watchPosition() method when installing the handler you wish to remove.",
                "name": "id"
            }
        ],
        "path": "dom/geolocation/clearwatch",
        "syntax": "navigator.geolocation.clearWatch(id);",
        "type": "Geolocation"
    },
    "Geolocation.getCurrentPosition": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "Geolocation.getCurrentPosition",
        "params": [
            {
                "descr": "A callback function that takes a Position object as its sole input parameter.",
                "name": "success"
            },
            {
                "descr": "An optional callback function that takes a PositionError object as its sole input parameter.",
                "name": "error Optional"
            },
            {
                "descr": "An optional PositionOptions object. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/geolocation/getcurrentposition",
        "syntax": "navigator.geolocation.getCurrentPosition(success[, error[, [options]])",
        "type": "Geolocation"
    },
    "Geolocation.watchPosition": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "Geolocation.watchPosition",
        "params": [
            {
                "descr": "A callback function that takes a Position object as an input parameter.",
                "name": "success"
            },
            {
                "descr": "An optional callback function that takes a PositionError object as an input parameter.",
                "name": "error Optional"
            },
            {
                "descr": "An optional PositionOptions object that provides configuration options for the location watch.",
                "name": "options Optional"
            }
        ],
        "path": "dom/geolocation/watchposition",
        "syntax": "id = navigator.geolocation.watchPosition(success[, error[, options]])",
        "type": "Geolocation"
    },
    "GlobalEventHandlers.onabort": {
        "descr": "An event handler for abort events sent to the window. (Not available with Firefox 2 or Safari.)",
        "name": "GlobalEventHandlers.onabort",
        "params": [
            {
                "descr": "Reference to a function",
                "name": "funcRef"
            }
        ],
        "path": "dom/globaleventhandlers/onabort",
        "syntax": "window.onabort = funcRef   funcRef Reference to a function  Example window.onabort = function() { alert('Load aborted.');\n or  });",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onanimationcancel": {
        "descr": "An event handler for the animationcancel event. This event is sent when a CSS Animation unexpectedly aborts (in other words, any time it stops running without sending an animationend event), such as when the animation-name is changed such that the animation is removed, or when the animating node is hidden—either directly or because any of its containing nodes are hidden)—using CSS.",
        "name": "GlobalEventHandlers.onanimationcancel",
        "params": [],
        "path": "dom/globaleventhandlers/onanimationcancel",
        "syntax": "var animCancelHandler = target.onanimationcancel; target.onanimationcancel = Function  Value A Function to be called when an animationcancel event occurs indicating that a CSS animation has begun on the target, where the target object is an HTML element (HTMLElement), document (Document",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onanimationend": {
        "descr": "An event handler for the animationend event. This event is sent when a CSS Animation reaches the end of its active period (which is calculated as (animation-duration * animation-iteration-count) + animation-delay.",
        "name": "GlobalEventHandlers.onanimationend",
        "params": [],
        "path": "dom/globaleventhandlers/onanimationend",
        "syntax": "var animEndHandler = target.onanimationend; target.onanimationend = Function  Value A Function to be called when an animationend event occurs indicating that a CSS animation has begun on the target, where the target object is an HTML element (HTMLElement), document (Document",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onanimationiteration": {
        "descr": "Draft This page is not complete.",
        "name": "GlobalEventHandlers.onanimationiteration",
        "params": [],
        "path": "dom/globaleventhandlers/onanimationiteration",
        "syntax": "var animIterationHandler = target.onanimationiteration; target.onanimationiteration = Function  Value A Function to be called when an animationiteration event occurs indicating that a CSS animation has reached the end of an iteration while running on the target, where the target object is an HTML element (HTMLElement), document (Document",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onanimationstart": {
        "descr": "An event handler for the animationstart event. This event is sent when a CSS Animation starts to play.",
        "name": "GlobalEventHandlers.onanimationstart",
        "params": [],
        "path": "dom/globaleventhandlers/onanimationstart",
        "syntax": "var animStartHandler = target.onanimationstart; target.onanimationstart = Function  Value A Function to be called when an animationstart event occurs indicating that a CSS animation has begun on the target, where the target object is an HTML element (HTMLElement), document (Document",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onauxclick": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "GlobalEventHandlers.onauxclick",
        "params": [],
        "path": "dom/globaleventhandlers/onauxclick",
        "syntax": "element.onauxclick = functionRef(e);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onblur": {
        "descr": "The onblur property indicates the object's event handler for the blur event. It's available on Element, Document, and Window.",
        "name": "GlobalEventHandlers.onblur",
        "params": [],
        "path": "dom/globaleventhandlers/onblur",
        "syntax": "element.onblur = function;    function is the name of a user-defined function, without the () suffix or any parameters, or an anonymous function declaration, such as  element.onblur = function() { console.log(\"onblur event detected!\");\n or  };);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onclick": {
        "descr": "The onclick property returns the click event handler code on the current element.",
        "name": "GlobalEventHandlers.onclick",
        "params": [],
        "path": "dom/globaleventhandlers/onclick",
        "syntax": "element.onclick = functionRef;  where functionRef is a function - often a name of a function declared elsewhere or a function expression. See \"JavaScript Guide:Functions\" for details. The single argument passed to the specified event handler function is a MouseEvent object. Within the handler, this will be the element upon which the event was triggered. Example <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\" /> <title>onclick event example</title> <script> function initElement() { var p = document.getElementById(\"foo\");\n or  // NOTE: showAlert();\n or  or showAlert(param);\n or  will NOT work here. // Must be a reference to a function name, not a function call. p.onclick = showAlert; }; function showAlert(event) { alert(\"onclick Event detected!\");\n or  } </script> <style> #foo { border: solid blue 2px; } </style> </head> <body onload=\"initElement();\n or \"> <span id=\"foo\">My Event Element</span> <p>click on the above element.</p> </body> </html>);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.oncontextmenu": {
        "descr": "An event handler property for right-click events on the window. Unless the default behavior is prevented, the browser context menu will activate (though IE8 has a bug with this and will not activate the context menu if a contextmenu event handler is defined). Note that this event will occur with any non-disabled right-click event and does not depend on an element possessing the \"contextmenu\" attribute.",
        "name": "GlobalEventHandlers.oncontextmenu",
        "params": [],
        "path": "dom/globaleventhandlers/oncontextmenu",
        "syntax": "window.oncontextmenu = funcRef; //funcRef refers to the function to be called Example These examples will disable right click on the page: document.oncontextmenu = function () { // Use document as opposed to window for IE8 compatibility return false; }; window.addEventListener('contextmenu', function (e) { // Not compatible with IE < 9 e.preventDefault();\n or  }, false);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.ondblclick": {
        "descr": "The ondblclick property returns the onDblClick event handler code on the current element.",
        "name": "GlobalEventHandlers.ondblclick",
        "params": [],
        "path": "dom/globaleventhandlers/ondblclick",
        "syntax": "element.ondblclick = function;    function is the name of a user-defined function, without the () suffix or any parameters, or an anonymous function declaration, such as  element.ondblclick = function() { console.log(\"ondblclick event detected!\");\n or  };);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.ondrag": {
        "descr": "A global event handler for the drag event.",
        "name": "GlobalEventHandlers.ondrag",
        "params": [
            {
                "descr": "The drag event handler for element targetElement.",
                "name": "dragHandler"
            }
        ],
        "path": "dom/globaleventhandlers/ondrag",
        "syntax": "var dragHandler = targetElement.ondrag;  Return value  dragHandler The drag event handler for element targetElement.  Example This example includes the use of the ondrag attribute handler to set an element's drag event handler. <!DOCTYPE html> <html lang=en> <title>Examples of using the ondrag Global Event Attribute</title> <meta content=\"width=device-width\"> <style> div { margin: 0em; padding: 2em; } #source { color: blue; border: 1px solid black; } #target { border: 1px solid black; } </style> </head> <script> function drag_handler(ev) { console.log(\"Drag\");\n or  } function dragstart_handler(ev) { console.log(\"dragStart\");\n or  ev.dataTransfer.setData(\"text\", ev.target.id);\n or  } function drop_handler(ev) { console.log(\"Drop\");\n or  ev.currentTarget.style.background = \"lightyellow\"; ev.preventDefault();\n or  var data = ev.dataTransfer.getData(\"text\");\n or  ev.target.appendChild(document.getElementById(data));\n or  } function dragover_handler(ev) { console.log(\"dragOver\");\n or  ev.preventDefault();\n or  } </script> <body> <h1>Examples of <code>ondrag</code>, <code>ondrop</code>, <code>ondragstart</code>, <code>ondragover</code></h1> <div> <!-- <div class=\"source\"> --> <p id=\"source\" ondrag=\"drag_handler(event);\n or \" ondragstart=\"dragstart_handler(event);\n or \" draggable=\"true\"> Select this element, drag it to the Drop Zone and then release the selection to move the element.</p> </div> <div id=\"target\" ondrop=\"drop_handler(event);\n or \" ondragover=\"dragover_handler(event);\n or \">Drop Zone</div> </body> </html>);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.ondragend": {
        "descr": "A global event handler for the dragend event.",
        "name": "GlobalEventHandlers.ondragend",
        "params": [
            {
                "descr": "The dragend event handler for element targetElement.",
                "name": "dragendHandler"
            }
        ],
        "path": "dom/globaleventhandlers/ondragend",
        "syntax": "var dragendHandler = targetElement.ondragend;  Return value  dragendHandler The dragend event handler for element targetElement.  Example This example shows two ways to use the ondragend attribute handler to set an element's dragend event handler. <!DOCTYPE html> <html lang=en> <title>Examples of using the Drag and Drop Global Event Attribute</title> <meta content=\"width=device-width\"> <style> div { margin: 0em; padding: 2em; } #source { color: blue; border: 1px solid black; } #target { border: 1px solid black; } </style> </head> <script> function dragstart_handler(ev) { console.log(\"dragStart\");\n or  // Change the source element's background color to signify drag has started ev.currentTarget.style.border = \"dashed\"; ev.dataTransfer.setData(\"text\", ev.target.id);\n or  } function dragover_handler(ev) { console.log(\"dragOver\");\n or  // Change the target element's border to signify a drag over event // has occurred ev.currentTarget.style.background = \"lightblue\"; ev.preventDefault();\n or  } function drop_handler(ev) { console.log(\"Drop\");\n or  ev.preventDefault();\n or  var data = ev.dataTransfer.getData(\"text\");\n or  ev.target.appendChild(document.getElementById(data));\n or  } function dragenter_handler(ev) { console.log(\"dragEnter\");\n or  // Change the source element's background color for enter events ev.currentTarget.style.background = \"yellow\"; } function dragleave_handler(ev) { console.log(\"dragLeave\");\n or  // Change the source element's border back to white ev.currentTarget.style.background = \"white\"; } function dragend_handler(ev) { console.log(\"dragEnd\");\n or  // Change the target element's background color to visually indicate // the drag ended. var el=document.getElementById(\"target\");\n or  el.style.background = \"pink\"; } function dragexit_handler(ev) { console.log(\"dragExit\");\n or  // Change the source element's border back to green to signify a dragexit event ev.currentTarget.style.background = \"green\"; } function init() { // Set handlers for the source's enter/leave/end/exit events var el=document.getElementById(\"source\");\n or  el.ondragenter = dragenter_handler; el.ondragleave = dragleave_handler; el.ondragend = dragend_handler; el.ondragexit = dragexit_handler; } </script> <body onload=\"init();\n or \"> <h1>Examples of <code>ondragenter</code>, <code>ondragleave</code>, <code>ondragend</code>, <code>ondragexit</code></h1> <div> <p id=\"source\" ondragstart=\"dragstart_handler(event);\n or \" draggable=\"true\"> Select this element, drag it to the Drop Zone and then release the selection to move the element.</p> </div> <div id=\"target\" ondrop=\"drop_handler(event);\n or \" ondragover=\"dragover_handler(event);\n or \">Drop Zone</div> </body> </html>);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.ondragenter": {
        "descr": "A global event handler for the dragenter event.",
        "name": "GlobalEventHandlers.ondragenter",
        "params": [
            {
                "descr": "The dragenter event handler for element targetElement.",
                "name": "dragenterHandler"
            }
        ],
        "path": "dom/globaleventhandlers/ondragenter",
        "syntax": "var dragenterHandler = targetElement.ondragenter;  Return value  dragenterHandler The dragenter event handler for element targetElement.  Example This example demonstrates using the ondragenter attribute handler to set an element's dragenter event handler. <!DOCTYPE html> <html lang=en> <title>Examples of using the Drag and Drop Global Event Attribute</title> <meta content=\"width=device-width\"> <style> div { margin: 0em; padding: 2em; } #source { color: blue; border: 1px solid black; } #target { border: 1px solid black; } </style> </head> <script> function dragstart_handler(ev) { console.log(\"dragStart\");\n or  // Change the source element's background color to signify drag has started ev.currentTarget.style.border = \"dashed\"; ev.dataTransfer.setData(\"text\", ev.target.id);\n or  } function dragover_handler(ev) { console.log(\"dragOver\");\n or  // Change the target element's border to signify a drag over event // has occurred ev.currentTarget.style.background = \"lightblue\"; ev.preventDefault();\n or  } function drop_handler(ev) { console.log(\"Drop\");\n or  ev.preventDefault();\n or  var data = ev.dataTransfer.getData(\"text\");\n or  ev.target.appendChild(document.getElementById(data));\n or  } function dragenter_handler(ev) { console.log(\"dragEnter\");\n or  // Change the source element's background color for enter events ev.currentTarget.style.background = \"yellow\"; } function dragleave_handler(ev) { console.log(\"dragLeave\");\n or  // Change the source element's border back to white ev.currentTarget.style.background = \"white\"; } function dragend_handler(ev) { console.log(\"dragEnd\");\n or  // Change the target element's background color to visually indicate // the drag ended. var el=document.getElementById(\"target\");\n or  el.style.background = \"pink\"; } function dragexit_handler(ev) { console.log(\"dragExit\");\n or  // Change the source element's border back to green to signify a dragexit event ev.currentTarget.style.background = \"green\"; } function init() { // Set handlers for the source's enter/leave/end/exit events var el=document.getElementById(\"source\");\n or  el.ondragenter = dragenter_handler; el.ondragleave = dragleave_handler; el.ondragend = dragend_handler; el.ondragexit = dragexit_handler; } </script> <body onload=\"init();\n or \"> <h1>Examples of <code>ondragenter</code>, <code>ondragleave</code>, <code>ondragend</code>, <code>ondragexit</code></h1> <div> <p id=\"source\" ondragstart=\"dragstart_handler(event);\n or \" draggable=\"true\"> Select this element, drag it to the Drop Zone and then release the selection to move the element.</p> </div> <div id=\"target\" ondrop=\"drop_handler(event);\n or \" ondragover=\"dragover_handler(event);\n or \">Drop Zone</div> </body> </html>);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.ondragexit": {
        "descr": "The GlobalEventHandler.ondragexitproperty is an event handler for the dragexit event.",
        "name": "GlobalEventHandlers.ondragexit",
        "params": [
            {
                "descr": "The dragexit event handler for element targetElement.",
                "name": "dragexitHandler"
            }
        ],
        "path": "dom/globaleventhandlers/ondragexit",
        "syntax": "var dragexitHandler = targetElement.ondragexit;  Return value  dragexitHandler The dragexit event handler for element targetElement.  Example This example demonstrates using the ondragexit attribute handler to set an element's dragexit event handler. <!DOCTYPE html> <html lang=en> <title>Examples of using the Drag and Drop Global Event Attribute</title> <meta content=\"width=device-width\"> <style> div { margin: 0em; padding: 2em; } #source { color: blue; border: 1px solid black; } #target { border: 1px solid black; } </style> </head> <script> function dragstart_handler(ev) { console.log(\"dragStart\");\n or  // Change the source element's background color to signify drag has started ev.currentTarget.style.border = \"dashed\"; ev.dataTransfer.setData(\"text\", ev.target.id);\n or  } function dragover_handler(ev) { console.log(\"dragOver\");\n or  // Change the target element's border to signify a drag over event // has occurred ev.currentTarget.style.background = \"lightblue\"; ev.preventDefault();\n or  } function drop_handler(ev) { console.log(\"Drop\");\n or  ev.preventDefault();\n or  var data = ev.dataTransfer.getData(\"text\");\n or  ev.target.appendChild(document.getElementById(data));\n or  } function dragenter_handler(ev) { console.log(\"dragEnter\");\n or  // Change the source element's background color for enter events ev.currentTarget.style.background = \"yellow\"; } function dragleave_handler(ev) { console.log(\"dragLeave\");\n or  // Change the source element's border back to white ev.currentTarget.style.background = \"white\"; } function dragend_handler(ev) { console.log(\"dragEnd\");\n or  // Change the target element's background color to visually indicate // the drag ended. var el=document.getElementById(\"target\");\n or  el.style.background = \"pink\"; } function dragexit_handler(ev) { console.log(\"dragExit\");\n or  // Change the source element's border back to green to signify a dragexit event ev.currentTarget.style.background = \"green\"; } function init() { // Set handlers for the source's enter/leave/end/exit events var el=document.getElementById(\"source\");\n or  el.ondragenter = dragenter_handler; el.ondragleave = dragleave_handler; el.ondragend = dragend_handler; el.ondragexit = dragexit_handler; } </script> <body onload=\"init();\n or \"> <h1>Examples of <code>ondragenter</code>, <code>ondragleave</code>, <code>ondragend</code>, <code>ondragexit</code></h1> <div> <p id=\"source\" ondragstart=\"dragstart_handler(event);\n or \" draggable=\"true\"> Select this element, drag it to the Drop Zone and then release the selection to move the element.</p> </div> <div id=\"target\" ondrop=\"drop_handler(event);\n or \" ondragover=\"dragover_handler(event);\n or \">Drop Zone</div> </body> </html>);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.ondragleave": {
        "descr": "A global event handler for the dragleave event.",
        "name": "GlobalEventHandlers.ondragleave",
        "params": [
            {
                "descr": "The dragleave event handler for element targetElement.",
                "name": "dragleaveHandler"
            }
        ],
        "path": "dom/globaleventhandlers/ondragleave",
        "syntax": "var dragleaveHandler = targetElement.ondragleave;  Return value  dragleaveHandler The dragleave event handler for element targetElement.  Example This example demonstrates using the ondragleave attribute handler to set an element's dragleave event handler. <!DOCTYPE html> <html lang=en> <title>Examples of using the Drag and Drop Global Event Attribute</title> <meta content=\"width=device-width\"> <style> div { margin: 0em; padding: 2em; } #source { color: blue; border: 1px solid black; } #target { border: 1px solid black; } </style> </head> <script> function dragstart_handler(ev) { console.log(\"dragStart\");\n or  // Change the source element's border to signify drag has started ev.currentTarget.style.border = \"dashed\"; ev.dataTransfer.setData(\"text\", ev.target.id);\n or  } function dragover_handler(ev) { console.log(\"dragOver\");\n or  // Change the target element's background color to signify a drag over event // has occurred ev.currentTarget.style.background = \"lightblue\"; ev.preventDefault();\n or  } function drop_handler(ev) { console.log(\"Drop\");\n or  ev.preventDefault();\n or  var data = ev.dataTransfer.getData(\"text\");\n or  ev.target.appendChild(document.getElementById(data));\n or  } function dragenter_handler(ev) { console.log(\"dragEnter\");\n or  // Change the source element's background color for enter events ev.currentTarget.style.background = \"yellow\"; } function dragleave_handler(ev) { console.log(\"dragLeave\");\n or  // Change the source element's background color back to white ev.currentTarget.style.background = \"white\"; } function dragend_handler(ev) { console.log(\"dragEnd\");\n or  // Change the target element's background color to visually indicate // the drag ended. var el=document.getElementById(\"target\");\n or  el.style.background = \"pink\"; } function dragexit_handler(ev) { console.log(\"dragExit\");\n or  // Change the source element's background color back to green to signify a dragexit event ev.currentTarget.style.background = \"green\"; } function init() { // Set handlers for the source's enter/leave/end/exit events var el=document.getElementById(\"source\");\n or  el.ondragenter = dragenter_handler; el.ondragleave = dragleave_handler; el.ondragend = dragend_handler; el.ondragexit = dragexit_handler; } </script> <body onload=\"init();\n or \"> <h1>Examples of <code>ondragenter</code>, <code>ondragleave</code>, <code>ondragend</code>, <code>ondragexit</code></h1> <div> <p id=\"source\" ondragstart=\"dragstart_handler(event);\n or \" draggable=\"true\"> Select this element, drag it to the Drop Zone and then release the selection to move the element.</p> </div> <div id=\"target\" ondrop=\"drop_handler(event);\n or \" ondragover=\"dragover_handler(event);\n or \">Drop Zone</div> </body> </html>);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.ondragover": {
        "descr": "A global event handler for the dragover event.",
        "name": "GlobalEventHandlers.ondragover",
        "params": [
            {
                "descr": "The dragover event handler for element targetElement.",
                "name": "dragoverHandler"
            }
        ],
        "path": "dom/globaleventhandlers/ondragover",
        "syntax": "var dragoverHandler = targetElement.ondragover;  Return value  dragoverHandler The dragover event handler for element targetElement.  Example This example demonstrates using the ondragover attribute handler to set an element's dragover event handler. <!DOCTYPE html> <html lang=en> <title>Examples of using the ondrag Global Event Attribute</title> <meta content=\"width=device-width\"> <style> div { margin: 0em; padding: 2em; } #source { color: blue; border: 1px solid black; } #target { border: 1px solid black; } </style> </head> <script> function drag_handler(ev) { console.log(\"Drag\");\n or  } function dragstart_handler(ev) { console.log(\"dragStart\");\n or  ev.dataTransfer.setData(\"text\", ev.target.id);\n or  } function drop_handler(ev) { console.log(\"Drop\");\n or  ev.currentTarget.style.background = \"lightyellow\"; ev.preventDefault();\n or  var data = ev.dataTransfer.getData(\"text\");\n or  ev.target.appendChild(document.getElementById(data));\n or  } function dragover_handler(ev) { console.log(\"dragOver\");\n or  ev.preventDefault();\n or  } </script> <body> <h1>Examples of <code>ondrag</code>, <code>ondrop</code>, <code>ondragstart</code>, <code>ondragover</code></h1> <div> <p id=\"source\" ondrag=\"drag_handler(event);\n or \" ondragstart=\"dragstart_handler(event);\n or \" draggable=\"true\"> Select this element, drag it to the Drop Zone and then release the selection to move the element.</p> </div> <div id=\"target\" ondrop=\"drop_handler(event);\n or \" ondragover=\"dragover_handler(event);\n or \">Drop Zone</div> </body> </html>);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.ondragstart": {
        "descr": "A global event handler for the dragstart event.",
        "name": "GlobalEventHandlers.ondragstart",
        "params": [
            {
                "descr": "The dragstart event handler for element targetElement.",
                "name": "dragstartHandler"
            }
        ],
        "path": "dom/globaleventhandlers/ondragstart",
        "syntax": "var dragstartHandler = targetElement.ondragstart;  Return value  dragstartHandler The dragstart event handler for element targetElement.  Example This example demonstrates using the ondragstart attribute handler to set an element's dragstart event handler. <!DOCTYPE html> <html lang=en> <title>Examples of using the ondrag Global Event Attribute</title> <meta content=\"width=device-width\"> <style> div { margin: 0em; padding: 2em; } #source { color: blue; border: 1px solid black; } #target { border: 1px solid black; } </style> </head> <script> function drag_handler(ev) { console.log(\"Drag\");\n or  } function dragstart_handler(ev) { console.log(\"dragStart\");\n or  ev.dataTransfer.setData(\"text\", ev.target.id);\n or  } function drop_handler(ev) { console.log(\"Drop\");\n or  ev.currentTarget.style.background = \"lightyellow\"; ev.preventDefault();\n or  var data = ev.dataTransfer.getData(\"text\");\n or  ev.target.appendChild(document.getElementById(data));\n or  } function dragover_handler(ev) { console.log(\"dragOver\");\n or  ev.preventDefault();\n or  } </script> <body> <h1>Examples of <code>ondrag</code>, <code>ondrop</code>, <code>ondragstart</code>, <code>ondragover</code></h1> <div> <p id=\"source\" ondrag=\"drag_handler(event);\n or \" ondragstart=\"dragstart_handler(event);\n or \" draggable=\"true\"> Select this element, drag it to the Drop Zone and then release the selection to move the element.</p> </div> <div id=\"target\" ondrop=\"drop_handler(event);\n or \" ondragover=\"dragover_handler(event);\n or \">Drop Zone</div> </body> </html>);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.ondrop": {
        "descr": "A global event handler for the drop event.",
        "name": "GlobalEventHandlers.ondrop",
        "params": [
            {
                "descr": "The drop event handler for element targetElement.",
                "name": "dropHandler"
            }
        ],
        "path": "dom/globaleventhandlers/ondrop",
        "syntax": "var dropHandler = targetElement.ondrop;  Return value  dropHandler The drop event handler for element targetElement.  Example This example demonstrates the use of the ondrop attribute to define an element's drop event handler. <!DOCTYPE html> <html lang=en> <title>Examples of using the ondrag Global Event Attribute</title> <meta content=\"width=device-width\"> <style> div { margin: 0em; padding: 2em; } #source { color: blue; border: 1px solid black; } #target { border: 1px solid black; } </style> </head> <script> function drag_handler(ev) { console.log(\"Drag\");\n or  } function dragstart_handler(ev) { console.log(\"dragStart\");\n or  ev.dataTransfer.setData(\"text\", ev.target.id);\n or  } function drop_handler(ev) { console.log(\"Drop\");\n or  ev.currentTarget.style.background = \"lightyellow\"; ev.preventDefault();\n or  var data = ev.dataTransfer.getData(\"text\");\n or  ev.target.appendChild(document.getElementById(data));\n or  } function dragover_handler(ev) { console.log(\"dragOver\");\n or  ev.preventDefault();\n or  } </script> <body> <h1>Examples of <code>ondrag</code>, <code>ondrop</code>, <code>ondragstart</code>, <code>ondragover</code></h1> <div class=\"source\"> <p id=\"source\" ondrag=\"drag_handler(event);\n or \" ondragstart=\"dragstart_handler(event);\n or \" draggable=\"true\"> Select this element, drag it to the Drop Zone and then release the selection to move the element.</p> </div> <div id=\"target\" ondrop=\"drop_handler(event);\n or \" ondragover=\"dragover_handler(event);\n or \">Drop Zone</div> </body> </html>);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onemptied": {
        "descr": "The onemptied property sets and returns the event handler for the emptied event.",
        "name": "GlobalEventHandlers.onemptied",
        "params": [],
        "path": "dom/globaleventhandlers/onemptied",
        "syntax": "element.onemptied = handlerFunction; var handlerFunction = element.onemptied;  handlerFunction should be either null or a JavaScript function specifying the handler for the event. Notes See the DOM event handlers page for information on working with on... handlers. The emptied event is fired when the media has become empty; for example, this event is sent if the media has already been loaded (or partially loaded), and the load()",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onerror": {
        "descr": "An event handler for the error event. Error events are fired at various targets for different kinds of errors:",
        "name": "GlobalEventHandlers.onerror",
        "params": [
            {
                "descr": "(including syntax errors and exceptions thrown within handlers) occurs, an error event using interface ErrorEvent is fired at window and window.onerror() is invoked (as well as handlers attached by window.addEventListener (not only capturing)).",
                "name": "JavaScript runtime error"
            }
        ],
        "path": "dom/globaleventhandlers/onerror",
        "syntax": "error event using interface ErrorEvent is fired at window and window.onerror()",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onfocus": {
        "descr": "The onfocus property returns the onFocus event handler code on the current element.",
        "name": "GlobalEventHandlers.onfocus",
        "params": [],
        "path": "dom/globaleventhandlers/onfocus",
        "syntax": "element.onfocus = event handling code  Notes The focus event is raised when the user sets focus on the given element. For onfocus to fire on non-input elements they must be given the tabindex attribute (see Building keyboard accessibility back in for more details).",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.ongotpointercapture": {
        "descr": "The ongotpointercapture EventHandler property of the GlobalEventHandlers interface returns the event handler (function) for the gotpointercapture event type.",
        "name": "GlobalEventHandlers.ongotpointercapture",
        "params": [],
        "path": "dom/globaleventhandlers/ongotpointercapture",
        "syntax": "window.ongotpointercapture = functionReference Example function overHandler(ev) { // Determine the target event's gotpointercapture handler var gotCaptureHandler = ev.target.ongotpointercapture; } function init() { var el = document.getElementById('target');\n or  el.ongotpointercapture = overHandler; });",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.oninvalid": {
        "descr": "The oninvalid property sets and returns the event handler for the invalid event.",
        "name": "GlobalEventHandlers.oninvalid",
        "params": [],
        "path": "dom/globaleventhandlers/oninvalid",
        "syntax": "element.oninvalid = handlerFunction; var handlerFunction = element.oninvalid;  handlerFunction should be either null or a JavaScript function specifying the handler for the event. Notes See the DOM event handlers page for information on working with on... handlers. The invalid event is fired when a submittable element has been checked and doesn't satisfy its constraints. The validity of submittable elements is checked before submitting their owner form, or after the checkValidity()",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onkeypress": {
        "descr": "The onkeypress property sets and returns the onKeyPress event handler code for the current element.",
        "name": "GlobalEventHandlers.onkeypress",
        "params": [],
        "path": "dom/globaleventhandlers/onkeypress",
        "syntax": "element.onkeypress = event handling code  Notes The keypress event should be raised when the user presses a key on the keyboard. However, not all browsers fire keypress events for certain keys. Browser Incompatibilities Webkit-based browsers (Google Chrome and Safari, for example) do not fire keypress events on the arrow keys",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onkeyup": {
        "descr": "The onkeyup property returns the onKeyUp event handler code for the current element.",
        "name": "GlobalEventHandlers.onkeyup",
        "params": [],
        "path": "dom/globaleventhandlers/onkeyup",
        "syntax": "element.onkeyup = event handling code  Example  <input type=\"text\" onKeyUp=\"keyWasPressed(event)\"> <script>function keyWasPressed(evt){ console.log(evt.keyCode) }</script>",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onload": {
        "descr": "The onload property of the GlobalEventHandlers mixin is an event handler for the load event of a Window, XMLHttpRequest, <img> element, etc., which fires when the resource has loaded.",
        "name": "GlobalEventHandlers.onload",
        "params": [],
        "path": "dom/globaleventhandlers/onload",
        "syntax": "window.onload = funcRef;  Value funcRef is the handler function to be called when the window’s load event fires. Examples window.onload = function() { init();\n or  doSomethingElse();\n or  };);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onloadend": {
        "descr": "The onloadend property of the GlobalEventHandlers mixin is an EventHandler representing the code to be called when the loadend event is raised (when progress has stopped on the loading of a resource.)",
        "name": "GlobalEventHandlers.onloadend",
        "params": [],
        "path": "dom/globaleventhandlers/onloadend",
        "syntax": "img.onloadend = funcRef;  Value funcRef is the handler function to be called when the resource's loadend event fires. Examples HTML content <img src=\"myImage.jpg\"> JavaScript content // 'loadstart' fires first, then 'load', then 'loadend' image.addEventListener('load', function(e) { console.log('Image loaded');\n or  });\n or  image.addEventListener('loadstart', function(e) { console.log('Image load started');\n or  });\n or  image.addEventListener('loadend', function(e) { console.log('Image load finished');\n or  });",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onloadstart": {
        "descr": "The onloadstart property of the GlobalEventHandlers mixin is an EventHandler representing the code to be called when the loadstart event is raised (when progress has begun on the loading of a resource.)",
        "name": "GlobalEventHandlers.onloadstart",
        "params": [],
        "path": "dom/globaleventhandlers/onloadstart",
        "syntax": "img.onloadstart = funcRef;  Value funcRef is the handler function to be called when the resource's loadstart event fires. Examples HTML content <img src=\"myImage.jpg\"> JavaScript content // 'loadstart' fires first, then 'load', then 'loadend' image.addEventListener('load', function(e) { console.log('Image loaded');\n or  });\n or  image.addEventListener('loadstart', function(e) { console.log('Image load started');\n or  });\n or  image.addEventListener('loadend', function(e) { console.log('Image load finished');\n or  });",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onlostpointercapture": {
        "descr": "The onlostpointercapture EventHandler property of the GlobalEventHandlers interface returns the event handler (function) for the lostpointercapture event type.",
        "name": "GlobalEventHandlers.onlostpointercapture",
        "params": [],
        "path": "dom/globaleventhandlers/onlostpointercapture",
        "syntax": "window.onlostpointercapture = functionReference  Example function overHandler(ev) { // Determine the target event's lostpointercapture handler var lostCaptureHandler = ev.target.onlostpointercapture; } function init() { var el = document.getElementById('target');\n or  el.onlostpointercapture = overHandler; });",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onmouseenter": {
        "descr": "The onmouseenter property sets and returns the event handler for the mouseenter event.",
        "name": "GlobalEventHandlers.onmouseenter",
        "params": [],
        "path": "dom/globaleventhandlers/onmouseenter",
        "syntax": "element.onmouseenter = handlerFunction; var handlerFunction = element.onmouseenter;  handlerFunction should be either null or a JavaScript function specifying the handler for the event. Notes See the DOM event handlers page for information on working with on... handlers. The mouseenter event is fired when a pointing device (usually a mouse) is moved over the element that has the listener attached.",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onmouseleave": {
        "descr": "The onmouseleave property sets and returns the event handler for the mouseleave event.",
        "name": "GlobalEventHandlers.onmouseleave",
        "params": [],
        "path": "dom/globaleventhandlers/onmouseleave",
        "syntax": "element.onmouseleave = handlerFunction; var handlerFunction = element.onmouseleave;  handlerFunction should be either null or a JavaScript function specifying the handler for the event. Notes See the DOM event handlers page for information on working with on... handlers. The mouseleave event is fired when a pointing device (usually a mouse) is moved off the element that has the listener attached.",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onmousemove": {
        "descr": "The onmousemove property returns the mousemove event handler code on the current element.",
        "name": "GlobalEventHandlers.onmousemove",
        "params": [],
        "path": "dom/globaleventhandlers/onmousemove",
        "syntax": "element.onmousemove = event handling code  Notes The mousemove event is raised when the user moves the mouse. Examples Example #1: tooltips The following example shows the use of the onmousemove event with a javaScript tooltip. <!doctype html> <html> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /> <title>Tooltip Example</title> <script type=\"text/javascript\"> var oTooltip = new (function() { var nOverX, nOverY, nLeftPos, nTopPos, oNode, bOff = true; this.follow = function (oMsEvnt1) { if (bOff) { return; } var nMoveX = oMsEvnt1.clientX, nMoveY = oMsEvnt1.clientY; nLeftPos += nMoveX - nOverX; nTopPos += nMoveY - nOverY; oNode.style.left = nLeftPos + \"px\"; oNode.style.top = nTopPos + \"px\"; nOverX = nMoveX; nOverY = nMoveY; }; this.remove = function () { if (bOff) { return; } bOff = true; document.body.removeChild(oNode);\n or  }; this.append = function (oMsEvnt2, sTxtContent) { oNode.innerHTML = sTxtContent; if (bOff) { document.body.appendChild(oNode);\n or  bOff = false; } var nScrollX = document.documentElement.scrollLeft || document.body.scrollLeft, nScrollY = document.documentElement.scrollTop || document.body.scrollTop, nWidth = oNode.offsetWidth, nHeight = oNode.offsetHeight; nOverX = oMsEvnt2.clientX; nOverY = oMsEvnt2.clientY; nLeftPos = document.body.offsetWidth - nOverX - nScrollX > nWidth ? nOverX + nScrollX + 10 : document.body.offsetWidth - nWidth + 16; nTopPos = nOverY - nHeight > 6 ? nOverY + nScrollY - nHeight - 7 : nOverY + nScrollY + 20; oNode.style.left = nLeftPos + \"px\"; oNode.style.top = nTopPos + \"px\"; }; this.init = function() { oNode = document.createElement(\"div\");\n or  oNode.className = \"tooltip\"; oNode.style.position = \"absolute\"; }; })();\n or  </script> <style type=\"text/css\"> div.tooltip { padding: 6px; background: #ffffff; border: 1px #76808C solid; border-radius: 5px; -moz-border-radius: 5px; -webkit-border-radius: 5px; z-index: 9999; } </style> </head> <body onload=\"oTooltip.init();\n or \"> <p><a href=\"http://developer.mozilla.org/\" onmouseover=\"oTooltip.append(event,'Example text 1');\n or \" onmousemove=\"oTooltip.follow(event);\n or \" onmouseout=\"oTooltip.remove();\n or \">Move your mouse here&hellip;</a></p> <p><a href=\"http://developer.mozilla.org/\" onmouseover=\"oTooltip.append(event,'Example text 2');\n or \" onmousemove=\"oTooltip.follow(event);\n or \" onmouseout=\"oTooltip.remove();\n or \">&hellip;or here!!</a></p> </body> </html>);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onmouseout": {
        "descr": "The onmouseout property returns the onMouseOut event handler code on the current element.",
        "name": "GlobalEventHandlers.onmouseout",
        "params": [],
        "path": "dom/globaleventhandlers/onmouseout",
        "syntax": "element.onmouseout = event handling code  Example <!doctype html> <html> <head> <title>onmouseover/onmouseout event example</title> <script type=\"text/javascript\"> function initElement() { var p = document.getElementById(\"foo\");\n or  p.onmouseover = showMouseOver; p.onmouseout = showMouseOut; }; function showMouseOver() { var notice = document.getElementById(\"notice\");\n or  notice.innerHTML = 'mouse over detected'; } function showMouseOut() { var notice = document.getElementById(\"notice\");\n or  notice.innerHTML = 'mouse out detected'; } </script> <style type=\"text/css\"> #foo { border: solid blue 2px; } </style> </head> <body onload=\"initElement()\";> <span id=\"foo\">My Event Element</span> <p>move your mouse over and out the above element.</p> <div id=\"notice\"></div> </body> </html>);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onmouseover": {
        "descr": "The onmouseover property returns the onMouseOver event handler code on the current element.",
        "name": "GlobalEventHandlers.onmouseover",
        "params": [],
        "path": "dom/globaleventhandlers/onmouseover",
        "syntax": "element.onmouseover = event handling code  Example <!doctype html> <html> <head> <title>onmouseover/onmouseout event example</title> <script type=\"text/javascript\"> function initElement() { var p = document.getElementById(\"foo\");\n or  p.onmouseover = showMouseOver; p.onmouseout = showMouseOut; }; function showMouseOver() { var notice = document.getElementById(\"notice\");\n or  notice.innerHTML = 'mouse over detected'; } function showMouseOut() { var notice = document.getElementById(\"notice\");\n or  notice.innerHTML = 'mouse out detected'; } </script> <style type=\"text/css\"> #foo { border: solid blue 2px; } </style> </head> <body onload=\"initElement();\n or \"> <span id=\"foo\">My Event Element</span> <p>move your mouse over and out the above element.</p> <div id=\"notice\"></div> </body> </html>);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onplay": {
        "descr": "The GlobalEventHandlers.onplayproperty sets and returns the event handler for the play event that is fired when playback has begun.",
        "name": "GlobalEventHandlers.onplay",
        "params": [],
        "path": "dom/globaleventhandlers/onplay",
        "syntax": "element.onplay = handlerFunction; var handlerFunction = element.onplay;  handlerFunction should be either null or a JavaScript function specifying the handler for the event. Example <!DOCTYPE html> <html> <head> <body> <title>onplay event example :</title> <p>This example demonstrates how to assign an \"onplay\" event to a video element.</p> <video controls onplay=\"myFunction()\"> <source src=\"mov_bbb.mp4\" type=\"video/mp4\"> <source src=\"mov_bbb.ogg\" type=\"video/ogg\"> Your browser does not support HTML5 video. </video> <p>Video courtesy of <a href=\"http://www.bigbuckbunny.org/\" target=\"_blank\">Big Buck Bunny</a>.</p> <script> function myFunction() { alert(\"The video has started to play\");\n or  } </script> </head> </body> </html>);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onpointercancel": {
        "descr": "A global event handler for the pointercancel event.",
        "name": "GlobalEventHandlers.onpointercancel",
        "params": [
            {
                "descr": "The pointercancel event handler for element targetElement.",
                "name": "cancelHandler"
            }
        ],
        "path": "dom/globaleventhandlers/onpointercancel",
        "syntax": "var cancelHandler = targetElement.onpointercancel;  Return value  cancelHandler The pointercancel event handler for element targetElement.  Example This example shows two ways to use onpointercancel to set an element's pointercancel event handler. <html> <script> function cancelHandler(ev) { // Process the pointercancel event } function init() { var el=document.getElementById(\"target1\");\n or  el.onpointercancel = cancelHandler; } </script> <body onload=\"init();\n or \"> <div id=\"target1\"> Touch me ... </div> <div id=\"target2\" onpointercancel=\"cancelHandler(event)\"> Touch me ... </div> </body> </html>);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onpointerdown": {
        "descr": "The GlobalEventHandlers event handler onpointerdown is used to specify the event handler for the pointerdown event, which is fired when the pointing device is initially pressed. This event can be sent to Window, Document, and Element objects.",
        "name": "GlobalEventHandlers.onpointerdown",
        "params": [],
        "path": "dom/globaleventhandlers/onpointerdown",
        "syntax": "target.onpointerdown = downHandler; var downHandler = target.onpointerdown;  Value A Function to handle the pointerdown event for the target Element, Document, or Window. It receives as input the PointerEvent describing the pointerdown event. Example This example demonstrates how to watch for and act upon pointerdown events using onpointerdown. You could also use addEventListener()",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onpointerenter": {
        "descr": "A global event handler for the pointerenter event.",
        "name": "GlobalEventHandlers.onpointerenter",
        "params": [
            {
                "descr": "The pointerenter event handler for element targetElement.",
                "name": "enterHandler"
            }
        ],
        "path": "dom/globaleventhandlers/onpointerenter",
        "syntax": "var enterHandler = targetElement.onpointerenter;  Return value  enterHandler The pointerenter event handler for element targetElement.  Example This example shows two ways to use onpointerenter to set an element's pointerenter event handler. <html> <script> function enterHandler(ev) { // Process the pointerenter event } function init() { var el=document.getElementById(\"target1\");\n or  el.onpointerenter = enterHandler; } </script> <body onload=\"init();\n or \"> <div id=\"target1\"> Touch me ... </div> <div id=\"target2\" onpointerenter=\"enterHandler(event)\"> Touch me ... </div> </body> </html>);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onpointerleave": {
        "descr": "The global event handler for the pointerleave event, which is delivered to a Node when the pointer (mouse cursor, fingertip, etc.) exits its hit test area (for example, if the cursor exits an Element or Window's content area). This event is part of the Pointer Events API.",
        "name": "GlobalEventHandlers.onpointerleave",
        "params": [
            {
                "descr": "The EventListener which will be invoked to handle pointerleave events sent to the target.",
                "name": "leaveHandler"
            }
        ],
        "path": "dom/globaleventhandlers/onpointerleave",
        "syntax": "var leaveHandler = EventTarget.onpointerleave; EventTarget.onpointerleave = leaveHandler; Return value  leaveHandler The EventListener which will be invoked to handle pointerleave events sent to the target.  Example This example shows two ways to use onpointerleave to set an element's pointerleave event handler. <html> <script> function leaveHandler(ev) { // Process the pointerleave event } function init() { var el=document.getElementById(\"target1\");\n or  el.onpointerleave = leaveHandler; } </script> <body onload=\"init();\n or \"> <div id=\"target1\"> Touch me ... </div> <div id=\"target2\" onpointerleave=\"leaveHandler(event)\"> Touch me ... </div> </body> </html>);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onpointermove": {
        "descr": "A global event handler for the pointermove event.",
        "name": "GlobalEventHandlers.onpointermove",
        "params": [
            {
                "descr": "The pointermove event handler for element targetElement.",
                "name": "moveHandler"
            }
        ],
        "path": "dom/globaleventhandlers/onpointermove",
        "syntax": "var moveHandler = targetElement.onpointermove;  Return value  moveHandler The pointermove event handler for element targetElement.  Example This example shows two ways to use onpointermove to set an element's pointermove event handler. <html> <script> function moveHandler(ev) { // Process the pointermove event } function init() { var el=document.getElementById(\"target1\");\n or  el.onpointermove = moveHandler; } </script> <body onload=\"init();\n or \"> <div id=\"target1\"> Touch me ... </div> <div id=\"target2\" onpointermove=\"moveHandler(event)\"> Touch me ... </div> </body> </html>);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onpointerout": {
        "descr": "A global event handler for the pointerout event.",
        "name": "GlobalEventHandlers.onpointerout",
        "params": [
            {
                "descr": "The pointerout event handler for element targetElement.",
                "name": "outHandler"
            }
        ],
        "path": "dom/globaleventhandlers/onpointerout",
        "syntax": "var outHandler = targetElement.onpointerout;  Return value  outHandler The pointerout event handler for element targetElement.  Example This example shows two ways to use onpointerout to set an element's pointerout event handler. <html> <script> function outHandler(ev) { // Process the pointerout event } function init() { var el=document.getElementById(\"target1\");\n or  el.onpointerout = outHandler; } </script> <body onload=\"init();\n or \"> <div id=\"target1\"> Touch me ... </div> <div id=\"target2\" onpointerout=\"outHandler(event)\"> Touch me ... </div> </body> </html>);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onpointerover": {
        "descr": "A global event handler for the pointerover event.",
        "name": "GlobalEventHandlers.onpointerover",
        "params": [
            {
                "descr": "The pointerover event handler for element targetElement.",
                "name": "overHandler"
            }
        ],
        "path": "dom/globaleventhandlers/onpointerover",
        "syntax": "var overHandler = targetElement.onpointerover;  Return value  overHandler The pointerover event handler for element targetElement.  Example This example shows two ways to use onpointerover to set an element's pointerover event handler. <html> <script> function overHandler(ev) { // Process the pointerover event } function init() { var el=document.getElementById(\"target1\");\n or  el.onpointerover = overHandler; } </script> <body onload=\"init();\n or \"> <div id=\"target1\"> Touch me ... </div> <div id=\"target2\" onpointerover=\"overHandler(event)\"> Touch me ... </div> </body> </html>);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onpointerup": {
        "descr": "A global event handler for the pointerup event.",
        "name": "GlobalEventHandlers.onpointerup",
        "params": [
            {
                "descr": "The pointerup event handler for element targetElement.",
                "name": "upHandler"
            }
        ],
        "path": "dom/globaleventhandlers/onpointerup",
        "syntax": "var upHandler = targetElement.onpointerup;  Return value  upHandler The pointerup event handler for element targetElement.  Example This example shows two ways to use onpointerup to set an element's pointerup event handler. <html> <script> function upHandler(ev) { // Process the pointerup event } function init() { var el=document.getElementById(\"target1\");\n or  el.onpointerup = upHandler; } </script> <body onload=\"init();\n or \"> <div id=\"target1\"> Touch me ... </div> <div id=\"target2\" onpointerup=\"upHandler(event)\"> Touch me ... </div> </body> </html>);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onreset": {
        "descr": "The GlobalEventHandlers.onreset property contains an EventHandler triggered when a reset event is received.",
        "name": "GlobalEventHandlers.onreset",
        "params": [],
        "path": "dom/globaleventhandlers/onreset",
        "syntax": "window.onreset = funcRef;  Parameters   funcRef is a reference to a function.  Example <html> <script> function reg() { window.captureEvents(Event.RESET);\n or  window.onreset = hit; } function hit() { alert('hit');\n or  } </script> <body onload=\"reg();\n or \"> <form> <input type=\"reset\" value=\"reset\" /> </form> <div id=\"d\"> </div> </body> </html>);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onresize": {
        "descr": "The GlobalEventHandlers.onresize property contains an EventHandler triggered when a resize event is received.",
        "name": "GlobalEventHandlers.onresize",
        "params": [],
        "path": "dom/globaleventhandlers/onresize",
        "syntax": "window.onresize = funcRef;  Parameters   funcRef is a reference to a function.  Example window.onresize = doFunc;  <html> <head> <title>onresize test</title> </head> <body> <p>Resize the browser window to fire the resize event.</p> <p>Window height: <span id=\"height\"></span></p> <p>Window width: <span id=\"width\"></span></p> <script type=\"text/javascript\"> var heightOutput = document.querySelector('#height');\n or  var widthOutput = document.querySelector('#width');\n or  function resize() { heightOutput.textContent = window.innerHeight; widthOutput.textContent = window.innerWidth; } window.onresize = resize; </script> </body> </html>);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onscroll": {
        "descr": "An event handler for scroll events on element.",
        "name": "GlobalEventHandlers.onscroll",
        "params": [],
        "path": "dom/globaleventhandlers/onscroll",
        "syntax": "element.onscroll = functionReference  Parameters functionReference is a reference to a function to be executed when element is scrolled. Example <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\" /> <style> #container { position: absolute; height: auto; top: 0; bottom: 0; width: auto; left: 0; right: 0; overflow: auto; } #foo { height:1000px; width:1000px; background-color: #777; display: block; } </style> </head> <body> <div id=\"container\"> <div id=\"foo\"></div> </div> <script type=\"text/javascript\"> document.getElementById('container').onscroll = function() { console.log(\"scrolling\");\n or  }; </script> </body> </html>);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onselect": {
        "descr": "An event handler for the select event on the window.",
        "name": "GlobalEventHandlers.onselect",
        "params": [],
        "path": "dom/globaleventhandlers/onselect",
        "syntax": "window.onselect = funcRef;    funcRef is a function.  Example <html> <head> <title>onselect test</title> <style type=\"text/css\"> .text1 { border: 2px solid red; } </style> <script type=\"text/javascript\"> window.onselect = selectText; function selectText() { alert(\"select event detected!\");\n or  } </script> </head> <body> <textarea class=\"text1\" cols=\"30\" rows=\"3\"> Highlight some of this text with the mouse pointer to fire the onselect event. </textarea> </body> </html>);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onselectionchange": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "GlobalEventHandlers.onselectionchange",
        "params": [],
        "path": "dom/globaleventhandlers/onselectionchange",
        "syntax": "obj.onselectionchange = function;  Example var selection; document.onselectionchange = function() { console.log('New selection made');\n or  selection = document.getSelection();\n or  };);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onselectstart": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "GlobalEventHandlers.onselectstart",
        "params": [],
        "path": "dom/globaleventhandlers/onselectstart",
        "syntax": "obj.onselectstart = function;  Example document.onselectstart = function() { console.log(\"Selection started!\");\n or  };);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onsubmit": {
        "descr": "An event handler for the submit event on the window.",
        "name": "GlobalEventHandlers.onsubmit",
        "params": [],
        "path": "dom/globaleventhandlers/onsubmit",
        "syntax": "window.onsubmit = funcRef;  Parameters   funcRef is a reference to a function.  Example <html> <script> function reg() { window.captureEvents(Event.SUBMIT);\n or  window.onsubmit = hit; } function hit() { console.log('hit');\n or  } </script> <body onload=\"reg();\n or \"> <form> <input type=\"submit\" value=\"submit\" /> </form> <div id=\"d\"> </div> </body> </html>);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.ontouchcancel": {
        "descr": "A global event handler for the touchcancel event.",
        "name": "GlobalEventHandlers.ontouchcancel",
        "params": [
            {
                "descr": "The touchcancel event handler for element someElement.",
                "name": "cancelHandler"
            }
        ],
        "path": "dom/globaleventhandlers/ontouchcancel",
        "syntax": "var cancelHandler = someElement.ontouchcancel;  Return value  cancelHandler The touchcancel event handler for element someElement.  Example This example shows two ways to use ontouchcancel to set an element's touchcancel event handler. <html> <script> function cancelTouch(ev) { // Process the event } function init() { var el=document.getElementById(\"target1\");\n or  el.ontouchcancel = cancelTouch; } </script> <body onload=\"init();\n or \"> <div id=\"target1\"> Touch me ... </div> <div id=\"target2\" ontouchcancel=\"cancelTouch(event)\"> Touch me ... </div> </body> </html>);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.ontouchend": {
        "descr": "A global event handler for the touchend event.",
        "name": "GlobalEventHandlers.ontouchend",
        "params": [
            {
                "descr": "The touchend event handler for element targetElement.",
                "name": "endHandler"
            }
        ],
        "path": "dom/globaleventhandlers/ontouchend",
        "syntax": "var endHandler = targetElement.ontouchend;  Return value  endHandler The touchend event handler for element targetElement.  Example This example shows two ways to use ontouchend to set an element's touchend event handler. <html> <script> function endTouch(ev) { // Process the event } function init() { var el=document.getElementById(\"target1\");\n or  el.ontouchend = endTouch; } </script> <body onload=\"init();\n or \"> <div id=\"target1\"> Touch me ... </div> <div id=\"target2\" ontouchend=\"endTouch(event)\"> Touch me ... </div> </body> </html>);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.ontouchmove": {
        "descr": "A global event handler for the touchmove event.",
        "name": "GlobalEventHandlers.ontouchmove",
        "params": [
            {
                "descr": "The touchmove event handler for element someElement.",
                "name": "moveHandler"
            }
        ],
        "path": "dom/globaleventhandlers/ontouchmove",
        "syntax": "var moveHandler = someElement.ontouchmove;  Return value  moveHandler The touchmove event handler for element someElement.  Example This example shows two ways to use ontouchmove to set an element's touchmove event handler. <html> <script> function moveTouch(ev) { // Process the event } function init() { var el=document.getElementById(\"target1\");\n or  el.ontouchmove = moveTouch; } <body onload=\"init();\n or \"> <div id=\"target1\"> Touch me ... </div> <div id=\"target2\" ontouchmove=\"moveTouch(event)\"> Touch me ... </div> </body> </html>);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.ontouchstart": {
        "descr": "A global event handler for the touchstart event.",
        "name": "GlobalEventHandlers.ontouchstart",
        "params": [
            {
                "descr": "The touchstart event handler for element someElement.",
                "name": "startHandler"
            }
        ],
        "path": "dom/globaleventhandlers/ontouchstart",
        "syntax": "var startHandler = someElement.ontouchstart;  Return value  startHandler The touchstart event handler for element someElement.  Example This example shows two ways to use ontouchstart to set an element's touchstart event handler. <html> <script> function startTouch(ev) { // Process the event } function init() { var el=document.getElementById(\"target1\");\n or  el.ontouchstart = startTouch; } </script> <body onload=\"init();\n or \"> <div id=\"target1\"> Touch me ... </div> <div id=\"target2\" ontouchstart=\"startTouch(event)\"> Touch me ... </div> </body> </html>);",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.ontransitioncancel": {
        "descr": "An event handler for the transitioncancel event. This event is sent when a CSS transition is cancelled.",
        "name": "GlobalEventHandlers.ontransitioncancel",
        "params": [],
        "path": "dom/globaleventhandlers/ontransitioncancel",
        "syntax": "var transitionCancelHandler = target.ontransitioncancel; target.ontransitioncancel = Function  Value A Function to be called when a transitioncancel event occurs indicating that a CSS transition has been cancelled on the target, where the target object is an HTML element (HTMLElement), document (Document",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.ontransitionend": {
        "descr": "An event handler for the transitionend event. This event is sent to when a CSS transition completes.",
        "name": "GlobalEventHandlers.ontransitionend",
        "params": [],
        "path": "dom/globaleventhandlers/ontransitionend",
        "syntax": "var transitionEndHandler = target.ontransitionend; target.ontransitionend = Function  Value A Function to be called when a transitionend event occurs indicating that a CSS transition has completed on the target, where the target object is an HTML element (HTMLElement), document (Document",
        "type": "GlobalEventHandlers"
    },
    "GlobalEventHandlers.onwheel": {
        "descr": "The onwheel property returns the onwheel event handler code on the current element.",
        "name": "GlobalEventHandlers.onwheel",
        "params": [],
        "path": "dom/globaleventhandlers/onwheel",
        "syntax": "element.onwheel = function() { .. }",
        "type": "GlobalEventHandlers"
    },
    "Grouping": {
        "descr": "The grouping operator ( ) controls the precedence of evaluation in expressions.",
        "name": "Grouping",
        "params": [],
        "path": "javascript/operators/grouping",
        "syntax": "( )",
        "type": "Operators"
    },
    "Gyroscope.constructor": {
        "descr": "The Gyroscope constructor creates a new Gyroscope object which provides on each reading the angular velocity of the device along all three axes.",
        "name": "Gyroscope.constructor",
        "params": [
            {
                "descr": "Options are as follows:   frequency: The desired number of times per second a sample should be taken, meaning the number of times per second that sensor.onreading will be called. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/gyroscope/gyroscope",
        "syntax": "var gyroscope = new Gyroscope([options])",
        "type": "Sensors"
    },
    "Gyroscope.x": {
        "descr": "The x read-only property of the Gyroscope interface returns a double precision integer containing the angular velocity of the device along the its x axis.",
        "name": "Gyroscope.x",
        "params": [],
        "path": "dom/gyroscope/x",
        "syntax": "var x = gyroscope.x Value A Number. Example The gyroscope is typically read in the Sensor.onreading event callback. In the example below this occurs sixty times a second. let gyroscope = new Gyroscope({frequency: 60});\n or  gyroscope.addEventListener('reading', e => { console.log(\"Angular velocety along the X-axis \" + gyroscope.x);\n or  console.log(\"Angular velocety along the Y-axis \" + gyroscope.y);\n or  console.log(\"Angular velocety along the Z-axis \" + gyroscope.z);\n or  });\n or  gyroscope.start();",
        "type": "Sensors"
    },
    "Gyroscope.y": {
        "descr": "The y read-only property of the Gyroscope interface returns a double precision integer containing the angular velocity of the device along the its y axis.",
        "name": "Gyroscope.y",
        "params": [],
        "path": "dom/gyroscope/y",
        "syntax": "var y = gyroscope.y Value A Number. Example The gyroscope is typically read in the Sensor.onreading event callback. In the example below this occurs sixty times a second. let gyroscope = new Gyroscope({frequency: 60});\n or  gyroscope.addEventListener('reading', e => { console.log(\"Angular velocety along the X-axis \" + gyroscope.x);\n or  console.log(\"Angular velocety along the Y-axis \" + gyroscope.y);\n or  console.log(\"Angular velocety along the Z-axis \" + gyroscope.z);\n or  });\n or  gyroscope.start();",
        "type": "Sensors"
    },
    "Gyroscope.z": {
        "descr": "The z read-only property of the Gyroscope interface returns a double precision integer containing the angular velocity of the device along the its z axis.",
        "name": "Gyroscope.z",
        "params": [],
        "path": "dom/gyroscope/z",
        "syntax": "var z = gyroscope.z Value A Number. Example The gyroscope is typically read in the Sensor.onreading event callback. In the example below this occurs sixty times a second. let gyroscope = new Gyroscope({frequency: 60});\n or  gyroscope.addEventListener('reading', e => { console.log(\"Angular velocety along the X-axis \" + gyroscope.x);\n or  console.log(\"Angular velocety along the Y-axis \" + gyroscope.y);\n or  console.log(\"Angular velocety along the Z-axis \" + gyroscope.z);\n or  });\n or  gyroscope.start();",
        "type": "Sensors"
    },
    "HMDVRDevice.getEyeParameters": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "HMDVRDevice.getEyeParameters",
        "params": [
            {
                "descr": "A DOMString representing the eye you want to return information about. ",
                "name": "whichEye"
            }
        ],
        "path": "dom/hmdvrdevice/geteyeparameters",
        "syntax": "var myLeftEye = HMDVRDevice.getEyeParameters('left');",
        "type": "WebVR"
    },
    "HMDVRDevice.setFieldOfView": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "HMDVRDevice.setFieldOfView",
        "params": [
            {
                "descr": "A VRFieldOfView object that defines the new field of view for the left eye. ",
                "name": "leftFOV Optional"
            },
            {
                "descr": "A VRFieldOfView object that defines the new field of view for the right eye. ",
                "name": "rightFOV Optional"
            },
            {
                "descr": "The distance from the eyes of the nearest point of the view. ",
                "name": "zNear Optional"
            },
            {
                "descr": "The distance from the eyes of the farthest point of the view. ",
                "name": "zFar Optional"
            }
        ],
        "path": "dom/hmdvrdevice/setfieldofview",
        "syntax": "HMDVRDevice.setFieldOfView(leftFOV,rightFOV,zNear,zFar);",
        "type": "WebVR"
    },
    "HTML Drag and Drop API": {
        "descr": "HTML Drag and Drop interfaces enable applications to use drag and drop features in Firefox and other browsers. For example, with these features, the user can select draggable elements with a mouse, drag the elements to a droppable element, and drop those elements by releasing the mouse button. A translucent representation of the draggable elements follows the mouse pointer during the drag operation.",
        "name": "HTML Drag and Drop API",
        "params": [],
        "path": "dom/html_drag_and_drop_api",
        "syntax": "draggable attribute plus the ondragstart global event handler, as shown in the following code sample function dragstart_handler(ev) { console.log(\"dragStart\");\n or  // Add the target element's id to the data transfer object ev.dataTransfer.setData(\"text/plain\", ev.target.id);\n or  } <body> <p id=\"p1\" draggable=\"true\" ondragstart=\"dragstart_handler(event);\n or \">This element is draggable.</p> </body>);",
        "type": "Drag & Drop"
    },
    "HTML Drag and Drop API: Drag operations": {
        "descr": "The following describes the steps that occur during a drag and drop operation.",
        "name": "HTML Drag and Drop API: Drag operations",
        "params": [
            {
                "descr": "no operation is permitted",
                "name": "none"
            },
            {
                "descr": "copy only",
                "name": "copy"
            },
            {
                "descr": "move only",
                "name": "move"
            },
            {
                "descr": "link only",
                "name": "link"
            },
            {
                "descr": "copy or move only",
                "name": "copyMove"
            },
            {
                "descr": "copy or link only",
                "name": "copyLink"
            },
            {
                "descr": "link or move only",
                "name": "linkMove"
            },
            {
                "descr": "copy, move, or link",
                "name": "all"
            },
            {
                "descr": "The default value when the effect has not been set, equivalent to all.",
                "name": "uninitialized"
            }
        ],
        "path": "dom/html_drag_and_drop_api/drag_operations",
        "syntax": "<div draggable=\"true\" ondragstart=\"event.dataTransfer.setData('text/plain', 'This text may be dragged')\"> This text <strong>may</strong> be dragged. </div>",
        "type": "Drag & Drop"
    },
    "HTMLAnchorElement.download": {
        "descr": "The HTMLAnchorElement.download property Is a DOMString indicating that the linked resource is intended to be downloaded rather than displayed in the browser. The value represent the proposed name of the file. If the name is not a valid filename of the underlying OS, browser will adapt it.",
        "name": "HTMLAnchorElement.download",
        "params": [],
        "path": "dom/htmlanchorelement/download",
        "syntax": "var dnload = anchorElt.download; anchorElt.download = dnload;  Specifications    Specification Status Comment     HTML Living StandardThe definition of 'download' in that specification. Living Standard No change from Document Object Model (DOM) Level 2 HTML Specification     Browser compatibilityUpdate compatibility data on GitHub",
        "type": "Elements"
    },
    "HTMLAnchorElement.referrerPolicy": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "HTMLAnchorElement.referrerPolicy",
        "params": [],
        "path": "dom/htmlanchorelement/referrerpolicy",
        "syntax": "refStr = anchorElt.referrerPolicy; anchorElt.referrerPolicy = refStr; Values     \"no-referrer\" meaning that the Referer: HTTP header will not be sent.  \"origin\" meaning that the referrer will be the origin of the page, that is roughly the scheme, the host and the port.  \"unsafe-url\" meaning that the referrer will include the origin and the path (but not the fragment, password, or username). This case is unsafe as it can leak path information that has been concealed to third-party by using TLS.    Examples",
        "type": "Elements"
    },
    "HTMLAnchorElement.rel": {
        "descr": "The HTMLAnchorElement.rel property reflects the rel attribute. It is a DOMString containing a space-separated list of link types indicating the relationship between the resource represented by the <a> element and the current document.",
        "name": "HTMLAnchorElement.rel",
        "params": [],
        "path": "dom/htmlanchorelement/rel",
        "syntax": "var relstr = anchorElt.rel; anchorElt.rel = relstr;  Example var anchors = document.getElementsByTagName(\"a\");\n or  var length = anchors.length; for (var i = 0; i < length; i++) { alert(\"Rel: \" + anchors[i].rel);\n or  });",
        "type": "Elements"
    },
    "HTMLAnchorElement.relList": {
        "descr": "The HTMLAnchorElement.relList read-only property reflects the rel attribute. It is a live DOMTokenList containing the set of link types indicating the relationship between the resource represented by the <a> element and the current document.",
        "name": "HTMLAnchorElement.relList",
        "params": [],
        "path": "dom/htmlanchorelement/rellist",
        "syntax": "var relstr = anchorElt.relList;  Example var anchors = document.getElementsByTagName(\"a\");\n or  var length = anchors.length; for (var i = 0; i < length; i++) { var list = anchors[i].relList; var listLength = list.length; console.log(\"New anchor node found with\", listLength, \"link types in relList.\");\n or  for (var j = 0; j < listLength; j++) { console.log(list[j]);\n or  } });",
        "type": "Elements"
    },
    "HTMLAreaElement.referrerPolicy": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "HTMLAreaElement.referrerPolicy",
        "params": [],
        "path": "dom/htmlareaelement/referrerpolicy",
        "syntax": "refStr = areaElt.referrerPolicy; areaElt.referrerPolicy = refStr; Values     \"no-referrer\" meaning that the Referer: HTTP header will not be sent.  \"origin\" meaning that the referrer will be the origin of the page, that is roughly the scheme, the host and the port.  \"unsafe-url\" meaning that the referrer will include the origin and the path (but not the fragment, password, or username). This case is unsafe as it can leak path information that has been concealed to third-party by using TLS.    Examples",
        "type": "Elements"
    },
    "HTMLAreaElement.rel": {
        "descr": "The HTMLAreaElement.rel property reflects the rel attribute. It is a DOMString containing a space-separated list of link types indicating the relationship between the resource represented by the <a> element and the current document.",
        "name": "HTMLAreaElement.rel",
        "params": [],
        "path": "dom/htmlareaelement/rel",
        "syntax": "var relstr = areaElt.rel; areaElt.rel = relstr;  Example var areas = document.getElementsByTagName(\"area\");\n or  var length = areas.length; for (var i = 0; i < length; i++) { alert(areas[i]);\n or  });",
        "type": "Elements"
    },
    "HTMLAreaElement.relList": {
        "descr": "The HTMLAreaElement.relList read-only property reflects the rel attribute. It is a live DOMTokenList containing the set of link types indicating the relationship between the resource represented by the <area> element and the current document.",
        "name": "HTMLAreaElement.relList",
        "params": [],
        "path": "dom/htmlareaelement/rellist",
        "syntax": "var relstr = areaElt.relList;  Example var areas = document.getElementsByTagName(\"area\");\n or  var length = areas.length; for (var i = 0; i < length; i++) { var list = areas[i].relList; var listLength = list.length; console.log(\"New area found.\");\n or  for (var j = 0; j < listLength; j++) { console.log(list[j]);\n or  } });",
        "type": "Elements"
    },
    "HTMLAudioElement": {
        "descr": "The HTMLAudioElement interface provides access to the properties of <audio> elements, as well as methods to manipulate them. It derives from the HTMLMediaElement interface.",
        "name": "HTMLAudioElement",
        "params": [
            {
                "descr": "The src property of the constructed HTMLAudioElement.",
                "name": "URLString (expected type: DOMString; optional)"
            }
        ],
        "path": "dom/htmlaudioelement",
        "syntax": "mySound = new Audio([URLString]);",
        "type": "Elements"
    },
    "HTMLBodyElement": {
        "descr": "The HTMLBodyElement interface provides special properties (beyond those of the regular HTMLElement interface they also inherit) for manipulating body elements.",
        "name": "HTMLBodyElement",
        "params": [
            {
                "descr": "Is a DOMString that represents the color of active hyperlinks.",
                "name": "HTMLBodyElement.aLink"
            },
            {
                "descr": "Is a DOMString that represents the description of the location of the background image resource. ",
                "name": "HTMLBodyElement.background"
            },
            {
                "descr": "Is a DOMString that represents the background color for the document.",
                "name": "HTMLBodyElement.bgColor"
            },
            {
                "descr": "Is a DOMString that represents the color of unvisited links.",
                "name": "HTMLBodyElement.link"
            },
            {
                "descr": "Is a DOMString that represents the foreground color of text.",
                "name": "HTMLBodyElement.text"
            },
            {
                "descr": "Is a DOMString that represents the color of visited links.",
                "name": "HTMLBodyElement.vLink"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the afterprint event is raised.",
                "name": "WindowEventHandlers.onafterprint"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the beforeprint event is raised.",
                "name": "WindowEventHandlers.onbeforeprint"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the beforeunload event is raised.",
                "name": "WindowEventHandlers.onbeforeunload"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the hashchange event is raised.",
                "name": "WindowEventHandlers.onhashchange"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the languagechange event is raised.",
                "name": "WindowEventHandlers.onlanguagechange"
            },
            {
                "descr": "Is an EventHandler called whenever an object receives a message event.",
                "name": "WindowEventHandlers.onmessage"
            },
            {
                "descr": "Is an eventHandler called whenever an object receives a messageerror event.",
                "name": "WindowEventHandlers.onmessageerror"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the offline event is raised.",
                "name": "WindowEventHandlers.onoffline"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the online event is raised.",
                "name": "WindowEventHandlers.ononline"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the pagehide event is raised.",
                "name": "WindowEventHandlers.onpagehide"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the pageshow event is raised.",
                "name": "WindowEventHandlers.onpageshow"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the popstate event is raised.",
                "name": "WindowEventHandlers.onpopstate"
            },
            {
                "descr": "An EventHandler representing the code executed when the rejectionhandled event is raised, indicating that a Promise was rejected and the rejection has been handled.",
                "name": "WindowEventHandlers.onrejectionhandled"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the resize event is raised.",
                "name": "WindowEventHandlers.onresize"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the storage event is raised.",
                "name": "WindowEventHandlers.onstorage"
            },
            {
                "descr": "An EventHandler representing the code executed when the unhandledrejection event is raised, indicating that a Promise was rejected but the rejection was not handled.",
                "name": "WindowEventHandlers.onunhandledrejection"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the unload event is raised.",
                "name": "WindowEventHandlers.onunload"
            }
        ],
        "path": "dom/htmlbodyelement",
        "syntax": "Recommendation     HTML5The definition of 'HTMLBodyElement' in that specification. Recommendation The following properties are now obsolete: aLink, bgColor, background, link, text, and vLink. The following properties have been added: onafterprint, onbeforeprint, onbeforeunload, onblur, onerror, onfocus, onhashchange, onload, onmessage, onoffline, ononline, onpopstate, onresize, onstorage, and onunload.   Document Object Model (DOM) Level 2 HTML SpecificationThe definition of 'HTMLBodyElement' in that specification. Obsolete No change from Document Object Model (DOM) Level 1 Specification.   Document Object Model (DOM) Level 1 SpecificationThe definition of 'HTMLBodyElement' in that specification. Obsolete Initial definition.    Browser compatibilityUpdate compatibility data on GitHub",
        "type": "Elements"
    },
    "HTMLButtonElement.labels": {
        "descr": "The HTMLButtonElement.labels read-only property returns a NodeList of the <label> elements associated with the <button> element.",
        "name": "HTMLButtonElement.labels",
        "params": [],
        "path": "dom/htmlbuttonelement/labels",
        "syntax": "var labelElements = button.labels;  Return value A NodeList containing the <label> elements associated with the <button> element. Example HTML <label id=\"label1\" for=\"test\">Label 1</label> <button id=\"test\">Button</button> <label id=\"label2\" for=\"test\">Label 2</label>  JavaScript window.addEventListener(\"DOMContentLoaded\", function() { const button = document.getElementById(\"test\");\n or  for(var i = 0; i < button.labels.length; i++) { console.log(button.labels[i].textContent);\n or  // \"Label 1\" and \"Label 2\" } });",
        "type": "Elements"
    },
    "HTMLCanvasElement.captureStream": {
        "descr": "The HTMLCanvasElement captureStream() method returns a MediaStream which includes a CanvasCaptureMediaStreamTrack containing a real-time video capture of the canvas's contents.",
        "name": "HTMLCanvasElement.captureStream",
        "params": [
            {
                "descr": "A double-precision floating-point value that indicates the rate of capture of each frame. ",
                "name": "frameRate Optional"
            },
            {
                "descr": "The value of frameRate is negative.",
                "name": "NotSupportedError"
            }
        ],
        "path": "dom/htmlcanvaselement/capturestream",
        "syntax": "MediaStream = canvas.captureStream(frameRate);",
        "type": "Elements"
    },
    "HTMLCanvasElement.getContext": {
        "descr": "The HTMLCanvasElement.getContext() method returns a drawing context on the canvas, or null if the context identifier is not supported.",
        "name": "HTMLCanvasElement.getContext",
        "params": [
            {
                "descr": "Is a DOMString containing the context identifier defining the drawing context associated to the canvas. ",
                "name": "contextType"
            },
            {
                "descr": "You can use several context attributes when creating your rendering context, for example: const gl = canvas.getContext('webgl', { antialias: false, depth: false }); 2d context attributes:   alpha: Boolean that indicates if the canvas contains an alpha channel. If set to false, the browser now knows that the backdrop is always opaque, which can speed up drawing of transparent content and images.  (Gecko only) willReadFrequently: Boolean that indicates whether or not a lot of read-back operations are planned. This will force the use of a software (instead of hardware accelerated) 2D canvas and can save memory when calling getImageData() frequently. This option is only available, if the flag gfx.canvas.willReadFrequently.enable is set to true (which, by default, is only the case for B2G/Firefox OS).  (Blink only) storage: String that indicates which storage is used (\"persistent\" by default).  WebGL context attributes:   alpha: Boolean that indicates if the canvas contains an alpha buffer.  antialias: Boolean that indicates whether or not to perform anti-aliasing.  depth: Boolean that indicates that the drawing buffer has a depth buffer of at least 16 bits.  failIfMajorPerformanceCaveat: Boolean that indicates if a context will be created if the system performance is low.  powerPreference: A hint to the user agent indicating what configuration of GPU is suitable for the WebGL context. Possible values are:   \"default\": Let the user agent decide which GPU configuration is most suitable. This is the default value.  \"high-performance\": Prioritizes rendering performance over power consumption.  \"low-power\": Prioritizes power saving over rendering performance.    premultipliedAlpha: Boolean that indicates that the page compositor will assume the drawing buffer contains colors with pre-multiplied alpha.  preserveDrawingBuffer: If the value is true the buffers will not be cleared and will preserve their values until cleared or overwritten by the author.  stencil: Boolean that indicates that the drawing buffer has a stencil buffer of at least 8 bits.",
                "name": "contextAttributes"
            }
        ],
        "path": "dom/htmlcanvaselement/getcontext",
        "syntax": "var ctx = canvas.getContext(contextType);\n or  var ctx = canvas.getContext(contextType, contextAttributes);",
        "type": "Elements"
    },
    "HTMLCanvasElement.height": {
        "descr": "The HTMLCanvasElement.height property is a positive integer reflecting the height HTML attribute of the <canvas> element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of 150 is used.",
        "name": "HTMLCanvasElement.height",
        "params": [],
        "path": "dom/htmlcanvaselement/height",
        "syntax": "var pxl = canvas.height; canvas.height = pxl;  Examples Given this <canvas> element: <canvas id=\"canvas\" width=\"300\" height=\"300\"></canvas>  You can get the height of the canvas with the following code: var canvas = document.getElementById('canvas');\n or  console.log(canvas.height);\n or  // 300);",
        "type": "Elements"
    },
    "HTMLCanvasElement.toBlob": {
        "descr": "The HTMLCanvasElement.toBlob() method creates a Blob object representing the image contained in the canvas; this file may be cached on the disk or stored in memory at the discretion of the user agent. If type is not specified, the image type is image/png. The created image is in a resolution of 96dpi.",
        "name": "HTMLCanvasElement.toBlob",
        "params": [
            {
                "descr": "A callback function with the resulting Blob object as a single argument.",
                "name": "callback"
            },
            {
                "descr": "A DOMString indicating the image format. ",
                "name": "mimeType Optional"
            },
            {
                "descr": "A Number between 0 and 1 indicating image quality if the requested type is image/jpeg or image/webp. ",
                "name": "qualityArgument Optional"
            },
            {
                "descr": "The canvas's bitmap is not origin clean; at least some of its contents come from secure",
                "name": "SecurityError"
            }
        ],
        "path": "dom/htmlcanvaselement/toblob",
        "syntax": "canvas.toBlob(callback, mimeType, qualityArgument);",
        "type": "Elements"
    },
    "HTMLCanvasElement.toDataURL": {
        "descr": "The HTMLCanvasElement.toDataURL() method returns a data URI containing a representation of the image in the format specified by the type parameter (defaults to PNG). The returned image is in a resolution of 96 dpi.",
        "name": "HTMLCanvasElement.toDataURL",
        "params": [
            {
                "descr": "A DOMString indicating the image format. ",
                "name": "type Optional"
            },
            {
                "descr": "A Number between 0 and 1 indicating the image quality to use for image formats that use lossy compression such as image/jpeg and image/webp. ",
                "name": "encoderOptions Optional"
            },
            {
                "descr": "The canvas's bitmap is not origin clean; at least some of its contents have or may have been loaded from a site other than the one from which the document itself was loaded.",
                "name": "SecurityError"
            }
        ],
        "path": "dom/htmlcanvaselement/todataurl",
        "syntax": "canvas.toDataURL(type, encoderOptions);",
        "type": "Elements"
    },
    "HTMLCanvasElement.transferControlToOffscreen": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "HTMLCanvasElement.transferControlToOffscreen",
        "params": [],
        "path": "dom/htmlcanvaselement/transfercontroltooffscreen",
        "syntax": "OffscreenCanvas HTMLCanvasElement.transferControlToOffscreen()",
        "type": "Elements"
    },
    "HTMLCanvasElement.width": {
        "descr": "The HTMLCanvasElement.width property is a positive integer reflecting the width HTML attribute of the <canvas> element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of 300 is used.",
        "name": "HTMLCanvasElement.width",
        "params": [],
        "path": "dom/htmlcanvaselement/width",
        "syntax": "var pxl = canvas.width; canvas.width = pxl;  Examples Given this <canvas> element: <canvas id=\"canvas\" width=\"300\" height=\"300\"></canvas>  You can get the width of the canvas with the following code: var canvas = document.getElementById('canvas');\n or  console.log(canvas.width);\n or  // 300);",
        "type": "Elements"
    },
    "HTMLCollection.item": {
        "descr": "The HTMLCollection method item() returns the node located at the specified offset into the collection.",
        "name": "HTMLCollection.item",
        "params": [
            {
                "descr": "The position of the Node to be returned. ",
                "name": "index"
            }
        ],
        "path": "dom/htmlcollection/item",
        "syntax": "var element = HTMLCollection.item(index)",
        "type": "Elements"
    },
    "HTMLDialogElement": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "HTMLDialogElement",
        "params": [
            {
                "descr": "A Boolean reflecting the open HTML attribute, indicating whether the dialog is available for interaction.",
                "name": "HTMLDialogElement.open"
            },
            {
                "descr": "A DOMString that sets or returns the return value for the dialog.",
                "name": "HTMLDialogElement.returnValue"
            },
            {
                "descr": "Closes the dialog. An optional DOMString may be passed as an argument, updating the returnValue of the the dialog.",
                "name": "HTMLDialogElement.close()"
            },
            {
                "descr": "Displays the dialog modelessly, i.e. ",
                "name": "HTMLDialogElement.show()"
            },
            {
                "descr": "Displays the dialog as a modal, over the top of any other dialogs that might be present. ",
                "name": "HTMLDialogElement.showModal()"
            }
        ],
        "path": "dom/htmldialogelement",
        "syntax": "Living Standard     HTML 5.1The definition of '<dialog>' in that specification. Recommendation Initial definition    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari     Basic support   37  Yes  53 Disabled    53 Disabled    See bug 840640. Disabled From version 53: this feature is behind the dom.dialog_element.enabled preference (needs to be set to true). To change preferences in Firefox, visit about:config.    No  Yes  No    open",
        "type": "Elements"
    },
    "HTMLDialogElement.close": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "HTMLDialogElement.close",
        "params": [
            {
                "descr": "A DOMString representing an updated value for the HTMLDialogElement.returnValue of the dialog.",
                "name": "returnValue Optional"
            }
        ],
        "path": "dom/htmldialogelement/close",
        "syntax": "dialogInstance.close(returnValue);",
        "type": "Elements"
    },
    "HTMLDialogElement.open": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "HTMLDialogElement.open",
        "params": [],
        "path": "dom/htmldialogelement/open",
        "syntax": "dialogInstance.open = true; var myOpenValue = dialogInstance.open; Value A Boolean representing the state of the open HTML attribute. true means it is set, and therefore the dialog is shown. false means it not set, and therefore the dialog is not shown. The property is now read only — it is possible to set the value to programmatically show or hide the dialog. Examples The following example shows a simple button that, when clicked, opens a <dialog> containing a form via the showModal()",
        "type": "Elements"
    },
    "HTMLDialogElement.returnValue": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "HTMLDialogElement.returnValue",
        "params": [],
        "path": "dom/htmldialogelement/returnvalue",
        "syntax": "dialogInstance.returnValue = 'myReturnValue'; var myReturnValue = dialogInstance.returnValue; Value A DOMString representing the returnValue of the dialog. Examples The following example displays a button to open a <dialog> containing a form via the showModal()",
        "type": "Elements"
    },
    "HTMLDialogElement.show": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "HTMLDialogElement.show",
        "params": [],
        "path": "dom/htmldialogelement/show",
        "syntax": "dialogInstance.show();",
        "type": "Elements"
    },
    "HTMLDialogElement.showModal": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "HTMLDialogElement.showModal",
        "params": [],
        "path": "dom/htmldialogelement/showmodal",
        "syntax": "dialogInstance.showModal();",
        "type": "Elements"
    },
    "HTMLElement.accessKeyLabel": {
        "descr": "The HTMLElement.accessKeyLabel read-only property returns a String that represents the element's assigned access key (if any); otherwise it returns an empty string.",
        "name": "HTMLElement.accessKeyLabel",
        "params": [],
        "path": "dom/htmlelement/accesskeylabel",
        "syntax": "label = element.accessKeyLabel  Example JavaScript var node = document.getElementById('btn1');\n or  if (node.accessKeyLabel) { node.title += ' [' + node.accessKeyLabel + ']'; } else { node.title += ' [' + node.accessKey + ']'; } node.onclick = function () { var p = document.createElement('p');\n or  p.textContent = 'Clicked!'; node.parentNode.appendChild(p);\n or  };);",
        "type": "Elements"
    },
    "HTMLElement.blur": {
        "descr": "The HTMLElement.blur() method removes keyboard focus from the current element.",
        "name": "HTMLElement.blur",
        "params": [],
        "path": "dom/htmlelement/blur",
        "syntax": "elt.blur()",
        "type": "Elements"
    },
    "HTMLElement.click": {
        "descr": "The HTMLElement.click() method simulates a mouse click on an element.",
        "name": "HTMLElement.click",
        "params": [],
        "path": "dom/htmlelement/click",
        "syntax": "element.click()",
        "type": "Elements"
    },
    "HTMLElement.dataset": {
        "descr": "The dataset property on the HTMLElement interface provides read/write access to all the custom data attributes (data-*) set on the element. This access is available both in HTML and within the DOM. It is a map of DOMString, one entry for each custom data attribute. Note that thedatasetproperty itself can be read, but not directly written. Instead, all writes must be to the individual properties within the dataset, which in turn represent the data attributes. Note also that an HTML data-attribute and its corresponding DOMdataset.property do not share the same name, but they are always similar:",
        "name": "HTMLElement.dataset",
        "params": [
            {
                "descr": ".camelCasedName = string;",
                "name": "dataset"
            },
            {
                "descr": "[camelCasedName] = string;",
                "name": "dataset"
            }
        ],
        "path": "dom/htmlelement/dataset",
        "syntax": "null is converted into the string \"null\". When you want to remove an attribute, you can use the delete operator.  Syntax   string = element.dataset.camelCasedName;  element.dataset.camelCasedName = string;   string = element.dataset[camelCasedName];  element.dataset[camelCasedName] = string;  Custom data attributes can also be set directly on HTML elements, but attribute names must use the data- syntax above.   Examples <div id=\"user\" data-id=\"1234567890\" data-user=\"johndoe\" data-date-of-birth>John Doe</div> const el = document.querySelector('#user');\n or  // el.id == 'user' // el.dataset.id === '1234567890' // el.dataset.user === 'johndoe' // el.dataset.dateOfBirth === '' // set the data attribute el.dataset.dateOfBirth = '1960-10-03'; // Result: el.dataset.dateOfBirth === 1960-10-03 delete el.dataset.dateOfBirth; // Result: el.dataset.dateOfBirth === undefined // 'someDataAttr' in el.dataset === false el.dataset.someDataAttr = 'mydata'; // Result: 'someDataAttr' in el.dataset === true);",
        "type": "Elements"
    },
    "HTMLElement.dir": {
        "descr": "The HTMLElement.dir property gets or sets the text writing directionality of the content of the current element.",
        "name": "HTMLElement.dir",
        "params": [],
        "path": "dom/htmlelement/dir",
        "syntax": "var currentWritingDirection = elementNodeReference.dir; elementNodeReference.dir = newWritingDirection;    currentWritingDirection is a string variable representing the text writing direction of the current element.  newWritingDirection is a string variable representing the text writing direction value.  Possible values for dir are ltr, for left-to-right, rtl, for right-to-left, and auto for specifying that the direction of the element must be determined based on the contents of the element. Example var parg = document.getElementById(\"para1\");\n or  parg.dir = \"rtl\"; // change the text direction on a paragraph identified as \"para1\");",
        "type": "Elements"
    },
    "HTMLElement.focus": {
        "descr": "The HTMLElement.focus() method sets focus on the specified element, if it can be focused.",
        "name": "HTMLElement.focus",
        "params": [
            {
                "descr": "Is an Object with the following property:",
                "name": "focusOptions Optional"
            },
            {
                "descr": "Is a Boolean value:  If false, the method will scroll the element into the visible area of the browser window If true, the method will NOT scroll the element into the visible area of the browser window.",
                "name": "preventScroll Optional"
            }
        ],
        "path": "dom/htmlelement/focus",
        "syntax": "element.focus();\n or  element.focus(focusOption);\n or  // Object parameter);",
        "type": "Elements"
    },
    "HTMLElement.forceSpellCheck": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "HTMLElement.forceSpellCheck",
        "params": [],
        "path": "dom/htmlelement/forcespellcheck",
        "syntax": "element.forceSpellCheck()",
        "type": "Elements"
    },
    "HTMLElement.hidden": {
        "descr": "The HTMLElement property hidden is a Boolean which is true if the element is hidden; otherwise the value is false. This is quite different from using the CSS property display to control the visibility of an element. The hidden property applies to all presentation modes and should not be used to hide content that is meant to be directly accessible to the user.",
        "name": "HTMLElement.hidden",
        "params": [],
        "path": "dom/htmlelement/hidden",
        "syntax": "isHidden = HTMLElement.hidden; HTMLElement.hidden = true | false; Value A Boolean which is true if the element is hidden from view; otherwise, the value is false. Example Here's an example where a hidden block is used to contain a thank you message that is displayed after a user agrees to an unusual request. JavaScript document.getElementById(\"okButton\") .addEventListener(\"click\", function() { document.getElementById(\"welcome\").hidden = true; document.getElementById(\"awesome\").hidden = false; }, false);",
        "type": "Elements"
    },
    "HTMLElement.innerText": {
        "descr": "The innerText property of the HTMLElement interface represents the \"rendered\" text content of a node and its descendants. As a getter, it approximates the text the user would get if they highlighted the contents of the element with the cursor and then copied it to the clipboard.",
        "name": "HTMLElement.innerText",
        "params": [],
        "path": "dom/htmlelement/innertext",
        "syntax": "elemInstance.innerText; elemInstance.innerText = string; Returns A string representing the rendered text content of an element. Examples let string = 'Hello, I am pleased to see you'; const para = document.querySelector('p');\n or  para.innerText = string;);",
        "type": "Elements"
    },
    "HTMLElement.isContentEditable": {
        "descr": "The HTMLElement.isContentEditable read-only property returns a Boolean that is true if the contents of the element are editable; otherwise it returns false.",
        "name": "HTMLElement.isContentEditable",
        "params": [],
        "path": "dom/htmlelement/iscontenteditable",
        "syntax": "editable = element.isContentEditable  Example JavaScript document.getElementById(\"infoText1\").innerHTML += document.getElementById(\"myText1\").isContentEditable; document.getElementById(\"infoText2\").innerHTML += document.getElementById(\"myText2\").isContentEditable;",
        "type": "Elements"
    },
    "HTMLElement.lang": {
        "descr": "The HTMLElement.lang property gets or sets the base language of an element's attribute values and text content.",
        "name": "HTMLElement.lang",
        "params": [],
        "path": "dom/htmlelement/lang",
        "syntax": "var languageUsed = elementNodeReference.lang; // Get the value of lang elementNodeReference.lang = NewLanguage; // Set new value for lang  languageUsed is a string variable that gets the language in which the text of the current element is written. NewLanguage is a string variable with its value setting the language in which the text of the current element is written. Example // this snippet compares the base language and // redirects to another url based on language if (document.documentElement.lang === \"en\") { window.location.href = \"Some_document.html.en\"; } else if (document.documentElement.lang === \"ru\") { window.location.href = \"Some_document.html.ru\"; }",
        "type": "Elements"
    },
    "HTMLElement.offsetHeight": {
        "descr": "The HTMLElement.offsetHeight read-only property returns the height of an element, including vertical padding and borders, as an integer.",
        "name": "HTMLElement.offsetHeight",
        "params": [],
        "path": "dom/htmlelement/offsetheight",
        "syntax": "var intElemOffsetHeight = element.offsetHeight; intElemOffsetHeight is a variable storing an integer corresponding to the offsetHeight pixel value of the element. The offsetHeight property is read-only. Example   The example image above shows a scrollbar and an offsetHeight which fits on the window. However, non-scrollable elements may have large offsetHeight values, much larger than the visible content. These elements are typically contained within scrollable elements; consequently, these non-scrollable elements may be completely or partly invisible, depending on the scrollTop setting of the scrollable container. Specification    Specification Status Comment     CSS Object Model (CSSOM) View ModuleThe definition of 'offsetLeft' in that specification. Working Draft      Notes offsetHeight",
        "type": "Elements"
    },
    "HTMLElement.offsetLeft": {
        "descr": "The HTMLElement.offsetLeft read-only property returns the number of pixels that the upper left corner of the current element is offset to the left within the HTMLElement.offsetParent node.",
        "name": "HTMLElement.offsetLeft",
        "params": [],
        "path": "dom/htmlelement/offsetleft",
        "syntax": "left = element.offsetLeft;  left is an integer representing the offset to the left in pixels from the closest relatively positioned parent element. Example var colorTable = document.getElementById(\"t1\");\n or  var tOLeft = colorTable.offsetLeft; if (tOLeft > 5) { // large left offset: do something here });",
        "type": "Elements"
    },
    "HTMLElement.offsetParent": {
        "descr": "The HTMLElement.offsetParent read-only property returns a reference to the object which is the closest (nearest in the containment hierarchy) positioned containing element. If the element is non-positioned, the nearest td, th, table or the body is returned.",
        "name": "HTMLElement.offsetParent",
        "params": [],
        "path": "dom/htmlelement/offsetparent",
        "syntax": "parentObj = element.offsetParent;    parentObj is an object reference to the element in which the current element is offset.  Specification    Specification Status Comment     CSS Object Model (CSSOM) View ModuleThe definition of 'offsetParent' in that specification. Working Draft      Browser compatibilityUpdate compatibility data on GitHub",
        "type": "Elements"
    },
    "HTMLElement.offsetTop": {
        "descr": "The HTMLElement.offsetTop read-only property returns the distance of the current element relative to the top of the offsetParent node.",
        "name": "HTMLElement.offsetTop",
        "params": [],
        "path": "dom/htmlelement/offsettop",
        "syntax": "topPos = element.offsetTop;  Parameters   topPos is the number of pixels from the top of the closest relatively positioned parent element.  Example var d = document.getElementById(\"div1\");\n or  var topPos = d.offsetTop; if (topPos > 10) { // object is offset more // than 10 pixels from its parent });",
        "type": "Elements"
    },
    "HTMLElement.offsetWidth": {
        "descr": "The HTMLElement.offsetWidth read-only property returns the layout width of an element as an integer.",
        "name": "HTMLElement.offsetWidth",
        "params": [],
        "path": "dom/htmlelement/offsetwidth",
        "syntax": "var intElemOffsetWidth = element.offsetWidth;  intElemOffsetWidth is a variable storing an integer corresponding to the offsetWidth pixel value of the element. The offsetWidth property is a read-only.  This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect()",
        "type": "Elements"
    },
    "HTMLElement.style": {
        "descr": "The HTMLElement.style property is used to get as well as set the inline style of an element. While getting, it returns a CSSStyleDeclaration object that contains a list of all styles properties for that element with values assigned for the attributes that are defined in the element's inline style attribute. See the CSS Properties Reference for a list of the CSS properties accessible via style. The style property has the same (and highest) priority in the CSS cascade as an inline style declaration set via the style attribute.",
        "name": "HTMLElement.style",
        "params": [],
        "path": "dom/htmlelement/style",
        "syntax": "window.getComputedStyle()",
        "type": "Elements"
    },
    "HTMLElement.tabIndex": {
        "descr": "The HTMLElement.tabIndex property represents the tab order of the current element.",
        "name": "HTMLElement.tabIndex",
        "params": [],
        "path": "dom/htmlelement/tabindex",
        "syntax": "elt.tabIndex = index; var index = elt.tabIndex;    index is an integer  Example var b1 = document.getElementById(\"button1\");\n or  b1.tabIndex = 1;);",
        "type": "Elements"
    },
    "HTMLElement.title": {
        "descr": "The HTMLElement.title property represents the title of the element, the text usually displayed in a 'tool tip' popup when the mouse is over the displayed node.",
        "name": "HTMLElement.title",
        "params": [],
        "path": "dom/htmlelement/title",
        "syntax": "var str = element.title; element.title = str;  Example  button1.title = \"click to refresh\";  Specifications    Specification Status Comment     HTML Living StandardThe definition of 'title' in that specification. Living Standard No change from Document Object Model (DOM) Level 2 HTML Specification.   Document Object Model (DOM) Level 2 HTML SpecificationThe definition of 'title' in that specification. Obsolete No change from Document Object Model (DOM) Level 1 Specification.   Document Object Model (DOM) Level 1 SpecificationThe definition of 'title' in that specification. Obsolete Initial definition.    Browser compatibilityUpdate compatibility data on GitHub",
        "type": "Elements"
    },
    "HTMLFontElement.color": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "HTMLFontElement.color",
        "params": [],
        "path": "dom/htmlfontelement/color",
        "syntax": "Green green GREEN    Valid hex color string  in rgb format: #RRGGBB  #008000   RGB using decimal values rgb(x,x,x) (x in 0-255 range)  rgb(0,128,0)",
        "type": "Elements"
    },
    "HTMLFontElement.face": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "HTMLFontElement.face",
        "params": [],
        "path": "dom/htmlfontelement/face",
        "syntax": "courier,verdana    Syntax faceString = fontObj.face; fontObj.face = faceString;  Examples // Assumes there is <font id=\"f\"> element in the HTML var f = document.getElementById(\"f\");\n or  f.face = \"arial\";);",
        "type": "Elements"
    },
    "HTMLFontElement.size": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "HTMLFontElement.size",
        "params": [],
        "path": "dom/htmlfontelement/size",
        "syntax": "6   Relative size string  +x or -x, where x is the number relative to the value of the size attribute of the <basefont> element (the result should be in the same range of 1-7)  +2 -1",
        "type": "Elements"
    },
    "HTMLFormControlsCollection": {
        "descr": "The HTMLFormControlsCollection interface represents a collection of HTML form control elements. It represents the lists returned by the HTMLFormElement interface's elements property and the HTMLFieldSetElement interface's elements property.",
        "name": "HTMLFormControlsCollection",
        "params": [
            {
                "descr": "Returns the RadioNodeList or the Element in the collection whose name or id match the specified name, or null if no nodes match. ",
                "name": "HTMLFormControlsCollection.namedItem()"
            }
        ],
        "path": "dom/htmlformcontrolscollection",
        "syntax": "String, like collection[\"value\"] is equivalent to collection.namedItem(\"value\")",
        "type": "Elements"
    },
    "HTMLFormControlsCollection.namedItem": {
        "descr": "Note that this version of namedItem() hides the one inherited from HTMLCollection. Like that one, in JavaScript, using the array bracket syntax with a String, like collection[\"value\"] is equivalent to collection.namedItem(\"value\").",
        "name": "HTMLFormControlsCollection.namedItem",
        "params": [],
        "path": "dom/htmlformcontrolscollection/nameditem",
        "syntax": "String, like collection[\"value\"] is equivalent to collection.namedItem(\"value\")",
        "type": "Elements"
    },
    "HTMLFormElement": {
        "descr": "The HTMLFormElement interface represents a <form> element in the DOM; it allows access to and in some cases modification of aspects of the form, as well as access to its component elements.",
        "name": "HTMLFormElement",
        "params": [
            {
                "descr": "A HTMLFormControlsCollection holding all form controls belonging to this form element.",
                "name": "HTMLFormElement.elements Read only"
            },
            {
                "descr": "A long reflecting the number of controls in the form.",
                "name": "HTMLFormElement.lengthRead only"
            },
            {
                "descr": "A DOMString reflecting the value of the form's name HTML attribute, containing the name of the form.",
                "name": "HTMLFormElement.name"
            },
            {
                "descr": "A DOMString reflecting the value of the form's method HTML attribute, indicating the HTTP method used to submit the form. ",
                "name": "HTMLFormElement.method"
            },
            {
                "descr": "A DOMString reflecting the value of the form's target HTML attribute, indicating where to display the results received from submitting the form.",
                "name": "HTMLFormElement.target"
            },
            {
                "descr": "A DOMString reflecting the value of the form's action HTML attribute, containing the URI of a program that processes the information submitted by the form.",
                "name": "HTMLFormElement.action"
            },
            {
                "descr": "A DOMString reflecting the value of the form's enctype HTML attribute, indicating the type of content that is used to transmit the form to the server. ",
                "name": "HTMLFormElement.encoding or HTMLFormElement.enctype"
            },
            {
                "descr": "A DOMString reflecting the value of the form's accept-charset HTML attribute, representing the character encoding that the server accepts.",
                "name": "HTMLFormElement.acceptCharset"
            },
            {
                "descr": "A DOMString reflecting the value of the form's autocomplete HTML attribute, indicating whether the controls in this form can have their values automatically populated by the browser.",
                "name": "HTMLFormElement.autocomplete"
            },
            {
                "descr": "A Boolean reflecting the value of the form's novalidate HTML attribute, indicating whether the form should not be validated.",
                "name": "HTMLFormElement.noValidate"
            },
            {
                "descr": "Submits the form to the server.",
                "name": "HTMLFormElement.submit()"
            },
            {
                "descr": "Resets the form to its initial state.",
                "name": "HTMLFormElement.reset()"
            },
            {
                "descr": "Returns true if the element's child controls are subject to constraint validation and satisfy those contraints; returns false if some controls do not satisfy their constraints. ",
                "name": "HTMLFormElement.checkValidity()"
            },
            {
                "descr": "Returns true if the element's child controls satisfy their validation constraints. ",
                "name": "HTMLFormElement.reportValidity()"
            },
            {
                "descr": "Triggers a native browser interface to assist the user in completing the fields which have an autofill field name value that is not off or on. ",
                "name": "HTMLFormElement.requestAutocomplete()"
            },
            {
                "descr": "Returns the form at the specified index into the array of forms.",
                "name": "document.forms[index]"
            },
            {
                "descr": "Returns the form whose ID is id.",
                "name": "document.forms[id]"
            },
            {
                "descr": "Returns the form whose name attribute's value is name.",
                "name": "document.forms[name]"
            }
        ],
        "path": "dom/htmlformelement",
        "syntax": "document.forms[index] Returns the form at the specified index into the array of forms. document.forms[id] Returns the form whose ID is id. document.forms[name] Returns the form whose name attribute's value is name.  Accessing the form's elements You can access the list of the form's data-containing elements by examining the form's elements property. This returns an HTMLFormControlsCollection listing all of the form's user data entry elements, both those which are descendants of the <form> and those which are made members of the form using their form attributes. Elements that are considered form controls The elements which are included by HTMLFormElement.elements and HTMLFormElement.length are:  <button> <fieldset>  <input> (with the exception that any whose type is \"image\" are omitted for historical reasons) <object>",
        "type": "Elements"
    },
    "HTMLFormElement.elements": {
        "descr": "The HTMLFormElement property elements returns an HTMLFormControlsCollection listing all the form controls contained in the <form> element. Independently, you can obtain just the number of form controls using the length property.",
        "name": "HTMLFormElement.elements",
        "params": [],
        "path": "dom/htmlformelement/elements",
        "syntax": "nodeList = HTMLFormElement.elements  Value An HTMLFormControlsCollection containing all non-image controls in the form. This is a live collection; if form controls are added to or removed from the form, this collection will update to reflect the change. The form controls in the returned collection are in the same order in which they appear in the form by following a preorder, depth-first traversal of the tree. This is called tree order. The elements which are included by HTMLFormElement.elements and HTMLFormElement.length are:  <button> <fieldset>  <input> (with the exception that any whose type is \"image\" are omitted for historical reasons) <object>",
        "type": "Elements"
    },
    "HTMLFormElement.length": {
        "descr": "The HTMLFormElement.length read-only property returns the number of controls in the <form> element. You can access the list of the form's controls using the elements property.",
        "name": "HTMLFormElement.length",
        "params": [],
        "path": "dom/htmlformelement/length",
        "syntax": "numControls = form.length;  Value The number of form controls within the <form>. This is the same as the number of the elements in the HTMLFormControlsCollection returned by the elements property. Example if (document.getElementById(\"form1\").length > 1) { // more than one form control here }",
        "type": "Elements"
    },
    "HTMLFormElement.name": {
        "descr": "The HTMLFormElement.name property represents the name of the current form element as a string.",
        "name": "HTMLFormElement.name",
        "params": [],
        "path": "dom/htmlformelement/name",
        "syntax": "string = form.name form.name = string Example var form1name = document.getElementById(\"form1\").name; if (form1name != document.form.form1) { // browser doesn't support this form of reference }",
        "type": "Elements"
    },
    "HTMLFormElement.reportValidity": {
        "descr": "The HTMLFormElement.reportValidity() method returns true if the element's child controls satisfy their validation constraints. When false is returned, cancelable invalid events are fired for each invalid child and validation problems are reported to the user.",
        "name": "HTMLFormElement.reportValidity",
        "params": [],
        "path": "dom/htmlformelement/reportvalidity",
        "syntax": "HTMLFormElement.reportValidity()",
        "type": "Elements"
    },
    "HTMLFormElement.reset": {
        "descr": "The HTMLFormElement.reset() method restores a form element's default values. This method does the same thing as clicking the form's reset button.",
        "name": "HTMLFormElement.reset",
        "params": [],
        "path": "dom/htmlformelement/reset",
        "syntax": "HTMLFormElement.reset()",
        "type": "Elements"
    },
    "HTMLFormElement.submit": {
        "descr": "The HTMLFormElement.submit() method submits the form. This method does something similar to activating a submit button of the form.",
        "name": "HTMLFormElement.submit",
        "params": [],
        "path": "dom/htmlformelement/submit",
        "syntax": "HTMLFormElement.submit()",
        "type": "Elements"
    },
    "HTMLHeadingElement": {
        "descr": "The HTMLHeadingElement interface represents the different heading elements. It inherits methods and properties from the HTMLElement interface.",
        "name": "HTMLHeadingElement",
        "params": [
            {
                "descr": "Is a DOMString representing an enumerated attribute indicating alignment of the heading with respect to the surrounding context. ",
                "name": "HTMLHeadingElement.align"
            }
        ],
        "path": "dom/htmlheadingelement",
        "syntax": "Recommendation The align property is now obsolete.   Document Object Model (DOM) Level 2 HTML SpecificationThe definition of 'HTMLHeadingElement' in that specification. Obsolete No change   Document Object Model (DOM) Level 1 SpecificationThe definition of 'HTMLHeadingElement' in that specification. Obsolete Initial definition    Browser compatibilityUpdate compatibility data on GitHub",
        "type": "Elements"
    },
    "HTMLHyperlinkElementUtils.hash": {
        "descr": "The HTMLHyperlinkElementUtils.hash property returns a DOMString containing a '#' followed by the fragment identifier of the URL.",
        "name": "HTMLHyperlinkElementUtils.hash",
        "params": [],
        "path": "dom/htmlhyperlinkelementutils/hash",
        "syntax": "string = object.hash;  Examples <a id=\"myAnchor\" href=\"/en-US/docs/HTMLHyperlinkElementUtils.href#Examples\">Examples</a> <script> var anchor = document.getElementById(\"myAnchor\");\n or  console.log(anchor.hash);\n or  // Returns '#Examples' </script>);",
        "type": "Elements"
    },
    "HTMLHyperlinkElementUtils.host": {
        "descr": "The HTMLHyperlinkElementUtils.host property is a USVString containing the host, that is the hostname, and then, if the port of the URL is nonempty, a ':', and the port of the URL.",
        "name": "HTMLHyperlinkElementUtils.host",
        "params": [],
        "path": "dom/htmlhyperlinkelementutils/host",
        "syntax": "string = object.host; object.host = string;  Examples var anchor = document.createElement(\"a\");\n or  anchor.href = \"https://developer.mozilla.org/en-US/HTMLHyperlinkElementUtils.host\" anchor.host == \"developer.mozilla.org\" anchor.href = \"https://developer.mozilla.org:443/en-US/HTMLHyperlinkElementUtils.host\" anchor.host == \"developer.mozilla.org\" // The port number is not included because 443 is the scheme's default port anchor.href = \"https://developer.mozilla.org:4097/en-US/HTMLHyperlinkElementUtils.host\" anchor.host == \"developer.mozilla.org:4097\");",
        "type": "Elements"
    },
    "HTMLHyperlinkElementUtils.hostname": {
        "descr": "The HTMLHyperlinkElementUtils.hostname property is a USVString containing the domain of the URL.",
        "name": "HTMLHyperlinkElementUtils.hostname",
        "params": [],
        "path": "dom/htmlhyperlinkelementutils/hostname",
        "syntax": "string = object.hostname; object.hostname = string;  Examples // Let's an <a id=\"myAnchor\" href=\"https://developer.mozilla.org/en-US/docs/HTMLHyperlinkElementUtils.hostname\"> element be in the document var anchor = document.getElementByID(\"myAnchor\");\n or  var result = anchor.hostname; // Returns:'developer.mozilla.org');",
        "type": "Elements"
    },
    "HTMLHyperlinkElementUtils.href": {
        "descr": "The HTMLHyperlinkElementUtils.href property is a USVString containing the whole URL.",
        "name": "HTMLHyperlinkElementUtils.href",
        "params": [],
        "path": "dom/htmlhyperlinkelementutils/href",
        "syntax": "string = object.href; object.href = string;  Examples // Lets imagine an <a id=\"myAnchor\" href=\"https://developer.mozilla.org/en-US/HTMLHyperlinkElementUtils/href\"> element is in the document var anchor = document.getElementById(\"myAnchor\");\n or  var result = anchor.href; // Returns: 'https://developer.mozilla.org/en-US/HTMLHyperlinkElementUtils/href');",
        "type": "Elements"
    },
    "HTMLHyperlinkElementUtils.password": {
        "descr": "The HTMLHyperlinkElementUtils.password property is a USVString containing the password specified before the domain name.",
        "name": "HTMLHyperlinkElementUtils.password",
        "params": [],
        "path": "dom/htmlhyperlinkelementutils/password",
        "syntax": "string = object.password; object.password = string;  Examples // Let's <a id=\"myAnchor\" href=\"https://anonymous:flabada@developer.mozilla.org/en-US/docs/HTMLHyperlinkElementUtils.username\"> be in the document var anchor = document.getElementByID(\"myAnchor\");\n or  var result = anchor.password; // Returns:'flabada');",
        "type": "Elements"
    },
    "HTMLHyperlinkElementUtils.pathname": {
        "descr": "The HTMLHyperlinkElementUtils.pathname property is a USVString containing an initial '/' followed by the path of the URL (or the empty string if there is no path).",
        "name": "HTMLHyperlinkElementUtils.pathname",
        "params": [],
        "path": "dom/htmlhyperlinkelementutils/pathname",
        "syntax": "string = object.pathname; object.pathname = string;  Examples // Let's an <a id=\"myAnchor\" href=\"https://developer.mozilla.org/en-US/docs/HTMLHyperlinkElementUtils.pathname\"> element be in the document var anchor = document.getElementById(\"myAnchor\");\n or  var result = anchor.pathname; // Returns:'/en-US/docs/HTMLHyperlinkElementUtils.pathname');",
        "type": "Elements"
    },
    "HTMLHyperlinkElementUtils.port": {
        "descr": "The HTMLHyperlinkElementUtils.port property is a USVString containing the port number of the URL. If the URL does not contain an explicit port number, it will be set to ''.",
        "name": "HTMLHyperlinkElementUtils.port",
        "params": [],
        "path": "dom/htmlhyperlinkelementutils/port",
        "syntax": "string = object.port; object.port = string;  Examples // Let's an <a id=\"myAnchor\" href=\"https://developer.mozilla.org:443/en-US/docs/HTMLHyperlinkElementUtils.port\"> element be in the document var anchor = document.getElementByID(\"myAnchor\");\n or  var result = anchor.port; // Returns:'443');",
        "type": "Elements"
    },
    "HTMLHyperlinkElementUtils.protocol": {
        "descr": "The HTMLHyperlinkElementUtils.protocol property is a USVString representing the protocol scheme of the URL, including the final ':'.",
        "name": "HTMLHyperlinkElementUtils.protocol",
        "params": [],
        "path": "dom/htmlhyperlinkelementutils/protocol",
        "syntax": "string = object.protocol; object.protocol = string;  Examples // Let's an <a id=\"myAnchor\" href=\"https://developer.mozilla.org/en-US/HTMLHyperlinkElementUtils.protocol\"> element be in the document var anchor = document.getElementByID(\"myAnchor\");\n or  var result = anchor.protocol; // Returns:'https:');",
        "type": "Elements"
    },
    "HTMLHyperlinkElementUtils.search": {
        "descr": "The HTMLHyperlinkElementUtils.search property is a search string, also called a query string, that is USVString containing a '?' followed by the parameters of the URL.",
        "name": "HTMLHyperlinkElementUtils.search",
        "params": [],
        "path": "dom/htmlhyperlinkelementutils/search",
        "syntax": "string = object.search; object.search = string;  Examples // Let an <a id=\"myAnchor\" href=\"https://developer.mozilla.org/en-US/docs/HTMLHyperlinkElementUtils.search?q=123\"> element be in the document var anchor = document.getElementById(\"myAnchor\");\n or  var queryString = anchor.search; // Returns:'?q=123' // Further parsing: let params = new URLSearchParams(queryString);\n or  let q = parseInt(params.get(\"q\"));\n or  // is the number 123);",
        "type": "Elements"
    },
    "HTMLHyperlinkElementUtils.toString": {
        "descr": "The HTMLHyperlinkElementUtils.toString() stringifier method returns a USVString containing the whole URL. It is a read-only version of HTMLHyperlinkElementUtils.href.",
        "name": "HTMLHyperlinkElementUtils.toString",
        "params": [],
        "path": "dom/htmlhyperlinkelementutils/tostring",
        "syntax": "string = object.toString();",
        "type": "Elements"
    },
    "HTMLHyperlinkElementUtils.username": {
        "descr": "The HTMLHyperlinkElementUtils.username property is a USVString containing the username specified before the domain name.",
        "name": "HTMLHyperlinkElementUtils.username",
        "params": [],
        "path": "dom/htmlhyperlinkelementutils/username",
        "syntax": "string = object.username; object.username = string;  Examples // Let's <a id=\"myAnchor\" href=\"https://anonymous:flabada@developer.mozilla.org/en-US/docs/HTMLHyperlinkElementUtils.username\"> be in the document var anchor = document.getElementByID(\"myAnchor\");\n or  var result = anchor.username; // Returns:'anonymous');",
        "type": "Elements"
    },
    "HTMLIFrameElement.allowPaymentRequest": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "HTMLIFrameElement.allowPaymentRequest",
        "params": [],
        "path": "dom/htmliframeelement/allowpaymentrequest",
        "syntax": "var allow = htmlIFrameElement.allowPaymentRequest Value A Boolean. Specifications    Specification Status Comment   Payment Request APIThe definition of 'allowPaymentRequest' in that specification. Candidate Recommendation Adds allowPaymentRequest property.   HTML Living StandardThe definition of 'HTMLIFrameElement: allowPaymentRequest' in that specification. Living Standard      Browser CompatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   60Disabled    60Disabled   Disabled From version 60: this feature is behind the #web-payments preference (needs to be set to Enabled). To change preferences in Chrome, visit chrome://flags.    15  56  ?   No  ?        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   No  61Disabled    61Disabled   Disabled From version 61: this feature is behind the #web-payments",
        "type": "Elements"
    },
    "HTMLIFrameElement.policy": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "HTMLIFrameElement.policy",
        "params": [],
        "path": "dom/htmliframeelement/policy",
        "syntax": "var policy = HTMLIFrameElement.policy Value The Policy interface. Specifications    Specification Status Comment   Unknown Unknown Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   69Disabled    69Disabled   Disabled From version 69: this feature is behind the #enable-experimental-productivity-features preference (needs to be set to Enabled). To change preferences in Chrome, visit chrome://flags.    No  No  No  56Disabled    56Disabled   Disabled From version 56: this feature is behind the #enable-experimental-productivity-features",
        "type": "Elements"
    },
    "HTMLIFrameElement.referrerPolicy": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "HTMLIFrameElement.referrerPolicy",
        "params": [],
        "path": "dom/htmliframeelement/referrerpolicy",
        "syntax": "refStr = iframeElt.referrerPolicy; iframeElt.referrerPolicy = refStr; Values     \"no-referrer\" meaning that the Referer: HTTP header will not be sent.  \"origin\" meaning that the referrer will be the origin of the page, that is roughly the scheme, the host and the port.  \"unsafe-url\" meaning that the referrer will include the origin and the path (but not the fragment, password, or username). This case is unsafe as it can leak path information that has been concealed to third-party by using TLS.    Examples",
        "type": "Elements"
    },
    "HTMLImageElement.Image": {
        "descr": "It is functionally equivalent to document.createElement('img').",
        "name": "HTMLImageElement.Image",
        "params": [
            {
                "descr": "The width of the image (i.e., the value for the width attribute).",
                "name": "width"
            },
            {
                "descr": "The height of the image (i.e., the value for the height attribute).",
                "name": "height"
            }
        ],
        "path": "dom/htmlimageelement/image",
        "syntax": "Image(width, height)",
        "type": "Elements"
    },
    "HTMLImageElement.decoding": {
        "descr": "The decoding property of the HTMLImageElement interface represents a hint given to the browser on how it should decode the image.",
        "name": "HTMLImageElement.decoding",
        "params": [],
        "path": "dom/htmlimageelement/decoding",
        "syntax": "refStr = imgElem.decoding; imgElem.decoding = refStr; Values A DOMString representing the decoding hint. Possible values are:     sync: Decode the image synchronously for atomic presentation with other content.  async: Decode the image asynchronously to reduce delay in presenting other content.  auto: Default mode, which indicates no preference for the decoding mode. The browser decides what is best for the user.    Examples var img = new Image();\n or  img.decoding = 'sync'; img.src = 'img/logo.png';);",
        "type": "Elements"
    },
    "HTMLImageElement.referrerPolicy": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "HTMLImageElement.referrerPolicy",
        "params": [],
        "path": "dom/htmlimageelement/referrerpolicy",
        "syntax": "refStr = imgElt.referrerPolicy; imgElt.referrerPolicy = refStr; Values A DOMString representing the referrer policy. Possible values are:     \"no-referrer\" meaning that the Referer: HTTP header will not be sent.  \"origin\" meaning that the referrer will be the origin of the page, that is roughly the scheme, the host and the port.  \"unsafe-url\" meaning that the referrer will include the origin and the path (but not the fragment, password, or username). This case is unsafe as it can leak path information that has been concealed to third-party by using TLS.    Examples",
        "type": "Elements"
    },
    "HTMLInputElement.labels": {
        "descr": "The HTMLInputElement.labels read-only property returns a NodeList of the <label> elements associated with the <input> element.",
        "name": "HTMLInputElement.labels",
        "params": [],
        "path": "dom/htmlinputelement/labels",
        "syntax": "var labelElements = input.labels;  Return value A NodeList containing the <label> elements associated with the <input> element. Example HTML <label id=\"label1\" for=\"test\">Label 1</label> <input id=\"test\"/> <label id=\"label2\" for=\"test\">Label 2</label>  JavaScript window.addEventListener(\"DOMContentLoaded\", function() { const input = document.getElementById(\"test\");\n or  for(var i = 0; i < input.labels.length; i++) { console.log(input.labels[i].textContent);\n or  // \"Label 1\" and \"Label 2\" } });",
        "type": "Elements"
    },
    "HTMLInputElement.select": {
        "descr": "The HTMLInputElement.select() method selects all the text in a <textarea> element or an <input> element with a text field.",
        "name": "HTMLInputElement.select",
        "params": [],
        "path": "dom/htmlinputelement/select",
        "syntax": "element.select()",
        "type": "Elements"
    },
    "HTMLInputElement.setSelectionRange": {
        "descr": "The HTMLInputElement.setSelectionRange() method sets the start and end positions of the current text selection in an <input> element.",
        "name": "HTMLInputElement.setSelectionRange",
        "params": [
            {
                "descr": "The 0-based index of the first selected character.",
                "name": "selectionStart"
            },
            {
                "descr": "The 0-based index of the character after the last selected character.",
                "name": "selectionEnd"
            },
            {
                "descr": "A string indicating the direction in which the selection is performed. ",
                "name": "selectionDirection Optional"
            }
        ],
        "path": "dom/htmlinputelement/setselectionrange",
        "syntax": "inputElement.setSelectionRange(selectionStart, selectionEnd[, selectionDirection]);",
        "type": "Elements"
    },
    "HTMLLabelElement.form": {
        "descr": "The read-only HTMLLabelElement.form property returns an HTMLFormElement object which represents the form of which the label's associated control is a part, or null if there is either no associated control, or if that control isn't in a form.",
        "name": "HTMLLabelElement.form",
        "params": [],
        "path": "dom/htmllabelelement/form",
        "syntax": "form = HTMLLabelElement.form  Value An HTMLFormElement which represents the form with which the label's control is associated. If control is null (meaning the label isn't associated with a control), or if the control isn't part of a form, this property returns null",
        "type": "Elements"
    },
    "HTMLLinkElement.referrerPolicy": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "HTMLLinkElement.referrerPolicy",
        "params": [],
        "path": "dom/htmllinkelement/referrerpolicy",
        "syntax": "DOMString HTMLLinkElement.referrerPolicy Example var links = document.getElementsByTagName(\"link\");\n or  links[0].referrerPolicy; // \"no-referrer\");",
        "type": "Elements"
    },
    "HTMLLinkElement.rel": {
        "descr": "The HTMLLinkElement.rel property reflects the rel attribute. It is a DOMString containing a space-separated list of link types indicating the relationship between the resource represented by the <link> element and the current document.",
        "name": "HTMLLinkElement.rel",
        "params": [],
        "path": "dom/htmllinkelement/rel",
        "syntax": "var relstr = linkElt.rel; linkElt.rel = relstr;  Example var links = document.getElementsByTagName(\"link\");\n or  var length = links.length; for (var i = 0; i < length; i++) { alert(links[i]);\n or  });",
        "type": "Elements"
    },
    "HTMLLinkElement.relList": {
        "descr": "The HTMLLinkElement.relList read-only property reflects the rel attribute. It is a live DOMTokenList containing the set of link types indicating the relationship between the resource represented by the <link> element and the current document.",
        "name": "HTMLLinkElement.relList",
        "params": [],
        "path": "dom/htmllinkelement/rellist",
        "syntax": "var relstr = linkElt.relList;  Example var links = document.getElementsByTagName(\"link\");\n or  var length = links.length; for (var i = 0; i < length; i++) { var list = links[i].relList; var listLength = list.length; console.log(\"New link found.\");\n or  for (var j = 0; j < listLength; j++) { console.log(list[j]);\n or  } });",
        "type": "Elements"
    },
    "HTMLMediaElement.audioTracks": {
        "descr": "Draft This page is not complete.",
        "name": "HTMLMediaElement.audioTracks",
        "params": [],
        "path": "dom/htmlmediaelement/audiotracks",
        "syntax": "var audioTracks = mediaElement.audioTracks; Value A AudioTrackList object representing the list of audio tracks included in the media element. The list of tracks can be accessed using array notation, or using the object's getTrackById()",
        "type": "Elements"
    },
    "HTMLMediaElement.autoplay": {
        "descr": "The HTMLMediaElement.autoplay property reflects the autoplay HTML attribute, indicating whether playback should automatically begin as soon as enough media is available to do so without interruption.",
        "name": "HTMLMediaElement.autoplay",
        "params": [],
        "path": "dom/htmlmediaelement/autoplay",
        "syntax": "HTMLMediaElement.autoplay = true | false; var autoplay = HTMLMediaElement.autoplay; Value A Boolean whose value is true if the media element will begin playback as soon as enough content has loaded to allow it to do so without interruption.  Note: Some browsers offer users the ability to override autoplay in order to prevent disruptive audio or video from playing without permission or in the background. Do not rely on autoplay actually starting playback.  Examples ... <video id=\"video\" controls> <source src=\"https://player.vimeo.com/external/250688977.sd.mp4?s=d14b1f1a971dde13c79d6e436b88a6a928dfe26b&profile_id=165\"> </video> *** Disable autoplay (recommended) *** false is the default value document.querySelector('#video').autoplay = false;",
        "type": "Elements"
    },
    "HTMLMediaElement.buffered": {
        "descr": "The HTMLMediaElement.buffered read-only property returns a new TimeRanges object that indicates the ranges of the media source that the browser has buffered (if any) at the moment the buffered property is accessed.",
        "name": "HTMLMediaElement.buffered",
        "params": [],
        "path": "dom/htmlmediaelement/buffered",
        "syntax": "var timeRange = audioObject.buffered Value A TimeRanges object. This object is normalized, which means that ranges are ordered, don't overlap, aren't empty, and don't touch (adjacent ranges are folded into one bigger range).",
        "type": "Elements"
    },
    "HTMLMediaElement.canPlayType": {
        "descr": "The HTMLMediaElement.canPlayType() method determines whether the specified media type can be played back.",
        "name": "HTMLMediaElement.canPlayType",
        "params": [
            {
                "descr": "A DOMString containing the MIME type of the media.",
                "name": "mediaType"
            }
        ],
        "path": "dom/htmlmediaelement/canplaytype",
        "syntax": "str = audioOrVideo.canPlayType(mediaType);",
        "type": "Elements"
    },
    "HTMLMediaElement.captureStream": {
        "descr": "The captureStream() property of the HTMLMediaElement interface returns a MediaStream object which is streaming a real-time capture of the content being rendered in the media element.",
        "name": "HTMLMediaElement.captureStream",
        "params": [],
        "path": "dom/htmlmediaelement/capturestream",
        "syntax": "var mediaStream = mediaElement.captureStream()",
        "type": "Elements"
    },
    "HTMLMediaElement.controls": {
        "descr": "The HTMLMediaElement.controls property reflects the controls HTML attribute, which controls whether user interface controls for playing the media item will be displayed.",
        "name": "HTMLMediaElement.controls",
        "params": [],
        "path": "dom/htmlmediaelement/controls",
        "syntax": "var ctrls = video.controls; audio.controls = true; Value A Boolean. A value of true means controls will be displayed. Example var obj = document.createElement('video');\n or  obj.controls = true;);",
        "type": "Elements"
    },
    "HTMLMediaElement.currentSrc": {
        "descr": "The HTMLMediaElement.currentSrc property contains the absolute URL of the chosen media resource. This could happen, for example, if the web server selects a media file based on the resolution of the user's display. The value is an empty string if the networkState property is EMPTY.",
        "name": "HTMLMediaElement.currentSrc",
        "params": [],
        "path": "dom/htmlmediaelement/currentsrc",
        "syntax": "var mediaUrl = audioObject.currentSrc; Value A DOMString object containing the absolute URL of the chosen media source; this may be an empty string if networkState is EMPTY; otherwise, it will be one of the resources listed by the HTMLSourceElement contained within the media element, or the value or src if no <source> element is provided. Example var obj = document.createElement('video');\n or  console.log(obj.currentSrc);\n or  // \"\");",
        "type": "Elements"
    },
    "HTMLMediaElement.currentTime": {
        "descr": "The HTMLMediaElement.currentTime property gives the current playback time in seconds. Setting this value seeks the media to the new time.",
        "name": "HTMLMediaElement.currentTime",
        "params": [],
        "path": "dom/htmlmediaelement/currenttime",
        "syntax": "var cTime = video.currentTime; video.currentTime = 35;  Value A double. Example var video = document.createElement('video');\n or  console.log(video.currentTime);",
        "type": "Elements"
    },
    "HTMLMediaElement.defaultMuted": {
        "descr": "The HTMLMediaElement.defaultMuted property reflects the muted HTML attribute, which indicates whether the media element's audio output should be muted by default. This property has no dynamic effect. To mute and unmute the audio output, use the muted property.",
        "name": "HTMLMediaElement.defaultMuted",
        "params": [],
        "path": "dom/htmlmediaelement/defaultmuted",
        "syntax": "var dMuted = video.defaultMuted; audio.defaultMuted = true;  Value A Boolean. A value of true means that the audio output will be muted by default. Example var videoEle = document.createElement('video');\n or  videoEle.defaultMuted = true; console.log(videoEle.outerHTML);\n or  // <video muted=\"\"></video>);",
        "type": "Elements"
    },
    "HTMLMediaElement.defaultPlaybackRate": {
        "descr": "The HTMLMediaElement.defaultPlaybackRate property indicates the default playback rate for the media.",
        "name": "HTMLMediaElement.defaultPlaybackRate",
        "params": [],
        "path": "dom/htmlmediaelement/defaultplaybackrate",
        "syntax": "var dSpeed = video.defaultPlaybackRate; audio.defaultPlaybackRate = 1.0;  Value A double. 1.0 is \"normal speed,\" values lower than 1.0 make the media play slower than normal, higher values make it play faster. The value 0.0 is invalid and throws a NOT_SUPPORTED_ERR exception. Example var obj = document.createElement('video');\n or  console.log(obj.defaultPlaybackRate);\n or  // 1);",
        "type": "Elements"
    },
    "HTMLMediaElement.disableRemotePlayback": {
        "descr": "The HTMLMediaElement.disableRemotePlayback property determines whether the media element is allowed to have a remote playback UI.",
        "name": "HTMLMediaElement.disableRemotePlayback",
        "params": [],
        "path": "dom/htmlmediaelement/disableremoteplayback",
        "syntax": "var remotePlaybackState ​= element.disableRemotePlayback();",
        "type": "Elements"
    },
    "HTMLMediaElement.duration": {
        "descr": "The HTMLMediaElement.duration property gives the length of the media in seconds, or zero if no media data is available.",
        "name": "HTMLMediaElement.duration",
        "params": [],
        "path": "dom/htmlmediaelement/duration",
        "syntax": "var myDuration = audioOrVideo.duration Value A double. If the media data is available but the length is unknown, this value is NaN. If the media is streamed and has no predefined length, the value is Inf. Example var obj = document.createElement('video');\n or  console.log(obj.duration);\n or  // NaN);",
        "type": "Elements"
    },
    "HTMLMediaElement.ended": {
        "descr": "The HTMLMediaElement.ended indicates whether the media element has ended playback.",
        "name": "HTMLMediaElement.ended",
        "params": [],
        "path": "dom/htmlmediaelement/ended",
        "syntax": "var isEnded = HTMLMediaElement.ended Value A Boolean which is true if the media contained in the element has finished playing. If the source of the media is a MediaStream, this value is true if the value of the stream's active property is false. Example var obj = document.createElement('video');\n or  console.log(obj.ended);\n or  // false);",
        "type": "Elements"
    },
    "HTMLMediaElement.error": {
        "descr": "The HTMLMediaElement.error is the MediaError object for the most recent error, or null if there has not been an error. When an error event is received by the element, you can determine details about what happened by examining this object.",
        "name": "HTMLMediaElement.error",
        "params": [],
        "path": "dom/htmlmediaelement/error",
        "syntax": "var myError = HTMLMediaElement.error; Value A MediaError object describing the most recent error to occur on the media element or null if no errors have occurred. Example This example establishes a video element and adds an error handler to it; the error handler simply logs the details to console. var videoElement = document.createElement('video');\n or  videoElement.onerror = function() { console.log(\"Error \" + videoElement.error.code + \"; details: \" + videoElement.error.message);\n or  } videoElement.src = \"https://example.com/bogusvideo.mp4\";);",
        "type": "Elements"
    },
    "HTMLMediaElement.fastSeek": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "HTMLMediaElement.fastSeek",
        "params": [
            {
                "descr": "A double.",
                "name": "time"
            }
        ],
        "path": "dom/htmlmediaelement/fastseek",
        "syntax": "HTMLMediaElement.fastSeek(time);",
        "type": "Elements"
    },
    "HTMLMediaElement.load": {
        "descr": "The HTMLMediaElement method load() resets the media element to its initial state and begins the process of selecting a media source and loading the media in preparation for playback to begin at the beginning. The amount of media data that is prefetched is determined by the value of the element's preload attribute.",
        "name": "HTMLMediaElement.load",
        "params": [],
        "path": "dom/htmlmediaelement/load",
        "syntax": "mediaElement.load();",
        "type": "Elements"
    },
    "HTMLMediaElement.loop": {
        "descr": "The HTMLMediaElement.loop property reflects the loop HTML attribute, which controls whether the media element should start over when it reaches the end.",
        "name": "HTMLMediaElement.loop",
        "params": [],
        "path": "dom/htmlmediaelement/loop",
        "syntax": "var loop = video.loop; audio.loop = true;  Value A Boolean. Example var obj = document.createElement('video');\n or  obj.loop = true; // true);",
        "type": "Elements"
    },
    "HTMLMediaElement.muted": {
        "descr": "The HTMLMediaElement.muted indicates whether the media element muted.",
        "name": "HTMLMediaElement.muted",
        "params": [],
        "path": "dom/htmlmediaelement/muted",
        "syntax": "var isMuted = audioOrVideo.muted audio.muted = true; Value A Boolean. true means muted and false means not muted. Example var obj = document.createElement('video');\n or  console.log(obj.muted);\n or  // false);",
        "type": "Elements"
    },
    "HTMLMediaElement.networkState": {
        "descr": "The HTMLMediaElement.networkState property indicates the current state of the fetching of media over the network.",
        "name": "HTMLMediaElement.networkState",
        "params": [],
        "path": "dom/htmlmediaelement/networkstate",
        "syntax": "var networkState = audioOrVideo.networkState; Value An unsigned short. Possible values are:    Constant Value Description     NETWORK_EMPTY 0 There is no data yet. Also, readyState is HAVE_NOTHING.   NETWORK_IDLE 1 HTMLMediaElement is active and has selected a resource, but is not using the network.   NETWORK_LOADING 2 The browser is downloading HTMLMediaElement data.   NETWORK_NO_SOURCE 3 No HTMLMediaElement src found.    Examples This example will listen for the audio element to begin playing and then check if it is still loading data. <audio id=\"example\" preload=\"auto\"> <source src=\"sound.ogg\" type=\"audio/ogg\" /> </audio>  var obj = document.getElementById('example');\n or  obj.addEventListener('playing', function() { if (obj.networkState === 2) { // Still loading... } });",
        "type": "Elements"
    },
    "HTMLMediaElement.onencrypted": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "HTMLMediaElement.onencrypted",
        "params": [],
        "path": "dom/htmlmediaelement/onencrypted",
        "syntax": "HTMLMediaElement.onencrypted = function(encrypted) { ... }",
        "type": "Elements"
    },
    "HTMLMediaElement.onwaitingforkey": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "HTMLMediaElement.onwaitingforkey",
        "params": [],
        "path": "dom/htmlmediaelement/onwaitingforkey",
        "syntax": "HTMLMediaElement.onwaitingforkey = function(waitingforkey) { ... }",
        "type": "Elements"
    },
    "HTMLMediaElement.pause": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "HTMLMediaElement.pause",
        "params": [],
        "path": "dom/htmlmediaelement/pause",
        "syntax": "HTMLMediaElement.pause()",
        "type": "Elements"
    },
    "HTMLMediaElement.paused": {
        "descr": "The read-only HTMLMediaElement.paused property tells whether the media element is paused.",
        "name": "HTMLMediaElement.paused",
        "params": [],
        "path": "dom/htmlmediaelement/paused",
        "syntax": "var isPaused = audioOrVideo.paused Value A Boolean. true is paused and false is not paused. Example var obj = document.createElement('video');\n or  console.log(obj.paused);\n or  // true);",
        "type": "Elements"
    },
    "HTMLMediaElement.play": {
        "descr": "The HTMLMediaElement method play() attempts to begin playback of the media. It returns a Promise which is resolved when playback has been successfully started. Failure to begin playback for any reason, such as permission issues, result in the promise being rejected.",
        "name": "HTMLMediaElement.play",
        "params": [
            {
                "descr": "The user agent (browser) or operating system doesn't allow playback of media in the current context or situation. ",
                "name": "NotAllowedError"
            },
            {
                "descr": "The media source (which may be specified as a MediaStream, MediaSource, Blob, or File, for example) doesn't represent a supported media format.",
                "name": "NotSupportedError"
            }
        ],
        "path": "dom/htmlmediaelement/play",
        "syntax": "var promise = HTMLMediaElement.play();",
        "type": "Elements"
    },
    "HTMLMediaElement.playbackRate": {
        "descr": "The HTMLMediaElement.playbackRate property sets the rate at which the media is being played back. This is used to implement user controls for fast forward, slow motion, and so forth. The normal playback rate is multiplied by this value to obtain the current rate, so a value of 1.0 indicates normal speed.",
        "name": "HTMLMediaElement.playbackRate",
        "params": [],
        "path": "dom/htmlmediaelement/playbackrate",
        "syntax": "// video var dSpeed = video.playbackRate; // audio audio.playbackRate = 1.0;  Value A double. 1.0 is \"normal speed,\" values lower than 1.0 make the media play slower than normal, higher values make it play faster. Example var obj = document.createElement('video');\n or  console.log(obj.playbackRate);\n or  // 1);",
        "type": "Elements"
    },
    "HTMLMediaElement.readyState": {
        "descr": "The HTMLMediaElement.readyState property indicates the readiness state of the media.",
        "name": "HTMLMediaElement.readyState",
        "params": [],
        "path": "dom/htmlmediaelement/readystate",
        "syntax": "var readyState = audioOrVideo.readyState; Value An unsigned short. Possible values are:    Constant Value Description     HAVE_NOTHING 0 No information is available about the media resource.   HAVE_METADATA 1 Enough of the media resource has been retrieved that the metadata attributes are initialized. Seeking will no longer raise an exception.   HAVE_CURRENT_DATA 2 Data is available for the current playback position, but not enough to actually play more than one frame.   HAVE_FUTURE_DATA 3 Data for the current playback position as well as for at least a little bit of time into the future is available (in other words, at least two frames of video, for example).   HAVE_ENOUGH_DATA 4 Enough data is available—and the download rate is high enough—that the media can be played through to the end without interruption.    Examples",
        "type": "Elements"
    },
    "HTMLMediaElement.setMediaKeys": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "HTMLMediaElement.setMediaKeys",
        "params": [
            {
                "descr": "A reference to a MediaKeys object that the HTMLMediaElement can use for decryption of media data during playback.",
                "name": "mediaKeys"
            }
        ],
        "path": "dom/htmlmediaelement/setmediakeys",
        "syntax": "var Promise = HTMLMediaElement.setMediaKeys(mediaKeys);",
        "type": "Elements"
    },
    "HTMLMediaElement.setSinkId": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "HTMLMediaElement.setSinkId",
        "params": [
            {
                "descr": "The MediaDeviceInfo.deviceId of the audio output device.",
                "name": "sinkId"
            }
        ],
        "path": "dom/htmlmediaelement/setsinkid",
        "syntax": "HTMLMediaElement.setSinkId(sinkId).then(function() { ... })",
        "type": "Elements"
    },
    "HTMLMediaElement.src": {
        "descr": "The HTMLMediaElement.src property reflects the value of the HTML media element's src attribute, which indicates the URL of a media resource to use in the element.",
        "name": "HTMLMediaElement.src",
        "params": [],
        "path": "dom/htmlmediaelement/src",
        "syntax": "var mediaUrl = HTMLMediaElement.src; Value A USVString object containing the URL of a media resource to use in the element; this property reflects the value of the HTML element's src attribute. Example var obj = document.createElement('video');\n or  console.log(obj.src);\n or  // \"\");",
        "type": "Elements"
    },
    "HTMLMediaElement.srcObject": {
        "descr": "The srcObject property of the HTMLMediaElement interface sets or returns the object which serves as the source of the media associated with the HTMLMediaElement. The object can be a MediaStream, a MediaSource, a Blob, or a File (which inherits from Blob).",
        "name": "HTMLMediaElement.srcObject",
        "params": [],
        "path": "dom/htmlmediaelement/srcobject",
        "syntax": "var sourceObject = HTMLMediaElement.srcObject; HTMLMediaElement.srcObject = sourceObject;  Value A MediaStream, MediaSource, Blob, or File object (though see the compatibility table for what is actually supported).",
        "type": "Elements"
    },
    "HTMLMediaElement.videoTracks": {
        "descr": "Draft This page is not complete.",
        "name": "HTMLMediaElement.videoTracks",
        "params": [],
        "path": "dom/htmlmediaelement/videotracks",
        "syntax": "var videoTracks = mediaElement.videoTracks; Value A VideoTrackList object representing the list of video tracks included in the media element. The list of tracks can be accessed using array notation, or using the object's getTrackById()",
        "type": "Elements"
    },
    "HTMLMediaElement.volume": {
        "descr": "The HTMLMediaElement.volume property sets the volume at which the media will be played.",
        "name": "HTMLMediaElement.volume",
        "params": [],
        "path": "dom/htmlmediaelement/volume",
        "syntax": "var volume ​= video.volume; //1 Value A double values must fall between 0 and 1, where 0 is effectively muted and 1 is the loudest possible value. Example var obj = document.createElement('audio');\n or  console.log(obj.volume);\n or  // 1 obj.volume = 0.75;);",
        "type": "Elements"
    },
    "HTMLMeterElement.labels": {
        "descr": "The HTMLMeterElement.labels read-only property returns a NodeList of the <label> elements associated with the <meter> element.",
        "name": "HTMLMeterElement.labels",
        "params": [],
        "path": "dom/htmlmeterelement/labels",
        "syntax": "var labelElements = meter.labels;  Return value A NodeList containing the <label> elements associated with the <meter> element. Example HTML <label id=\"label1\" for=\"test\">Label 1</label> <meter id=\"test\" min=\"0\" max=\"100\" value=\"70\">70</meter> <label id=\"label2\" for=\"test\">Label 2</label>  JavaScript window.addEventListener(\"DOMContentLoaded\", function() { const meter = document.getElementById(\"test\");\n or  for(var i = 0; i < meter.labels.length; i++) { console.log(meter.labels[i].textContent);\n or  // \"Label 1\" and \"Label 2\" } });",
        "type": "Elements"
    },
    "HTMLObjectElement.typeMustMatch": {
        "descr": "The HTMLObjectElement.typeMustMatch property is a Boolean that reflects the typemustmatch attribute of the <object> element and indicates if the resouce linked by it must match the MIME type given by HTMLObjectElement.type in order for this resource to be used.",
        "name": "HTMLObjectElement.typeMustMatch",
        "params": [],
        "path": "dom/htmlobjectelement/typemustmatch",
        "syntax": "var mustMatch = obj.typeMustMatch; obj.typeMustMatch = mustMatch;  Example <object id=\"obj\" data=\"move.swf\" type=\"application/x-shockwave-flash\" typemustmatch></object> var obj = document.getElementById(\"obj\");\n or  console.log(obj.typeMustMatch);",
        "type": "Elements"
    },
    "HTMLOptionElement.Option": {
        "descr": "Constructor for creating an HTMLOptionElement.",
        "name": "HTMLOptionElement.Option",
        "params": [
            {
                "descr": "A DOMString representing the content of the element, i.e. ",
                "name": "text Optional"
            },
            {
                "descr": "A DOMString representing the value of the HTMLOptionElement, i.e. ",
                "name": "value Optional"
            },
            {
                "descr": "A Boolean that sets the selected attribute value, i.e. ",
                "name": "defaultSelected Optional"
            },
            {
                "descr": "A Boolean that sets the option's selected state; the default is false (not selected). ",
                "name": "selected Optional"
            }
        ],
        "path": "dom/htmloptionelement/option",
        "syntax": "var optionElementReference = new Option(text, value, defaultSelected, selected);",
        "type": "Elements"
    },
    "HTMLOutputElement.labels": {
        "descr": "The HTMLOutputElement.labels read-only property returns a NodeList of the <label> elements associated with the <output> element.",
        "name": "HTMLOutputElement.labels",
        "params": [],
        "path": "dom/htmloutputelement/labels",
        "syntax": "var labelElements = output.labels;  Return value A NodeList containing the <label> elements associated with the <output> element. Example HTML <label id=\"label1\" for=\"test\">Label 1</label> <output id=\"test\">Output</output> <label id=\"label2\" for=\"test\">Label 2</label>  JavaScript window.addEventListener(\"DOMContentLoaded\", function() { const output = document.getElementById(\"test\");\n or  for(var i = 0; i < output.labels.length; i++) { console.log(output.labels[i].textContent);\n or  // \"Label 1\" and \"Label 2\" } });",
        "type": "Elements"
    },
    "HTMLProgressElement.labels": {
        "descr": "The HTMLProgressElement.labels read-only property returns a NodeList of the <label> elements associated with the <progress> element.",
        "name": "HTMLProgressElement.labels",
        "params": [],
        "path": "dom/htmlprogresselement/labels",
        "syntax": "var labelElements = progress.labels;  Return value A NodeList containing the <label> elements associated with the <progress> element. Example HTML <label id=\"label1\" for=\"test\">Label 1</label> <progress id=\"test\" value=\"70\" max=\"100\">70%</progress> <label id=\"label2\" for=\"test\">Label 2</label>  JavaScript window.addEventListener(\"DOMContentLoaded\", function() { const progress = document.getElementById(\"test\");\n or  for(var i = 0; i < progress.labels.length; i++) { console.log(progress.labels[i].textContent);\n or  // \"Label 1\" and \"Label 2\" } });",
        "type": "Elements"
    },
    "HTMLScriptElement": {
        "descr": "HTML <script> elements expose the HTMLScriptElement interface, which provides special properties and methods for manipulating the behavior and execution of <script> elements (beyond the inherited HTMLElement interface).",
        "name": "HTMLScriptElement",
        "params": [],
        "path": "dom/htmlscriptelement",
        "syntax": "document.write()",
        "type": "Elements"
    },
    "HTMLSelectElement.add": {
        "descr": "The HTMLSelectElement.add() method adds an element to the collection of option elements for this select element.",
        "name": "HTMLSelectElement.add",
        "params": [],
        "path": "dom/htmlselectelement/add",
        "syntax": "collection.add(item[, before]);",
        "type": "Elements"
    },
    "HTMLSelectElement.autofocus": {
        "descr": "The HTMLSelectElement.autofocus property is a Boolean that reflects the autofocus HTML attribute, which indicates whether the associated <select> element will get input focus when the page loads, unless the user overrides it.",
        "name": "HTMLSelectElement.autofocus",
        "params": [],
        "path": "dom/htmlselectelement/autofocus",
        "syntax": "aBool = aSelectElement.autofocus; // Get the value of autofocus aSelectElement.autofocus = aBool; // Set the value of autofocus  Example HTML <select id=\"mySelect\" autofocus> <option>Option 1</option> <option>Option 2</option> </select>  JavaScript // Check if the autofocus attribute on the <select> var hasAutofocus = document.getElementById('mySelect').autofocus;",
        "type": "Elements"
    },
    "HTMLSelectElement.checkValidity": {
        "descr": "The HTMLSelectElement.checkValidity() method checks whether the element has any constraints and whether it satisfies them. If the element fails its constraints, the browser fires a cancelable invalid event at the element, and then returns false.",
        "name": "HTMLSelectElement.checkValidity",
        "params": [],
        "path": "dom/htmlselectelement/checkvalidity",
        "syntax": "var result = selectElt.checkValidity();",
        "type": "Elements"
    },
    "HTMLSelectElement.disabled": {
        "descr": "The HTMLSelectElement.disabled Is a Boolean that reflects the disabled HTML attribute, which indicates whether the control is disabled. If it is disabled, it does not accept clicks. A disabled element is unusable and un-clickable.",
        "name": "HTMLSelectElement.disabled",
        "params": [],
        "path": "dom/htmlselectelement/disabled",
        "syntax": "aSelectElement.disabled = aBool;  Example HTML <label> Allow drinks? <input id=\"allow-drinks\" type=\"checkbox\"/> </label> <label for=\"drink-select\">Drink selection:</label> <select id=\"drink-select\" disabled> <option value=\"1\">Water</option> <option value=\"2\">Beer</option> <option value=\"3\">Pepsi</option> <option value=\"4\">Whisky</option> </select>  JavaScript var allowDrinksCheckbox = document.getElementById(\"allow-drinks\");\n or  var drinkSelect = document.getElementById(\"drink-select\");\n or  allowDrinksCheckbox.addEventListener(\"change\", function(event) { if (event.target.checked) { drinkSelect.disabled = false; } else { drinkSelect.disabled = true; } }, false);",
        "type": "Elements"
    },
    "HTMLSelectElement.form": {
        "descr": "The HTMLSelectElement.form read-only property returns a HTMLFormElement representing the form that this element is associated with. If the element is not associated with of a <form> element, then it returns null.",
        "name": "HTMLSelectElement.form",
        "params": [],
        "path": "dom/htmlselectelement/form",
        "syntax": "aForm = aSelectElement.form.selectname;  Example HTML <form action=\"http://www.google.com/search\" method=\"get\"> <label>Google: <input type=\"search\" name=\"q\"></label> <input type=\"submit\" value=\"Search...\"> </form> Javascript A property available on all form elements, \"type\" returns the type of the calling form element. For SELECT, the two possible values are \"select-one\" or \"select-multiple\", depending on the type of selection list. The below code gives all SELECT elements in a particular form a CSS class of \"selectclass\": <script type=\"text/javascript\"> var form_element = document.getElementById('subscribe_form');\n or  var vist = form_element.style; if (vist.display=='' || vist.display=='none') { vist.display = 'block'; } else { vist.display = 'none'; } </script>);",
        "type": "Elements"
    },
    "HTMLSelectElement.item": {
        "descr": "The HTMLSelectElement.item() method returns the Element corresponding to the HTMLOptionElement whose position in the options list corresponds to the index given in parameter, or null if there are none.",
        "name": "HTMLSelectElement.item",
        "params": [],
        "path": "dom/htmlselectelement/item",
        "syntax": "unsigned long, like selectElt[idx] is equivalent to selectElt.namedItem(idx)",
        "type": "Elements"
    },
    "HTMLSelectElement.labels": {
        "descr": "The HTMLSelectElement.labels read-only property returns a NodeList of the <label> elements associated with the <select> element.",
        "name": "HTMLSelectElement.labels",
        "params": [],
        "path": "dom/htmlselectelement/labels",
        "syntax": "var labelElements = select.labels;  Return value A NodeList containing the <label> elements associated with the <select> element. Example HTML <label id=\"label1\" for=\"test\">Label 1</label> <select id=\"test\"> <option value=\"1\">Option 1</option> <option value=\"2\">Option 2</option> </select> <label id=\"label2\" for=\"test\">Label 2</label>  JavaScript window.addEventListener(\"DOMContentLoaded\", function() { const select = document.getElementById(\"test\");\n or  for(var i = 0; i < select.labels.length; i++) { console.log(select.labels[i].textContent);\n or  // \"Label 1\" and \"Label 2\" } });",
        "type": "Elements"
    },
    "HTMLSelectElement.namedItem": {
        "descr": "The HTMLSelectElement.namedItem() method returns the HTMLOptionElement corresponding to the HTMLOptionElement whose name or id match the specified name, or null if no option matches.",
        "name": "HTMLSelectElement.namedItem",
        "params": [],
        "path": "dom/htmlselectelement/nameditem",
        "syntax": "String, like selectElt[\"value\"] is equivalent to selectElt.namedItem(\"value\")",
        "type": "Elements"
    },
    "HTMLSelectElement.remove": {
        "descr": "The HTMLSelectElement.remove() method removes the element at the specified index from the options collection for this select element.",
        "name": "HTMLSelectElement.remove",
        "params": [],
        "path": "dom/htmlselectelement/remove",
        "syntax": "collection.remove(index);",
        "type": "Elements"
    },
    "HTMLSelectElement.selectedIndex": {
        "descr": "The HTMLSelectElement.selectedIndex is a long that reflects the index of the first selected <option> element. The value -1 indicates that no element is selected.",
        "name": "HTMLSelectElement.selectedIndex",
        "params": [],
        "path": "dom/htmlselectelement/selectedindex",
        "syntax": "var index = selectElem.selectedIndex; selectElem.selectedIndex = index;  Example HTML <p id=\"p\">selectedIndex: 0</p> <select id=\"select\"> <option selected>Option A</option> <option>Option B</option> <option>Option C</option> <option>Option D</option> <option>Option E</option> </select>  JavaScript var selectElem = document.getElementById('select') var pElem = document.getElementById('p') // When a new <option> is selected selectElem.addEventListener('change', function() { var index = selectElem.selectedIndex; // Add that data to the <p> pElem.innerHTML = 'selectedIndex: ' + index; })",
        "type": "Elements"
    },
    "HTMLSelectElement.selectedOptions": {
        "descr": "The read-only HTMLSelectElement property selectedOptions contains a list of the <option> elements contained within the <select> element that are currently selected. The list of selected options is an HTMLCollection object with one entry per currently selected option.",
        "name": "HTMLSelectElement.selectedOptions",
        "params": [],
        "path": "dom/htmlselectelement/selectedoptions",
        "syntax": "var selectedCollection = HTMLSelectElement.selectedOptions; Value An HTMLCollection which lists every currently selected HTMLOptionElement which is either a child of the HTMLSelectElement or of an HTMLOptGroupElement within the <select> element. In other words, any option contained within the <select> element may be part of the results, but option groups are not included in the list. If no options are currently selected, the collection is empty and returns a length of 0. Example In this example, a <select> element with a number of options is used to let the user order various food items. HTML The HTML that creates the selection box and the <option> elements representing each of the food choices looks like this: <label for=\"foods\">What do you want to eat?</label><br> <select id=\"foods\" name=\"foods\" size=\"7\" multiple> <option value=\"1\">Burrito</option> <option value=\"2\">Cheeseburger</option> <option value=\"3\">Double Bacon Burger Supreme</option> <option value=\"4\">Pepperoni Pizza</option> <option value=\"5\">Taco</option> </select> <br> <button name=\"order\" id=\"order\"> Order Now </button> <p id=\"output\"> </p> The <select> element is set to allow multiple items to be selected, and it is 7 rows tall. Note also the <button>, whose role it is to trigger fetching the HTMLCollection of selected elements using the selected property. JavaScript The JavaScript code that establishes the event handler for the button, as well as the event handler itself, looks like this: let orderButton = document.getElementById(\"order\");\n or  let itemList = document.getElementById(\"foods\");\n or  let outputBox = document.getElementById(\"output\");\n or  orderButton.addEventListener(\"click\", function() { let collection = itemList.selectedOptions; let output = \"\"; for (let i=0; i<collection.length; i++) { if (output === \"\") { output = \"Your order for the following items has been placed: \"; } output += collection[i].label; if (i === (collection.length - 2) && (collection.length < 3)) { output += \" and \"; } else if (i < (collection.length - 2)) { output += \", \"; } else if (i === (collection.length - 2)) { output += \", and \"; } } if (output === \"\") { output = \"You didn't order anything!\"; } outputBox.innerHTML = output; }, false);",
        "type": "Elements"
    },
    "HTMLSelectElement.setCustomValidity": {
        "descr": "The HTMLSelectElement.setCustomValidity() method sets the custom validity message for the selection element to the specified message. Use the empty string to indicate that the element does not have a custom validity error.",
        "name": "HTMLSelectElement.setCustomValidity",
        "params": [],
        "path": "dom/htmlselectelement/setcustomvalidity",
        "syntax": "selectElt.setCustomValidity(string);",
        "type": "Elements"
    },
    "HTMLSelectElement.type": {
        "descr": "The HTMLSelectElement.type read-only property returns the form control's type. The possible values are:",
        "name": "HTMLSelectElement.type",
        "params": [],
        "path": "dom/htmlselectelement/type",
        "syntax": "var str = selectElt.type; Example switch (select.type) { case 'select-multiple': // Multiple values may be selected. break; case 'select-one': // Only one value may be selected. break; default: // non-standard value (or this isn't a SELECT element) }",
        "type": "Elements"
    },
    "HTMLSlotElement.assignedNodes": {
        "descr": "The assignedNodes() property of the HTMLSlotElement interface returns the sequence of elements assigned to this slot or, alternatively, the slot's fallback content.",
        "name": "HTMLSlotElement.assignedNodes",
        "params": [
            {
                "descr": "An object that sets options for the nodes to be returned. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/htmlslotelement/assignednodes",
        "syntax": "var assignedNodes[] = HTMLSlotElement.assignedNodes([options])",
        "type": "Elements"
    },
    "HTMLSlotElement.name": {
        "descr": "The name property of the HTMLSlotElement interface returns or sets the slot name. A slot is a placeholder inside a web component that users can fill with their own markup.",
        "name": "HTMLSlotElement.name",
        "params": [],
        "path": "dom/htmlslotelement/name",
        "syntax": "var name = htmlSlotElement.name htmlSlotElement.name = name  Value A DOMString. Examples The following snippet is taken from our slotchange example (see it live also).",
        "type": "Elements"
    },
    "HTMLStyleElement.media": {
        "descr": "The HTMLStyleElement.media property specifies the intended destination medium for style information.",
        "name": "HTMLStyleElement.media",
        "params": [],
        "path": "dom/htmlstyleelement/media",
        "syntax": "medium = style.media style.media = medium  Parameters   medium is a string describing a single medium or a comma-separated list.  Example <!doctype html> <html> <head> <link id=\"LinkedStyle\" rel=\"stylesheet\" href=\"document.css\" type=\"text/css\" media=\"screen\" /> <style id=\"InlineStyle\" rel=\"stylesheet\" type=\"text/css\" media=\"screen, print\"> p { color: blue; } </style> </head> <body> <script> alert('LinkedStyle: ' + document.getElementById('LinkedStyle').media);\n or  // 'screen' alert('InlineStyle: ' + document.getElementById('InlineStyle').media);\n or  // 'screen, print' </script> </body> </html>);",
        "type": "Elements"
    },
    "HTMLStyleElement.type": {
        "descr": "The HTMLStyleElement.type read-only property returns the type of the current style.",
        "name": "HTMLStyleElement.type",
        "params": [],
        "path": "dom/htmlstyleelement/type",
        "syntax": "string = style.type;  Example if (newStyle.type != \"text/css\"){ // not supported! warnCSS();\n or  });",
        "type": "Elements"
    },
    "HTMLTableElement": {
        "descr": "The HTMLTableElement interface provides special properties and methods (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating the layout and presentation of tables in an HTML document.",
        "name": "HTMLTableElement",
        "params": [
            {
                "descr": "Is a HTMLTableCaptionElement representing the first <caption> that is a child of the element, or null if none is found. ",
                "name": "HTMLTableElement.caption"
            },
            {
                "descr": "Is a HTMLTableSectionElement representing the first <thead> that is a child of the element, or null if none is found. ",
                "name": "HTMLTableElement.tHead"
            },
            {
                "descr": "Is a HTMLTableSectionElement representing the first <tfoot> that is a child of the element, or null if none is found. ",
                "name": "HTMLTableElement.tFoot"
            },
            {
                "descr": "Returns a live HTMLCollection containing all the rows of the element, that is all <tr> that are a child of the element, or a child or one of its <thead>, <tbody> and <tfoot> children. ",
                "name": "HTMLTableElement.rows Read only"
            },
            {
                "descr": "Returns a live HTMLCollection containing all the <tbody> of the element. ",
                "name": "HTMLTableElement.tBodies Read only"
            },
            {
                "descr": "Is a Boolean value indicating if the user agent is allowed to provide sorting mechanism for the table, if it supports such a feature. ",
                "name": "HTMLTableElement.sortable"
            },
            {
                "descr": "Is a DOMString containing an enumerated value reflecting the align attribute. ",
                "name": "HTMLTableElement.align"
            },
            {
                "descr": "Is a DOMString containing the background color of the cells. ",
                "name": "HTMLTableElement.bgColor"
            },
            {
                "descr": "Is a DOMString containing the width in pixels of the border of the table. ",
                "name": "HTMLTableElement.border"
            },
            {
                "descr": "Is a DOMString containing the width in pixels of the horizontal and vertical sapce between cell content and cell borders. ",
                "name": "HTMLTableElement.cellPadding"
            },
            {
                "descr": "Is a DOMString containing the width in pixels of the horizontal and vertical separation between cells. ",
                "name": "HTMLTableElement.cellSpacing"
            },
            {
                "descr": "Is a DOMString containing the type of the external borders of the table. ",
                "name": "HTMLTableElement.frame"
            },
            {
                "descr": "Is a DOMString containing the type of the internal borders of the table. ",
                "name": "HTMLTableElement.rules"
            },
            {
                "descr": "Is a DOMString containing a description of the purpose or the structure of the table. ",
                "name": "HTMLTableElement.summary"
            },
            {
                "descr": "Is a DOMString containing the length in pixels or in percentage of the desired width fo the entire table. ",
                "name": "HTMLTableElement.width"
            },
            {
                "descr": "Returns an HTMLElement representing the first <thead> that is a child of the element. ",
                "name": "HTMLTableElement.createTHead()"
            },
            {
                "descr": "Removes the first <thead> that is a child of the element.",
                "name": "HTMLTableElement.deleteTHead()"
            },
            {
                "descr": "Returns an HTMLElement representing the first <tfoot> that is a child of the element. ",
                "name": "HTMLTableElement.createTFoot()"
            },
            {
                "descr": "Removes the first <tfoot> that is a child of the element.",
                "name": "HTMLTableElement.deleteTFoot()"
            },
            {
                "descr": "Returns an HTMLElement representing the first <caption> that is a child of the element. ",
                "name": "HTMLTableElement.createCaption()"
            },
            {
                "descr": "Removes the first <caption> that is a child of the element.",
                "name": "HTMLTableElement.deleteCaption()"
            },
            {
                "descr": "Returns an HTMLTableRowElement representing a new row of the table. ",
                "name": "HTMLTableElement.insertRow()"
            },
            {
                "descr": "Removes the row corresponding to the index given in parameter. ",
                "name": "HTMLTableElement.deleteRow()"
            },
            {
                "descr": "Removes the sortable attribute to all <th> elements of the table.",
                "name": "HTMLTableElement.stopSorting()"
            }
        ],
        "path": "dom/htmltableelement",
        "syntax": "HTMLTableSectionElement representing the first <thead> that is a child of the element, or null if none is found. When set, if the object doesn't represent a <thead>, a DOMException with the HierarchyRequestError name is thrown. If a correct object is given, it is inserted in the tree immediately before the first element that is neither a <caption>, nor a <colgroup>, or as the last child if there is no such element, and the first <thead> that is a child of this element is removed from the tree, if any. HTMLTableElement.tFoot Is a HTMLTableSectionElement representing the first <tfoot> that is a child of the element, or null if none is found. When set, if the object doesn't represent a <tfoot>, a DOMException with the HierarchyRequestError name is thrown. If a correct object is given, it is inserted in the tree immediately before the first element that is neither a <caption>, a <colgroup>, nor a <thead>, or as the last child if there is no such element, and the first <tfoot> that is a child of this element is removed from the tree, if any.  HTMLTableElement.rows Read only   Returns a live HTMLCollection containing all the rows of the element, that is all <tr> that are a child of the element, or a child or one of its <thead>, <tbody> and <tfoot> children. The rows members of a <thead> appear first, in tree order, and those members of a <tbody> last, also in tree order. The HTMLCollection is live and is automatically updated when the HTMLTableElement changes.  HTMLTableElement.tBodies Read only   Returns a live HTMLCollection containing all the <tbody> of the element. The HTMLCollection is live and is automatically updated when the HTMLTableElement changes.  HTMLTableElement.sortable  Is a Boolean value indicating if the user agent is allowed to provide sorting mechanism for the table, if it supports such a feature. This property reflects the sortable attribute.  HTMLTableElement.align  Is a DOMString containing an enumerated value reflecting the align attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are \"left\", \"right\", and \"center\".  HTMLTableElement.bgColor  Is a DOMString containing the background color of the cells. It reflects the obsolete bgcolor attribute.  HTMLTableElement.border  Is a DOMString containing the width in pixels of the border of the table. It reflects the obsolete border attribute.  HTMLTableElement.cellPadding  Is a DOMString containing the width in pixels of the horizontal and vertical sapce between cell content and cell borders. It reflects the obsolete cellpadding attribute.  HTMLTableElement.cellSpacing  Is a DOMString containing the width in pixels of the horizontal and vertical separation between cells. It reflects the obsolete cellspacing attribute.  HTMLTableElement.frame  Is a DOMString containing the type of the external borders of the table. It reflects the obsolete frame attribute and can take one of the following values: \"void\", \"above\", \"below\", \"hsides\", \"vsides\", \"lhs\", \"rhs\", \"box\", or \"border\".  HTMLTableElement.rules  Is a DOMString containing the type of the internal borders of the table. It reflects the obsolete rules attribute and can take one of the following values: \"none\", \"groups\", \"rows\", \"cols\", or \"all\".  HTMLTableElement.summary  Is a DOMString containing a description of the purpose or the structure of the table. It reflects the obsolete summary attribute.  HTMLTableElement.width  Is a DOMString containing the length in pixels or in percentage of the desired width fo the entire table. It reflects the obsolete width attribute.  Methods Inherits methods from its parent, HTMLElement.  HTMLTableElement.createTHead()",
        "type": "Elements"
    },
    "HTMLTableElement.align": {
        "descr": "Deprecated since HTML4This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "HTMLTableElement.align",
        "params": [
            {
                "descr": "DOMString with one of the following values:  left center right",
                "name": "alignment"
            }
        ],
        "path": "dom/htmltableelement/align",
        "syntax": "HTMLTableElement.align = alignment; var alignment = HTMLTableElement.align; Parameters  alignment  DOMString with one of the following values:  left center right    Example // Set the alignmnet of a table var t = document.getElementById('TableA');\n or  t.align = 'center';);",
        "type": "Elements"
    },
    "HTMLTableElement.bgColor": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "HTMLTableElement.bgColor",
        "params": [],
        "path": "dom/htmltableelement/bgcolor",
        "syntax": "color = table.bgColor table.bgColor =color Parameters   color is a string representing a color value.  Example // Set table background colour to lightblue var t = document.getElementById('TableA');\n or  t.bgColor = 'lightblue';);",
        "type": "Elements"
    },
    "HTMLTableElement.caption": {
        "descr": "The HTMLTableElement.caption property represents the table caption. If no caption element is associated with the table, it can be null.",
        "name": "HTMLTableElement.caption",
        "params": [],
        "path": "dom/htmltableelement/caption",
        "syntax": "string = table.caption Example if (table.caption) { // do something with the caption }",
        "type": "Elements"
    },
    "HTMLTableElement.cellPadding": {
        "descr": "The HTMLTableElement.cellPadding property represents the padding around the individual cells of the table.",
        "name": "HTMLTableElement.cellPadding",
        "params": [],
        "path": "dom/htmltableelement/cellpadding",
        "syntax": "HTMLTableElement.cellPadding = padding; var padding = HTMLTableElement.cellPadding;   padding is either a number of pixels (e.g. \"10\") or a percentage value (e.g. \"10%\").  Example",
        "type": "Elements"
    },
    "HTMLTableElement.cellSpacing": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "HTMLTableElement.cellSpacing",
        "params": [],
        "path": "dom/htmltableelement/cellspacing",
        "syntax": "HTMLTableElement.cellSpacing = spacing; var spacing = HTMLTableElement.cellSpacing; Value A DOMString which is either a number of pixels (such as \"10\") or a percentage value (like \"10%\"",
        "type": "Elements"
    },
    "HTMLTableElement.createCaption": {
        "descr": "The HTMLTableElement.createCaption() method returns the caption for the table. If no caption element exists on the table, this method creates it, then returns it.",
        "name": "HTMLTableElement.createCaption",
        "params": [],
        "path": "dom/htmltableelement/createcaption",
        "syntax": "HTMLTableElement = table.createCaption()",
        "type": "Elements"
    },
    "HTMLTableElement.createTFoot": {
        "descr": "The HTMLTableElement.createTFoot() method returns the <tfoot> element associated with the table, of type HTMLTableSectionElement. If there is no footer for this table, this methods creates it, then returns it.",
        "name": "HTMLTableElement.createTFoot",
        "params": [],
        "path": "dom/htmltableelement/createtfoot",
        "syntax": "HTMLTableSectionElement. If there is no footer for this table, this methods creates it, then returns it. Syntax HTMLTableElement = table.createTFoot()",
        "type": "Elements"
    },
    "HTMLTableElement.createTHead": {
        "descr": "The HTMLTableElement.createTHead()method returns the <thead> element association with the table, of type HTMLTableSectionElement. If there is no such element associated to the table, this method creates it, then returns it.",
        "name": "HTMLTableElement.createTHead",
        "params": [],
        "path": "dom/htmltableelement/createthead",
        "syntax": "HTMLTableSectionElement. If there is no such element associated to the table, this method creates it, then returns it. Syntax HTMLElementObject = table.createTHead()",
        "type": "Elements"
    },
    "HTMLTableElement.deleteCaption": {
        "descr": "The HTMLTableElement.deleteCaption() method removes the caption from the table. If there is no caption associated with the table, this method does nothing.",
        "name": "HTMLTableElement.deleteCaption",
        "params": [],
        "path": "dom/htmltableelement/deletecaption",
        "syntax": "HTMLTableElement.deleteCaption()",
        "type": "Elements"
    },
    "HTMLTableElement.deleteRow": {
        "descr": "The HTMLTableElement.deleteRow() method removes a row from the table. If the number of rows to delete, specified by the parameter, is greater or equal to the number of available rows, or if it is negative and not equal to the special index -1, representing the last row of the table, the exception INDEX_SIZE_ERR is thrown.",
        "name": "HTMLTableElement.deleteRow",
        "params": [
            {
                "descr": "index is an integer representing the row that should be deleted. ",
                "name": "index"
            }
        ],
        "path": "dom/htmltableelement/deleterow",
        "syntax": "HTMLTableElement.deleteRow(index)",
        "type": "Elements"
    },
    "HTMLTableElement.deleteTFoot": {
        "descr": "The HTMLTableElement.deleteTFoot() method removes a <tfoot> element from the table.",
        "name": "HTMLTableElement.deleteTFoot",
        "params": [],
        "path": "dom/htmltableelement/deletetfoot",
        "syntax": "HTMLTableElement.deleteTFoot()",
        "type": "Elements"
    },
    "HTMLTableElement.deleteTHead": {
        "descr": "The HTMLTableElement.deleteTHead() removes a <thead> element from the table.",
        "name": "HTMLTableElement.deleteTHead",
        "params": [],
        "path": "dom/htmltableelement/deletethead",
        "syntax": "HTMLTableElement.deleteTHead()",
        "type": "Elements"
    },
    "HTMLTableElement.frame": {
        "descr": "The HTMLTableElement interface's frame property is a string that indicates which of the table's exterior borders should be drawn.",
        "name": "HTMLTableElement.frame",
        "params": [
            {
                "descr": "no sides. this is the default.",
                "name": "void"
            },
            {
                "descr": "top side",
                "name": "\"above\""
            },
            {
                "descr": "bottom side",
                "name": "\"below\""
            },
            {
                "descr": "top and bottom only",
                "name": "\"hsides\""
            },
            {
                "descr": "right and left sides only",
                "name": "\"vsides\""
            },
            {
                "descr": "left-hand side only",
                "name": "\"lhs\""
            },
            {
                "descr": "right-hand side only",
                "name": "\"rhs\""
            },
            {
                "descr": "all four sides",
                "name": "\"box\""
            },
            {
                "descr": "all four sides",
                "name": "\"border\""
            }
        ],
        "path": "dom/htmltableelement/frame",
        "syntax": "HTMLTableElement.frame = frameSides; var frameSides = HTMLTableElement.frame; Parameters   fromSides is a string whose value is one of the following values:  void no sides. this is the default. \"above\" top side \"below\" bottom side \"hsides\" top and bottom only \"vsides\" right and left sides only \"lhs\" left-hand side only \"rhs\" right-hand side only \"box\" all four sides \"border\" all four sides    Example // Set the frame of TableA to 'border' var t = document.getElementById('TableA');\n or  t.frame = \"border\"; t.border = \"2px\";);",
        "type": "Elements"
    },
    "HTMLTableElement.insertRow": {
        "descr": "The HTMLTableElement.insertRow() method inserts a new row in the table and returns a reference to the new row.",
        "name": "HTMLTableElement.insertRow",
        "params": [],
        "path": "dom/htmltableelement/insertrow",
        "syntax": "var row = HTMLTableElement.insertRow(optional index = -1);",
        "type": "Elements"
    },
    "HTMLTableElement.rows": {
        "descr": "The read-only HTMLTableElement property rows returns a live HTMLCollection of all the rows in the table, including the rows contained within any <thead>, <tfoot>, and <tbody> elements.",
        "name": "HTMLTableElement.rows",
        "params": [],
        "path": "dom/htmltableelement/rows",
        "syntax": "HTMLCollectionObject = table.rows; Value An HTMLCollection providing a live-updating list of the HTMLTableRowElement objects representing all of the <tr> elements contained in the table. This provides quick access to all of the table rows, without having to manually search for them. Example myrows = mytable.rows; firstRow = mytable.rows[0]; lastRow = mytable.rows.item(mytable.rows.length-1);",
        "type": "Elements"
    },
    "HTMLTableElement.rules": {
        "descr": "The HTMLTableElement.rules property represents which cell borders to render in the table.",
        "name": "HTMLTableElement.rules",
        "params": [
            {
                "descr": "no rules",
                "name": "none"
            },
            {
                "descr": "lines between groups only",
                "name": "groups"
            },
            {
                "descr": "lines between rows",
                "name": "rows"
            },
            {
                "descr": "lines between cols",
                "name": "cols"
            },
            {
                "descr": "lines between all cells",
                "name": "all"
            }
        ],
        "path": "dom/htmltableelement/rules",
        "syntax": "HTMLTableElement.rules =rules; varrules =HTMLTableElement.rules; Parameters   rules is a string with one of the following values:  none no rules groups lines between groups only rows lines between rows cols lines between cols all lines between all cells    Example // Turn on all the internal borders of a table var t = document.getElementById(\"TableID\");\n or  t.rules = \"all\";);",
        "type": "Elements"
    },
    "HTMLTableElement.tBodies": {
        "descr": "The HTMLTableElement.tBodies read-only property returns a live HTMLCollection of the table bodies.",
        "name": "HTMLTableElement.tBodies",
        "params": [],
        "path": "dom/htmltableelement/tbodies",
        "syntax": "HTMLCollectionObject = table.tBodies Example length(mytable.tBodies);",
        "type": "Elements"
    },
    "HTMLTableElement.tFoot": {
        "descr": "The HTMLTableElement.tFoot property represents the table's <tfoot> element. Its value can be null if there is no such element.",
        "name": "HTMLTableElement.tFoot",
        "params": [],
        "path": "dom/htmltableelement/tfoot",
        "syntax": "HTMLTableSectionElementObject = table.tFoot teble.tFoot = HTMLTableSectionElementObject  Example if (table.tFoot == my_foot) { // ... }",
        "type": "Elements"
    },
    "HTMLTableElement.tHead": {
        "descr": "The HTMLTableElement.tHead represents the table's <thead> element. Its value can be null if there is no such element.",
        "name": "HTMLTableElement.tHead",
        "params": [],
        "path": "dom/htmltableelement/thead",
        "syntax": "thead_element = table.tHead; table.tHead = thead_element;  Parameters   th_el is a HTMLTableSectionElement.  Example if (table.tHead == my_head_el) { // ... }",
        "type": "Elements"
    },
    "HTMLTableRowElement": {
        "descr": "The HTMLTableRowElement interface provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of rows in an HTML table.",
        "name": "HTMLTableRowElement",
        "params": [
            {
                "descr": "Is a DOMString containing an enumerated value reflecting the align attribute. ",
                "name": "HTMLTableRowElement.align"
            },
            {
                "descr": "Is a DOMString containing the background color of the cells. ",
                "name": "HTMLTableRowElement.bgColor"
            },
            {
                "descr": "Returns a live HTMLCollection containing the cells in the row. ",
                "name": "HTMLTableRowElement.cells Read only"
            },
            {
                "descr": "Is a DOMString containing one single character. ",
                "name": "HTMLTableRowElement.ch"
            },
            {
                "descr": "Is a DOMString containing a integer indicating how many characters must be left at the right (for left-to-right scripts; or at the left for right-to-left scripts) of the character defined by HTMLTableRowElement.ch. This property was optional and was not very well supported.",
                "name": "HTMLTableRowElement.chOff"
            },
            {
                "descr": "Returns a long value which gives the logical position of the row within the entire table. ",
                "name": "HTMLTableRowElement.rowIndex Read only"
            },
            {
                "descr": "Returns a long value which gives the logical position of the row within the table section it belongs to. ",
                "name": "HTMLTableRowElement.sectionRowIndex Read only"
            },
            {
                "descr": "Is a DOMString representing an enumerated value indicating how the content of the cell must be vertically aligned. ",
                "name": "HTMLTableRowElement.vAlign"
            },
            {
                "descr": "Removes the cell at the given position in the row. ",
                "name": "HTMLTableRowElement.deleteCell()"
            },
            {
                "descr": "Inserts a new cell just before the given position in the row. ",
                "name": "HTMLTableRowElement.insertCell()"
            }
        ],
        "path": "dom/htmltablerowelement",
        "syntax": "HTMLTableRowElement.sectionRowIndex Read only   Returns a long value which gives the logical position of the row within the table section it belongs to. If the row is not part of a section, returns -1.  HTMLTableRowElement.vAlign  Is a DOMString representing an enumerated value indicating how the content of the cell must be vertically aligned. It reflects the valign attribute and can have one of the following values: \"top\", \"middle\", \"bottom\", or \"baseline\".  Methods Inherits methods from its parent, HTMLElement.  HTMLTableRowElement.deleteCell()",
        "type": "Elements"
    },
    "HTMLTableRowElement.insertCell": {
        "descr": "The HTMLTableRowElement.insertCell() method inserts a new cell into a table row and returns a reference to the cell.",
        "name": "HTMLTableRowElement.insertCell",
        "params": [],
        "path": "dom/htmltablerowelement/insertcell",
        "syntax": "var cell = HTMLTableRowElement.insertCell(index = -1);",
        "type": "Elements"
    },
    "HTMLTableSectionElement": {
        "descr": "The HTMLTableSectionElement interface provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of sections, that is headers, footers and bodies, in an HTML table.",
        "name": "HTMLTableSectionElement",
        "params": [
            {
                "descr": "Is a DOMString containing an enumerated value reflecting the align attribute. ",
                "name": "HTMLTableSectionElement.align"
            },
            {
                "descr": "Returns a live HTMLCollection containing the rows in the section. ",
                "name": "HTMLTableSectionElement.rows Read only"
            },
            {
                "descr": "Is a DOMString containing one single chararcter. ",
                "name": "HTMLTableSectionElement.ch"
            },
            {
                "descr": "Is a DOMString containing a integer indicating how many characters must be left at the right (for left-to-right scripts; or at the left for right-to-left scripts) of the character defined by HTMLTableRowElement.ch. This property was optional and was not very well supported.",
                "name": "HTMLTableSectionElement.chOff"
            },
            {
                "descr": "Is a DOMString representing an enumerated value indicating how the content of the cell must be vertically aligned. ",
                "name": "HTMLTableSectionElement.vAlign"
            },
            {
                "descr": "Removes the cell at the given position in the section. ",
                "name": "HTMLTableSectionElement.deleteRow()"
            },
            {
                "descr": "Inserts a new row just before the given position in the section. ",
                "name": "HTMLTableSectionElement.insertRow()"
            }
        ],
        "path": "dom/htmltablesectionelement",
        "syntax": "HTMLElement.   HTMLTableSectionElement.align  Is a DOMString containing an enumerated value reflecting the align attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are \"left\", \"right\", and \"center\".  HTMLTableSectionElement.rows Read only   Returns a live HTMLCollection containing the rows in the section. The HTMLCollection is live and is automatically updated when rows are added or removed.  HTMLTableSectionElement.ch  Is a DOMString containing one single chararcter. This character is the one to align all the cell of a column on. It reflects the char and default to the decimal points associated with the language, e.g. '.' for English, or ',' for French. This property was optional and was not very well supported.  HTMLTableSectionElement.chOff  Is a DOMString containing a integer indicating how many characters must be left at the right (for left-to-right scripts; or at the left for right-to-left scripts) of the character defined by HTMLTableRowElement.ch",
        "type": "Elements"
    },
    "HTMLTextAreaElement.labels": {
        "descr": "The HTMLTextAreaElement.labels read-only property returns a NodeList of the <label> elements associated with the <textarea> element.",
        "name": "HTMLTextAreaElement.labels",
        "params": [],
        "path": "dom/htmltextareaelement/labels",
        "syntax": "var labelElements = textArea.labels;  Return value A NodeList containing the <label> elements associated with the <textArea> element. Example HTML <label id=\"label1\" for=\"test\">Label 1</label> <textArea id=\"test\">Some text</textArea> <label id=\"label2\" for=\"test\">Label 2</label>  JavaScript window.addEventListener(\"DOMContentLoaded\", function() { const textArea = document.getElementById(\"test\");\n or  for(var i = 0; i < textArea.labels.length; i++) { console.log(textArea.labels[i].textContent);\n or  // \"Label 1\" and \"Label 2\" } });",
        "type": "Elements"
    },
    "HTMLTimeElement.dateTime": {
        "descr": "The HTMLTimeElement.dateTime property is a DOMString that reflects the datetime HTML attribute, containing a machine-readable form of the element's date and time value.",
        "name": "HTMLTimeElement.dateTime",
        "params": [],
        "path": "dom/htmltimeelement/datetime",
        "syntax": "-MM   2011-11, 2013-05    Valid date string  YYYY-MM-DD  1887-12-01   Valid yearless date string  MM-DD  11-12   Valid time string  HH:MM HH:MM:SS HH:MM:SS.mmm   23:59 12:15:47 12:15:52.998    Valid local date and time string  YYYY-MM-DD HH:MM YYYY-MM-DD HH:MM:SS YYYY-MM-DD HH:MM:SS.mmm YYYY-MM-DDTHH:MM YYYY-MM-DDTHH:MM:SS YYYY-MM-DDTHH:MM:SS.mmm  2013-12-25 11:12 1972-07-25 13:43:07 1941-03-15 07:06:23.678 2013-12-25T11:12 1972-07-25T13:43:07 1941-03-15T07:06:23.678   Valid time-zone offset string  Z +HHMM +HH:MM -HHMM -HH:MM  Z +0200 +04:30 -0300 -08:00   Valid global date and time string Any combination of a valid local date and time string followed by a valid time-zone offset string 2013-12-25 11:12+0200 1972-07-25 13:43:07+04:30 1941-03-15 07:06:23.678Z 2013-12-25T11:12-08:00   Valid week string  YYYY-WWW  2013-W46   Four or more ASCII digits YYYY  2013, 0001    Valid duration string  PdDThHmMsS PdDThHmMs.XS PdDThHmMs.XXS PdDThHmMs.XXXS PThHmMsS PThHmMs.XS PThHmMs.XXS PThHmMs.XXXS ww dd hh mm ss  P12DT7H12M13S P12DT7H12M13.3S P12DT7H12M13.45S P12DT7H12M13.455S PT7H12M13S PT7H12M13.2S PT7H12M13.56S PT7H12M13.999S 7d 5h 24m 13s    Syntax dateTimeString = timeElt.dateTime; timeElt.dateTime = dateTimeString  Examples // Assumes there is <time id=\"t\"> element in the HTML var t = document.getElementById(\"t\");\n or  t.dateTime = \"6w 5h 34m 5s\";);",
        "type": "Elements"
    },
    "HTMLTrackElement.src": {
        "descr": "The HTMLTrackElement.src property reflects the value of the <track> element's src attribute, which indicates the URL of the text track's data.",
        "name": "HTMLTrackElement.src",
        "params": [],
        "path": "dom/htmltrackelement/src",
        "syntax": "var textTrackURL = HTMLTrackElement.src; Value A DOMString object containing the URL of the text track data. Example // coming soon  Specifications    Specification Status Comment   HTML Living StandardThe definition of 'HTMLTrackElement.src' in that specification. Living Standard No change from HTML5    HTML5The definition of 'HTMLTrackElement.src' in that specification. Recommendation Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  23  Yes  31   31   Setting the src property did not work properly in versions prior to 50. 24 — 30Disabled   Disabled From version 24 until version 30 (exclusive): this feature is behind the media.webvtt.enabled",
        "type": "Elements"
    },
    "HTMLVideoElement.getVideoPlaybackQuality": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "HTMLVideoElement.getVideoPlaybackQuality",
        "params": [],
        "path": "dom/htmlvideoelement/getvideoplaybackquality",
        "syntax": "videoPQ = videoElement.getVideoPlaybackQuality();",
        "type": "Elements"
    },
    "Has attribute selector [name]": {
        "descr": "Bind a single click to divs with an id that adds the id to the div's text.",
        "name": "Has attribute selector [name]",
        "params": [],
        "path": "jquery/has-attribute-selector",
        "syntax": "attributeHas selector  Description: Selects elements that have the specified attribute, with any value.    version added: 1.0jQuery( \"[attribute]\" ) attribute: An attribute name.",
        "type": "Selectors"
    },
    "HashChangeEvent": {
        "descr": "The HashChangeEvent event is fired when the fragment identifier of the URL has changed (the part of the URL that follows the # symbol, including the # symbol).",
        "name": "HashChangeEvent",
        "params": [
            {
                "descr": "The new URL to which the window is navigating.",
                "name": "HashChangeEvent.newURL Read only"
            },
            {
                "descr": "The previous URL from which the window was navigated.",
                "name": "HashChangeEvent.oldURL Read only"
            },
            {
                "descr": "A reference to a function.",
                "name": "funcRef"
            }
        ],
        "path": "dom/hashchangeevent",
        "syntax": "window.onhashchange = funcRef;  or <body onhashchange=\"funcRef();\n or \">);",
        "type": "Events"
    },
    "HashChangeEvent.newURL": {
        "descr": "The newURL read-only property returns the new URL to which the window is navigating.",
        "name": "HashChangeEvent.newURL",
        "params": [],
        "path": "dom/hashchangeevent/newurl",
        "syntax": "window.addEventListener(\"hashchange\", function(event) { console.log(\"Hash changed to \" + event.newURL);\n or  });",
        "type": "Events"
    },
    "HashChangeEvent.oldURL": {
        "descr": "The oldURL read-only property returns the previous URL from which the window was navigated.",
        "name": "HashChangeEvent.oldURL",
        "params": [],
        "path": "dom/hashchangeevent/oldurl",
        "syntax": "window.addEventListener(\"hashchange\", function(event) { console.log(\"Hash changed from \" + event.oldURL);\n or  });",
        "type": "Events"
    },
    "Headers.append": {
        "descr": "The append() method of the Headers interface appends a new value onto an existing header inside a Headers object, or adds the header if it does not already exist.",
        "name": "Headers.append",
        "params": [
            {
                "descr": "The name of the HTTP header you want to add to the Headers object.",
                "name": "name"
            },
            {
                "descr": "The value of the HTTP header you want to add.",
                "name": "value"
            }
        ],
        "path": "dom/headers/append",
        "syntax": "myHeaders.append(name,value);",
        "type": "Fetch"
    },
    "Headers.constructor": {
        "descr": "The Headers() constructor creates a new Headers object.",
        "name": "Headers.constructor",
        "params": [
            {
                "descr": "An object containing any HTTP headers that you want to pre-populate your Headers object with. ",
                "name": "init Optional"
            }
        ],
        "path": "dom/headers/headers",
        "syntax": "var myHeaders = new Headers(init);",
        "type": "Fetch"
    },
    "Headers.delete": {
        "descr": "The delete() method of the Headers interface deletes a header from the current Headers object.",
        "name": "Headers.delete",
        "params": [
            {
                "descr": "The name of the HTTP header you want to delete from the Headers object.",
                "name": "name"
            }
        ],
        "path": "dom/headers/delete",
        "syntax": "myHeaders.delete(name);",
        "type": "Fetch"
    },
    "Headers.entries": {
        "descr": "The Headers.entries() method returns an iterator allowing to go through all key/value pairs contained in this object. The both the key and value of each pairs are ByteString objects.",
        "name": "Headers.entries",
        "params": [],
        "path": "dom/headers/entries",
        "syntax": "headers.entries();",
        "type": "Miscellaneous"
    },
    "Headers.get": {
        "descr": "The get() method of the Headers interface returns a byte string of all the values of a header within a Headers object with a given name. If the requested header doesn't exist in the Headers object, it returns null.",
        "name": "Headers.get",
        "params": [
            {
                "descr": "The name of the HTTP header whose values you want to retrieve from the Headers object. ",
                "name": "name"
            }
        ],
        "path": "dom/headers/get",
        "syntax": "myHeaders.get(name);",
        "type": "Fetch"
    },
    "Headers.getAll": {
        "descr": "Obsolete since Gecko 52 (Firefox 52 / Thunderbird 52 / SeaMonkey 2.49)This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "Headers.getAll",
        "params": [
            {
                "descr": "The name of the HTTP header whose values you want to retrieve from the Headers object. ",
                "name": "name"
            }
        ],
        "path": "dom/headers/getall",
        "syntax": "myHeaders.getAll(name);",
        "type": "Miscellaneous"
    },
    "Headers.has": {
        "descr": "The has()method of the Headers interface returns a boolean stating whether a Headers object contains a certain header.",
        "name": "Headers.has",
        "params": [
            {
                "descr": "The name of the HTTP header you want to test for. ",
                "name": "name"
            }
        ],
        "path": "dom/headers/has",
        "syntax": "myHeaders.has(name);",
        "type": "Fetch"
    },
    "Headers.keys": {
        "descr": "The Headers.keys() method returns an iterator allowing to go through all keys contained in this object. The keys are ByteString objects.",
        "name": "Headers.keys",
        "params": [],
        "path": "dom/headers/keys",
        "syntax": "headers.keys();",
        "type": "Miscellaneous"
    },
    "Headers.set": {
        "descr": "The set() method of the Headers interface sets a new value for an existing header inside a Headers object, or adds the header if it does not already exist.",
        "name": "Headers.set",
        "params": [
            {
                "descr": "The name of the HTTP header you want to set to a new value. ",
                "name": "name"
            },
            {
                "descr": "The new value you want to set.",
                "name": "value"
            }
        ],
        "path": "dom/headers/set",
        "syntax": "myHeaders.set(name,value);",
        "type": "Fetch"
    },
    "Headers.values": {
        "descr": "The Headers.values() method returns an iterator allowing to go through all values contained in this object. The values are ByteString objects.",
        "name": "Headers.values",
        "params": [],
        "path": "dom/headers/values",
        "syntax": "headers.values();",
        "type": "Miscellaneous"
    },
    "History API": {
        "descr": "The DOM window object provides access to the browser's history through the history object. It exposes useful methods and properties that let you move back and forth through the user's history, as well as -- starting with HTML5 -- manipulate the contents of the history stack.",
        "name": "History API",
        "params": [],
        "path": "dom/history_api",
        "syntax": "http://mozilla.org/bar.html executes the following JavaScript: history.replaceState(stateObj, \"page 3\", \"bar2.html\");",
        "type": "History"
    },
    "ID selector (\"#id\"": {
        "descr": "For id selectors, jQuery uses the JavaScript function document.getElementById(), which is extremely efficient. When another selector is attached to the id selector, such as h2#pageTitle, jQuery performs an additional check before identifying the element as a match.",
        "name": "ID selector (\"#id\"",
        "params": [],
        "path": "jquery/id-selector",
        "syntax": "id selector  Description: Selects a single element with the given id attribute.    version added: 1.0jQuery( \"#id\" ) id: An ID to search for, specified via the id attribute of an element.",
        "type": "Selectors"
    },
    "IDBCursor.advance": {
        "descr": "The advance() method of the IDBCursor interface sets the number of times a cursor should move its position forward.",
        "name": "IDBCursor.advance",
        "params": [
            {
                "descr": "The number of times to move the cursor forward.",
                "name": "count"
            }
        ],
        "path": "dom/idbcursor/advance",
        "syntax": "cursor.advance(count);",
        "type": "IndexedDB"
    },
    "IDBCursor.continue": {
        "descr": "The continue() method of the IDBCursor interface advances the cursor to the next position along its direction, to the item whose key matches the optional key parameter. If no key is specified, the cursor advances to the immediate next position, based on its direction.",
        "name": "IDBCursor.continue",
        "params": [
            {
                "descr": "The key to position the cursor at.",
                "name": "optionalKey"
            }
        ],
        "path": "dom/idbcursor/continue",
        "syntax": "cursor.continue(optionalKey);",
        "type": "IndexedDB"
    },
    "IDBCursor.continuePrimaryKey": {
        "descr": "The continuePrimaryKey() method of the IDBCursor interface advances the cursor to the to the item whose key matches the key parameter as well as whose primary key matches the primary key parameter.",
        "name": "IDBCursor.continuePrimaryKey",
        "params": [
            {
                "descr": "The key to position the cursor at.",
                "name": "key"
            },
            {
                "descr": "The primary key to position the cursor at.",
                "name": "primaryKey"
            }
        ],
        "path": "dom/idbcursor/continueprimarykey",
        "syntax": "cursor.continuePrimaryKey(key, primaryKey);",
        "type": "IndexedDB"
    },
    "IDBCursor.delete": {
        "descr": "The delete() method of the IDBCursor interface returns an IDBRequest object, and, in a separate thread, deletes the record at the cursor's position, without changing the cursor's position. Once the record is deleted, the cursor's value is set to null.",
        "name": "IDBCursor.delete",
        "params": [],
        "path": "dom/idbcursor/delete",
        "syntax": "var anIDBRequest = myIDBCursor.delete();",
        "type": "IndexedDB"
    },
    "IDBCursor.direction": {
        "descr": "The direction read-only property of the IDBCursor interface is a DOMString that returns the direction of traversal of the cursor (set using IDBObjectStore.openCursor for example). See the Values section below for possible values.",
        "name": "IDBCursor.direction",
        "params": [],
        "path": "dom/idbcursor/direction",
        "syntax": "var direction = cursor.direction; Value A string (defined by the IDBCursorDirection enum) indicating the direction in which the cursor is traversing the data. Possible values are:",
        "type": "IndexedDB"
    },
    "IDBCursor.key": {
        "descr": "The key read-only property of the IDBCursor interface returns the key for the record at the cursor's position. If the cursor is outside its range, this is set to undefined. The cursor's key can be any data type.",
        "name": "IDBCursor.key",
        "params": [],
        "path": "dom/idbcursor/key",
        "syntax": "var key = cursor.key; Value A value of any type. Example In this simple fragment we create a transaction, retrieve an object store, then use a cursor to iterate through all the records in the object store. Within each iteration we log the key of the cursor to the console, something like this (its the album title in each case, which is our key).",
        "type": "IndexedDB"
    },
    "IDBCursor.primaryKey": {
        "descr": "The primaryKey read-only property of the IDBCursor interface returns the cursor's current effective key. If the cursor is currently being iterated or has iterated outside its range, this is set to undefined. The cursor's primary key can be any data type.",
        "name": "IDBCursor.primaryKey",
        "params": [],
        "path": "dom/idbcursor/primarykey",
        "syntax": "var value = cursor.primaryKey; Value A value of any data type. Example In this simple fragment we create a transaction, retrieve an object store, then use a cursor to iterate through all the records in the object store. Within each iteration we log the primary key of the cursor to the console, something like this (its the album title in each case, which is our primarykey):",
        "type": "IndexedDB"
    },
    "IDBCursor.source": {
        "descr": "The source read-only property of the IDBCursor interface returns the IDBObjectStore or IDBIndex that the cursor is iterating over. This function never returns null or throws an exception, even if the cursor is currently being iterated, has iterated past its end, or its transaction is not active.",
        "name": "IDBCursor.source",
        "params": [],
        "path": "dom/idbcursor/source",
        "syntax": "var source = cursor.source; Value The IDBObjectStore or IDBIndex that the cursor is iterating over. Example In this simple fragment we create a transaction, retrieve an object store, then use a cursor to iterate through all the records in the object store. Within each iteration we log the source of the cursor, which will log our IDBobjectStore object to the console, something like this: IDBObjectStore {autoIncrement: false, transaction: IDBTransaction, indexNames: DOMStringList, keyPath: \"albumTitle\", name: \"rushAlbumList\"…} The cursor does not require us to select the data based on a key; we can just grab all of it. Also note that in each iteration of the loop, you can grab data from the current record under the cursor object using cursor.value.foo. For a complete working example, see our IDBCursor example (view example live.)",
        "type": "IndexedDB"
    },
    "IDBCursor.update": {
        "descr": "The update() method of the IDBCursor interface returns an IDBRequest object, and, in a separate thread, updates the value at the current position of the cursor in the object store. If the cursor points to a record that has just been deleted, a new record is created.",
        "name": "IDBCursor.update",
        "params": [
            {
                "descr": "The new value to be stored at the current position.",
                "name": "value"
            }
        ],
        "path": "dom/idbcursor/update",
        "syntax": "var anIDBRequest = myIDBCursor.update(value);",
        "type": "IndexedDB"
    },
    "IDBCursorWithValue.value": {
        "descr": "The value read-only property of the IDBCursorWithValue interface returns the value of the current cursor, whatever that is.",
        "name": "IDBCursorWithValue.value",
        "params": [],
        "path": "dom/idbcursorwithvalue/value",
        "syntax": "var value = myIDBCursorWithValue.value; Value The value of the current cursor. Example In this example we create a transaction, retrieve an object store, then use a cursor to iterate through all the records in the object store. Within each iteration we log the value of the cursor with cursor.value. The cursor does not require us to select the data based on a key; we can just grab all of it. Also note that in each iteration of the loop, you can grab data from the current record under the cursor object using cursor.value.foo. For a complete working example, see our IDBCursor example (view example live.)",
        "type": "IndexedDB"
    },
    "IDBDatabase.close": {
        "descr": "The close() method of the IDBDatabase interface returns immediately and closes the connection in a separate thread.",
        "name": "IDBDatabase.close",
        "params": [],
        "path": "dom/idbdatabase/close",
        "syntax": "IDBDatabase.close();",
        "type": "IndexedDB"
    },
    "IDBDatabase.createObjectStore": {
        "descr": "The createObjectStore() method of the IDBDatabase interface creates and returns a new object store or index.",
        "name": "IDBDatabase.createObjectStore",
        "params": [
            {
                "descr": "The name of the new object store to be created. ",
                "name": "name"
            },
            {
                "descr": "An options object whose attributes are optional parameters to the method. ",
                "name": "optionalParameters Optional"
            },
            {
                "descr": "The newly created object store.",
                "name": "IDBObjectStore"
            }
        ],
        "path": "dom/idbdatabase/createobjectstore",
        "syntax": "var objectStore = IDBDatabase.createObjectStore(name);\n or  var objectStore = IDBDatabase.createObjectStore(name, options);",
        "type": "IndexedDB"
    },
    "IDBDatabase.deleteObjectStore": {
        "descr": "The deleteObjectStore() method of the IDBDatabase interface destroys the object store with the given name in the connected database, along with any indexes that reference it.",
        "name": "IDBDatabase.deleteObjectStore",
        "params": [
            {
                "descr": "The name of the object store you want to delete.",
                "name": "name"
            }
        ],
        "path": "dom/idbdatabase/deleteobjectstore",
        "syntax": "dbInstance.deleteObjectStore(name);",
        "type": "IndexedDB"
    },
    "IDBDatabase.name": {
        "descr": "The name read-only property of the IDBDatabase interface is a DOMString that contains the name of the connected database.",
        "name": "IDBDatabase.name",
        "params": [],
        "path": "dom/idbdatabase/name",
        "syntax": "var dbName = IDBDatabase.name; Value A DOMString containing the name of the connected database. Example This example shows a database connection being opened, the resulting IDBDatabase object being stored in a db variable, and the name property then being logged. For a full example, see our To-do Notifications app (view example live).",
        "type": "IndexedDB"
    },
    "IDBDatabase.objectStoreNames": {
        "descr": "The objectStoreNames read-only property of the IDBDatabase interface is a DOMStringList containing a list of the names of the object stores currently in the connected database.",
        "name": "IDBDatabase.objectStoreNames",
        "params": [],
        "path": "dom/idbdatabase/objectstorenames",
        "syntax": "var list[] = IDBDatabase.objectStoreNames; Value A DOMStringList containing a list of the names of the object stores currently in the connected database. Example // Let us open our database var DBOpenRequest = window.indexedDB.open(\"toDoList\", 4);\n or  // these two event handlers act on the database being opened successfully, or not DBOpenRequest.onerror = function(event) { note.innerHTML += '<li>Error loading database.</li>'; }; DBOpenRequest.onsuccess = function(event) { note.innerHTML += '<li>Database initialised.</li>'; // store the result of opening the database in the db variable. This is used a lot below db = DBOpenRequest.result; // This line will log the version of the connected database, which should be // an object that looks like { ['my-store-name'] } console.log(db.objectStoreNames);\n or  };);",
        "type": "IndexedDB"
    },
    "IDBDatabase.onabort": {
        "descr": "The onabort event handler of the IDBDatabase interface handles the abort event, fired when a transaction is aborted and bubbles up to the connection object.",
        "name": "IDBDatabase.onabort",
        "params": [],
        "path": "dom/idbdatabase/onabort",
        "syntax": "IDBDatabase.onabort = function(error) { ... };",
        "type": "IndexedDB"
    },
    "IDBDatabase.onclose": {
        "descr": "The onclose event handler of the IDBDatabase interface handles the close event, which is fired when the database is unexpectedly closed. This can happen, for example, when the application is shut down or access to the disk the database is stored on is lost while the database is open.",
        "name": "IDBDatabase.onclose",
        "params": [],
        "path": "dom/idbdatabase/onclose",
        "syntax": "IDBDatabase.onclose = function(error) { ... };",
        "type": "IndexedDB"
    },
    "IDBDatabase.onerror": {
        "descr": "The onerror event handler of the IDBDatabase interface handles the error event, fired when a request returns an error and bubbles up to the connection object.",
        "name": "IDBDatabase.onerror",
        "params": [],
        "path": "dom/idbdatabase/onerror",
        "syntax": "IDBDatabase.onerror = function(error) { ... }",
        "type": "IndexedDB"
    },
    "IDBDatabase.onversionchange": {
        "descr": "The onversionchange event handler of the IDBDatabase interface handles the versionchange event, fired when a database structure change (IDBOpenDBRequest.onupgradeneeded event or IDBFactory.deleteDatabase) was requested elsewhere (most probably in another window/tab on the same computer).",
        "name": "IDBDatabase.onversionchange",
        "params": [],
        "path": "dom/idbdatabase/onversionchange",
        "syntax": "IDBDatabase.onversionchange = function(error) { ... }",
        "type": "IndexedDB"
    },
    "IDBDatabase.transaction": {
        "descr": "The transaction method of the IDBDatabase interface immediately returns a transaction object (IDBTransaction) containing the IDBTransaction.objectStore method, which you can use to access your object store.",
        "name": "IDBDatabase.transaction",
        "params": [
            {
                "descr": "The names of object stores that are in the scope of the new transaction, declared as an array of strings. ",
                "name": "storeNames"
            },
            {
                "descr": "Optional. The types of access that can be performed in the transaction. ",
                "name": "mode"
            }
        ],
        "path": "dom/idbdatabase/transaction",
        "syntax": "var IDBTransaction = IDBDatabase.transaction(storeNames);\n or  var IDBTransaction = IDBDatabase.transaction(storeNames, mode);",
        "type": "IndexedDB"
    },
    "IDBDatabase.version": {
        "descr": "The version property of the IDBDatabase interface is a 64-bit integer that contains the version of the connected database. When a database is first created, this attribute is an empty string.",
        "name": "IDBDatabase.version",
        "params": [],
        "path": "dom/idbdatabase/version",
        "syntax": "var myInteger = IDBDatabase.version; Value An integer containing the version of the connected database. Example // Let us open our database var DBOpenRequest = window.indexedDB.open(\"toDoList\", 4);\n or  // these two event handlers act on the database // being opened successfully, or not DBOpenRequest.onerror = function(event) { note.innerHTML += '<li>Error loading database.</li>'; }; DBOpenRequest.onsuccess = function(event) { note.innerHTML += '<li>Database initialised.</li>'; // store the result of opening the database in the db variable. This is used a lot below db = DBOpenRequest.result; // This line will log the version of the connected database, which should be \"4\" console.log(db.version);\n or  };);",
        "type": "IndexedDB"
    },
    "IDBFactory.cmp": {
        "descr": "The cmp() method of the IDBFactory interface compares two values as keys to determine equality and ordering for IndexedDB operations, such as storing and iterating.",
        "name": "IDBFactory.cmp",
        "params": [
            {
                "descr": "The first key to compare.",
                "name": "first"
            },
            {
                "descr": "The second key to compare.",
                "name": "second"
            }
        ],
        "path": "dom/idbfactory/cmp",
        "syntax": "var result = indexedDB.cmp(first, second);",
        "type": "IndexedDB"
    },
    "IDBFactory.deleteDatabase": {
        "descr": "The deleteDatabase() method of the IDBFactory interface requests the deletion of a database. The method returns an IDBOpenDBRequest object immediately, and performs the deletion operation asynchronously.",
        "name": "IDBFactory.deleteDatabase",
        "params": [
            {
                "descr": "The name of the database you want to delete. ",
                "name": "name"
            },
            {
                "descr": "In Gecko, since version 26, you can include a non-standard optional storage parameter that specifies whether you want to delete a permanent (the default value) IndexedDB, or an indexedDB in temporary storage (aka shared pool.)",
                "name": "optionsNon-standard"
            }
        ],
        "path": "dom/idbfactory/deletedatabase",
        "syntax": "var request = indexedDB.deleteDatabase(name);",
        "type": "IndexedDB"
    },
    "IDBFactory.open": {
        "descr": "The open() method of the IDBFactory interface requests opening a connection to a database.",
        "name": "IDBFactory.open",
        "params": [
            {
                "descr": "The name of the database.",
                "name": "name"
            },
            {
                "descr": "Optional. The version to open the database with. ",
                "name": "version Optional"
            },
            {
                "descr": "In Gecko, since version 26, you can include a non-standard options object as a parameter of IDBFactory.open that contains the version number of the database, plus a storage value that specifies whether you want to use persistent or temporary storage.  Warning: The storage attribute is deprecated and will soon be removed from Gecko. You should use StorageManager.persist() to get persistent storage instead.",
                "name": "options (version and storage) Optional"
            }
        ],
        "path": "dom/idbfactory/open",
        "syntax": "var IDBOpenDBRequest = indexedDB.open(name);\n or  var IDBOpenDBRequest = indexedDB.open(name, version);",
        "type": "IndexedDB"
    },
    "IDBIndex.count": {
        "descr": "The count() method of the IDBIndex interface returns an IDBRequest object, and in a separate thread, returns the number of records within a key range.",
        "name": "IDBIndex.count",
        "params": [
            {
                "descr": "The key or key range that identifies the record to be counted.",
                "name": "key Optional"
            }
        ],
        "path": "dom/idbindex/count",
        "syntax": "var request = myIndex.count();\n or  var request = myIndex.count(key);",
        "type": "IndexedDB"
    },
    "IDBIndex.get": {
        "descr": "The get() method of the IDBIndex interface returns an IDBRequest object, and, in a separate thread, finds either the value in the referenced object store that corresponds to the given key or the first corresponding value, if key is set to an IDBKeyRange.",
        "name": "IDBIndex.get",
        "params": [
            {
                "descr": "A key or IDBKeyRange that identifies the record to be retrieved. ",
                "name": "key Optional"
            }
        ],
        "path": "dom/idbindex/get",
        "syntax": "var request = myIndex.get(key);",
        "type": "IndexedDB"
    },
    "IDBIndex.getAll": {
        "descr": "The getAll() method of the IDBIndex interface retrieves all objects that are inside the index.",
        "name": "IDBIndex.getAll",
        "params": [
            {
                "descr": "A key or an IDBKeyRange identifying the records to retrieve. ",
                "name": "query Optional"
            },
            {
                "descr": "The number records to return. If this value exceeds the number of records in the query, the browser will only retrieve the first item. ",
                "name": "count Optional"
            }
        ],
        "path": "dom/idbindex/getall",
        "syntax": "var getAllKeysRequest = IDBIndex.getAll();\n or  var getAllKeysRequest = IDBIndex.getAll(query);\n or  var getAllKeysRequest = IDBIndex.getAll(query, count);",
        "type": "IndexedDB"
    },
    "IDBIndex.getAllKeys": {
        "descr": "The proposed getAllKeys() method of the IDBIndex interface would instantly retrieve the keys of all objects inside the index, setting them as the result of the request object.",
        "name": "IDBIndex.getAllKeys",
        "params": [
            {
                "descr": "A key or an IDBKeyRange identifying the keys to retrieve. ",
                "name": "query Optional"
            },
            {
                "descr": "The number records to return. If this value exceeds the number of records in the query, the browser will only retrieve the first item. ",
                "name": "count Optional"
            }
        ],
        "path": "dom/idbindex/getallkeys",
        "syntax": "var allKeysRequest = IDBIndex.getAllKeys();\n or  var allKeysRequest = IDBIndex.getAllKeys(query);\n or  var allKeysRequest = IDBIndex.getAllKeys(query, count);",
        "type": "IndexedDB"
    },
    "IDBIndex.getKey": {
        "descr": "The getKey() method of the IDBIndex interface returns an IDBRequest object, and, in a separate thread, finds either the given key or the primary key, if key is set to an IDBKeyRange.",
        "name": "IDBIndex.getKey",
        "params": [
            {
                "descr": "A key or IDBKeyRange that identifies a record to be retrieved. ",
                "name": "key Optional"
            }
        ],
        "path": "dom/idbindex/getkey",
        "syntax": "var request = myIndex.getKey(key);",
        "type": "IndexedDB"
    },
    "IDBIndex.isAutoLocale": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "IDBIndex.isAutoLocale",
        "params": [],
        "path": "dom/idbindex/isautolocale",
        "syntax": "var myIndex = objectStore.index('index');\n or  console.log(myIndex.isAutoLocale);",
        "type": "IndexedDB"
    },
    "IDBIndex.keyPath": {
        "descr": "The keyPath property of the IDBIndex interface returns the key path of the current index. If null, this index is not auto-populated.",
        "name": "IDBIndex.keyPath",
        "params": [],
        "path": "dom/idbindex/keypath",
        "syntax": "var myKeyPath = myIndex.keyPath; Value Any data type that can be used as a key path. Example In the following example we open a transaction and an object store, then get the index lName from a simple contacts database. We then open a basic cursor on the index using IDBIndex.openCursor — this works the same as opening a cursor directly on an ObjectStore using IDBObjectStore.openCursor except that the returned records are sorted based on the index, not the primary key. The key path of the current index is logged to the console: it should be returned as lName. Finally, we iterate through each record, and insert the data into an HTML table. For a complete working example, see our IDBIndex-example demo repo (View the example live.)",
        "type": "IndexedDB"
    },
    "IDBIndex.locale": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "IDBIndex.locale",
        "params": [],
        "path": "dom/idbindex/locale",
        "syntax": "var myIndex = objectStore.index('index');\n or  console.log(myIndex.locale);",
        "type": "IndexedDB"
    },
    "IDBIndex.multiEntry": {
        "descr": "The multiEntry read-only property of the IDBIndex interface returns a boolean value that affects how the index behaves when the result of evaluating the index's key path yields an array.",
        "name": "IDBIndex.multiEntry",
        "params": [],
        "path": "dom/idbindex/multientry",
        "syntax": "var isMultiEntry = myIndex.multiEntry; Value A Boolean:    Value Effect   true There is one record in the index for each item in an array of keys.   false There is one record for each key that is an array.    Example In the following example we open a transaction and an object store, then get the index lName from a simple contacts database. We then open a basic cursor on the index using IDBIndex.openCursor — this works the same as opening a cursor directly on an ObjectStore using IDBObjectStore.openCursor except that the returned records are sorted based on the index, not the primary key. The multi-entry status of the index is logged to the console: it should be returned as false. Finally, we iterate through each record, and insert the data into an HTML table. For a complete working example, see our IDBIndex-example demo repo (View the example live.)",
        "type": "IndexedDB"
    },
    "IDBIndex.name": {
        "descr": "The name property of the IDBIndex interface contains a string which names the index.",
        "name": "IDBIndex.name",
        "params": [
            {
                "descr": "The index, or its object store, has been deleted; or the current transaction is not an upgrade transaction. ",
                "name": "InvalidStateError"
            },
            {
                "descr": "The current transaction is not active.",
                "name": "TransactionInactiveError"
            },
            {
                "descr": "An index is already using the specified name.",
                "name": "ConstraintError"
            }
        ],
        "path": "dom/idbindex/name",
        "syntax": "var indexName = IDBIndex.name; IDBIndex.name = indexName; Value A DOMString specifying a name for the index. Exceptions There are a several exceptions which can occur when you attempt to change an index's name.  InvalidStateError The index, or its object store, has been deleted; or the current transaction is not an upgrade transaction. You can only rename indexes during upgrade transactions; that is, when the mode is \"versionchange\". TransactionInactiveError The current transaction is not active. ConstraintError An index is already using the specified name.  Example In the following example we open a transaction and an object store, then get the index lName from a simple contacts database. We then open a basic cursor on the index using IDBIndex.openCursor()",
        "type": "IndexedDB"
    },
    "IDBIndex.objectStore": {
        "descr": "The objectStore property of the IDBIndex interface returns the name of the object store referenced by the current index.",
        "name": "IDBIndex.objectStore",
        "params": [],
        "path": "dom/idbindex/objectstore",
        "syntax": "var myIDBObjectStore = myIndex.objectStore; Value An IDBObjectStore. Example In the following example we open a transaction and an object store, then get the index lName from a simple contacts database. We then open a basic cursor on the index using IDBIndex.openCursor. This works the same as opening a cursor directly on an ObjectStore using IDBObjectStore.openCursor except that the returned records are sorted based on the index, not the primary key. The current object store is logged to the console: it should be returned something like this: IDBObjectStore { name: \"contactsList\", keyPath: \"id\", indexNames: DOMStringList[7], transaction: IDBTransaction, autoIncrement: false } Finally, we iterate through each record, and insert the data into an HTML table. For a complete working example, see our IDBIndex-example demo repo (View the example live.)",
        "type": "IndexedDB"
    },
    "IDBIndex.openCursor": {
        "descr": "The openCursor() method of the IDBIndex interface returns an IDBRequest object, and, in a separate thread, creates a cursor over the specified key range.",
        "name": "IDBIndex.openCursor",
        "params": [
            {
                "descr": "A key or IDBKeyRange to use as the cursor's range. ",
                "name": "range Optional"
            },
            {
                "descr": "The cursor's direction. See IDBCursor Constants for possible values.",
                "name": "direction Optional"
            }
        ],
        "path": "dom/idbindex/opencursor",
        "syntax": "var request = myIndex.openCursor();\n or  var request = myIndex.openCursor(range);\n or  var request = myIndex.openCursor(range, direction);",
        "type": "IndexedDB"
    },
    "IDBIndex.openKeyCursor": {
        "descr": "The openKeyCursor() method of the IDBIndex interface returns an IDBRequest object, and, in a separate thread, creates a cursor over the specified key range, as arranged by this index.",
        "name": "IDBIndex.openKeyCursor",
        "params": [
            {
                "descr": "A key or IDBKeyRange to use as the cursor's range. ",
                "name": "range Optional"
            },
            {
                "descr": "The cursor's direction. See IDBCursor Constants for possible values.",
                "name": "direction Optional"
            }
        ],
        "path": "dom/idbindex/openkeycursor",
        "syntax": "var request = myIndex.openKeyCursor();\n or  var request = myIndex.openKeyCursor(range);\n or  var request = myIndex.openKeyCursor(range, direction);",
        "type": "IndexedDB"
    },
    "IDBIndex.unique": {
        "descr": "The unique read-only property returns a boolean that states whether the index allows duplicate keys.",
        "name": "IDBIndex.unique",
        "params": [],
        "path": "dom/idbindex/unique",
        "syntax": "var isUnique = IDBIndex.unique;  Value A Boolean:    Value Effect     true The current index does not allow duplicate values for a key.   false The current index allows duplicate key values.    Example In the following example we open a transaction and an object store, then get the index lName from a simple contacts database. We then open a basic cursor on the index using IDBIndex.openCursor — this works the same as opening a cursor directly on an ObjectStore using IDBObjectStore.openCursor except that the returned records are sorted based on the index, not the primary key. The unique status of the index is logged to the console: it should be returned as false. Finally, we iterate through each record, and insert the data into an HTML table. For a complete working example, see our IDBIndex-example demo repo (View the example live.)",
        "type": "IndexedDB"
    },
    "IDBKeyRange.bound": {
        "descr": "The bound() method of the IDBKeyRange interface creates a new key range with the specified upper and lower bounds. The bounds can be open (that is, the bounds exclude the endpoint values) or closed (that is, the bounds include the endpoint values). By default, the bounds are closed.",
        "name": "IDBKeyRange.bound",
        "params": [
            {
                "descr": "specifies the lower bound of the new key range.",
                "name": "lower"
            },
            {
                "descr": "specifies the upper bound of the new key range.",
                "name": "upper"
            },
            {
                "descr": "indicates whether the lower bound excludes the endpoint value. ",
                "name": "lowerOpen Optional"
            },
            {
                "descr": "Indicates whether the upper bound excludes the endpoint value. ",
                "name": "upperOpen Optional"
            }
        ],
        "path": "dom/idbkeyrange/bound",
        "syntax": "var myIDBKeyRange = IDBKeyRange.bound(lower, upper);\n or  var myIDBKeyRange = IDBKeyRange.bound(lower, upper, lowerOpen);\n or  var myIDBKeyRange = IDBKeyRange.bound(lower, upper, lowerOpen, upperOpen);",
        "type": "IndexedDB"
    },
    "IDBKeyRange.includes": {
        "descr": "The includes() method of the IDBKeyRange interface returns a boolean indicating whether a specified key is inside the key range.",
        "name": "IDBKeyRange.includes",
        "params": [],
        "path": "dom/idbkeyrange/includes",
        "syntax": "var isIncluded = myKeyRange.includes(key)",
        "type": "IndexedDB"
    },
    "IDBKeyRange.lower": {
        "descr": "The lower read-only property of the IDBKeyRange interface returns the lower bound of the key range.",
        "name": "IDBKeyRange.lower",
        "params": [],
        "path": "dom/idbkeyrange/lower",
        "syntax": "var lower = myKeyRange.lower Value The lower bound of the key range (can be any type.)",
        "type": "IndexedDB"
    },
    "IDBKeyRange.lowerBound": {
        "descr": "The lowerBound() method of the IDBKeyRange interface creates a new key range with only a lower bound. By default, it includes the lower endpoint value and is closed.",
        "name": "IDBKeyRange.lowerBound",
        "params": [
            {
                "descr": "specifies the lower bound of the new key range.",
                "name": "lower"
            },
            {
                "descr": "indicates whether the lower bound excludes the endpoint value. ",
                "name": "openOptional"
            }
        ],
        "path": "dom/idbkeyrange/lowerbound",
        "syntax": "var myIDBKeyRange = IDBKeyRange.lowerBound(lower);\n or  var myIDBKeyRange = IDBKeyRange.lowerBound(lower, open);",
        "type": "IndexedDB"
    },
    "IDBKeyRange.lowerOpen": {
        "descr": "The lowerOpen read-only property of the IDBKeyRange interface returns a boolean indicating whether the lower-bound value is included in the key range.",
        "name": "IDBKeyRange.lowerOpen",
        "params": [],
        "path": "dom/idbkeyrange/loweropen",
        "syntax": "var lowerOpen = myKeyRange.lowerOpen Value A boolean:    Value Indication     true The lower-bound value is not included in the key range.   false The lower-bound value is included in the key range.     Example The following example illustrates how you'd use a key range. Here we declare keyRangeValue = IDBKeyRange.upperBound(\"F\", \"W\", true, true);",
        "type": "IndexedDB"
    },
    "IDBKeyRange.only": {
        "descr": "The only() method of the IDBKeyRange interface creates a new key range containing a single value.",
        "name": "IDBKeyRange.only",
        "params": [],
        "path": "dom/idbkeyrange/only",
        "syntax": "var myIDBKeyRange = IDBKeyRange.only(value);",
        "type": "IndexedDB"
    },
    "IDBKeyRange.upper": {
        "descr": "The upper read-only property of the IDBKeyRange interface returns the upper bound of the key range.",
        "name": "IDBKeyRange.upper",
        "params": [],
        "path": "dom/idbkeyrange/upper",
        "syntax": "var upper = myKeyRange.upper Value The upper bound of the key range (can be any type.)",
        "type": "IndexedDB"
    },
    "IDBKeyRange.upperBound": {
        "descr": "The upperBound() method of the IDBKeyRange interface creates a new upper-bound key range. By default, it includes the upper endpoint value and is closed.",
        "name": "IDBKeyRange.upperBound",
        "params": [],
        "path": "dom/idbkeyrange/upperbound",
        "syntax": "var myIDBKeyRange = IDBKeyRange.upperBound(upper[, open=false])",
        "type": "IndexedDB"
    },
    "IDBKeyRange.upperOpen": {
        "descr": "The upperOpen read-only property of the IDBKeyRange interface returns a boolean indicating whether the upper-bound value is included in the key range.",
        "name": "IDBKeyRange.upperOpen",
        "params": [],
        "path": "dom/idbkeyrange/upperopen",
        "syntax": "var upperOpen = myKeyRange.upperOpen Value A boolean:    Value Indication     true The upper-bound value is not included in the key range.   false The upper-bound value is included in the key range.     Example The following example illustrates how you'd use a key range. Here we declare keyRangeValue = IDBKeyRange.upperBound(\"F\", \"W\", true, true);",
        "type": "IndexedDB"
    },
    "IDBObjectStore.add": {
        "descr": "The add() method of the IDBObjectStore interface returns an IDBRequest object, and, in a separate thread, creates a structured clone of the value, and stores the cloned value in the object store. This is for adding new records to an object store.",
        "name": "IDBObjectStore.add",
        "params": [
            {
                "descr": "The value to be stored.",
                "name": "value"
            },
            {
                "descr": "The key to use to identify the record. ",
                "name": "key Optional"
            }
        ],
        "path": "dom/idbobjectstore/add",
        "syntax": "var request = objectStore.add(value);\n or  var request = objectStore.add(value, key);",
        "type": "IndexedDB"
    },
    "IDBObjectStore.autoIncrement": {
        "descr": "The autoIncrement read-only property of the IDBObjectStore interface returns the value of the auto increment flag for this object store.",
        "name": "IDBObjectStore.autoIncrement",
        "params": [],
        "path": "dom/idbobjectstore/autoincrement",
        "syntax": "var myAutoIncrement = objectStore.autoIncrement; Value A Boolean:    Value Meaning     true The object store auto increments.   false The object store does not auto increment.     Example In the following code snippet, we open a read/write transaction on our database and add some data to an object store using add()",
        "type": "IndexedDB"
    },
    "IDBObjectStore.clear": {
        "descr": "The clear() method of the IDBObjectStore interface creates and immediately returns an IDBRequest object, and clears this object store in a separate thread. This is for deleting all the current data out of an object store.",
        "name": "IDBObjectStore.clear",
        "params": [],
        "path": "dom/idbobjectstore/clear",
        "syntax": "var request = objectStore.clear();",
        "type": "IndexedDB"
    },
    "IDBObjectStore.count": {
        "descr": "The count() method of the IDBObjectStore interface returns an IDBRequest object, and, in a separate thread, returns the total number of records that match the provided key or IDBKeyRange. If no arguments are provided, it returns the total number of records in the store.",
        "name": "IDBObjectStore.count",
        "params": [
            {
                "descr": "A key or IDBKeyRange object that specifies a range of records you want to count.",
                "name": "query Optional"
            }
        ],
        "path": "dom/idbobjectstore/count",
        "syntax": "var request = ObjectStore.count();\n or  var request = ObjectStore.count(query);",
        "type": "IndexedDB"
    },
    "IDBObjectStore.createIndex": {
        "descr": "The createIndex() method of the IDBObjectStore interface creates and returns a new IDBIndex object in the connected database, this is, it creates a new field/column defining a new data point for each database record to contain.",
        "name": "IDBObjectStore.createIndex",
        "params": [
            {
                "descr": "The name of the index to create. ",
                "name": "indexName"
            },
            {
                "descr": "The key path for the index to use. ",
                "name": "keyPath"
            },
            {
                "descr": "An IDBIndexParameters object, which can include the following properties:    Attribute Description     unique If true, the index will not allow duplicate values for a single key. ",
                "name": "objectParameters Optional"
            }
        ],
        "path": "dom/idbobjectstore/createindex",
        "syntax": "var myIDBIndex = objectStore.createIndex(indexName, keyPath);\n or  var myIDBIndex = objectStore.createIndex(indexName, keyPath, objectParameters);",
        "type": "IndexedDB"
    },
    "IDBObjectStore.delete": {
        "descr": "The delete() method of the IDBObjectStore interface returns an IDBRequest object, and, in a separate thread, deletes the specified record or records.",
        "name": "IDBObjectStore.delete",
        "params": [
            {
                "descr": "The key of the record to be deleted, or an IDBKeyRange to delete all records with keys in range.",
                "name": "Key"
            }
        ],
        "path": "dom/idbobjectstore/delete",
        "syntax": "var request = objectStore.delete(Key);\n or  var request = objectStore.delete(KeyRange);",
        "type": "IndexedDB"
    },
    "IDBObjectStore.deleteIndex": {
        "descr": "The deleteIndex() method of the IDBObjectStore interface destroys the index with the specified name in the connected database, used during a version upgrade.",
        "name": "IDBObjectStore.deleteIndex",
        "params": [
            {
                "descr": "The name of the existing index to remove.",
                "name": "indexName"
            }
        ],
        "path": "dom/idbobjectstore/deleteindex",
        "syntax": "objectStore.deleteIndex(indexName);",
        "type": "IndexedDB"
    },
    "IDBObjectStore.get": {
        "descr": "The get() method of the IDBObjectStore interface returns an IDBRequest object, and, in a separate thread, returns the object store selected by the specified key. This is for retrieving specific records from an object store.",
        "name": "IDBObjectStore.get",
        "params": [
            {
                "descr": "The key or key range that identifies the record to be retrieved.",
                "name": "key"
            }
        ],
        "path": "dom/idbobjectstore/get",
        "syntax": "var request = objectStore.get(key);",
        "type": "IndexedDB"
    },
    "IDBObjectStore.getAll": {
        "descr": "The getAll() method of the IDBObjectStore interface returns an IDBRequest object containing all objects in the object store matching the specified parameter or all objects in the store if no parameters are given.",
        "name": "IDBObjectStore.getAll",
        "params": [
            {
                "descr": "A key or IDBKeyRange to be queried. ",
                "name": "query Optional"
            },
            {
                "descr": "Specifies the number of values to return if more than one is found. ",
                "name": "count Optional"
            }
        ],
        "path": "dom/idbobjectstore/getall",
        "syntax": "var request = objectStore.getAll();\n or  var request = objectStore.getAll(query);\n or  var request = objectStore.getAll(query, count);",
        "type": "IndexedDB"
    },
    "IDBObjectStore.getAllKeys": {
        "descr": "The getAllKeys() method of the IDBObjectStore interface returns an IDBRequest object retrieves record keys for all objects in the object store matching the specified parameter or all objects in the store if no parameters are given.",
        "name": "IDBObjectStore.getAllKeys",
        "params": [
            {
                "descr": "A value that is or resolves to an IDBKeyRange.",
                "name": "query Optional"
            },
            {
                "descr": "Specifies the number of values to return if more than one is found. ",
                "name": "count Optional"
            }
        ],
        "path": "dom/idbobjectstore/getallkeys",
        "syntax": "var request = objectStore.getAllKeys();\n or  var request = objectStore.getAllKeys(query);\n or  var request = objectStore.getAllKeys(query, count);",
        "type": "IndexedDB"
    },
    "IDBObjectStore.getKey": {
        "descr": "The getKey() method of the IDBObjectStore interface returns an IDBRequest object, and, in a separate thread, returns the key selected by the specified query. This is for retrieving specific records from an object store.",
        "name": "IDBObjectStore.getKey",
        "params": [
            {
                "descr": "The key or key range that identifies the record to be retrieved.",
                "name": "key"
            }
        ],
        "path": "dom/idbobjectstore/getkey",
        "syntax": "var request = objectStore.getKey(key);",
        "type": "IndexedDB"
    },
    "IDBObjectStore.index": {
        "descr": "The index() method of the IDBObjectStore interface opens a named index in the current object store, after which it can be used to, for example, return a series of records sorted by that index using a cursor.",
        "name": "IDBObjectStore.index",
        "params": [
            {
                "descr": "The name of the index to open.",
                "name": "name"
            }
        ],
        "path": "dom/idbobjectstore/index",
        "syntax": "var index = objectStore.index(name);",
        "type": "IndexedDB"
    },
    "IDBObjectStore.indexNames": {
        "descr": "The indexNames read-only property of the IDBObjectStore interface returns a list of the names of indexes on objects in this object store.",
        "name": "IDBObjectStore.indexNames",
        "params": [],
        "path": "dom/idbobjectstore/indexnames",
        "syntax": "var myindexNames = objectStore.indexNames; Value A DOMStringList. Example In the following code snippet, we open a read/write transaction on our database and add some data to an object store using add()",
        "type": "IndexedDB"
    },
    "IDBObjectStore.keyPath": {
        "descr": "The keyPath read-only property of the IDBObjectStore interface returns the key path of this object store.",
        "name": "IDBObjectStore.keyPath",
        "params": [],
        "path": "dom/idbobjectstore/keypath",
        "syntax": "var mykeyPath = objectStore.keyPath; Value Any value type. Example In the following code snippet, we open a read/write transaction on our database and add some data to an object store using add()",
        "type": "IndexedDB"
    },
    "IDBObjectStore.name": {
        "descr": "The name property of the IDBObjectStore interface indicates the name of this object store.",
        "name": "IDBObjectStore.name",
        "params": [
            {
                "descr": "Either the object store has been deleted or the current transaction is not an upgrade transaction; you can only rename indexes during upgrade transactions; that is, when the mode is \"versionchange\".",
                "name": "InvalidStateError"
            },
            {
                "descr": "The current transaction is not active.",
                "name": "TransactionInactiveError"
            },
            {
                "descr": "An object store is already using the specified name.",
                "name": "ConstraintError"
            }
        ],
        "path": "dom/idbobjectstore/name",
        "syntax": "IDBObjectStore.name = myNewName; var myObjectStoreName = IDBObjectStore.name;  Value A DOMString containing the object store's name. Exceptions There are a several exceptions which can occur when you attempt to change an object store's name.  InvalidStateError Either the object store has been deleted or the current transaction is not an upgrade transaction; you can only rename indexes during upgrade transactions; that is, when the mode is \"versionchange\". TransactionInactiveError The current transaction is not active. ConstraintError An object store is already using the specified name.  Example In the following code snippet, we open a read/write transaction on our database and add some data to an object store using add()",
        "type": "IndexedDB"
    },
    "IDBObjectStore.openCursor": {
        "descr": "The openCursor() method of the IDBObjectStore interface returns an IDBRequest object, and, in a separate thread, returns a new IDBCursorWithValue object. Used for iterating through an object store with a cursor.",
        "name": "IDBObjectStore.openCursor",
        "params": [
            {
                "descr": "A key or IDBKeyRange to be queried. ",
                "name": "query Optional"
            },
            {
                "descr": "An IDBCursorDirection telling the cursor what direction to travel. ",
                "name": "direction Optional"
            }
        ],
        "path": "dom/idbobjectstore/opencursor",
        "syntax": "var request = ObjectStore.openCursor();\n or  var request = ObjectStore.openCursor(query);\n or  var request = ObjectStore.openCursor(query, direction);",
        "type": "IndexedDB"
    },
    "IDBObjectStore.openKeyCursor": {
        "descr": "The openKeyCursor() method of the IDBObjectStore interface returns an IDBRequest object whose result will be set to an IDBCursor that can be used to iterate through matching results. Used for iterating through the keys of an object store with a cursor.",
        "name": "IDBObjectStore.openKeyCursor",
        "params": [
            {
                "descr": "The key range to be queried. If a single valid key is passed, this will default to a range containing only that key. ",
                "name": "query Optional"
            },
            {
                "descr": "An IDBCursorDirection telling the cursor what direction to travel. ",
                "name": "direction Optional"
            }
        ],
        "path": "dom/idbobjectstore/openkeycursor",
        "syntax": "var request = objectStore.openKeyCursor();\n or  var request = objectStore.openKeyCursor(query);\n or  var request = objectStore.openKeyCursor(query, direction);",
        "type": "IndexedDB"
    },
    "IDBObjectStore.put": {
        "descr": "The put() method of the IDBObjectStore interface updates a given record in a database, or inserts a new record if the given item does not already exist.",
        "name": "IDBObjectStore.put",
        "params": [
            {
                "descr": "The item you wish to update (or insert).",
                "name": "item"
            },
            {
                "descr": "The primary key of the record you want to update (e.g. ",
                "name": "key Optional"
            },
            {
                "descr": "The value to be stored.",
                "name": "value"
            },
            {
                "descr": "The key to use to identify the record. ",
                "name": "key"
            }
        ],
        "path": "dom/idbobjectstore/put",
        "syntax": "var request = objectStore.put(item);\n or  var request = objectStore.put(item, key);",
        "type": "IndexedDB"
    },
    "IDBObjectStore.transaction": {
        "descr": "The transaction read-only property of the IDBObjectStore interface returns the transaction object to which this object store belongs.",
        "name": "IDBObjectStore.transaction",
        "params": [],
        "path": "dom/idbobjectstore/transaction",
        "syntax": "var myTransaction = objectStore.transaction; Value An IDBTransaction object. Example In the following code snippet, we open a read/write transaction on our database and add some data to an object store using add()",
        "type": "IndexedDB"
    },
    "IDBOpenDBRequest.onblocked": {
        "descr": "The onblocked event handler of the IDBOpenDBRequest interface is the event handler for the blocked event. This event is triggered when the upgradeneeded should be triggered because of a version change but the database is still in use (that is, not closed) somewhere, even after the versionchange event was sent.",
        "name": "IDBOpenDBRequest.onblocked",
        "params": [],
        "path": "dom/idbopendbrequest/onblocked",
        "syntax": "IDBOpenDBRequest.onblocked = function(event) { ... };",
        "type": "IndexedDB"
    },
    "IDBOpenDBRequest.onupgradeneeded": {
        "descr": "The onupgradeneeded property of the IDBOpenDBRequest interface is the event handler for the upgradeneeded event, triggered when a database of a bigger version number than the existing stored database is loaded.",
        "name": "IDBOpenDBRequest.onupgradeneeded",
        "params": [],
        "path": "dom/idbopendbrequest/onupgradeneeded",
        "syntax": "IDBOpenDBRequest.onupgradeneeded = function(event) { ... };",
        "type": "IndexedDB"
    },
    "IDBRequest.error": {
        "descr": "The error read-only property of the IDBRequest interface returns the error in the event of an unsuccessful request.",
        "name": "IDBRequest.error",
        "params": [],
        "path": "dom/idbrequest/error",
        "syntax": "var myError = request.error; Value A DOMError containing the relevant error. In Chrome 48+/Firefox 58+ this property returns a DOMException because DOMError has been removed from the DOM standard. The following error codes are returned under certain conditions:    Error Explanation     AbortError If you abort the transaction, then all requests still in progress receive this error.   ConstraintError If you insert data that doesn't conform to a constraint. It's an exception type for creating stores and indexes. You get this error, for example, if you try to add a new key that already exists in the record.   QuotaExceededError If you run out of disk quota and the user declined to grant you more space.   UnknownError If the operation failed for reasons unrelated to the database itself. A failure due to disk IO errors is such an example.   NoError If the request succeeds.   VersionError If you try to open a database with a version lower than the one it already has.    In addition to the error codes sent to the IDBRequest object, asynchronous operations can also raise exceptions. The list describes problems that could occur when the request is being executed, but you might also encounter other problems when the request is being made. For example, if the the request failed and the result is not available, the InvalidStateError exception is thrown. Example The following example requests a given record title, onsuccess gets the associated record from the IDBObjectStore (made available as objectStoreTitleRequest.result), updates one property of the record, and then puts the updated record back into the object store. Also included at the bottom is an onerror",
        "type": "IndexedDB"
    },
    "IDBRequest.onerror": {
        "descr": "The onerror event handler of the IDBRequest interface handles the error event, fired when a request returns an error.",
        "name": "IDBRequest.onerror",
        "params": [],
        "path": "dom/idbrequest/onerror",
        "syntax": "request.onerror = function(event) { ... };",
        "type": "IndexedDB"
    },
    "IDBRequest.onsuccess": {
        "descr": "The onsuccess event handler of the IDBRequest interface handles the success event, fired when the result of a request is successfully returned.",
        "name": "IDBRequest.onsuccess",
        "params": [],
        "path": "dom/idbrequest/onsuccess",
        "syntax": "request.onsuccess = function(event) { ... };",
        "type": "IndexedDB"
    },
    "IDBRequest.readyState": {
        "descr": "The readyState read-only property of the IDBRequest interface returns the state of the request.",
        "name": "IDBRequest.readyState",
        "params": [],
        "path": "dom/idbrequest/readystate",
        "syntax": "var currentReadyState = request.readyState; Value The IDBRequestReadyState of the request, which takes one of the following two values:    Value Meaning     pending The request is pending.   done The request is done.     Example The following example requests a given record title, onsuccess gets the associated record from the IDBObjectStore (made available as objectStoreTitleRequest.result), updates one property of the record, and then puts the updated record back into the object store in another request. The readyState",
        "type": "IndexedDB"
    },
    "IDBRequest.result": {
        "descr": "The result read-only property of the IDBRequest interface returns the result of the request. If the request failed and the result is not available, an InvalidStateError exception is thrown.",
        "name": "IDBRequest.result",
        "params": [],
        "path": "dom/idbrequest/result",
        "syntax": "var myResult = request.result; Value any Example The following example requests a given record title, onsuccess gets the associated record from the IDBObjectStore (made available as objectStoreTitleRequest.result), updates one property of the record, and then puts the updated record back into the object store. For a full working example, see our To-do Notifications app (view example live.)",
        "type": "IndexedDB"
    },
    "IDBRequest.source": {
        "descr": "The source read-only property of the IDBRequest interface returns the source of the request, such as an Index or an object store. If no source exists (such as when calling indexedDB.open), it returns null.",
        "name": "IDBRequest.source",
        "params": [],
        "path": "dom/idbrequest/source",
        "syntax": "var IDBIndex = request.source; var IDBCursor = request.source; var IDBObjectStore = request.source;  Value An object representing the source of the request, such as an IDBIndex, IDBObjectStore or IDBCursor. Example The following example requests a given record title, onsuccess gets the associated record from the IDBObjectStore (made available as objectStoreTitleRequest.result), updates one property of the record, and then puts the updated record back into the object store in another request. The source of the 2nd request is logged to the developer console. For a full working example, see our To-do Notifications app (view example live.)",
        "type": "IndexedDB"
    },
    "IDBRequest.transaction": {
        "descr": "The transaction read-only property of the IDBRequest interface returns the transaction for the request, that is, the transaction the request is being made inside.",
        "name": "IDBRequest.transaction",
        "params": [],
        "path": "dom/idbrequest/transaction",
        "syntax": "var myTransaction = request.transaction; Value An IDBTransaction. Example The following example requests a given record title, onsuccess gets the associated record from the IDBObjectStore (made available as objectStoreTitleRequest.result), updates one property of the record, and then puts the updated record back into the object store in another request. The source of the requests is logged to the developer console — both originate from the same transaction. For a full working example, see our To-do Notifications app (view example live.)",
        "type": "IndexedDB"
    },
    "IDBTransaction": {
        "descr": "The IDBTransaction interface of the IndexedDB API provides a static, asynchronous transaction on a database using event handler attributes. All reading and writing of data is done within transactions. You actually use IDBDatabase to start transactions and IDBTransaction to set the mode of the transaction (e.g. is it readonly or readwrite), and access an IDBObjectStore to make a request. You can also use it to abort transactions.",
        "name": "IDBTransaction",
        "params": [
            {
                "descr": "The database connection with which this transaction is associated.",
                "name": "IDBTransaction.db Read only"
            },
            {
                "descr": "Returns a DOMException indicating the type of error that occured when there is an unsuccessful transaction. ",
                "name": "IDBTransaction.error Read only"
            },
            {
                "descr": "The mode for isolating access to data in the object stores that are in the scope of the transaction. ",
                "name": "IDBTransaction.mode Read only"
            },
            {
                "descr": "Returns a DOMStringList of the names of IDBObjectStore objects.",
                "name": "IDBTransaction.objectStoreNames Read only"
            },
            {
                "descr": "The event handler for the abort event, fired when the transaction is aborted. ",
                "name": "IDBTransaction.onabort Read only"
            },
            {
                "descr": "The event handler for the complete event, thrown when the transaction completes successfully.",
                "name": "IDBTransaction.oncomplete Read only"
            },
            {
                "descr": "The event handler for the error event, thrown when the transaction fails to complete.",
                "name": "IDBTransaction.onerror Read only"
            },
            {
                "descr": "Rolls back all the changes to objects in the database associated with this transaction. ",
                "name": "IDBTransaction.abort"
            },
            {
                "descr": "Returns an IDBObjectStore object representing an object store that is part of the scope of this transaction.",
                "name": "IDBTransaction.objectStore"
            }
        ],
        "path": "dom/idbtransaction",
        "syntax": "readonly.  IDBTransaction.objectStoreNames Read only   Returns a DOMStringList of the names of IDBObjectStore objects.  Event handlers   IDBTransaction.onabort Read only   The event handler for the abort event, fired when the transaction is aborted. This can happen due to:  bad requests, e.g. trying to add() the same key twice, or put() with the same index key with a uniqueness constraint and there is no error handler on the request to call preventDefault() on the event, an explicit abort() call from script uncaught exception in request's success/error handler, an I/O error (actual failure to write to disk, e.g. disk detached, or other OS/hardware failure), or quota exceeded.    IDBTransaction.oncomplete",
        "type": "IndexedDB"
    },
    "IDBTransaction.ObjectStoreNames": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "IDBTransaction.ObjectStoreNames",
        "params": [],
        "path": "dom/idbtransaction/objectstorenames",
        "syntax": "var myDatabase = transactionObj.objectStoreNames; Returns A  DOMStringList of names of IDBObjectStore objects. Specification    Specification Status Comment   Indexed Database APIThe definition of 'ObjectStoreNames' in that specification. Recommendation     Indexed Database API 2.0The definition of 'ObjectStoreNames' in that specification. Recommendation      Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  48  ?   Yes  ?   35  ?        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support  48  48  ?   ?   35  ?   5.0    See also  Using IndexedDB Starting transactions: IDBDatabase  Using transactions: IDBTransaction  Setting a range of keys: IDBKeyRange  Retrieving and making changes to your data: IDBObjectStore  Using cursors: IDBCursor  Reference example: To-do Notifications (view example live.)   Edit this page on MDN",
        "type": "IndexedDB"
    },
    "IDBTransaction.abort": {
        "descr": "The abort() method of the IDBTransaction interface rolls back all the changes to objects in the database associated with this transaction.",
        "name": "IDBTransaction.abort",
        "params": [],
        "path": "dom/idbtransaction/abort",
        "syntax": "transaction.abort();",
        "type": "IndexedDB"
    },
    "IDBTransaction.db": {
        "descr": "The db read-only property of the IDBTransaction interface returns the database connection with which this transaction is associated.",
        "name": "IDBTransaction.db",
        "params": [],
        "path": "dom/idbtransaction/db",
        "syntax": "var myDatabase = transaction.db; Value An IDBDatabase object. Example In the following code snippet, we open a read/write transaction on our database and add some data to an object store. Note also the functions attached to transaction event handlers to report on the outcome of the transaction opening in the event of success or failure. At the end, we return the associated database connection using db. For a full working example, see our To-do Notifications app (view example live.)",
        "type": "IndexedDB"
    },
    "IDBTransaction.error": {
        "descr": "The IDBTransaction.error property of the IDBTransaction interface returns one of several types of error when there is an unsuccessful transaction.",
        "name": "IDBTransaction.error",
        "params": [],
        "path": "dom/idbtransaction/error",
        "syntax": "var myError = transaction.error; Value A DOMError containing the relevant error. In Chrome 48+/Firefox 58+ this property returns a DOMException because DOMError has been removed from the DOM standard. The exact error is one of serveral possibilities. It can be a reference to the same error as the request object that raised it, or a transaction failure (for example QuotaExceededError or UnknownError).",
        "type": "IndexedDB"
    },
    "IDBTransaction.mode": {
        "descr": "The mode read-only property of the IDBTransaction interface returns the current mode for accessing the data in the object stores in the scope of the transaction (i.e. is the mode to be read-only, or do you want to write to the object stores?) The default value is readonly.",
        "name": "IDBTransaction.mode",
        "params": [],
        "path": "dom/idbtransaction/mode",
        "syntax": "var myCurrentMode = IDBTransaction.mode; Value An IDBTransactionMode object defining the mode for isolating access to data in the current object stores:    Value Explanation     readonly Allows data to be read but not changed.   readwrite Allows reading and writing of data in existing data stores to be changed.   versionchange Allows any operation to be performed, including ones that delete and create object stores and indexes. This mode is for updating the version number of transactions that were started using IDBDatabase.setVersion()",
        "type": "IndexedDB"
    },
    "IDBTransaction.objectStore": {
        "descr": "The objectStore() method of the IDBTransaction interface returns an object store that has already been added to the scope of this transaction.",
        "name": "IDBTransaction.objectStore",
        "params": [
            {
                "descr": "The name of the requested object store.",
                "name": "name"
            }
        ],
        "path": "dom/idbtransaction/objectstore",
        "syntax": "var objectStore = IDBTransaction.objectStore(name);",
        "type": "IndexedDB"
    },
    "IDBTransaction.onabort": {
        "descr": "The onabort event handler of the IDBTransaction interface handles the abort event, fired, when the current transaction is aborted via the IDBTransaction.abort method.",
        "name": "IDBTransaction.onabort",
        "params": [],
        "path": "dom/idbtransaction/onabort",
        "syntax": "transaction.onabort = function(error) { ... };",
        "type": "IndexedDB"
    },
    "IDBTransaction.oncomplete": {
        "descr": "The oncomplete event handler of the IDBTransaction interface handles the complete event, fired when the transaction successfully completes.",
        "name": "IDBTransaction.oncomplete",
        "params": [],
        "path": "dom/idbtransaction/oncomplete",
        "syntax": "transaction.oncomplete = function(error) { ... };",
        "type": "IndexedDB"
    },
    "IDBTransaction.onerror": {
        "descr": "The onerror event handler of the IDBTransaction interface handles the error event, fired when a request returns an error and bubbles up to the transaction object.",
        "name": "IDBTransaction.onerror",
        "params": [],
        "path": "dom/idbtransaction/onerror",
        "syntax": "transaction.onerror = function(event) { ... };",
        "type": "IndexedDB"
    },
    "IDBVersionChangeEvent.newVersion": {
        "descr": "The newVersion read-only property of the IDBVersionChangeEvent interface returns the new version number of the database.",
        "name": "IDBVersionChangeEvent.newVersion",
        "params": [],
        "path": "dom/idbversionchangeevent/newversion",
        "syntax": "var newVersion = IDBVersionChangeEvent.newVersion Value A 64-bit integer.",
        "type": "IndexedDB"
    },
    "IDBVersionChangeEvent.oldVersion": {
        "descr": "The oldVersion read-only property of the IDBVersionChangeEvent interface returns the old version number of the database.",
        "name": "IDBVersionChangeEvent.oldVersion",
        "params": [],
        "path": "dom/idbversionchangeevent/oldversion",
        "syntax": "var oldVersion = IDBVersionChangeEvent.oldVersion Value A 64-bit integer.",
        "type": "IndexedDB"
    },
    "IDBVersionChangeEvent.version": {
        "descr": "The version property of the IDBVersionChangeEvent interface returns The new version of the database in a versionchange transaction.",
        "name": "IDBVersionChangeEvent.version",
        "params": [],
        "path": "dom/idbversionchangeevent/version",
        "syntax": "readonly attribute unsigned long long? version; Value A 64-bit integer.",
        "type": "IndexedDB"
    },
    "IDBVersionChangeRequest.setVersion": {
        "descr": "The IDBVersionChangeRequest.setVersion method updates the version of the database, returning immediately and running a versionchange transaction on the connected database in a separate thread.",
        "name": "IDBVersionChangeRequest.setVersion",
        "params": [
            {
                "descr": "The version to store in the database.",
                "name": "version"
            },
            {
                "descr": "The request to change the version of a database.",
                "name": "IDBVersionChangeRequest"
            }
        ],
        "path": "dom/idbversionchangerequest/setversion",
        "syntax": "IDBVersionChangeRequest setVersion ([TreatNullAs=EmptyString] in DOMString version);",
        "type": "IndexedDB"
    },
    "IIRFilterNode.constructor": {
        "descr": "The IIRFilterNode() constructor of the Web Audio API creates a new IIRFilterNode object which an AudioNode processor which implements a general infinite impulse response filter.",
        "name": "IIRFilterNode.constructor",
        "params": [
            {
                "descr": "A reference to an AudioContext.",
                "name": "context"
            },
            {
                "descr": "Options are as follows:   feedforward: A sequence of feedforward coefficients. ",
                "name": "options"
            }
        ],
        "path": "dom/iirfilternode/iirfilternode",
        "syntax": "var iIRFilterNode = new IIRFilterNode(context, options)",
        "type": "Audio"
    },
    "IIRFilterNode.getFrequencyResponse": {
        "descr": "The getFrequencyResponse() method of the IIRFilterNode interface takes the current filtering algorithm's settings and calculates the frequency response for frequencies specified in a specified array of frequencies.",
        "name": "IIRFilterNode.getFrequencyResponse",
        "params": [
            {
                "descr": "A Float32Array containing an array of frequencies, specified in Hertz, which you want to filter.",
                "name": "frequencyArray"
            },
            {
                "descr": "A Float32Array to receive the computed magnitudes of the freqency response for each frequency value in the frequencyArray.",
                "name": "magResponseOutput"
            },
            {
                "descr": "A Float32Array to receive the computed phase response values in radians for each frequency value in the input frequencyArray.",
                "name": "phaseResponseOutput"
            },
            {
                "descr": "The three arrays provided are not all of the same length.",
                "name": "NotSupportedError"
            }
        ],
        "path": "dom/iirfilternode/getfrequencyresponse",
        "syntax": "IIRFilterNode.getFrequencyResponse(frequencyArray, magResponseOutput, phaseResponseOutput);",
        "type": "Audio"
    },
    "IdleDeadline.didTimeout": {
        "descr": "The read-only didTimeout property on the IdleDeadline interface is a Boolean value which indicates whether or not the idle callback is being invoked because the timeout interval specified when Window.requestIdleCallback() was called has expired.",
        "name": "IdleDeadline.didTimeout",
        "params": [],
        "path": "dom/idledeadline/didtimeout",
        "syntax": "var timedOut = IdleDeadline.didTimeout; Value A Boolean which is true if the callback is running due to the callback's timeout period elapsing or false if the callback is running because the user agent is idle and is offering time to the callback. Example See our complete example in the article Cooperative Scheduling of Background Tasks API. Specifications    Specification Status Comment   Cooperative Scheduling of Background Tasks Proposed Recommendation      Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  47  No  55   55   53Disabled   Disabled From version 53: this feature is behind the dom.requestIdleCallback.enabled preference (needs to be set to true). To change preferences in Firefox, visit about:config.    No  34  No       Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support  47  47  No  55   55   53Disabled   Disabled From version 53: this feature is behind the dom.requestIdleCallback.enabled",
        "type": "Scheduling"
    },
    "IdleDeadline.timeRemaining": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "IdleDeadline.timeRemaining",
        "params": [],
        "path": "dom/idledeadline/timeremaining",
        "syntax": "timeRemaining = IdleDeadline.timeRemaining();",
        "type": "Scheduling"
    },
    "ImageBitmap.close": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ImageBitmap.close",
        "params": [],
        "path": "dom/imagebitmap/close",
        "syntax": "void ImageBitmap.close()",
        "type": "Canvas"
    },
    "ImageBitmapRenderingContext.transferFromImageBitmap": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ImageBitmapRenderingContext.transferFromImageBitmap",
        "params": [
            {
                "descr": "An ImageBitmap object to transfer.",
                "name": "bitmap"
            }
        ],
        "path": "dom/imagebitmaprenderingcontext/transferfromimagebitmap",
        "syntax": "void ImageBitmapRenderingContext.transferFromImageBitmap(bitmap)",
        "type": "Canvas"
    },
    "ImageCapture.getPhotoCapabilities": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ImageCapture.getPhotoCapabilities",
        "params": [],
        "path": "dom/imagecapture/getphotocapabilities",
        "syntax": "var promise = ImageCapture.getPhotoCapabilities()",
        "type": "Media Streams"
    },
    "ImageCapture.getPhotoSettings": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ImageCapture.getPhotoSettings",
        "params": [],
        "path": "dom/imagecapture/getphotosettings",
        "syntax": "var promise = ImageCapture.getPhotoSettings()",
        "type": "Media Streams"
    },
    "ImageCapture.grabFrame": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ImageCapture.grabFrame",
        "params": [],
        "path": "dom/imagecapture/grabframe",
        "syntax": "ImageCapture.grabFrame().then(function(imageBitmap) { ... })",
        "type": "Media Streams"
    },
    "ImageCapture.takePhoto": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ImageCapture.takePhoto",
        "params": [
            {
                "descr": "An object that sets options for the photo to be taken. ",
                "name": "photoSettings Optional"
            }
        ],
        "path": "dom/imagecapture/takephoto",
        "syntax": "var promise = ImageCapture.takePhoto(photoSettings)",
        "type": "Media Streams"
    },
    "ImageData.constructor": {
        "descr": "The ImageData() constructor returns a newly instantiated ImageData object built from the typed array given and having the specified width and height.",
        "name": "ImageData.constructor",
        "params": [
            {
                "descr": "A Uint8ClampedArray containing the underlying pixel representation of the image. ",
                "name": "array Optional"
            },
            {
                "descr": "An unsigned long representing the width of the image.",
                "name": "width"
            },
            {
                "descr": "An unsigned long representing the height of the image. ",
                "name": "height"
            },
            {
                "descr": "Thrown if array is specified, but its length is not a multiple of (4 * width) or (4 * width * height).",
                "name": "IndexSizeError"
            }
        ],
        "path": "dom/imagedata/imagedata",
        "syntax": "new ImageData(array, width [, height]);\n or  new ImageData(width, height);",
        "type": "Canvas"
    },
    "ImageData.data": {
        "descr": "The readonly ImageData.data property returns a Uint8ClampedArray that contains the ImageData object's pixel data. Data is stored as a one-dimensional array in the RGBA order, with integer values between 0 and 255 (inclusive).",
        "name": "ImageData.data",
        "params": [],
        "path": "dom/imagedata/data",
        "syntax": "imageData.data  Examples Getting an ImageData object's pixel data This example creates an ImageData object that is 100 pixels wide and 100 pixels tall, making 10,000 pixels in all. The data array stores four values for each pixel, making 4 x 10,000, or 40,000 values in all. let imageData = new ImageData(100, 100);\n or  console.log(imageData.data);\n or  // Uint8ClampedArray[40000] console.log(imageData.data.length);\n or  // 40000);",
        "type": "Canvas"
    },
    "ImageData.height": {
        "descr": "The readonly ImageData.height property returns the number of rows in the ImageData object.",
        "name": "ImageData.height",
        "params": [],
        "path": "dom/imagedata/height",
        "syntax": "imageData.height  Example This example creates an ImageData object that is 200 pixels wide and 100 pixels tall. Thus, the height property is 100. let imageData = new ImageData(200, 100);\n or  console.log(imageData.height);\n or  // 100);",
        "type": "Canvas"
    },
    "ImageData.width": {
        "descr": "The readonly ImageData.width property returns the number of pixels per row in the ImageData object.",
        "name": "ImageData.width",
        "params": [],
        "path": "dom/imagedata/width",
        "syntax": "imageData.width  Example This example creates an ImageData object that is 200 pixels wide and 100 pixels tall. Thus, the width property is 200. let imageData = new ImageData(200, 100);\n or  console.log(imageData.width);\n or  // 200);",
        "type": "Canvas"
    },
    "IndexedDB API: Basic Concepts Behind IndexedDB": {
        "descr": "IndexedDB is a way for you to persistently store data inside a user's browser. Because it lets you create web applications with rich query abilities regardless of network availability, these applications can work both online and offline. IndexedDB is useful for applications that store a large amount of data (for example, a catalog of DVDs in a lending library) and applications that don't need persistent internet connectivity to work (for example, mail clients, to-do lists, and notepads).",
        "name": "IndexedDB API: Basic Concepts Behind IndexedDB",
        "params": [
            {
                "descr": ". An origin is the domain, application layer protocol, and port of a URL of the document where the script is being executed. ",
                "name": "IndexedDB adheres to a same-origin policy"
            },
            {
                "descr": "A repository of information, typically comprising one or more object stores. ",
                "name": "database"
            },
            {
                "descr": "In Firefox, IndexedDB used to be durable, meaning that in a readwrite transaction IDBTransaction.oncomplete was fired only when all data was guaranteed to have been flushed to disk. ",
                "name": "durable"
            },
            {
                "descr": "The mechanism by which data is stored in the database. ",
                "name": "object store"
            },
            {
                "descr": "When a database is first created, its version is the integer 1. ",
                "name": "version"
            },
            {
                "descr": "An operation created by opening a database. ",
                "name": "database connection"
            },
            {
                "descr": "An atomic set of data-access and data-modification operations on a particular database. ",
                "name": "transaction"
            },
            {
                "descr": "The operation by which reading and writing on a database is done. ",
                "name": "request"
            },
            {
                "descr": "An index is a specialized object store for looking up records in another object store, called the referenced object store. ",
                "name": "index"
            },
            {
                "descr": "A data value by which stored values are organized and retrieved in the object store. ",
                "name": "key"
            },
            {
                "descr": "A mechanism for producing new keys in an ordered sequence. ",
                "name": "key generator"
            },
            {
                "descr": "A key that is stored as part of the stored value. ",
                "name": "in-line key"
            },
            {
                "descr": "A key that is stored separately from the value being stored.",
                "name": "out-of-line key"
            },
            {
                "descr": "Defines where the browser should extract the key from in the object store or index. ",
                "name": "key path"
            },
            {
                "descr": "Each record has a value, which could include anything that can be expressed in JavaScript, including boolean, number, string, date, object, array, regexp, undefined, and null. ",
                "name": "value"
            }
        ],
        "path": "dom/indexeddb_api/basic_concepts_behind_indexeddb",
        "syntax": "onsuccess and onerror properties, and you can call addEventListener()",
        "type": "IndexedDB"
    },
    "IndexedDB API: Browser storage limits and eviction criteria": {
        "descr": "Note: The information below should be fairly accurate for most modern browsers, but browser specifics are called out where known. Opera and Chrome should behave the same in all cases. Opera Mini (still presto-based, server-side rendering) doesn't store any data on the client.",
        "name": "IndexedDB API: Browser storage limits and eviction criteria",
        "params": [],
        "path": "dom/indexeddb_api/browser_storage_limits_and_eviction_criteria",
        "syntax": "StorageManager.persist()",
        "type": "IndexedDB"
    },
    "IndexedDB API: Using IndexedDB": {
        "descr": "IndexedDB is a way for you to persistently store data inside a user's browser. Because it lets you create web applications with rich query abilities regardless of network availability, your applications can work both online and offline.",
        "name": "IndexedDB API: Using IndexedDB",
        "params": [],
        "path": "dom/indexeddb_api/using_indexeddb",
        "syntax": "autoIncrement flag when creating the object store would enable the key generator for that object store. By default this flag is not set. With the key generator, the key would be generated automatically as you add the value to the object store. The current number of a key generator is always set to 1 when the object store for that key generator is first created. Basically the newly auto-generated key is increased by 1 based on the previous key. The current number for a key generator never decreases, other than as a result of database operations being reverted, for example, the database transaction is aborted. Therefore deleting a record or even clearing all records from an object store never affects the object store's key generator. We can create another object store with the key generator as below: // Open the indexedDB. var request = indexedDB.open(dbName, 3);\n or  request.onupgradeneeded = function (event) { var db = event.target.result; // Create another object store called \"names\" with the autoIncrement flag set as true. var objStore = db.createObjectStore(\"names\", { autoIncrement : true });\n or  // Because the \"names\" object store has the key generator, the key for the name value is generated automatically. // The added records would be like: // key : 1 => value : \"Bill\" // key : 2 => value : \"Donna\" customerData.forEach(function(customer) { objStore.add(customer.name);\n or  });\n or  };);",
        "type": "IndexedDB"
    },
    "Infinity": {
        "descr": "The global Infinity property is a numeric value representing infinity.",
        "name": "Infinity",
        "params": [],
        "path": "javascript/global_objects/infinity",
        "syntax": "Infinity  Description Infinity is a property of the global object, or in other words, a variable in global scope. The initial value of Infinity is Number.POSITIVE_INFINITY. The value Infinity (positive infinity) is greater than any other number. Mathematically, this value behaves the same as infinity; for example, any positive number multiplied by Infinity",
        "type": "Global Objects"
    },
    "InputDeviceCapabilities.constructor": {
        "descr": "The InputDeviceCapabilities() constructor creates a new InputDeviceCapabilities object provides information about the physical device responsible for generating a touch event.",
        "name": "InputDeviceCapabilities.constructor",
        "params": [
            {
                "descr": "A dictionary object containing a set of device capabilities. ",
                "name": "InputDeviceCapabilitiesInit Optional"
            }
        ],
        "path": "dom/inputdevicecapabilities/inputdevicecapabilities",
        "syntax": "var inputDeviceCapabilities = new InputDeviceCapabilities([InputDeviceCapabilitiesInit])",
        "type": "Miscellaneous"
    },
    "InputDeviceCapabilities.firesTouchEvents": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "InputDeviceCapabilities.firesTouchEvents",
        "params": [],
        "path": "dom/inputdevicecapabilities/firestouchevents",
        "syntax": "var boolean = InputDeviceCapabilities.firesTouchEvents Returns A Boolean Example myButton.addEventListener('mousedown', function(e) { if (!e.sourceCapabilities.firesTouchEvents) myButton.classList.add(\"pressed\");\n or  });",
        "type": "Events"
    },
    "InputEvent.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "InputEvent.constructor",
        "params": [
            {
                "descr": "Is a DOMString representing the name of the event.",
                "name": "typeArg"
            }
        ],
        "path": "dom/inputevent/inputevent",
        "syntax": "event = new InputEvent(typeArg, inputEventInit);",
        "type": "Events"
    },
    "InputEvent.getTargetRanges": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "InputEvent.getTargetRanges",
        "params": [],
        "path": "dom/inputevent/gettargetranges",
        "syntax": "var staticRanges[] = inputEvent.getTargetRanges()",
        "type": "Events"
    },
    "InputEvent.isComposing": {
        "descr": "The InputEvent.isComposing read-only property returns a Boolean value indicating if the event is fired after compositionstart and before compositionend.",
        "name": "InputEvent.isComposing",
        "params": [],
        "path": "dom/inputevent/iscomposing",
        "syntax": "var bool = event.isComposing; Example var inputEvent = new InputEvent(\"syntheticInput\", false);\n or  console.log(inputEvent.isComposing);\n or  // return false);",
        "type": "Events"
    },
    "InstallEvent.activeWorker": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "InstallEvent.activeWorker",
        "params": [],
        "path": "dom/installevent/activeworker",
        "syntax": "var myActiveWorker = event.activeWorker Value A ServiceWorker object. Examples self.addEventListener('install', function(event) { var myActiveWorker = event.activeWorker; });",
        "type": "Web Workers"
    },
    "InstallEvent.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "InstallEvent.constructor",
        "params": [
            {
                "descr": "The type of the event.",
                "name": "type"
            },
            {
                "descr": "An options object containing any custom settings that you want to apply to the event object. ",
                "name": "init Optional"
            }
        ],
        "path": "dom/installevent/installevent",
        "syntax": "var myInstallEvent = new InstallEvent(type, init);",
        "type": "Service Workers"
    },
    "Int16Array": {
        "descr": "The Int16Array typed array represents an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
        "name": "Int16Array",
        "params": [
            {
                "descr": "Returns a number value of the element size. ",
                "name": "Int16Array.BYTES_PER_ELEMENT"
            },
            {
                "descr": "Static length property whose value is 0. ",
                "name": "Int16Array.length"
            },
            {
                "descr": "Returns the string value of the constructor name. ",
                "name": "Int16Array.name"
            },
            {
                "descr": "Prototype for the TypedArray objects.",
                "name": "Int16Array.prototype"
            },
            {
                "descr": "Creates a new Int16Array from an array-like or iterable object. ",
                "name": "Int16Array.from()"
            },
            {
                "descr": "Creates a new Int16Array with a variable number of arguments. ",
                "name": "Int16Array.of()"
            },
            {
                "descr": "Returns the function that created an instance's prototype. ",
                "name": "Int16Array.prototype.constructor"
            },
            {
                "descr": "Returns the ArrayBuffer referenced by the Int16Array Fixed at construction time and thus read only.",
                "name": "Int16Array.prototype.buffer Read only"
            },
            {
                "descr": "Returns the length (in bytes) of the Int16Array from the start of its ArrayBuffer. ",
                "name": "Int16Array.prototype.byteLength Read only"
            },
            {
                "descr": "Returns the offset (in bytes) of the Int16Array from the start of its ArrayBuffer. ",
                "name": "Int16Array.prototype.byteOffset Read only"
            },
            {
                "descr": "Returns the number of elements hold in the Int16Array. ",
                "name": "Int16Array.prototype.length Read only"
            },
            {
                "descr": "Copies a sequence of array elements within the array. ",
                "name": "Int16Array.prototype.copyWithin()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the key/value pairs for each index in the array. ",
                "name": "Int16Array.prototype.entries()"
            },
            {
                "descr": "Tests whether all elements in the array pass the test provided by a function. ",
                "name": "Int16Array.prototype.every()"
            },
            {
                "descr": "Fills all the elements of an array from a start index to an end index with a static value. ",
                "name": "Int16Array.prototype.fill()"
            },
            {
                "descr": "Creates a new array with all of the elements of this array for which the provided filtering function returns true. ",
                "name": "Int16Array.prototype.filter()"
            },
            {
                "descr": "Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found. ",
                "name": "Int16Array.prototype.find()"
            },
            {
                "descr": "Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found. ",
                "name": "Int16Array.prototype.findIndex()"
            },
            {
                "descr": "Calls a function for each element in the array. ",
                "name": "Int16Array.prototype.forEach()"
            },
            {
                "descr": "Determines whether a typed array includes a certain element, returning true or false as appropriate. ",
                "name": "Int16Array.prototype.includes()"
            },
            {
                "descr": "Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. ",
                "name": "Int16Array.prototype.indexOf()"
            },
            {
                "descr": "Joins all elements of an array into a string. ",
                "name": "Int16Array.prototype.join()"
            },
            {
                "descr": "Returns a new Array Iterator that contains the keys for each index in the array. ",
                "name": "Int16Array.prototype.keys()"
            },
            {
                "descr": "Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found. ",
                "name": "Int16Array.prototype.lastIndexOf()"
            },
            {
                "descr": "Creates a new array with the results of calling a provided function on every element in this array. ",
                "name": "Int16Array.prototype.map()"
            },
            {
                "descr": "Former non-standard version of Int16Array.prototype.copyWithin().",
                "name": "Int16Array.prototype.move() Unimplemented"
            },
            {
                "descr": "Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value. ",
                "name": "Int16Array.prototype.reduce()"
            },
            {
                "descr": "Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value. ",
                "name": "Int16Array.prototype.reduceRight()"
            },
            {
                "descr": "Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first. ",
                "name": "Int16Array.prototype.reverse()"
            },
            {
                "descr": "Stores multiple values in the typed array, reading input values from a specified array.",
                "name": "Int16Array.prototype.set()"
            },
            {
                "descr": "Extracts a section of an array and returns a new array. ",
                "name": "Int16Array.prototype.slice()"
            },
            {
                "descr": "Returns true if at least one element in this array satisfies the provided testing function. ",
                "name": "Int16Array.prototype.some()"
            },
            {
                "descr": "Sorts the elements of an array in place and returns the array. ",
                "name": "Int16Array.prototype.sort()"
            },
            {
                "descr": "Returns a new Int16Array from the given start and end element index.",
                "name": "Int16Array.prototype.subarray()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array. ",
                "name": "Int16Array.prototype.values()"
            },
            {
                "descr": "Returns a localized string representing the array and its elements. ",
                "name": "Int16Array.prototype.toLocaleString()"
            },
            {
                "descr": "Returns a string representing the array and its elements. ",
                "name": "Int16Array.prototype.toString()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array.",
                "name": "Int16Array.prototype[@@iterator]()"
            }
        ],
        "path": "javascript/global_objects/int16array",
        "syntax": "new Int16Array();\n or  // new in ES2017 new Int16Array(length);\n or  new Int16Array(typedArray);\n or  new Int16Array(object);\n or  new Int16Array(buffer [, byteOffset [, length]]);",
        "type": "Global Objects"
    },
    "Int32Array": {
        "descr": "The Int32Array typed array represents an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
        "name": "Int32Array",
        "params": [
            {
                "descr": "Returns a number value of the element size. ",
                "name": "Int32Array.BYTES_PER_ELEMENT"
            },
            {
                "descr": "Static length property whose value is 0. ",
                "name": "Int32Array.length"
            },
            {
                "descr": "Returns the string value of the constructor name. ",
                "name": "Int32Array.name"
            },
            {
                "descr": "Prototype for the TypedArray objects.",
                "name": "Int32Array.prototype"
            },
            {
                "descr": "Creates a new Int32Array from an array-like or iterable object. ",
                "name": "Int32Array.from()"
            },
            {
                "descr": "Creates a new Int32Array with a variable number of arguments. ",
                "name": "Int32Array.of()"
            },
            {
                "descr": "Returns the function that created an instance's prototype. ",
                "name": "Int32Array.prototype.constructor"
            },
            {
                "descr": "Returns the ArrayBuffer referenced by the Int32Array Fixed at construction time and thus read only.",
                "name": "Int32Array.prototype.buffer Read only"
            },
            {
                "descr": "Returns the length (in bytes) of the Int32Array from the start of its ArrayBuffer. ",
                "name": "Int32Array.prototype.byteLength Read only"
            },
            {
                "descr": "Returns the offset (in bytes) of the Int32Array from the start of its ArrayBuffer. ",
                "name": "Int32Array.prototype.byteOffset Read only"
            },
            {
                "descr": "Returns the number of elements hold in the Int32Array. ",
                "name": "Int32Array.prototype.length Read only"
            },
            {
                "descr": "Copies a sequence of array elements within the array. ",
                "name": "Int32Array.prototype.copyWithin()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the key/value pairs for each index in the array. ",
                "name": "Int32Array.prototype.entries()"
            },
            {
                "descr": "Tests whether all elements in the array pass the test provided by a function. ",
                "name": "Int32Array.prototype.every()"
            },
            {
                "descr": "Fills all the elements of an array from a start index to an end index with a static value. ",
                "name": "Int32Array.prototype.fill()"
            },
            {
                "descr": "Creates a new array with all of the elements of this array for which the provided filtering function returns true. ",
                "name": "Int32Array.prototype.filter()"
            },
            {
                "descr": "Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found. ",
                "name": "Int32Array.prototype.find()"
            },
            {
                "descr": "Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found. ",
                "name": "Int32Array.prototype.findIndex()"
            },
            {
                "descr": "Calls a function for each element in the array. ",
                "name": "Int32Array.prototype.forEach()"
            },
            {
                "descr": "Determines whether a typed array includes a certain element, returning true or false as appropriate. ",
                "name": "Int32Array.prototype.includes()"
            },
            {
                "descr": "Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. ",
                "name": "Int32Array.prototype.indexOf()"
            },
            {
                "descr": "Joins all elements of an array into a string. ",
                "name": "Int32Array.prototype.join()"
            },
            {
                "descr": "Returns a new Array Iterator that contains the keys for each index in the array. ",
                "name": "Int32Array.prototype.keys()"
            },
            {
                "descr": "Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found. ",
                "name": "Int32Array.prototype.lastIndexOf()"
            },
            {
                "descr": "Creates a new array with the results of calling a provided function on every element in this array. ",
                "name": "Int32Array.prototype.map()"
            },
            {
                "descr": "Former non-standard version of Int32Array.prototype.copyWithin().",
                "name": "Int32Array.prototype.move() Unimplemented"
            },
            {
                "descr": "Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value. ",
                "name": "Int32Array.prototype.reduce()"
            },
            {
                "descr": "Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value. ",
                "name": "Int32Array.prototype.reduceRight()"
            },
            {
                "descr": "Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first. ",
                "name": "Int32Array.prototype.reverse()"
            },
            {
                "descr": "Stores multiple values in the typed array, reading input values from a specified array.",
                "name": "Int32Array.prototype.set()"
            },
            {
                "descr": "Extracts a section of an array and returns a new array. ",
                "name": "Int32Array.prototype.slice()"
            },
            {
                "descr": "Returns true if at least one element in this array satisfies the provided testing function. ",
                "name": "Int32Array.prototype.some()"
            },
            {
                "descr": "Sorts the elements of an array in place and returns the array. ",
                "name": "Int32Array.prototype.sort()"
            },
            {
                "descr": "Returns a new Int32Array from the given start and end element index.",
                "name": "Int32Array.prototype.subarray()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array. ",
                "name": "Int32Array.prototype.values()"
            },
            {
                "descr": "Returns a localized string representing the array and its elements. ",
                "name": "Int32Array.prototype.toLocaleString()"
            },
            {
                "descr": "Returns a string representing the array and its elements. ",
                "name": "Int32Array.prototype.toString()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array.",
                "name": "Int32Array.prototype[@@iterator]()"
            }
        ],
        "path": "javascript/global_objects/int32array",
        "syntax": "new Int32Array();\n or  // new in ES2017 new Int32Array(length);\n or  new Int32Array(typedArray);\n or  new Int32Array(object);\n or  new Int32Array(buffer [, byteOffset [, length]]);",
        "type": "Global Objects"
    },
    "Int8Array": {
        "descr": "The Int8Array typed array represents an array of twos-complement 8-bit signed integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
        "name": "Int8Array",
        "params": [
            {
                "descr": "Returns a number value of the element size. ",
                "name": "Int8Array.BYTES_PER_ELEMENT"
            },
            {
                "descr": "Static length property whose value is 0. ",
                "name": "Int8Array.length"
            },
            {
                "descr": "Returns the string value of the constructor name. ",
                "name": "Int8Array.name"
            },
            {
                "descr": "Prototype for the TypedArray objects.",
                "name": "Int8Array.prototype"
            },
            {
                "descr": "Creates a new Int8Array from an array-like or iterable object. ",
                "name": "Int8Array.from()"
            },
            {
                "descr": "Creates a new Int8Array with a variable number of arguments. ",
                "name": "Int8Array.of()"
            },
            {
                "descr": "Returns the function that created an instance's prototype. ",
                "name": "Int8Array.prototype.constructor"
            },
            {
                "descr": "Returns the ArrayBuffer referenced by the Int8Array Fixed at construction time and thus read only.",
                "name": "Int8Array.prototype.buffer Read only"
            },
            {
                "descr": "Returns the length (in bytes) of the Int8Array from the start of its ArrayBuffer. ",
                "name": "Int8Array.prototype.byteLength Read only"
            },
            {
                "descr": "Returns the offset (in bytes) of the Int8Array from the start of its ArrayBuffer. ",
                "name": "Int8Array.prototype.byteOffset Read only"
            },
            {
                "descr": "Returns the number of elements hold in the Int8Array. ",
                "name": "Int8Array.prototype.length Read only"
            },
            {
                "descr": "Copies a sequence of array elements within the array. ",
                "name": "Int8Array.prototype.copyWithin()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the key/value pairs for each index in the array. ",
                "name": "Int8Array.prototype.entries()"
            },
            {
                "descr": "Tests whether all elements in the array pass the test provided by a function. ",
                "name": "Int8Array.prototype.every()"
            },
            {
                "descr": "Fills all the elements of an array from a start index to an end index with a static value. ",
                "name": "Int8Array.prototype.fill()"
            },
            {
                "descr": "Creates a new array with all of the elements of this array for which the provided filtering function returns true. ",
                "name": "Int8Array.prototype.filter()"
            },
            {
                "descr": "Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found. ",
                "name": "Int8Array.prototype.find()"
            },
            {
                "descr": "Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found. ",
                "name": "Int8Array.prototype.findIndex()"
            },
            {
                "descr": "Calls a function for each element in the array. ",
                "name": "Int8Array.prototype.forEach()"
            },
            {
                "descr": "Determines whether a typed array includes a certain element, returning true or false as appropriate. ",
                "name": "Int8Array.prototype.includes()"
            },
            {
                "descr": "Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. ",
                "name": "Int8Array.prototype.indexOf()"
            },
            {
                "descr": "Joins all elements of an array into a string. ",
                "name": "Int8Array.prototype.join()"
            },
            {
                "descr": "Returns a new Array Iterator that contains the keys for each index in the array. ",
                "name": "Int8Array.prototype.keys()"
            },
            {
                "descr": "Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found. ",
                "name": "Int8Array.prototype.lastIndexOf()"
            },
            {
                "descr": "Creates a new array with the results of calling a provided function on every element in this array. ",
                "name": "Int8Array.prototype.map()"
            },
            {
                "descr": "Former non-standard version of Int8Array.prototype.copyWithin().",
                "name": "Int8Array.prototype.move() Unimplemented"
            },
            {
                "descr": "Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value. ",
                "name": "Int8Array.prototype.reduce()"
            },
            {
                "descr": "Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value. ",
                "name": "Int8Array.prototype.reduceRight()"
            },
            {
                "descr": "Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first. ",
                "name": "Int8Array.prototype.reverse()"
            },
            {
                "descr": "Stores multiple values in the typed array, reading input values from a specified array.",
                "name": "Int8Array.prototype.set()"
            },
            {
                "descr": "Extracts a section of an array and returns a new array. ",
                "name": "Int8Array.prototype.slice()"
            },
            {
                "descr": "Returns true if at least one element in this array satisfies the provided testing function. ",
                "name": "Int8Array.prototype.some()"
            },
            {
                "descr": "Sorts the elements of an array in place and returns the array. ",
                "name": "Int8Array.prototype.sort()"
            },
            {
                "descr": "Returns a new Int8Array from the given start and end element index.",
                "name": "Int8Array.prototype.subarray()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array. ",
                "name": "Int8Array.prototype.values()"
            },
            {
                "descr": "Returns a localized string representing the array and its elements. ",
                "name": "Int8Array.prototype.toLocaleString()"
            },
            {
                "descr": "Returns a string representing the array and its elements. ",
                "name": "Int8Array.prototype.toString()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array.",
                "name": "Int8Array.prototype[@@iterator]()"
            }
        ],
        "path": "javascript/global_objects/int8array",
        "syntax": "new Int8Array();\n or  // new in ES2017 new Int8Array(length);\n or  new Int8Array(typedArray);\n or  new Int8Array(object);\n or  new Int8Array(buffer [, byteOffset [, length]]);",
        "type": "Global Objects"
    },
    "Intersection Observer API": {
        "descr": "Historically, detecting visibility of an element, or the relative visibility of two elements in relation to each other, has been a difficult task for which solutions have been unreliable and prone to causing the browser and the sites the user is accessing to become sluggish. Unfortunately, as the web has matured, the need for this kind of information has grown. Intersection information is needed for many reasons, such as:",
        "name": "Intersection Observer API",
        "params": [
            {
                "descr": "The element that is used as the viewport for checking visiblity of the target. ",
                "name": "root"
            },
            {
                "descr": "Margin around the root. Can have values similar to the CSS margin property, e.g. ",
                "name": "rootMargin"
            },
            {
                "descr": "Either a single number or an array of numbers which indicate at what percentage of the target's visibility the observer's callback should be executed. ",
                "name": "threshold"
            },
            {
                "descr": "The primary interface for the Intersection Observer API. ",
                "name": "IntersectionObserver"
            },
            {
                "descr": "Describes the intersection between the target element and its root container at a specific moment of transition. ",
                "name": "IntersectionObserverEntry"
            },
            {
                "descr": "A constant which indicates how many thresholds we want to have between a visibility ratio of 0.0 and 1.0.",
                "name": "numSteps"
            },
            {
                "descr": "This variable will be used to record what the visibility ratio was the last time a threshold was crossed; this will let us figure out whether the target element is becoming more or less visible.",
                "name": "prevRatio"
            },
            {
                "descr": "A string defining a color we'll apply to the target element when the visibility ratio is increasing. ",
                "name": "increasingColor"
            },
            {
                "descr": "Similarly, this is a string defining a color we'll apply when the visibility ratio is decreasing.",
                "name": "decreasingColor"
            }
        ],
        "path": "dom/intersection_observer_api",
        "syntax": "Element.getBoundingClientRect()",
        "type": "Intersection Observer"
    },
    "Intersection Observer API: Timing element visibility": {
        "descr": "The Intersection Observer API makes it easy to be asynchronously notified when elements of interest become more or less obscured by a shared ancestor node or element, including the Document itself. In this article, we'll build a mock blog which has a number of ads interspersed among the contents of the page, then use the Intersection Observer API to track how much time each ad is visible to the user. When an ad exceeds one minute of visible time, it will be replaced with a new one.",
        "name": "Intersection Observer API: Timing element visibility",
        "params": [
            {
                "descr": "A reference to the <main> element's HTMLElement object in the DOM. ",
                "name": "contentBox"
            },
            {
                "descr": "Each article is given a unique ID number; this variable tracks the next ID to use, starting with 1.",
                "name": "nextArticleID"
            },
            {
                "descr": "A Set which we'll use to track the ads currently visible on the screen.",
                "name": "visibleAds"
            },
            {
                "descr": "Used to temporarily store the list of visible ads while the document is not visible (for example, if the user has tabbed to another page).",
                "name": "previouslyVisibleAds"
            },
            {
                "descr": "Will hold our IntersectionObserver used to track the intersection between the ads and the <main> element's bounds.",
                "name": "adObserver"
            },
            {
                "descr": "Used to store the interval ID returned by setInterval(). ",
                "name": "refreshIntervalID"
            },
            {
                "descr": "The time in milliseconds, relative to the time at which the document was created, at which the ad's visibility count was last updated, or the ad last became visible. ",
                "name": "lastViewStarted"
            },
            {
                "descr": "The total number of milliseconds the ad has been visible.",
                "name": "totalViewTime"
            },
            {
                "descr": "This will be set to the element that represents the ad. ",
                "name": "adBox"
            },
            {
                "descr": "Will hold the <h2> element representing the ad's title.",
                "name": "title"
            },
            {
                "descr": "Will hold the <p> representing the ad's body text.",
                "name": "body"
            },
            {
                "descr": "Will hold the <div> element which contains the time the ad has been visible so far.",
                "name": "timerElem"
            }
        ],
        "path": "dom/intersection_observer_api/timing_element_visibility",
        "syntax": "Document itself. In this article, we'll build a mock blog which has a number of ads interspersed among the contents of the page, then use the Intersection Observer API to track how much time each ad is visible to the user. When an ad exceeds one minute of visible time, it will be replaced with a new one. Although many aspects of this example will not match real world usage (in particular, the articles all have the same text and aren't loaded from a database, and there are just a handful of simple text-only ads that are selected from an array), this should provide enough understanding of the API to quickly learn how to apply the Intersection Observer API to your own site.",
        "type": "Performance"
    },
    "IntersectionObserver": {
        "descr": "The IntersectionObserver interface of the Intersection Observer API provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's viewport. The ancestor element or viewport is referred to as the root.",
        "name": "IntersectionObserver",
        "params": [
            {
                "descr": "Creates a new IntersectionObserver object which will execute a specified callback function when it detects that a target element's visibility has crossed one or more thresholds.",
                "name": "IntersectionObserver.IntersectionObserver()"
            },
            {
                "descr": "A specific ancestor of the target element being observed. ",
                "name": "IntersectionObserver.root Read only"
            },
            {
                "descr": "An offset rectangle applied to the root's bounding box when calculating intersections, effectively shrinking or growing the root for calculation purposes. ",
                "name": "IntersectionObserver.rootMargin Read only"
            },
            {
                "descr": "A list of thresholds, sorted in increasing numeric order, where each threshold is a ratio of intersection area to bounding box area of an observed target. ",
                "name": "IntersectionObserver.thresholds Read only"
            },
            {
                "descr": "Stops the IntersectionObserver object from observing any target.",
                "name": "IntersectionObserver.disconnect()"
            },
            {
                "descr": "Tells the IntersectionObserver a target element to observe.",
                "name": "IntersectionObserver.observe()"
            },
            {
                "descr": "Returns an array of IntersectionObserverEntry objects for all observed targets and stops observing all of them.",
                "name": "IntersectionObserver.takeRecords()"
            },
            {
                "descr": "Tells the IntersectionObserver to stop observing a particular target element.",
                "name": "IntersectionObserver.unobserve()"
            },
            {
                "descr": "Disabled From version 53 until version 55 (exclusive): this feature is behind the dom.IntersectionObserver.enabled preference (needs to be set to true). ",
                "name": "Examples   var intersectionObserver = new IntersectionObserver(function(entries) { // If intersectionRatio is 0, the target is out of view // and we do not need to do anything. if (entries[0].intersectionRatio <= 0) return; loadItems(10); console.log('Loaded new items'); }); // start observing intersectionObserver.observe(document.querySelector('.scrollerFooter')); Specifications    Specification Status Comment   Intersection Observer Working Draft      Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari     Basic support   51  15  55   55  53 — 55Disabled"
            }
        ],
        "path": "dom/intersectionobserver",
        "syntax": "IntersectionObserver interface of the Intersection Observer API provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's viewport. The ancestor element or viewport is referred to as the root. When an IntersectionObserver is created, it's configured to watch for given ratios of visibility within the root. The configuration cannot be changed once the IntersectionObserver is created, so a given observer object is only useful for watching for specific changes in degree of visibility; however, you can watch multiple target elements with the same observer. Constructor  IntersectionObserver.IntersectionObserver()",
        "type": "Intersection Observer"
    },
    "IntersectionObserver.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "IntersectionObserver.constructor",
        "params": [
            {
                "descr": "A function which is called when the percentage of the target element is visible crosses a threshold. ",
                "name": "callback"
            },
            {
                "descr": "The IntersectionObserver for which the callback is being invoked.",
                "name": "observer"
            },
            {
                "descr": "An optional object which customizes the observer. ",
                "name": "options Optional"
            },
            {
                "descr": "A string which specifies a set of offsets to add to the root's bounding_box when calculating intersections, effectively shrinking or growing the root for calculation purposes. ",
                "name": "rootMargin"
            },
            {
                "descr": "Either a single number or an array of numbers between 0.0 and 1.0, specifying a ratio of intersection area to total bounding box area for the observed target. ",
                "name": "threshold"
            },
            {
                "descr": "The specified rootMargin is invalid.",
                "name": "SyntaxError"
            },
            {
                "descr": "One or more of the values in threshold is outside the range 0.0 to 1.0.",
                "name": "RangeError"
            }
        ],
        "path": "dom/intersectionobserver/intersectionobserver",
        "syntax": "IntersectionObserver()",
        "type": "Intersection Observer"
    },
    "IntersectionObserver.disconnect": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "IntersectionObserver.disconnect",
        "params": [],
        "path": "dom/intersectionobserver/disconnect",
        "syntax": "IntersectionObserver method disconnect()",
        "type": "Intersection Observer"
    },
    "IntersectionObserver.observe": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "IntersectionObserver.observe",
        "params": [
            {
                "descr": "An element whose visibility within the root is to be monitored. ",
                "name": "targetElement"
            }
        ],
        "path": "dom/intersectionobserver/observe",
        "syntax": "IntersectionObserver method observe()",
        "type": "Intersection Observer"
    },
    "IntersectionObserver.root": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "IntersectionObserver.root",
        "params": [],
        "path": "dom/intersectionobserver/root",
        "syntax": "IntersectionObserver interface's read-only root property identifies the Element whose bounds are treated as the bounding box of the viewport for the element which is the observer's target. If the root is null, then the bounds of the actual document viewport are used. Syntax var root = IntersectionObserver.root;  Value A Element object whose bounding box is used as the bounds of the viewport for the purposes of determining how much of the target element is visible. The intersection of this bounding rectangle, offset by any margins specified in the options passed to the IntersectionObserver()",
        "type": "Intersection Observer"
    },
    "IntersectionObserver.rootMargin": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "IntersectionObserver.rootMargin",
        "params": [],
        "path": "dom/intersectionobserver/rootmargin",
        "syntax": "IntersectionObserver interface's read-only rootMargin property is a string with syntax similar to that of the CSS margin property. Each side of the rectangle represented by rootMargin is added to the corresponding side in the root element's bounding box before the intersection test is performed. This lets you, for example, adjust the bounds outward so that the target element is considered 100% visible even if a certain number of pixels worth of width or height is clipped away, or treat the target as partially hidden if an edge is too close to the edge of the root's bounding box. See The root element and root margin in Intersection Observer API for a more in-depth look at the root margin and how it works with the root's bounding box. Syntax var marginString = IntersectionObserver.rootMargin;  Value A string, formatted similarly to the CSS margin property's value, which contains offsets for one or more sides of the root's bounding box. These offsets are added to the corresponding values in the root's bounding box before the intersection between the resulting rectangle and the target element's bounds. The string returned by this property may not match the one specified when the IntersectionObserver was instantiated. The browser is permitted to alter the values If rootMargin isn't specified when the object was instantiated, it defaults to the string \"0px 0px 0px 0px\", meaning that the intersection will be computed between the root element's unmodified bounds rectangle and the target's bounds. The root element and root margin in Intersection Observer API describes how the rootMargin is used in more detail. Specifications    Specification Status Comment   Intersection ObserverThe definition of 'IntersectionObserver.rootMargin' in that specification. Working Draft Initial definition    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   51  15  55   55  53 — 55Disabled   Disabled From version 53 until version 55 (exclusive): this feature is behind the dom.IntersectionObserver.enabled",
        "type": "Intersection Observer"
    },
    "IntersectionObserver.takeRecords": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "IntersectionObserver.takeRecords",
        "params": [],
        "path": "dom/intersectionobserver/takerecords",
        "syntax": "IntersectionObserver method takeRecords()",
        "type": "Intersection Observer"
    },
    "IntersectionObserver.thresholds": {
        "descr": "Draft This page is not complete.",
        "name": "IntersectionObserver.thresholds",
        "params": [],
        "path": "dom/intersectionobserver/thresholds",
        "syntax": "IntersectionObserver interface's read-only thresholds property returns the list of intersection thresholds that was specified when the observer was instantiated with IntersectionObserver()",
        "type": "Intersection Observer"
    },
    "IntersectionObserver.unobserve": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "IntersectionObserver.unobserve",
        "params": [
            {
                "descr": "The Element to cease observing. ",
                "name": "target"
            }
        ],
        "path": "dom/intersectionobserver/unobserve",
        "syntax": "IntersectionObserver method unobserve()",
        "type": "Intersection Observer"
    },
    "IntersectionObserverEntry": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "IntersectionObserverEntry",
        "params": [
            {
                "descr": "Returns the bounds rectangle of the target element as a DOMRectReadOnly. ",
                "name": "IntersectionObserverEntry.boundingClientRect Read only"
            },
            {
                "descr": "Returns the ratio of the intersectionRect to the boundingClientRect.",
                "name": "IntersectionObserverEntry.intersectionRatio Read only"
            },
            {
                "descr": "Returns a DOMRectReadOnly representing the target's visible area.",
                "name": "IntersectionObserverEntry.intersectionRect Read only"
            },
            {
                "descr": "A Boolean value which is true if the target element intersects with the intersection observer's root. ",
                "name": "IntersectionObserverEntry.isIntersecting Read only"
            },
            {
                "descr": "Returns a DOMRectReadOnly for the intersection observer's root.",
                "name": "IntersectionObserverEntry.rootBounds Read only"
            },
            {
                "descr": "The Element whose intersection with the root changed.",
                "name": "IntersectionObserverEntry.target Read only"
            },
            {
                "descr": "A DOMHighResTimeStamp indicating the time at which the intersection was recorded, relative to the IntersectionObserver's time origin.",
                "name": "IntersectionObserverEntry.time Read only"
            }
        ],
        "path": "dom/intersectionobserverentry",
        "syntax": "IntersectionObserverEntry interface of the Intersection Observer API describes the intersection between the target element and its root container at a specific moment of transition. Instances of IntersectionObserverEntry are delivered to an IntersectionObserver callback in its entries parameter; otherwise, these objects can only be obtained by calling IntersectionObserver.takeRecords()",
        "type": "Intersection Observer"
    },
    "IntersectionObserverEntry.boundingClientRect": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "IntersectionObserverEntry.boundingClientRect",
        "params": [],
        "path": "dom/intersectionobserverentry/boundingclientrect",
        "syntax": "IntersectionObserverEntry interface's read-only boundingClientRect property returns a DOMRectReadOnly which in essence describes a rectangle describing the smallest rectangle that contains the entire target element. Syntax var boundsRect = IntersectionObserverEntry.boundingClientRect;  Value A DOMRectReadOnly which describes the smallest rectangle that contains every part of the target element whose intersection change is being described. This value is obtained using the same algorithm as Element.getBoundingClientRect()",
        "type": "Intersection Observer"
    },
    "IntersectionObserverEntry.intersectionRatio": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "IntersectionObserverEntry.intersectionRatio",
        "params": [],
        "path": "dom/intersectionobserverentry/intersectionratio",
        "syntax": "IntersectionObserverEntry interface's read-only intersectionRatio property tells you how much of the target element is currently visible within the root's intersection ratio, as a value between 0.0 and 1.0. Syntax var intersectionRatio = IntersectionObserverEntry.intersectionRatio;  Value A number between 0.0 and 1.0 which indicates how much of the target element is actually visible within the root's intersection rectangle. More precisely, this value is the ratio of the area of the intersection rectangle (intersectionRect) to the area of the target's bounds rectangle (boundingClientRect",
        "type": "Intersection Observer"
    },
    "IntersectionObserverEntry.intersectionRect": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "IntersectionObserverEntry.intersectionRect",
        "params": [],
        "path": "dom/intersectionobserverentry/intersectionrect",
        "syntax": "IntersectionObserverEntry interface's read-only intersectionRect property is a DOMRectReadOnly object which describes the smallest rectangle that contains the entire portion of the target element which is currently visible within the intersection root. Syntax var intersectionRect = IntersectionObserverEntry.intersectionRect;  Value A DOMRectReadOnly which describes the part of the target element that's currently visible within the root's intersection rectangle. This rectangle is computed by taking the intersection of boundingClientRect with each of the target's ancestors' clip rectangles, with the exception of the intersection root itself. Example In this simple example, an intersection callback stores the intersection rectangle for later use by the code that draws the target elements' contents, so that only the visible area is redrawn. function intersectionCallback(entries) { entries.forEach(function(entry) { refreshZones.push({ element: entry.target, rect: entry.intersectionRect });\n or  });\n or  });",
        "type": "Intersection Observer"
    },
    "IntersectionObserverEntry.isIntersecting": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "IntersectionObserverEntry.isIntersecting",
        "params": [],
        "path": "dom/intersectionobserverentry/isintersecting",
        "syntax": "IntersectionObserverEntry interface's read-only isIntersecting property is a Boolean value which is true if the target element intersects with the intersection observer's root. If this is true, then, the IntersectionObserverEntry describes a transition into a state of intersection; if it's false, then you know the transition is from intersecting to not-intersecting. Syntax var isIntersecting = IntersectionObserverEntry.isIntersecting;  Value A Boolean value which indicates whether the target element has transitioned into a state of intersection (true) or out of a state of intersection (false",
        "type": "Intersection Observer"
    },
    "IntersectionObserverEntry.rootBounds": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "IntersectionObserverEntry.rootBounds",
        "params": [],
        "path": "dom/intersectionobserverentry/rootbounds",
        "syntax": "IntersectionObserverEntry interface's read-only rootBounds property is a DOMRectReadOnly corresponding to the target's root intersection rectangle, offset by the IntersectionObserver.rootMargin if one is specified. Syntax var rootBounds = IntersectionObserverEntry.rootBounds;  Value A DOMRectReadOnly which describes the root intersection rectangle. For roots which are the Document's viewport, this rectangle is the bounds rectangle of the entire document. Otherwise, it's the bounds of the root element. This rectangle is offset by the values in IntersectionObserver.rootMargin. Specifications    Specification Status Comment   Intersection ObserverThe definition of 'IntersectionObserverEntry.rootBounds' in that specification. Working Draft Initial definition    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   51  15  55   55  53 — 55Disabled   Disabled From version 53 until version 55 (exclusive): this feature is behind the dom.IntersectionObserver.enabled",
        "type": "Intersection Observer"
    },
    "IntersectionObserverEntry.target": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "IntersectionObserverEntry.target",
        "params": [],
        "path": "dom/intersectionobserverentry/target",
        "syntax": "IntersectionObserverEntry interface's read-only target property indicates which targeted Element has changed its amount of intersection with the intersection root. Syntax var target = IntersectionObserverEntry.target;  Value The IntersectionObserverEntry's target property specifies which Element previously targeted by calling IntersectionObserver.observe()",
        "type": "Intersection Observer"
    },
    "IntersectionObserverEntry.time": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "IntersectionObserverEntry.time",
        "params": [],
        "path": "dom/intersectionobserverentry/time",
        "syntax": "IntersectionObserverEntry interface's read-only time property is a DOMHighResTimeStamp that indicates the time at which the intersection change occurred relative to the time at which the document was created. Syntax var time = IntersectionObserverEntry.time;  Value A DOMHighResTimeStamp which indicates the time at which the target element experienced the intersection change described by the IntersectionObserverEntry. The time is specified in milliseconds since the creation of the containing document. Example See Timing element visibility with the Intersection Observer API for a complete example which uses the time property to track how long elements are visible to the user. Specifications    Specification Status Comment   Intersection ObserverThe definition of 'IntersectionObserverEntry.time' in that specification. Working Draft Initial definition    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   51  15  55   55  53 — 55Disabled   Disabled From version 53 until version 55 (exclusive): this feature is behind the dom.IntersectionObserver.enabled",
        "type": "Intersection Observer"
    },
    "Intl": {
        "descr": "The Intl object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. The constructors for Collator, NumberFormat, and DateTimeFormat objects are properties of the Intl object. This page documents these properties as well as functionality common to the internationalization constructors and other language sensitive functions.",
        "name": "Intl",
        "params": [
            {
                "descr": "Constructor for collators, objects that enable language sensitive string comparison.",
                "name": "Intl.Collator"
            },
            {
                "descr": "Constructor for objects that enable language sensitive date and time formatting.",
                "name": "Intl.DateTimeFormat"
            },
            {
                "descr": "Constructor for objects that enable language sensitive number formatting.",
                "name": "Intl.NumberFormat"
            },
            {
                "descr": "Constructor for objects that enable plural sensitive formatting and plural language langue rules.",
                "name": "Intl.PluralRules"
            },
            {
                "descr": "A method returning the canonical locale names.",
                "name": "Intl.getCanonicalLocales()"
            }
        ],
        "path": "javascript/global_objects/intl",
        "syntax": "\"best fit\" matcher lets the runtime provide a locale that's at least, but possibly more, suited for the request than the result of the Lookup algorithm. If the application doesn't provide a locales argument, or the runtime doesn't have a locale that matches the request, then the runtime's default locale is used. The matcher can be selected using a property of the options argument (see below).",
        "type": "Intl"
    },
    "Intl.Collator": {
        "descr": "The Intl.Collator object is a constructor for collators, objects that enable language sensitive string comparison.",
        "name": "Intl.Collator",
        "params": [
            {
                "descr": "Optional. A string with a BCP 47 language tag, or an array of such strings. ",
                "name": "locales"
            },
            {
                "descr": "Whether numeric collation should be used, such that \"1\" < \"2\" < \"10\". ",
                "name": "kn"
            },
            {
                "descr": "Whether upper case or lower case should sort first. ",
                "name": "kf"
            },
            {
                "descr": "Optional. An object with some or all of the following properties:  localeMatcher The locale matching algorithm to use. ",
                "name": "options"
            },
            {
                "descr": "Whether the comparison is for sorting or for searching for matching strings. ",
                "name": "usage"
            },
            {
                "descr": "Which differences in the strings should lead to non-zero result values. ",
                "name": "sensitivity"
            },
            {
                "descr": "Whether punctuation should be ignored. ",
                "name": "ignorePunctuation"
            },
            {
                "descr": "Whether numeric collation should be used, such that \"1\" < \"2\" < \"10\". ",
                "name": "numeric"
            },
            {
                "descr": "Whether upper case or lower case should sort first. ",
                "name": "caseFirst"
            },
            {
                "descr": "Allows the addition of properties to all objects.",
                "name": "Intl.Collator.prototype"
            },
            {
                "descr": "Returns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.",
                "name": "Intl.Collator.supportedLocalesOf()"
            },
            {
                "descr": "Getter; returns a function that compares two strings according to the sort order of this Intl.Collator object.",
                "name": "Intl.Collator.prototype.compare"
            },
            {
                "descr": "A reference to Intl.Collator.",
                "name": "Intl.Collator.prototype.constructor"
            },
            {
                "descr": "Returns a new object with properties reflecting the locale and collation options computed during initialization of the object.",
                "name": "Intl.Collator.prototype.resolvedOptions()"
            }
        ],
        "path": "javascript/global_objects/collator",
        "syntax": "new Intl.Collator([locales[, options]]) Intl.Collator.call(this[, locales[, options]])",
        "type": "Intl"
    },
    "Intl.Collator.supportedLocalesOf": {
        "descr": "The Intl.Collator.supportedLocalesOf() method returns an array containing those of the provided locales that are supported in collation without having to fall back to the runtime's default locale.",
        "name": "Intl.Collator.supportedLocalesOf",
        "params": [
            {
                "descr": "A string with a BCP 47 language tag, or an array of such strings. ",
                "name": "locales"
            },
            {
                "descr": "Optional. An object that may have the following property:  localeMatcher The locale matching algorithm to use. ",
                "name": "options"
            }
        ],
        "path": "javascript/global_objects/collator/supportedlocalesof",
        "syntax": "Intl.Collator.supportedLocalesOf(locales[, options])",
        "type": "Intl"
    },
    "Intl.DateTimeFormat": {
        "descr": "The Intl.DateTimeFormat object is a constructor for objects that enable language-sensitive date and time formatting.",
        "name": "Intl.DateTimeFormat",
        "params": [
            {
                "descr": "Optional. A string with a BCP 47 language tag, or an array of such strings. ",
                "name": "locales"
            },
            {
                "descr": "Calendar. Possible values include: \"buddhist\", \"chinese\", \"coptic\", \"ethioaa\", \"ethiopic\", \"gregory\", \"hebrew\", \"indian\", \"islamic\", \"islamicc\", \"iso8601\", \"japanese\", \"persian\", \"roc\".",
                "name": "ca"
            },
            {
                "descr": "Hour cycle. Possible values include: \"h11\", \"h12\", \"h23\", \"h24\".",
                "name": "hc"
            },
            {
                "descr": "Optional. An object with some or all of the following properties:  localeMatcher The locale matching algorithm to use. ",
                "name": "options"
            },
            {
                "descr": "The time zone to use. The only value implementations must recognize is \"UTC\"; the default is the runtime's default time zone. ",
                "name": "timeZone"
            },
            {
                "descr": "Whether to use 12-hour time (as opposed to 24-hour time). ",
                "name": "hour12"
            },
            {
                "descr": "The hour cycle to use. Possible values are \"h11\", \"h12\", \"h23\", or \"h24\". ",
                "name": "hourCycle"
            },
            {
                "descr": "The format matching algorithm to use. ",
                "name": "formatMatcher"
            },
            {
                "descr": "The representation of the weekday. ",
                "name": "weekday"
            },
            {
                "descr": "The representation of the era. Possible values are \"narrow\", \"short\", \"long\".",
                "name": "era"
            },
            {
                "descr": "The representation of the year. ",
                "name": "year"
            },
            {
                "descr": "The representation of the month. ",
                "name": "month"
            },
            {
                "descr": "The representation of the day. Possible values are \"numeric\", \"2-digit\".",
                "name": "day"
            },
            {
                "descr": "The representation of the hour. ",
                "name": "hour"
            },
            {
                "descr": "The representation of the minute. ",
                "name": "minute"
            },
            {
                "descr": "The representation of the second. ",
                "name": "second"
            },
            {
                "descr": "The representation of the time zone name. ",
                "name": "timeZoneName"
            },
            {
                "descr": "Allows the addition of properties to all objects.",
                "name": "Intl.DateTimeFormat.prototype"
            },
            {
                "descr": "Returns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.",
                "name": "Intl.DateTimeFormat.supportedLocalesOf()"
            },
            {
                "descr": "A reference to Intl.DateTimeFormat.",
                "name": "Intl.DateTimeFormat.prototype.constructor"
            },
            {
                "descr": "Getter; returns a function that formats a date according to the locale and formatting options of this DateTimeFormat object.",
                "name": "Intl.DateTimeFormat.prototype.format"
            },
            {
                "descr": "Returns an Array of objects representing the date string in parts that can be used for custom locale-aware formatting.",
                "name": "Intl.DateTimeFormat.prototype.formatToParts()"
            },
            {
                "descr": "Returns a new object with properties reflecting the locale and formatting options computed during initialization of the object.",
                "name": "Intl.DateTimeFormat.prototype.resolvedOptions()"
            }
        ],
        "path": "javascript/global_objects/datetimeformat",
        "syntax": "new Intl.DateTimeFormat([locales[, options]]) Intl.DateTimeFormat.call(this[, locales[, options]])",
        "type": "Intl"
    },
    "Intl.DateTimeFormat.supportedLocalesOf": {
        "descr": "The Intl.DateTimeFormat.supportedLocalesOf() method returns an array containing those of the provided locales that are supported in date and time formatting without having to fall back to the runtime's default locale.",
        "name": "Intl.DateTimeFormat.supportedLocalesOf",
        "params": [
            {
                "descr": "A string with a BCP 47 language tag, or an array of such strings. ",
                "name": "locales"
            },
            {
                "descr": "Optional. An object that may have the following property:  localeMatcher The locale matching algorithm to use. ",
                "name": "options"
            }
        ],
        "path": "javascript/global_objects/datetimeformat/supportedlocalesof",
        "syntax": "Intl.DateTimeFormat.supportedLocalesOf(locales[, options])",
        "type": "Intl"
    },
    "Intl.NumberFormat": {
        "descr": "The Intl.NumberFormat object is a constructor for objects that enable language sensitive number formatting.",
        "name": "Intl.NumberFormat",
        "params": [
            {
                "descr": "Optional. A string with a BCP 47 language tag, or an array of such strings. ",
                "name": "locales"
            },
            {
                "descr": "Optional. An object with some or all of the following properties:  localeMatcher The locale matching algorithm to use. ",
                "name": "options"
            },
            {
                "descr": "The formatting style to use. Possible values are \"decimal\" for plain number formatting, \"currency\" for currency formatting, and \"percent\" for percent formatting; the default is \"decimal\".",
                "name": "style"
            },
            {
                "descr": "The currency to use in currency formatting. ",
                "name": "currency"
            },
            {
                "descr": "How to display the currency in currency formatting. ",
                "name": "currencyDisplay"
            },
            {
                "descr": "Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators. ",
                "name": "useGrouping"
            },
            {
                "descr": "The minimum number of integer digits to use. ",
                "name": "minimumIntegerDigits"
            },
            {
                "descr": "The minimum number of fraction digits to use. ",
                "name": "minimumFractionDigits"
            },
            {
                "descr": "The maximum number of fraction digits to use. ",
                "name": "maximumFractionDigits"
            },
            {
                "descr": "The minimum number of significant digits to use. ",
                "name": "minimumSignificantDigits"
            },
            {
                "descr": "The maximum number of significant digits to use. ",
                "name": "maximumSignificantDigits"
            },
            {
                "descr": "Allows the addition of properties to all objects.",
                "name": "Intl.NumberFormat.prototype"
            },
            {
                "descr": "Returns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.",
                "name": "Intl.NumberFormat.supportedLocalesOf()"
            },
            {
                "descr": "A reference to Intl.NumberFormat.",
                "name": "Intl.NumberFormat.prototype.constructor"
            },
            {
                "descr": "Getter; returns a function that formats a number according to the locale and formatting options of this NumberFormat object.",
                "name": "Intl.NumberFormat.prototype.format"
            },
            {
                "descr": "Returns an Array of objects representing the number string in parts that can be used for custom locale-aware formatting.",
                "name": "Intl.NumberFormat.prototype.formatToParts()"
            },
            {
                "descr": "Returns a new object with properties reflecting the locale and collation options computed during initialization of the object.",
                "name": "Intl.NumberFormat.prototype.resolvedOptions()"
            }
        ],
        "path": "javascript/global_objects/numberformat",
        "syntax": "new Intl.NumberFormat([locales[, options]]) Intl.NumberFormat.call(this[, locales[, options]])",
        "type": "Intl"
    },
    "Intl.NumberFormat.supportedLocalesOf": {
        "descr": "The Intl.NumberFormat.supportedLocalesOf() method returns an array containing those of the provided locales that are supported in number formatting without having to fall back to the runtime's default locale.",
        "name": "Intl.NumberFormat.supportedLocalesOf",
        "params": [
            {
                "descr": "A string with a BCP 47 language tag, or an array of such strings. ",
                "name": "locales"
            },
            {
                "descr": "Optional. An object that may have the following property:  localeMatcher The locale matching algorithm to use. ",
                "name": "options"
            }
        ],
        "path": "javascript/global_objects/numberformat/supportedlocalesof",
        "syntax": "Intl.NumberFormat.supportedLocalesOf(locales[, options])",
        "type": "Intl"
    },
    "Intl.collator.compare": {
        "descr": "The Intl.Collator.prototype.compare property returns a function that compares two strings according to the sort order of this Collator object.",
        "name": "Intl.collator.compare",
        "params": [
            {
                "descr": "The strings to compare against each other.",
                "name": "string1 string2"
            }
        ],
        "path": "javascript/global_objects/collator/compare",
        "syntax": "collator.compare(string1, string2)",
        "type": "Intl"
    },
    "Intl.collator.resolvedOptions": {
        "descr": "The Intl.Collator.prototype.resolvedOptions() method returns a new object with properties reflecting the locale and collation options computed during initialization of this Collator object.",
        "name": "Intl.collator.resolvedOptions",
        "params": [
            {
                "descr": "The BCP 47 language tag for the locale actually used. ",
                "name": "locale"
            },
            {
                "descr": "The values provided for these properties in the options argument or filled in as defaults.",
                "name": "usage sensitivity ignorePunctuation"
            },
            {
                "descr": "The value requested using the Unicode extension key \"co\", if it is supported for locale, or \"default\".",
                "name": "collation"
            },
            {
                "descr": "The values requested for these properties in the options argument or using the Unicode extension keys \"kn\" and \"kf\" or filled in as defaults. ",
                "name": "numeric caseFirst"
            }
        ],
        "path": "javascript/global_objects/collator/resolvedoptions",
        "syntax": "collator.resolvedOptions()",
        "type": "Intl"
    },
    "Intl.dateTimeFormat.format": {
        "descr": "The Intl.DateTimeFormat.prototype.format property returns a getter function that formats a date according to the locale and formatting options of this Intl.DateTimeFormat object.",
        "name": "Intl.dateTimeFormat.format",
        "params": [
            {
                "descr": "The date to format.",
                "name": "date"
            }
        ],
        "path": "javascript/global_objects/datetimeformat/format",
        "syntax": "dateTimeFormat.format(date)",
        "type": "Intl"
    },
    "Intl.dateTimeFormat.formatToParts": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Intl.dateTimeFormat.formatToParts",
        "params": [
            {
                "descr": "The date to format.",
                "name": "date Optional"
            },
            {
                "descr": "The string used for the day, for example \"17\".",
                "name": "day"
            },
            {
                "descr": "The string used for the day period, for example, \"AM\" or \"PM\".",
                "name": "dayPeriod"
            },
            {
                "descr": "The string used for the era, for example \"BC\" or \"AD\".",
                "name": "era"
            },
            {
                "descr": "The string used for the hour, for example \"3\" or \"03\".",
                "name": "hour"
            },
            {
                "descr": "The string used for separating date and time values, for example \"/\", \",\", \"o'clock\", \"de\", etc.",
                "name": "literal"
            },
            {
                "descr": "The string used for the minute, for example \"00\".",
                "name": "minute"
            },
            {
                "descr": "The string used for the month, for example \"12\".",
                "name": "month"
            },
            {
                "descr": "The string used for the second, for example \"07\" or \"42\".",
                "name": "second"
            },
            {
                "descr": "The string used for the name of the time zone, for example \"UTC\".",
                "name": "timeZoneName"
            },
            {
                "descr": "The string used for the weekday, for example \"M\", \"Monday\", or \"Montag\".",
                "name": "weekday"
            },
            {
                "descr": "The string used for the year, for example \"2012\" or \"96\".",
                "name": "year"
            }
        ],
        "path": "javascript/global_objects/datetimeformat/formattoparts",
        "syntax": "Intl.DateTimeFormat.prototype.formatToParts(date)",
        "type": "Intl"
    },
    "Intl.dateTimeFormat.resolvedOptions": {
        "descr": "The Intl.DateTimeFormat.prototype.resolvedOptions() method returns a new object with properties reflecting the locale and date and time formatting options computed during initialization of this DateTimeFormat object.",
        "name": "Intl.dateTimeFormat.resolvedOptions",
        "params": [
            {
                "descr": "The BCP 47 language tag for the locale actually used. ",
                "name": "locale"
            },
            {
                "descr": "The values requested using the Unicode extension keys \"ca\" and \"nu\" or filled in as default values.",
                "name": "calendar numberingSystem"
            },
            {
                "descr": "The value provided for this property in the options argument; undefined (representing the runtime's default time zone) if none was provided. ",
                "name": "timeZone"
            },
            {
                "descr": "The value provided for this property in the options argument or filled in as a default.",
                "name": "hour12"
            },
            {
                "descr": "The values resulting from format matching between the corresponding properties in the options argument and the available combinations and representations for date-time formatting in the selected locale. Some of these properties may not be present, indicating that the corresponding components will not be represented in formatted output.",
                "name": "weekday era year month day hour minute second timeZoneName"
            }
        ],
        "path": "javascript/global_objects/datetimeformat/resolvedoptions",
        "syntax": "dateTimeFormat.resolvedOptions()",
        "type": "Intl"
    },
    "Intl.getCanonicalLocales": {
        "descr": "The Intl.getCanonicalLocales() method returns an array containing the canonical locale names. Duplicates will be omitted and elements will be validated as structurally valid language tags.",
        "name": "Intl.getCanonicalLocales",
        "params": [
            {
                "descr": "A list of String values for which to get the canonical locale names.",
                "name": "locales"
            }
        ],
        "path": "javascript/global_objects/intl/getcanonicallocales",
        "syntax": "Intl.getCanonicalLocales(locales)",
        "type": "Intl"
    },
    "Intl.numberFormat.format": {
        "descr": "The Intl.NumberFormat.prototype.format property returns a getter function that formats a number according to the locale and formatting options of this NumberFormat object.",
        "name": "Intl.numberFormat.format",
        "params": [
            {
                "descr": "The number to format.",
                "name": "number"
            }
        ],
        "path": "javascript/global_objects/numberformat/format",
        "syntax": "numberFormat.format(number)",
        "type": "Intl"
    },
    "Intl.numberFormat.formatToParts": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Intl.numberFormat.formatToParts",
        "params": [
            {
                "descr": "The number to format.",
                "name": "number Optional"
            },
            {
                "descr": "The currency string, such as the symbols \"$\" and \"€\" or the name \"Dollar\", \"Euro\" depending on how currencyDisplay is specified.",
                "name": "currency"
            },
            {
                "descr": "The decimal separator string (\".\").",
                "name": "decimal"
            },
            {
                "descr": "The fraction number.",
                "name": "fraction"
            },
            {
                "descr": "The group separator string (\",\").",
                "name": "group"
            },
            {
                "descr": "The Infinity string (\"∞\").",
                "name": "infinity"
            },
            {
                "descr": "The integer number.",
                "name": "integer"
            },
            {
                "descr": "Any literal strings or whitespace in the formatted number.",
                "name": "literal"
            },
            {
                "descr": "The minus sign string (\"-\").",
                "name": "minusSign"
            },
            {
                "descr": "The NaN string (\"NaN\").",
                "name": "nan"
            },
            {
                "descr": "The plus sign string (\"+\").",
                "name": "plusSign"
            },
            {
                "descr": "The percent sign string (\"%\").",
                "name": "percentSign"
            }
        ],
        "path": "javascript/global_objects/numberformat/formattoparts",
        "syntax": "Intl.NumberFormat.prototype.formatToParts(number)",
        "type": "Intl"
    },
    "Intl.numberFormat.resolvedOptions": {
        "descr": "The Intl.NumberFormat.prototype.resolvedOptions() method returns a new object with properties reflecting the locale and number formatting options computed during initialization of this NumberFormat object.",
        "name": "Intl.numberFormat.resolvedOptions",
        "params": [
            {
                "descr": "The BCP 47 language tag for the locale actually used. ",
                "name": "locale"
            },
            {
                "descr": "The value requested using the Unicode extension key \"nu\" or filled in as a default.",
                "name": "numberingSystem"
            },
            {
                "descr": "The values provided for these properties in the options argument or filled in as defaults.",
                "name": "style useGrouping"
            },
            {
                "descr": "The values provided for these properties in the options argument or filled in as defaults. ",
                "name": "currency currencyDisplay"
            },
            {
                "descr": "The values provided for these properties in the options argument or filled in as defaults. ",
                "name": "minimumIntegerDigits minimumFractionDigits maximumFractionDigits"
            },
            {
                "descr": "The values provided for these properties in the options argument or filled in as defaults. ",
                "name": "minimumSignificantDigits maximumSignificantDigits"
            }
        ],
        "path": "javascript/global_objects/numberformat/resolvedoptions",
        "syntax": "numberFormat.resolvedOptions()",
        "type": "Intl"
    },
    "Iteration protocols": {
        "descr": "A couple of additions to ECMAScript 2015 aren't new built-ins or syntax, but protocols. These protocols can be implemented by any object respecting some conventions.",
        "name": "Iteration protocols",
        "params": [],
        "path": "javascript/iteration_protocols",
        "syntax": "for..of construct. Some built-in types are built-in iterables with a default iteration behavior, such as Array or Map, while other types (such as Object) are not.",
        "type": "Miscellaneous"
    },
    "JSON": {
        "descr": "The JSON object contains methods for parsing JavaScript Object Notation (JSON) and converting values to JSON. It can't be called or constructed, and aside from its two method properties, it has no interesting functionality of its own.",
        "name": "JSON",
        "params": [
            {
                "descr": "Parse a string as JSON, optionally transform the produced value and its properties, and return the value.",
                "name": "JSON.parse()"
            },
            {
                "descr": "Return a JSON string corresponding to the specified value, optionally including only certain properties or replacing property values in a user-defined manner.",
                "name": "JSON.stringify()"
            }
        ],
        "path": "javascript/global_objects/json",
        "syntax": "null. It is based upon JavaScript syntax but is distinct from it: some JavaScript is not JSON. Objects and Arrays: Property names must be double-quoted strings; trailing commas are forbidden. Numbers: Leading zeros are prohibited (in JSON.stringify zeros will be ignored, but in JSON.parse it will throw SyntaxError);\n or  a decimal point must be followed by at least one digit.);",
        "type": "JSON"
    },
    "JSON.parse": {
        "descr": "The JSON.parse() method parses a JSON string, constructing the JavaScript value or object described by the string. An optional reviver function can be provided to perform a transformation on the resulting object before it is returned.",
        "name": "JSON.parse",
        "params": [
            {
                "descr": "The string to parse as JSON. See the JSON object for a description of JSON syntax.",
                "name": "text"
            },
            {
                "descr": "If a function, this prescribes how the value originally produced by parsing is transformed, before being returned.",
                "name": "reviver Optional"
            }
        ],
        "path": "javascript/global_objects/json/parse",
        "syntax": "JSON.parse(text[, reviver])",
        "type": "JSON"
    },
    "JSON.stringify": {
        "descr": "The JSON.stringify() method converts a JavaScript object or value to a JSON string, optionally replacing values if a replacer function is specified or optionally including only the specified properties if a replacer array is specified.",
        "name": "JSON.stringify",
        "params": [
            {
                "descr": "The value to convert to a JSON string.",
                "name": "value"
            },
            {
                "descr": "A function that alters the behavior of the stringification process, or an array of String and Number objects that serve as a whitelist for selecting/filtering the properties of the value object to be included in the JSON string. If this value is null or not provided, all properties of the object are included in the resulting JSON string.",
                "name": "replacerOptional"
            },
            {
                "descr": "A String or Number object that's used to insert white space into the output JSON string for readability purposes. ",
                "name": "spaceOptional"
            }
        ],
        "path": "javascript/global_objects/json/stringify",
        "syntax": "JSON.stringify(value[, replacer[, space]])",
        "type": "JSON"
    },
    "Keyboard.getLayoutMap": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Keyboard.getLayoutMap",
        "params": [],
        "path": "dom/keyboard/getlayoutmap",
        "syntax": "var promise = Keyboard.getLayoutMap()",
        "type": "Keyboard"
    },
    "Keyboard.lock": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Keyboard.lock",
        "params": [
            {
                "descr": "An Array of one or more key codes to lock. ",
                "name": "keyCodes Optional"
            }
        ],
        "path": "dom/keyboard/lock",
        "syntax": "var promise = Keyboard.lock([keyCodes[]])",
        "type": "Keyboard"
    },
    "Keyboard.unlock": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Keyboard.unlock",
        "params": [],
        "path": "dom/keyboard/unlock",
        "syntax": "Keyboard.unlock()",
        "type": "Keyboard"
    },
    "KeyboardEvent.altKey": {
        "descr": "The KeyboardEvent.altKey read-only property is a Boolean indicates if the alt key (Option or ⌥ on OS X) was pressed (true) or not (false) when the event occured.",
        "name": "KeyboardEvent.altKey",
        "params": [],
        "path": "dom/keyboardevent/altkey",
        "syntax": "var altKeyPressed = instanceOfKeyboardEvent.altKey  Examples <html> <head> <title>altKey example</title> <script type=\"text/javascript\"> function showChar(e){ alert( \"Key Pressed: \" + String.fromCharCode(e.charCode) + \"\\n\" + \"charCode: \" + e.charCode + \"\\n\" + \"ALT key pressed: \" + e.altKey + \"\\n\" );\n or  } </script> </head> <body onkeypress=\"showChar(event);\n or \"> <p> Press any character key, with or without holding down the ALT key.<br /> You can also use the SHIFT key together with the ALT key. </p> </body> </html>);",
        "type": "Keyboard"
    },
    "KeyboardEvent.code": {
        "descr": "The KeyboardEvent.code property represents a physical key on the keyboard (as opposed to the character generated by pressing the key). In other words, this property returns a value which isn't altered by keyboard layout or the state of the modifier keys.",
        "name": "KeyboardEvent.code",
        "params": [],
        "path": "dom/keyboardevent/code",
        "syntax": "shipSize contains the size of the ship the player is moving around, for convenience. position is used to track the position of the ship within the play field. moveRate and turnRate are the number of pixels forward and backward each keystroke moves the ship and how many degrees of rotation the left and right steering controls apply per keystroke. angle is the current amount of rotation applied to the ship, in degrees; it starts at 0° (pointing straight up). Finally, spaceship",
        "type": "Keyboard"
    },
    "KeyboardEvent.constructor": {
        "descr": "The KeyboardEvent() constructor creates a new KeyboardEvent.",
        "name": "KeyboardEvent.constructor",
        "params": [
            {
                "descr": "Is a DOMString representing the name of the event.",
                "name": "typeArg"
            },
            {
                "descr": "Is a KeyboardEventInit dictionary, having the following fields:   \"key\", optional and defaulting to \"\", of type DOMString, that sets the value of KeyboardEvent.key. ",
                "name": "KeyboardEventInitOptional"
            }
        ],
        "path": "dom/keyboardevent/keyboardevent",
        "syntax": "event = new KeyboardEvent(typeArg, KeyboardEventInit);",
        "type": "Keyboard"
    },
    "KeyboardEvent.ctrlKey": {
        "descr": "The KeyboardEvent.ctrlKey read-only property returns a Boolean that indicates if the control key was pressed (true) or not (false) when the event occured.",
        "name": "KeyboardEvent.ctrlKey",
        "params": [],
        "path": "dom/keyboardevent/ctrlkey",
        "syntax": "var ctrlKeyPressed = instanceOfKeyboardEvent.ctrlKey  Return value A boolean Example <html> <head> <title>ctrlKey example</title> <script type=\"text/javascript\"> function showChar(e){ alert( \"Key Pressed: \" + String.fromCharCode(e.charCode) + \"\\n\" + \"charCode: \" + e.charCode + \"\\n\" + \"CTRL key pressed: \" + e.ctrlKey + \"\\n\" );\n or  } </script> </head> <body onkeypress=\"showChar(event);\n or \"> <p>Press any character key, with or without holding down the CTRL key.<br /> You can also use the SHIFT key together with the CTRL key.</p> </body> </html>);",
        "type": "Keyboard"
    },
    "KeyboardEvent.getModifierState": {
        "descr": "The KeyboardEvent.getModifierState() method returns the current state of the specified modifier key: true if the modifier is active (that is the modifier key is pressed or locked), otherwise, false.",
        "name": "KeyboardEvent.getModifierState",
        "params": [
            {
                "descr": "A modifier key value. The value must be one of the KeyboardEvent.key values which represent modifier keys, or the string \"Accel\" . ",
                "name": "keyArg"
            }
        ],
        "path": "dom/keyboardevent/getmodifierstate",
        "syntax": "var active = event.getModifierState(keyArg);",
        "type": "Keyboard"
    },
    "KeyboardEvent.isComposing": {
        "descr": "The KeyboardEvent.isComposing read-only property returns a Boolean value indicating if the event is fired after compositionstart and before compositionend.",
        "name": "KeyboardEvent.isComposing",
        "params": [],
        "path": "dom/keyboardevent/iscomposing",
        "syntax": "var bool = event.isComposing; Example var kbdEvent = new KeyboardEvent(\"syntheticKey\", false);\n or  console.log(kbdEvent.isComposing);\n or  // return false);",
        "type": "Keyboard"
    },
    "KeyboardEvent.location": {
        "descr": "The KeyboardEvent.location read-only property returns an unsigned long representing the location of the key on the keyboard or other input device",
        "name": "KeyboardEvent.location",
        "params": [],
        "path": "dom/keyboardevent/location",
        "syntax": "var location = event.location; Example function keyEvent(event) { console.log(\"Location of key pressed: \" + event.location);\n or  });",
        "type": "Keyboard"
    },
    "KeyboardEvent.metaKey": {
        "descr": "The KeyboardEvent.metaKey read-only property returning a Boolean that indicates if the Meta key was pressed (true) or not (false) when the event occurred. Some operating systems may intercept the key so it is never detected.",
        "name": "KeyboardEvent.metaKey",
        "params": [],
        "path": "dom/keyboardevent/metakey",
        "syntax": "var metaKeyPressed = instanceOfKeyboardEvent.metaKey  Return value A boolean Example function ismetaKey(e) { alert(\"metaKey = \" + e.metaKey);\n or  });",
        "type": "Keyboard"
    },
    "KeyboardEvent.repeat": {
        "descr": "The KeyboardEvent.repeat read-only property returns a Boolean that is true if the key is being held down such that it is automatically repeating.",
        "name": "KeyboardEvent.repeat",
        "params": [],
        "path": "dom/keyboardevent/repeat",
        "syntax": "var repeat = event.repeat; Specifications    Specification Status Comment   Document Object Model (DOM) Level 3 Events SpecificationThe definition of 'KeyboardEvent.repeat' in that specification. Obsolete Initial definition.    Browser compatibilityUpdate compatibility data on GitHub",
        "type": "Keyboard"
    },
    "KeyboardEvent.shiftKey": {
        "descr": "The KeyboardEvent.shiftKey read-only property indicates if the shift key was pressed (true) or (false) when the event occurred.",
        "name": "KeyboardEvent.shiftKey",
        "params": [],
        "path": "dom/keyboardevent/shiftkey",
        "syntax": "var shiftKeyPressed = instanceOfKeyboardEvent.shiftKey  Return value A boolean Example <html> <head> <title>shiftKey example</title> <script type=\"text/javascript\"> function showChar(e){ alert( \"Key Pressed: \" + String.fromCharCode(e.charCode) + \"\\n\" + \"charCode: \" + e.charCode + \"\\n\" + \"SHIFT key pressed: \" + e.shiftKey + \"\\n\" + \"ALT key pressed: \" + e.altKey + \"\\n\" );\n or  } </script> </head> <body onkeypress=\"showChar(event);\n or \"> <p>Press any character key, with or without holding down the SHIFT key.<br /> You can also use the SHIFT key together with the ALT key.</p> </body> </html>);",
        "type": "Keyboard"
    },
    "KeyboardLayoutMap.entries": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "KeyboardLayoutMap.entries",
        "params": [],
        "path": "dom/keyboardlayoutmap/entries",
        "syntax": "KeyboardLayoutMap.entries()",
        "type": "Keyboard"
    },
    "KeyboardLayoutMap.forEach": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "KeyboardLayoutMap.forEach",
        "params": [
            {
                "descr": "The function to execute for each element, taking three arguments:  currentValue The value of the current element being processed.",
                "name": "callback"
            },
            {
                "descr": "The index of the current element being processed.",
                "name": "index Optional"
            },
            {
                "descr": "The KeyboardLayoutMap that forEach() is being called on.",
                "name": "array Optional"
            },
            {
                "descr": "Value to use as this (i.e the reference Object) when executing callback.",
                "name": "thisArg Optional"
            }
        ],
        "path": "dom/keyboardlayoutmap/foreach",
        "syntax": "KeyboardLayoutMap.forEach(function callback(currentValue[, index[, array]]) { //your iterator }[, thisArg]);",
        "type": "Keyboard"
    },
    "KeyboardLayoutMap.get": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "KeyboardLayoutMap.get",
        "params": [
            {
                "descr": "The key of the item to return from the map.",
                "name": "key"
            }
        ],
        "path": "dom/keyboardlayoutmap/get",
        "syntax": "var value = KeyboardLayoutMap.get(key)",
        "type": "Keyboard"
    },
    "KeyboardLayoutMap.has": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "KeyboardLayoutMap.has",
        "params": [
            {
                "descr": "The key of an element to search for in the map.",
                "name": "key"
            }
        ],
        "path": "dom/keyboardlayoutmap/has",
        "syntax": "var aBoolean = KeyboardLayoutMap.has(key)",
        "type": "Keyboard"
    },
    "KeyboardLayoutMap.size": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "KeyboardLayoutMap.size",
        "params": [],
        "path": "dom/keyboardlayoutmap/size",
        "syntax": "var size = KeyboardLayoutMap.size()",
        "type": "Keyboard"
    },
    "KeyframeEffect.composite": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "KeyframeEffect.composite",
        "params": [
            {
                "descr": "The keyframeEffect overrides the underlying value it is combined with: blur(2) replaces blur(3).",
                "name": "replace"
            },
            {
                "descr": "The keyframeEffect is added to the underlying value with which it is combined (aka additive): blur(2) blur(3).",
                "name": "add"
            },
            {
                "descr": "The keyframeEffect is accumulated on to the underlying value: blur(5).",
                "name": "accumulate"
            }
        ],
        "path": "dom/keyframeeffect/composite",
        "syntax": "// getting var compositeEnumeration = keyframeEffect.composite; // setting keyframeEffect.composite = 'accumulate'; Value To understand these values, take the example of a keyframeEffect value of blur(2)",
        "type": "Animation"
    },
    "KeyframeEffect.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "KeyframeEffect.constructor",
        "params": [
            {
                "descr": "The DOM element to be animated, or null.",
                "name": "element"
            },
            {
                "descr": "An keyframe object or null.",
                "name": "keyframeSet"
            },
            {
                "descr": "Either an integer representing the animation's duration (in milliseconds), or an Object containing one or more of the following:    delay Optional  The number of milliseconds to delay the start of the animation. Defaults to 0.",
                "name": "keyframeOptions Optional"
            },
            {
                "descr": "Whether the animation runs forwards (normal), backwards (reverse), switches direction after each iteration (alternate), or runs backwards and switches direction after each iteration (alternate-reverse). Defaults to \"normal\".",
                "name": "direction Optional"
            },
            {
                "descr": "The number of milliseconds each iteration of the animation takes to complete. ",
                "name": "duration Optional"
            },
            {
                "descr": "The rate of the animation's change over time. ",
                "name": "easing Optional"
            },
            {
                "descr": "The number of milliseconds to delay after the end of an animation. ",
                "name": "endDelay Optional"
            },
            {
                "descr": "Dictates whether the animation's effects should be reflected by the element(s) prior to playing (\"backwards\"), retained after the animation has completed playing (\"forwards\"), or both. ",
                "name": "fill Optional"
            },
            {
                "descr": "Describes at what point in the iteration the animation should start. ",
                "name": "iterationStart Optional"
            },
            {
                "descr": "The number of times the animation should repeat. ",
                "name": "iterations Optional"
            },
            {
                "descr": "Determines how values are combined between this animation and the element's underlying values.",
                "name": "composite"
            },
            {
                "descr": "Determines how values build from iteration to iteration in the current animation.",
                "name": "iterationComposite"
            },
            {
                "descr": "A KeyframeEffect object that you want to clone.",
                "name": "sourceKeyFrames"
            }
        ],
        "path": "dom/keyframeeffect/keyframeeffect",
        "syntax": "var keyframes = new KeyframeEffect(element, keyframeSet, keyframeOptions);\n or  var keyframes = new KeyframeEffect(sourceKeyFrames);",
        "type": "Animation"
    },
    "KeyframeEffect.getKeyframes": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "KeyframeEffect.getKeyframes",
        "params": [
            {
                "descr": "As many property value pairs as are contained in each keyframe of the animation.",
                "name": "property value pairs"
            },
            {
                "descr": "The offset of the keyframe specified as a number between 0.0 and 1.0 inclusive or null. ",
                "name": "offset"
            },
            {
                "descr": "The computed offset for this keyframe, calculated when the list of computed keyframes was produced according to KeyframeEffect.spacing. ",
                "name": "computedOffset"
            },
            {
                "descr": "The timing function used from this keyframe until the next keyframe in the series.",
                "name": "easing"
            },
            {
                "descr": "The KeyframeEffect.composite operation used to combine the values specified in this keyframe with the underlying value. ",
                "name": "composite"
            }
        ],
        "path": "dom/keyframeeffect/getkeyframes",
        "syntax": "var keyframes = keyframeEffect.getKeyframes();",
        "type": "Animation"
    },
    "KeyframeEffect.iterationComposite": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "KeyframeEffect.iterationComposite",
        "params": [
            {
                "descr": "The keyframeEffect value produced is independent of the current iteration.",
                "name": "replace"
            },
            {
                "descr": "Subsequent iterations of the keyframeEffect build on the final value of the previous iteration.",
                "name": "accumulate"
            }
        ],
        "path": "dom/keyframeeffect/iterationcomposite",
        "syntax": "// getting var iterationCompositeEnumeration = keyframeEffect.iterationComposite; // setting keyframeEffect.iterationComposite = 'replace';  Values  replace The keyframeEffect value produced is independent of the current iteration. accumulate Subsequent iterations of the keyframeEffect build on the final value of the previous iteration.  Specifications    Specification Status Comment   Web AnimationsThe definition of 'KeyframeEffect.iterationComposite' in that specification. Working Draft Editor's draft.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  ?   ?   63Disabled    63Disabled   Disabled From version 63: this feature is behind the dom.animations-api.compositing.enabled preference (needs to be set to true). To change preferences in Firefox, visit about:config.    ?   ?   ?        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support  ?   ?   ?   63Disabled    63Disabled   Disabled From version 63: this feature is behind the dom.animations-api.compositing.enabled",
        "type": "Animation"
    },
    "KeyframeEffect.setKeyframes": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "KeyframeEffect.setKeyframes",
        "params": [
            {
                "descr": "A keyframe object or null. If set to null, the keyframes are replaced with a sequence of empty keyframes. ",
                "name": "keyframes"
            },
            {
                "descr": "The timing function used from this keyframe until the next keyframe in the series.",
                "name": "easing"
            },
            {
                "descr": "The KeyframeEffect.composite operation used to combine the values specified in this keyframe with the underlying value. ",
                "name": "composite"
            }
        ],
        "path": "dom/keyframeeffect/setkeyframes",
        "syntax": "existingKeyframeEffect.setKeyframes(keyframes);",
        "type": "Animation"
    },
    "KeyframeEffect.target": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "KeyframeEffect.target",
        "params": [],
        "path": "dom/keyframeeffect/target",
        "syntax": "var targetElement = document.getElementById(\"elementToAnimate\");\n or  var keyframes = new KeyframeEffect( targetElement, keyframeBlock, timingOptions );\n or  // returns #elementToAnimate keyframes.target; // assigns keyframes a new target keyframes.target = newTargetElement;);",
        "type": "Animation"
    },
    "Lexical grammar": {
        "descr": "This page describes JavaScript's lexical grammar. The source text of ECMAScript scripts gets scanned from left to right and is converted into a sequence of input elements which are tokens, control characters, line terminators, comments or white space. ECMAScript also defines certain keywords and literals and has rules for automatic insertion of semicolons to end statements.",
        "name": "Lexical grammar",
        "params": [],
        "path": "javascript/lexical_grammar",
        "syntax": "0b or 0B). Because this syntax is new in ECMAScript 2015, see the browser compatibility table, below. If the digits after the 0b",
        "type": "Miscellaneous"
    },
    "LinearAccelerationSensor.constructor": {
        "descr": "The LinearAccelerationSensor constructor creates a new LinearAccelerationSensor object which provides on each reading the acceleration applied to the device along all three axes, but without the contribution of gravity.",
        "name": "LinearAccelerationSensor.constructor",
        "params": [
            {
                "descr": "Options are as follows:   frequency: The desired number of times per second a sample should be taken, meaning the number of times per second that sensor.onreading will be called. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/linearaccelerationsensor/linearaccelerationsensor",
        "syntax": "var linearAccelerationSensor = new LinearAccelerationSensor([options])",
        "type": "Sensors"
    },
    "LinearAccelerationSensor.x": {
        "descr": "The x read-only property of the LinearAccelerationSensor interface returns a double precision integer containing the linear acceleration of the device along the device's x axis.",
        "name": "LinearAccelerationSensor.x",
        "params": [],
        "path": "dom/linearaccelerationsensor/x",
        "syntax": "var xLinearAccelerationSensor = linearAccelerationSensor.x Value A Number. Example Linear acceleration is typically read in the Sensor.onreading event callback. In the example below this occurs sixty times a second. let laSensor = new LinearAccelerationSensor({frequency: 60});\n or  laSensor.addEventListener('reading', e => { console.log(\"Linear acceleration along the X-axis \" + laSensor.x);\n or  console.log(\"Linear acceleration along the Y-axis \" + laSensor.y);\n or  console.log(\"Linear acceleration along the Z-axis \" + laSensor.z);\n or  });\n or  laSensor.start();",
        "type": "Sensors"
    },
    "LinearAccelerationSensor.y": {
        "descr": "The y read-only property of the LinearAccelerationSensor interface returns a double precision integer containing the acceleration of the device along the device's y axis.",
        "name": "LinearAccelerationSensor.y",
        "params": [],
        "path": "dom/linearaccelerationsensor/y",
        "syntax": "var yAcceleration = accelerometer.y Value A Number. Example Linear acceleration is typically read in the Sensor.onreading event callback. In the example below this occurs sixty times a second. let laSensor = new LinearAccelerationSensor({frequency: 60});\n or  laSensor.addEventListener('reading', e => { console.log(\"Linear acceleration along the X-axis \" + laSensor.x);\n or  console.log(\"Linear acceleration along the Y-axis \" + laSensor.y);\n or  console.log(\"Linear acceleration along the Z-axis \" + laSensor.z);\n or  });\n or  laSensor.start();",
        "type": "Sensors"
    },
    "LinearAccelerationSensor.z": {
        "descr": "The z read-only property of the LinearAccelerationSensor interface returns a double precision integer containing the acceleration of the device along the device's z axis.",
        "name": "LinearAccelerationSensor.z",
        "params": [],
        "path": "dom/linearaccelerationsensor/z",
        "syntax": "var zAcceleration = accelerometer.z Value A Number. Example Linear acceleration is typically read in the Sensor.onreading event callback. In the example below this occurs sixty times a second. let laSensor = new LinearAccelerationSensor({frequency: 60});\n or  laSensor.addEventListener('reading', e => { console.log(\"Linear acceleration along the X-axis \" + laSensor.x);\n or  console.log(\"Linear acceleration along the Y-axis \" + laSensor.y);\n or  console.log(\"Linear acceleration along the Z-axis \" + laSensor.z);\n or  });\n or  laSensor.start();",
        "type": "Sensors"
    },
    "Lock.mode": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Lock.mode",
        "params": [],
        "path": "dom/lock/mode",
        "syntax": "var mode = Lock.mode Value One of \"exclusive\" or \"shared\". Example The following examples show how the mode property passed in the call to LockManager.request()",
        "type": "Locks"
    },
    "Lock.name": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Lock.name",
        "params": [],
        "path": "dom/lock/name",
        "syntax": "var name = Lock.name Value A DOMString. Example The following examples show how the name property passed in the call to LockManager.request()",
        "type": "Locks"
    },
    "LockManager.query": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "LockManager.query",
        "params": [],
        "path": "dom/lockmanager/query",
        "syntax": "var promise<LockManagerSnapshot> = LockManager.query()",
        "type": "Locks"
    },
    "LockManager.request": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "LockManager.request",
        "params": [
            {
                "descr": "An identifer or the lock you want to request.",
                "name": "name"
            },
            {
                "descr": "An object describing characteristics of the lock you want to create. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/lockmanager/request",
        "syntax": "LockManager.request(var promise = name[, {options}], callback)",
        "type": "Locks"
    },
    "Logical Operators": {
        "descr": "Logical operators are typically used with Boolean (logical) values. When they are, they return a Boolean value. However, the && and || operators actually return the value of one of the specified operands, so if these operators are used with non-Boolean values, they may return a non-Boolean value.",
        "name": "Logical Operators",
        "params": [],
        "path": "javascript/operators/logical_operators",
        "syntax": "Standard Defined in several sections of the specification: Logical NOT Operator, Binary Logical Operators    ECMAScript Latest Draft (ECMA-262) Draft Defined in several sections of the specification: Logical NOT Operator, Binary Logical Operators     Browser compatibilityUpdate compatibility data on GitHub",
        "type": "Operators"
    },
    "Magnetometer.constructor": {
        "descr": "The Magnetometer constructor creates a new Magnetometer object which returns information about the magnetic field as detected by a device’s primary magnetometer sensor.",
        "name": "Magnetometer.constructor",
        "params": [
            {
                "descr": "Options are as follows:   frequency: The desired number of times per second a sample should be taken, meaning the number of times per second that sensor.onreading will be called. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/magnetometer/magnetometer",
        "syntax": "var magnetometer = new Magnetometer([options])",
        "type": "Sensors"
    },
    "Magnetometer.x": {
        "descr": "The x read-only property of the Magnetometer interface returns a double precision integer containing the magnetic field around the device's x axis.",
        "name": "Magnetometer.x",
        "params": [],
        "path": "dom/magnetometer/x",
        "syntax": "var magnetometerx = magnetometer.x Value A Number. Example The magnetometer is typically read in the Sensor.onreading event callback. In the example below this occurs sixty times a second. let magSensor = new Magnetometer({frequency: 60});\n or  magSensor.addEventListener('reading', e => { console.log(\"Magnetic field along the X-axis \" + magSensor.x);\n or  console.log(\"Magnetic field along the Y-axis \" + magSensor.y);\n or  console.log(\"Magnetic field along the Z-axis \" + magSensor.z);\n or  });\n or  magSensor.start();",
        "type": "Sensors"
    },
    "Magnetometer.y": {
        "descr": "The y read-only property of the Magnetometer interface returns a double precision integer containing the magnetic field around the device's y axis.",
        "name": "Magnetometer.y",
        "params": [],
        "path": "dom/magnetometer/y",
        "syntax": "var magnetometery = magnetometer.x Value A Number. Example The magnetometer is typically read in the Sensor.onreading event callback. In the example below this occurs sixty times a second. let magSensor = new Magnetometer({frequency: 60});\n or  magSensor.addEventListener('reading', e => { console.log(\"Magnetic field along the X-axis \" + magSensor.x);\n or  console.log(\"Magnetic field along the Y-axis \" + magSensor.y);\n or  console.log(\"Magnetic field along the Z-axis \" + magSensor.z);\n or  });\n or  magSensor.start();",
        "type": "Sensors"
    },
    "Magnetometer.z": {
        "descr": "The z read-only property of the Magnetometer interface returns a double precision integer containing the magnetic field around the device's z axis.",
        "name": "Magnetometer.z",
        "params": [],
        "path": "dom/magnetometer/z",
        "syntax": "var magnetometerz = magnetometer.z Value A Number. Example The magnetometer is typically read in the Sensor.onreading event callback. In the example below this occurs sixty times a second. let magSensor = new Magnetometer({frequency: 60});\n or  magSensor.addEventListener('reading', e => { console.log(\"Magnetic field along the X-axis \" + magSensor.x);\n or  console.log(\"Magnetic field along the Y-axis \" + magSensor.y);\n or  console.log(\"Magnetic field along the Z-axis \" + magSensor.z);\n or  });\n or  magSensor.start();",
        "type": "Sensors"
    },
    "Map": {
        "descr": "The Map object holds key-value pairs and remembers the original insertion order of the keys. Any value (both objects and primitive values) may be used as either a key or a value.",
        "name": "Map",
        "params": [
            {
                "descr": "An Array or other iterable object whose elements are key-value pairs (arrays with two elements, e.g. ",
                "name": "iterable"
            },
            {
                "descr": "The value of the length property is 0.",
                "name": "Map.length"
            },
            {
                "descr": "The constructor function that is used to create derived objects.",
                "name": "get Map[@@species]"
            },
            {
                "descr": "Represents the prototype for the Map constructor. ",
                "name": "Map.prototype"
            },
            {
                "descr": "Returns the function that created an instance's prototype. ",
                "name": "Map.prototype.constructor"
            },
            {
                "descr": "Returns the number of key/value pairs in the Map object.",
                "name": "Map.prototype.size"
            },
            {
                "descr": "Removes all key/value pairs from the Map object.",
                "name": "Map.prototype.clear()"
            },
            {
                "descr": "Returns true if an element in the Map object existed and has been removed, or false if the element does not exist. ",
                "name": "Map.prototype.delete(key)"
            },
            {
                "descr": "Returns a new Iterator object that contains[key, value] for each element in the Map object in insertion order.",
                "name": "Map.prototype.entries()"
            },
            {
                "descr": "Calls callbackFn once for each key-value pair present in the Map object, in insertion order. ",
                "name": "Map.prototype.forEach(callbackFn[, thisArg])"
            },
            {
                "descr": "Returns the value associated to the key, or undefined if there is none.",
                "name": "Map.prototype.get(key)"
            },
            {
                "descr": "Returns a boolean asserting whether a value has been associated to the key in the Map object or not.",
                "name": "Map.prototype.has(key)"
            },
            {
                "descr": "Returns a new Iterator object that contains the keys for each element in the Map object in insertion order.",
                "name": "Map.prototype.keys()"
            },
            {
                "descr": "Sets the value for the key in the Map object. ",
                "name": "Map.prototype.set(key, value)"
            },
            {
                "descr": "Returns a new Iterator object that contains the values for each element in the Map object in insertion order.",
                "name": "Map.prototype.values()"
            },
            {
                "descr": "Returns a new Iterator object that contains[key, value] for each element in the Map object in insertion order.",
                "name": "Map.prototype[@@iterator]()"
            }
        ],
        "path": "javascript/global_objects/map",
        "syntax": "new Map([iterable])",
        "type": "Map"
    },
    "Map.@@species": {
        "descr": "The Map[@@species] accessor property returns the Map constructor.",
        "name": "Map.@@species",
        "params": [],
        "path": "javascript/global_objects/map/@@species",
        "syntax": "Map[Symbol.species]  Description The species accessor property returns the default constructor for Map objects. Subclass constructors may over-ride it to change the constructor assignment. Examples The species property returns the default constructor function, which is the Map constructor for Map objects: Map[Symbol.species]; // function Map()",
        "type": "Map"
    },
    "Math.abs": {
        "descr": "The Math.abs() function returns the absolute value of a number, that is",
        "name": "Math.abs",
        "params": [
            {
                "descr": "A number.",
                "name": "x"
            }
        ],
        "path": "javascript/global_objects/math/abs",
        "syntax": "Math.abs(x)",
        "type": "Math"
    },
    "Math.acos": {
        "descr": "The Math.acos() function returns the arccosine (in radians) of a number, that is",
        "name": "Math.acos",
        "params": [
            {
                "descr": "A number.",
                "name": "x"
            }
        ],
        "path": "javascript/global_objects/math/acos",
        "syntax": "Math.acos(x)",
        "type": "Math"
    },
    "Math.acosh": {
        "descr": "The Math.acosh() function returns the hyperbolic arc-cosine of a number, that is",
        "name": "Math.acosh",
        "params": [
            {
                "descr": "A number.",
                "name": "x"
            }
        ],
        "path": "javascript/global_objects/math/acosh",
        "syntax": "Math.acosh(x)",
        "type": "Math"
    },
    "Math.asin": {
        "descr": "The Math.asin() function returns the arcsine (in radians) of a number, that is",
        "name": "Math.asin",
        "params": [
            {
                "descr": "A number.",
                "name": "x"
            }
        ],
        "path": "javascript/global_objects/math/asin",
        "syntax": "Math.asin(x)",
        "type": "Math"
    },
    "Math.asinh": {
        "descr": "The Math.asinh() function returns the hyperbolic arcsine of a number, that is",
        "name": "Math.asinh",
        "params": [
            {
                "descr": "A number.",
                "name": "x"
            }
        ],
        "path": "javascript/global_objects/math/asinh",
        "syntax": "Math.asinh(x)",
        "type": "Math"
    },
    "Math.atan": {
        "descr": "The Math.atan() function returns the arctangent (in radians) of a number, that is",
        "name": "Math.atan",
        "params": [
            {
                "descr": "A number.",
                "name": "x"
            }
        ],
        "path": "javascript/global_objects/math/atan",
        "syntax": "Math.atan(x)",
        "type": "Math"
    },
    "Math.atan2": {
        "descr": "The Math.atan2() function returns the angle in the plane (in radians) between the positive x-axis and the ray from (0,0) to the point (x,y), for Math.atan2(y,x).",
        "name": "Math.atan2",
        "params": [
            {
                "descr": "The y coordinate of the point.",
                "name": "y"
            },
            {
                "descr": "The x coordinate of the point",
                "name": "x"
            }
        ],
        "path": "javascript/global_objects/math/atan2",
        "syntax": "Math.atan2(y, x)",
        "type": "Math"
    },
    "Math.atanh": {
        "descr": "The Math.atanh() function returns the hyperbolic arctangent of a number, that is",
        "name": "Math.atanh",
        "params": [
            {
                "descr": "A number.",
                "name": "x"
            }
        ],
        "path": "javascript/global_objects/math/atanh",
        "syntax": "Math.atanh(x)",
        "type": "Math"
    },
    "Math.cbrt": {
        "descr": "The Math.cbrt() function returns the cube root of a number, that is",
        "name": "Math.cbrt",
        "params": [
            {
                "descr": "A number.",
                "name": "x"
            }
        ],
        "path": "javascript/global_objects/math/cbrt",
        "syntax": "Math.cbrt(x)",
        "type": "Math"
    },
    "Math.ceil": {
        "descr": "The Math.ceil() function returns the smallest integer greater than or equal to a given number.",
        "name": "Math.ceil",
        "params": [
            {
                "descr": "A number.",
                "name": "x"
            }
        ],
        "path": "javascript/global_objects/math/ceil",
        "syntax": "Math.ceil(x)",
        "type": "Math"
    },
    "Math.clz32": {
        "descr": "The Math.clz32() function returns the number of leading zero bits in the 32-bit binary representation of a number.",
        "name": "Math.clz32",
        "params": [
            {
                "descr": "A number.",
                "name": "x"
            }
        ],
        "path": "javascript/global_objects/math/clz32",
        "syntax": "Math.clz32(x)",
        "type": "Math"
    },
    "Math.cos": {
        "descr": "The Math.cos() static function returns the cosine of the specified angle, which must be specified in radians. This value is      length    adjacent      length    hypotenuse      .",
        "name": "Math.cos",
        "params": [
            {
                "descr": "The angle in radians for which to return the cosine.",
                "name": "x"
            }
        ],
        "path": "javascript/global_objects/math/cos",
        "syntax": "Math.cos(x)",
        "type": "Math"
    },
    "Math.cosh": {
        "descr": "The Math.cosh() function returns the hyperbolic cosine of a number, that can be expressed using the constant e:",
        "name": "Math.cosh",
        "params": [
            {
                "descr": "A number.",
                "name": "x"
            }
        ],
        "path": "javascript/global_objects/math/cosh",
        "syntax": "Math.cosh(x)",
        "type": "Math"
    },
    "Math.exp": {
        "descr": "The Math.exp() function returns ex, where x is the argument, and e is Euler's number (also known as Napier's constant), the base of the natural logarithms.",
        "name": "Math.exp",
        "params": [
            {
                "descr": "A number.",
                "name": "x"
            }
        ],
        "path": "javascript/global_objects/math/exp",
        "syntax": "Math.exp(x)",
        "type": "Math"
    },
    "Math.expm1": {
        "descr": "The Math.expm1() function returns ex - 1, where x is the argument, and e the base of the natural logarithms.",
        "name": "Math.expm1",
        "params": [
            {
                "descr": "A number.",
                "name": "x"
            }
        ],
        "path": "javascript/global_objects/math/expm1",
        "syntax": "Math.expm1(x)",
        "type": "Math"
    },
    "Math.floor": {
        "descr": "The Math.floor() function returns the largest integer less than or equal to a given number.",
        "name": "Math.floor",
        "params": [
            {
                "descr": "A number.",
                "name": "x"
            }
        ],
        "path": "javascript/global_objects/math/floor",
        "syntax": "Math.floor(x)",
        "type": "Math"
    },
    "Math.fround": {
        "descr": "The nearest 32-bit single precision float representation of the given number.",
        "name": "Math.fround",
        "params": [
            {
                "descr": "A Number. If the parameter is of a different type, it will get converted to a number or to NaN if it cannot be converted.",
                "name": "doubleFloat"
            }
        ],
        "path": "javascript/global_objects/math/fround",
        "syntax": "var singleFloat = Math.fround(doubleFloat);",
        "type": "Math"
    },
    "Math.hypot": {
        "descr": "The Math.hypot() function returns the square root of the sum of squares of its arguments, that is",
        "name": "Math.hypot",
        "params": [
            {
                "descr": "Numbers.",
                "name": "value1, value2, ..."
            }
        ],
        "path": "javascript/global_objects/math/hypot",
        "syntax": "Math.hypot([value1[, value2[, ...]]])",
        "type": "Math"
    },
    "Math.imul": {
        "descr": "The Math.imul() function returns the result of the C-like 32-bit multiplication of the two parameters.",
        "name": "Math.imul",
        "params": [
            {
                "descr": "First number.",
                "name": "a"
            },
            {
                "descr": "Second number.",
                "name": "b"
            }
        ],
        "path": "javascript/global_objects/math/imul",
        "syntax": "var product = Math.imul(a, b);",
        "type": "Math"
    },
    "Math.log": {
        "descr": "The Math.log() function returns the natural logarithm (base e) of a number, that is",
        "name": "Math.log",
        "params": [
            {
                "descr": "A number.",
                "name": "x"
            }
        ],
        "path": "javascript/global_objects/math/log",
        "syntax": "Math.log(x)",
        "type": "Math"
    },
    "Math.log10": {
        "descr": "The Math.log10() function returns the base 10 logarithm of a number, that is",
        "name": "Math.log10",
        "params": [
            {
                "descr": "A number.",
                "name": "x"
            }
        ],
        "path": "javascript/global_objects/math/log10",
        "syntax": "Math.log10(x)",
        "type": "Math"
    },
    "Math.log1p": {
        "descr": "The Math.log1p() function returns the natural logarithm (base e) of 1 + a number, that is",
        "name": "Math.log1p",
        "params": [
            {
                "descr": "A number.",
                "name": "x"
            }
        ],
        "path": "javascript/global_objects/math/log1p",
        "syntax": "Math.log1p(x)",
        "type": "Math"
    },
    "Math.log2": {
        "descr": "The Math.log2() function returns the base 2 logarithm of a number, that is",
        "name": "Math.log2",
        "params": [
            {
                "descr": "A number.",
                "name": "x"
            }
        ],
        "path": "javascript/global_objects/math/log2",
        "syntax": "Math.log2(x)",
        "type": "Math"
    },
    "Math.max": {
        "descr": "The Math.max() function returns the largest of zero or more numbers.",
        "name": "Math.max",
        "params": [
            {
                "descr": "Numbers.",
                "name": "value1, value2, ..."
            }
        ],
        "path": "javascript/global_objects/math/max",
        "syntax": "Math.max([value1[, value2[, ...]]])",
        "type": "Math"
    },
    "Math.min": {
        "descr": "The static function Math.min() returns the lowest-valued number passed into it, or NaN if any parameter isn't a number and can't be converted into one.",
        "name": "Math.min",
        "params": [
            {
                "descr": "Zero or more numbers among which the lowest value will be selected and returned.",
                "name": "value1, value2, ..."
            }
        ],
        "path": "javascript/global_objects/math/min",
        "syntax": "Math.min([value1[, value2[, ...]]])",
        "type": "Math"
    },
    "Math.pow": {
        "descr": "The Math.pow() function returns the base to the exponent power, that is, baseexponent.",
        "name": "Math.pow",
        "params": [
            {
                "descr": "The base number.",
                "name": "base"
            },
            {
                "descr": "The exponent used to raise the base.",
                "name": "exponent"
            }
        ],
        "path": "javascript/global_objects/math/pow",
        "syntax": "Math.pow(base, exponent)",
        "type": "Math"
    },
    "Math.random": {
        "descr": "The Math.random() function returns a floating-point, pseudo-random number in the range 0–1 (inclusive of 0, but not 1) with approximately uniform distribution over that range — which you can then scale to your desired range. The implementation selects the initial seed to the random number generation algorithm; it cannot be chosen or reset by the user.",
        "name": "Math.random",
        "params": [],
        "path": "javascript/global_objects/math/random",
        "syntax": "Math.random()",
        "type": "Math"
    },
    "Math.round": {
        "descr": "The Math.round() function returns the value of a number rounded to the nearest integer.",
        "name": "Math.round",
        "params": [
            {
                "descr": "A number.",
                "name": "x"
            }
        ],
        "path": "javascript/global_objects/math/round",
        "syntax": "Math.round(x)",
        "type": "Math"
    },
    "Math.sign": {
        "descr": "The Math.sign() function returns the sign of a number, indicating whether the number is positive, negative or zero.",
        "name": "Math.sign",
        "params": [
            {
                "descr": "A number.",
                "name": "x"
            }
        ],
        "path": "javascript/global_objects/math/sign",
        "syntax": "Math.sign(x)",
        "type": "Math"
    },
    "Math.sin": {
        "descr": "The Math.sin() function returns the sine of a number.",
        "name": "Math.sin",
        "params": [
            {
                "descr": "A number (given in radians).",
                "name": "x"
            }
        ],
        "path": "javascript/global_objects/math/sin",
        "syntax": "Math.sin(x)",
        "type": "Math"
    },
    "Math.sinh": {
        "descr": "The Math.sinh() function returns the hyperbolic sine of a number, that can be expressed using the constant e:",
        "name": "Math.sinh",
        "params": [
            {
                "descr": "A number.",
                "name": "x"
            }
        ],
        "path": "javascript/global_objects/math/sinh",
        "syntax": "Math.sinh(x)",
        "type": "Math"
    },
    "Math.sqrt": {
        "descr": "The Math.sqrt() function returns the square root of a number, that is",
        "name": "Math.sqrt",
        "params": [
            {
                "descr": "A number.",
                "name": "x"
            }
        ],
        "path": "javascript/global_objects/math/sqrt",
        "syntax": "Math.sqrt(x)",
        "type": "Math"
    },
    "Math.tan": {
        "descr": "The Math.tan() function returns the tangent of a number.",
        "name": "Math.tan",
        "params": [
            {
                "descr": "A number representing an angle in radians.",
                "name": "x"
            }
        ],
        "path": "javascript/global_objects/math/tan",
        "syntax": "Math.tan(x)",
        "type": "Math"
    },
    "Math.tanh": {
        "descr": "The Math.tanh() function returns the hyperbolic tangent of a number, that is",
        "name": "Math.tanh",
        "params": [
            {
                "descr": "A number.",
                "name": "x"
            }
        ],
        "path": "javascript/global_objects/math/tanh",
        "syntax": "Math.tanh(x)",
        "type": "Math"
    },
    "Math.trunc": {
        "descr": "The Math.trunc() function returns the integer part of a number by removing any fractional digits.",
        "name": "Math.trunc",
        "params": [
            {
                "descr": "A number.",
                "name": "x"
            }
        ],
        "path": "javascript/global_objects/math/trunc",
        "syntax": "Math.trunc(x)",
        "type": "Math"
    },
    "Media Source Extensions API: Transcoding assets for MSE": {
        "descr": "Below we'll cover all of these steps, but first let's look at a toolchain we can use to do this fairly easily.",
        "name": "Media Source Extensions API: Transcoding assets for MSE",
        "params": [],
        "path": "dom/media_source_extensions_api/transcoding_assets_for_mse",
        "syntax": "MediaSource.isTypeSupported method: MediaSource.isTypeSupported('audio/mp3');\n or  // false MediaSource.isTypeSupported('video/mp4');\n or  // true MediaSource.isTypeSupported('video/mp4; codecs=\"avc1.4D4028, mp4a.40.2\"');\n or  // true);",
        "type": "Media"
    },
    "Media Streams API": {
        "descr": "The Media Capture and Streams API, often called the Media Streams API or simply MediaStream API, is an API related to WebRTC which provides support for streaming audio and video data. It provides the interfaces and methods for working with the streams and their constituent tracks, the constraints associated with data formats, the success and error callbacks when using the data asynchronously, and the events that are fired during the process.",
        "name": "Media Streams API",
        "params": [],
        "path": "dom/media_streams_api",
        "syntax": "MediaStream  55  Yes  44  No  42  No   active  Yes  12  52  ?   ?   ?     ended  ? — 54  ? — 54   Deprecated in Chrome 52.    ?   No  ?  ? — 39  ?    id ? — 54  12  41  ?  ? — 39  ?    onaddtrack  Yes  12  50  ?   ?   ?    onremovetrack  Yes  12  No  ?   ?   ?    addTrack  Yes  12  44  ?   ?   ?    clone  Yes  12  48  ?   ?   ?    getAudioTracks  Yes  12  ?   ?   Yes  ?    getTrackById  Yes  12  49  No  ?   ?     getTracks   Yes  12  ?   ?   Yes  ?     getVideoTracks   Yes  12  ?   ?   Yes  ?    removeTrack  Yes  12  ?   ?   Yes  ?     label  ? — 54  ? — 54   Deprecated in Chrome 45.    ?   ?   No  No  ?     stop   No  13  ?   No  No  ?         Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet      Basic support   Yes  Yes  Yes  ?   No  ?   Yes   MediaStream  55  55  Yes  42  ?   No  6.0   active  Yes  Yes  Yes  52  ?   ?   Yes    ended  ? — 54  ? — 54   Deprecated in Chrome 52.   ? — 54  ? — 54   Deprecated in Chrome 52.    Yes  No ? — 39  ?   Yes   id ? — 54 ? — 54  Yes  41 ? — 39  ?   Yes   onaddtrack  Yes  Yes  Yes  50  ?   ?   Yes   onremovetrack  Yes  Yes  Yes  No  ?   ?   Yes   addTrack  Yes  Yes  Yes  No  ?   ?   Yes   clone  Yes  Yes  Yes  48  ?   ?   Yes   getAudioTracks  Yes  Yes  Yes  ?   ?   ?   Yes   getTrackById  Yes  Yes  Yes  49  ?   ?   Yes    getTracks   Yes  Yes  Yes  ?   ?   ?   Yes    getVideoTracks   Yes  Yes  Yes  ?   ?   ?   Yes   removeTrack  Yes  Yes  ?   ?   ?   ?   Yes    label  ? — 54  ? — 54   Deprecated in Chrome 45.   ? — 54  ? — 54   Deprecated in Chrome 45.    ?   ?   No  ?   Yes    stop   No  No  ?   ?   No  ?   No     See also   WebRTC - the introductory page to the API mediaDevices.getUserMedia()",
        "type": "Media Streams"
    },
    "Media Streams API: Constraints": {
        "descr": "Historically, writing scripts for the Web that work intimately with Web APIs has had a well-known challenge: often, your code needs to know whether or not an API exists and if so, what its limitations are on the user agent it's running on. Figuring this out has often been difficult, and has usually involved looking at some combination of which user agent (or browser) you're running on, which version it is, looking to see if certain objects exist, trying to see whether various things work or not and determining what errors occur, and so forth. The result has been a lot of very fragile code, or a reliance on libraries which figure this stuff out for you, then implement polyfills to patch the holes in the implementation on your behalf.",
        "name": "Media Streams API: Constraints",
        "params": [
            {
                "descr": "The <video> element that will show the stream.",
                "name": "videoElement"
            },
            {
                "descr": "A <div> into which any error messages or other log-type output will be written.",
                "name": "logElement"
            },
            {
                "descr": "A <ul> (unordered list) into which we programatically add the names of each of the constrainable properties supported by the user's browser.",
                "name": "supportedConstraintList"
            },
            {
                "descr": "A <textarea> element that lets the user edit the code for the video track's constraint set.",
                "name": "videoConstraintEditor"
            },
            {
                "descr": "A <textarea> element that lets the user edit the code for the audio track's constraint set.",
                "name": "audioConstraintEditor"
            },
            {
                "descr": "A <textarea> (which is always disabled) that displays the current settings for the video track's constrainable properties.",
                "name": "videoSettingsText"
            },
            {
                "descr": "A <textarea> (which is always disabled) that displays the current settings for the audio track's constrainable properties.",
                "name": "audioSettingsText"
            }
        ],
        "path": "dom/media_streams_api/constraints",
        "syntax": "MediaStreamTrack.getCapabilities()",
        "type": "Media Streams"
    },
    "MediaDeviceInfo.label": {
        "descr": "The label readonlyinline property of the MediaDeviceInfo interface returns a DOMString, that is a label describing this device (for example \"External USB Webcam\"). Only available during active MediaStream use, or when persistent permissions have been granted.",
        "name": "MediaDeviceInfo.label",
        "params": [
            {
                "descr": "This interface is available in Opera through the adapter.js polyfill.",
                "name": "?"
            },
            {
                "descr": "This interface is available in Opera through the adapter.js polyfill.",
                "name": "?"
            }
        ],
        "path": "dom/mediadeviceinfo/label",
        "syntax": "var label = MediaDeviceInfo.label; Value A DOMString which describes the media device. For security reasons, the label is always an empty string (\"\") if the user has not obtained permission to use at least one media device, either by starting a stream from the microphone or camera, or by persistent permissions being granted.",
        "type": "Media"
    },
    "MediaDevices.enumerateDevices": {
        "descr": "The MediaDevices method enumerateDevices() requests a list of the available media input and output devices, such as microphones, cameras, headsets, and so forth. The returned Promise is resolved with a MediaDeviceInfo array describing the devices.",
        "name": "MediaDevices.enumerateDevices",
        "params": [],
        "path": "dom/mediadevices/enumeratedevices",
        "syntax": "var enumeratorPromise = navigator.mediaDevices.enumerateDevices();",
        "type": "Media"
    },
    "MediaDevices.getSupportedConstraints": {
        "descr": "The getSupportedConstraints() method of the MediaDevices interface returns an object based on the MediaTrackSupportedConstraints dictionary, whose member fields each specify one of the constrainable properties the user agent understands.",
        "name": "MediaDevices.getSupportedConstraints",
        "params": [],
        "path": "dom/mediadevices/getsupportedconstraints",
        "syntax": "var supportedConstraints = navigator.mediaDevices.getSupportedConstraints();",
        "type": "Media"
    },
    "MediaDevices.getUserMedia": {
        "descr": "The MediaDevices getUserMedia() method prompts the user for permission to use a media input which produces a MediaStream with tracks containing the requested types of media. That stream can include, for example, a video track (produced by either a hardware or virtual video source such as a camera, video recording device, screen sharing service, and so forth), an audio track (similarly, produced by a physical or virtual audio source like a microphone, A/D converter, or the like), and possibly other track types.",
        "name": "MediaDevices.getUserMedia",
        "params": [
            {
                "descr": "A MediaStreamConstraints object specifying the types of media to request, along with any requirements for each type. ",
                "name": "constraints"
            },
            {
                "descr": "Although the user and operating system both granted access to the hardware device, and no hardware issues occurred that would cause a NotReadableError, some problem occurred which prevented the device from being used.",
                "name": "AbortError"
            },
            {
                "descr": "The user has specified that the current browsing instance is not permitted access to the device; or the user has denied access for the current session; or the user has denied all access to user media devices globally. Older versions of the specification used SecurityError for this instead; SecurityError has taken on a new meaning.",
                "name": "NotAllowedError"
            },
            {
                "descr": "No media tracks of the type specified were found that satisfy the given constraints.",
                "name": "NotFoundError"
            },
            {
                "descr": "Although the user granted permission to use the matching devices, a hardware error occurred at the operating system, browser, or Web page level which prevented access to the device.",
                "name": "NotReadableError"
            },
            {
                "descr": "The specified constraints resulted in no candidate devices which met the criteria requested. ",
                "name": "OverconstrainedError"
            },
            {
                "descr": "User media support is disabled on the Document on which getUserMedia() was called. ",
                "name": "SecurityError"
            },
            {
                "descr": "The list of constraints specified is empty, or has all constraints set to false.",
                "name": "TypeError"
            }
        ],
        "path": "dom/mediadevices/getusermedia",
        "syntax": "var promise = navigator.mediaDevices.getUserMedia(constraints);",
        "type": "Media"
    },
    "MediaDevices.ondevicechange": {
        "descr": "The MediaDevices.ondevicechange property is an EventHandler which specifies a function to be called when the devicechange event occurs on a MediaDevices instance. This happens whenever the set of media devices available to the user agent and, by extension, to the web site or app has changed. You can at any time use enumerateDevices() to get the updated list of available devices.",
        "name": "MediaDevices.ondevicechange",
        "params": [],
        "path": "dom/mediadevices/ondevicechange",
        "syntax": "MediaDevices.ondevicechange = eventHandler;  Value A function you provide which accepts as input a Event object describing the devicechange event that occurred. There is no information about the change included in the event object; to get the updated list of devices, you'll have to use enumerateDevices()",
        "type": "Media"
    },
    "MediaElementAudioSourceNode.constructor": {
        "descr": "The MediaElementAudioSourceNode() constructor creates a new MediaElementAudioSourceNode object instance.",
        "name": "MediaElementAudioSourceNode.constructor",
        "params": [
            {
                "descr": "An AudioContext representing the audio context you want the node to be associated with.",
                "name": "context"
            },
            {
                "descr": "A MediaElementAudioSourceOptions dictionary object defining the properties you want the MediaElementAudioSourceNode to have:   mediaElement: An HTMLMediaElement that will be used as the source for the audio.",
                "name": "options"
            }
        ],
        "path": "dom/mediaelementaudiosourcenode/mediaelementaudiosourcenode",
        "syntax": "var myAudioSource = new MediaElementAudioSourceNode(context, options);",
        "type": "Audio"
    },
    "MediaError.code": {
        "descr": "The read-only property MediaError.code returns a numeric value which represents the kind of error that occurred on a media element. To get a text string with specific diagnostic information, see MediaError.message.",
        "name": "MediaError.code",
        "params": [],
        "path": "dom/mediaerror/code",
        "syntax": "var myError = mediaError.code; Value A numeric value indicating the general type of error which occurred. The possible values are described below, in Media error code constants. Media error code constants    Name Value Description     MEDIA_ERR_ABORTED 1 The fetching of the associated resource was aborted by the user's request.   MEDIA_ERR_NETWORK 2 Some kind of network error occurred which prevented the media from being successfully fetched, despite having previously been available.   MEDIA_ERR_DECODE 3 Despite having previously been determined to be usable, an error occurred while trying to decode the media resource, resulting in an error.   MEDIA_ERR_SRC_NOT_SUPPORTED 4 The associated resource or media provider object (such as a MediaStream) has been found to be unsuitable.    Example",
        "type": "Media"
    },
    "MediaError.message": {
        "descr": "The read-only property MediaError.message returns a DOMString which contains a human-readable string offering specific diagnostic details related to the error described by the MediaError object, or an empty string (\"\") if no diagnostic information can be determined or provided.",
        "name": "MediaError.message",
        "params": [],
        "path": "dom/mediaerror/message",
        "syntax": "var errorMessage = mediaError.message; Value A DOMString providing a detailed, specific explanation of what went wrong and possibly how it might be fixed. This is not simply a generic description of the MediaError.code property's value, but instead goes deeper into the specifics of this particular error and its circumstances. If no specific details are available, this string is empty. Example This example creates a <audio> element, establishes an error handler for it, then lets the user click buttons to choose whether to assign a valid audio file or a missing file to the element's src attribute. The error handler simply outputs a message to a box onscreen describing the error, including both the code and the message. Only the relevant parts of the code are displayed; you can see the complete source code here. The example creates an <audio> element and lets the user assign either a valid music file to it, or a link to a file which doesn't exist. This lets us see the behavior of the error event handler, which is received by an event handler we add to the <audio> element itself. The error handler looks like this:  audioElement.onerror = function() { let s = \"\"; let err = audioElement.error; switch(err.code) { case MediaError.MEDIA_ERR_ABORTED: s += \"The user canceled the audio.\"; break; case MediaError.MEDIA_ERR_NETWORK: s+= \"A network error occurred while fetching the audio.\"; break; case MediaError.MEDIA_ERR_DECODE: s+= \"An error occurred while decoding the audio.\"; break; case MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED: s+= \"The audio is missing or is in a format not supported by your browser.\"; break; default: s += \"An unknown error occurred.\"; break; } let message = err.message; if (message && message.length) { s += \" \" + message; } displayErrorMessage(\"<strong>Error \" + err.code + \":</strong> \" + s + \"<br>\");\n or  };);",
        "type": "Media"
    },
    "MediaKeySession.close": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MediaKeySession.close",
        "params": [],
        "path": "dom/mediakeysession/close",
        "syntax": "mediaKeySession.close().then(function() { ... });",
        "type": "Encrypted Media"
    },
    "MediaKeySession.generateRequest": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MediaKeySession.generateRequest",
        "params": [],
        "path": "dom/mediakeysession/generaterequest",
        "syntax": "mediaKeySession.generateRequest().then(function) { ... });",
        "type": "Encrypted Media"
    },
    "MediaKeySession.load": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MediaKeySession.load",
        "params": [
            {
                "descr": "A unique string generated by the content decription module for the current media object and its associated keys or licenses.",
                "name": "sessionId"
            }
        ],
        "path": "dom/mediakeysession/load",
        "syntax": "mediaKeySession.load(sessionId).then(function(booleanValue) { ... });",
        "type": "Encrypted Media"
    },
    "MediaKeySession.onkeystatuseschange": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MediaKeySession.onkeystatuseschange",
        "params": [],
        "path": "dom/mediakeysession/onkeystatuseschange",
        "syntax": "MediaKeySession.onkeystatuseschange = function(keystatuschange) { ... }",
        "type": "Encrypted Media"
    },
    "MediaKeySession.onmessage": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MediaKeySession.onmessage",
        "params": [],
        "path": "dom/mediakeysession/onmessage",
        "syntax": "MediaKeySession.onmessage = function(MediaKeyMessageEvent) { ... }",
        "type": "Encrypted Media"
    },
    "MediaKeySession.update": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MediaKeySession.update",
        "params": [
            {
                "descr": "An instance of type BufferSource.",
                "name": "response"
            }
        ],
        "path": "dom/mediakeysession/update",
        "syntax": "mediaKeySession.update(response).then(function() { ... });",
        "type": "Encrypted Media"
    },
    "MediaKeyStatusMap.forEach": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MediaKeyStatusMap.forEach",
        "params": [
            {
                "descr": "Function to execute for each element, taking three arguments:  currentValue The current element being processed in the array.",
                "name": "callback"
            },
            {
                "descr": "The index of the current element being processed in the array.",
                "name": "index"
            },
            {
                "descr": "Which array forEach() is being applied to.",
                "name": "array"
            },
            {
                "descr": "Value used as this when executing callback.",
                "name": "thisArg Optional"
            }
        ],
        "path": "dom/mediakeystatusmap/foreach",
        "syntax": "mediaKeyStatusMap.forEach(callback[, thisArg])",
        "type": "Encrypted Media"
    },
    "MediaKeyStatusMap.get": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MediaKeyStatusMap.get",
        "params": [
            {
                "descr": "The key whose value you want returned.",
                "name": "key"
            }
        ],
        "path": "dom/mediakeystatusmap/get",
        "syntax": "var value = mediaKeyStatusMap.get(key);",
        "type": "Encrypted Media"
    },
    "MediaKeyStatusMap.has": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MediaKeyStatusMap.has",
        "params": [
            {
                "descr": "The key whose value you want returned",
                "name": "key"
            }
        ],
        "path": "dom/mediakeystatusmap/has",
        "syntax": "var boolean = mediaKeyStatusMap(key)",
        "type": "Encrypted Media"
    },
    "MediaKeyStatusMap.keys": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MediaKeyStatusMap.keys",
        "params": [],
        "path": "dom/mediakeystatusmap/keys",
        "syntax": "var iterator = mediaKeyStatusMap.keys()",
        "type": "Encrypted Media"
    },
    "MediaKeyStatusMap.values": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MediaKeyStatusMap.values",
        "params": [],
        "path": "dom/mediakeystatusmap/values",
        "syntax": "var iterator = mediaKeyStatusMap.values()",
        "type": "Encrypted Media"
    },
    "MediaKeySystemAccess.createMediaKeys": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MediaKeySystemAccess.createMediaKeys",
        "params": [],
        "path": "dom/mediakeysystemaccess/createmediakeys",
        "syntax": "var mediaKeys = mediaKeySystemAccess.createMediaKeys();",
        "type": "Encrypted Media"
    },
    "MediaKeySystemAccess.getConfiguration": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MediaKeySystemAccess.getConfiguration",
        "params": [],
        "path": "dom/mediakeysystemaccess/getconfiguration",
        "syntax": "var mediaKeySystemConfiguration = mediaKeySystemAccess.getConfiguration();",
        "type": "Encrypted Media"
    },
    "MediaKeys.createSession": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MediaKeys.createSession",
        "params": [],
        "path": "dom/mediakeys/createsession",
        "syntax": "​var mediaKeySessionObject = MediaKeys.createSession([MediaKeySessionType]);",
        "type": "Encrypted Media"
    },
    "MediaKeys.setServerCertificate": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MediaKeys.setServerCertificate",
        "params": [],
        "path": "dom/mediakeys/setservercertificate",
        "syntax": "MediaKeys.setServerCertificate([MediaKeySessionType]).then(function() { ... });",
        "type": "Encrypted Media"
    },
    "MediaMetadata.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MediaMetadata.constructor",
        "params": [],
        "path": "dom/mediametadata/mediametadata",
        "syntax": "var mediaMetadata = new MediaMetadata([metadata])",
        "type": "Media Session"
    },
    "MediaQueryList.addListener": {
        "descr": "The addListener() method of the MediaQueryList interface adds a listener to the MediaQueryListener that will run a custom callback function in response to the media query status changing.",
        "name": "MediaQueryList.addListener",
        "params": [
            {
                "descr": "A function or function reference representing the callback function you want to run when the media query status changes. ",
                "name": "func"
            }
        ],
        "path": "dom/mediaquerylist/addlistener",
        "syntax": "MediaQueryList.addListener(func)",
        "type": "CSS"
    },
    "MediaQueryList.matches": {
        "descr": "The matches read-only property of the MediaQueryList interface is a Boolean that returns true if the document currently matches the media query list, or false if not.",
        "name": "MediaQueryList.matches",
        "params": [],
        "path": "dom/mediaquerylist/matches",
        "syntax": "var matches = MediaQueryList.matches; Value A Boolean; returns true if the document currently matches the media query list, false if not. Examples var mql = window.matchMedia('(max-width: 600px)');\n or  if(mql.matches) { // media query test returning true });",
        "type": "CSS"
    },
    "MediaQueryList.media": {
        "descr": "The media read-only property of the MediaQueryList interface is a DOMString representing a serialized media query.",
        "name": "MediaQueryList.media",
        "params": [],
        "path": "dom/mediaquerylist/media",
        "syntax": "var media = MediaQueryList.media; Value A DOMString representing a serialized media query. Examples var mql = window.matchMedia('(max-width: 600px)');\n or  console.log(mql.media);",
        "type": "CSS"
    },
    "MediaQueryList.onchange": {
        "descr": "The onchange property of the MediaQueryList interface is an event handler property representing a function that is invoked when the change event fires, i.e when the status of media query support changes. The event object is a MediaQueryListEvent instance, which is recognised as a MediaListQuery instance in older browsers, for backwards compatibility purposes.",
        "name": "MediaQueryList.onchange",
        "params": [],
        "path": "dom/mediaquerylist/onchange",
        "syntax": "MediaQueryList.onchange = function() { ... };",
        "type": "CSS"
    },
    "MediaQueryList.removeListener": {
        "descr": "The removeListener() method of the MediaQueryList interface removes a listener from the MediaQueryListener.",
        "name": "MediaQueryList.removeListener",
        "params": [
            {
                "descr": "A function or function reference representing the callback function you want to remove. ",
                "name": "func"
            }
        ],
        "path": "dom/mediaquerylist/removelistener",
        "syntax": "MediaQueryList.removeListener(func)",
        "type": "CSS"
    },
    "MediaQueryListEvent.constructor": {
        "descr": "The MediaQueryListEvent constructor creates a new MediaQueryListEvent instance.",
        "name": "MediaQueryListEvent.constructor",
        "params": [
            {
                "descr": "An init object that defines features of the new object instance. ",
                "name": "init"
            }
        ],
        "path": "dom/mediaquerylistevent/mediaquerylistevent",
        "syntax": "var myMqlEvent = new MediaQueryListEvent(init);",
        "type": "CSS"
    },
    "MediaQueryListEvent.matches": {
        "descr": "The matches read-only property of the MediaQueryListEvent interface is a Boolean that returns true if the document currently matches the media query list, or false if not.",
        "name": "MediaQueryListEvent.matches",
        "params": [],
        "path": "dom/mediaquerylistevent/matches",
        "syntax": "var matches = MediaQueryListEvent.matches; Value A Boolean; returns true if the document currently matches the media query list, false if not. Examples var mql = window.matchMedia('(max-width: 600px)');\n or  function screenTest(e) { if (e.matches) { /* the viewport is 600 pixels wide or less */ para.textContent = 'This is a narrow screen — less than 600px wide.'; document.body.style.backgroundColor = 'red'; } else { /* the viewport is more than than 600 pixels wide */ para.textContent = 'This is a wide screen — more than 600px wide.'; document.body.style.backgroundColor = 'blue'; } } mql.addListener(screenTest);",
        "type": "CSS"
    },
    "MediaQueryListEvent.media": {
        "descr": "The media read-only property of the MediaQueryListEvent interface is a DOMString representing a serialized media query.",
        "name": "MediaQueryListEvent.media",
        "params": [],
        "path": "dom/mediaquerylistevent/media",
        "syntax": "var media = MediaQueryListEvent.media; Value A DOMString representing a serialized media query. Examples var mql = window.matchMedia('(max-width: 600px)');\n or  function screenTest(e) { if (e.matches) { /* the viewport is 600 pixels wide or less */ para.textContent = 'This is a narrow screen — less than 600px wide.'; document.body.style.backgroundColor = 'red'; } else { /* the viewport is more than than 600 pixels wide */ para.textContent = 'This is a wide screen — more than 600px wide.'; document.body.style.backgroundColor = 'blue'; } console.log(e.media);\n or  } mql.addListener(screenTest);",
        "type": "CSS"
    },
    "MediaRecorder.audioBitsPerSecond": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MediaRecorder.audioBitsPerSecond",
        "params": [],
        "path": "dom/mediarecorder/audiobitspersecond",
        "syntax": "var audioBitsPerSecond = MediaRecorder.audioBitsPerSecond Value A Number (unsigned long).",
        "type": "Audio"
    },
    "MediaRecorder.constructor": {
        "descr": "The MediaRecorder() constructor creates a new MediaRecorder object that will record a specified MediaStream.",
        "name": "MediaRecorder.constructor",
        "params": [
            {
                "descr": "The MediaStream that will be recorded. ",
                "name": "stream"
            },
            {
                "descr": "A dictionary object that can contain the following properties:   mimeType: The mime type you want to use as the recording container for the new MediaRecorder. ",
                "name": "optionsOptional"
            }
        ],
        "path": "dom/mediarecorder/mediarecorder",
        "syntax": "var mediaRecorder = new MediaRecorder(stream[, options]);",
        "type": "Media Streams"
    },
    "MediaRecorder.isTypeSupported": {
        "descr": "The MediaRecorder.isTypeSupported() method returns a Boolean which is true if the MIME type specified is one the user agent can record.",
        "name": "MediaRecorder.isTypeSupported",
        "params": [
            {
                "descr": "The mimeType to check.",
                "name": "mimeType"
            }
        ],
        "path": "dom/mediarecorder/istypesupported",
        "syntax": "var canRecord = MediaRecorder.isTypeSupported(mimeType)",
        "type": "Media Streams"
    },
    "MediaRecorder.mimeType": {
        "descr": "The MediaRecorder.mimeType read-only property returns the MIME type that is being used as the recording container when it was created. This is the file format of the file that would result from writing all of the recorded data to disk. Keep in mind, of course, that the file format and the codecs associated with the individual tracks are different things entirely; writing tracks that work just fine in a WebM video into an MP4 wrapper may not result in a file that plays everywhere you want it to.",
        "name": "MediaRecorder.mimeType",
        "params": [],
        "path": "dom/mediarecorder/mimetype",
        "syntax": "var mimeType = MediaRecorder.mimeType Value The MIME type being used as the container format for the recorded media, in DOMString form. Example ... if (navigator.mediaDevices) { console.log('getUserMedia supported.');\n or  var constraints = { audio: true, video: true }; var chunks = []; navigator.mediaDevices.getUserMedia(constraints) .then(function(stream) { var options = { audioBitsPerSecond : 128000, videoBitsPerSecond : 2500000, mimeType : 'video/mp4' } var mediaRecorder = new MediaRecorder(stream,options);\n or  m = mediaRecorder; m.mimeType; // would return 'video/mp4' ... }) .catch(function(error) { console.log(error.message);\n or  });",
        "type": "Media Streams"
    },
    "MediaRecorder.ondataavailable": {
        "descr": "The MediaRecorder.ondataavailable event handler (part of the MediaStream Recording API) handles the dataavailable event, letting you run code in response to Blob data being made available for use.",
        "name": "MediaRecorder.ondataavailable",
        "params": [],
        "path": "dom/mediarecorder/ondataavailable",
        "syntax": "MediaRecorder.ondataavailable = function(event) { ... } MediaRecorder.addEventListener('dataavailable', function(event) { ... })",
        "type": "Media Streams"
    },
    "MediaRecorder.onerror": {
        "descr": "The MediaRecorder interface's onerror event handler is called by the MediaStream Recording API when an error occurs. You can provide an event handler to deal with errors that occur while creating or using a media recorder. The error object is of type MediaRecorderErrorEvent, and its error property contains a DOMException object that describes the error that occurred.",
        "name": "MediaRecorder.onerror",
        "params": [
            {
                "descr": "An attempt was made to stop or pause or an inactive recorder, start or resume an active recorder, or otherwise manipulate the MediaRecorder while in the wrong state. ",
                "name": "InvalidStateError"
            },
            {
                "descr": "The MediaStream is configured to disallow recording. ",
                "name": "SecurityError"
            },
            {
                "descr": "An attempt was made to instantiate a MediaRecorder using a MIME type that isn't supported on the user's device; one or more of the requested container, codecs, or profiles as well as other information may be invalid.",
                "name": "NotSupportedError"
            },
            {
                "descr": "An non-security related error occurred that cannot otherwise be categorized. ",
                "name": "UnknownError"
            }
        ],
        "path": "dom/mediarecorder/onerror",
        "syntax": "MediaRecorder.onerror = errorHandlerFunction;  Value A function to be called whenever an error occurs during the recorder's lifetime. In addition to other general errors that might occur, the following errors are specifically possible when using the MediaStream Recording API; to determine which occurred, check the value of MediaRecorderErrorEvent.error.name.  InvalidStateError An attempt was made to stop or pause or an inactive recorder, start or resume an active recorder, or otherwise manipulate the MediaRecorder while in the wrong state. This exception can also occur when a request is made on a source that has been deleted or removed. SecurityError The MediaStream is configured to disallow recording. This may be the case, for example, with sources obtained using getUserMedia()",
        "type": "Media Streams"
    },
    "MediaRecorder.onpause": {
        "descr": "The MediaRecorder.onpause event handler (part of the MediaRecorder API) handles the pause event, allowing you to run code in response to the media recording being paused.",
        "name": "MediaRecorder.onpause",
        "params": [],
        "path": "dom/mediarecorder/onpause",
        "syntax": "MediaRecorder.onpause = function(event) { ... } MediaRecorder.addEventListener('pause', function(event) { ... })",
        "type": "Media Streams"
    },
    "MediaRecorder.onresume": {
        "descr": "The MediaRecorder.onresume event handler (part of the MediaRecorder API) handles the resume event, allowing you to run code in response to the media recording being resumed after pausing.",
        "name": "MediaRecorder.onresume",
        "params": [],
        "path": "dom/mediarecorder/onresume",
        "syntax": "MediaRecorder.onresume = function(event) { ... } MediaRecorder.addEventListener('resume', function(event) { ... })",
        "type": "Media Streams"
    },
    "MediaRecorder.onstart": {
        "descr": "The MediaRecorder.onstartevent handler (part of the MediaRecorder API) handles the start event, allowing you to run code in response to media recording being started by a MediaRecorder.",
        "name": "MediaRecorder.onstart",
        "params": [],
        "path": "dom/mediarecorder/onstart",
        "syntax": "MediaRecorder.onstart = function(event) { ... } MediaRecorder.addEventListener('start', function(event) { ... })",
        "type": "Media Streams"
    },
    "MediaRecorder.onstop": {
        "descr": "The MediaRecorder.onstop event handler (part of the MediaRecorder API) handles the stop event, allowing you to run code in response to media recording via a MediaRecorder being stopped.",
        "name": "MediaRecorder.onstop",
        "params": [],
        "path": "dom/mediarecorder/onstop",
        "syntax": "MediaRecorder.onstop = function(event) { ... } MediaRecorder.addEventListener('stop', function(event) { ... })",
        "type": "Media Streams"
    },
    "MediaRecorder.onwarning": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "MediaRecorder.onwarning",
        "params": [
            {
                "descr": "Contains information about the error that occurred.",
                "name": "message"
            }
        ],
        "path": "dom/mediarecorder/onwarning",
        "syntax": "MediaRecorder.onwarning = function(event) { ... } MediaRecorder.addEventListener('warning', function(event) { ... })",
        "type": "Miscellaneous"
    },
    "MediaRecorder.pause": {
        "descr": "The Media.pause() method (part of the MediaRecorder API) is used to pause recording of media streams.",
        "name": "MediaRecorder.pause",
        "params": [
            {
                "descr": "The MediaRecorder is currently \"inactive\"; you can't pause recording if it's not active. ",
                "name": "InvalidStateError"
            }
        ],
        "path": "dom/mediarecorder/pause",
        "syntax": "MediaRecorder.pause()",
        "type": "Media Streams"
    },
    "MediaRecorder.requestData": {
        "descr": "The MediaRecorder.requestData() method (part of the MediaRecorder API) is used to raise a dataavailable event containing a Blob object of the captured media as it was when the method was called. This can then be grabbed and manipulated as you wish.",
        "name": "MediaRecorder.requestData",
        "params": [],
        "path": "dom/mediarecorder/requestdata",
        "syntax": "MediaRecorder.requestData()",
        "type": "Media Streams"
    },
    "MediaRecorder.resume": {
        "descr": "The MediaRecorder.resume() method (part of the MediaRecorder API) is used to resume media recording when it has been previously paused.",
        "name": "MediaRecorder.resume",
        "params": [],
        "path": "dom/mediarecorder/resume",
        "syntax": "MediaRecorder.resume()",
        "type": "Media Streams"
    },
    "MediaRecorder.start": {
        "descr": "The MediaRecorder method start(), which is part of the MediaStream Recording API, begins recording media into one or more Blob objects. You can record the entire duration of the media into a single Blob (or until you call requestData()), or you can specify the number of milliseconds to record at a time. Then, each time that amount of media has been recorded, an event will be delivered to let you act upon the recorded media, while a new Blob is created to record the next slice of the media",
        "name": "MediaRecorder.start",
        "params": [
            {
                "descr": "The number of milliseconds to record into each Blob. ",
                "name": "timeslice Optional"
            },
            {
                "descr": "The MediaRecorder is not in the inactive state; you can't start recording media if it's already being recorded. ",
                "name": "InvalidStateError"
            },
            {
                "descr": "The MediaStream is configured to disallow recording. ",
                "name": "SecurityError"
            },
            {
                "descr": "Something else went wrong during the recording process.",
                "name": "UnknownError"
            }
        ],
        "path": "dom/mediarecorder/start",
        "syntax": "MediaRecorder.start(timeslice)",
        "type": "Media Streams"
    },
    "MediaRecorder.state": {
        "descr": "The MediaRecorder.state read-only property returns the current state of the current MediaRecorder object.",
        "name": "MediaRecorder.state",
        "params": [],
        "path": "dom/mediarecorder/state",
        "syntax": "var state = MediaRecorder.state Values A AnimationPlayState object containing one of the following values:    Enumeration Description     inactive Recording is not occuring — it has either not been started yet, or it has been started and then stopped.   recording Recording has been started and the UA is capturing data.   paused Recording has been started, then paused, but not yet stopped or resumed.    Example ... record.onclick = function() { mediaRecorder.start();\n or  console.log(mediaRecorder.state);\n or  // Will return \"recording\" console.log(\"recorder started\");\n or  } ...);",
        "type": "Media Streams"
    },
    "MediaRecorder.stop": {
        "descr": "The MediaRecorder.stop() method (part of the MediaRecorder API) is used to stop media capture.",
        "name": "MediaRecorder.stop",
        "params": [],
        "path": "dom/mediarecorder/stop",
        "syntax": "MediaRecorder.stop()",
        "type": "Media Streams"
    },
    "MediaRecorder.stream": {
        "descr": "The MediaRecorder.stream read-only property returns the stream that was passed into the MediaRecorder() constructor when the MediaRecorder was created.",
        "name": "MediaRecorder.stream",
        "params": [],
        "path": "dom/mediarecorder/stream",
        "syntax": "var stream = MediaRecorder.stream Values The MediaStream passed into the MediaRecorder()",
        "type": "Media Streams"
    },
    "MediaRecorder.videoBitsPerSecond": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MediaRecorder.videoBitsPerSecond",
        "params": [],
        "path": "dom/mediarecorder/videobitspersecond",
        "syntax": "var videoBitsPerSecond = MediaRecorder.videoBitsPerSecond Value A Number (unsigned long).",
        "type": "Media Streams"
    },
    "MediaRecorderErrorEvent": {
        "descr": "The MediaRecorderErrorEvent interface represents errors returned by the MediaStream Recording API. It is an Event object that encapsulates a reference to a DOMException describing the error that occurred.",
        "name": "MediaRecorderErrorEvent",
        "params": [
            {
                "descr": "A DOMException containing information about the error that occurred. ",
                "name": "error Read only"
            },
            {
                "descr": "Creates and returns a new MediaRecorderErrorEvent event object with the given parameters.",
                "name": "MediaStreamRecorderEvent()"
            }
        ],
        "path": "dom/mediarecordererrorevent",
        "syntax": "Working Draft Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari     Basic support  No   No   Uses a generic event with an error property.    No  57  No  No   No   Uses a generic event with an error property.    No   MediaRecorderErrorEvent()",
        "type": "Media Streams"
    },
    "MediaRecorderErrorEvent.constructor": {
        "descr": "The MediaRecorderErrorEvent() constructor creates a new MediaRecorderErrorEvent object that represents an error that occurred during the recording of media by the MediaStream Recording API.",
        "name": "MediaRecorderErrorEvent.constructor",
        "params": [
            {
                "descr": "An object describing the error object to be created. ",
                "name": "errorInfo"
            }
        ],
        "path": "dom/mediarecordererrorevent/mediarecordererrorevent",
        "syntax": "var errorEvent = new MediaRecorderErrorEvent(errorInfo)",
        "type": "Media Streams"
    },
    "MediaRecorderErrorEvent.error": {
        "descr": "The read-only error property in the MediaRecordingErrorEvent interface is a DOMException object providing details about the exception that was thrown by a MediaRecorder instance.",
        "name": "MediaRecorderErrorEvent.error",
        "params": [
            {
                "descr": "An operation was attempted in a context in which it isn't allowed, or a request has been made on an object that's deleted or removed.",
                "name": "InvalidStateError"
            },
            {
                "descr": "A MediaRecorder couldn't be created because the specified options weren't valid. ",
                "name": "NotSupportedError"
            },
            {
                "descr": "The MediaStream is configured to disallow recording. ",
                "name": "SecurityError"
            }
        ],
        "path": "dom/mediarecordererrorevent/error",
        "syntax": "error = MediaRecorderErrorEvent.error;  Value A DOMException describing the error represented by the event. The error's error property's value may be any exception that makes sense during the handling of media recording, including these specifically identified by the specification. The descriptions here are generic ones; you'll find more specific ones to various scenarios in which they may occur in the corresponding method references.  InvalidStateError An operation was attempted in a context in which it isn't allowed, or a request has been made on an object that's deleted or removed. NotSupportedError A MediaRecorder couldn't be created because the specified options weren't valid. The message atttribute should provide additional information, if it exists. SecurityError The MediaStream is configured to disallow recording. This may be the case, for example, with sources obtained using getUserMedia()",
        "type": "Media Streams"
    },
    "MediaSession.metadata": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MediaSession.metadata",
        "params": [],
        "path": "dom/mediasession/metadata",
        "syntax": "var mediaMetadata = MediaSession.metadata MediaSession.metadata = mediaMetadata Value An instance of MediaMetadata. Example The following example creates a new media session and assigns action handlers to it: if ('mediaSession' in navigator){ navigator.mediaSession.metadata = new MediaMetadata({ title: \"Podcast Episode Title\", artist: \"Podcast Host\", album: \"Podcast Name\", artwork: [{src: \"podcast.jpg\"}] });\n or  navigator.mediaSession.setActionHandler('play', function() {});\n or  navigator.mediaSession.setActionHandler('pause', function() {});\n or  navigator.mediaSession.setActionHandler('seekbackward', function() {});\n or  navigator.mediaSession.setActionHandler('seekforward', function() {});\n or  navigator.mediaSession.setActionHandler('previoustrack', function() {});\n or  navigator.mediaSession.setActionHandler('nexttrack', function() {});\n or  });",
        "type": "Media Session"
    },
    "MediaSession.playbackState": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MediaSession.playbackState",
        "params": [],
        "path": "dom/mediasession/playbackstate",
        "syntax": "var playbackState = MediaSession.playbackState MediaSession.playbackState = playbackState Value One of \"none\", \"paused\", or \"playing\". Example The following example sets up event handlers, for pausing and playing: var audio = document.querrySelect(\"#player\");\n or  audio.src = \"song.mp3\"; navigator.mediaSession.setActionHandler('play', play);\n or  navigator.mediaSession.setActionHandler('pause', pause);\n or  function play() { audio.play();\n or  navigator.mediaSession.playbackState = \"playing\"; } function pause() { audio.pause();\n or  navigator.mediaSession.playbackState = \"Paused\"; });",
        "type": "Media Session"
    },
    "MediaSession.setActionHandler": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MediaSession.setActionHandler",
        "params": [
            {
                "descr": "A string representing an action type to listen for. ",
                "name": "type"
            },
            {
                "descr": "Indicates the function to call when the specified action type is invoked. ",
                "name": "callback"
            }
        ],
        "path": "dom/mediasession/setactionhandler",
        "syntax": "navigator.mediaSession.setActionHandler(type, callback)",
        "type": "Media Session"
    },
    "MediaSource.activeSourceBuffers": {
        "descr": "The activeSourceBuffers read-only property of the MediaSource interface returns a SourceBufferList object containing a subset of the SourceBuffer objects contained within sourceBuffers — the list of objects providing the selected video track, enabled audio tracks, and shown/hidden text tracks.",
        "name": "MediaSource.activeSourceBuffers",
        "params": [],
        "path": "dom/mediasource/activesourcebuffers",
        "syntax": "var myActiveSourceBuffers = mediaSource.activeSourceBuffers; Value A SourceBufferList containing the SourceBuffer objects for each of the active tracks. Example The following snippet is based on a simple example written by Nick Desaulniers (view the full demo live, or download the source for further investigation.)",
        "type": "Media"
    },
    "MediaSource.addSourceBuffer": {
        "descr": "The addSourceBuffer() method of the MediaSource interface creates a new SourceBuffer of the given MIME type and adds it to the MediaSource's sourceBuffers list. The new SourceBuffer is also returned.",
        "name": "MediaSource.addSourceBuffer",
        "params": [
            {
                "descr": "A DOMString specifying the MIME type of the SourceBuffer to create and add to the MediaSource.",
                "name": "mimeType"
            },
            {
                "descr": "The value specified for mimeType is an empty string rather than a valid MIME type.",
                "name": "InvalidAccessError"
            },
            {
                "descr": "The MediaSource is not in the \"open\" readyState.",
                "name": "InvalidStateError"
            },
            {
                "descr": "The specified mimeType isn't supported by the user agent, or is not compatible with the MIME types of other SourceBuffer objects that are already included in the media source's sourceBuffers list.",
                "name": "NotSupportedError"
            },
            {
                "descr": "The user agent can't handle any more SourceBuffer objects, or creating a new SourceBuffer using the given mimeType would result in an unsupported configuration of SourceBuffers.",
                "name": "QuotaExceededError"
            }
        ],
        "path": "dom/mediasource/addsourcebuffer",
        "syntax": "var sourceBuffer = mediaSource.addSourceBuffer(mimeType);",
        "type": "Media"
    },
    "MediaSource.clearLiveSeekableRange": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MediaSource.clearLiveSeekableRange",
        "params": [],
        "path": "dom/mediasource/clearliveseekablerange",
        "syntax": "mediaSource.clearLiveSeekableRange()",
        "type": "Media"
    },
    "MediaSource.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MediaSource.constructor",
        "params": [],
        "path": "dom/mediasource/mediasource",
        "syntax": "var mediaSource = new MediaSource();",
        "type": "Miscellaneous"
    },
    "MediaSource.duration": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MediaSource.duration",
        "params": [],
        "path": "dom/mediasource/duration",
        "syntax": "mediaSource.duration = 5.5; // 5.5 seconds var myDuration = mediaSource.duration; Value A double. A value in seconds is expected. Errors The following errors may be thrown when setting a new value for this property.    Error Explanation     InvalidAccessError An attempt was made to set a duration value that was negative, or NaN.   InvalidStateError  MediaSource.readyState is not equal to open, or one or more of the SourceBuffer objects in MediaSource.sourceBuffers are being updated (i.e. their SourceBuffer.updating property is true.)    Example",
        "type": "Media"
    },
    "MediaSource.endOfStream": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MediaSource.endOfStream",
        "params": [
            {
                "descr": "A DOMString representing an error to throw when the end of the stream is reached. ",
                "name": "endOfStreamError Optional"
            }
        ],
        "path": "dom/mediasource/endofstream",
        "syntax": "mediaSource.endOfStream(endOfStreamError);",
        "type": "Media"
    },
    "MediaSource.isTypeSupported": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MediaSource.isTypeSupported",
        "params": [
            {
                "descr": "The MIME type that you want to test support for in the current browser.",
                "name": "mimeType"
            }
        ],
        "path": "dom/mediasource/istypesupported",
        "syntax": "var isItSupported = mediaSource.isTypeSupported(mimeType);",
        "type": "Media"
    },
    "MediaSource.readyState": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MediaSource.readyState",
        "params": [],
        "path": "dom/mediasource/readystate",
        "syntax": "var myReadyState = mediaSource.readyState; Value A DOMString. Example The following snippet is from a simple example written by Nick Desaulniers (view the full demo live, or download the source for further investigation.)",
        "type": "Media"
    },
    "MediaSource.removeSourceBuffer": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MediaSource.removeSourceBuffer",
        "params": [
            {
                "descr": "The SourceBuffer object to be removed.",
                "name": "sourceBuffer"
            }
        ],
        "path": "dom/mediasource/removesourcebuffer",
        "syntax": "mediaSource.removeSourceBuffer(sourceBuffer);",
        "type": "Media"
    },
    "MediaSource.setLiveSeekableRange": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MediaSource.setLiveSeekableRange",
        "params": [
            {
                "descr": "The start of the seekable range to set in seconds measured from the beginning of the source. ",
                "name": "start"
            },
            {
                "descr": "The end of the seekable range to set in seconds measured from the beginning of the source. ",
                "name": "end"
            }
        ],
        "path": "dom/mediasource/setliveseekablerange",
        "syntax": "mediaSource.setLiveSeekableRange(start, end)",
        "type": "Media"
    },
    "MediaSource.sourceBuffers": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MediaSource.sourceBuffers",
        "params": [],
        "path": "dom/mediasource/sourcebuffers",
        "syntax": "var mySourceBuffers = mediaSource.sourceBuffers; Value A SourceBufferList. Example The following snippet is based on a simple example written by Nick Desaulniers (view the full demo live, or download the source for further investigation.)",
        "type": "Media"
    },
    "MediaStream Recording API: Recording a media element": {
        "descr": "While the article Using the MediaStream Recording API demonstrates using the MediaRecorder interface to capture a MediaStream generated by a hardware device, as returned by navigator.mediaDevices.getUserMedia(), you can also use an HTML media element (namely <audio> or <video>) as the source of the MediaStream to be recorded. In this article, we'll look at an example that does just that.",
        "name": "MediaStream Recording API: Recording a media element",
        "params": [
            {
                "descr": "Creates the MediaRecorder that will handle recording the input stream.",
                "name": "Line 2"
            },
            {
                "descr": "Creates an empty array, data, which will be used to hold the Blobs of media data provided to our ondataavailable event handler.",
                "name": "Line 3"
            },
            {
                "descr": "Sets up the handler for the dataavailable event. ",
                "name": "Line 5"
            },
            {
                "descr": "Starts the recording process by calling recorder.start(), and outputs a message to the log with the updated state of the recorder and the number of seconds it will be recording.",
                "name": "Lines 6-7"
            },
            {
                "descr": "Creates a new Promise, named stopped, which is resolved when the MediaRecorder's onstop event handler is called, and is rejected if its onerror event handler is called. ",
                "name": "Lines 9-12"
            },
            {
                "descr": "Creates a new Promise, named recorded, which is resolved when the specified number of milliseconds have elapsed. ",
                "name": "Lines 14-16"
            },
            {
                "descr": "These lines create a new Promise which is fulfilled when both of the two Promises (stopped and recorded) have resolved. ",
                "name": "Lines 18-22"
            },
            {
                "descr": "navigator.mediaDevices.getUserMedia() is called to request a new MediaStream that has both video and audio tracks. ",
                "name": "Lines 2-4"
            },
            {
                "descr": "When the Promise returned by getUserMedia() is resolved, the preview <video> element's srcobject attribute is set to be the input stream, which causes the video being captured by the user's camera to be displayed in the preview box. Since the <video> element is muted, the audio won't play. The \"Download\" button's link is then set to refer to the stream as well. Then, in line 8, we arrange for preview.captureStream() to call preview.mozCaptureStream() so that our code will work on Firefox, on which the MediaRecorder.captureStream() method is prefixed. Then a new Promise which resolves when the preview video starts to play is created and returned.",
                "name": "Lines 5-9"
            },
            {
                "descr": "When the preview video begins to play, we know there's media to record, so we respond by calling the startRecording() function we created earlier, passing in the preview video stream (as the source media to be recorded) and recordingTimeMS as the number of milliseconds of media to record. As mentioned before, startRecording() returns a Promise whose resolution handler is called (receiving as input an array of Blob objects containing the chunks of recorded media data) once recording has completed.",
                "name": "Line 10"
            },
            {
                "descr": "The recording process's resolution handler receives as input an array of media data Blobs locally known as recordedChunks. ",
                "name": "Lines 11-15"
            },
            {
                "descr": "The size and type of the recorded media are output to the log area below the two videos and the download button.",
                "name": "Lines 17-18"
            },
            {
                "descr": "The catch() for all the Promises outputs the error to the logging area by calling our log() function.",
                "name": "Line 20"
            }
        ],
        "path": "dom/mediastream_recording_api/recording_a_media_element",
        "syntax": "startRecording()",
        "type": "Media Streams"
    },
    "MediaStream Recording API: Using the MediaStream Recording API": {
        "descr": "The MediaStream Recording API makes it easy to record audio and/or video streams. When used with navigator.mediaDevices.getUserMedia(), it provides an easy way to record from the user's input devices and instantly use the result in web apps. Both audio and video may be recorded, separately or together. This article aims to provide a basic guide on how to use the MediaRecorder interface, which provides this API.",
        "name": "MediaStream Recording API: Using the MediaStream Recording API",
        "params": [],
        "path": "dom/mediastream_recording_api/using_the_mediastream_recording_api",
        "syntax": "calc()",
        "type": "Media Streams"
    },
    "MediaStream.active": {
        "descr": "The active read-only property of the MediaStream interface returns a Boolean value which is true if the stream is currently active; otherwise, it returns false. A stream is considered active if at least one of its MediaStreamTracks is not in the MediaStreamTrack.ended state. Once every track has ended, the stream's active property becomes false.",
        "name": "MediaStream.active",
        "params": [],
        "path": "dom/mediastream/active",
        "syntax": "var isActive = MediaStream.active; Value A Boolean value which is true if the stream is currently active; otherwise, the value is false. Example In this example, a new stream whose source is the user's local camera and microphone is requested using getUserMedia()",
        "type": "Media Streams"
    },
    "MediaStream.addTrack": {
        "descr": "The MediaStream.addTrack() method adds a new track to the stream. The track is specified as a parameter of type MediaStreamTrack.",
        "name": "MediaStream.addTrack",
        "params": [
            {
                "descr": "A MediaStreamTrack to add to the stream.",
                "name": "track"
            }
        ],
        "path": "dom/mediastream/addtrack",
        "syntax": "stream.addTrack(track);",
        "type": "Media Streams"
    },
    "MediaStream.clone": {
        "descr": "The clone() method of the MediaStream interface creates a duplicate of the MediaStream. This new MediaStream object has a new unique id and contains clones of every MediaStreamTrack contained by the MediaStream on which clone() was called.",
        "name": "MediaStream.clone",
        "params": [],
        "path": "dom/mediastream/clone",
        "syntax": "var stream = MediaStream.clone();",
        "type": "Media Streams"
    },
    "MediaStream.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MediaStream.constructor",
        "params": [
            {
                "descr": "Another MediaStream containing tracks to add.",
                "name": "stream"
            },
            {
                "descr": "An Array of MediaStreamTracks to add.",
                "name": "tracks"
            }
        ],
        "path": "dom/mediastream/mediastream",
        "syntax": "stream = new MediaStream();\n or  stream = new MediaStream(stream);\n or  stream = new MediaStream(tracks[]);",
        "type": "Media Streams"
    },
    "MediaStream.getAudioTracks": {
        "descr": "The getAudioTracks() method of the MediaStream interface returns a sequence that represents all the MediaStreamTrack objects in this stream's track set where MediaStreamTrack.kind is audio.",
        "name": "MediaStream.getAudioTracks",
        "params": [],
        "path": "dom/mediastream/getaudiotracks",
        "syntax": "var mediaStreamTracks = mediaStream.getAudioTracks()",
        "type": "Media Streams"
    },
    "MediaStream.getTrackById": {
        "descr": "The MediaStream.getTrackById() method returns a MediaStreamTrack object representing the track with the specified ID string. If there is no track with the specified ID, this method returns null.",
        "name": "MediaStream.getTrackById",
        "params": [
            {
                "descr": "A DOMString which identifies the track to be returned.",
                "name": "id"
            }
        ],
        "path": "dom/mediastream/gettrackbyid",
        "syntax": "var track = MediaStream.getTrackById(id);",
        "type": "Media Streams"
    },
    "MediaStream.getTracks": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MediaStream.getTracks",
        "params": [],
        "path": "dom/mediastream/gettracks",
        "syntax": "var mediaStreamTracks = mediaStream.getTracks()",
        "type": "Media Streams"
    },
    "MediaStream.getVideoTracks": {
        "descr": "The getVideoTracks() method of the MediaStream interface returns a sequence of MediaStreamTrack objects representing the video tracks in this stream.",
        "name": "MediaStream.getVideoTracks",
        "params": [],
        "path": "dom/mediastream/getvideotracks",
        "syntax": "var mediaStreamTracks[] = mediaStream.getVideoTracks();",
        "type": "Media Streams"
    },
    "MediaStream.id": {
        "descr": "The MediaStream.id() read-only property is a DOMString containing 36 characters denoting a unique identifier (GUID) for the object.",
        "name": "MediaStream.id",
        "params": [],
        "path": "dom/mediastream/id",
        "syntax": "var id = mediaStream.id;  Example var p = navigator.mediaDevices.getUserMedia({ audio: true, video: true });\n or  p.then(function(stream) { console.log(stream.id);\n or  };));",
        "type": "Media Streams"
    },
    "MediaStream.onaddtrack": {
        "descr": "The MediaStream.onaddtrack property is an EventHandler which specifies a function to be called when the addtrack event occurs on a MediaStream instance. This happens when a new track of any kind is added to the media stream. This event is fired when the browser adds a track to the stream (such as when a RTCPeerConnection is renegotiated or a stream being captured using HTMLMediaElement.captureStream() gets a new set of tracks because the media element being captured loaded a new source.",
        "name": "MediaStream.onaddtrack",
        "params": [],
        "path": "dom/mediastream/onaddtrack",
        "syntax": "MediaStream.onaddtrack = eventHandler;  Value This should be set to a function which you provide that accepts as input a MediaStreamTrackEvent object representing the addtrack event which has occurred. The MediaStreamTrack representing the track which was added is specified in the event's track property. Example This example adds a listener which, when a new track is added to the stream, appends a new item to a list of tracks; the new item shows the track's kind (\"audio\" or \"video\") and label",
        "type": "Media Streams"
    },
    "MediaStream.onremovetrack": {
        "descr": "The MediaStream.onremovetrack property is an EventHandler which specifies a function to be called when the removetrack event occurs on a MediaStream instance. This happens when a track of any kind is removed from the media stream. This event is fired when the browser removes a track from the stream (such as when a RTCPeerConnection is renegotiated or a stream being captured using HTMLMediaElement.captureStream() gets a new set of tracks because the media element being captured loaded a new source.",
        "name": "MediaStream.onremovetrack",
        "params": [],
        "path": "dom/mediastream/onremovetrack",
        "syntax": "MediaStream.onremovetrack = eventHandler;  Value This should be set to a function which you provide that accepts as input a MediaStreamTrackEvent object representing the removetrack event which has occurred. The MediaStreamTrack representing the track which was removed is specified in the event's track property. Example This example adds a listener which, when a track is removed from the stream, logs the track that was removed. stream.onremovetrack = function(event) { let trackList = document.getElementById(\"tracks\");\n or  let label = document.createElement(\"li\");\n or  label.innerHTML = \"Removed: \" + event.track.kind + \": \" + event.track.label; trackList.appendChild(label);\n or  };);",
        "type": "Media Streams"
    },
    "MediaStreamAudioDestinationNode.constructor": {
        "descr": "The MediaStreamAudioDestinationNode() constructor of the Web Audio API creates a new MediaStreamAudioDestinationNode object instance.",
        "name": "MediaStreamAudioDestinationNode.constructor",
        "params": [
            {
                "descr": "An AudioContext representing the audio context you want the node to be associated with.",
                "name": "context"
            },
            {
                "descr": "An AudioNodeOptions dictionary object defining the properties you want the MediaStreamAudioDestinationNode to have.",
                "name": "options Optional"
            }
        ],
        "path": "dom/mediastreamaudiodestinationnode/mediastreamaudiodestinationnode",
        "syntax": "var myAudioDest = new MediaStreamAudioDestinationNode(context, options);",
        "type": "Media Streams"
    },
    "MediaStreamAudioDestinationNode.stream": {
        "descr": "The stream property of the AudioContext interface represents a MediaStream containing a single AudioMediaStreamTrack with the same number of channels as the node itself.",
        "name": "MediaStreamAudioDestinationNode.stream",
        "params": [],
        "path": "dom/mediastreamaudiodestinationnode/stream",
        "syntax": "var audioCtx = new AudioContext();\n or  var destination = audioCtx.createMediaStreamDestination();\n or  var myStream = destination.stream;);",
        "type": "Media Streams"
    },
    "MediaStreamAudioSourceNode.constructor": {
        "descr": "The MediaStreamAudioSourceNode() constructor of the Web Audio API creates a new MediaStreamAudioSourceNode object instance.",
        "name": "MediaStreamAudioSourceNode.constructor",
        "params": [
            {
                "descr": "An AudioContext representing the audio context you want the node to be associated with.",
                "name": "context"
            },
            {
                "descr": "A MediaStreamAudioSourceOptions dictionary object defining the properties you want the MediaStreamAudioSourceNode to have:   mediaStream: The media stream that will be used as the source for the audio.",
                "name": "options"
            }
        ],
        "path": "dom/mediastreamaudiosourcenode/mediastreamaudiosourcenode",
        "syntax": "var myAudioSource = new MediaStreamAudioSourceNode(context, options);",
        "type": "Media Streams"
    },
    "MediaStreamConstraints.audio": {
        "descr": "The MediaStreamConstraints dictionary's audio property is used to indicate what kind of audio track, if any, should be included in the MediaStream returned by a call to getUserMedia().",
        "name": "MediaStreamConstraints.audio",
        "params": [
            {
                "descr": "If a Boolean value is specified, it simply indicates whether or not an audio track should be included in the returned stream; if it's true, an audio track is included; if no audio source is available or if permission is not given to use the audio source, the call to getUserMedia() will fail. If false, no audio track is included.",
                "name": "Boolean"
            },
            {
                "descr": "A constraints dictionary detailing the preferable and/or required values or ranges of values for the track's constrainable properties. ",
                "name": "MediaTrackConstraints"
            }
        ],
        "path": "dom/mediastreamconstraints/audio",
        "syntax": "var audioConstraints = true | false | MediaTrackConstraints;  Value The value of the audio property can be specified as either of two types:  Boolean If a Boolean value is specified, it simply indicates whether or not an audio track should be included in the returned stream; if it's true, an audio track is included; if no audio source is available or if permission is not given to use the audio source, the call to getUserMedia()",
        "type": "Media Streams"
    },
    "MediaStreamConstraints.video": {
        "descr": "The MediaStreamConstraints dictionary's video property is used to indicate what kind of video track, if any, should be included in the MediaStream returned by a call to getUserMedia().",
        "name": "MediaStreamConstraints.video",
        "params": [
            {
                "descr": "If a Boolean value is specified, it simply indicates whether or not a video track should be included in the returned stream; if it's true, a video track is included; if no video source is available or if permission is not given to use the video source, the call to getUserMedia() will fail. If false, no video track is included.",
                "name": "Boolean"
            },
            {
                "descr": "A constraints dictionary detailing the preferable and/or required values or ranges of values for the track's constrainable properties. ",
                "name": "MediaTrackConstraints"
            }
        ],
        "path": "dom/mediastreamconstraints/video",
        "syntax": "var videoConstraints = true | false | MediaTrackConstraints;  Value The value of the video property can be specified as either of two types:  Boolean If a Boolean value is specified, it simply indicates whether or not a video track should be included in the returned stream; if it's true, a video track is included; if no video source is available or if permission is not given to use the video source, the call to getUserMedia()",
        "type": "Media Streams"
    },
    "MediaStreamEvent.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MediaStreamEvent.constructor",
        "params": [
            {
                "descr": "Is a DOMString containing the name of the event, like addstream or removestream.",
                "name": "type"
            },
            {
                "descr": "Is a MediaStreamEventInit dictionary, having the following fields:   \"stream\" of type MediaStream representing the stream being concerned by the event. ",
                "name": "mediaStreamEventInit"
            }
        ],
        "path": "dom/mediastreamevent/mediastreamevent",
        "syntax": "var event = new MediaStreamEvent(type, mediaStreamEventInit);",
        "type": "Media Streams"
    },
    "MediaStreamEvent.stream": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MediaStreamEvent.stream",
        "params": [],
        "path": "dom/mediastreamevent/stream",
        "syntax": "var stream = event.stream; Example pc.onaddstream = function( ev ) { alert(\"A stream (id: '\" + ev.stream.id + \"') has been added to this connection.\");\n or  };);",
        "type": "Media Streams"
    },
    "MediaStreamTrack.applyConstraints": {
        "descr": "The applyConstraints() method of the MediaStreamTrack interface applies a set of constraints to the track; these constraints let the Web site or app establish ideal values and acceptable ranges of values for the constrainable properties of the track, such as frame rate, dimensions, echo cancelation, and so forth.",
        "name": "MediaStreamTrack.applyConstraints",
        "params": [
            {
                "descr": "A MediaTrackConstraints object listing the constraints to apply to the track's constrainable properties; any existing constraints are replaced with the new values specified, and any constrainable properties not included are restored to their default constraints. If this parameter is omitted, all currently set custom constraints are cleared. This object represents the basic set of constraints that must apply for the Promise to resolve. The object may contain an advanced property containing an array of additional MediaTrackConstrants objects, which are treated as exact requires.",
                "name": "constraints Optional"
            }
        ],
        "path": "dom/mediastreamtrack/applyconstraints",
        "syntax": "var appliedPromise = MediaStreamTrack.applyConstraints(constraints);",
        "type": "Media Streams"
    },
    "MediaStreamTrack.clone": {
        "descr": "The clone() method of the MediaStreamTrack interface creates a duplicate of the MediaStreamTrack. This new MediaStreamTrack object is identical except for its unique id.",
        "name": "MediaStreamTrack.clone",
        "params": [],
        "path": "dom/mediastreamtrack/clone",
        "syntax": "var track = MediaStreamTrack.clone();",
        "type": "Media Streams"
    },
    "MediaStreamTrack.enabled": {
        "descr": "The enabled property on the MediaStreamTrack interface is a Boolean value which is true if the track is allowed to render the source stream or false if it is not. This can be used to intentionally mute a track. When enabled, a track's data is output from the source to the destination; otherwise, empty frames are output.",
        "name": "MediaStreamTrack.enabled",
        "params": [],
        "path": "dom/mediastreamtrack/enabled",
        "syntax": "var bool = track.enabled; track.enabled = [true | false]; Value When true, enabled indicates that the track is permitted to render its actual media to the output. When enabled is set to false, the track only generates empty frames. Empty audio frames have every sample's value set to 0. Empty video frames have every pixel set to black.  Note: When implementing a mute/unmute feature, you should use the enabled property.  Usage notes If the MediaStreamTrack represents the video input from a camera, disabling the track by setting enabled to false also updates device activity indicators to show that the camera is not currently recording or streaming. For example, the green \"in use\" light next to the camera in iMac and MacBook computers turns off while the track is muted in this way. Example This example demonstrates a click event handler for a pause button. pauseButton.onclick = function(evt) { var newState = !myAudioTrack.enabled; pauseButton.innerHTML = newState ? \"&#x25B6;&#xFE0F;\" : \"&#x23F8;&#xFE0F;\"; myAudioTrack.enabled = newState; }",
        "type": "Media Streams"
    },
    "MediaStreamTrack.getCapabilities": {
        "descr": "The getCapabilities() method of the MediaStreamTrack interface returns a MediaTrackCapabilities object which specifies the values or range of values which each constrianable property, based upon the platform and user agent.",
        "name": "MediaStreamTrack.getCapabilities",
        "params": [],
        "path": "dom/mediastreamtrack/getcapabilities",
        "syntax": "var capabilities = MediaStreamTrack.getCapabilities();",
        "type": "Media Streams"
    },
    "MediaStreamTrack.getConstraints": {
        "descr": "The getConstraints() method of the MediaStreamTrack interface returns a MediaTrackConstraints object containing the set of constraints most recently established for the track using a prior call to applyConstraints(). These constraints indicate values and ranges of values that the Web site or application has specified are required or acceptable for the included constrainable properties.",
        "name": "MediaStreamTrack.getConstraints",
        "params": [],
        "path": "dom/mediastreamtrack/getconstraints",
        "syntax": "var constraints = MediaStreamTrack.getConstraints();",
        "type": "Media Streams"
    },
    "MediaStreamTrack.getSettings": {
        "descr": "The getSettings() method of the MediaStreamTrack interface returns a MediaTrackSettings object containing the current values of each of the constrainable properties for the current MediaStreamTrack. See Capabilities, constraints, and settings for details on how to work with constrainable properties.",
        "name": "MediaStreamTrack.getSettings",
        "params": [],
        "path": "dom/mediastreamtrack/getsettings",
        "syntax": "var settings = MediaStreamTrack.getSettings();",
        "type": "Media Streams"
    },
    "MediaStreamTrack.muted": {
        "descr": "The muted read-only property of the MediaStreamTrack interface returns a Boolean value indicating whether or not the track is currently unable to provide media output.",
        "name": "MediaStreamTrack.muted",
        "params": [],
        "path": "dom/mediastreamtrack/muted",
        "syntax": "mutedFlag = MediaStreamTrack.muted; Value A Boolean which is true if the track is currently muted, or false if the track is currently unmuted.  When possible, avoid polling muted to monitor the track's muting status. Instead, add event listeners for the mute and unmute events.  Example This example counts the number of tracks in an array of MediaStreamTrack objects which are currently muted. var mutedCount = 0; trackList.forEach(function(track) { if (track.muted) { mutedCount += 1; } });",
        "type": "Media Streams"
    },
    "MediaStreamTrack.onended": {
        "descr": "The MediaStreamTrack.onended event handler is used to specify a function which serves as an EventHandler to be called when the ended event occurs on the track. This event occurs when the track will no longer provide data to the stream for any reason, including the end of the media input being reached, the user revoking needed permissions, the source device being removed, or the remote peer ending a connection.",
        "name": "MediaStreamTrack.onended",
        "params": [],
        "path": "dom/mediastreamtrack/onended",
        "syntax": "MediaStreamTrack.onended = function;  Value A function to serve as an EventHandler for the ended event. The event handler function receives a single parameter: the event object, which is a simple Event object. Example This example sets up an event handler for the ended event which changes an on-screen icon to indicate that the track is no longer active. track.onended = function(event) { let statusElem = document.getElementById(\"status-icon\");\n or  statusElem.src = \"/images/stopped-icon.png\"; });",
        "type": "Media Streams"
    },
    "MediaStreamTrack.onmute": {
        "descr": "MediaStreamTrack's onmute event handler is called when the mute event is received. Such an event is sent when the track is temporarily not able to send data.",
        "name": "MediaStreamTrack.onmute",
        "params": [],
        "path": "dom/mediastreamtrack/onmute",
        "syntax": "track.onmute = muteHandler;  Value A function to serve as an EventHandler for the mute event. The event handler function receives a single parameter: the event object, which is a simple Event object. Example In this example, an onmute handler is established to set the content HTML of an element to display the \"muted speaker\" Emoji. myTrack.onmute = function(evt) { playStateIcon.innerHTML = \"&#1F507;\"; };",
        "type": "Media Streams"
    },
    "MediaStreamTrack.onoverconstrained": {
        "descr": "The MediaStreamTrack.onoverconstrained event handler is a property called when the overconstrained event is received. Such an event is sent when the track is again able to send data.",
        "name": "MediaStreamTrack.onoverconstrained",
        "params": [],
        "path": "dom/mediastreamtrack/onoverconstrained",
        "syntax": "track.onoverconstrained = function;  Values   function is the name of a user-defined function, without the ()",
        "type": "Media Streams"
    },
    "MediaStreamTrack.onunmute": {
        "descr": "MediaStreamTrack's onunmute event handler is called when the unmute event is received. Such an event is sent when the track is again able to send data.",
        "name": "MediaStreamTrack.onunmute",
        "params": [],
        "path": "dom/mediastreamtrack/onunmute",
        "syntax": "track.onunmute = unmuteHandler;  Value unmuteHandler is a function which is called when the MediaStreamTrack receives the unmute event. The event handler receives as input a single parameter: an Event whose kind is \"unmute\". Example This example creates an unmute event handler which changes the state of a visual indicator to display the Emoji character representing a \"speaker\" icon. myTrack.onunmute = function(evt) { playStateIcon.innerHTML = \"&#x1F508;\"; };",
        "type": "Media Streams"
    },
    "MediaStreamTrack.stop": {
        "descr": "In short, the MediaStreamTrack method stop() method stops the track.",
        "name": "MediaStreamTrack.stop",
        "params": [],
        "path": "dom/mediastreamtrack/stop",
        "syntax": "MediaStreamTrack.stop();",
        "type": "Media Streams"
    },
    "MediaStreamTrackEvent.constructor": {
        "descr": "The MediaStreamTrackEvent() constructor returns a newly created MediaStreamTrackEvent object, which represents an event announcing that a MediaStreamTrack has been added to or removed from a MediaStream.",
        "name": "MediaStreamTrackEvent.constructor",
        "params": [
            {
                "descr": "A DOMString representing the name of the type of the MediaStreamTrackEvent. ",
                "name": "type"
            },
            {
                "descr": "A MediaStreamTrack object representing the track which was added to or removed from the stream.",
                "name": "track"
            }
        ],
        "path": "dom/mediastreamtrackevent/mediastreamtrackevent",
        "syntax": "var trackEvent = new MediaStreamTrackEvent(type, {track: aMediaStreamTrack});",
        "type": "Media Streams"
    },
    "MediaTrackConstraints": {
        "descr": "The MediaTrackConstraints dictionary is used to describe a set of capabilities and the value or values each can take on. A constraints dictionary is passed into applyConstraints() to allow a script to establish a set of exact (required) values or ranges and/or preferred values or ranges of values for the track, and the most recently-requested set of custom constraints can be retrieved by calling getConstraints().",
        "name": "MediaTrackConstraints",
        "params": [
            {
                "descr": "A ConstrainDOMString object specifying a device ID or an array of device IDs which are acceptable and/or required.",
                "name": "deviceId"
            },
            {
                "descr": "A ConstrainDOMString object specifying a group ID or an array of group IDs which are acceptable and/or required.",
                "name": "groupId"
            },
            {
                "descr": "A ConstrainBoolean object which specifies whether automatic gain control is preferred and/or required.",
                "name": "autoGainControl"
            },
            {
                "descr": "A ConstrainLong specifying the channel count or range of channel counts which are acceptable and/or required.",
                "name": "channelCount"
            },
            {
                "descr": "A ConstrainBoolean object specifying whether or not echo cancellation is preferred and/or required.",
                "name": "echoCancellation"
            },
            {
                "descr": "A ConstrainDouble specifying the latency or range of latencies which are acceptable and/or required.",
                "name": "latency"
            },
            {
                "descr": "A ConstrainBoolean which specifies whether noise suppression is preferred and/or required.",
                "name": "noiseSuppression"
            },
            {
                "descr": "A ConstrainLong specifying the sample rate or range of sample rates which are acceptable and/or required.",
                "name": "sampleRate"
            },
            {
                "descr": "A ConstrainLong specifying the sample size or range of sample sizes which are acceptable and/or required.",
                "name": "sampleSize"
            },
            {
                "descr": "A ConstrainDouble specifying the volume or range of volumes which are acceptable and/or required.",
                "name": "volume"
            },
            {
                "descr": "A String specifying one of \"none\", \"manual\", \"single-shot\", or \"continuous\".",
                "name": "whiteBalanceMode"
            },
            {
                "descr": "A String specifying one of \"none\", \"manual\", \"single-shot\", or \"continuous\".",
                "name": "exposureMode"
            },
            {
                "descr": "A String specifying one of \"none\", \"manual\", \"single-shot\", or \"continuous\".",
                "name": "focusMode"
            },
            {
                "descr": "The pixel coordinates on the sensor of one or more points of interest. ",
                "name": "pointsOfInterest"
            },
            {
                "descr": "A ConstrainDouble (a double-precision integer) specifying f-stop adjustment by up to ±3.",
                "name": "exposureCompensation"
            },
            {
                "descr": "A ConstrainDouble (a double-precision integer) specifying a desired color temperature in degrees kelvin.",
                "name": "colorTemperature"
            },
            {
                "descr": "A ConstrainDouble (a double-precision integer) specifying a desired iso setting.",
                "name": "iso"
            },
            {
                "descr": "A ConstrainDouble (a double-precision integer) specifying a desired brightness setting.",
                "name": "brightness"
            },
            {
                "descr": "A ConstrainDouble (a double-precision integer) specifying the degree of difference between light and dark.",
                "name": "contrast"
            },
            {
                "descr": "A ConstrainDouble (a double-precision integer) specifying the degree of color intensity.",
                "name": "saturation"
            },
            {
                "descr": "A ConstrainDouble (a double-precision integer) specifying the intensity of edges.",
                "name": "sharpness"
            },
            {
                "descr": "A ConstrainDouble (a double-precision integer) specifying distance to a focused object.",
                "name": "focusDistance"
            },
            {
                "descr": "A ConstrainDouble (a double-precision integer) specifying the desired focal length.",
                "name": "zoom"
            },
            {
                "descr": "A Boolean defining whether the fill light is continuously connected, meaning it stays on as long as the track is active.",
                "name": "torch"
            },
            {
                "descr": "A ConstrainDouble specifying the video aspect ratio or range of aspect ratios which are acceptable and/or required.",
                "name": "aspectRatio"
            },
            {
                "descr": "A ConstrainDOMString object specifying a facing or an array of facings which are acceptable and/or required.",
                "name": "facingMode"
            },
            {
                "descr": "A ConstrainDouble specifying the frame rate or range of frame rates which are acceptable and/or required.",
                "name": "frameRate"
            },
            {
                "descr": "A ConstrainLong specifying the video height or range of heights which are acceptable and/or required.",
                "name": "height"
            },
            {
                "descr": "A ConstrainLong specifying the video width or range of widths which are acceptable and/or required.",
                "name": "width"
            },
            {
                "descr": "A ConstrainDOMString object specifying a mode or an array of modes the UA can use to derive the resolution of a video track. ",
                "name": "resizeMode"
            }
        ],
        "path": "dom/mediatrackconstraints",
        "syntax": "Working Draft Adds image constraints.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari     Basic support  59  Yes  ?   ?   46  ?    aspectRatio  Yes  ?   No  No  Yes  ?    autoGainControl  Yes  ?   55   55   46Prefixed   Prefixed Requires the vendor prefix: moz    No  Yes  ?    channelCount  Yes  ?   No  No  Yes  ?    deviceId  Yes  ?   50  No  Yes  ?    echoCancellation  Yes  ?   50  No  Yes  ?    facingMode  Yes  ?   50  No  Yes  ?    frameRate  Yes  ?   50  No  Yes  ?    groupId  Yes  ?   50  No  Yes  ?    height  Yes  ?   50  No  Yes  ?    latency  Yes  ?   50  No  Yes  ?    noiseSuppression  Yes  ?   55   55   46Prefixed   Prefixed Requires the vendor prefix: moz    No  Yes  ?    sampleRate  Yes  ?   No  No  Yes  ?    sampleSize  Yes  ?   No  No  Yes  ?    volume  Yes  ?   No  No  Yes  ?    width  Yes  ?   50  No  Yes  ?         Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet     Basic support  59  Yes  Yes  Yes  46  ?   ?    aspectRatio  ?   Yes  ?   29  ?   ?   ?    autoGainControl  Yes  Yes  ?   55   55   46Prefixed   Prefixed Requires the vendor prefix: moz    ?   ?   ?    channelCount  Yes  Yes  ?   No  ?   ?   ?    deviceId  Yes  Yes  ?   50  ?   ?   ?    echoCancellation  Yes  Yes  ?   50  ?   ?   ?    facingMode  Yes  Yes  ?   50  ?   ?   ?    frameRate  Yes  Yes  ?   50  ?   ?   ?    groupId  Yes  Yes  ?   50  ?   ?   ?    height  Yes  Yes  ?   50  ?   ?   ?    latency  Yes  Yes  ?   50  ?   ?   ?    noiseSuppression  Yes  Yes  ?   55   55   46Prefixed   Prefixed Requires the vendor prefix: moz    ?   ?   ?    sampleRate  Yes  Yes  ?   No  ?   ?   ?    sampleSize  Yes  Yes  ?   No  ?   ?   ?    volume  Yes  Yes  ?   No  ?   ?   ?    width  Yes  Yes  ?   50  ?   ?   ?      See also  MediaDevices.getUserMedia()",
        "type": "Media Streams"
    },
    "MediaTrackConstraints.aspectRatio": {
        "descr": "The MediaTrackConstraints dictionary's aspectRatio property is a ConstrainDouble describing the requested or mandatory constraints placed upon the value of the aspectRatio constrainable property.",
        "name": "MediaTrackConstraints.aspectRatio",
        "params": [],
        "path": "dom/mediatrackconstraints/aspectratio",
        "syntax": "var constraintsObject = { aspectRatio: constraint }; constraintsObject.aspectRatio = constraint;  Value A ConstrainDouble describing the acceptable or required value(s) for a video track's aspect ratio. The value is the width divided by the height and is rounded to ten decimal places. For example, the standard high-definition video aspect ratio of 16:9 can be computed as 1920/1080, or 1.7777777778.",
        "type": "Media Streams"
    },
    "MediaTrackConstraints.autoGainControl": {
        "descr": "The MediaTrackConstraints dictionary's autoGainControl property is a ConstrainBoolean describing the requested or mandatory constraints placed upon the value of the autoGainControl constrainable property.",
        "name": "MediaTrackConstraints.autoGainControl",
        "params": [],
        "path": "dom/mediatrackconstraints/autogaincontrol",
        "syntax": "var constraintsObject = { autoGainControl: constraint }; constraintsObject.autoGainControl = constraint;  Value If this value is a simple true or false, the user agent will attempt to obtain media with automatic gain control enabled or disabled as specified, if possible, but will not fail if this can't be done. If, instead, the value is given as an object with an exact field, that field's Boolean value indicates a required setting for the automatic gain control feature; if it can't be met, then the request will result in an error. Example See Example: Constraint exerciser in Capabilities, constraints, and settings for an example. Specifications    Specification Status Comment     Media Capture and StreamsThe definition of 'autoGainControl' in that specification. Candidate Recommendation Initial specification.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  Yes  ?   55   55   46Prefixed   Prefixed Requires the vendor prefix: moz    No  Yes  ?        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support  Yes  Yes  ?   55   55   46Prefixed   Prefixed Requires the vendor prefix: moz    ?   ?   ?     See also  Media Capture and Streams API Capabilities, constraints, and settings MediaTrackConstraints MediaDevices.getSupportedConstraints()",
        "type": "Media Streams"
    },
    "MediaTrackConstraints.channelCount": {
        "descr": "The MediaTrackConstraints dictionary's channelCount property is a ConstrainLong describing the requested or mandatory constraints placed upon the value of the channelCount constrainable property.",
        "name": "MediaTrackConstraints.channelCount",
        "params": [],
        "path": "dom/mediatrackconstraints/channelcount",
        "syntax": "var constraintsObject = { channelCount: constraint }; constraintsObject.channelCount = constraint;  Value If this value is a number, the user agent will attempt to obtain media whose channel count is as close as possible to this number given the capabilities of the hardware and the other constraints specified. Otherwise, the value of this ConstrainLong will guide the user agent in its efforts to provide an exact match to the required channel count (if exact is specified or both min and max are provided and have the same value) or to a best-possible value.",
        "type": "Media Streams"
    },
    "MediaTrackConstraints.deviceId": {
        "descr": "The MediaTrackConstraints dictionary's deviceId property is a ConstrainDOMString describing the requested or mandatory constraints placed upon the value of the deviceId constrainable property.",
        "name": "MediaTrackConstraints.deviceId",
        "params": [],
        "path": "dom/mediatrackconstraints/deviceid",
        "syntax": "var constraintsObject = { deviceId: constraint }; constraintsObject.deviceId = constraint;  Value An object based on ConstrainDOMString specifying one or more acceptable, ideal, and/or exact (mandatory) device IDs which are acceptable as the source of media content.",
        "type": "Media Streams"
    },
    "MediaTrackConstraints.echoCancellation": {
        "descr": "The MediaTrackConstraints dictionary's echoCancellation property is a ConstrainBoolean describing the requested or mandatory constraints placed upon the value of the echoCancellation constrainable property.",
        "name": "MediaTrackConstraints.echoCancellation",
        "params": [],
        "path": "dom/mediatrackconstraints/echocancellation",
        "syntax": "var constraintsObject = { echoCancellation: constraint }; constraintsObject.echoCancellation = constraint;  Value If this value is a simple true or false, the user agent will attempt to obtain media with echo cancellation enabled or disabled as specified, if possible, but will not fail if this can't be done. If, instead, the value is given as an object with an exact field, that field's Boolean value indicates a required setting for the echo cancellation feature; if it can't be met, then the request will result in an error. Example See Example: Constraint exerciser in Capabilities, constraints, and settings for an example. Specifications    Specification Status Comment     Media Capture and StreamsThe definition of 'echoCancellation' in that specification. Candidate Recommendation Initial specification.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  Yes  ?   50  No  Yes  ?        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support  Yes  Yes  ?   50  ?   ?   ?     See also  Media Capture and Streams API Capabilities, constraints, and settings MediaTrackConstraints MediaDevices.getSupportedConstraints()",
        "type": "Media Streams"
    },
    "MediaTrackConstraints.facingMode": {
        "descr": "The MediaTrackConstraints dictionary's facingMode property is a ConstrainDOMString describing the requested or mandatory constraints placed upon the value of the facingMode constrainable property.",
        "name": "MediaTrackConstraints.facingMode",
        "params": [
            {
                "descr": "The video source is facing toward the user; this includes, for example, the front-facing camera on a smartphone.",
                "name": "\"user\""
            },
            {
                "descr": "The video source is facing away from the user, thereby viewing their environment. ",
                "name": "\"environment\""
            },
            {
                "descr": "The video source is facing toward the user but to their left, such as a camera aimed toward the user but over their left shoulder.",
                "name": "\"left\""
            },
            {
                "descr": "The video source is facing toward the user but to their right, such as a camera aimed toward the user but over their right shoulder.",
                "name": "\"right\""
            }
        ],
        "path": "dom/mediatrackconstraints/facingmode",
        "syntax": "var constraintsObject = { facingMode: constraint }; constraintsObject.facingMode = constraint;  Value An object based on ConstrainDOMString specifying one or more acceptable, ideal, and/or exact (mandatory) facing modes are acceptable for a video track.",
        "type": "Media Streams"
    },
    "MediaTrackConstraints.frameRate": {
        "descr": "The MediaTrackConstraints dictionary's frameRate property is a ConstrainDouble describing the requested or mandatory constraints placed upon the value of the frameRate constrainable property.",
        "name": "MediaTrackConstraints.frameRate",
        "params": [],
        "path": "dom/mediatrackconstraints/framerate",
        "syntax": "var constraintsObject = { frameRate: constraint }; constraintsObject.frameRate = constraint;  Value A ConstrainDouble describing the acceptable or required value(s) for a video track's frame rate, in frames per second.",
        "type": "Media Streams"
    },
    "MediaTrackConstraints.groupId": {
        "descr": "The MediaTrackConstraints dictionary's groupId property is a ConstrainDOMString describing the requested or mandatory constraints placed upon the value of the groupId constrainable property.",
        "name": "MediaTrackConstraints.groupId",
        "params": [],
        "path": "dom/mediatrackconstraints/groupid",
        "syntax": "var constraintsObject = { groupId: constraint }; constraintsObject.groupId = constraint;  Value An object based on ConstrainDOMString specifying one or more acceptable, ideal, and/or exact (mandatory) group IDs which are acceptable as the source of media content.",
        "type": "Media Streams"
    },
    "MediaTrackConstraints.height": {
        "descr": "The MediaTrackConstraints dictionary's height property is a ConstrainLong describing the requested or mandatory constraints placed upon the value of the height constrainable property.",
        "name": "MediaTrackConstraints.height",
        "params": [],
        "path": "dom/mediatrackconstraints/height",
        "syntax": "var constraintsObject = { height: constraint }; constraintsObject.height = constraint;  Value If this value is a number, the user agent will attempt to obtain media whose height is as close as possible to this number given the capabilities of the hardware and the other constraints specified. Otherwise, the value of this ConstrainLong will guide the user agent in its efforts to provide an exact match to the required height (if exact is specified or both min and max are provided and have the same value) or to a best-possible value.",
        "type": "Media Streams"
    },
    "MediaTrackConstraints.latency": {
        "descr": "The MediaTrackConstraints dictionary's latency property is a ConstrainDouble describing the requested or mandatory constraints placed upon the value of the latency constrainable property.",
        "name": "MediaTrackConstraints.latency",
        "params": [],
        "path": "dom/mediatrackconstraints/latency",
        "syntax": "var constraintsObject = { latency: constraint }; constraintsObject.latency = constraint;  Value A ConstrainDouble describing the acceptable or required value(s) for an audio track's latency, with values specified in seconds. In audio processing, latency is the time between the start of processing (when sound occurs in the real world, or is generated by a hardware device) and the data being made available to the next step in the audio input or output process. In most cases, low latency is desirable for performance and user experience purposes, but when power consumption is a concern, or delays are otherwise acceptable, higher latency might be acceptable.",
        "type": "Media Streams"
    },
    "MediaTrackConstraints.noiseSuppression": {
        "descr": "The MediaTrackConstraints dictionary's noiseSuppression property is a ConstrainBoolean describing the requested or mandatory constraints placed upon the value of the noiseSuppression constrainable property.",
        "name": "MediaTrackConstraints.noiseSuppression",
        "params": [],
        "path": "dom/mediatrackconstraints/noisesuppression",
        "syntax": "var constraintsObject = { noiseSuppression: constraint }; constraintsObject.noiseSuppression = constraint;  Value If this value is a simple true or false, the user agent will attempt to obtain media with noise suppression enabled or disabled as specified, if possible, but will not fail if this can't be done. If, instead, the value is given as an object with an exact field, that field's Boolean value indicates a required setting for the noise suppression feature; if it can't be met, then the request will result in an error. Example See Example: Constraint exerciser in Capabilities, constraints, and settings for an example. Specifications    Specification Status Comment     Media Capture and StreamsThe definition of 'noiseSuppression' in that specification. Candidate Recommendation Initial specification.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  Yes  ?   55   55   46Prefixed   Prefixed Requires the vendor prefix: moz    No  Yes  ?        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support  Yes  Yes  ?   55   55   46Prefixed   Prefixed Requires the vendor prefix: moz    ?   ?   ?     See also  Media Capture and Streams API Capabilities, constraints, and settings MediaTrackConstraints MediaDevices.getSupportedConstraints()",
        "type": "Media Streams"
    },
    "MediaTrackConstraints.sampleRate": {
        "descr": "The MediaTrackConstraints dictionary's sampleRate property is a ConstrainLong describing the requested or mandatory constraints placed upon the value of the sampleRate constrainable property.",
        "name": "MediaTrackConstraints.sampleRate",
        "params": [],
        "path": "dom/mediatrackconstraints/samplerate",
        "syntax": "var constraintsObject = { sampleRate: constraint }; constraintsObject.sampleRate = constraint;  Value If this value is a number, the user agent will attempt to obtain media whose sample rate is as close as possible to this number given the capabilities of the hardware and the other constraints specified. Otherwise, the value of this ConstrainLong will guide the user agent in its efforts to provide an exact match to the required sample rate (if exact is specified or both min and max are provided and have the same value) or to a best-possible value.",
        "type": "Media Streams"
    },
    "MediaTrackConstraints.sampleSize": {
        "descr": "The MediaTrackConstraints dictionary's sampleSize property is a ConstrainLong describing the requested or mandatory constraints placed upon the value of the sampleSize constrainable property.",
        "name": "MediaTrackConstraints.sampleSize",
        "params": [],
        "path": "dom/mediatrackconstraints/samplesize",
        "syntax": "var constraintsObject = { sampleSize: constraint }; constraintsObject.sampleSize = constraint;  Value If this value is a number, the user agent will attempt to obtain media whose sample size (in bits per linear sample) is as close as possible to this number given the capabilities of the hardware and the other constraints specified. Otherwise, the value of this ConstrainLong",
        "type": "Media Streams"
    },
    "MediaTrackConstraints.volume": {
        "descr": "The MediaTrackConstraints dictionary's volume property is a ConstrainDouble describing the requested or mandatory constraints placed upon the value of the volume constrainable property.",
        "name": "MediaTrackConstraints.volume",
        "params": [],
        "path": "dom/mediatrackconstraints/volume",
        "syntax": "var constraintsObject = { volume: constraint }; constraintsObject.volume = constraint;  Value A ConstrainDouble describing the acceptable or required value(s) for an audio track's volume, on a linear scale where 0.0 means silence and 1.0 is the highest supported volume.",
        "type": "Media Streams"
    },
    "MediaTrackConstraints.width": {
        "descr": "The MediaTrackConstraints dictionary's width property is a ConstrainLong describing the requested or mandatory constraints placed upon the value of the width constrainable property.",
        "name": "MediaTrackConstraints.width",
        "params": [],
        "path": "dom/mediatrackconstraints/width",
        "syntax": "var constraintsObject = { width: constraint }; constraintsObject.width = constraint;  Value If this value is a number, the user agent will attempt to obtain media whose width is as close as possible to this number given the capabilities of the hardware and the other constraints specified. Otherwise, the value of this ConstrainLong will guide the user agent in its efforts to provide an exact match to the required width (if exact is specified or both min and max are provided and have the same value) or to a best-possible value.",
        "type": "Media Streams"
    },
    "MediaTrackSettings.deviceId": {
        "descr": "The MediaTrackSettings dictionary's deviceId property is a DOMString which uniquely identifies the source for the corresponding MediaStreamTrack for the origin corresponding to the browsing session. This lets you determine what value was selected to comply with your specified constraints for this property's value as described in the MediaTrackConstraints.deviceId property you provided when calling either getUserMedia().",
        "name": "MediaTrackSettings.deviceId",
        "params": [],
        "path": "dom/mediatracksettings/deviceid",
        "syntax": "var deviceId = MediaTrackSettings.deviceId;  Value A DOMString whose value is an origin-unique identifier for the track's source. This ID is valid across multiple browsing sessions for the same origin and is guaranteed to be different for all other origins, so you can safely use it to request the same source be used for multiple sessions, for example. The actual value of the string, however, is determined by the source of the track, and there is no guarantee what form it will take, although the specification does recommend it be a GUID. Since there is a one-to-one pairing of ID with each source, all tracks with the same source will share the same ID for any given origin, so MediaStreamTrack.getCapabilities()",
        "type": "Media Streams"
    },
    "MediaTrackSettings.groupId": {
        "descr": "The MediaTrackSettings dictionary's groupId property is a browsing-session unique DOMString which identifies the group of devices which includes the source for the MediaStreamTrack. This lets you determine what value was selected to comply with your specified constraints for this property's value as described in the MediaTrackConstraints.groupId property you provided when calling either getUserMedia().",
        "name": "MediaTrackSettings.groupId",
        "params": [],
        "path": "dom/mediatracksettings/groupid",
        "syntax": "var groupId = MediaTrackSettings.groupId;  Value A DOMString whose value is a browsing-session unique identifier for a group of devices which includes the source of the track's contents. Two devices share the same group ID if they belong to the same physical hardware device. For example, a headset has two devices on it: a microphone which can serve as a source for audio tracks and a speaker which can serve as an output for audio. The group ID is not usable across multiple browsing sessions. However, it can be used to ensure that audio input and output are both being performed on the same headset, for example, or to ensure that the built-in camera and microphone on a phone are being used for video conferencing purposes. The actual value of the string, however, is determined by the source of the track, and there is no guarantee what form it will take, although the specification does recommend it be a GUID. Since this property isn't stable across browsing sessions, its usefulness when calling getUserMedia()",
        "type": "Media Streams"
    },
    "MediaTrackSettings.sampleRate": {
        "descr": "The MediaTrackSettings dictionary's sampleRate property is an integer indicating how many audio samples per second the MediaStreamTrack is currently configured for. This lets you determine what value was selected to comply with your specified constraints for this property's value as described in the MediaTrackConstraints.sampleRate property you provided when calling either getUserMedia() or MediaStreamTrack.applyConstraints().",
        "name": "MediaTrackSettings.sampleRate",
        "params": [],
        "path": "dom/mediatracksettings/samplerate",
        "syntax": "var sampleRate = MediaTrackSettings.sampleRate;  Value An integer value indicating how many samples each second of audio data includes. Common values include 44,100 (standard CD audio), 48,000 (standard digital audio), 96,000 (commonly used in audio mastering and post-production), and 192,000 (used for high-resolution audio in professional recording and mastering sessions). However, lower values are often used to reduce bandwidth requirements; 8,000 samples per second is adequate for comprehensible albeit imperfect human speech, and both 11,025 FPS and 22,050 FPS are often used for low-bandwidth, reduced quality sound and music.",
        "type": "Media Streams"
    },
    "MediaTrackSettings.sampleSize": {
        "descr": "The MediaTrackSettings dictionary's sampleSize property is an integer indicating the linear sample size (in bits per sample) the MediaStreamTrack is currently configured for. This lets you determine what value was selected to comply with your specified constraints for this property's value as described in the MediaTrackConstraints.sampleSize property you provided when calling either getUserMedia() or MediaStreamTrack.applyConstraints().",
        "name": "MediaTrackSettings.sampleSize",
        "params": [],
        "path": "dom/mediatracksettings/samplesize",
        "syntax": "var sampleSize = MediaTrackSettings.sampleSize;  Value An integer value indicating how many bits each audio sample is represented by. The most commonly used sample size for many years now is 16 bits per sample, which was used for CD audio among others. Other common sample sizes are 8 (for reduced bandwidth requirements) and 24 (for high-resolution professional audio).",
        "type": "Media Streams"
    },
    "MediaTrackSupportedConstraints.aspectRatio": {
        "descr": "The MediaTrackSupportedConstraints dictionary's aspectRatio property is a read-only Boolean value which is present (and set to true) in the object returned by MediaDevices.getSupportedConstraints() if and only if the user agent supports the aspectRatio constraint. If the constraint isn't supported, it's not included in the list, so this value will never be false.",
        "name": "MediaTrackSupportedConstraints.aspectRatio",
        "params": [],
        "path": "dom/mediatracksupportedconstraints/aspectratio",
        "syntax": "aspectConstraintSupported = supportedConstraintsDictionary[\"aspectRatio\"]; Value This property is present in the dictionary (and its value is always true) if the user agent supports the aspectRatio",
        "type": "Media Streams"
    },
    "MediaTrackSupportedConstraints.autoGainControl": {
        "descr": "The MediaTrackSupportedConstraints dictionary's autoGainControl property is a read-only Boolean value which is present (and set to true) in the object returned by MediaDevices.getSupportedConstraints() if and only if the user agent supports the autoGainControl constraint. If the constraint isn't supported, it's not included in the list, so this value will never be false.",
        "name": "MediaTrackSupportedConstraints.autoGainControl",
        "params": [],
        "path": "dom/mediatracksupportedconstraints/autogaincontrol",
        "syntax": "autoGainSupported = supportedConstraintsDictionary[\"autoGainControl\"]; Value This property is present in the dictionary (and its value is always true) if the user agent supports the autoGainControl",
        "type": "Media Streams"
    },
    "MediaTrackSupportedConstraints.channelCount": {
        "descr": "The MediaTrackSupportedConstraints dictionary's channelCount property is a read-only Boolean value which is present (and set to true) in the object returned by MediaDevices.getSupportedConstraints() if and only if the user agent supports the channelCount constraint. If the constraint isn't supported, it's not included in the list, so this value will never be false.",
        "name": "MediaTrackSupportedConstraints.channelCount",
        "params": [],
        "path": "dom/mediatracksupportedconstraints/channelcount",
        "syntax": "channelCountConstraintSupported = supportedConstraintsDictionary[\"channelCount\"]; Value This property is present in the dictionary (and its value is always true) if the user agent supports the channelCount",
        "type": "Media Streams"
    },
    "MediaTrackSupportedConstraints.deviceId": {
        "descr": "The MediaTrackSupportedConstraints dictionary's deviceId property is a read-only Boolean value which is present (and set to true) in the object returned by MediaDevices.getSupportedConstraints() if and only if the user agent supports the deviceId constraint. If the constraint isn't supported, it's not included in the list, so this value will never be false.",
        "name": "MediaTrackSupportedConstraints.deviceId",
        "params": [],
        "path": "dom/mediatracksupportedconstraints/deviceid",
        "syntax": "deviceIdConstraintSupported = supportedConstraintsDictionary[\"deviceId\"]; Value This property is present in the dictionary (and its value is always true) if the user agent supports the deviceId",
        "type": "Media Streams"
    },
    "MediaTrackSupportedConstraints.echoCancellation": {
        "descr": "The MediaTrackSupportedConstraints dictionary's echoCancellation property is a read-only Boolean value which is present (and set to true) in the object returned by MediaDevices.getSupportedConstraints() if and only if the user agent supports the echoCancellation constraint. If the constraint isn't supported, it's not included in the list, so this value will never be false.",
        "name": "MediaTrackSupportedConstraints.echoCancellation",
        "params": [],
        "path": "dom/mediatracksupportedconstraints/echocancellation",
        "syntax": "echoCancellationConstraintSupported = supportedConstraintsDictionary[\"echoCancellation\"]; Value This property is present in the dictionary (and its value is always true) if the user agent supports the echoCancellation",
        "type": "Media Streams"
    },
    "MediaTrackSupportedConstraints.facingMode": {
        "descr": "The MediaTrackSupportedConstraints dictionary's facingMode property is a read-only Boolean value which is present (and set to true) in the object returned by MediaDevices.getSupportedConstraints() if and only if the user agent supports the facingMode constraint. If the constraint isn't supported, it's not included in the list, so this value will never be false.",
        "name": "MediaTrackSupportedConstraints.facingMode",
        "params": [],
        "path": "dom/mediatracksupportedconstraints/facingmode",
        "syntax": "facingModeConstraintSupported = supportedConstraintsDictionary[\"facingMode\"]; Value This property is present in the dictionary (and its value is always true) if the user agent supports the facingMode",
        "type": "Media Streams"
    },
    "MediaTrackSupportedConstraints.frameRate": {
        "descr": "The MediaTrackSupportedConstraints dictionary's frameRate property is a read-only Boolean value which is present (and set to true) in the object returned by MediaDevices.getSupportedConstraints() if and only if the user agent supports the frameRate constraint. If the constraint isn't supported, it's not included in the list, so this value will never be false.",
        "name": "MediaTrackSupportedConstraints.frameRate",
        "params": [],
        "path": "dom/mediatracksupportedconstraints/framerate",
        "syntax": "frameRateConstraintSupported = supportedConstraintsDictionary[\"frameRate\"]; Value This property is present in the dictionary if the user agent supports the frameRate constraint. If the property isn't present, the user agent doesn't allow specifying limits on the frame rate for video tracks.  If this property is present, its value is always true.  Example This simple example looks to see if your browser supports constraining the frame rate when requesting video tracks. JavaScript let result = document.getElementById(\"result\");\n or  if (navigator.mediaDevices.getSupportedConstraints()[\"frameRate\"]) { result.innerHTML = \"Supported!\"; } else { result.innerHTML = \"Not supported!\"; });",
        "type": "Media Streams"
    },
    "MediaTrackSupportedConstraints.groupId": {
        "descr": "The MediaTrackSupportedConstraints dictionary's groupId property is a read-only Boolean value which is present (and set to true) in the object returned by MediaDevices.getSupportedConstraints() if and only if the user agent supports the groupId constraint. If the constraint isn't supported, it's not included in the list, so this value will never be false.",
        "name": "MediaTrackSupportedConstraints.groupId",
        "params": [],
        "path": "dom/mediatracksupportedconstraints/groupid",
        "syntax": "groupIdConstraintSupported = supportedConstraintsDictionary[\"groupId\"]; Value This property is present in the dictionary (and its value is always true) if the user agent supports the groupId",
        "type": "Media Streams"
    },
    "MediaTrackSupportedConstraints.height": {
        "descr": "The MediaTrackSupportedConstraints dictionary's height property is a read-only Boolean value which is present (and set to true) in the object returned by MediaDevices.getSupportedConstraints() if and only if the user agent supports the height constraint. If the constraint isn't supported, it's not included in the list, so this value will never be false.",
        "name": "MediaTrackSupportedConstraints.height",
        "params": [],
        "path": "dom/mediatracksupportedconstraints/height",
        "syntax": "heightConstraintSupported = supportedConstraintsDictionary[\"height\"]; Value This property is present in the dictionary (and its value is always true) if the user agent supports the height",
        "type": "Media Streams"
    },
    "MediaTrackSupportedConstraints.latency": {
        "descr": "The MediaTrackSupportedConstraints dictionary's latency property is a read-only Boolean value which is present (and set to true) in the object returned by MediaDevices.getSupportedConstraints() if and only if the user agent supports the latency constraint. If the constraint isn't supported, it's not included in the list, so this value will never be false.",
        "name": "MediaTrackSupportedConstraints.latency",
        "params": [],
        "path": "dom/mediatracksupportedconstraints/latency",
        "syntax": "latencyConstraintSupported = supportedConstraintsDictionary[\"latency\"]; Value This property is present in the dictionary (and its value is always true) if the user agent supports the latency",
        "type": "Media Streams"
    },
    "MediaTrackSupportedConstraints.noiseSuppression": {
        "descr": "The MediaTrackSupportedConstraints dictionary's noiseSuppression property is a read-only Boolean value which is present (and set to true) in the object returned by MediaDevices.getSupportedConstraints() if and only if the user agent supports the noiseSuppression constraint. If the constraint isn't supported, it's not included in the list, so this value will never be false.",
        "name": "MediaTrackSupportedConstraints.noiseSuppression",
        "params": [],
        "path": "dom/mediatracksupportedconstraints/noisesuppression",
        "syntax": "noiseSuppressionSupported = supportedConstraintsDictionary[\"noiseSuppression\"]; Value This property is present in the dictionary (and its value is always true) if the user agent supports the noiseSuppression",
        "type": "Media Streams"
    },
    "MediaTrackSupportedConstraints.sampleRate": {
        "descr": "The MediaTrackSupportedConstraints dictionary's sampleRate property is a read-only Boolean value which is present (and set to true) in the object returned by MediaDevices.getSupportedConstraints() if and only if the user agent supports the sampleRate constraint. If the constraint isn't supported, it's not included in the list, so this value will never be false.",
        "name": "MediaTrackSupportedConstraints.sampleRate",
        "params": [],
        "path": "dom/mediatracksupportedconstraints/samplerate",
        "syntax": "sampleRateConstraintSupported = supportedConstraintsDictionary[\"sampleRate\"]; Value This property is present in the dictionary (and its value is always true) if the user agent supports the sampleRate",
        "type": "Media Streams"
    },
    "MediaTrackSupportedConstraints.sampleSize": {
        "descr": "The MediaTrackSupportedConstraints dictionary's sampleSize property is a read-only Boolean value which is present (and set to true) in the object returned by MediaDevices.getSupportedConstraints() if and only if the user agent supports the sampleSize constraint. If the constraint isn't supported, it's not included in the list, so this value will never be false.",
        "name": "MediaTrackSupportedConstraints.sampleSize",
        "params": [],
        "path": "dom/mediatracksupportedconstraints/samplesize",
        "syntax": "sampleSizeConstraintSupported = supportedConstraintsDictionary[\"sampleSize\"]; Value This property is present in the dictionary (and its value is always true) if the user agent supports the sampleSize",
        "type": "Media Streams"
    },
    "MediaTrackSupportedConstraints.volume": {
        "descr": "The MediaTrackSupportedConstraints dictionary's volume property is a read-only Boolean value which is present (and set to true) in the object returned by MediaDevices.getSupportedConstraints() if and only if the user agent supports the volume constraint. If the constraint isn't supported, it's not included in the list, so this value will never be false.",
        "name": "MediaTrackSupportedConstraints.volume",
        "params": [],
        "path": "dom/mediatracksupportedconstraints/volume",
        "syntax": "volumeConstraintSupported = supportedConstraintsDictionary[\"volume\"]; Value This property is present in the dictionary (and its value is always true) if the user agent supports the volume",
        "type": "Media Streams"
    },
    "MediaTrackSupportedConstraints.width": {
        "descr": "The MediaTrackSupportedConstraints dictionary's width property is a read-only Boolean value which is present (and set to true) in the object returned by MediaDevices.getSupportedConstraints() if and only if the user agent supports the width constraint. If the constraint isn't supported, it's not included in the list, so this value will never be false.",
        "name": "MediaTrackSupportedConstraints.width",
        "params": [],
        "path": "dom/mediatracksupportedconstraints/width",
        "syntax": "widthConstraintSupported = supportedConstraintsDictionary[\"width\"]; Value This property is present in the dictionary (and its value is always true) if the user agent supports the width",
        "type": "Media Streams"
    },
    "MerchantValidationEvent.complete": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "MerchantValidationEvent.complete",
        "params": [
            {
                "descr": "An object containing the data needed to complete the merchant validation process, or a Promise which resolves to the validation data.",
                "name": "validationData or merchantSessionPromise"
            },
            {
                "descr": "The event did not come directly from the user agent, but was instead dispatched by other code. ",
                "name": "InvalidStateError"
            }
        ],
        "path": "dom/merchantvalidationevent/complete",
        "syntax": "merchantValidationEvent.complete(validationData);\n or  merchantValidationEvent.complete(merchantSessionPromise);",
        "type": "Payments"
    },
    "MerchantValidationEvent.constructor": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "MerchantValidationEvent.constructor",
        "params": [
            {
                "descr": "A DOMString which must be merchantvalidation, the only type of event which uses the MerchantValidationEvent interface.",
                "name": "type"
            },
            {
                "descr": "An optional dictionary which may contain zero or more of the following properties:   methodName Optional  A DOMString containing the payment method identifier for the payment handler being used. ",
                "name": "options Optional"
            },
            {
                "descr": "The URL from which to retrieve payment handler specific verification information used to validate the merchant. ",
                "name": "validationURL Optional"
            },
            {
                "descr": "The string specified as validationURL could not be parsed as a URL.",
                "name": "TypeError"
            },
            {
                "descr": "The specified methodName does not correspond to a known and supported merchant or is not a well-formed standard payment method identifier.",
                "name": "RangeError"
            }
        ],
        "path": "dom/merchantvalidationevent/merchantvalidationevent",
        "syntax": "merchantValidationEvent = new MerchantValidationEvent(type, options);",
        "type": "Payments"
    },
    "MerchantValidationEvent.methodName": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "MerchantValidationEvent.methodName",
        "params": [],
        "path": "dom/merchantvalidationevent/methodname",
        "syntax": "methodID = merchantValidationEvent.methodName; Value A read-only DOMString which uniquely identifies the payment handler which is requesting merchant validation. See Merchant validation in Payment processing concepts for more information on the process. Specifications    Specification Status Comment   Payment Request APIThe definition of 'MerchantValidationEvent.methodName' in that specification. Candidate Recommendation Initial definition.    Browser compatibility No compatibility data found. Please contribute data for \"api.MerchantValidationEvent.methodName\" (depth: 1) to the MDN compatibility data repository.",
        "type": "Payments"
    },
    "MerchantValidationEvent.validationURL": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "MerchantValidationEvent.validationURL",
        "params": [],
        "path": "dom/merchantvalidationevent/validationurl",
        "syntax": "validationURL = merchantValidationEvent.validationURL; Value A read-only USVString giving the URL from which to load payment handler specific data needed to complete the merchant verification process. Once this has been loaded, it should be passed into complete()",
        "type": "Payments"
    },
    "MessageChannel.constructor": {
        "descr": "The MessageChannel() constructor of the MessageChannel interface returns a new MessageChannel object with two new MessagePort objects.",
        "name": "MessageChannel.constructor",
        "params": [],
        "path": "dom/messagechannel/messagechannel",
        "syntax": "var channel = new MessageChannel();",
        "type": "Channel Messaging"
    },
    "MessageChannel.port1": {
        "descr": "The port1 read-only property of the MessageChannel interface returns the first port of the message channel — the port attached to the context that originated the channel.",
        "name": "MessageChannel.port1",
        "params": [],
        "path": "dom/messagechannel/port1",
        "syntax": "channel.port1; Value A MessagePort object, the first port of the channel, that is the port attached to the context that originated the channel. Example In the following code block, you can see a new channel being created using the MessageChannel()",
        "type": "Channel Messaging"
    },
    "MessageChannel.port2": {
        "descr": "The port2 read-only property of the MessageChannel interface returns the second port of the message channel — the port attached to the context at the other end of the channel, which the message is initially sent to.",
        "name": "MessageChannel.port2",
        "params": [],
        "path": "dom/messagechannel/port2",
        "syntax": "channel.port2; Value A MessagePort object representing the second port of the channel, the port attached to the context at the other end of the channel. Example In the following code block, you can see a new channel being created using the MessageChannel.MessageChannel constructor. When the IFrame has loaded, we pass port2 to the IFrame using MessagePort.postMessage along with a message. The handleMessage handler then responds to a message being sent back from the IFrame (using MessagePort.onmessage), putting it into a paragraph. MessageChannel.port1",
        "type": "Channel Messaging"
    },
    "MessageEvent.constructor": {
        "descr": "Draft This page is not complete.",
        "name": "MessageEvent.constructor",
        "params": [
            {
                "descr": "The type of MessageEvent that will be created. ",
                "name": "type"
            },
            {
                "descr": "A dictionary object that can contain the following properties:   data: The data you want contained in the MessageEvent. ",
                "name": "initOptional"
            }
        ],
        "path": "dom/messageevent/messageevent",
        "syntax": "var messageEvent = new MessageEvent(type, init);",
        "type": "Channel Messaging"
    },
    "MessageEvent.data": {
        "descr": "The data read-only property of the MessageEvent interface represents the data sent by the message emitter.",
        "name": "MessageEvent.data",
        "params": [],
        "path": "dom/messageevent/data",
        "syntax": "var data = messageEvent.data; Value The data sent by the message emitter; this can be any data type. Example myWorker.onmessage = function(e) { result.textContent = e.data; console.log('Message received from worker');\n or  };);",
        "type": "Channel Messaging"
    },
    "MessageEvent.lastEventId": {
        "descr": "The lastEventId read-only property of the MessageEvent interface is a DOMString representing a unique ID for the event.",
        "name": "MessageEvent.lastEventId",
        "params": [],
        "path": "dom/messageevent/lasteventid",
        "syntax": "var myId = messageEvent.lastEventId; Value A DOMString representing the ID. Example myWorker.onmessage = function(e) { result.textContent = e.data; console.log('Message received from worker');\n or  console.log(e.lastEventId);\n or  };);",
        "type": "Channel Messaging"
    },
    "MessageEvent.origin": {
        "descr": "The origin read-only property of the MessageEvent interface is a USVString representing the origin of the message emitter.",
        "name": "MessageEvent.origin",
        "params": [],
        "path": "dom/messageevent/origin",
        "syntax": "var origin = messageEvent.origin; Value A USVString representing the origin. Example myWorker.onmessage = function(e) { result.textContent = e.data; console.log('Message received from worker');\n or  console.log(e.origin);\n or  };);",
        "type": "Channel Messaging"
    },
    "MessageEvent.ports": {
        "descr": "The ports read-only property of the MessageEvent interface is an array of MessagePort objects representing the ports associated with the channel the message is being sent through (where appropriate, e.g. in channel messaging or when sending a message to a shared worker).",
        "name": "MessageEvent.ports",
        "params": [],
        "path": "dom/messageevent/ports",
        "syntax": "var myPorts = messageEvent.ports; Value An array of MessagePort objects. Example onconnect = function(e) { var port = e.ports[0]; port.addEventListener('message', function(e) { var workerResult = 'Result: ' + (e.data[0] * e.data[1]);\n or  port.postMessage(workerResult);\n or  });\n or  port.start();\n or  // Required when using addEventListener. Otherwise called implicitly by onmessage setter. });",
        "type": "Channel Messaging"
    },
    "MessageEvent.source": {
        "descr": "The source read-only property of the MessageEvent interface is a MessageEventSource (which can be a WindowProxy, MessagePort, or ServiceWorker object) representing the message emitter.",
        "name": "MessageEvent.source",
        "params": [],
        "path": "dom/messageevent/source",
        "syntax": "var mySource = messageEvent.source; Value a MessageEventSource (which can be a WindowProxy, MessagePort, or ServiceWorker object) representing the message emitter.",
        "type": "Channel Messaging"
    },
    "MessagePort.close": {
        "descr": "The close() method of the MessagePort interface disconnects the port, so it is no longer active. This stops the flow of messages to that port.",
        "name": "MessagePort.close",
        "params": [],
        "path": "dom/messageport/close",
        "syntax": "port.close()",
        "type": "Channel Messaging"
    },
    "MessagePort.onmessage": {
        "descr": "The onmessage event handler of the MessagePort interface is an EventListener, called whenever an MessageEvent of type message is fired on the port — that is, when the port receives a message.",
        "name": "MessagePort.onmessage",
        "params": [],
        "path": "dom/messageport/onmessage",
        "syntax": "channel.onmessage = function() { ... };",
        "type": "Channel Messaging"
    },
    "MessagePort.onmessageerror": {
        "descr": "The onmessageerror event handler of the MessagePort interface is an EventListener, called whenever an MessageEvent of type messageerror is fired on the port—that is, when it receives a message that cannot be deserialized.",
        "name": "MessagePort.onmessageerror",
        "params": [],
        "path": "dom/messageport/onmessageerror",
        "syntax": "port.onmessageerror = function() { ... };",
        "type": "Channel Messaging"
    },
    "MessagePort.postMessage": {
        "descr": "The postMessage() method of the MessagePort interface sends a message from the port, and optionally, transfers ownership of objects to other browsing contexts.",
        "name": "MessagePort.postMessage",
        "params": [
            {
                "descr": "The message you want to send through the channel. ",
                "name": "message"
            },
            {
                "descr": "Transferable objects to be transferred — these objects have their ownership transferred to the receiving browsing context, so are no longer usable by the sending browsing context.",
                "name": "transferList Optional"
            }
        ],
        "path": "dom/messageport/postmessage",
        "syntax": "port.postMessage(message, transferList);",
        "type": "Channel Messaging"
    },
    "MessagePort.start": {
        "descr": "The start() method of the MessagePort interface starts the sending of messages queued on the port. This method is only needed when using EventTarget.addEventListener; it is implied when using MessageChannel.onmessage.",
        "name": "MessagePort.start",
        "params": [],
        "path": "dom/messageport/start",
        "syntax": "port.start()",
        "type": "Channel Messaging"
    },
    "Metadata.modificationTime": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Metadata.modificationTime",
        "params": [],
        "path": "dom/metadata/modificationtime",
        "syntax": "var modificationTime = Metadata.modificationTime; Value A Date timestamp indicating when the file system entry was last changed. Example This example tries to get a particular working file at tmp/workfile.json. Once that file has been found, its metadata is obtained and the file's modification timestamp year is compared to the current year. If it was last modified in a year at least five prior to the current year, the file is removed and a new one is created. workingDirectory.getFile(\"tmp/workfile.json\", { create: true }, function(fileEntry) { fileEntry.getMetadata(function(metadata) { if ((new Date().getFullYear() - metadata.modificationTime.getFullYear()) >= 5) { fileEntry.remove(function() { workingDirectory.getFile(\"tmp/workfile.json\", { create: true }, function(newEntry) { fileEntry = newEntry; });\n or  });\n or  } });\n or  }, handleError);",
        "type": "File"
    },
    "Metadata.size": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Metadata.size",
        "params": [],
        "path": "dom/metadata/size",
        "syntax": "var size = Metadata.size; Value A number indicating the size of the file in bytes. Example This example checks the size of a log file and removes it if it's larger than a megabyte. workingDirectory.getFile(\"log/important.log\", {}, function(fileEntry) { fileEntry.getMetadata(function(metadata) { if (metadata.size > 1048576) { fileEntry.remove(function() { /* log file removed; do something clever here */ });\n or  } });\n or  }, handleError);",
        "type": "File"
    },
    "Method definitions": {
        "descr": "Starting with ECMAScript 2015, a shorter syntax for method definitions on objects initializers is introduced. It is a shorthand for a function assigned to the method's name.",
        "name": "Method definitions",
        "params": [],
        "path": "javascript/functions/method_definitions",
        "syntax": "var obj = { property( parameters… ) {}, *generator( parameters… ) {}, async property( parameters… ) {}, async* generator( parameters… ) {}, // with computed keys: [property]( parameters… ) {}, *[generator]( parameters… ) {}, async [property]( parameters… ) {}, // compare getter/setter syntax: get property() {}, set property(value) {} };",
        "type": "Function"
    },
    "MouseEvent.altKey": {
        "descr": "The MouseEvent.altKey read-only property is a Boolean indicates if the alt key was pressed (true) or not (false) when the event occurred.",
        "name": "MouseEvent.altKey",
        "params": [],
        "path": "dom/mouseevent/altkey",
        "syntax": "var altKeyPressed = instanceOfMouseEvent.altKey  Examples <html> <head> <title>altKey example</title> <script type=\"text/javascript\"> document.addEventListener('click', function(e) { console.log('Is Alt/Option key pressed?', e.altKey);\n or  }) </script> </head> <body> <p> Click anywhere on the page and open your developer console to see the results. </p> </body> </html>);",
        "type": "Events"
    },
    "MouseEvent.button": {
        "descr": "The MouseEvent.button read-only property indicates which button was pressed on the mouse to trigger the event.",
        "name": "MouseEvent.button",
        "params": [],
        "path": "dom/mouseevent/button",
        "syntax": "var buttonPressed = instanceOfMouseEvent.button  Return value A number representing a given button:   0: Main button pressed, usually the left button or the un-initialized state  1: Auxiliary button pressed, usually the wheel button or the middle button (if present)  2",
        "type": "Events"
    },
    "MouseEvent.buttons": {
        "descr": "TheMouseEvent.buttons read-only property indicates which buttons are pressed on the mouse (or other input device) when the event is triggered.",
        "name": "MouseEvent.buttons",
        "params": [],
        "path": "dom/mouseevent/buttons",
        "syntax": "var buttonPressed = instanceOfMouseEvent.buttons  Return value A number representing one or more buttons. For more than one button pressed simultaneously, the values are combined (e.g. 3 is primary + secondary).",
        "type": "Events"
    },
    "MouseEvent.clientX": {
        "descr": "The clientX read-only property of the MouseEvent interface provides the horizontal coordinate within the application's client area at which the event occurred (as opposed to the coordinates within the page). For example, clicking in the top-left corner of the client area will always result in a mouse event with a clientX value of 0, regardless of whether the page is scrolled horizontally. Originally, this property was defined as a long integer. The CSSOM View Module redefined it as a double float. See the Browser compatibility section for details.",
        "name": "MouseEvent.clientX",
        "params": [],
        "path": "dom/mouseevent/clientx",
        "syntax": "var x = instanceOfMouseEvent.clientX  Return value A number Example <!DOCTYPE html> <html> <head> <title>clientX/clientY example</title> <script> function showCoords(evt){ alert( \"clientX value: \" + evt.clientX + \"\\n\" + \"clientY value: \" + evt.clientY + \"\\n\" );\n or  } </script> </head> <body onmousedown=\"showCoords(event)\"> <p>To display the mouse coordinates click anywhere on the page.</p> </body> </html>);",
        "type": "CSS"
    },
    "MouseEvent.clientY": {
        "descr": "The clientY read-only property of the MouseEvent interface returns the vertical coordinate within the application's client area at which the event occurred (as opposed to the coordinates within the page). For example, clicking in the top-left corner of the client area will always result in a mouse event with a clientY value of 0, regardless of whether the page is scrolled vertically. Originally, this property was defined as a long integer. The CSSOM View Module redefined it as a double float. See the Browser compatibility section for details.",
        "name": "MouseEvent.clientY",
        "params": [],
        "path": "dom/mouseevent/clienty",
        "syntax": "var y = instanceOfMouseEvent.clientY  Return value A number Example <html> <head> <title>clientX\\clientY example</title> <script type=\"text/javascript\"> function showCoords(evt){ alert( \"clientX value: \" + evt.clientX + \"\\n\" + \"clientY value: \" + evt.clientY + \"\\n\" );\n or  } </script> </head> <body onmousedown=\"showCoords(event)\"> <p>To display the mouse coordinates click anywhere on the page.</p> </body> </html>);",
        "type": "CSS"
    },
    "MouseEvent.constructor": {
        "descr": "The MouseEvent() constructor creates a new MouseEvent.",
        "name": "MouseEvent.constructor",
        "params": [
            {
                "descr": "Is a DOMString representing the name of the event.",
                "name": "typeArg"
            },
            {
                "descr": "Is a MouseEventInit dictionary, having the following fields:   \"screenX\", optional and defaulting to 0, of type long, that is the horizontal position of the mouse event on the user's screen; setting this value doesn't move the mouse pointer.  \"screenY\", optional and defaulting to 0, of type long, that is the vertical position of the mouse event on the user's screen; setting this value doesn't move the mouse pointer.  \"clientX\", optional and defaulting to 0, of type long, that is the horizontal position of the mouse event on the client window of user's screen; setting this value doesn't move the mouse pointer.  \"clientY\", optional and defaulting to 0, of type long, that is the vertical position of the mouse event on the client window of the user's screen; setting this value doesn't move the mouse pointer.  \"ctrlKey\", optional and defaulting to false, of type Boolean, that indicates if the ctrl key was simultaneously pressed.  \"shiftKey\", optional and defaulting to false, of type Boolean, that indicates if the shift key was simultaneously pressed.  \"altKey\", optional and defaulting to false, of type Boolean, that indicates if the alt key was simultaneously pressed.  \"metaKey\", optional and defaulting to false, of type Boolean, that indicates if the meta key was simultaneously pressed.  \"button\", optional and defaulting to 0, of type short, that describes which button is pressed during events related to the press or release of a button:    Value Meaning     0 Main button pressed (usually the left button) or un-initialized   1 Auxiliary button pressed (usually the middle button)   2 Secondary button pressed (usually the right button)      \"buttons\", optional and defaulting to 0, of type unsigned short, that describes which buttons are pressed when the event is launched:    Bit-field value Meaning     0 No button pressed   1 Main button pressed (usually the left button)   2 Secondary button pressed (usually the right button)   4 Auxiliary button pressed (usually the middle button)      \"relatedTarget\", optional and defaulting to null, of type EventTarget, that is the element just left (in case of a mouseenter or mouseover) or is entering (in case of a mouseout or mouseleave).  \"region\", optional and defaulting to null, of type DOMString, is the id of the hit region affected by the event. The absence of any hit region is affected, is represented by the null value.  In some implementations, passing anything other than a number for the screen and client fields will throw a TypeError.  The MouseEventInit dictionary also accepts fields from UIEventInit and from EventInit dictionaries.",
                "name": "mouseEventInit Optional"
            }
        ],
        "path": "dom/mouseevent/mouseevent",
        "syntax": "event = new MouseEvent(typeArg, mouseEventInit);",
        "type": "CSS"
    },
    "MouseEvent.ctrlKey": {
        "descr": "The MouseEvent.ctrlKey read-only property returns a Boolean that indicates if the control key was pressed (true) or not (false) when the event occured.",
        "name": "MouseEvent.ctrlKey",
        "params": [],
        "path": "dom/mouseevent/ctrlkey",
        "syntax": "var ctrlKeyPressed = instanceOfMouseEvent.ctrlKey  Return value A boolean Example <html> <head> <title>ctrlKey example</title> <script type=\"text/javascript\"> document.addEventListener('click', function(e) { console.log('Is Control key pressed?', e.ctrlKey);\n or  }) </script> </head> <body> <p> Click anywhere on the page and open your developer console to see the results. </p> </body> </html>);",
        "type": "Events"
    },
    "MouseEvent.getModifierState": {
        "descr": "The MouseEvent.getModifierState() method returns the current state of the specified modifier key: true if the modifier is active (i.e., the modifier key is pressed or locked), otherwise, false.",
        "name": "MouseEvent.getModifierState",
        "params": [
            {
                "descr": "A modifier key value. The value must be one of the KeyboardEvent.key values which represent modifier keys or \"Accel\". ",
                "name": "keyArg"
            }
        ],
        "path": "dom/mouseevent/getmodifierstate",
        "syntax": "var active =​ event.getModifierState(keyArg);",
        "type": "Events"
    },
    "MouseEvent.metaKey": {
        "descr": "The MouseEvent.metaKey read-only property returning a Boolean that indicates if the Meta key was pressed (true) or not (false) when the event occured.",
        "name": "MouseEvent.metaKey",
        "params": [],
        "path": "dom/mouseevent/metakey",
        "syntax": "var metaKeyPressed = instanceOfMouseEvent.metaKey  Return value A boolean Example  function goInput(e) { // checks metaKey and if (e.metaKey) { // passes event along superSizeOutput(e);\n or  } else { doOutput(e);\n or  } });",
        "type": "Events"
    },
    "MouseEvent.offsetX": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MouseEvent.offsetX",
        "params": [],
        "path": "dom/mouseevent/offsetx",
        "syntax": "var xOffset = instanceOfMouseEvent.offsetX;  Return value A double floating point value. Early versions of the spec defined this as an integer. See the Browser compatibility section for details. Specifications    Specification Status Comment   CSS Object Model (CSSOM) View ModuleThe definition of 'MouseEvent' in that specification. Working Draft Initial definition    Browser compatibilityUpdate compatibility data on GitHub",
        "type": "CSS"
    },
    "MouseEvent.offsetY": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "MouseEvent.offsetY",
        "params": [],
        "path": "dom/mouseevent/offsety",
        "syntax": "var yOffset = instanceOfMouseEvent.offsetY;  Return value A double floating point value. Early versions of the spec defined this as an integer. See the Browser compatibility section for details. Specifications    Specification Status Comment   CSS Object Model (CSSOM) View ModuleThe definition of 'MouseEvent' in that specification. Working Draft Initial definition    Browser compatibilityUpdate compatibility data on GitHub",
        "type": "CSS"
    },
    "MouseEvent.pageX": {
        "descr": "The pageX read-only property of the MouseEvent interface returns the X (horizontal) coordinate (in pixels) at which the mouse was clicked, relative to the left edge of the entire document. This includes any portion of the document not currently visible.",
        "name": "MouseEvent.pageX",
        "params": [],
        "path": "dom/mouseevent/pagex",
        "syntax": "var pageX = MouseEvent.pageX; Value A floating-point number of pixels from the left edge of the document at which the mouse was clicked, regardless of any scrolling or viewport positioning that may be in effect. This property was originally specified in the Touch Events specification as a long integer, but was redefined in the CSSOM View Module to be a double-precision floating-point number to allow for subpixel precision. Even though numeric types both are represented by Number in JavaScript, they may be handled differently internally in the browser's code, resulting in potential behavior differences. See Browser compatibility to learn which browsers have been updated to use the revised data type. Example  More examples You can also see an example that demonstrates how to access the mouse position information in every available coordinate system. Let's take a look at a simple example that shows you the mouse's position relative to the page's origin. Since this example is presented in an <iframe>, that top-left corner is the top-left corner of the frame, not the browser window. JavaScript var box = document.querySelector(\".box\");\n or  var pageX = document.getElementById(\"x\");\n or  var pageY = document.getElementById(\"y\");\n or  function updateDisplay(event) { pageX.innerText = event.pageX; pageY.innerText = event.pageY; } box.addEventListener(\"mousemove\", updateDisplay, false);\n or  box.addEventListener(\"mouseenter\", updateDisplay, false);\n or  box.addEventListener(\"mouseleave\", updateDisplay, false);",
        "type": "CSS"
    },
    "MouseEvent.pageY": {
        "descr": "The pageY read-only property of the MouseEvent interface returns the Y (vertical) coordinate in pixels of the event relative to the whole document. This property takes into account any vertical scrolling of the page. Originally, this property was defined as a long integer. The CSSOM View Module redefined it as a double float. See the Browser compatibility section for details.",
        "name": "MouseEvent.pageY",
        "params": [],
        "path": "dom/mouseevent/pagey",
        "syntax": "var pos = event.pageY Examples var pageY = event.pageY; Specifications    Specification Status Comment   CSS Object Model (CSSOM) View ModuleThe definition of 'pageY' in that specification. Working Draft Redefined from long",
        "type": "CSS"
    },
    "MouseEvent.region": {
        "descr": "The MouseEvent.region read-only property returns the id of the canvas hit region affected by the event. If no hit region is affected, null is returned.",
        "name": "MouseEvent.region",
        "params": [],
        "path": "dom/mouseevent/region",
        "syntax": "var hitRegion = instanceOfMouseEvent.region  Return value A DOMString representing the id of the hit region. Example <canvas id=\"canvas\"></canvas> <script> var canvas = document.getElementById(\"canvas\");\n or  var ctx = canvas.getContext(\"2d\");\n or  ctx.beginPath();\n or  ctx.arc(70, 80, 10, 0, 2 * Math.PI, false);\n or  ctx.fill();\n or  ctx.addHitRegion({id: \"circle\"});\n or  canvas.addEventListener(\"mousemove\", function(event){ if(event.region) { console.log(\"hit region: \" + event.region);\n or  } });\n or  </script>);",
        "type": "Events"
    },
    "MouseEvent.relatedTarget": {
        "descr": "The MouseEvent.relatedTarget read-only property is the secondary target for the event, if there is one. That is:",
        "name": "MouseEvent.relatedTarget",
        "params": [],
        "path": "dom/mouseevent/relatedtarget",
        "syntax": "var tgt = instanceOfMouseEvent.relatedTarget  Return value An EventTarget object or null. Example <!DOCTYPE html> <html> <head> <style> div > div { height: 128px; width: 128px; } #top { background-color: red; } #bottom { background-color: blue; } </style> <script> function outListener(event) { console.log(\"exited \" + event.target.id + \" for \" + event.relatedTarget.id);\n or  } function overListener(event) { console.log(\"entered \" + event.target.id + \" from \" + event.relatedTarget.id);\n or  } function loadListener() { var top = document.getElementById(\"top\"), bottom = document.getElementById(\"bottom\");\n or  top.addEventListener(\"mouseover\", overListener);\n or  top.addEventListener(\"mouseout\", outListener);\n or  bottom.addEventListener(\"mouseover\", overListener);\n or  bottom.addEventListener(\"mouseout\", outListener);\n or  } </script> </head> <body onload=\"loadListener();\n or \"> <div id=\"outer\"> <div id=\"top\"></div> <div id=\"bottom\"></div> </div> </body> </html>);",
        "type": "Events"
    },
    "MouseEvent.screenX": {
        "descr": "The screenX read-only property of the MouseEvent property provides the horizontal coordinate (offset) of the mouse pointer in global (screen) coordinates.",
        "name": "MouseEvent.screenX",
        "params": [],
        "path": "dom/mouseevent/screenx",
        "syntax": "var pixelNumber = instanceOfMouseEvent.screenX  Return value A double floating point value. Early versions of the spec defined this as an integer referring to the number of pixels. See the Browser compatibility section for details. Example <html> <head> <title>screenX\\screenY example</title> <script type=\"text/javascript\"> function showCoords(evt){ alert( \"screenX value: \" + evt.screenX + \"\\n\" + \"screenY value: \" + evt.screenY + \"\\n\" );\n or  } </script> </head> <body onmousedown=\"showCoords(event)\"> <p>To display the mouse coordinates click anywhere on the page.</p> </body> </html>);",
        "type": "CSS"
    },
    "MouseEvent.screenY": {
        "descr": "The screenY read-only property of the MouseEvent interface provides the vertical coordinate (offset) of the mouse pointer in global (screen) coordinates.",
        "name": "MouseEvent.screenY",
        "params": [],
        "path": "dom/mouseevent/screeny",
        "syntax": "var pixelNumber = instanceOfMouseEvent.screenY  Return value A double floating point value. Early versions of the spec defined this as an interger referring to the number of pixels. See the Browser compatibility section for details. Example <html> <head> <title>screenX\\screenY example</title> <script type=\"text/javascript\"> function showCoords(evt){ alert( \"screenX value: \" + evt.screenX + \"\\n\" + \"screenY value: \" + evt.screenY + \"\\n\" );\n or  } </script> </head> <body onmousedown=\"showCoords(event)\"> <p>To display the mouse coordinates click anywhere on the page.</p> </body> </html>);",
        "type": "CSS"
    },
    "MouseEvent.shiftKey": {
        "descr": "The MouseEvent.shiftKey read-only property indicates if the shift key was pressed (true) or not (false) when the event occurred.",
        "name": "MouseEvent.shiftKey",
        "params": [],
        "path": "dom/mouseevent/shiftkey",
        "syntax": "var shiftKeyPressed = instanceOfMouseEvent.shiftKey  Return value A boolean Example <html> <head> <title>shiftKey example</title> <script type=\"text/javascript\"> document.addEventListener('click', function(e) { console.log('Is Shift key pressed?', e.shiftKey);\n or  }) </script> </head> <body> <p> Click anywhere on the page and open your developer console to see the results. </p> </body> </html>);",
        "type": "Events"
    },
    "Multiple attribute selector [name=\"value\"][name2=\"value2″]": {
        "descr": "Finds all inputs that have an id attribute and whose name attribute ends with man and sets the value.",
        "name": "Multiple attribute selector [name=\"value\"][name2=\"value2″]",
        "params": [],
        "path": "jquery/multiple-attribute-selector",
        "syntax": "attributeMultiple selector  Description: Matches elements that match all of the specified attribute filters.   version added: 1.0jQuery( \"[attributeFilter1][attributeFilter2][attributeFilterN]\" ) attributeFilter1: An attribute filter.",
        "type": "Selectors"
    },
    "Multiple selector (\"selector1, selector2, selectorN\"": {
        "descr": "You can specify any number of selectors to combine into a single result. This multiple expression combinator is an efficient way to select disparate elements. The order of the DOM elements in the returned jQuery object may not be identical, as they will be in document order. An alternative to this combinator is the .add() method.",
        "name": "Multiple selector (\"selector1, selector2, selectorN\"",
        "params": [],
        "path": "jquery/multiple-selector",
        "syntax": "multiple selector  Description: Selects the combined results of all the specified selectors.   version added: 1.0jQuery( \"selector1, selector2, selectorN\" ) selector1: Any valid selector.",
        "type": "Selectors"
    },
    "MutationObserver.constructor": {
        "descr": "The DOM MutationObserver() constructor — part of the MutationObserver interface — creates and returns a new observer which invokes a specified callback when DOM events occur. DOM observation does not begin immediately; the observe() method must be called first to establish which portion of the DOM to watch and what kinds of changes to watch for.",
        "name": "MutationObserver.constructor",
        "params": [
            {
                "descr": "A function which will be called on each DOM change that qualifies given the targeted node or subtree and options. ",
                "name": "callback"
            }
        ],
        "path": "dom/mutationobserver/mutationobserver",
        "syntax": "var observer = new MutationObserver(callback);",
        "type": "DOM"
    },
    "MutationObserver.disconnect": {
        "descr": "The MutationObserver method disconnect() tells the observer to stop watching for mutations. The observer can be reused by calling its observe() method again.",
        "name": "MutationObserver.disconnect",
        "params": [],
        "path": "dom/mutationobserver/disconnect",
        "syntax": "mutationObserver.disconnect()",
        "type": "DOM"
    },
    "MutationObserver.observe": {
        "descr": "The MutationObserver method observe() configures the MutationObserver callback to begin receiving notifications of changes to the DOM that match the given options. Depending on the configuration, the observer may watch a single Node in the DOM tree, or that node and some or all of its descendant nodes.",
        "name": "MutationObserver.observe",
        "params": [
            {
                "descr": "A DOM Node (which may be an Element) within the DOM tree to watch for changes, or to be the root of a subtree of nodes to be watched.",
                "name": "target"
            },
            {
                "descr": "An optional MutationObserverInit object providing options that describe what DOM mutations should be reported to the observer's callback.",
                "name": "options Optional"
            },
            {
                "descr": "Thrown in any of the following circumstances:  The options are configured such that nothing will actually be monitored (for example, if MutationObserverInit.childList, MutationObserverInit.attributes, and MutationObserverInit.characterData are all false). The attributes option is false (indicating that attribute changes are not not to be monitored) but attributeOldValue is true and/or attributeFilter is present. The characterDataOldValue option is true but MutationObserverInit.characterData is false (indicating that character changes aren't to be tracked).",
                "name": "TypeError"
            }
        ],
        "path": "dom/mutationobserver/observe",
        "syntax": "mutationObserver.observe(target[, options])",
        "type": "DOM"
    },
    "MutationObserver.takeRecords": {
        "descr": "The MutationObserver method takeRecords() returns a list of all matching DOM changes that have been detected but not yet processed by the observer's callback function, leaving the mutation queue empty. The most common use case for this is to immediately fetch all pending mutation records immediately prior to disconnecting the observer, so that any pending mutations can be processed when stopping down the observer.",
        "name": "MutationObserver.takeRecords",
        "params": [],
        "path": "dom/mutationobserver/takerecords",
        "syntax": "mutationRecords = mutationObserver.takeRecords()",
        "type": "DOM"
    },
    "MutationObserverInit.attributeFilter": {
        "descr": "The MutationObserverInit dictionary's optional attributeFilter property is an array of strings specifying the names of the attributes whose values are to be monitored for changes. If this property is specified, there's no need to also set attributes to true, as it's implied.",
        "name": "MutationObserverInit.attributeFilter",
        "params": [],
        "path": "dom/mutationobserverinit/attributefilter",
        "syntax": "var options = { attributeFilter: [ \"list\", \"of\", \"attribute\", \"names\" ] }  Value An array of DOMString objects, each specifying the name of one attribute whose value is to be monitored for changes. There is no default value. If this property exists on the options object when the MutationObserver()",
        "type": "DOM"
    },
    "MutationObserverInit.attributeOldValue": {
        "descr": "The MutationObserverInit dictionary's optional attributeOldValue property is used to specify whether or not to record the prior value of the altered attribute in MutationRecord objects denoting attribute value changes.",
        "name": "MutationObserverInit.attributeOldValue",
        "params": [],
        "path": "dom/mutationobserverinit/attributeoldvalue",
        "syntax": "var options = { attributeOldValue: true | false }  Value A Boolean value indicating whether or not the prior value of a changed attribute should be included in the MutationObserver.oldValue property when reporting attribute value changes. If true, oldValue is set accordingly. If false, it is not. When using attributeOldValue, setting the attributes option to true is optional. Example In this example, a Mutation Observer is set up to watch for changes to the status and username attributes in any elements contained within a subtree that displays the names of users in a chat room. This lets the code, for example, reflect changes to users' nicknames, or to mark them as away from keyboard (AFK) or offline.",
        "type": "DOM"
    },
    "MutationObserverInit.attributes": {
        "descr": "The MutationObserverInit dictionary's optional attributes property is used to specify whether or not to watch for attribute value changes on the node or nodes being observed.",
        "name": "MutationObserverInit.attributes",
        "params": [],
        "path": "dom/mutationobserverinit/attributes",
        "syntax": "var options = { attributes: true | false }  Value A Boolean value indicating whether or not to report through the callback any changes to the values of attributes on the node or nodes being monitored. The default value is false. If true, the callback specified when observe()",
        "type": "DOM"
    },
    "MutationObserverInit.characterData": {
        "descr": "The MutationObserverInit dictionary's optional characterData property is used to specify whether or not to monitor the node or nodes being observed for changes to their textual contents.",
        "name": "MutationObserverInit.characterData",
        "params": [],
        "path": "dom/mutationobserverinit/characterdata",
        "syntax": "var options = { characterData: true | false }  Value A Boolean value indicating whether or not to call the observer's callback function when textual nodes' values change. If true, the callback specified when observe()",
        "type": "DOM"
    },
    "MutationObserverInit.characterDataOldValue": {
        "descr": "The MutationObserverInit dictionary's optional characterDataOldValue property is used to specify whether or not the MutationRecord.oldValue property for DOM mutations should be set to the previous value of text nodes which changed.",
        "name": "MutationObserverInit.characterDataOldValue",
        "params": [],
        "path": "dom/mutationobserverinit/characterdataoldvalue",
        "syntax": "var options = { characterDataOldValue: true | false }  Value A Boolean value indicating whether or not to set the MutationRecord's oldValue property to be a string containing the value of the character node's contents prior to the change represented by the mutation record. By default, only changes to the text of the node specified as the target parameter when you called observe()",
        "type": "DOM"
    },
    "MutationObserverInit.subtree": {
        "descr": "The MutationObserverInit dictionary's optional subtree property can be set to true to monitor the targeted node and all of its descendants. The default value, false, indicates only the target node itself is to be monitored for changes.",
        "name": "MutationObserverInit.subtree",
        "params": [],
        "path": "dom/mutationobserverinit/subtree",
        "syntax": "var options = { subtree: true | false }  Value A Boolean value. The default, false, indicates that only the target node specified when calling MutationObserver.observe()",
        "type": "DOM"
    },
    "NaN": {
        "descr": "The global NaN property is a value representing Not-A-Number.",
        "name": "NaN",
        "params": [],
        "path": "javascript/global_objects/nan",
        "syntax": "NaN Description NaN is a property of the global object. The initial value of NaN is Not-A-Number — the same as the value of Number.NaN. In modern browsers, NaN is a non-configurable, non-writable property. Even when this is not the case, avoid overriding it. It is rather rare to use NaN in a program. It is the returned value when Math functions fail (Math.sqrt(-1)",
        "type": "Global Objects"
    },
    "NamedNodeMap.getNamedItem": {
        "descr": "The NamedNodeMap.getNamedItem() method returns the Attr corresponding to the given name, or null if there is no corresponding attribute.",
        "name": "NamedNodeMap.getNamedItem",
        "params": [],
        "path": "dom/namednodemap/getnameditem",
        "syntax": "myAttr = attrs.getNamedItem(name)",
        "type": "Nodes"
    },
    "Navigation timing API: Using Navigation Timing": {
        "descr": "The Navigation Timing API lets you easily obtain detailed and highly accurate timing information to help isolate performance problems with your site's code or resources. Unlike other tools or libraries, the Navigation Timing API lets you gather information that only the browser can provide at a level of accuracy much improved over other techniques. It also offers the advantage of being able to provide timing information as perceived by the user rather than data that has no correlation to what the user experiences.",
        "name": "Navigation timing API: Using Navigation Timing",
        "params": [],
        "path": "dom/navigation_timing_api/using_navigation_timing",
        "syntax": "PerformanceTiming into the correct perspective, you need to know more about what sort of load operation occurred. In particular, you need to know:  Was this a load or a reload? Was this a navigation or a move forward or backward through history? How many (if any) redirects were required in order to complete the navigation?  This information is provided by the Performance.navigation",
        "type": "Performance"
    },
    "NetworkInformation.downlinkMax": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "NetworkInformation.downlinkMax",
        "params": [],
        "path": "dom/networkinformation/downlinkmax",
        "syntax": "var max = NetworkInformation.downlinkMax Return value  an unrestricted double representing the maximum downlink speed, in megabits per second (Mb/s), for the underlying connection technology.  Examples",
        "type": "Network Information"
    },
    "NetworkInformation.onchange": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "NetworkInformation.onchange",
        "params": [],
        "path": "dom/networkinformation/onchange",
        "syntax": "netInfo.onchange = function() { ... }",
        "type": "Network Information"
    },
    "Next adjacent selector (\"prev + next\"": {
        "descr": "One important point to consider with both the next adjacent sibling selector (prev + next) and the general sibling selector (prev ~ siblings) is that the elements on either side of the combinator must share the same parent.",
        "name": "Next adjacent selector (\"prev + next\"",
        "params": [],
        "path": "jquery/next-adjacent-selector",
        "syntax": "next adjacent selector  Description: Selects all next elements matching \"next\" that are immediately preceded by a sibling \"prev\".   version added: 1.0jQuery( \"prev + next\" ) prev: Any valid selector.",
        "type": "Selectors"
    },
    "Next siblings selector (\"prev ~ siblings\"": {
        "descr": "The notable difference between (prev + next) and (prev ~ siblings) is their respective reach. While the former reaches only to the immediately following sibling element, the latter extends that reach to all following sibling elements.",
        "name": "Next siblings selector (\"prev ~ siblings\"",
        "params": [],
        "path": "jquery/next-siblings-selector",
        "syntax": "next siblings selector  Description: Selects all sibling elements that follow after the \"prev\" element, have the same parent, and match the filtering \"siblings\" selector.   version added: 1.0jQuery( \"prev ~ siblings\" ) prev: Any valid selector.",
        "type": "Selectors"
    },
    "Node": {
        "descr": "Node is an interface from which a number of DOM API object types inherit. It allows those types to be treated similarly; for example, inheriting the same set of methods, or being tested in the same way.",
        "name": "Node",
        "params": [
            {
                "descr": "Returns a DOMString representing the base URL. ",
                "name": "Node.baseURIRead only"
            },
            {
                "descr": "(Not available to web content.) The read-only nsIURI object representing the base URI for the element.",
                "name": "Node.baseURIObject"
            },
            {
                "descr": "Returns a live NodeList containing all the children of this node. ",
                "name": "Node.childNodesRead only"
            },
            {
                "descr": "Returns a Node representing the first direct child node of the node, or null if the node has no child.",
                "name": "Node.firstChildRead only"
            },
            {
                "descr": "Returns a boolean indicating whether or not the Node is connected (directly or indirectly) to the context object, e.g. ",
                "name": "Node.isConnectedRead only"
            },
            {
                "descr": "Returns a Node representing the last direct child node of the node, or null if the node has no child.",
                "name": "Node.lastChildRead only"
            },
            {
                "descr": "Returns a Node representing the next node in the tree, or null if there isn't such node.",
                "name": "Node.nextSiblingRead only"
            },
            {
                "descr": "Returns a DOMString containing the name of the Node. ",
                "name": "Node.nodeNameRead only"
            },
            {
                "descr": "Returns an unsigned short representing the type of the node. ",
                "name": "Node.nodeTypeRead only"
            },
            {
                "descr": "Returns / Sets the value of the current node",
                "name": "Node.nodeValue"
            },
            {
                "descr": "Returns the Document that this node belongs to. ",
                "name": "Node.ownerDocumentRead only"
            },
            {
                "descr": "Returns a Node that is the parent of this node. ",
                "name": "Node.parentNodeRead only"
            },
            {
                "descr": "Returns an Element that is the parent of this node. ",
                "name": "Node.parentElementRead only"
            },
            {
                "descr": "Returns a Node representing the previous node in the tree, or null if there isn't such node.",
                "name": "Node.previousSiblingRead only"
            },
            {
                "descr": "Returns / Sets the textual content of an element and all its descendants.",
                "name": "Node.textContent"
            },
            {
                "descr": "Returns a DOMString representing the local part of the qualified name of an element. ",
                "name": "Node.localName Read only"
            },
            {
                "descr": "The namespace URI of this node, or null if it is no namespace. ",
                "name": "Node.namespaceURI Read only"
            },
            {
                "descr": "A nsIPrincipal representing the node principal.",
                "name": "Node.nodePrincipal Obsolete since Gecko 46"
            },
            {
                "descr": "Is a DOMString representing the namespace prefix of the node, or null if no prefix is specified.",
                "name": "Node.prefix Read only"
            },
            {
                "descr": "Returns a Node object representing the topmost node in the tree, or the current node if it's the topmost node in the tree. ",
                "name": "Node.rootNode Read only"
            },
            {
                "descr": "Adds the specified childNode argument as the last child to the current node. ",
                "name": "Node.appendChild()"
            },
            {
                "descr": "Clone a Node, and optionally, all of its contents. ",
                "name": "Node.cloneNode()"
            },
            {
                "descr": "Compares the position of the current node against another node in any other document.",
                "name": "Node.compareDocumentPosition()"
            },
            {
                "descr": "Returns a Boolean value indicating whether a node is a descendant of a given node or not.",
                "name": "Node.contains()"
            },
            {
                "descr": "Returns the context object's root which optionally includes the shadow root if it is available.",
                "name": "Node.getRootNode()"
            },
            {
                "descr": "Returns a Boolean indicating if the element has any child nodes, or not.",
                "name": "Node.hasChildNodes()"
            },
            {
                "descr": "Inserts a Node before the reference node as a child of a specified parent node.",
                "name": "Node.insertBefore()"
            },
            {
                "descr": "Accepts a namespace URI as an argument and returns a Boolean with a value of true if the namespace is the default namespace on the given node or false if not.",
                "name": "Node.isDefaultNamespace()"
            },
            {
                "descr": "Returns a Boolean which indicates whether or not two nodes are of the same type and all their defining data points match.",
                "name": "Node.isEqualNode()"
            },
            {
                "descr": "Returns a Boolean value indicating whether or not the two nodes are the same (that is, they reference the same object).",
                "name": "Node.isSameNode()"
            },
            {
                "descr": "Returns a DOMString containing the prefix for a given namespace URI, if present, and null if not. ",
                "name": "Node.lookupPrefix()"
            },
            {
                "descr": "Accepts a prefix and returns the namespace URI associated with it on the given node if found (and null if not). ",
                "name": "Node.lookupNamespaceURI()"
            },
            {
                "descr": "Clean up all the text nodes under this element (merge adjacent, remove empty).",
                "name": "Node.normalize()"
            },
            {
                "descr": "Removes a child node from the current element, which must be a child of the current node.",
                "name": "Node.removeChild()"
            },
            {
                "descr": "Replaces one child Node of the current one with the second one given in parameter.",
                "name": "Node.replaceChild()"
            },
            {
                "descr": "Allows a user to get some DOMUserData from the node.",
                "name": "Node.getFeature()   Node.getUserData()"
            },
            {
                "descr": "Returns a Boolean indicating if the element has any attributes, or not.",
                "name": "Node.hasAttributes()"
            },
            {
                "descr": "Returns a Boolean flag containing the result of a test whether the DOM implementation implements a specific feature and this feature is supported by the specific node.",
                "name": "Node.isSupported()"
            },
            {
                "descr": "Allows a user to attach, or remove, DOMUserData to the node.",
                "name": "Node.setUserData()"
            },
            {
                "descr": "The Node object whose descendants will be recursed through.",
                "name": "rootNode"
            },
            {
                "descr": "An optional callback function that receives a Node as its only argument. ",
                "name": "callback"
            }
        ],
        "path": "dom/node",
        "syntax": "CDATASection inherit), ProcessingInstruction",
        "type": "Nodes"
    },
    "Node.appendChild": {
        "descr": "The Node.appendChild() method adds a node to the end of the list of children of a specified parent node. If the given child is a reference to an existing node in the document, appendChild() moves it from its current position to the new position (there is no requirement to remove the node from its parent node before appending it to some other node).",
        "name": "Node.appendChild",
        "params": [
            {
                "descr": "The node to append to the given parent node (commonly an element).",
                "name": "aChild"
            }
        ],
        "path": "dom/node/appendchild",
        "syntax": "element.appendChild(aChild);",
        "type": "Nodes"
    },
    "Node.baseURI": {
        "descr": "The Node.baseURI read-only property returns the absolute base URL of a node.",
        "name": "Node.baseURI",
        "params": [],
        "path": "dom/node/baseuri",
        "syntax": "var baseURI = node.baseURI;    baseURI is a DOMString representing the base URL of the specified Node. May be null if unable to obtain an absolute URI  node.baseURI is read-only.  node.baseURI may change with time (see below).  Details",
        "type": "Nodes"
    },
    "Node.childNodes": {
        "descr": "The Node.childNodes read-only property returns a live NodeList of child nodes of the given element where the first child node is assigned index 0.",
        "name": "Node.childNodes",
        "params": [],
        "path": "dom/node/childnodes",
        "syntax": "var nodeList = elementNodeReference.childNodes;  Examples Simple usage // parg is an object reference to a <p> element // First check that the element has child nodes if (parg.hasChildNodes()) { var children = parg.childNodes; for (var i = 0; i < children.length; i++) { // do something with each child as children[i] // NOTE: List is live, adding or removing children will change the list } }",
        "type": "Nodes"
    },
    "Node.cloneNode": {
        "descr": "The Node.cloneNode() method returns a duplicate of the node on which this method was called.",
        "name": "Node.cloneNode",
        "params": [
            {
                "descr": "The node to be cloned.",
                "name": "node"
            },
            {
                "descr": "The new node that will be a clone of node",
                "name": "dupNode"
            },
            {
                "descr": "true if the children of the node should also be cloned, or false to clone only the specified node.",
                "name": "deep Optional"
            }
        ],
        "path": "dom/node/clonenode",
        "syntax": "var dupNode = node.cloneNode([deep]);",
        "type": "Nodes"
    },
    "Node.compareDocumentPosition": {
        "descr": "The Node.compareDocumentPosition() method compares the position of the current node against another node in any other document.",
        "name": "Node.compareDocumentPosition",
        "params": [
            {
                "descr": "The other Node with which to compare document positioning.",
                "name": "otherNode"
            }
        ],
        "path": "dom/node/comparedocumentposition",
        "syntax": "compareMask = node.compareDocumentPosition(otherNode)",
        "type": "Nodes"
    },
    "Node.contains": {
        "descr": "The Node.contains() method returns a Boolean value indicating whether a node is a descendant of a given node, i.e. the node itself, one of its direct children (childNodes), one of the children's direct children, and so on.",
        "name": "Node.contains",
        "params": [],
        "path": "dom/node/contains",
        "syntax": "node.contains( otherNode )",
        "type": "Nodes"
    },
    "Node.firstChild": {
        "descr": "The Node.firstChild read-only property returns the node's first child in the tree, or null if the node has no children. If the node is a Document, it returns the first node in the list of its direct children.",
        "name": "Node.firstChild",
        "params": [],
        "path": "dom/node/firstchild",
        "syntax": "var childNode = node.firstChild;  Example This example demonstrates the use of firstChild and how whitespace nodes might interfere with using this property. <p id=\"para-01\"> <span>First span</span> </p> <script> var p01 = document.getElementById('para-01');\n or  console.log(p01.firstChild.nodeName);\n or  </script>);",
        "type": "Nodes"
    },
    "Node.getRootNode": {
        "descr": "The getRootNode() method of the Node interface returns the context object's root, which optionally includes the shadow root if it is available.",
        "name": "Node.getRootNode",
        "params": [
            {
                "descr": "An object that sets options for getting the root node. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/node/getrootnode",
        "syntax": "var root = node.getRootNode(options)",
        "type": "Nodes"
    },
    "Node.hasChildNodes": {
        "descr": "The Node.hasChildNodes() method returns a Boolean value indicating whether the current Node has child nodes or not.",
        "name": "Node.hasChildNodes",
        "params": [
            {
                "descr": "holds the return value true or false.",
                "name": "result"
            }
        ],
        "path": "dom/node/haschildnodes",
        "syntax": "result = node.hasChildNodes();",
        "type": "Nodes"
    },
    "Node.insertBefore": {
        "descr": "The Node.insertBefore() method inserts a node before the reference node as a child of a specified parent node. If the given child is a reference to an existing node in the document, insertBefore() moves it from its current position to the new position (there is no requirement to remove the node from its parent node before appending it to some other node).",
        "name": "Node.insertBefore",
        "params": [],
        "path": "dom/node/insertbefore",
        "syntax": "var insertedNode = parentNode.insertBefore(newNode, referenceNode);",
        "type": "Nodes"
    },
    "Node.isConnected": {
        "descr": "The isConnected read-only property of the Node interface returns a boolean indicating whether the Node is connected (directly or indirectly) to the context object, for example the Document object in the case of the normal DOM, or the ShadowRoot in the case of a shadow DOM.",
        "name": "Node.isConnected",
        "params": [],
        "path": "dom/node/isconnected",
        "syntax": "var isItConnected = nodeObjectInstance.isConnected Return value A Boolean that is true if the node is connected to its relevant context object, and false if not. Examples A standard DOM example: let test = document.createElement('p');\n or  console.log(test.isConnected);\n or  // returns false document.body.appendChild(test);\n or  console.log(test.isConnected);\n or  // returns true);",
        "type": "Nodes"
    },
    "Node.isDefaultNamespace": {
        "descr": "The Node.isDefaultNamespace() method accepts a namespace URI as an argument and returns a Boolean with a value of true if the namespace is the default namespace on the given node or false if not.",
        "name": "Node.isDefaultNamespace",
        "params": [],
        "path": "dom/node/isdefaultnamespace",
        "syntax": "result = node.isDefaultNamespace(namespaceURI)",
        "type": "Nodes"
    },
    "Node.isEqualNode": {
        "descr": "The Node.isEqualNode() method tests whether two nodes are equal. Two nodes are equal when they have the same type, defining characteristics (for elements, this would be their ID, number of children, and so forth), its attributes match, and so on. The specific set of data points that must match varies depending on the types of the nodes.",
        "name": "Node.isEqualNode",
        "params": [],
        "path": "dom/node/isequalnode",
        "syntax": "var isEqualNode = node.isEqualNode(otherNode);",
        "type": "Nodes"
    },
    "Node.isSameNode": {
        "descr": "The Node.isSameNode() method tests whether two nodes are the same, that is if they reference the same object.",
        "name": "Node.isSameNode",
        "params": [],
        "path": "dom/node/issamenode",
        "syntax": "var isSameNode = node.isSameNode(otherNode);",
        "type": "Nodes"
    },
    "Node.isSupported": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "Node.isSupported",
        "params": [
            {
                "descr": "Is a DOMString containing the name of the feature to test. ",
                "name": "feature"
            },
            {
                "descr": "Is a DOMString containing the version number of the feature to test. ",
                "name": "version"
            }
        ],
        "path": "dom/node/issupported",
        "syntax": "boolValue = element.isSupported(feature, version)",
        "type": "Nodes"
    },
    "Node.lastChild": {
        "descr": "The Node.lastChild read-only property returns the last child of the node. If its parent is an element, then the child is generally an element node, a text node, or a comment node. It returns null if there are no child elements.",
        "name": "Node.lastChild",
        "params": [],
        "path": "dom/node/lastchild",
        "syntax": "var childNode = node.lastChild;  Example var tr = document.getElementById(\"row1\");\n or  var corner_td = tr.lastChild;);",
        "type": "Nodes"
    },
    "Node.localName": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "Node.localName",
        "params": [],
        "path": "dom/node/localname",
        "syntax": "name = element.localName    name is the local name as a string (see Notes below for details)  Example",
        "type": "Nodes"
    },
    "Node.namespaceURI": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "Node.namespaceURI",
        "params": [],
        "path": "dom/node/namespaceuri",
        "syntax": "namespace = node.namespaceURI Example In this snippet, a node is being examined for its Node.localName and its namespaceURI. If the namespaceURI returns the XUL namespace and the localName returns \"browser\", then the node is understood to be a XUL <browser/>. if (node.localName == \"browser\" && node.namespaceURI == \"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\") { // this is a XUL browser }",
        "type": "Nodes"
    },
    "Node.nextSibling": {
        "descr": "The Node.nextSibling read-only property returns the node immediately following the specified one in their parent's childNodes, or returns null if the specified node is the last child in the parent element.",
        "name": "Node.nextSibling",
        "params": [],
        "path": "dom/node/nextsibling",
        "syntax": "nextNode = node.nextSibling  Notes Gecko-based browsers insert text nodes into a document to represent whitespace in the source markup. Therefore a node obtained, for example, using Node.firstChild or Node.previousSibling may refer to a whitespace text node rather than the actual element the author intended to get. See Whitespace in the DOM and W3C DOM 3 FAQ: Why are some Text nodes empty? for more information. Element.nextElementSibling may be used to obtain the next element skipping any whitespace nodes, other between-element text, or comments. Example <div id=\"div-1\">Here is div-1</div> <div id=\"div-2\">Here is div-2</div> <script> var el = document.getElementById('div-1').nextSibling, i = 1; console.group('Siblings of div-1:');\n or  while (el) { console.log(i, '. ', el.nodeName);\n or  el = el.nextSibling; i++; } console.groupEnd();\n or  </script> /************************************************** The console displays the following: Siblings of div-1 1. #text 2. DIV 3. #text 4. SCRIPT **************************************************/);",
        "type": "Nodes"
    },
    "Node.nodeName": {
        "descr": "The Node.nodeName read-only property returns the name of the current node as a string.",
        "name": "Node.nodeName",
        "params": [],
        "path": "dom/node/nodename",
        "syntax": "CDATASection \"#cdata-section\"   Comment \"#comment\"   Document \"#document\"   DocumentFragment \"#document-fragment\"   DocumentType The value of DocumentType.name    Element The value of Element.tagName    Entity The entity name   EntityReference The name of entity reference   Notation The notation name   ProcessingInstruction The value of ProcessingInstruction.target    Text \"#text\"    Syntax var str = node.nodeName;  Example Given the following markup: <div id=\"d1\">hello world</div> <input type=\"text\" id=\"t\"/>  and the following script: var div1 = document.getElementById(\"d1\");\n or  var text_field = document.getElementById(\"t\");\n or  text_field.value = div1.nodeName;);",
        "type": "Nodes"
    },
    "Node.nodeType": {
        "descr": "The read-only Node.nodeType property that represents the type of the node.",
        "name": "Node.nodeType",
        "params": [],
        "path": "dom/node/nodetype",
        "syntax": "var type = node.nodeType;  Returns an integer value which specifies the type of the node; possible values are listed in Node type constants. Constants Node type constants    Constant Value Description     Node.ELEMENT_NODE 1 An Element node such as <p> or <div>.    Node.TEXT_NODE 3 The actual Text of Element or Attr.   Node.CDATA_SECTION_NODE 4 A CDATASection.   Node.PROCESSING_INSTRUCTION_NODE 7 A ProcessingInstruction of an XML document such as <?xml-stylesheet ... ?> declaration.   Node.COMMENT_NODE 8 A Comment node.   Node.DOCUMENT_NODE 9 A Document node.   Node.DOCUMENT_TYPE_NODE 10 A DocumentType node e.g. <!DOCTYPE html> for HTML5 documents.   Node.DOCUMENT_FRAGMENT_NODE 11 A DocumentFragment node.    Deprecated node type constants  The following constants have been deprecated and should not be used anymore.    Constant Value Description   Node.ATTRIBUTE_NODE 2 An Attribute of an Element. The element attributes are no longer implementing the Node interface in DOM4 specification.   Node.ENTITY_REFERENCE_NODE 5 An XML Entity Reference node. Removed in DOM4 specification.   Node.ENTITY_NODE 6 An XML <!ENTITY ...> node. Removed in DOM4 specification.   Node.NOTATION_NODE 12 An XML <!NOTATION ...> node. Removed in DOM4 specification.    Examples Different types of nodes document.nodeType === Node.DOCUMENT_NODE; // true document.doctype.nodeType === Node.DOCUMENT_TYPE_NODE; // true var fragment = document.createDocumentFragment();\n or  fragment.nodeType === Node.DOCUMENT_FRAGMENT_NODE; // true var p = document.createElement(\"p\");\n or  p.textContent = \"Once upon a time...\"; p.nodeType === Node.ELEMENT_NODE; // true p.firstChild.nodeType === Node.TEXT_NODE; // true);",
        "type": "Nodes"
    },
    "Node.normalize": {
        "descr": "The Node.normalize() method puts the specified node and all of its sub-tree into a \"normalized\" form. In a normalized sub-tree, no text nodes in the sub-tree are empty and there are no adjacent text nodes.",
        "name": "Node.normalize",
        "params": [],
        "path": "dom/node/normalize",
        "syntax": "element.normalize();",
        "type": "Nodes"
    },
    "Node.ownerDocument": {
        "descr": "The Node.ownerDocument read-only property returns the top-level document object for this node.",
        "name": "Node.ownerDocument",
        "params": [],
        "path": "dom/node/ownerdocument",
        "syntax": "document = element.ownerDocument    document is the document object parent of the current element.  Example // given a node \"p\", get the top-level HTML child // of the document object var d = p.ownerDocument; var html = d.documentElement;  Notes The document object returned by this property is the main object with which all the child nodes in the actual HTML document are created. If this property is used on a node that is itself a document, the result is null. Specifications    Specification Status Comment   DOMThe definition of 'Node: ownerDocument' in that specification. Living Standard      Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  Yes  12  Yes   Yes   9   The ownerDocument of doctype nodes (that is, nodes for which Node.nodeType is Node.DOCUMENT_TYPE_NODE or 10) is no longer null. Instead, the ownerDocument",
        "type": "Nodes"
    },
    "Node.parentElement": {
        "descr": "The Node.parentElement read-only property returns the DOM node's parent Element, or null if the node either has no parent, or its parent isn't a DOM Element.",
        "name": "Node.parentElement",
        "params": [],
        "path": "dom/node/parentelement",
        "syntax": "parentElement = node.parentElement parentElement is the parent element of the current node. This is always a DOM Element object, or null. JExample if (node.parentElement) { node.parentElement.style.color = \"red\"; }",
        "type": "Nodes"
    },
    "Node.parentNode": {
        "descr": "The Node.parentNode read-only property returns the parent of the specified node in the DOM tree.",
        "name": "Node.parentNode",
        "params": [],
        "path": "dom/node/parentnode",
        "syntax": "parentNode = node.parentNode  parentNode is the parent of the current node. The parent of an element is an Element node, a Document node, or a DocumentFragment node. Example if (node.parentNode) { // remove a node from the tree, unless // it's not in the tree already node.parentNode.removeChild(node);\n or  });",
        "type": "Nodes"
    },
    "Node.prefix": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "Node.prefix",
        "params": [],
        "path": "dom/node/prefix",
        "syntax": "string = node.prefix  Examples The following logs \"x\" to the console. <x:div onclick=\"console.log(this.prefix)\"/>",
        "type": "Nodes"
    },
    "Node.previousSibling": {
        "descr": "The Node.previousSibling read-only property returns the node immediately preceding the specified one in its parent's childNodes list, or null if the specified node is the first in that list.",
        "name": "Node.previousSibling",
        "params": [],
        "path": "dom/node/previoussibling",
        "syntax": "previousNode = node.previousSibling;  Example <img id=\"b0\"> <img id=\"b1\"> <img id=\"b2\"> console.log(document.getElementById(\"b1\").previousSibling);\n or  // <img id=\"b0\"> console.log(document.getElementById(\"b2\").previousSibling.id);\n or  // \"b1\");",
        "type": "Nodes"
    },
    "Node.removeChild": {
        "descr": "The Node.removeChild() method removes a child node from the DOM. Returns removed node.",
        "name": "Node.removeChild",
        "params": [],
        "path": "dom/node/removechild",
        "syntax": "var oldChild = node.removeChild(child);\n or  OR node.removeChild(child);",
        "type": "Nodes"
    },
    "Node.replaceChild": {
        "descr": "The Node.replaceChild() method replaces one child node of the specified node with another.",
        "name": "Node.replaceChild",
        "params": [],
        "path": "dom/node/replacechild",
        "syntax": "replacedNode = parentNode.replaceChild(newChild, oldChild);",
        "type": "Nodes"
    },
    "Node.rootNode": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "Node.rootNode",
        "params": [],
        "path": "dom/node/rootnode",
        "syntax": "rootNode = node.rootNode;  Value A Node object representing the topmost node in the tree. Example Running the following line in supporting browsers should return a reference to the HTML/document node: console.log(document.body.rootNode);",
        "type": "Nodes"
    },
    "Node.textContent": {
        "descr": "The Node.textContent property represents the text content of a node and its descendants. However, it is very different from the confusable innerText property.",
        "name": "Node.textContent",
        "params": [],
        "path": "dom/node/textcontent",
        "syntax": "var text = element.textContent; element.textContent = \"this is some sample text\";  Description   textContent returns null if the node is a document, a DOCTYPE, or a notation. To grab all of the text and CDATA data for the whole document, one could use document.documentElement.textContent. If the node is a CDATA section, comment, processing instruction, or text node, textContent returns the text inside this node (the nodeValue). For other node types, textContent",
        "type": "Nodes"
    },
    "NodeFilter.acceptNode": {
        "descr": "The NodeFilter.acceptNode() method returns an unsigned short that will be used to tell if a given Node must be accepted or not by the NodeIterator or TreeWalker iteration algorithm. This method is expected to be written by the user of a NodeFilter. Possible return values are:",
        "name": "NodeFilter.acceptNode",
        "params": [
            {
                "descr": "Is a Node being the object to check against the filter.",
                "name": "node"
            }
        ],
        "path": "dom/nodefilter/acceptnode",
        "syntax": "result = nodeFilter.acceptNode(node)",
        "type": "Nodes"
    },
    "NodeIterator": {
        "descr": "The NodeIterator interface represents an iterator over the members of a list of the nodes in a subtree of the DOM. The nodes will be returned in document order.",
        "name": "NodeIterator",
        "params": [
            {
                "descr": "Returns a Node representing the root node as specified when the NodeIterator was created.",
                "name": "NodeIterator.root Read only"
            },
            {
                "descr": "Returns an unsigned long being a bitmask made of constants describing the types of Node that must to be presented. ",
                "name": "NodeIterator.whatToShow Read only"
            },
            {
                "descr": "Returns a NodeFilter used to select the relevant nodes.",
                "name": "NodeIterator.filter Read only"
            },
            {
                "descr": "Is a Boolean indicating if, when discarding an EntityReference its whole sub-tree must be discarded at the same time.",
                "name": "NodeIterator.expandEntityReferences Read only"
            },
            {
                "descr": "Returns the Node to which the iterator is anchored.",
                "name": "NodeIterator.referenceNode Read only"
            },
            {
                "descr": "Returns a Boolean flag that indicates whether the NodeIterator is anchored before, the flag being true, or after, the flag being false, the anchor node.",
                "name": "NodeIterator.pointerBeforeReferenceNode Read only"
            },
            {
                "descr": "This operation is a no-op. It doesn't do anything. ",
                "name": "NodeIterator.detach()"
            },
            {
                "descr": "Returns the previous Node in the document, or null if there are none.",
                "name": "NodeIterator.previousNode()"
            },
            {
                "descr": "Returns the next Node in the document, or null if there are none.",
                "name": "NodeIterator.nextNode()"
            }
        ],
        "path": "dom/nodeiterator",
        "syntax": "CDATASection nodes.   NodeFilter.SHOW_COMMENT 128 Shows Comment nodes.   NodeFilter.SHOW_DOCUMENT 256 Shows Document nodes.   NodeFilter.SHOW_DOCUMENT_FRAGMENT 1024 Shows DocumentFragment nodes.   NodeFilter.SHOW_DOCUMENT_TYPE 512 Shows DocumentType nodes.   NodeFilter.SHOW_ELEMENT 1 Shows Element nodes.    NodeFilter.SHOW_ENTITY  32 Shows Entity nodes. This is meaningful only when creating a NodeIterator with an Entity node as its root; in this case, it means that the Entity node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.    NodeFilter.SHOW_ENTITY_REFERENCE  16 Shows EntityReference nodes.    NodeFilter.SHOW_NOTATION  2048 Shows Notation nodes. This is meaningful only when creating a NodeIterator with a Notation node as its root; in this case, it means that the Notation node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.   NodeFilter.SHOW_PROCESSING_INSTRUCTION 64 Shows ProcessingInstruction nodes.   NodeFilter.SHOW_TEXT 4 Shows Text nodes.      NodeIterator.filter Read only   Returns a NodeFilter used to select the relevant nodes.  NodeIterator.expandEntityReferences Read only   Is a Boolean indicating if, when discarding an EntityReference its whole sub-tree must be discarded at the same time.  NodeIterator.referenceNode Read only   Returns the Node to which the iterator is anchored.  NodeIterator.pointerBeforeReferenceNode Read only   Returns a Boolean flag that indicates whether the NodeIterator is anchored before, the flag being true, or after, the flag being false, the anchor node.  Methods This interface doesn't inherit any method.   NodeIterator.detach()",
        "type": "Nodes"
    },
    "NodeIterator.detach": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "NodeIterator.detach",
        "params": [],
        "path": "dom/nodeiterator/detach",
        "syntax": "nodeIterator.detach();",
        "type": "Nodes"
    },
    "NodeIterator.filter": {
        "descr": "The NodeIterator.filter read-only method returns a NodeFilter object, that is an object implement an acceptNode(node) method, used to screen nodes.",
        "name": "NodeIterator.filter",
        "params": [],
        "path": "dom/nodeiterator/filter",
        "syntax": "nodeFilter = nodeIterator.filter;  Example var nodeIterator = document.createNodeIterator( document.body, NodeFilter.SHOW_ELEMENT, { acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } }, false );\n or  nodeFilter = nodeIterator.filter;);",
        "type": "Nodes"
    },
    "NodeIterator.nextNode": {
        "descr": "The NodeIterator.nextNode() method returns the next node in the set represented by the NodeIterator and advances the position of the iterator within the set. The first call to nextNode() returns the first node in the set.",
        "name": "NodeIterator.nextNode",
        "params": [],
        "path": "dom/nodeiterator/nextnode",
        "syntax": "node = nodeIterator.nextNode();",
        "type": "Nodes"
    },
    "NodeIterator.pointerBeforeReferenceNode": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "NodeIterator.pointerBeforeReferenceNode",
        "params": [],
        "path": "dom/nodeiterator/pointerbeforereferencenode",
        "syntax": "flag = nodeIterator.pointerBeforeReferenceNode;  Example var nodeIterator = document.createNodeIterator( document.body, NodeFilter.SHOW_ELEMENT, { acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } }, false );\n or  flag = nodeIterator.pointerBeforeReferenceNode;);",
        "type": "Nodes"
    },
    "NodeIterator.previousNode": {
        "descr": "The NodeIterator.previousNode() method returns the previous node in the set represented by the NodeIterator and moves the position of the iterator backwards within the set.",
        "name": "NodeIterator.previousNode",
        "params": [],
        "path": "dom/nodeiterator/previousnode",
        "syntax": "node = nodeIterator.previousNode();",
        "type": "Nodes"
    },
    "NodeIterator.referenceNode": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "NodeIterator.referenceNode",
        "params": [],
        "path": "dom/nodeiterator/referencenode",
        "syntax": "node = nodeIterator.referenceNode;  Example var nodeIterator = document.createNodeIterator( document.body, NodeFilter.SHOW_ELEMENT, { acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } }, false );\n or  node = nodeIterator.referenceNode;);",
        "type": "Nodes"
    },
    "NodeIterator.root": {
        "descr": "The NodeIterator.root read-only property represents the Node that is the root of what the NodeIterator traverses.",
        "name": "NodeIterator.root",
        "params": [],
        "path": "dom/nodeiterator/root",
        "syntax": "root = nodeIterator.root;  Example var nodeIterator = document.createNodeIterator( document.body, NodeFilter.SHOW_ELEMENT, { acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } }, false );\n or  root = nodeIterator.root; // document.body in this case);",
        "type": "Nodes"
    },
    "NodeIterator.whatToShow": {
        "descr": "The NodeIterator.whatToShow read-only property represents an unsigned integer representing a bitmask signifying what types of nodes should be returned by the NodeIterator.",
        "name": "NodeIterator.whatToShow",
        "params": [],
        "path": "dom/nodeiterator/whattoshow",
        "syntax": "var nodeTypes = nodeIterator.whatToShow;  The values that can be combined to form the bitmask are:    Constant Numerical value Description   NodeFilter.SHOW_ALL  -1 (that is the max value of unsigned long) Shows all nodes.    NodeFilter.SHOW_ATTRIBUTE",
        "type": "Nodes"
    },
    "NodeList.entries": {
        "descr": "The NodeList.entries() method returns an iterator allowing to go through all key/value pairs contained in this object. The values are Node objects.",
        "name": "NodeList.entries",
        "params": [],
        "path": "dom/nodelist/entries",
        "syntax": "list.entries();",
        "type": "Nodes"
    },
    "NodeList.forEach": {
        "descr": "The forEach() method of the NodeList interface calls the callback given in parameter once for each value pair in the list, in insertion order.",
        "name": "NodeList.forEach",
        "params": [
            {
                "descr": "Function to execute for each element, eventually taking 3 arguments:  currentValue The current element being processed in the NodeList.",
                "name": "callback"
            },
            {
                "descr": "The index of the current element being processed in the NodeList.",
                "name": "currentIndex"
            },
            {
                "descr": "The NodeList object that forEach() is being applied to.",
                "name": "listObj"
            },
            {
                "descr": "Value to use as this when executing callback.",
                "name": "thisArg Optional"
            }
        ],
        "path": "dom/nodelist/foreach",
        "syntax": "NodeList.forEach(callback[, thisArg]);",
        "type": "Nodes"
    },
    "NodeList.item": {
        "descr": "JavaScript also offers an array-like bracketed syntax for obtaining an item from a NodeList by index:",
        "name": "NodeList.item",
        "params": [],
        "path": "dom/nodelist/item",
        "syntax": "nodeItem = nodeList.item(index)",
        "type": "Nodes"
    },
    "NodeList.keys": {
        "descr": "The NodeList.keys() method returns an iterator allowing to go through all keys contained in this object. The keys are unsigned integer.",
        "name": "NodeList.keys",
        "params": [],
        "path": "dom/nodelist/keys",
        "syntax": "nodeList.keys();",
        "type": "Nodes"
    },
    "NodeList.length": {
        "descr": "length returns the number of items in a NodeList.",
        "name": "NodeList.length",
        "params": [],
        "path": "dom/nodelist/length",
        "syntax": "numItems = nodeList.length    numItems is an integer value representing the number of items in a NodeList.  Example // all the paragraphs in the document var items = document.getElementsByTagName(\"p\");\n or  // for each item in the list, // append the entire element as a string of HTML var gross = \"\"; for (var i = 0; i < items.length; i++) { gross += items[i].innerHTML; } // gross is now all the HTML for the paragraphs);",
        "type": "Nodes"
    },
    "NodeList.values": {
        "descr": "The NodeList.values() method returns an iterator allowing to go through all values contained in this object. The values are Node objects.",
        "name": "NodeList.values",
        "params": [],
        "path": "dom/nodelist/values",
        "syntax": "nodeList.values();",
        "type": "Nodes"
    },
    "NonDocumentTypeChildNode.nextElementSibling": {
        "descr": "The NonDocumentTypeChildNode.nextElementSibling read-only property returns the element immediately following the specified one in its parent's children list, or null if the specified element is the last one in the list.",
        "name": "NonDocumentTypeChildNode.nextElementSibling",
        "params": [],
        "path": "dom/nondocumenttypechildnode/nextelementsibling",
        "syntax": "var nextNode = elementNodeReference.nextElementSibling;  Example <div id=\"div-01\">Here is div-01</div> <div id=\"div-02\">Here is div-02</div> <script type=\"text/javascript\"> var el = document.getElementById('div-01').nextElementSibling; console.log('Siblings of div-01:');\n or  while (el) { console.log(el.nodeName);\n or  el = el.nextElementSibling; } </script>);",
        "type": "Nodes"
    },
    "NonDocumentTypeChildNode.previousElementSibling": {
        "descr": "The NonDocumentTypeChildNode.previousElementSibling read-only property returns the Element immediately prior to the specified one in its parent's children list, or null if the specified element is the first one in the list.",
        "name": "NonDocumentTypeChildNode.previousElementSibling",
        "params": [],
        "path": "dom/nondocumenttypechildnode/previouselementsibling",
        "syntax": "prevNode = elementNodeReference.previousElementSibling;  Example <div id=\"div-01\">Here is div-01</div> <div id=\"div-02\">Here is div-02</div> <li>This is a list item</li> <li>This is another list item</li> <div id=\"div-03\">Here is div-03</div> <script> let el = document.getElementById('div-03').previousElementSibling; document.write('<p>Siblings of div-03</p><ol>');\n or  while (el) { document.write('<li>' + el.nodeName + '</li>');\n or  el = el.previousElementSibling; } document.write('</ol>');\n or  </script>);",
        "type": "Nodes"
    },
    "Notification": {
        "descr": "The Notification interface of the Notifications API is used to configure and display desktop notifications to the user. These notifications' appearance and specific functionality vary across platforms but generally they provide a way to asynchronously provide information to the user.",
        "name": "Notification",
        "params": [
            {
                "descr": "Creates a new instance of the Notification object.",
                "name": "Notification()"
            },
            {
                "descr": "A string representing the current permission to display notifications. ",
                "name": "Notification.permission Read only"
            },
            {
                "descr": "The actions array of the notification as specified in the constructor's options parameter.",
                "name": "Notification.actions Read only"
            },
            {
                "descr": "The URL of the image used to represent the notification when there is not enough space to display the notification itself.",
                "name": "Notification.badge Read only"
            },
            {
                "descr": "The body string of the notification as specified in the constructor's options parameter.",
                "name": "Notification.body Read only"
            },
            {
                "descr": "Returns a structured clone of the notification’s data.",
                "name": "Notification.data Read only"
            },
            {
                "descr": "The text direction of the notification as specified in the constructor's options parameter.",
                "name": "Notification.dir Read only"
            },
            {
                "descr": "The language code of the notification as specified in the constructor's options parameter.",
                "name": "Notification.lang Read only"
            },
            {
                "descr": "The ID of the notification (if any) as specified in the constructor's options parameter.",
                "name": "Notification.tag Read only"
            },
            {
                "descr": "The URL of the image used as an icon of the notification as specified in the constructor's options parameter.",
                "name": "Notification.icon Read only"
            },
            {
                "descr": "The URL of an image to be displayed as part of the notification, as specified in the constructor's options parameter.",
                "name": "Notification.image Read only"
            },
            {
                "descr": "Specifies whether the user should be notified after a new notification replaces an old one.",
                "name": "Notification.renotify Read only"
            },
            {
                "descr": "A Boolean indicating that a notification should remain active until the user clicks or dismisses it, rather than closing automatically.",
                "name": "Notification.requireInteraction Read only"
            },
            {
                "descr": "Specifies whether the notification should be silent — i.e., no sounds or vibrations should be issued, regardless of the device settings.",
                "name": "Notification.silent Read only"
            },
            {
                "descr": "Specifies the time at which a notification is created or applicable (past, present, or future).",
                "name": "Notification.timestamp Read only"
            },
            {
                "descr": "The title of the notification as specified in the first parameter of the constructor.",
                "name": "Notification.title Read only"
            },
            {
                "descr": "Specifies a vibration pattern for devices with vibration hardware to emit.",
                "name": "Notification.vibrate Read only"
            },
            {
                "descr": "A handler for the click event. It is triggered each time the user clicks on the notification.",
                "name": "Notification.onclick"
            },
            {
                "descr": "A handler for the close event. It is triggered when the user closes the notification.",
                "name": "Notification.onclose"
            },
            {
                "descr": "A handler for the error event. It is triggered each time the notification encounters an error.",
                "name": "Notification.onerror"
            },
            {
                "descr": "A handler for the show event. It is triggered when the notification is displayed.",
                "name": "Notification.onshow"
            },
            {
                "descr": "Requests permission from the user to display notifications.",
                "name": "Notification.requestPermission()"
            },
            {
                "descr": "Programmatically closes a notification.",
                "name": "Notification.close()"
            }
        ],
        "path": "dom/notification",
        "syntax": "Notification.requestPermission().then(function(result) { console.log(result);\n or  });",
        "type": "Notification"
    },
    "Notification.body": {
        "descr": "The body read-only property of the Notification interface indicates the body string of the notification, as specified in the body option of the Notification() constructor.",
        "name": "Notification.body",
        "params": [],
        "path": "dom/notification/body",
        "syntax": "var body = Notification.body;  Value A DOMString. Examples In our Emogotchi demo (see source code), we run a simple spawnNotification()",
        "type": "Notification"
    },
    "Notification.close": {
        "descr": "The close() method of the Notification interface is used to close a previously displayed notification.",
        "name": "Notification.close",
        "params": [],
        "path": "dom/notification/close",
        "syntax": "Notification.close();",
        "type": "Notification"
    },
    "Notification.constructor": {
        "descr": "The Notification() constructor creates a new Notification object instance, which represents a user notification.",
        "name": "Notification.constructor",
        "params": [
            {
                "descr": "Defines a title for the notification, which will be shown at the top of the notification window when it is fired.",
                "name": "title"
            },
            {
                "descr": "An options object containing any custom settings that you want to apply to the notification. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/notification/notification",
        "syntax": "var myNotification = new Notification(title, options);",
        "type": "Notification"
    },
    "Notification.data": {
        "descr": "The data read-only property of the Notification interface returns a structured clone of the notification's data, as specified in the data option of the Notification() constructor.",
        "name": "Notification.data",
        "params": [],
        "path": "dom/notification/data",
        "syntax": "var data = Notification.data;  Value A structured clone. Examples The following snippet fires a notification; a simple options object is created, then the notification is fired using the Notification()",
        "type": "Notification"
    },
    "Notification.dir": {
        "descr": "The dir read-only property of the Notification interface indicates the text direction of the notification, as specified in the dir option of the Notification() constructor.",
        "name": "Notification.dir",
        "params": [],
        "path": "dom/notification/dir",
        "syntax": "var direction = Notification.dir;  Value A DOMString specifying the text direction. Possible values are:   auto: adopts the browser's language setting behaviour (the default.)  ltr",
        "type": "Notification"
    },
    "Notification.icon": {
        "descr": "The icon read-only property of the Notification interface contains the URL of an icon to be displayed as part of the notification, as specified in the icon option of the Notification() constructor.",
        "name": "Notification.icon",
        "params": [],
        "path": "dom/notification/icon",
        "syntax": "var icon = Notification.icon;  Value A USVString. Examples In our Emogotchi demo (see source code), we run a simple spawnNotification()",
        "type": "Notification"
    },
    "Notification.lang": {
        "descr": "The lang read-only property of the Notification interface indicates the text direction of the notification, as specified in the lang option of the Notification() constructor.",
        "name": "Notification.lang",
        "params": [],
        "path": "dom/notification/lang",
        "syntax": "var language = Notification.lang;  Value A DOMString specifying the language tag. Examples The following snippet fires a notification; a simple options object is created, then the notification is fired using the Notification()",
        "type": "Notification"
    },
    "Notification.onclick": {
        "descr": "The onclick property of the Notification interface specifies an event listener to receive click events. These events occur when the user clicks on a displayed Notification.",
        "name": "Notification.onclick",
        "params": [],
        "path": "dom/notification/onclick",
        "syntax": "Notification.onclick = function(event) { ... };",
        "type": "Notification"
    },
    "Notification.onclose": {
        "descr": "The onclose property of the Notification interface specifies an event listener to receive close events. These events occur when a Notification is closed.",
        "name": "Notification.onclose",
        "params": [],
        "path": "dom/notification/onclose",
        "syntax": "Notification.onclose = function() { ... };",
        "type": "Notification"
    },
    "Notification.onshow": {
        "descr": "The onshow property of the Notification interface specifies an event listener to receive show events. These events occur when a Notification is displayed.",
        "name": "Notification.onshow",
        "params": [],
        "path": "dom/notification/onshow",
        "syntax": "Notification.onshow = function() { ... };",
        "type": "Notification"
    },
    "Notification.permission": {
        "descr": "The permission read-only property of the Notification interface indicates the current permission granted by the user for the current origin to display web notifications.",
        "name": "Notification.permission",
        "params": [],
        "path": "dom/notification/permission",
        "syntax": "var permission = Notification.permission; Value A DOMString representing the current permission. The value can be:   granted: The user has explicitly granted permission for the current origin to display system notifications.  denied: The user has explicitly denied permission for the current origin to display system notifications.  default: The user decision is unknown; in this case the application will act as if permission was denied.  Examples The following fairly verbose snippet could be used if you wanted to first check whether notifications are supported, then check if permission has been granted for the current origin to send notifications, then request permission if required, before then sending a notification. function notifyMe() { // Let's check if the browser supports notifications if (!(\"Notification\" in window)) { console.log(\"This browser does not support desktop notification\");\n or  } // Let's check whether notification permissions have alredy been granted else if (Notification.permission === \"granted\") { // If it's okay let's create a notification var notification = new Notification(\"Hi there!\");\n or  } // Otherwise, we need to ask the user for permission else if (Notification.permission !== 'denied' || Notification.permission === \"default\") { Notification.requestPermission(function (permission) { // If the user accepts, let's create a notification if (permission === \"granted\") { var notification = new Notification(\"Hi there!\");\n or  } });\n or  } // At last, if the user has denied notifications, and you // want to be respectful there is no need to bother them any more. });",
        "type": "Notification"
    },
    "Notification.renotify": {
        "descr": "Note: This property is not currently supported in any browser.",
        "name": "Notification.renotify",
        "params": [],
        "path": "dom/notification/renotify",
        "syntax": "var renotify = Notification.renotify;  Value A Boolean. false is the default; true makes the notification renotify the user. Examples The following snippet is intended to fire a notification that renotifies the user after it has been replaced; a simple options object is created, and then the notification is fired using the Notification()",
        "type": "Notification"
    },
    "Notification.requestPermission": {
        "descr": "The requestPermission() method of the Notification interface requests permission from the user for the current origin to display notifications.",
        "name": "Notification.requestPermission",
        "params": [
            {
                "descr": "An optional callback function that is called with the permission value. ",
                "name": "callback Optional Deprecated since Gecko 46"
            }
        ],
        "path": "dom/notification/requestpermission",
        "syntax": "Notification.requestPermission().then(function(permission) { ... });",
        "type": "Notification"
    },
    "Notification.requireInteraction": {
        "descr": "The requireInteraction read-only property of the Notification interface returns a Boolean indicating that a notification should remain active until the user clicks or dismisses it, rather than closing automatically.",
        "name": "Notification.requireInteraction",
        "params": [],
        "path": "dom/notification/requireinteraction",
        "syntax": "function spawnNotification(theTitle,theBody,shouldRequireInteraction) { var options = { body: theBody, requireInteraction: shouldRequireInteraction } var n = new Notification(theTitle,options);\n or  });",
        "type": "Notification"
    },
    "Notification.silent": {
        "descr": "The silent read-only property of the Notification interface specifies whether the notification should be silent, i.e. no sounds or vibrations should be issued, regardless of the device settings. This is specified in the renotify option of the Notification() constructor.",
        "name": "Notification.silent",
        "params": [],
        "path": "dom/notification/silent",
        "syntax": "var silent = Notification.silent;  Value A Boolean. false is the default; true makes the notification silent. Examples The following snippet is intended to fire a silent notification; a simple options object is created, and then the notification is fired using the Notification()",
        "type": "Notification"
    },
    "Notification.timestamp": {
        "descr": "The timestamp read-only property of the Notification interface returns a DOMTimeStamp, as specified in the timestamp option of the Notification() constructor.",
        "name": "Notification.timestamp",
        "params": [],
        "path": "dom/notification/timestamp",
        "syntax": "var timestamp = Notification.timestamp; Value A DOMTimeStamp. Examples The following snippet fires a notification; a simple options object is created, then the notification is fired using the Notification()",
        "type": "Notification"
    },
    "Notification.title": {
        "descr": "The title read-only property of the Notification interface indicates the title of the notification, as specified in the title parameter of the Notification() constructor.",
        "name": "Notification.title",
        "params": [],
        "path": "dom/notification/title",
        "syntax": "var title = Notification.title; Value A DOMString. Examples In our Emogotchi demo (see source code), we run a simple spawnNotification()",
        "type": "Notification"
    },
    "Notification.vibrate": {
        "descr": "Note: This property is not currently supported in any browser.",
        "name": "Notification.vibrate",
        "params": [],
        "path": "dom/notification/vibrate",
        "syntax": "var vibrate = Notification.vibrate;  Value A vibration pattern, as specified in the Vibration API spec. Examples The following snippet is intended to create a notification that also triggers a device vibration; a simple options object is created, and then the notification is fired using the Notification()",
        "type": "Notification"
    },
    "NotificationEvent.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "NotificationEvent.constructor",
        "params": [
            {
                "descr": "TBD",
                "name": "type"
            },
            {
                "descr": "A dictionary object containing a Notification object to be used as the notification the event is dispatched on. ",
                "name": "NotificationEventInit Optional"
            }
        ],
        "path": "dom/notificationevent/notificationevent",
        "syntax": "var myNotificationEvent = new NotificationEvent(type, NotificationEventInit);",
        "type": "Notification"
    },
    "Number": {
        "descr": "The Number JavaScript object is a wrapper object allowing you to work with numerical values. A Number object is created using the Number() constructor.",
        "name": "Number",
        "params": [
            {
                "descr": "The numeric value of the object being created.",
                "name": "value"
            },
            {
                "descr": "The smallest interval between two representable numbers.",
                "name": "Number.EPSILON"
            },
            {
                "descr": "The maximum safe integer in JavaScript (253 - 1).",
                "name": "Number.MAX_SAFE_INTEGER"
            },
            {
                "descr": "The largest positive representable number.",
                "name": "Number.MAX_VALUE"
            },
            {
                "descr": "The minimum safe integer in JavaScript (-(253 - 1)).",
                "name": "Number.MIN_SAFE_INTEGER"
            },
            {
                "descr": "The smallest positive representable number - that is, the positive number closest to zero (without actually being zero).",
                "name": "Number.MIN_VALUE"
            },
            {
                "descr": "Special \"not a number\" value.",
                "name": "Number.NaN"
            },
            {
                "descr": "Special value representing negative infinity; returned on overflow.",
                "name": "Number.NEGATIVE_INFINITY"
            },
            {
                "descr": "Special value representing infinity; returned on overflow.",
                "name": "Number.POSITIVE_INFINITY"
            },
            {
                "descr": "Allows the addition of properties to a Number object.",
                "name": "Number.prototype"
            },
            {
                "descr": "Determine whether the passed value is NaN.",
                "name": "Number.isNaN()"
            },
            {
                "descr": "Determine whether the passed value is a finite number.",
                "name": "Number.isFinite()"
            },
            {
                "descr": "Determine whether the passed value is an integer.",
                "name": "Number.isInteger()"
            },
            {
                "descr": "Determine whether the passed value is a safe integer (number between -(253 - 1) and 253 - 1).",
                "name": "Number.isSafeInteger()"
            },
            {
                "descr": "Used to evaluate the passed value and convert it to an integer (or Infinity), but has been removed.",
                "name": "Number.toInteger()"
            },
            {
                "descr": "The value is the same as parseFloat() of the global object.",
                "name": "Number.parseFloat()"
            },
            {
                "descr": "The value is the same as parseInt() of the global object.",
                "name": "Number.parseInt()"
            },
            {
                "descr": "Returns a string representing the number in exponential notation.",
                "name": "Number.prototype.toExponential()"
            },
            {
                "descr": "Returns a string representing the number in fixed-point notation.",
                "name": "Number.prototype.toFixed()"
            },
            {
                "descr": "Returns a string with a language sensitive representation of this number. ",
                "name": "Number.prototype.toLocaleString()"
            },
            {
                "descr": "Returns a string representing the number to a specified precision in fixed-point or exponential notation.",
                "name": "Number.prototype.toPrecision()"
            },
            {
                "descr": "Returns an object literal representing the specified Number object; you can use this value to create a new object. ",
                "name": "Number.prototype.toSource()"
            },
            {
                "descr": "Returns a string representing the specified object in the specified radix (base). ",
                "name": "Number.prototype.toString()"
            },
            {
                "descr": "Returns the primitive value of the specified object. ",
                "name": "Number.prototype.valueOf()"
            }
        ],
        "path": "javascript/global_objects/number",
        "syntax": "new Number(value);",
        "type": "Number"
    },
    "Number.isFinite": {
        "descr": "The Number.isFinite() method determines whether the passed value is a finite number.",
        "name": "Number.isFinite",
        "params": [
            {
                "descr": "The value to be tested for finiteness.",
                "name": "value"
            }
        ],
        "path": "javascript/global_objects/number/isfinite",
        "syntax": "Number.isFinite(value)",
        "type": "Number"
    },
    "Number.isInteger": {
        "descr": "The Number.isInteger() method determines whether the passed value is an integer.",
        "name": "Number.isInteger",
        "params": [
            {
                "descr": "The value to be tested for being an integer.",
                "name": "value"
            }
        ],
        "path": "javascript/global_objects/number/isinteger",
        "syntax": "Number.isInteger(value)",
        "type": "Number"
    },
    "Number.isNaN": {
        "descr": "The Number.isNaN() method determines whether the passed value is NaN and its type is Number. It is a more robust version of the original, global isNaN().",
        "name": "Number.isNaN",
        "params": [
            {
                "descr": "The value to be tested for NaN.",
                "name": "value"
            }
        ],
        "path": "javascript/global_objects/number/isnan",
        "syntax": "Number.isNaN(value)",
        "type": "Number"
    },
    "Number.isSafeInteger": {
        "descr": "The Number.isSafeInteger() method determines whether the provided value is a number that is a safe integer.",
        "name": "Number.isSafeInteger",
        "params": [
            {
                "descr": "The value to be tested for being a safe integer.",
                "name": "testValue"
            }
        ],
        "path": "javascript/global_objects/number/issafeinteger",
        "syntax": "Number.isSafeInteger(testValue)",
        "type": "Number"
    },
    "Number.parseFloat": {
        "descr": "The Number.parseFloat() method parses a string argument and returns a floating point number. This method behaves identically to the global function parseFloat() and is part of ECMAScript 2015 (its purpose is modularization of globals).",
        "name": "Number.parseFloat",
        "params": [
            {
                "descr": "The value you want to parse.",
                "name": "value"
            }
        ],
        "path": "javascript/global_objects/number/parsefloat",
        "syntax": "Number.parseFloat(string)",
        "type": "Number"
    },
    "Number.parseInt": {
        "descr": "The Number.parseInt() method parses a string argument and returns an integer of the specified radix or base.",
        "name": "Number.parseInt",
        "params": [
            {
                "descr": "The value to parse. If the string argument is not a string, then it is converted to a string (using the ToString abstract operation). ",
                "name": "string"
            },
            {
                "descr": "An integer between 2 and 36 that represents the radix (the base in mathematical numeral systems) of the above mentioned string.",
                "name": "radix"
            }
        ],
        "path": "javascript/global_objects/number/parseint",
        "syntax": "Number.parseInt(string,[ radix ])",
        "type": "Number"
    },
    "Object": {
        "descr": "The Object constructor creates an object wrapper.",
        "name": "Object",
        "params": [
            {
                "descr": "Pairs of names (strings) and values (any value) where the name is separated from the value by a colon.",
                "name": "nameValuePair1, nameValuePair2, ... nameValuePairN"
            },
            {
                "descr": "Any value.",
                "name": "value"
            },
            {
                "descr": "Has a value of 1.",
                "name": "Object.length"
            },
            {
                "descr": "Allows the addition of properties to all objects of type Object.",
                "name": "Object.prototype"
            },
            {
                "descr": "Copies the values of all enumerable own properties from one or more source objects to a target object.",
                "name": "Object.assign()"
            },
            {
                "descr": "Creates a new object with the specified prototype object and properties.",
                "name": "Object.create()"
            },
            {
                "descr": "Adds the named property described by a given descriptor to an object.",
                "name": "Object.defineProperty()"
            },
            {
                "descr": "Adds the named properties described by the given descriptors to an object.",
                "name": "Object.defineProperties()"
            },
            {
                "descr": "Returns an array containing all of the [key, value] pairs of a given object's own enumerable string properties.",
                "name": "Object.entries()"
            },
            {
                "descr": "Freezes an object: other code can't delete or change any properties.",
                "name": "Object.freeze()"
            },
            {
                "descr": "Returns a new object from an iterable of key-value pairs (reverses Object.entries).",
                "name": "Object.fromEntries()"
            },
            {
                "descr": "Returns a property descriptor for a named property on an object.",
                "name": "Object.getOwnPropertyDescriptor()"
            },
            {
                "descr": "Returns an object containing all own property descriptors for an object.",
                "name": "Object.getOwnPropertyDescriptors()"
            },
            {
                "descr": "Returns an array containing the names of all of the given object's own enumerable and non-enumerable properties.",
                "name": "Object.getOwnPropertyNames()"
            },
            {
                "descr": "Returns an array of all symbol properties found directly upon a given object.",
                "name": "Object.getOwnPropertySymbols()"
            },
            {
                "descr": "Returns the prototype of the specified object.",
                "name": "Object.getPrototypeOf()"
            },
            {
                "descr": "Compares if two values are the same value. ",
                "name": "Object.is()"
            },
            {
                "descr": "Determines if extending of an object is allowed.",
                "name": "Object.isExtensible()"
            },
            {
                "descr": "Determines if an object was frozen.",
                "name": "Object.isFrozen()"
            },
            {
                "descr": "Determines if an object is sealed.",
                "name": "Object.isSealed()"
            },
            {
                "descr": "Returns an array containing the names of all of the given object's own enumerable string properties.",
                "name": "Object.keys()"
            },
            {
                "descr": "Prevents any extensions of an object.",
                "name": "Object.preventExtensions()"
            },
            {
                "descr": "Prevents other code from deleting properties of an object.",
                "name": "Object.seal()"
            },
            {
                "descr": "Sets the prototype (i.e., the internal [[Prototype]] property).",
                "name": "Object.setPrototypeOf()"
            },
            {
                "descr": "Returns an array containing the values that correspond to all of a given object's own enumerable string properties.",
                "name": "Object.values()"
            },
            {
                "descr": "Specifies the function that creates an object's prototype.",
                "name": "Object.prototype.constructor"
            },
            {
                "descr": "Points to the object which was used as prototype when the object was instantiated.",
                "name": "Object.prototype.__proto__"
            },
            {
                "descr": "Allows a function to be defined that will be executed when an undefined object member is called as a method.",
                "name": "Object.prototype.__noSuchMethod__"
            },
            {
                "descr": "Used to return the number of enumerable properties directly on a user-defined object, but has been removed.",
                "name": "Object.prototype.__count__"
            },
            {
                "descr": "Used to point to an object's context, but has been removed.",
                "name": "Object.prototype.__parent__"
            },
            {
                "descr": "Associates a function with a property that, when accessed, executes that function and returns its return value.",
                "name": "Object.prototype.__defineGetter__()"
            },
            {
                "descr": "Associates a function with a property that, when set, executes that function which modifies the property.",
                "name": "Object.prototype.__defineSetter__()"
            },
            {
                "descr": "Returns the function associated with the specified property by the __defineGetter__() method.",
                "name": "Object.prototype.__lookupGetter__()"
            },
            {
                "descr": "Returns the function associated with the specified property by the __defineSetter__() method.",
                "name": "Object.prototype.__lookupSetter__()"
            },
            {
                "descr": "Returns a boolean indicating whether an object contains the specified property as a direct property of that object and not inherited through the prototype chain.",
                "name": "Object.prototype.hasOwnProperty()"
            },
            {
                "descr": "Returns a boolean indicating whether the object this method is called upon is in the prototype chain of the specified object.",
                "name": "Object.prototype.isPrototypeOf()"
            },
            {
                "descr": "Returns a boolean indicating if the internal ECMAScript [[Enumerable]] attribute is set.",
                "name": "Object.prototype.propertyIsEnumerable()"
            },
            {
                "descr": "Returns string containing the source of an object literal representing the object that this method is called upon; you can use this value to create a new object.",
                "name": "Object.prototype.toSource()"
            },
            {
                "descr": "Calls toString().",
                "name": "Object.prototype.toLocaleString()"
            },
            {
                "descr": "Returns a string representation of the object.",
                "name": "Object.prototype.toString()"
            },
            {
                "descr": "Removes a watchpoint from a property of the object.",
                "name": "Object.prototype.unwatch()"
            },
            {
                "descr": "Returns the primitive value of the specified object.",
                "name": "Object.prototype.valueOf()"
            },
            {
                "descr": "Adds a watchpoint to a property of the object.",
                "name": "Object.prototype.watch()"
            },
            {
                "descr": "Used to evaluate a string of JavaScript code in the context of the specified object, but has been removed.",
                "name": "Object.prototype.eval()"
            }
        ],
        "path": "javascript/global_objects/object",
        "syntax": "// Object initialiser or literal { [ nameValuePair1[, nameValuePair2[, ...nameValuePairN] ] ] } // Called as a constructor new Object([value])",
        "type": "Object"
    },
    "Object initializer": {
        "descr": "Objects can be initialized using new Object(), Object.create(), or using the literal notation (initializer notation). An object initializer is a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}).",
        "name": "Object initializer",
        "params": [],
        "path": "javascript/operators/object_initializer",
        "syntax": "var o = {}; var o = {a: 'foo', b: 42, c: {}}; var a = 'foo', b = 42, c = {}; var o = {a: a, b: b, c: c}; var o = { property: function (parameters) {}, get property() {}, set property(value) {} };",
        "type": "Operators"
    },
    "Object.assign": {
        "descr": "The Object.assign() method is used to copy the values of all enumerable own properties from one or more source objects to a target object. It will return the target object.",
        "name": "Object.assign",
        "params": [
            {
                "descr": "The target object.",
                "name": "target"
            },
            {
                "descr": "The source object(s).",
                "name": "sources"
            }
        ],
        "path": "javascript/global_objects/object/assign",
        "syntax": "Object.assign(target, ...sources)",
        "type": "Object"
    },
    "Object.create": {
        "descr": "The Object.create() method creates a new object, using an existing object as the prototype of the newly created object.",
        "name": "Object.create",
        "params": [
            {
                "descr": "The object which should be the prototype of the newly-created object.",
                "name": "proto"
            },
            {
                "descr": "Optional. If specified and not undefined, an object whose enumerable own properties (that is, those properties defined upon itself and not enumerable properties along its prototype chain) specify property descriptors to be added to the newly-created object, with the corresponding property names. These properties correspond to the second argument of Object.defineProperties().",
                "name": "propertiesObject"
            }
        ],
        "path": "javascript/global_objects/object/create",
        "syntax": "Object.create(proto[, propertiesObject])",
        "type": "Object"
    },
    "Object.defineProperties": {
        "descr": "The Object.defineProperties() method defines new or modifies existing properties directly on an object, returning the object.",
        "name": "Object.defineProperties",
        "params": [
            {
                "descr": "The object on which to define or modify properties.",
                "name": "obj"
            },
            {
                "descr": "An object whose own enumerable properties constitute descriptors for the properties to be defined or modified. ",
                "name": "props"
            },
            {
                "descr": "true if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object. ",
                "name": "configurable"
            },
            {
                "descr": "true if and only if this property shows up during enumeration of the properties on the corresponding object. ",
                "name": "enumerable"
            },
            {
                "descr": "The value associated with the property. ",
                "name": "value"
            },
            {
                "descr": "true if and only if the value associated with the property may be changed with an assignment operator. ",
                "name": "writable"
            },
            {
                "descr": "A function which serves as a getter for the property, or undefined if there is no getter. ",
                "name": "get"
            },
            {
                "descr": "A function which serves as a setter for the property, or undefined if there is no setter. ",
                "name": "set"
            }
        ],
        "path": "javascript/global_objects/object/defineproperties",
        "syntax": "Object.defineProperties(obj, props)",
        "type": "Object"
    },
    "Object.defineProperty": {
        "descr": "The static method Object.defineProperty() defines a new property directly on an object, or modifies an existing property on an object, and returns the object.",
        "name": "Object.defineProperty",
        "params": [
            {
                "descr": "The object on which to define the property.",
                "name": "obj"
            },
            {
                "descr": "The name or Symbol of the property to be defined or modified.",
                "name": "prop"
            },
            {
                "descr": "The descriptor for the property being defined or modified.",
                "name": "descriptor"
            },
            {
                "descr": "true if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object. ",
                "name": "configurable"
            },
            {
                "descr": "true if and only if this property shows up during enumeration of the properties on the corresponding object. ",
                "name": "enumerable"
            },
            {
                "descr": "The value associated with the property. ",
                "name": "value"
            },
            {
                "descr": "true if and only if the value associated with the property may be changed with an assignment operator. ",
                "name": "writable"
            },
            {
                "descr": "A function which serves as a getter for the property, or undefined if there is no getter. ",
                "name": "get"
            },
            {
                "descr": "A function which serves as a setter for the property, or undefined if there is no setter. ",
                "name": "set"
            }
        ],
        "path": "javascript/global_objects/object/defineproperty",
        "syntax": "Object.defineProperty(obj, prop, descriptor)",
        "type": "Object"
    },
    "Object.entries": {
        "descr": "The Object.entries() method returns an array of a given object's own enumerable property [key, value] pairs, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well) . The order of the array returned by Object.entries() does not depend on how an object is defined. If there is a need for certain ordering then the array needs to be sorted first like Object.entries(obj).sort((a, b) => a[0] - b[0]);.",
        "name": "Object.entries",
        "params": [
            {
                "descr": "The object whose enumerable own property [key, value] pairs are to be returned.",
                "name": "obj"
            }
        ],
        "path": "javascript/global_objects/object/entries",
        "syntax": "Object.entries(obj)",
        "type": "Object"
    },
    "Object.freeze": {
        "descr": "The Object.freeze() method freezes an object. A frozen object can no longer be changed; freezing an object prevents new properties from being added to it, existing properties from being removed, prevents changing the enumerability, configurability, or writability of existing properties, and prevents the values of existing properties from being changed. In addition, freezing an object also prevents its prototype from being changed. freeze() returns the same object that was passed in.",
        "name": "Object.freeze",
        "params": [
            {
                "descr": "The object to freeze.",
                "name": "obj"
            }
        ],
        "path": "javascript/global_objects/object/freeze",
        "syntax": "Object.freeze(obj)",
        "type": "Object"
    },
    "Object.fromEntries": {
        "descr": "The Object.fromEntries() method transforms a list of key-value pairs into an object.",
        "name": "Object.fromEntries",
        "params": [
            {
                "descr": "An iterable such as Array or Map or other objects implementing the iterable protocol.",
                "name": "iterable"
            }
        ],
        "path": "javascript/global_objects/object/fromentries",
        "syntax": "Object.fromEntries(iterable);",
        "type": "Object"
    },
    "Object.getOwnPropertyDescriptor": {
        "descr": "The Object.getOwnPropertyDescriptor() method returns a property descriptor for an own property (that is, one directly present on an object and not in the object's prototype chain) of a given object.",
        "name": "Object.getOwnPropertyDescriptor",
        "params": [
            {
                "descr": "The object in which to look for the property.",
                "name": "obj"
            },
            {
                "descr": "The name or Symbol of the property whose description is to be retrieved.",
                "name": "prop"
            },
            {
                "descr": "The value associated with the property (data descriptors only).",
                "name": "value"
            },
            {
                "descr": "true if and only if the value associated with the property may be changed (data descriptors only).",
                "name": "writable"
            },
            {
                "descr": "A function which serves as a getter for the property, or undefined if there is no getter (accessor descriptors only).",
                "name": "get"
            },
            {
                "descr": "A function which serves as a setter for the property, or undefined if there is no setter (accessor descriptors only).",
                "name": "set"
            },
            {
                "descr": "true if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.",
                "name": "configurable"
            },
            {
                "descr": "true if and only if this property shows up during enumeration of the properties on the corresponding object.",
                "name": "enumerable"
            }
        ],
        "path": "javascript/global_objects/object/getownpropertydescriptor",
        "syntax": "Object.getOwnPropertyDescriptor(obj, prop)",
        "type": "Object"
    },
    "Object.getOwnPropertyDescriptors": {
        "descr": "The Object.getOwnPropertyDescriptors() method returns all own property descriptors of a given object.",
        "name": "Object.getOwnPropertyDescriptors",
        "params": [
            {
                "descr": "The object for which to get all own property descriptors.",
                "name": "obj"
            },
            {
                "descr": "The value associated with the property (data descriptors only).",
                "name": "value"
            },
            {
                "descr": "true if and only if the value associated with the property may be changed (data descriptors only).",
                "name": "writable"
            },
            {
                "descr": "A function which serves as a getter for the property, or undefined if there is no getter (accessor descriptors only).",
                "name": "get"
            },
            {
                "descr": "A function which serves as a setter for the property, or undefined if there is no setter (accessor descriptors only).",
                "name": "set"
            },
            {
                "descr": "true if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.",
                "name": "configurable"
            },
            {
                "descr": "true if and only if this property shows up during enumeration of the properties on the corresponding object.",
                "name": "enumerable"
            }
        ],
        "path": "javascript/global_objects/object/getownpropertydescriptors",
        "syntax": "Object.getOwnPropertyDescriptors(obj)",
        "type": "Object"
    },
    "Object.getOwnPropertyNames": {
        "descr": "The Object.getOwnPropertyNames() method returns an array of all properties (including non-enumerable properties except for those which use Symbol) found directly upon a given object.",
        "name": "Object.getOwnPropertyNames",
        "params": [
            {
                "descr": "The object whose enumerable and non-enumerable own properties are to be returned.",
                "name": "obj"
            }
        ],
        "path": "javascript/global_objects/object/getownpropertynames",
        "syntax": "Object.getOwnPropertyNames(obj)",
        "type": "Object"
    },
    "Object.getOwnPropertySymbols": {
        "descr": "The Object.getOwnPropertySymbols() method returns an array of all symbol properties found directly upon a given object.",
        "name": "Object.getOwnPropertySymbols",
        "params": [
            {
                "descr": "The object whose symbol properties are to be returned.",
                "name": "obj"
            }
        ],
        "path": "javascript/global_objects/object/getownpropertysymbols",
        "syntax": "Object.getOwnPropertySymbols(obj)",
        "type": "Object"
    },
    "Object.getPrototypeOf": {
        "descr": "The Object.getPrototypeOf() method returns the prototype (i.e. the value of the internal [[Prototype]] property) of the specified object.",
        "name": "Object.getPrototypeOf",
        "params": [
            {
                "descr": "The object whose prototype is to be returned.",
                "name": "obj)"
            }
        ],
        "path": "javascript/global_objects/object/getprototypeof",
        "syntax": "Object.getPrototypeOf(obj)",
        "type": "Object"
    },
    "Object.is": {
        "descr": "The Object.is() method determines whether two values are the same value.",
        "name": "Object.is",
        "params": [
            {
                "descr": "The first value to compare.",
                "name": "value1"
            },
            {
                "descr": "The second value to compare.",
                "name": "value2"
            }
        ],
        "path": "javascript/global_objects/object/is",
        "syntax": "Object.is(value1, value2);",
        "type": "Object"
    },
    "Object.isExtensible": {
        "descr": "The Object.isExtensible() method determines if an object is extensible (whether it can have new properties added to it).",
        "name": "Object.isExtensible",
        "params": [
            {
                "descr": "The object which should be checked.",
                "name": "obj"
            }
        ],
        "path": "javascript/global_objects/object/isextensible",
        "syntax": "Object.isExtensible(obj)",
        "type": "Object"
    },
    "Object.isFrozen": {
        "descr": "The Object.isFrozen() determines if an object is frozen.",
        "name": "Object.isFrozen",
        "params": [
            {
                "descr": "The object which should be checked.",
                "name": "obj"
            }
        ],
        "path": "javascript/global_objects/object/isfrozen",
        "syntax": "Object.isFrozen(obj)",
        "type": "Object"
    },
    "Object.isSealed": {
        "descr": "The Object.isSealed() method determines if an object is sealed.",
        "name": "Object.isSealed",
        "params": [
            {
                "descr": "The object which should be checked.",
                "name": "obj"
            }
        ],
        "path": "javascript/global_objects/object/issealed",
        "syntax": "Object.isSealed(obj)",
        "type": "Object"
    },
    "Object.keys": {
        "descr": "The Object.keys() method returns an array of a given object's own property names, in the same order as we get with a normal loop.",
        "name": "Object.keys",
        "params": [
            {
                "descr": "The object of which the enumerable's own properties are to be returned.",
                "name": "obj"
            }
        ],
        "path": "javascript/global_objects/object/keys",
        "syntax": "Object.keys(obj)",
        "type": "Object"
    },
    "Object.preventExtensions": {
        "descr": "The Object.preventExtensions() method prevents new properties from ever being added to an object (i.e. prevents future extensions to the object).",
        "name": "Object.preventExtensions",
        "params": [
            {
                "descr": "The object which should be made non-extensible.",
                "name": "obj"
            }
        ],
        "path": "javascript/global_objects/object/preventextensions",
        "syntax": "Object.preventExtensions(obj)",
        "type": "Object"
    },
    "Object.proto": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "Object.proto",
        "params": [],
        "path": "javascript/global_objects/object/proto",
        "syntax": "var Circle = function () {}; var shape = {}; var circle = new Circle();\n or  // Set the object prototype. // DEPRECATED. This is for example purposes only. DO NOT DO THIS in real code. shape.__proto__ = circle; // Get the object prototype console.log(shape.__proto__ === circle);\n or  // true);",
        "type": "Object"
    },
    "Object.seal": {
        "descr": "The Object.seal() method seals an object, preventing new properties from being added to it and marking all existing properties as non-configurable. Values of present properties can still be changed as long as they are writable.",
        "name": "Object.seal",
        "params": [
            {
                "descr": "The object which should be sealed. ",
                "name": "obj"
            }
        ],
        "path": "javascript/global_objects/object/seal",
        "syntax": "Object.seal(obj)",
        "type": "Object"
    },
    "Object.setPrototypeOf": {
        "descr": "The Object.setPrototypeOf() method sets the prototype (i.e., the internal [[Prototype]] property) of a specified object to another object or null.",
        "name": "Object.setPrototypeOf",
        "params": [
            {
                "descr": "The object which is to have its prototype set.",
                "name": "obj"
            },
            {
                "descr": "The object's new prototype (an object or null).",
                "name": "prototype"
            }
        ],
        "path": "javascript/global_objects/object/setprototypeof",
        "syntax": "Object.setPrototypeOf(obj, prototype)",
        "type": "Object"
    },
    "Object.values": {
        "descr": "The Object.values() method returns an array of a given object's own enumerable property values, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).",
        "name": "Object.values",
        "params": [
            {
                "descr": "The object whose enumerable own property values are to be returned.",
                "name": "obj"
            }
        ],
        "path": "javascript/global_objects/object/values",
        "syntax": "Object.values(obj)",
        "type": "Object"
    },
    "OffScreenCanvas.transferToImageBitmap": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "OffScreenCanvas.transferToImageBitmap",
        "params": [],
        "path": "dom/offscreencanvas/transfertoimagebitmap",
        "syntax": "ImageBitmap OffscreenCanvas.transferToImageBitmap()",
        "type": "Canvas"
    },
    "OfflineAudioCompletionEvent.constructor": {
        "descr": "The OfflineAudioCompletionEvent() constructor of the Web Audio API creates a new OfflineAudioCompletionEvent object instance.",
        "name": "OfflineAudioCompletionEvent.constructor",
        "params": [
            {
                "descr": "A DOMString representing the type of object to create.",
                "name": "type Optional"
            },
            {
                "descr": "Options are as follows:   renderedBuffer: The rendered AudioBuffer containing the audio data.",
                "name": "init Optional"
            }
        ],
        "path": "dom/offlineaudiocompletionevent/offlineaudiocompletionevent",
        "syntax": "var offlineAudioCompletionEvent = new OfflineAudioCompletionEvent(type, init)",
        "type": "Audio"
    },
    "OfflineAudioContext.constructor": {
        "descr": "You can specify the parameters for the OfflineAudioContext() constructor as either the same set of parameters as are inputs into the AudioContext.createBuffer() method, or by passing those parameters in an options object. Either way, the individual parameters are the same.",
        "name": "OfflineAudioContext.constructor",
        "params": [
            {
                "descr": "An integer specifying the number of channels the resulting AudioBuffer should have.",
                "name": "numberOfChannels"
            },
            {
                "descr": "An integer specifying the size of the buffer to create for the audio context, in sample-frames, where one sample-frame is a unit that can contain a single sample of audio data for every channel in the audio data. For example, a 512 sample-frame buffer for 8 channels of sound would be 512 * ((sizeof(float32) * 8) * 32) or 524,288 bytes.",
                "name": "length"
            },
            {
                "descr": "The sample-rate of the linear audio data in sample-frames per second. ",
                "name": "sampleRate"
            }
        ],
        "path": "dom/offlineaudiocontext/offlineaudiocontext",
        "syntax": "var offlineAudioCtx = new OfflineAudioContext(numberOfChannels, length, sampleRate);\n or  var offlineAudioCtx = new OfflineAudioContext(options);",
        "type": "Audio"
    },
    "OfflineAudioContext.oncomplete": {
        "descr": "The oncomplete event handler of the OfflineAudioContext interface is called when the audio processing is terminated, that is when the complete event (of type OfflineAudioCompletionEvent) is raised.",
        "name": "OfflineAudioContext.oncomplete",
        "params": [],
        "path": "dom/offlineaudiocontext/oncomplete",
        "syntax": "var offlineAudioCtx = new OfflineAudioContext();\n or  offlineAudioCtx.oncomplete = function() { ... });",
        "type": "Audio"
    },
    "OfflineAudioContext.resume": {
        "descr": "The resume() method of the OfflineAudioContext interface resumes the progression of time in an audio context that has been suspended. The promise resolves immediately because the OfflineAudioContext does not require the audio hardware. If the context is not currently suspended or the rendering has not started, the promise is rejected with InvalidStateError.",
        "name": "OfflineAudioContext.resume",
        "params": [],
        "path": "dom/offlineaudiocontext/resume",
        "syntax": "OfflineAudioContext.resume().then(function() { ... });",
        "type": "Audio"
    },
    "OfflineAudioContext.startRendering": {
        "descr": "The startRendering() method of the OfflineAudioContext Interface starts rendering the audio graph, taking into account the current connections and the current scheduled changes.",
        "name": "OfflineAudioContext.startRendering",
        "params": [],
        "path": "dom/offlineaudiocontext/startrendering",
        "syntax": "offlineAudioCtx.startRendering();\n or  offlineAudioCtx.oncomplete = function(e) { // e.renderedBuffer contains the output buffer });",
        "type": "Audio"
    },
    "OfflineAudioContext.suspend": {
        "descr": "The suspend() method of the OfflineAudioContext interface schedules a suspension of the time progression in the audio context at the specified time and returns a promise. This is generally useful at the time of manipulating the audio graph synchronously on OfflineAudioContext.",
        "name": "OfflineAudioContext.suspend",
        "params": [
            {
                "descr": "A double specifying the suspend time, in seconds.",
                "name": "suspendTime"
            }
        ],
        "path": "dom/offlineaudiocontext/suspend",
        "syntax": "OfflineAudioContext.suspend(suspendTime).then(function() { ... });",
        "type": "Audio"
    },
    "OffscreenCanvas.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "OffscreenCanvas.constructor",
        "params": [
            {
                "descr": "The height of the offscreen canvas.",
                "name": "width"
            },
            {
                "descr": "The width of the offscreen canvas.",
                "name": "height"
            }
        ],
        "path": "dom/offscreencanvas/offscreencanvas",
        "syntax": "new OffscreenCanvas(width, height);",
        "type": "Canvas"
    },
    "OffscreenCanvas.getContext": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "OffscreenCanvas.getContext",
        "params": [
            {
                "descr": "Is a DOMString containing the context identifier defining the drawing context associated to the canvas. ",
                "name": "contextType"
            },
            {
                "descr": "You can use several context attributes when creating your rendering context, for example: offscreen.getContext(\"webgl\", { antialias: false, depth: false }); 2d context attributes:   alpha: Boolean that indicates if the canvas contains an alpha channel. If set to false, the browser now knows that the backdrop is always opaque, which can speed up drawing of transparent content and images then.  (Gecko only) willReadFrequently: Boolean that indicates whether or not a lot of read-back operations are planned. This will force the use of a software (instead of hardware accelerated) 2D canvas and can save memory when calling getImageData() frequently. This option is only available, if the flag gfx.canvas.willReadFrequently.enable is set to true (which, by default, is only the case for B2G/Firefox OS).  (Blink only) storage: String that indicates which storage is used (\"persistent\" by default).  WebGL context attributes:   alpha: Boolean that indicates if the canvas contains an alpha buffer.  depth: Boolean that indicates that the drawing buffer has a depth buffer of at least 16 bits.  stencil: Boolean that indicates that the drawing buffer has a stencil buffer of at least 8 bits.  antialias: Boolean that indicates whether or not to perform anti-aliasing.  premultipliedAlpha: Boolean that indicates that the page compositor will assume the drawing buffer contains colors with pre-multiplied alpha.  preserveDrawingBuffer: If the value is true the buffers will not be cleared and will preserve their values until cleared or overwritten by the author.  failIfMajorPerformanceCaveat: Boolean that indicates if a context will be created if the system performance is low.",
                "name": "contextAttributes"
            }
        ],
        "path": "dom/offscreencanvas/getcontext",
        "syntax": "offscreen.getContext(contextType, contextAttributes);",
        "type": "Canvas"
    },
    "OffscreenCanvas.height": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "OffscreenCanvas.height",
        "params": [],
        "path": "dom/offscreencanvas/height",
        "syntax": "var pxl = offscreen.height; offscreen.height = pxl; Examples Creating a new offscreen canvas and returning or setting the height of the offscreen canvas: var offscreen = new OffscreenCanvas(256, 256);\n or  offscreen.height; // 256 offscreen.height = 512;);",
        "type": "Canvas"
    },
    "OffscreenCanvas.toBlob": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "OffscreenCanvas.toBlob",
        "params": [
            {
                "descr": "A DOMString indicating the image format. ",
                "name": "type Optional"
            },
            {
                "descr": "A Number between 0 and 1 indicating image quality if the requested type is image/jpeg or image/webp. ",
                "name": "encoderOptions Optional"
            }
        ],
        "path": "dom/offscreencanvas/toblob",
        "syntax": "Promise<Blob> OffscreenCanvas.toBlob(type, encoderOptions);",
        "type": "Canvas"
    },
    "OffscreenCanvas.width": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "OffscreenCanvas.width",
        "params": [],
        "path": "dom/offscreencanvas/width",
        "syntax": "var pxl = offscreen.width; offscreen.width = pxl; Examples Creating a new offscreen canvas and returning or setting the width of the offscreen canvas: var offscreen = new OffscreenCanvas(256, 256);\n or  offscreen.width; // 256 offscreen.width = 512;);",
        "type": "Canvas"
    },
    "Operator Precedence": {
        "descr": "Operator precedence determines the way in which operators are parsed with respect to each other. Operators with higher precedence become the operands of operators with lower precedence.",
        "name": "Operator Precedence",
        "params": [],
        "path": "javascript/operators/operator_precedence",
        "syntax": "(a OP b) OP c",
        "type": "Operators"
    },
    "OrientationSensor.populateMatrix": {
        "descr": "The populateMatrix method of the OrientationSensor interface populates the given target matrix with the rotation matrix based on the latest sensor reading. The rotation maxtrix is shown below.",
        "name": "OrientationSensor.populateMatrix",
        "params": [
            {
                "descr": "TBD",
                "name": "targetMatrix"
            }
        ],
        "path": "dom/orientationsensor/populatematrix",
        "syntax": "orientationInstance.populateMatrix(targetMatrix)",
        "type": "Sensors"
    },
    "OscillatorNode.constructor": {
        "descr": "The OscillatorNode() constructor of the Web Audio API creates a new OscillatorNode object which is an AudioNode that represents a periodic waveform, like a sine wave, optionally setting the node's properties' values to match values in a specified object.",
        "name": "OscillatorNode.constructor",
        "params": [
            {
                "descr": "A reference to an AudioContext.",
                "name": "context"
            },
            {
                "descr": "An object whose properties specify the initial values for the oscillator node's properties. ",
                "name": "options Optional"
            },
            {
                "descr": "A detuning value (in cents) which will offset the frequency by the given amount. ",
                "name": "detune"
            },
            {
                "descr": "The frequency (in hertz) of the periodic waveform. ",
                "name": "frequency"
            },
            {
                "descr": "An arbitrary period waveform described by a PeriodicWave object.",
                "name": "periodicWave"
            }
        ],
        "path": "dom/oscillatornode/oscillatornode",
        "syntax": "var oscillatorNode = new OscillatorNode(context, options)",
        "type": "Audio"
    },
    "OscillatorNode.detune": {
        "descr": "The detune property of the OscillatorNode interface is an a-rate AudioParam representing detuning of oscillation in cents.",
        "name": "OscillatorNode.detune",
        "params": [],
        "path": "dom/oscillatornode/detune",
        "syntax": "var oscillator = audioCtx.createOscillator();\n or  oscillator.detune.setValueAtTime(100, audioCtx.currentTime);\n or  // value in cents);",
        "type": "Audio"
    },
    "OscillatorNode.frequency": {
        "descr": "The frequency property of the OscillatorNode interface is an a-rate AudioParam representing the frequency of oscillation in hertz.",
        "name": "OscillatorNode.frequency",
        "params": [],
        "path": "dom/oscillatornode/frequency",
        "syntax": "var oscillator = audioCtx.createOscillator();\n or  oscillator.frequency.setValueAtTime(440, audioCtx.currentTime);\n or  // value in hertz);",
        "type": "Audio"
    },
    "OscillatorNode.onended": {
        "descr": "The onended property of the OscillatorNode interface is used to set the event handler for the ended event, which fires when the tone has stopped playing.",
        "name": "OscillatorNode.onended",
        "params": [],
        "path": "dom/oscillatornode/onended",
        "syntax": "var oscillator = audioCtx.createOscillator();\n or  oscillator.onended = function() { ... };);",
        "type": "Audio"
    },
    "OscillatorNode.setPeriodicWave": {
        "descr": "The setPeriodicWave() method of the OscillatorNode interface is used to point to a PeriodicWave defining a periodic waveform that can be used to shape the oscillator's output, when type is custom.",
        "name": "OscillatorNode.setPeriodicWave",
        "params": [
            {
                "descr": "A PeriodicWave object representing the waveform to use as the shape of the oscillator's output.",
                "name": "wave"
            }
        ],
        "path": "dom/oscillatornode/setperiodicwave",
        "syntax": "OscillatorNode.setPeriodicWave(wave);",
        "type": "Audio"
    },
    "OscillatorNode.start": {
        "descr": "The start method of the OscillatorNode interface specifies the exact time to start playing the tone. Its parameter is optional and default to 0.",
        "name": "OscillatorNode.start",
        "params": [
            {
                "descr": "An optional double representing the time (in seconds) when the oscillator should start, in the same coordinate system as AudioContext's currentTime attribute. ",
                "name": "when Optional"
            }
        ],
        "path": "dom/oscillatornode/start",
        "syntax": "oscillator.start(when);\n or  // start playing oscillator at the point in time specified by when);",
        "type": "Audio"
    },
    "OscillatorNode.stop": {
        "descr": "The stop method of the OscillatorNode interface specifies the time to stop playing the tone. Its parameter is optional and defaults to 0.",
        "name": "OscillatorNode.stop",
        "params": [
            {
                "descr": "An optional double representing the audio context time when the oscillator should stop. ",
                "name": "when Optional"
            }
        ],
        "path": "dom/oscillatornode/stop",
        "syntax": "oscillator.stop(when);\n or  // stop playing oscillator at when);",
        "type": "Audio"
    },
    "OscillatorNode.type": {
        "descr": "The type property of the OscillatorNode interface specifies what shape of waveform the oscillator will output. There are several common waveforms available, as well as an option to specify a custom waveform shape. The shape of the waveform will affect the tone that is produced.",
        "name": "OscillatorNode.type",
        "params": [
            {
                "descr": "A sine wave. This is the default value.",
                "name": "sine"
            },
            {
                "descr": "A square wave with a duty cycle of 0.5; that is, the signal is \"high\" for half of each period.",
                "name": "square"
            },
            {
                "descr": "A sawtooth wave.",
                "name": "sawtooth"
            },
            {
                "descr": "A triangle wave.",
                "name": "triangle"
            },
            {
                "descr": "A custom waveform. You never set type to custom manually; instead, use the setPeriodicWave() method to provide the data representing the waveform. ",
                "name": "custom"
            },
            {
                "descr": "The value custom was specified. ",
                "name": "InvalidStateError"
            }
        ],
        "path": "dom/oscillatornode/type",
        "syntax": "OscillatorNode.type = type; Value A DOMString specifying the shape of oscillator wave. The different available values are:  sine A sine wave. This is the default value. square A square wave with a duty cycle of 0.5; that is, the signal is \"high\" for half of each period. sawtooth A sawtooth wave. triangle A triangle wave. custom A custom waveform. You never set type to custom manually; instead, use the setPeriodicWave()",
        "type": "Audio"
    },
    "PageTransitionEvent.persisted": {
        "descr": "The persisted read-only property indicates if a webpage is loading from a cache.",
        "name": "PageTransitionEvent.persisted",
        "params": [],
        "path": "dom/pagetransitionevent/persisted",
        "syntax": "window.addEventListener(\"pageshow\", function(event) { if (event.persisted) { console.log(\"Page was loaded from cache.\");\n or  } });",
        "type": "Events"
    },
    "PannerNode": {
        "descr": "The PannerNode interface represents the position and behavior of an audio source signal in space. It is an AudioNode audio-processing module describing its position with right-hand Cartesian coordinates, its movement using a velocity vector and its directionality using a directionality cone.",
        "name": "PannerNode",
        "params": [
            {
                "descr": "Creates a new PannerNode object instance.",
                "name": "PannerNode.PannerNode"
            },
            {
                "descr": "Is a double value describing the angle, in degrees, of a cone inside of which there will be no volume reduction.",
                "name": "PannerNode.coneInnerAngle"
            },
            {
                "descr": "A double value describing the angle, in degrees, of a cone outside of which the volume will be reduced by a constant value, defined by the coneOuterGain attribute.",
                "name": "PannerNode.coneOuterAngle"
            },
            {
                "descr": "A double value describing the amount of volume reduction outside the cone defined by the coneOuterAngle attribute. ",
                "name": "PannerNode.coneOuterGain"
            },
            {
                "descr": "An enumerated value determining which algorithm to use to reduce the volume of the audio source as it moves away from the listener.",
                "name": "PannerNode.distanceModel"
            },
            {
                "descr": "A double value representing the maximum distance between the audio source and the listener, after which the volume is not reduced any further.",
                "name": "PannerNode.maxDistance"
            },
            {
                "descr": "Represents the horizontal position of the audio source's vector in a right-hand cartesian coordinate sytem. ",
                "name": "PannerNode.orientationX"
            },
            {
                "descr": "Represents the vertical position of the audio source's vector in a right-hand cartesian coordinate sytem. ",
                "name": "PannerNode.orientationY"
            },
            {
                "descr": "Represents the longitudinal (back and forth) position of the audio source's vector in a right-hand cartesian coordinate sytem. ",
                "name": "PannerNode.orientationZ"
            },
            {
                "descr": "An enumerated value determining which spatialisation algorithm to use to position the audio in 3D space.",
                "name": "PannerNode.panningModel"
            },
            {
                "descr": "Represents the horizontal position of the audio in a right-hand cartesian coordinate sytem. ",
                "name": "PannerNode.positionX"
            },
            {
                "descr": "Represents the vertical position of the audio in a right-hand cartesian coordinate sytem. ",
                "name": "PannerNode.positionY"
            },
            {
                "descr": "Represents the longitudinal (back and forth) position of the audio in a right-hand cartesian coordinate sytem. ",
                "name": "PannerNode.positionZ"
            },
            {
                "descr": "A double value representing the reference distance for reducing volume as the audio source moves further from the listener.",
                "name": "PannerNode.refDistance"
            },
            {
                "descr": "A double value describing how quickly the volume is reduced as the source moves away from the listener. ",
                "name": "PannerNode.rolloffFactor"
            },
            {
                "descr": "Defines the position of the audio source relative to the listener (represented by an AudioListener object stored in the AudioContext.listener attribute.)",
                "name": "PannerNode.setPosition()"
            },
            {
                "descr": "Defines the direction the audio source is playing in.",
                "name": "PannerNode.setOrientation()"
            },
            {
                "descr": "Defines the velocity vector of the audio source — how fast it is moving and in what direction. ",
                "name": "PannerNode.setVelocity()"
            }
        ],
        "path": "dom/pannernode",
        "syntax": "AudioParam values. Retrieval is done by accessing, for example, PannerNode.positionX. While setting the same property is done with PannerNode.positionX.value. This is why these values are not marked read only, which is how they appear in the WebIDL.   PannerNode.coneInnerAngle Is a double value describing the angle, in degrees, of a cone inside of which there will be no volume reduction. PannerNode.coneOuterAngle A double value describing the angle, in degrees, of a cone outside of which the volume will be reduced by a constant value, defined by the coneOuterGain attribute. PannerNode.coneOuterGain A double value describing the amount of volume reduction outside the cone defined by the coneOuterAngle attribute. Its default value is 0, meaning that no sound can be heard. PannerNode.distanceModel An enumerated value determining which algorithm to use to reduce the volume of the audio source as it moves away from the listener. PannerNode.maxDistance A double value representing the maximum distance between the audio source and the listener, after which the volume is not reduced any further. PannerNode.orientationX Represents the horizontal position of the audio source's vector in a right-hand cartesian coordinate sytem. While this AudioParam cannot be directly changed, its value can be altered using its value property. The default is value is 1. PannerNode.orientationY Represents the vertical position of the audio source's vector in a right-hand cartesian coordinate sytem. The default is 0. While this AudioParam cannot be directly changed, its value can be altered using its value property. The default is value is 0. PannerNode.orientationZ Represents the longitudinal (back and forth) position of the audio source's vector in a right-hand cartesian coordinate sytem. The default is 0. While this AudioParam",
        "type": "Audio"
    },
    "PannerNode.coneInnerAngle": {
        "descr": "The coneInnerAngle property of the PannerNode interface is a double value describing the angle, in degrees, of a cone inside of which there will be no volume reduction.",
        "name": "PannerNode.coneInnerAngle",
        "params": [],
        "path": "dom/pannernode/coneinnerangle",
        "syntax": "var audioCtx = new AudioContext();\n or  var panner = audioCtx.createPanner();\n or  panner.coneInnerAngle = 360;);",
        "type": "Audio"
    },
    "PannerNode.coneOuterAngle": {
        "descr": "The coneOuterAngle property of the PannerNode interface is a double value describing the angle, in degrees, of a cone outside of which the volume will be reduced by a constant value, defined by the coneOuterGain property.",
        "name": "PannerNode.coneOuterAngle",
        "params": [],
        "path": "dom/pannernode/coneouterangle",
        "syntax": "var audioCtx = new AudioContext();\n or  var panner = audioCtx.createPanner();\n or  panner.coneOuterAngle = 0;);",
        "type": "Audio"
    },
    "PannerNode.coneOuterGain": {
        "descr": "The coneOuterGain property of the PannerNode interface is a double value, describing the amount of volume reduction outside the cone, defined by the coneOuterAngle attribute.",
        "name": "PannerNode.coneOuterGain",
        "params": [
            {
                "descr": "The property has been given a value outside the accepted range (0–1).",
                "name": "InvalidStateError"
            }
        ],
        "path": "dom/pannernode/coneoutergain",
        "syntax": "var audioCtx = new AudioContext();\n or  var panner = audioCtx.createPanner();\n or  panner.coneOuterGain = 0;);",
        "type": "Audio"
    },
    "PannerNode.constructor": {
        "descr": "The PannerNode() constructor of the Web Audio API creates a new PannerNode object instance.",
        "name": "PannerNode.constructor",
        "params": [
            {
                "descr": "A BaseAudioContext representing the audio context you want the node to be associated with.",
                "name": "context"
            },
            {
                "descr": "A PannerOptions dictionary object defining the properties you want the PannerNode to have (It also inherits the options defined in the AudioNodeOptions dictionary.):   panningModel: The PannerNode.panningModel you want the PannerNode to have (the default is equalpower.)  distanceModel: The PannerNode.distanceModel you want the PannerNode to have (the default is inverse.)  positionX: The PannerNode.positionX you want the PannerNode to have (the default is 0.)  positionY: The PannerNode.positionY you want the PannerNode to have (the default is 0.)  positionZ: The PannerNode.positionZ you want the PannerNode to have (the default is 0.)  orientationX: The PannerNode.orientationX you want the PannerNode to have (the default is 1.)  orientationY: The PannerNode.orientationY you want the PannerNode to have (the default is 0.)  orientationZ: The PannerNode.orientationZ you want the PannerNode to have (the default is 0.)  refDistance: The PannerNode.refDistance you want the PannerNode to have. The default is 1, and negative values are not allowed.  maxDistance: The PannerNode.maxDistance you want the PannerNode to have. The default is 10000, and non-positive values are not allowed.  rollOffFactor: The PannerNode.rollOffFactor you want the PannerNode to have. The default is 1, and negative values are not allowed.  coneInnerAngle: The PannerNode.coneInnerAngle you want the PannerNode to have (the default is 360.)  coneOuterAngle: The PannerNode.coneOuterAngle you want the PannerNode to have (the default is 360.)  coneOuterGain: The PannerNode.coneOuterGain you want the PannerNode to have. The default is 0, and its value can be in the range 0–1.",
                "name": "options Optional"
            },
            {
                "descr": "The refDistance, maxDistance, or rolloffFactor properties have been given a value that is outside the accepted range.",
                "name": "RangeError"
            },
            {
                "descr": "The coneOuterGain property has been given a value outside the accepted range (0–1).",
                "name": "InvalidStateError"
            }
        ],
        "path": "dom/pannernode/pannernode",
        "syntax": "var myPanner = new PannerNode(context, options);",
        "type": "Audio"
    },
    "PannerNode.distanceModel": {
        "descr": "The distanceModel property of the PannerNode interface is an enumerated value determining which algorithm to use to reduce the volume of the audio source as it moves away from the listener.",
        "name": "PannerNode.distanceModel",
        "params": [],
        "path": "dom/pannernode/distancemodel",
        "syntax": "var audioCtx = new AudioContext();\n or  var panner = audioCtx.createPanner();\n or  panner.distanceModel = 'inverse';);",
        "type": "Audio"
    },
    "PannerNode.maxDistance": {
        "descr": "The maxDistance property of the PannerNode interface is a double value representing the maximum distance between the audio source and the listener, after which the volume is not reduced any further. This value is used only by the linear distance model.",
        "name": "PannerNode.maxDistance",
        "params": [
            {
                "descr": "The property has been given a value that is outside the accepted range.",
                "name": "RangeError"
            }
        ],
        "path": "dom/pannernode/maxdistance",
        "syntax": "var audioCtx = new AudioContext();\n or  var panner = audioCtx.createPanner();\n or  panner.maxDistance = 10000;);",
        "type": "Audio"
    },
    "PannerNode.orientationX": {
        "descr": "The orientationX property of the PannerNode interface indicates the X (horizontal) component of the direction in which the audio source is facing, in a 3D Cartesian coordinate space.",
        "name": "PannerNode.orientationX",
        "params": [],
        "path": "dom/pannernode/orientationx",
        "syntax": "var orientationX = PannerNode.orientationX; PannerNode.orientationX.value = newOrientationX;  Value An AudioParam whose value is the X component of the direction in which the audio source is facing, in 3D Cartesian coordinate space. Example In this example, we'll demonstrate how changing the orientation parameters of a PannerNode in combination with coneInnerAngle and coneOuterAngle affects volume. To help us visualise how the orientation vector affects, we can use the Right-hand rule:  First, let's start by writing a utility function to figure out our orientation vector. The X and Z components are always at a 90° to each other, so we can use the sine and cosine functions, which are offset by the same amount in radians. However, normally this would mean the PannerNode points to the left of the listener at 0° rotation – since `x = cos(0) = 1` and `z = sin(0) = 0`. It's more useful to offset the angle by -90°, which means the PannerNode",
        "type": "Audio"
    },
    "PannerNode.orientationY": {
        "descr": "The orientationY property of the PannerNode interface indicates the Y (vertical) component of the direction the audio source is facing, in 3D Cartesian coordinate space.",
        "name": "PannerNode.orientationY",
        "params": [],
        "path": "dom/pannernode/orientationy",
        "syntax": "var orientationY = PannerNode.orientationY; PannerNode.orientationY.value = newOrientationY;  Value An AudioParam whose value is the Y component of the direction the audio source is facing, in 3D Cartesian coordinate space. Example In this example, we'll demonstrate how changing the orientation parameters of a PannerNode in combination with coneInnerAngle and coneOuterAngle affects volume. To help us visualise how the orientation vector affects, we can use the Right-hand rule:  First, let's start by writing a utility function to figure out our orientation vector. The X and Z components are always at a 90° to each other, so we can use the sine and cosine functions, which are offset by the same amount in radians. However, normally this would mean the PannerNode points to the left of the listener at 0° rotation – since `x = cos(0) = 1` and `z = sin(0) = 0`. It's more useful to offset the angle by -90°, which means the PannerNode",
        "type": "Audio"
    },
    "PannerNode.orientationZ": {
        "descr": "The orientationZ property of the PannerNode interface indicates the Z (depth) component of the direction the audio source is facing, in 3D Cartesian coordinate space.",
        "name": "PannerNode.orientationZ",
        "params": [],
        "path": "dom/pannernode/orientationz",
        "syntax": "var orientationZ = PannerNode.orientationZ; PannerNode.orientationZ.value = newOrientationZ;  Value An AudioParam whose value is the Z component of the direction the audio source is facing, in 3D Cartesian coordinate space. Example In this example, we'll demonstrate how changing the orientation parameters of a PannerNode in combination with coneInnerAngle and coneOuterAngle affects volume. To help us visualise how the orientation vector affects, we can use the Right-hand rule:  First, let's start by writing a utility function to figure out our orientation vector. The X and Z components are always at a 90° to each other, so we can use the sine and cosine functions, which are offset by the same amount in radians. However, normally this would mean the PannerNode points to the left of the listener at 0° rotation – since `x = cos(0) = 1` and `z = sin(0) = 0`. It's more useful to offset the angle by -90°, which means the PannerNode",
        "type": "Audio"
    },
    "PannerNode.panningModel": {
        "descr": "The panningModel property of the PannerNode interface is an enumerated value determining which spatialisation algorithm to use to position the audio in 3D space.",
        "name": "PannerNode.panningModel",
        "params": [],
        "path": "dom/pannernode/panningmodel",
        "syntax": "var audioCtx = new AudioContext();\n or  var panner = audioCtx.createPanner();\n or  panner.panningModel = 'HRTF';);",
        "type": "Audio"
    },
    "PannerNode.positionX": {
        "descr": "The positionX property of the PannerNode interface specifies the X coordinate of the audio source's position in 3D Cartesian coordinates, corresponding to the horizontal axis (left-right).",
        "name": "PannerNode.positionX",
        "params": [],
        "path": "dom/pannernode/positionx",
        "syntax": "var positionX = PannerNode.positionX; PannerNode.positionX.value = newPositionX;  Value An AudioParam whose value is the X coordinate of the audio source's position, in 3D Cartesian coordinates. The default value is 0. Example The following example starts an oscillator, and pans it to the left after 1 second, to the right after 2 seconds, and back to the center after 3 seconds. const context = new AudioContext();\n or  const osc = new OscillatorNode(context);\n or  const panner = new PannerNode(context);\n or  panner.positionX.setValueAtTime(-1, context.currentTime + 1);\n or  panner.positionX.setValueAtTime(1, context.currentTime + 2);\n or  panner.positionX.setValueAtTime(0, context.currentTime + 3);\n or  osc.connect(panner) .connect(context.destination);\n or  osc.start(0);",
        "type": "Audio"
    },
    "PannerNode.positionY": {
        "descr": "The positionY property of the PannerNode interface specifies the Y coordinate of the audio source's position in 3D Cartesian coordinates, corresponding to the vertical axis (top-bottom). The complete vector is defined by the position of the audio source, given as (positionX, positionY, positionZ), and the orientation of the audio source (that is, the direction in which it's facing), given as (orientationX, orientationY, orientationZ).",
        "name": "PannerNode.positionY",
        "params": [],
        "path": "dom/pannernode/positiony",
        "syntax": "var positionY = PannerNode.positionY; PannerNode.positionY.value = newPositionY;  Value An AudioParam whose value is the Y coordinate of the audio source's position, in 3D Cartesian coordinates. Example The following example starts an oscillator and pans it above the listener after 1 second, below the listener after 2 seconds, and back to the center after 3 seconds. Note that in this case, the change will mainly affect the timbre of the oscillator, as it's a simple mono wave. const context = new AudioContext();\n or  const osc = new OscillatorNode(context);\n or  const panner = new PannerNode(context);\n or  panner.panningModel = 'HRTF'; panner.positionY.setValueAtTime(1, context.currentTime + 1);\n or  panner.positionY.setValueAtTime(-1, context.currentTime + 2);\n or  panner.positionY.setValueAtTime(0, context.currentTime + 3);\n or  osc.connect(panner) .connect(context.destination);\n or  osc.start(0);",
        "type": "Audio"
    },
    "PannerNode.positionZ": {
        "descr": "The positionZ property of the PannerNode interface specifies the Z coordinate of the audio source's position in 3D Cartesian coordinates, corresponding to the depth axis (behind-in front of the listener). The complete vector is defined by the position of the audio source, given as (positionX, positionY, positionZ), and the orientation of the audio source (that is, the direction in which it's facing), given as (orientationX, orientationY, orientationZ).",
        "name": "PannerNode.positionZ",
        "params": [],
        "path": "dom/pannernode/positionz",
        "syntax": "var positionZ = PannerNode.positionZ; PannerNode.positionZ.value = newPositionZ;  Value An AudioParam whose value is the Z coordinate of the audio source's position, in 3D Cartesian coordinates. Example The following example starts an oscillator and moves it in front of the listener after 1 second, behind the listener after 2 seconds, and back to the listener's position after 3 seconds. Note that in this case, the change will mainly affect the timbre and perceived volume of the sound. const context = new AudioContext();\n or  const osc = new OscillatorNode(context);\n or  const panner = new PannerNode(context);\n or  panner.panningModel = 'HRTF'; panner.positionZ.setValueAtTime(1, context.currentTime + 1);\n or  panner.positionZ.setValueAtTime(-1, context.currentTime + 2);\n or  panner.positionZ.setValueAtTime(0, context.currentTime + 3);\n or  osc.connect(panner) .connect(context.destination);\n or  osc.start(0);",
        "type": "Audio"
    },
    "PannerNode.refDistance": {
        "descr": "The refDistance property of the PannerNode interface is a double value representing the reference distance for reducing volume as the audio source moves further from the listener – i.e. the distance at which the volume reduction starts taking effect. This value is used by all distance models.",
        "name": "PannerNode.refDistance",
        "params": [
            {
                "descr": "The property has been given a value that is outside the accepted range.",
                "name": "RangeError"
            }
        ],
        "path": "dom/pannernode/refdistance",
        "syntax": "var audioCtx = new AudioContext();\n or  var panner = audioCtx.createPanner();\n or  panner.refDistance = 1;);",
        "type": "Audio"
    },
    "PannerNode.rolloffFactor": {
        "descr": "The rolloffFactor property of the PannerNode interface is a double value describing how quickly the volume is reduced as the source moves away from the listener. This value is used by all distance models.The rolloffFactor property's default value is 1.",
        "name": "PannerNode.rolloffFactor",
        "params": [
            {
                "descr": "The range is 0 to 1.",
                "name": "\"linear\""
            },
            {
                "descr": "The range is 0 to Infinity.",
                "name": "\"inverse\""
            },
            {
                "descr": "The range is 0 to Infinity.",
                "name": "\"exponential\""
            },
            {
                "descr": "The property has been given a value that is outside the accepted range.",
                "name": "RangeError"
            }
        ],
        "path": "dom/pannernode/rollofffactor",
        "syntax": "var audioCtx = new AudioContext();\n or  var panner = audioCtx.createPanner();\n or  panner.rolloffFactor = 1;);",
        "type": "Audio"
    },
    "PannerNode.setOrientation": {
        "descr": "The setOrientation() method of the PannerNode Interface defines the direction the audio source is playing in.",
        "name": "PannerNode.setOrientation",
        "params": [
            {
                "descr": "The x value of the panner's direction vector in 3D space.",
                "name": "x"
            },
            {
                "descr": "The y value of the panner's direction vector in 3D space.",
                "name": "y"
            },
            {
                "descr": "The z value of the panner's direction vector in 3D space.",
                "name": "z"
            }
        ],
        "path": "dom/pannernode/setorientation",
        "syntax": "var audioCtx = new AudioContext();\n or  var panner = audioCtx.createPanner();\n or  panner.setOrientation(1,0,0);",
        "type": "Audio"
    },
    "PannerNode.setPosition": {
        "descr": "The setPosition() method of the PannerNode Interface defines the position of the audio source relative to the listener (represented by an AudioListener object stored in the AudioContext.listener attribute.) The three parameters x, y and z are unitless and describe the source's position in 3D space using the right-hand Cartesian coordinate system.",
        "name": "PannerNode.setPosition",
        "params": [
            {
                "descr": "The x position of the panner in 3D space.",
                "name": "x"
            },
            {
                "descr": "The y position of the panner in 3D space.",
                "name": "y"
            },
            {
                "descr": "The z position of the panner in 3D space.",
                "name": "z"
            }
        ],
        "path": "dom/pannernode/setposition",
        "syntax": "var audioCtx = new AudioContext();\n or  var panner = audioCtx.createPanner();\n or  panner.setPosition(0,0,0);",
        "type": "Audio"
    },
    "PannerNode.setVelocity": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "PannerNode.setVelocity",
        "params": [
            {
                "descr": "The x value of the panner's velocity vector.",
                "name": "x"
            },
            {
                "descr": "The y value of the panner's velocity vector.",
                "name": "y"
            },
            {
                "descr": "The z value of the panner's velocity vector.",
                "name": "z"
            }
        ],
        "path": "dom/pannernode/setvelocity",
        "syntax": "var audioCtx = new AudioContext();\n or  var panner = audioCtx.createPanner();\n or  panner.setVelocity(0,0,17);",
        "type": "Audio"
    },
    "ParentNode.append": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ParentNode.append",
        "params": [
            {
                "descr": "A set of Node or DOMString objects to insert.",
                "name": "nodes"
            }
        ],
        "path": "dom/parentnode/append",
        "syntax": "[Throws, Unscopable] void ParentNode.append((Node or DOMString)... nodes);",
        "type": "Nodes"
    },
    "ParentNode.childElementCount": {
        "descr": "The ParentNode.childElementCount read-only property returns an unsigned long representing the number of child elements of the given element.",
        "name": "ParentNode.childElementCount",
        "params": [
            {
                "descr": "holds the return value an unsigned long (simply an integer) type.",
                "name": "count"
            },
            {
                "descr": "is an object representing a Document, DocumentFragment or Element.",
                "name": "node"
            }
        ],
        "path": "dom/parentnode/childelementcount",
        "syntax": "var count = node.childElementCount;   count holds the return value an unsigned long (simply an integer) type. node is an object representing a Document",
        "type": "Nodes"
    },
    "ParentNode.children": {
        "descr": "The ParentNode property children is a read-only property that returns a live HTMLCollection which contains all of the child elements of the node upon which it was called.",
        "name": "ParentNode.children",
        "params": [],
        "path": "dom/parentnode/children",
        "syntax": "var children = node.children; Value A HTMLCollection which is a live, ordered collection of the DOM elements which are children of node. You can access the individual child nodes in the collection by using either the item()",
        "type": "Nodes"
    },
    "ParentNode.firstElementChild": {
        "descr": "The ParentNode.firstElementChild read-only property returns the object's first child Element, or null if there are no child elements.",
        "name": "ParentNode.firstElementChild",
        "params": [],
        "path": "dom/parentnode/firstelementchild",
        "syntax": "var element = node.firstElementChild;  Example <ul id=\"foo\"> <li>First (1)</li> <li>Second (2)</li> <li>Third (3)</li> </ul> <script> var foo = document.getElementById('foo');\n or  // yields: First (1) console.log(foo.firstElementChild.textContent);\n or  </script>);",
        "type": "Nodes"
    },
    "ParentNode.lastElementChild": {
        "descr": "The ParentNode.lastElementChild read-only property returns the object's last child Element or null if there are no child elements.",
        "name": "ParentNode.lastElementChild",
        "params": [],
        "path": "dom/parentnode/lastelementchild",
        "syntax": "var element = node.lastElementChild;  Example <ul id=\"foo\"> <li>First (1)</li> <li>Second (2)</li> <li>Third (3)</li> </ul> <script> var foo = document.getElementById('foo');\n or  // yields: Third (3) console.log(foo.lastElementChild.textContent);\n or  </script>);",
        "type": "Nodes"
    },
    "ParentNode.prepend": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ParentNode.prepend",
        "params": [
            {
                "descr": "One or more nodes to insert before the first child node currently in the ParentNode. ",
                "name": "nodesToPrepend"
            }
        ],
        "path": "dom/parentnode/prepend",
        "syntax": "ParentNode.prepend(nodesToPrepend);",
        "type": "Nodes"
    },
    "ParentNode.querySelector": {
        "descr": "Draft This page is not complete.",
        "name": "ParentNode.querySelector",
        "params": [
            {
                "descr": "A DOMString containing one or more selectors to match against. ",
                "name": "selectors"
            },
            {
                "descr": "The syntax of the specified selectors string is not valid.",
                "name": "SyntaxError"
            }
        ],
        "path": "dom/parentnode/queryselector",
        "syntax": "element = parentNode.querySelector(selectors);",
        "type": "Nodes"
    },
    "ParentNode.querySelectorAll": {
        "descr": "The ParentNode mixin defines the querySelectorAll() method as returning a NodeList representing a list of elements matching the specified group of selectors which are descendants of the object on which the method was called.",
        "name": "ParentNode.querySelectorAll",
        "params": [
            {
                "descr": "A DOMString containing one or more selectors to match against. ",
                "name": "selectors"
            },
            {
                "descr": "The syntax of the specified selectors string is not valid.",
                "name": "SyntaxError"
            }
        ],
        "path": "dom/parentnode/queryselectorall",
        "syntax": "elementList = parentNode.querySelectorAll(selectors);",
        "type": "Nodes"
    },
    "PasswordCredential.additionalData": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PasswordCredential.additionalData",
        "params": [],
        "path": "dom/passwordcredential/additionaldata",
        "syntax": "passwordCredential.additionalData = formData formData = passwordCredential.additionalData passwordCredential.additionalData = urlSearchParams ulrSearchParams = passwordCredential.additionalData  Value One of a FormData instance, a URLSearchParams instance, or null. Example The following example creates a FormData object with an appended CSRF token. It then stores the form object in the additionalData parameter, before sending it to server in a call to fetch. //The options object was previously created. navigator.credentials.get(options).then(function(creds) { if (creds.type == 'password') { var form = new FormData();\n or  var csrf_token = document.querySelector('csrf_token').value; form.append('csrf_token', csrf_token);\n or  creds.additionalData = form; fetch('https://www.example.com', { method: 'POST', credentials: creds });\n or  }; });",
        "type": "Credential Management"
    },
    "Path2D.addPath": {
        "descr": "The Path2D.addPath() method of the Canvas 2D API adds to the path the path given by the argument.",
        "name": "Path2D.addPath",
        "params": [
            {
                "descr": "A Path2D path to add.",
                "name": "path"
            },
            {
                "descr": "An SVGMatrix to be used as the transformation matrix for the path that is added.",
                "name": "transform Optional"
            }
        ],
        "path": "dom/path2d/addpath",
        "syntax": "void path.addPath(path [, transform]);",
        "type": "Canvas"
    },
    "Path2D.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Path2D.constructor",
        "params": [
            {
                "descr": "When invoked with another Path2D object, a copy of the path argument is created.",
                "name": "path Optional"
            },
            {
                "descr": "When invoked with a string consisting of SVG path data, a new path is created from that description.",
                "name": "d Optional"
            }
        ],
        "path": "dom/path2d/path2d",
        "syntax": "new Path2D();\n or  new Path2D(path);\n or  new Path2D(d);",
        "type": "Canvas"
    },
    "Payment Request API: Using the Payment Request API": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "Payment Request API: Using the Payment Request API",
        "params": [],
        "path": "dom/payment_request_api/using_the_payment_request_api",
        "syntax": "PaymentRequest object — using the PaymentRequest()",
        "type": "Miscellaneous"
    },
    "PaymentAddress.addressLine": {
        "descr": "The addressLine read-only property of the PaymentAddress interface is an array of DOMString objects, each specifying a line of the address that is not covered by one of the other properties of PaymentAddress. These lines may include the street name, house number, apartment number, rural delivery route, descriptive instructions, or post office box.",
        "name": "PaymentAddress.addressLine",
        "params": [],
        "path": "dom/paymentaddress/addressline",
        "syntax": "var paymentAddressLines = PaymentAddress.addressLine; Value An array of DOMString objects, each containing one line of the address. For example, the addressLine array for the Mozilla Space in London would have the following entries:  Example showing addressLine entries for an address in London   Index addressLine[] value     0 Metal Box Factory   1 Suite 441, 4th floor   2 30 Great Guildford Street    These, combined with additional values for other properties of the PaymentAddress, would represent the full address, which is: Mozilla Metal Box Factory Suite 441, 4th floor 30 Great Guildford Street London SE1 0HS United Kingdom Specifications    Specification Status Comment   Payment Request APIThe definition of 'PaymentAddress.addressLine' in that specification. Candidate Recommendation Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   61Disabled    61Disabled   Disabled From version 61: this feature is behind the #web-payments preference (needs to be set to Enabled). To change preferences in Chrome, visit chrome://flags.    15  ?   No  No  ?        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   No  53Disabled    53Disabled   Disabled From version 53: this feature is behind the #web-payments",
        "type": "Payments"
    },
    "PaymentAddress.city": {
        "descr": "The city read-only property of the PaymentAddress interface returns a string containing the city or town portion of the address.",
        "name": "PaymentAddress.city",
        "params": [],
        "path": "dom/paymentaddress/city",
        "syntax": "var paymentCity = PaymentAddress.city; Value A DOMString indicating the city or town portion of the address described by the PaymentAddress object. Specifications    Specification Status Comment   Payment Request APIThe definition of 'PaymentAddress.city' in that specification. Candidate Recommendation Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   61Disabled    61Disabled   Disabled From version 61: this feature is behind the #web-payments preference (needs to be set to Enabled). To change preferences in Chrome, visit chrome://flags.    15  ?   No  No  ?        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   No  53Disabled    53Disabled   Disabled From version 53: this feature is behind the #web-payments",
        "type": "Payments"
    },
    "PaymentAddress.country": {
        "descr": "The country read-only property of the PaymentAddress interface is a string identifying the address's country using the ISO 3166-1 alpha-2 standard. The string is always in its canonical upper-case form.",
        "name": "PaymentAddress.country",
        "params": [],
        "path": "dom/paymentaddress/country",
        "syntax": "var paymentCountry = PaymentAddress.country; Value A DOMString which contains the ISO3166-1 alpha-2 code identifying the country in which the address is located, or an empty string if no country is available, which frequently can be assumed to mean \"same country as the site owner.\" Usage notes If the payment handler validates the address and determines that the value of country is invalid, a call to PaymentRequestUpdateEvent.updateWith()",
        "type": "Payments"
    },
    "PaymentAddress.dependentLocality": {
        "descr": "The read-only dependentLocality property of the PaymentAddress interface is a string containing a sublocality designation within a city, such as a neighborhood, borough, district, or, in the United Kingdom, a dependent locality. Also known as a post town.",
        "name": "PaymentAddress.dependentLocality",
        "params": [],
        "path": "dom/paymentaddress/dependentlocality",
        "syntax": "var paymentDependentLocality = PaymentAddress.dependentLocality; Value A DOMString indicating the sublocality portion of the address. This may be an empty string if no sublocality is available or required. It's used to provide disambiguation when a city may include areas that duplicate street names A sublocality is an area within a city, such as a neighborhood, borough, or district. In the United Kingdom, this is used to indicate the post town in the United Kingdom (known officially by the Royal Mail as the dependent locality). This is a disambiguating feature of addresses in places where a city may have areas that duplicate street names.",
        "type": "Payments"
    },
    "PaymentAddress.organization": {
        "descr": "The organization read-only property of the PaymentAddress interface returns a string containing the name of the organization, firm, company, or institution at the address.",
        "name": "PaymentAddress.organization",
        "params": [],
        "path": "dom/paymentaddress/organization",
        "syntax": "var paymentOrganization = PaymentAddress.organization; Value A DOMString whose value is the name of the organization or company located at the address described by the PaymentAddress object. This should be the name of the organization that is to receive the shipment for shipping addresses, or which is repsonsible for payment for payment addresses. Specifications    Specification Status Comment   Payment Request APIThe definition of 'PaymentAddress.organization' in that specification. Candidate Recommendation Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   61Disabled    61Disabled   Disabled From version 61: this feature is behind the #web-payments preference (needs to be set to Enabled). To change preferences in Chrome, visit chrome://flags.    15  ?   No  No  ?        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   No  53Disabled    53Disabled   Disabled From version 53: this feature is behind the #web-payments",
        "type": "Payments"
    },
    "PaymentAddress.phone": {
        "descr": "The read-only phone property of the PaymentAddress interface returns a string containing the telephone number of the recipient or contact person.",
        "name": "PaymentAddress.phone",
        "params": [],
        "path": "dom/paymentaddress/phone",
        "syntax": "var paymentPhone = PaymentAddress.phone; Value A DOMString containing the telephone number for the recipient of the shipment or of the responsible party for payment. If no phone number is available, this value is an empty string. Specifications    Specification Status Comment   Payment Request APIThe definition of 'PaymentAddress.phone' in that specification. Candidate Recommendation Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   61Disabled    61Disabled   Disabled From version 61: this feature is behind the #web-payments preference (needs to be set to Enabled). To change preferences in Chrome, visit chrome://flags.    15  ?   No  No  ?        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   No  53Disabled    53Disabled   Disabled From version 53: this feature is behind the #web-payments",
        "type": "Payments"
    },
    "PaymentAddress.postalCode": {
        "descr": "The postalCode read-only property of the PaymentAddress interface returns a string containing a code used by a jurisdiction for mail routing, for example, the ZIP Code in the United States or the Postal Index Number (PIN code) in India.",
        "name": "PaymentAddress.postalCode",
        "params": [],
        "path": "dom/paymentaddress/postalcode",
        "syntax": "var paymentPostalCode = PaymentAddress.postalCode; Value A DOMString which contains the postal code portion of the address. A postal code is a string (either numeric or alphanumeric) which is used by a postal service to optimize mail routing and delivery.",
        "type": "Payments"
    },
    "PaymentAddress.recipient": {
        "descr": "The read-only recipient property of the PaymentAddress interface returns a string containing the name of the recipient, purchaser, or contact person at the payment address.",
        "name": "PaymentAddress.recipient",
        "params": [],
        "path": "dom/paymentaddress/recipient",
        "syntax": "var paymentRecipient = PaymentAddress.recipient; Value A DOMString giving the name of the person receiving or paying for the purchase, or the name of a contact person in other contexts. If no name is available, this string is empty. Specifications    Specification Status Comment   Payment Request APIThe definition of 'PaymentAddress.recipient' in that specification. Candidate Recommendation Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   61Disabled    61Disabled   Disabled From version 61: this feature is behind the #web-payments preference (needs to be set to Enabled). To change preferences in Chrome, visit chrome://flags.    15  ?   No  No  ?        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   No  53Disabled    53Disabled   Disabled From version 53: this feature is behind the #web-payments",
        "type": "Payments"
    },
    "PaymentAddress.region": {
        "descr": "The read-only region property of the PaymentAddress interface returns a string containing the top-level administrative subdivision of the country in which the address is located. For example, this may be a state, province, oblast, or prefecture.",
        "name": "PaymentAddress.region",
        "params": [],
        "path": "dom/paymentaddress/region",
        "syntax": "var paymentRegion = PaymentAddress.region; Value A DOMString specifying the top-level administrative subdivision within the country in which the address is located. This region has different names in different countries, such as: state, province, oblast, prefecture, or county. Usage notes In some countries, like Belgium, it's uncommon for people to provide a region as part of their postal address. In such cases, the browser returns an empty string as the value of region. However, the address should still be acceptable to use for its intended purpose (e.g., to ship a product). However, always verify addresses to make sure what the user provides is usable.",
        "type": "Payments"
    },
    "PaymentAddress.regionCode": {
        "descr": "The regionCode read-only attribute of the PaymentAddress interface returns a one-, two-, or three-alphanumeric code (DOMString) representing the region of the address (e.g., \"CA\" for California, or \"11\" for Lisbon, Portugal).",
        "name": "PaymentAddress.regionCode",
        "params": [],
        "path": "dom/paymentaddress/regioncode",
        "syntax": "var regionCode = paymentAddress.regionCode; Value A DOMString indicating the one to three character alphanumeric code representing the region portion of the address. This should correspond to region, but should be the ISO 3166--2 standard's region code. The string is empty if the region code couldn't be determined, isn't needed for the address's country, or was not provided. Specifications    Specification Status Comment   Payment Request APIThe definition of 'PaymentAddress.regionCode' in that specification. Candidate Recommendation Initial definition.    Browser compatibility No compatibility data found. Please contribute data for \"api.PaymentAddress.regionCode\" (depth: 1) to the MDN compatibility data repository.",
        "type": "Payments"
    },
    "PaymentAddress.sortingCode": {
        "descr": "The sortingCode read-only property of the PaymentAddress interface returns a string containing a postal sorting code such as is used in France.",
        "name": "PaymentAddress.sortingCode",
        "params": [],
        "path": "dom/paymentaddress/sortingcode",
        "syntax": "var sortingCode = PaymentAddress.sortingCode; Value A DOMString containing the sorting code portion of the address. Specifications    Specification Status Comment   Payment Request APIThe definition of 'PaymentAddress.sortingCode' in that specification. Candidate Recommendation Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   61Disabled    61Disabled   Disabled From version 61: this feature is behind the #web-payments preference (needs to be set to Enabled). To change preferences in Chrome, visit chrome://flags.    15  ?   No  No  ?        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   No  53Disabled    53Disabled   Disabled From version 53: this feature is behind the #web-payments",
        "type": "Payments"
    },
    "PaymentAddress.toJSON": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PaymentAddress.toJSON",
        "params": [],
        "path": "dom/paymentaddress/tojson",
        "syntax": "var json = PaymentAddress.toJSON()",
        "type": "Payments"
    },
    "PaymentCurrencyAmount.currency": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "PaymentCurrencyAmount.currency",
        "params": [],
        "path": "dom/paymentcurrencyamount/currency",
        "syntax": "currency = paymentCurrencyAmount.currency; Value A DOMString specifying the canonical, three-character currency identification code defined by the ISO 4217 standard. This is the currency in which the payment's value is given. All currency values must include the currency system in this property. Example This example represents the price of $42.95 in US dollars. let itemPrice = { currency: \"USD\", value: \"42.95\" };  Specifications    Specification Status Comment   Payment Request APIThe definition of 'PaymentCurrencyAmount.currency' in that specification. Candidate Recommendation      Browser compatibility No compatibility data found. Please contribute data for \"api.PaymentCurrencySystem.currency\" (depth: 1) to the MDN compatibility data repository.",
        "type": "Payments"
    },
    "PaymentCurrencyAmount.currencySystem": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "PaymentCurrencyAmount.currencySystem",
        "params": [],
        "path": "dom/paymentcurrencyamount/currencysystem",
        "syntax": "currencySystem = paymentCurrencyAmount.currencySystem; Value A DOMString which specifies the currency standard used to specify the currency in which the payment value is represented. The default, urn:iso:std:iso:4217, indicates the ISO 4217 standard. This obsolete property was removed in the May 3, 2018 update of the Payment Request API specification. Specifications    Specification Status Comment   Payment Request APIThe definition of 'PaymentCurrencyAmount' in that specification. Candidate Recommendation No longer part of the specification    Payment Request API The definition of 'PaymentCurrencyAmount.currencySystem' in that specification.  Candidate Recommendation The March 20, 2018 version of the specification; the last one to include this property    Browser compatibility No compatibility data found. Please contribute data for \"api.PaymentCurrencySystem.currencySystem\" (depth: 1) to the MDN compatibility data repository.",
        "type": "Payments"
    },
    "PaymentCurrencyAmount.value": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "PaymentCurrencyAmount.value",
        "params": [],
        "path": "dom/paymentcurrencyamount/value",
        "syntax": "value = paymentCurrencyAmount.value; Value A DOMString indicating the numeric value of the payment. This must be a valid decimal number, with an optional leading minus sign (\"-\"), then one or more decimal digits 0 through 9, optionally with a decimal point (\".\") with at least one digit following it to represent fractional units. There must not be any leading or trailing whitespace in the string.",
        "type": "Payments"
    },
    "PaymentDetailsUpdate.shippingAddressErrors": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "PaymentDetailsUpdate.shippingAddressErrors",
        "params": [],
        "path": "dom/paymentdetailsupdate/shippingaddresserrors",
        "syntax": "var addressErrors = PaymentDetailsUpdate.shippingAddressErrors; Value An AddressErrors object, which contains DOMStrings describing errors in the properties of a PaymentAddress. For each property in PaymentAddress, a property by the same name is found in shippingAddressErrors if and only if a validation error occurred for that property. In that case, the property in shippingAddressErrors is a string describing the validation error, ideally including suggestions about fixing the error. Specifications    Specification Status Comment   Payment Request APIThe definition of 'PaymentDetailsUpdate.shippingAddressErrors' in that specification. Candidate Recommendation Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   61  Yes  55Disabled    55Disabled   Disabled From version 55: this feature is behind the dom.payments.request.enabled preference (needs to be set to true). To change preferences in Firefox, visit about:config.    No  No  ?        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   No  60  Yes  55Disabled    55Disabled   Disabled From version 55: this feature is behind the dom.payments.request.enabled",
        "type": "Payments"
    },
    "PaymentMethodChangeEvent.constructor": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "PaymentMethodChangeEvent.constructor",
        "params": [
            {
                "descr": "A DOMString which must contain the string paymentmethodchange, the name of the only type of event which uses the PaymentMethodChangeEvent interface.",
                "name": "type"
            },
            {
                "descr": "An optional PaymentMethodChangeEventInit dictionary which may contain zero or more of the following properties:   methodName Optional  A DOMString containing the payment method identifier for the payment handler being used. This is an empty string by default.",
                "name": "options Optional"
            },
            {
                "descr": "An object providing payment method-specific information describing the changes made to the payment, or null if there is no additional information available or required. ",
                "name": "methodDetails Optional"
            }
        ],
        "path": "dom/paymentmethodchangeevent/paymentmethodchangeevent",
        "syntax": "paymentMethodChangeEvent = new PaymentMethodChangeEvent(type, options);",
        "type": "Payments"
    },
    "PaymentMethodChangeEvent.methodDetails": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "PaymentMethodChangeEvent.methodDetails",
        "params": [],
        "path": "dom/paymentmethodchangeevent/methoddetails",
        "syntax": "details = paymentMethodChangeEvent.methodName;  Value An object containing any data needed to describe the changes made to the payment method. The contents vary depending on the actual payment method chosen, so you will need to refer to the methodName property first, then inerpret the methodDetails after that. The default value is null, indicating that no additional details are available. Example This example uses the paymentmethodchange event to watch for changes to the payment method selected for Apple Pay, in order to compute a discount if the user chooses to use a Visa card as their payment method. request.onpaymentmethodchange = function(ev) { const { type: cardType } = ev.methodDetails; const newStuff = {}; if (ev.methodName === \"https://apple.com/apple-pay\") { switch (cardType) { case \"visa\": // do Apple Pay specific handling for Visa card... // methodDetails contains the card information const result = calculateDiscount(ev.methodDetails);\n or  Object.assign(newStuff, result);\n or  break; } } // finally... ev.updateWith(newStuff);\n or  }; const response = await request.show();",
        "type": "Payments"
    },
    "PaymentMethodChangeEvent.methodName": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "PaymentMethodChangeEvent.methodName",
        "params": [],
        "path": "dom/paymentmethodchangeevent/methodname",
        "syntax": "var methodName = paymentMethodChangeEvent.methodName;  Value A DOMString which uniquely identifies the currently-selected payment handler. This may be a string chosen from the list of standardized payment method identifiers, or a URL used by the payment processing service. See Payment method identifiers in Payment Request API for more information. The default value is the empty string, \"\". Example This example uses the paymentmethodchange event to watch for changes to the payment method selected for Apple Pay, in order to compute a discount if the user chooses to use a Visa card as their payment method. request.onpaymentmethodchange = function(ev) { const { type: cardType } = ev.methodDetails; const newStuff = {}; if (ev.methodName === \"https://apple.com/apple-pay\") { switch (cardType) { case \"visa\": // do Apple Pay specific handling for Visa card... // methodDetails contains the card information const result = calculateDiscount(ev.methodDetails);\n or  Object.assign(newStuff, result);\n or  break; } } // finally... ev.updateWith(newStuff);\n or  }; const response = await request.show();",
        "type": "Payments"
    },
    "PaymentRequest.abort": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "PaymentRequest.abort",
        "params": [],
        "path": "dom/paymentrequest/abort",
        "syntax": "PaymentRequest.abort();",
        "type": "Payments"
    },
    "PaymentRequest.canMakePayment": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "PaymentRequest.canMakePayment",
        "params": [],
        "path": "dom/paymentrequest/canmakepayment",
        "syntax": "PaymentRequest.canMakePayment() .then( boolean => { ... }) .catch( error => { ... })",
        "type": "Payments"
    },
    "PaymentRequest.constructor": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "PaymentRequest.constructor",
        "params": [
            {
                "descr": "Contains an array of identifiers for the payment methods the merchant web site accepts and any associated payment method specific data. ",
                "name": "methodData"
            },
            {
                "descr": "A JSON-serializable object that provides optional information that might be needed by the supported payment methods. ",
                "name": "data"
            },
            {
                "descr": "Provides information about the requested transaction. ",
                "name": "details"
            },
            {
                "descr": "A free-form identifier for this payment request. ",
                "name": "id Optional"
            },
            {
                "descr": "An array of optional line items for the payment request that the user agent may display, such as product details, tax, and shipping.",
                "name": "displayItems"
            },
            {
                "descr": "The shipping options the user may choose from. ",
                "name": "shippingOptions"
            },
            {
                "descr": "Modifiers for specific payment methods; for example, adjusting the total amount based on the payment method. ",
                "name": "modifiers"
            },
            {
                "descr": "A JSON-serializable object that provides optional information that might be needed by the supported payment methods. ",
                "name": "data"
            },
            {
                "descr": "A total amount for the payment request that overrides value in details.total. ",
                "name": "total"
            },
            {
                "descr": "Lets you set options that control the behavior of the user agent. ",
                "name": "options Optional"
            },
            {
                "descr": "A Boolean indicating whether the user agent should collect the payer's name and submit it with the payment request. ",
                "name": "requestPayerName"
            },
            {
                "descr": "A Boolean indicating whether the user agent should collect the payer's email address and submit it with the payment request. ",
                "name": "requestPayerEmail"
            },
            {
                "descr": "A Boolean indicating whether the user agent should collect the payer's phone number and submit it with the payment request. ",
                "name": "requestPayerPhone"
            },
            {
                "descr": "A Boolean indicating whether the user agent should collect the payer's shipping address and submit it with the payment request. ",
                "name": "requestShipping"
            },
            {
                "descr": "Lets you specify how the user interface refers to shipping when the word 'shipping' isn't appropriate for your use case. ",
                "name": "shippingType"
            }
        ],
        "path": "dom/paymentrequest/paymentrequest",
        "syntax": "var paymentRequest = new PaymentRequest(methodData, details, [options]);",
        "type": "Payments"
    },
    "PaymentRequest.id": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PaymentRequest.id",
        "params": [],
        "path": "dom/paymentrequest/id",
        "syntax": "var id = paymentRequest.id Value A DOMString. Specifications    Specification Status Comment   Payment Request APIThe definition of 'id' in that specification. Candidate Recommendation Initial definition.    Browser CompatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  60Disabled    60Disabled   Disabled From version 60: this feature is behind the #web-payments preference (needs to be set to Enabled). To change preferences in Chrome, visit chrome://flags.    ?   ?   ?   ?   ?        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support  ?   60Disabled    60Disabled   Disabled From version 60: this feature is behind the #web-payments",
        "type": "Payments"
    },
    "PaymentRequest.onmerchantvalidation": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "PaymentRequest.onmerchantvalidation",
        "params": [],
        "path": "dom/paymentrequest/onmerchantvalidation",
        "syntax": "paymentRequest.onmerchantvalidation = eventHandlerFunction; Value An event handler function which is to be called whenever the merchantvalidation event is fired at the PaymentRequest, indicating that the payment handler requires the merchant to validate themselves as allowed to use this payment handler. Examples An example merchant validation is shown below: request.onmerchantvalidation = ev => { ev.complete(async () => { // get validation data, and complete validation; return await fetch(ev.validationURL).then(r => r.text());\n or  }) }; const response = await request.show();",
        "type": "Payments"
    },
    "PaymentRequest.onpaymentmethodchange": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "PaymentRequest.onpaymentmethodchange",
        "params": [],
        "path": "dom/paymentrequest/onpaymentmethodchange",
        "syntax": "PaymentRequest.addEventListener('paymentmethodchange', paymentMethodChangeEvent => { ... });\n or  PaymentRequest.onpaymentmethodchange = function(paymentMethodChangeEvent) { ... };);",
        "type": "Payments"
    },
    "PaymentRequest.onshippingaddresschange": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "PaymentRequest.onshippingaddresschange",
        "params": [],
        "path": "dom/paymentrequest/onshippingaddresschange",
        "syntax": "PaymentRequest.addEventListener('shippingaddresschange', shippingAddressChangeEvent => { ... });\n or  PaymentRequest.onshippingaddresschange = function(shippingAddressChangeEvent) { ... };);",
        "type": "Payments"
    },
    "PaymentRequest.onshippingoptionchange": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "PaymentRequest.onshippingoptionchange",
        "params": [],
        "path": "dom/paymentrequest/onshippingoptionchange",
        "syntax": "PaymentRequest.addEventListener('shippingoptionchange', shippingOptionChangeEvent => { ... });\n or  PaymentRequest.onshippingoptionchange = function(shippingOptionChangeEvent) { ... };);",
        "type": "Payments"
    },
    "PaymentRequest.shippingAddress": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "PaymentRequest.shippingAddress",
        "params": [],
        "path": "dom/paymentrequest/shippingaddress",
        "syntax": "var paymentAddress = PaymentRequest.shippingAddress; Example Generally, the user agent will fill the shippingAddress property value. You can trigger this by setting PaymentOptions.requestShipping to true when calling the PaymentRequest constructor. In the example below, the cost of shipping varies by geography. When the PaymentRequest.onshippingaddresschange is called, updateDetails()",
        "type": "Payments"
    },
    "PaymentRequest.shippingOption": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "PaymentRequest.shippingOption",
        "params": [],
        "path": "dom/paymentrequest/shippingoption",
        "syntax": "// Returns the id of the selected PaymentShippingOption var shippingOption = request.shippingOption;  Example In the example below, the PaymentRequest.onshippingoptionchange and the PaymentRequest.onshippingaoptionchange events are dispatched. In each calls to updateDetails()",
        "type": "Payments"
    },
    "PaymentRequest.shippingType": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PaymentRequest.shippingType",
        "params": [],
        "path": "dom/paymentrequest/shippingtype",
        "syntax": "var shippingType = paymentRequest.shippingType Value One of \"shipping\", \"delivery\", \"pickup\", or null. Specifications    Specification Status Comment   Payment Request APIThe definition of 'shippingType' in that specification. Candidate Recommendation Initial definition.    Browser CompatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   61Disabled    61Disabled   Disabled From version 61: this feature is behind the #web-payments preference (needs to be set to Enabled). To change preferences in Chrome, visit chrome://flags.    15  55Disabled    55Disabled   Disabled From version 55: this feature is behind the dom.payments.request.enabled",
        "type": "Payments"
    },
    "PaymentRequest.show": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "PaymentRequest.show",
        "params": [
            {
                "descr": "An optional Promise that you can provide if your architecture requires that the payment request's details need to be updated between instantiating the payment interface and the user beginning to interact with it. The promise should resolve with a PaymentDetailsUpdate object containing the updated information.",
                "name": "detailsPromise Optional"
            },
            {
                "descr": "The returned promise rejects with an AbortError if the user agent is already showing a payment panel. ",
                "name": "AbortError"
            },
            {
                "descr": "The promise rejects with an InvalidStateError if the same payment has already been shown for this request (its state is interactive because it is being shown already).",
                "name": "InvalidStateError"
            },
            {
                "descr": "The promise rejects with a NotSupportedError if the user agent does not support the payment methods specified when the PaymentRequest constructor was called.",
                "name": "NotSupportedError"
            },
            {
                "descr": "The promise rejects with a SecurityError if the call to show() was not in response to a user action, such as a click or keyup event. ",
                "name": "SecurityError"
            }
        ],
        "path": "dom/paymentrequest/show",
        "syntax": "paymentPromise = paymentRequest.show(detailsPromise);",
        "type": "Payments"
    },
    "PaymentRequestEvent.instrumentKey": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PaymentRequestEvent.instrumentKey",
        "params": [],
        "path": "dom/paymentrequestevent/instrumentkey",
        "syntax": "var instrumentKey = paymentRequestEvent.instrumentKey Value A PaymentInstrument object. Specifications    Specification Status Comment   Payment Handler APIThe definition of 'instrumentKey' in that specification. Working Draft Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   60Disabled    60Disabled   Disabled From version 60: this feature is behind the #service-worker-payment-apps preference (needs to be set to Enabled). To change preferences in Chrome, visit chrome://flags.    ?   ?   ?   No  ?        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   No  60Disabled    60Disabled   Disabled From version 60: this feature is behind the #service-worker-payment-apps",
        "type": "Payments"
    },
    "PaymentRequestEvent.methodData": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PaymentRequestEvent.methodData",
        "params": [],
        "path": "dom/paymentrequestevent/methoddata",
        "syntax": "var methodData[] = paymentRequestEvent.methodData Value An array of PaymentMethodData objects. Specifications    Specification Status Comment   Payment Handler APIThe definition of 'methodData' in that specification. Working Draft Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   60Disabled    60Disabled   Disabled From version 60: this feature is behind the #service-worker-payment-apps preference (needs to be set to Enabled). To change preferences in Chrome, visit chrome://flags.    ?   ?   ?   No  ?        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   No  60Disabled    60Disabled   Disabled From version 60: this feature is behind the #service-worker-payment-apps",
        "type": "Payments"
    },
    "PaymentRequestEvent.modifiers": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PaymentRequestEvent.modifiers",
        "params": [],
        "path": "dom/paymentrequestevent/modifiers",
        "syntax": "var modifiers[] = paymentDetailsEvent.modifiers Value An array of modifier objects. Specifications    Specification Status Comment   Payment Handler APIThe definition of 'modifiers' in that specification. Working Draft Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   60Disabled    60Disabled   Disabled From version 60: this feature is behind the #service-worker-payment-apps preference (needs to be set to Enabled). To change preferences in Chrome, visit chrome://flags.    ?   ?   ?   No  ?        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   No  60Disabled    60Disabled   Disabled From version 60: this feature is behind the #service-worker-payment-apps",
        "type": "Payments"
    },
    "PaymentRequestEvent.openWindow": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PaymentRequestEvent.openWindow",
        "params": [
            {
                "descr": "The URL to open in the new window. ",
                "name": "url"
            }
        ],
        "path": "dom/paymentrequestevent/openwindow",
        "syntax": "var aPromise = paymentRequestEvent.openWindow(url)",
        "type": "Payments"
    },
    "PaymentRequestEvent.paymentRequestId": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PaymentRequestEvent.paymentRequestId",
        "params": [],
        "path": "dom/paymentrequestevent/paymentrequestid",
        "syntax": "var id = paymentRequestEvent.paymentRequestId Value A DOMString containg the ID. Specifications    Specification Status Comment   Payment Handler APIThe definition of 'paymentRequestId' in that specification. Working Draft Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   60Disabled    60Disabled   Disabled From version 60: this feature is behind the #service-worker-payment-apps preference (needs to be set to Enabled). To change preferences in Chrome, visit chrome://flags.    ?   ?   ?   No  ?        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   No  60Disabled    60Disabled   Disabled From version 60: this feature is behind the #service-worker-payment-apps",
        "type": "Payments"
    },
    "PaymentRequestEvent.paymentRequestOrigin": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PaymentRequestEvent.paymentRequestOrigin",
        "params": [],
        "path": "dom/paymentrequestevent/paymentrequestorigin",
        "syntax": "var aUsvString = paymentRequestEvent.paymentRequestOrigin Value A USVString. Specifications    Specification Status Comment   Payment Handler APIThe definition of 'paymentRequestOrigin' in that specification. Working Draft Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   60Disabled    60Disabled   Disabled From version 60: this feature is behind the #service-worker-payment-apps preference (needs to be set to Enabled). To change preferences in Chrome, visit chrome://flags.    ?   ?   ?   No  ?        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   No  60Disabled    60Disabled   Disabled From version 60: this feature is behind the #service-worker-payment-apps",
        "type": "Payments"
    },
    "PaymentRequestEvent.respondWith": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PaymentRequestEvent.respondWith",
        "params": [
            {
                "descr": "A Promise that resolves with a PaymentResponse object.",
                "name": "promise"
            }
        ],
        "path": "dom/paymentrequestevent/respondwith",
        "syntax": "paymentRequestEvent.respondWith( // Promise that resolves with a PaymentResponse. )",
        "type": "Payments"
    },
    "PaymentRequestEvent.topLevelOrigin": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PaymentRequestEvent.topLevelOrigin",
        "params": [],
        "path": "dom/paymentrequestevent/toplevelorigin",
        "syntax": "var aUsvString = paymentRequestEvent.topLevelOrigin Value A USVString Specifications    Specification Status Comment   Payment Handler APIThe definition of 'topLevelOrigin' in that specification. Working Draft Initial definition.    Browser compatibility No compatibility data found. Please contribute data for \"api.PaymentRequestEvent.topLevelOrigin\" (depth: 1) to the MDN compatibility data repository.",
        "type": "Payments"
    },
    "PaymentRequestEvent.total": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PaymentRequestEvent.total",
        "params": [],
        "path": "dom/paymentrequestevent/total",
        "syntax": "var paymentCurrencyAmount = paymentRequestEvent.total Value A PaymentCurrencyAmount object. Specifications    Specification Status Comment   Payment Handler APIThe definition of 'total' in that specification. Working Draft Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   60Disabled    60Disabled   Disabled From version 60: this feature is behind the #service-worker-payment-apps preference (needs to be set to Enabled). To change preferences in Chrome, visit chrome://flags.    ?   ?   ?   No  ?        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   No  60Disabled    60Disabled   Disabled From version 60: this feature is behind the #service-worker-payment-apps",
        "type": "Payments"
    },
    "PaymentRequestUpdateEvent.constructor": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "PaymentRequestUpdateEvent.constructor",
        "params": [],
        "path": "dom/paymentrequestupdateevent/paymentrequestupdateevent",
        "syntax": "var paymentRequestUpdateEvent = new PaymentRequestUpdateEvent()",
        "type": "Payments"
    },
    "PaymentRequestUpdateEvent.updateWith": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "PaymentRequestUpdateEvent.updateWith",
        "params": [
            {
                "descr": "A PaymentDetailsUpdate object specifying the changes applied to the payment request:   displayItems Optional  An array of PaymentItem objects, each describing one line item for the payment request. ",
                "name": "details"
            },
            {
                "descr": "A DOMString specifying an error message to present to the user. ",
                "name": "error Optional"
            },
            {
                "descr": "An array of PaymentDetailsModifier objects, each describing a modifier for particular payment method identifiers. ",
                "name": "modifiers Optional"
            },
            {
                "descr": "An AddressErrors object which includes an error message for each property of the shipping address that could not be validated.",
                "name": "shippingAddressErrors Optional"
            },
            {
                "descr": "An array of PaymentShippingOption objects, each describing one available shipping option from which the user may choose.",
                "name": "shippingOptions Optional"
            },
            {
                "descr": "A PaymentItem providing an updated total for the payment. ",
                "name": "total Optional"
            }
        ],
        "path": "dom/paymentrequestupdateevent/updatewith",
        "syntax": "paymentRequestUpdateEvent.updateWith(details);",
        "type": "Payments"
    },
    "PaymentResponse.complete": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "PaymentResponse.complete",
        "params": [
            {
                "descr": "A DOMString indicating the state of the payment operation upon completion. ",
                "name": "result Optional"
            },
            {
                "descr": "The payment was not successfully processed. ",
                "name": "fail"
            },
            {
                "descr": "The success or failure status of the transaction is unknown or irrelevant, and the user agent should not present any notification, even if it normally would. ",
                "name": "unknown"
            },
            {
                "descr": "The document in which the payment request is taking place became inactive while the user interface was shown.",
                "name": "AbortError"
            },
            {
                "descr": "The payment has already completed, or complete() was called while a request to retry the payment is pending. ",
                "name": "InvalidStateError"
            }
        ],
        "path": "dom/paymentresponse/complete",
        "syntax": "completePromise = paymentRequest.complete(result);",
        "type": "Payments"
    },
    "PaymentResponse.details": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "PaymentResponse.details",
        "params": [],
        "path": "dom/paymentresponse/details",
        "syntax": "var detailsObject = PaymentResponse.details; Example The following example extracts the details from the PaymentResponse object to the promise returned from PaymentRequest.show()",
        "type": "Payments"
    },
    "PaymentResponse.methodName": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "PaymentResponse.methodName",
        "params": [],
        "path": "dom/paymentresponse/methodname",
        "syntax": "var methodName = PaymentResponse.methodName; Value A DOMString uniquely identifying the payment handler being used to process the payment. This may be either a standardized identifier, or a URL used by the payment processor to handle payments. See Merchant validation in Payment processing concepts for more information. Example The following example extracts the method name from the PaymentResponse object to the promise returned from PaymentRequest.show()",
        "type": "Payments"
    },
    "PaymentResponse.onpayerdetailchange": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "PaymentResponse.onpayerdetailchange",
        "params": [],
        "path": "dom/paymentresponse/onpayerdetailchange",
        "syntax": "paymentResponse.onpayerdetailchange = eventHandlerFunction;  Value An event handler function which is called to handle the payerdetailchange event when the user makes changes to their personal information while editing a payment request form. Example In the example below, onpayerdetailchange is used to set up a listener for the payerdetailchange event in order to validate the information entered by the user, requesting that any mistakes be corrected // Options for PaymentRequest(), indicating that shipping address, // payer email address, name, and phone number all be collected. const options = { requestShipping: true, requestPayerEmail: true, requestPayerName: true, requestPayerPhone: true, }; const request = new PaymentRequest(methods, details, options);\n or  const response = request.show();\n or  // Get the data from the response let { payerName: oldPayerName, payerEmail: oldPayerEmail, payerPhone: oldPayerPhone, } = response; // Set up a handler for payerdetailchange events, to // request corrections as needed. response.onpayerdetailchange = async ev => { const promisesToValidate = []; const { payerName, payerEmail, payerPhone } = response; // Validate each value which changed by calling a function // that validates each type of data, returning a promise which // resolves if the data is valid. if (oldPayerName !== payerName) { promisesToValidate.push(validateName(payerName));\n or  oldPayerName = payerName; } if (oldPayerEmail !== payerEmail) { promisesToValidate.push(validateEmail(payerEmail));\n or  oldPayerEmail = payerEmail; } if (oldPayerPhone !== payerPhone) { promisesToValidate.push(validatePhone(payerPhone));\n or  oldPayerPhone = payerPhone; } // As each validation promise resolves, add the results of the // validation to the errors list const errors = await Promise.all(promisesToValidate).then(results => results.reduce((errors, result), Object.assign(errors, result)) );\n or  // If we found any errors, wait for them to be corrected if (Object.getOwnPropertyNames(errors).length) { await response.retry(errors);\n or  } else { // We have a good payment; send the data to the server await fetch(\"/pay-for-things/\", { method: \"POST\", body: response.json() });\n or  response.complete(\"success\");\n or  } }; await response.retry({ payer: { email: \"invalid domain.\", phone: \"invalid number.\", }, });",
        "type": "Payments"
    },
    "PaymentResponse.payerEmail": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "PaymentResponse.payerEmail",
        "params": [],
        "path": "dom/paymentresponse/payeremail",
        "syntax": "var payerEmail = PaymentResponse.payerEmail; Specifications    Specification Status Comment   Payment Request API Candidate Recommendation Initial definition.    Browser CompatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   61Disabled    61Disabled   Disabled From version 61: this feature is behind the #web-payments preference (needs to be set to Enabled). To change preferences in Chrome, visit chrome://flags.    15  56Disabled    56Disabled   Disabled From version 56: this feature is behind the dom.payments.request.enabled",
        "type": "Payments"
    },
    "PaymentResponse.payerName": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "PaymentResponse.payerName",
        "params": [],
        "path": "dom/paymentresponse/payername",
        "syntax": "var payerName = PaymentResponse.payerName; Value A string containing the payer name. Specifications    Specification Status Comment   Payment Request APIThe definition of 'payerName' in that specification. Candidate Recommendation Initial definition.    Browser CompatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   61Disabled    61Disabled   Disabled From version 61: this feature is behind the #web-payments preference (needs to be set to Enabled). To change preferences in Chrome, visit chrome://flags.    15  56Disabled    56Disabled   Disabled From version 56: this feature is behind the dom.payments.request.enabled",
        "type": "Payments"
    },
    "PaymentResponse.payerPhone": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "PaymentResponse.payerPhone",
        "params": [],
        "path": "dom/paymentresponse/payerphone",
        "syntax": "var payerPhone = PaymentResponse.payerPhone; Specifications    Specification Status Comment   Payment Request API Candidate Recommendation Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   61Disabled    61Disabled   Disabled From version 61: this feature is behind the #web-payments preference (needs to be set to Enabled). To change preferences in Chrome, visit chrome://flags.    15  56Disabled    56Disabled   Disabled From version 56: this feature is behind the dom.payments.request.enabled",
        "type": "Payments"
    },
    "PaymentResponse.requestId": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PaymentResponse.requestId",
        "params": [],
        "path": "dom/paymentresponse/requestid",
        "syntax": "var id = paymentRequest.id Value A DOMString. Specifications    Specification Status Comment   Payment Request APIThe definition of 'requestId' in that specification. Candidate Recommendation Initial definition.    Browser CompatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   61Disabled    61Disabled   Disabled From version 61: this feature is behind the #web-payments preference (needs to be set to Enabled). To change preferences in Chrome, visit chrome://flags.    16  56Disabled    56Disabled   Disabled From version 56: this feature is behind the dom.payments.request.enabled",
        "type": "Payments"
    },
    "PaymentResponse.retry": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "PaymentResponse.retry",
        "params": [
            {
                "descr": "A PaymentValidationErrors object, with the following properties:   error Optional  A general description of a payment error from which the user may attempt to recover by retrying the payment, possibly after correcting mistakes in the payment information. error can be provided all by itself to provide only a generic error message, or in concert with the other properties to serve as an overview while other properties' values gude the user to errors in specific fields in the payment form.",
                "name": "errorFields"
            },
            {
                "descr": "A PayerErrors compliant object which provides appropriate error messages for any of the fields describing the payer which failed validation.",
                "name": "payer Optional"
            },
            {
                "descr": "Any payment method specific errors which may have occurred. ",
                "name": "paymentMethod Optional"
            },
            {
                "descr": "An AddressErrors object which contains error messages for any of the fields in the shipping address that failed validation.",
                "name": "shippingAddress Optional"
            }
        ],
        "path": "dom/paymentresponse/retry",
        "syntax": "retryPromise = paymentRequest.retry(errorFields);",
        "type": "Payments"
    },
    "PaymentResponse.shippingAddress": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "PaymentResponse.shippingAddress",
        "params": [],
        "path": "dom/paymentresponse/shippingaddress",
        "syntax": "var paymentAddress = PaymentRequest.shippingAddress; Example Generally, the user agent will fill the shippingAddress property for you. You can trigger this by setting PaymentOptions.requestShipping to true when calling the PaymentRequest constructor. In the example below, the cost of shipping varies by geography. When the PaymentRequest.onshippingaddresschange is called, updateDetails()",
        "type": "Payments"
    },
    "PaymentResponse.shippingOption": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "PaymentResponse.shippingOption",
        "params": [],
        "path": "dom/paymentresponse/shippingoption",
        "syntax": "var shippingOption = PaymentRequest.shippingOption; Example In the example below, the PaymentRequest.onshippingaoptionchange event is called. It calls updateDetails()",
        "type": "Payments"
    },
    "Performance API: Using the Performance API": {
        "descr": "A fundamental requirement of web performance is a precise and consistent definition of time. The DOMHighResTimeStamp type (a double) is used by all performance interfaces to hold such time values. Additionally, there must be a way to create a timestamp for a specific point in time; this is done with the now() method.",
        "name": "Performance API: Using the Performance API",
        "params": [],
        "path": "dom/performance_api/using_the_performance_api",
        "syntax": "Performance interface. High precision timing High precision timing is achieved by using the DOMHighResTimeStamp type for time values. The unit is milliseconds and should be accurate to 5 µs (microseconds). However, if the browser is unable to provide a time value accurate to 5 microseconds (because, for example, due to hardware or software constraints), the browser can represent a the value as a time in milliseconds accurate to a millisecond.",
        "type": "Performance"
    },
    "Performance.clearMarks": {
        "descr": "The clearMarks() method removes the named mark from the browser's performance entry buffer. If the method is called with no arguments, all performance entries with an entry type of \"mark\" will be removed from the performance entry buffer.",
        "name": "Performance.clearMarks",
        "params": [
            {
                "descr": "A DOMString representing the name of the timestamp. ",
                "name": "name Optional"
            }
        ],
        "path": "dom/performance/clearmarks",
        "syntax": "performance.clearMarks();\n or  performance.clearMarks(name);",
        "type": "Performance"
    },
    "Performance.clearMeasures": {
        "descr": "The clearMeasures() method removes the named measure from the browser's performance entry buffer. If the method is called with no arguments, all performance entries with an entry type of \"measure\" will be removed from the performance entry buffer.",
        "name": "Performance.clearMeasures",
        "params": [
            {
                "descr": "A DOMString representing the name of the timestamp. ",
                "name": "name Optional"
            }
        ],
        "path": "dom/performance/clearmeasures",
        "syntax": "performance.clearMeasures();\n or  performance.clearMeasures(name);",
        "type": "Performance"
    },
    "Performance.clearResourceTimings": {
        "descr": "The clearResourceTimings() method removes all performance entries with an entryType of \"resource\" from the browser's performance data buffer and sets the size of the performance data buffer to zero. To set the size of the browser's performance data buffer, use the Performance.setResourceTimingBufferSize() method.",
        "name": "Performance.clearResourceTimings",
        "params": [
            {
                "descr": "This method has no return value.",
                "name": "void  Return value  none"
            }
        ],
        "path": "dom/performance/clearresourcetimings",
        "syntax": "performance.clearResourceTimings();",
        "type": "Performance"
    },
    "Performance.getEntries": {
        "descr": "The getEntries() method returns a list of PerformanceEntry objects for a given filter. The list's members (entries) can be created by making performance marks or measures (for example by calling the mark() method) at explicit points in time.",
        "name": "Performance.getEntries",
        "params": [
            {
                "descr": "PerformanceEntryFilterOptions is a dictionary with the following fields:   \"name\", the name of a performance entry. ",
                "name": "PerformanceEntryFilterOptions Optional"
            },
            {
                "descr": "A list of PerformanceEntry objects that meets the criteria of the filter. ",
                "name": "entries"
            }
        ],
        "path": "dom/performance/getentries",
        "syntax": "entries = window.performance.getEntries();\n or  entries = window.performance.getEntries(PerformanceEntryFilterOptions);",
        "type": "Performance"
    },
    "Performance.getEntriesByName": {
        "descr": "The getEntriesByName() method returns a list of PerformanceEntry objects for the given name and type. The list's members (entries) can be created by making performance marks or measures (for example by calling the mark() method) at explicit points in time.",
        "name": "Performance.getEntriesByName",
        "params": [
            {
                "descr": "The name of the entry to retrieve.",
                "name": "name"
            },
            {
                "descr": "The type of entry to retrieve such as \"mark\". ",
                "name": "type Optional"
            },
            {
                "descr": "A list of PerformanceEntry objects that have the specified name and type. ",
                "name": "entries"
            }
        ],
        "path": "dom/performance/getentriesbyname",
        "syntax": "entries = window.performance.getEntriesByName(name, type);",
        "type": "Performance"
    },
    "Performance.getEntriesByType": {
        "descr": "The getEntriesByType() method returns a list of PerformanceEntry objects for a given type. The list's members (entries) can be created by making performance marks or measures (for example by calling the mark() method) at explicit points in time.",
        "name": "Performance.getEntriesByType",
        "params": [
            {
                "descr": "The type of entry to retrieve such as \"mark\". ",
                "name": "type"
            },
            {
                "descr": "A list of PerformanceEntry objects that have the specified type. ",
                "name": "entries"
            }
        ],
        "path": "dom/performance/getentriesbytype",
        "syntax": "entries = window.performance.getEntriesByType(type);",
        "type": "Performance"
    },
    "Performance.mark": {
        "descr": "The mark() method creates a timestamp in the browser's performance entry buffer with the given name. The application defined timestamp can be retrieved by one of the Performance interface's getEntries*() methods (getEntries(), getEntriesByName() or getEntriesByType()).",
        "name": "Performance.mark",
        "params": [
            {
                "descr": "A DOMString representing the name of the mark.",
                "name": "name"
            }
        ],
        "path": "dom/performance/mark",
        "syntax": "SyntaxError is thrown. Syntax performance.mark(name);",
        "type": "Performance"
    },
    "Performance.measure": {
        "descr": "The measure() method creates a named timestamp in the browser's performance entry buffer between two specified marks (known as the start mark and end mark, respectively). The named timestamp is referred to as a measure.",
        "name": "Performance.measure",
        "params": [
            {
                "descr": "A DOMString representing the name of the measure.",
                "name": "name"
            },
            {
                "descr": "A DOMString representing the name of the measure's starting mark. ",
                "name": "startMark Optional"
            },
            {
                "descr": "A DOMString representing the name of the measure's ending mark. ",
                "name": "endMark Optional"
            }
        ],
        "path": "dom/performance/measure",
        "syntax": "performance.measure(name, startMark, endMark);",
        "type": "Performance"
    },
    "Performance.now": {
        "descr": "The performance.now() method returns a DOMHighResTimeStamp, measured in milliseconds.",
        "name": "Performance.now",
        "params": [],
        "path": "dom/performance/now",
        "syntax": "t = performance.now();",
        "type": "Performance"
    },
    "Performance.onresourcetimingbufferfull": {
        "descr": "The onresourcetimingbufferfull property is an event handler that will be called when the resourcetimingbufferfull event is fired. This event is fired when the browser's resource timing performance buffer is full.",
        "name": "Performance.onresourcetimingbufferfull",
        "params": [
            {
                "descr": "An EventHandler that is invoked when the resourcetimingbufferfull event is fired.",
                "name": "callback"
            }
        ],
        "path": "dom/performance/onresourcetimingbufferfull",
        "syntax": "callback = performance.onresourcetimingbufferfull = buffer_full_cb;  Return value  callback An EventHandler that is invoked when the resourcetimingbufferfull event is fired.  Example The following example sets a callback function on the onresourcetimingbufferfull property. function buffer_full(event) { console.log(\"WARNING: Resource Timing Buffer is FULL!\");\n or  performance.setResourceTimingBufferSize(200);\n or  } function init() { // Set a callback if the resource buffer becomes filled performance.onresourcetimingbufferfull = buffer_full; } <body onload=\"init()\">);",
        "type": "Performance"
    },
    "Performance.setResourceTimingBufferSize": {
        "descr": "The setResourceTimingBufferSize() method sets the browser's resource timing buffer size to the specified number of \"resource\" performance entry type objects.",
        "name": "Performance.setResourceTimingBufferSize",
        "params": [
            {
                "descr": "A number representing the maximum number of performance entry objects the browser should hold in its performance entry buffer.",
                "name": "maxSize"
            },
            {
                "descr": "This method has no return value.",
                "name": "none"
            }
        ],
        "path": "dom/performance/setresourcetimingbuffersize",
        "syntax": "performance.setResourceTimingBufferSize(maxSize);",
        "type": "Performance"
    },
    "Performance.toJSON": {
        "descr": "The toJSON() method of the Performance interface is a standard serializer: it returns a JSON representation of the performance object's properties.",
        "name": "Performance.toJSON",
        "params": [
            {
                "descr": "A JSON object that is the serialization of the Performance object.",
                "name": "None  Return value  myPerf"
            }
        ],
        "path": "dom/performance/tojson",
        "syntax": "myPerf = performance.toJSON()",
        "type": "Performance"
    },
    "PerformanceEntry.duration": {
        "descr": "The duration property returns a timestamp that is the duration of the performance entry.",
        "name": "PerformanceEntry.duration",
        "params": [],
        "path": "dom/performanceentry/duration",
        "syntax": "entry.duration; Return value A DOMHighResTimeStamp representing the duration of the performance entry. If the duration concept doesn't apply for a particular performance metric, the browser may choose to return a duration of 0. Note: if the performance entry has an entryType of \"resource\" (i.e. the entry is a PerformanceResourceTiming object), this property returns the difference between the PerformanceEntry.responseEnd",
        "type": "Performance"
    },
    "PerformanceEntry.entryType": {
        "descr": "The entryType property returns a DOMString representing the type of performance metric such as, for example, \"mark\". This property is read only.",
        "name": "PerformanceEntry.entryType",
        "params": [],
        "path": "dom/performanceentry/entrytype",
        "syntax": "var type = entry.entryType; Return value The return value depends on the subtype of the PerformanceEntry object and affects the value of the PerformanceEntry.name property as shown by the table below. Performance entry type names    Value Subtype Type of name property Description of name property      frame, navigation   PerformanceFrameTiming, PerformanceNavigationTiming  URL The document's address.   resource PerformanceResourceTiming URL The resolved URL of the requested resource. This value doesn't change even if the request is redirected.   mark PerformanceMark DOMString The name used when the mark was created by calling performance.mark()",
        "type": "Performance"
    },
    "PerformanceEntry.name": {
        "descr": "The name property of the PerformanceEntry interface returns a value that further specifies the value returned by the PerformanceEntry.entryType property. This property is read only.",
        "name": "PerformanceEntry.name",
        "params": [],
        "path": "dom/performanceentry/name",
        "syntax": "var name = entry.name;  Return value The return value depends on the subtype of the PerformanceEntry object and the value of PerformanceEntry.entryType, as shown by the table below.    Value Subtype entryType values Description     URL  PerformanceFrameTiming, PerformanceNavigationTiming   frame, navigation  The document's address.   URL PerformanceResourceTiming resource The resolved URL of the requested resource. This value doesn't change even if the request is redirected.   DOMString PerformanceMark mark The name used when the mark was created by calling performance.mark()",
        "type": "Performance"
    },
    "PerformanceEntry.startTime": {
        "descr": "The startTime property returns the first recorded timestamp of the performance entry.",
        "name": "PerformanceEntry.startTime",
        "params": [],
        "path": "dom/performanceentry/starttime",
        "syntax": "entry.startTime; Return value A DOMHighResTimeStamp representing the first timestamp when the performance entry was created. Note: if the performance entry has an entryType of \"resource\" (i.e. the entry is a PerformanceResourceTiming object), this property returns the PerformanceEntry.fetchStart",
        "type": "Performance"
    },
    "PerformanceEntry.toJSON": {
        "descr": "The toJSON() method is a serializer; it returns a JSON representation of the performance entry object.",
        "name": "PerformanceEntry.toJSON",
        "params": [
            {
                "descr": "A JSON object that is the serialization of the PerformanceEntry object.",
                "name": "None  Return value  json"
            }
        ],
        "path": "dom/performanceentry/tojson",
        "syntax": "json = perfEntry.toJSON();",
        "type": "Performance"
    },
    "PerformanceNavigationTiming": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PerformanceNavigationTiming",
        "params": [
            {
                "descr": "Returns \"navigation\".",
                "name": "PerformanceEntry.entryType Read only"
            },
            {
                "descr": "Returns the document's address.",
                "name": "PerformanceEntry.name Read only"
            },
            {
                "descr": "Returns a DOMHighResTimeStamp with a value of \"0\".",
                "name": "PerformanceEntry.startTime Read only"
            },
            {
                "descr": "Returns a timestamp that is the difference between the PerformanceNavigationTiming.loadEventEnd and PerformanceEntry.startTime properties.",
                "name": "PerformanceEntry.duration Read only"
            },
            {
                "descr": "A DOMHighResTimeStamp representing a time value equal to the time immediately before the browser sets the current document readiness of the current document to complete.",
                "name": "PerformanceNavigationTiming.domComplete Read only"
            },
            {
                "descr": "A DOMHighResTimeStamp representing the time value equal to the time immediately after the current document's DOMContentLoaded event completes.",
                "name": "PerformanceNavigationTiming.domContentLoadedEventEnd Read only"
            },
            {
                "descr": "A DOMHighResTimeStamp representing the time value equal to the time immediately before the user agent fires the DOMContentLoaded event at the current document.",
                "name": "PerformanceNavigationTiming.domContentLoadedEventStart Read only"
            },
            {
                "descr": "A DOMHighResTimeStamp representing a timestamp representing the time value equal to the time immediately before the user agent sets the current document readiness of the current document to interactive.",
                "name": "PerformanceNavigationTiming.domInteractive Read only"
            },
            {
                "descr": "A DOMHighResTimeStamp representing the time when the load event of the current document is completed.",
                "name": "PerformanceNavigationTiming.loadEventEnd Read only"
            },
            {
                "descr": "A DOMHighResTimeStamp representing the time value equal to the time immediately before the load event of the current document is fired.",
                "name": "PerformanceNavigationTiming.loadEventStart Read only"
            },
            {
                "descr": "A number representing the number of redirects since the last non-redirect navigation under the current browsing context.",
                "name": "PerformanceNavigationTiming.redirectCount Read only"
            },
            {
                "descr": "A string representing the navigation type. ",
                "name": "PerformanceNavigationTiming.type Read only"
            },
            {
                "descr": "A DOMHighResTimeStamp representing the time value equal to the time immediately after the user agent finishes the unload event of the previous document.",
                "name": "PerformanceNavigationTiming.unloadEventEnd Read only"
            },
            {
                "descr": "A DOMHighResTimeStamp representing the time value equal to the time immediately before the user agent starts the unload event of the previous document.",
                "name": "PerformanceNavigationTiming.unloadEventStart Read only"
            },
            {
                "descr": "Returns a DOMString that is the JSON representation of the PerformanceNavigationTiming object.",
                "name": "PerformanceNavigationTiming.toJSON()"
            }
        ],
        "path": "dom/performancenavigationtiming",
        "syntax": "PerformanceNavigationTiming.domContentLoadedEventEnd Read only   A DOMHighResTimeStamp representing the time value equal to the time immediately after the current document's DOMContentLoaded event completes.  PerformanceNavigationTiming.domContentLoadedEventStart Read only   A DOMHighResTimeStamp representing the time value equal to the time immediately before the user agent fires the DOMContentLoaded event at the current document.  PerformanceNavigationTiming.domInteractive Read only   A DOMHighResTimeStamp representing a timestamp representing the time value equal to the time immediately before the user agent sets the current document readiness of the current document to interactive.  PerformanceNavigationTiming.loadEventEnd Read only   A DOMHighResTimeStamp representing the time when the load event of the current document is completed.  PerformanceNavigationTiming.loadEventStart Read only   A DOMHighResTimeStamp representing the time value equal to the time immediately before the load event of the current document is fired.  PerformanceNavigationTiming.redirectCount Read only   A number representing the number of redirects since the last non-redirect navigation under the current browsing context.  PerformanceNavigationTiming.type Read only   A string representing the navigation type. Must be: \"navigate\", \"reload\", \"back_forward\" or \"prerender\".  PerformanceNavigationTiming.unloadEventEnd Read only   A DOMHighResTimeStamp representing the time value equal to the time immediately after the user agent finishes the unload event of the previous document.  PerformanceNavigationTiming.unloadEventStart Read only   A DOMHighResTimeStamp representing the time value equal to the time immediately before the user agent starts the unload event of the previous document.  Methods   PerformanceNavigationTiming.toJSON()",
        "type": "Performance"
    },
    "PerformanceNavigationTiming.domComplete": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PerformanceNavigationTiming.domComplete",
        "params": [],
        "path": "dom/performancenavigationtiming/domcomplete",
        "syntax": "perfEntry.domComplete;  Return Value A timestamp representing a time value equal to the time immediately before the user agent sets the current document readiness of the current document to complete. Example The following example illustrates this property's usage. function print_nav_timing_data() { // Use getEntriesByType() to just get the \"navigation\" events var perfEntries = performance.getEntriesByType(\"navigation\");\n or  for (var i=0; i < perfEntries.length; i++) { console.log(\"= Navigation entry[\" + i + \"]\");\n or  var p = perfEntries[i]; // dom Properties console.log(\"DOM content loaded = \" + (p.domContentLoadedEventEnd - p.domContentLoadedEventStart));\n or  console.log(\"DOM complete = \" + p.domComplete);\n or  console.log(\"DOM interactive = \" + p.interactive);\n or  // document load and unload time console.log(\"document load = \" + (p.loadEventEnd - p.loadEventStart));\n or  console.log(\"document unload = \" + (p.unloadEventEnd - p.unloadEventStart));\n or  // other properties console.log(\"type = \" + p.type);\n or  console.log(\"redirectCount = \" + p.redirectCount);\n or  } });",
        "type": "Performance"
    },
    "PerformanceNavigationTiming.domContentLoadedEventEnd": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PerformanceNavigationTiming.domContentLoadedEventEnd",
        "params": [],
        "path": "dom/performancenavigationtiming/domcontentloadedeventend",
        "syntax": "perfEntry.domContentLoadedEventEnd;  Return Value A timestamp representing the time value equal to the time immediately after the current document's DOMContentLoaded event completes. Example The following example illustrates this property's usage. function print_nav_timing_data() { // Use getEntriesByType() to just get the \"navigation\" events var perfEntries = performance.getEntriesByType(\"navigation\");\n or  for (var i=0; i < perfEntries.length; i++) { console.log(\"= Navigation entry[\" + i + \"]\");\n or  var p = perfEntries[i]; // dom Properties console.log(\"DOM content loaded = \" + (p.domContentLoadedEventEnd - p.domContentLoadedEventStart));\n or  console.log(\"DOM complete = \" + p.domComplete);\n or  console.log(\"DOM interactive = \" + p.interactive);\n or  // document load and unload time console.log(\"document load = \" + (p.loadEventEnd - p.loadEventStart));\n or  console.log(\"document unload = \" + (p.unloadEventEnd - p.unloadEventStart));\n or  // other properties console.log(\"type = \" + p.type);\n or  console.log(\"redirectCount = \" + p.redirectCount);\n or  } });",
        "type": "Performance"
    },
    "PerformanceNavigationTiming.domContentLoadedEventStart": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PerformanceNavigationTiming.domContentLoadedEventStart",
        "params": [],
        "path": "dom/performancenavigationtiming/domcontentloadedeventstart",
        "syntax": "perfEntry.domContentLoadedEventStart;  Return Value A timestamp representing the time value equal to the time immediately before the user agent fires the DOMContentLoaded event at the current document. Example The following example illustrates this property's usage. function print_nav_timing_data() { // Use getEntriesByType() to just get the \"navigation\" events var perfEntries = performance.getEntriesByType(\"navigation\");\n or  for (var i=0; i < perfEntries.length; i++) { console.log(\"= Navigation entry[\" + i + \"]\");\n or  var p = perfEntries[i]; // dom Properties console.log(\"DOM content loaded = \" + (p.domContentLoadedEventEnd - p.domContentLoadedEventStart));\n or  console.log(\"DOM complete = \" + p.domComplete);\n or  console.log(\"DOM interactive = \" + p.interactive);\n or  // document load and unload time console.log(\"document load = \" + (p.loadEventEnd - p.loadEventStart));\n or  console.log(\"document unload = \" + (p.unloadEventEnd - p.unloadEventStart));\n or  // other properties console.log(\"type = \" + p.type);\n or  console.log(\"redirectCount = \" + p.redirectCount);\n or  } });",
        "type": "Performance"
    },
    "PerformanceNavigationTiming.domInteractive": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PerformanceNavigationTiming.domInteractive",
        "params": [],
        "path": "dom/performancenavigationtiming/dominteractive",
        "syntax": "perfEntry.domInteractive;  Return Value A timestamp representing the time value equal to the time immediately before the user agent sets the current document readiness of the current document to interactive. Example The following example illustrates this property's usage. function print_nav_timing_data() { // Use getEntriesByType() to just get the \"navigation\" events var perfEntries = performance.getEntriesByType(\"navigation\");\n or  for (var i=0; i < perfEntries.length; i++) { console.log(\"= Navigation entry[\" + i + \"]\");\n or  var p = perfEntries[i]; // dom Properties console.log(\"DOM content loaded = \" + (p.domContentLoadedEventEnd - p.domContentLoadedEventStart));\n or  console.log(\"DOM complete = \" + p.domComplete);\n or  console.log(\"DOM interactive = \" + p.domInteractive);\n or  // document load and unload time console.log(\"document load = \" + (p.loadEventEnd - p.loadEventStart));\n or  console.log(\"document unload = \" + (p.unloadEventEnd - p.unloadEventStart));\n or  // other properties console.log(\"type = \" + p.type);\n or  console.log(\"redirectCount = \" + p.redirectCount);\n or  } });",
        "type": "Performance"
    },
    "PerformanceNavigationTiming.loadEventEnd": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PerformanceNavigationTiming.loadEventEnd",
        "params": [],
        "path": "dom/performancenavigationtiming/loadeventend",
        "syntax": "perfEntry.loadEventEnd;  Return Value A timestamp representing the time when the load event of the current document is completed. Example The following example illustrates this property's usage. function print_nav_timing_data() { // Use getEntriesByType() to just get the \"navigation\" events var perfEntries = performance.getEntriesByType(\"navigation\");\n or  for (var i=0; i < perfEntries.length; i++) { console.log(\"= Navigation entry[\" + i + \"]\");\n or  var p = perfEntries[i]; // dom Properties console.log(\"DOM content loaded = \" + (p.domContentLoadedEventEnd - p.domContentLoadedEventStart));\n or  console.log(\"DOM complete = \" + p.domComplete);\n or  console.log(\"DOM interactive = \" + p.interactive);\n or  // document load and unload time console.log(\"document load = \" + (p.loadEventEnd - p.loadEventStart));\n or  console.log(\"document unload = \" + (p.unloadEventEnd - p.unloadEventStart));\n or  // other properties console.log(\"type = \" + p.type);\n or  console.log(\"redirectCount = \" + p.redirectCount);\n or  } });",
        "type": "Performance"
    },
    "PerformanceNavigationTiming.loadEventStart": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PerformanceNavigationTiming.loadEventStart",
        "params": [],
        "path": "dom/performancenavigationtiming/loadeventstart",
        "syntax": "perfEntry.loadEventStart;  Return Value A timestamp representing a time value equal to the time immediately before the load event of the current document is fired. Example The following example illustrates this property's usage. function print_nav_timing_data() { // Use getEntriesByType() to just get the \"navigation\" events var perfEntries = performance.getEntriesByType(\"navigation\");\n or  for (var i=0; i < perfEntries.length; i++) { console.log(\"= Navigation entry[\" + i + \"]\");\n or  var p = perfEntries[i]; // dom Properties console.log(\"DOM content loaded = \" + (p.domContentLoadedEventEnd - p.domContentLoadedEventStart));\n or  console.log(\"DOM complete = \" + p.domComplete);\n or  console.log(\"DOM interactive = \" + p.interactive);\n or  // document load and unload time console.log(\"document load = \" + (p.loadEventEnd - p.loadEventStart));\n or  console.log(\"document unload = \" + (p.unloadEventEnd - p.unloadEventStart));\n or  // other properties console.log(\"type = \" + p.type);\n or  console.log(\"redirectCount = \" + p.redirectCount);\n or  } });",
        "type": "Performance"
    },
    "PerformanceNavigationTiming.redirectCount": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PerformanceNavigationTiming.redirectCount",
        "params": [],
        "path": "dom/performancenavigationtiming/redirectcount",
        "syntax": "perfEntry.redirectCount;  Return Value A number representing the number of redirects since the last non-redirect navigation under the current browsing context. Example The following example illustrates this property's usage. function print_nav_timing_data() { // Use getEntriesByType() to just get the \"navigation\" events var perfEntries = performance.getEntriesByType(\"navigation\");\n or  for (var i=0; i < perfEntries.length; i++) { console.log(\"= Navigation entry[\" + i + \"]\");\n or  var p = perfEntries[i]; // dom Properties console.log(\"DOM content loaded = \" + (p.domContentLoadedEventEnd - p.domContentLoadedEventStart));\n or  console.log(\"DOM complete = \" + p.domComplete);\n or  console.log(\"DOM interactive = \" + p.interactive);\n or  // document load and unload time console.log(\"document load = \" + (p.loadEventEnd - p.loadEventStart));\n or  console.log(\"document unload = \" + (p.unloadEventEnd - p.unloadEventStart));\n or  // other properties console.log(\"type = \" + p.type);\n or  console.log(\"redirectCount = \" + p.redirectCount);\n or  } });",
        "type": "Performance"
    },
    "PerformanceNavigationTiming.toJSON": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PerformanceNavigationTiming.toJSON",
        "params": [
            {
                "descr": "A JSON object that is the serialization of the PerformanceNavigationTiming object as a map with entries from the closest inherited interface and with entries for each of the serializable attributes.",
                "name": "None  Return value  json"
            }
        ],
        "path": "dom/performancenavigationtiming/tojson",
        "syntax": "json = resourcePerfEntry.toJSON();",
        "type": "Performance"
    },
    "PerformanceNavigationTiming.type": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PerformanceNavigationTiming.type",
        "params": [
            {
                "descr": "Navigation started by clicking a link, entering the URL in the browser's address bar, form submission, or initializing through a script operation other than reload and back_forward as listed below.",
                "name": "navigate"
            },
            {
                "descr": "Navigation is through the browser's reload operation or location.reload().",
                "name": "reload"
            },
            {
                "descr": "Navigation is through the browser's history traversal operation.",
                "name": "back_forward"
            },
            {
                "descr": "Navigation is initiated by a prerender hint.",
                "name": "prerender"
            }
        ],
        "path": "dom/performancenavigationtiming/type",
        "syntax": "perfEntry.type;  Return Value A string which is one of the values listed above. Example The following example illustrates this property's usage. function print_nav_timing_data() { // Use getEntriesByType() to just get the \"navigation\" events var perfEntries = performance.getEntriesByType(\"navigation\");\n or  for (var i=0; i < perfEntries.length; i++) { console.log(\"= Navigation entry[\" + i + \"]\");\n or  var p = perfEntries[i]; // dom Properties console.log(\"DOM content loaded = \" + (p.domContentLoadedEventEnd - p.domContentLoadedEventStart));\n or  console.log(\"DOM complete = \" + p.domComplete);\n or  console.log(\"DOM interactive = \" + p.interactive);\n or  // document load and unload time console.log(\"document load = \" + (p.loadEventEnd - p.loadEventStart));\n or  console.log(\"document unload = \" + (p.unloadEventEnd - p.unloadEventStart));\n or  // other properties console.log(\"type = \" + p.type);\n or  console.log(\"redirectCount = \" + p.redirectCount);\n or  } });",
        "type": "Performance"
    },
    "PerformanceNavigationTiming.unloadEventEnd": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PerformanceNavigationTiming.unloadEventEnd",
        "params": [],
        "path": "dom/performancenavigationtiming/unloadeventend",
        "syntax": "perfEntry.unloadEventEnd;  Return Value A timestamp representing a time value equal to the time immediately after the user agent finishes the unload event of the previous document. Example The following example illustrates this property's usage. function print_nav_timing_data() { // Use getEntriesByType() to just get the \"navigation\" events var perfEntries = performance.getEntriesByType(\"navigation\");\n or  for (var i=0; i < perfEntries.length; i++) { console.log(\"= Navigation entry[\" + i + \"]\");\n or  var p = perfEntries[i]; // dom Properties console.log(\"DOM content loaded = \" + (p.domContentLoadedEventEnd - p.domContentLoadedEventStart));\n or  console.log(\"DOM complete = \" + p.domComplete);\n or  console.log(\"DOM interactive = \" + p.interactive);\n or  // document load and unload time console.log(\"document load = \" + (p.loadEventEnd - p.loadEventStart));\n or  console.log(\"document unload = \" + (p.unloadEventEnd - p.unloadEventStart));\n or  // other properties console.log(\"type = \" + p.type);\n or  console.log(\"redirectCount = \" + p.redirectCount);\n or  } });",
        "type": "Performance"
    },
    "PerformanceNavigationTiming.unloadEventStart": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PerformanceNavigationTiming.unloadEventStart",
        "params": [],
        "path": "dom/performancenavigationtiming/unloadeventstart",
        "syntax": "perfEntry.unloadEventStart;  Return Value A timestamp representing the time value equal to the time immediately before the user agent starts the unload event of the previous document. Example The following example illustrates this property's usage. function print_nav_timing_data() { // Use getEntriesByType() to just get the \"navigation\" events var perfEntries = performance.getEntriesByType(\"navigation\");\n or  for (var i=0; i < perfEntries.length; i++) { console.log(\"= Navigation entry[\" + i + \"]\");\n or  var p = perfEntries[i]; // dom Properties console.log(\"DOM content loaded = \" + (p.domContentLoadedEventEnd - p.domContentLoadedEventStart));\n or  console.log(\"DOM complete = \" + p.domComplete);\n or  console.log(\"DOM interactive = \" + p.interactive);\n or  // document load and unload time console.log(\"document load = \" + (p.loadEventEnd - p.loadEventStart));\n or  console.log(\"document unload = \" + (p.unloadEventEnd - p.unloadEventStart));\n or  // other properties console.log(\"type = \" + p.type);\n or  console.log(\"redirectCount = \" + p.redirectCount);\n or  } });",
        "type": "Performance"
    },
    "PerformanceObserver.constructor": {
        "descr": "The PerformanceObserver() constructor creates a new PerformanceObserver object with the given observer callback. The observer callback is invoked when performance entry events are recorded for the entry types that have been registered, via the observe() method.",
        "name": "PerformanceObserver.constructor",
        "params": [
            {
                "descr": "A PerformanceObserverCallback callback that will be invoked when observed performance events are recorded. ",
                "name": "callback"
            }
        ],
        "path": "dom/performanceobserver/performanceobserver",
        "syntax": "var observer = new PerformanceObserver(callback);",
        "type": "Performance"
    },
    "PerformanceObserver.disconnect": {
        "descr": "The disconnect() method of the PerformanceObserver interface is used to stop the performance observer from receiving any performance entry events.",
        "name": "PerformanceObserver.disconnect",
        "params": [],
        "path": "dom/performanceobserver/disconnect",
        "syntax": "observer.disconnect();",
        "type": "Performance"
    },
    "PerformanceObserver.observe": {
        "descr": "The observe() method of the PerformanceObserver interface is used to specify the set of performance entry types to observe. The performance entry types are specified as an array of DOMString objects, each naming one entry type; the type names are documented in Performance entry type names in PerformanceEntry.entryType.",
        "name": "PerformanceObserver.observe",
        "params": [
            {
                "descr": "A PerformanceObserverInit dictionary with one member:  \"entryTypes\", an array of DOMString objects, each specifying one performance entry type to observe. ",
                "name": "options"
            }
        ],
        "path": "dom/performanceobserver/observe",
        "syntax": "observer.observe(options);",
        "type": "Performance"
    },
    "PerformanceObserver.takeRecords": {
        "descr": "The takeRecords() method of the PerformanceObserver interface returns the current list of performance entries stored in the performance observer, emptying it out.",
        "name": "PerformanceObserver.takeRecords",
        "params": [],
        "path": "dom/performanceobserver/takerecords",
        "syntax": "observer.takeRecords();",
        "type": "Performance"
    },
    "PerformanceObserverEntryList.getEntries": {
        "descr": "The getEntries() method of the PerformanceObserverEntryList interface returns a list of explicitly observed performance entry objects for a given filter. The list's members are determined by the set of entry types specified in the call to the observe() method. The list is available in the observer's callback function (as the first parameter in the callback).",
        "name": "PerformanceObserverEntryList.getEntries",
        "params": [
            {
                "descr": "Is a PerformanceEntryFilterOptions dictionary, having the following fields:   \"name\", the name of a performance entry. ",
                "name": "PerformanceEntryFilterOptionsOptional"
            }
        ],
        "path": "dom/performanceobserverentrylist/getentries",
        "syntax": "entries = list.getEntries();\n or  entries = list.getEntries(PerformanceEntryFilterOptions);",
        "type": "Performance"
    },
    "PerformanceObserverEntryList.getEntriesByName": {
        "descr": "The getEntriesByName() method of the PerformanceObserverEntryList interface returns a list of explicitly observed performance entry objects for a given name and entry type. The list's members are determined by the set of entry types specified in the call to the observe() method. The list is available in the observer's callback function (as the first parameter in the callback).",
        "name": "PerformanceObserverEntryList.getEntriesByName",
        "params": [
            {
                "descr": "A DOMString representing the name of the entry to retrieve.",
                "name": "name"
            },
            {
                "descr": "A DOMString representing the type of entry to retrieve such as \"mark\". ",
                "name": "type Optional"
            }
        ],
        "path": "dom/performanceobserverentrylist/getentriesbyname",
        "syntax": "entries = list.getEntriesByName(name, type);",
        "type": "Performance"
    },
    "PerformanceObserverEntryList.getEntriesByType": {
        "descr": "The getEntriesByType() method of the PerformanceObserverEntryList returns a list of explicitly observed performance entry objects for a given performance entry type. The list's members are determined by the set of entry types specified in the call to the observe() method. The list is available in the observer's callback function (as the first parameter in the callback).",
        "name": "PerformanceObserverEntryList.getEntriesByType",
        "params": [
            {
                "descr": "The type of entry to retrieve such as \"frame\". ",
                "name": "type"
            }
        ],
        "path": "dom/performanceobserverentrylist/getentriesbytype",
        "syntax": "entries = list.getEntriesByType(type);",
        "type": "Performance"
    },
    "PerformanceResourceTiming.connectEnd": {
        "descr": "The connectEnd read-only property returns the timestamp immediately after the browser finishes establishing the connection to the server to retrieve the resource. The timestamp value includes the time interval to establish the transport connection, as well as other time intervals such as SSL handshake and SOCKS authentication.",
        "name": "PerformanceResourceTiming.connectEnd",
        "params": [],
        "path": "dom/performanceresourcetiming/connectend",
        "syntax": "resource.connectEnd;  Return value A DOMHighResTimeStamp representing the time after a connection is established. Example In the following example, the value of the *Start and *End properties of all \"resource\" type events are logged. function print_PerformanceEntries() { // Use getEntriesByType() to just get the \"resource\" events var p = performance.getEntriesByType(\"resource\");\n or  for (var i=0; i < p.length; i++) { print_start_and_end_properties(p[i]);\n or  } } function print_start_and_end_properties(perfEntry) { // Print timestamps of the *start and *end properties properties = [\"connectStart\", \"connectEnd\", \"domainLookupStart\", \"domainLookupEnd\", \"fetchStart\", \"redirectStart\", \"redirectEnd\", \"requestStart\", \"responseStart\", \"responseEnd\", \"secureConnectionStart\"]; for (var i=0; i < properties.length; i++) { // check each property var supported = properties[i] in perfEntry; if (supported) { var value = perfEntry[properties[i]]; console.log(\"... \" + properties[i] + \" = \" + value);\n or  } else { console.log(\"... \" + properties[i] + \" = NOT supported\");\n or  } } });",
        "type": "Performance"
    },
    "PerformanceResourceTiming.connectStart": {
        "descr": "The connectStart read-only property returns the timestamp immediately before the user agent starts establishing the connection to the server to retrieve the resource.",
        "name": "PerformanceResourceTiming.connectStart",
        "params": [],
        "path": "dom/performanceresourcetiming/connectstart",
        "syntax": "resource.connectStart;  Return value A DOMHighResTimeStamp immediately before the browser starts to establish the connection to the server to retrieve the resource. Example In the following example, the value of the *Start and *End properties of all \"resource\" type events are logged. function print_PerformanceEntries() { // Use getEntriesByType() to just get the \"resource\" events var p = performance.getEntriesByType(\"resource\");\n or  for (var i=0; i < p.length; i++) { print_start_and_end_properties(p[i]);\n or  } } function print_start_and_end_properties(perfEntry) { // Print timestamps of the PerformanceEntry *start and *end properties properties = [\"connectStart\", \"connectEnd\", \"domainLookupStart\", \"domainLookupEnd\", \"fetchStart\", \"redirectStart\", \"redirectEnd\", \"requestStart\", \"responseStart\", \"responseEnd\", \"secureConnectionStart\"]; for (var i=0; i < properties.length; i++) { // check each property var supported = properties[i] in perfEntry; if (supported) { var value = perfEntry[properties[i]]; console.log(\"... \" + properties[i] + \" = \" + value);\n or  } else { console.log(\"... \" + properties[i] + \" = NOT supported\");\n or  } } });",
        "type": "Performance"
    },
    "PerformanceResourceTiming.decodedBodySize": {
        "descr": "The decodedBodySize read-only property returns the size (in octets) received from the fetch (HTTP or cache) of the message body, after removing any applied content-codings. If the resource is retrieved from an application cache or local resources, it returns the size of the payload after removing any applied content-codings.",
        "name": "PerformanceResourceTiming.decodedBodySize",
        "params": [],
        "path": "dom/performanceresourcetiming/decodedbodysize",
        "syntax": "resource.decodedBodySize;  Return value The size (in octets) received from the fetch (HTTP or cache) of the message body, after removing any applied content-codings.",
        "type": "Performance"
    },
    "PerformanceResourceTiming.domainLookupEnd": {
        "descr": "The domainLookupEnd read-only property returns the timestamp immediately after the browser finishes the domain name lookup for the resource.",
        "name": "PerformanceResourceTiming.domainLookupEnd",
        "params": [],
        "path": "dom/performanceresourcetiming/domainlookupend",
        "syntax": "resource.domainLookupEnd;  Return value A DOMHighResTimeStamp representing the time immediately after the browser finishes the domain name lookup for the resource. Example In the following example, the value of the *Start and *End properties of all \"resource\" type events are logged. function print_PerformanceEntries() { // Use getEntriesByType() to just get the \"resource\" events var p = performance.getEntriesByType(\"resource\");\n or  for (var i=0; i < p.length; i++) { print_start_and_end_properties(p[i]);\n or  } } function print_start_and_end_properties(perfEntry) { // Print timestamps of the *start and *end properties properties = [\"connectStart\", \"connectEnd\", \"domainLookupStart\", \"domainLookupEnd\", \"fetchStart\", \"redirectStart\", \"redirectEnd\", \"requestStart\", \"responseStart\", \"responseEnd\", \"secureConnectionStart\"]; for (var i=0; i < properties.length; i++) { // check each property var supported = properties[i] in perfEntry; if (supported) { var value = perfEntry[properties[i]]; console.log(\"... \" + properties[i] + \" = \" + value);\n or  } else { console.log(\"... \" + properties[i] + \" = NOT supported\");\n or  } } });",
        "type": "Performance"
    },
    "PerformanceResourceTiming.domainLookupStart": {
        "descr": "The domainLookupStart read-only property returns the timestamp immediately before the browser starts the domain name lookup for the resource.",
        "name": "PerformanceResourceTiming.domainLookupStart",
        "params": [],
        "path": "dom/performanceresourcetiming/domainlookupstart",
        "syntax": "resource.domainLookupStart;  Return value A DOMHighResTimeStamp immediately before the browser starts the domain name lookup for the resource. Example In the following example, the value of the *Start and *End properties of all \"resource\" type events are logged. function print_PerformanceEntries() { // Use getEntriesByType() to just get the \"resource\" events var p = performance.getEntriesByType(\"resource\");\n or  for (var i=0; i < p.length; i++) { print_start_and_end_properties(p[i]);\n or  } } function print_start_and_end_properties(perfEntry) { // Print timestamps of the PerformanceEntry *start and *end properties properties = [\"connectStart\", \"connectEnd\", \"domainLookupStart\", \"domainLookupEnd\", \"fetchStart\", \"redirectStart\", \"redirectEnd\", \"requestStart\", \"responseStart\", \"responseEnd\", \"secureConnectionStart\"]; for (var i=0; i < properties.length; i++) { // check each property var supported = properties[i] in perfEntry; if (supported) { var value = perfEntry[properties[i]]; console.log(\"... \" + properties[i] + \" = \" + value);\n or  } else { console.log(\"... \" + properties[i] + \" = NOT supported\");\n or  } } });",
        "type": "Performance"
    },
    "PerformanceResourceTiming.encodedBodySize": {
        "descr": "The encodedBodySize read-only property represents the size (in octets) received from the fetch (HTTP or cache), of the payload body, before removing any applied content-codings.",
        "name": "PerformanceResourceTiming.encodedBodySize",
        "params": [],
        "path": "dom/performanceresourcetiming/encodedbodysize",
        "syntax": "resource.encodedBodySize;  Return value A number representing the size (in octets) received from the fetch (HTTP or cache), of the payload body, before removing any applied content-codings.",
        "type": "Performance"
    },
    "PerformanceResourceTiming.fetchStart": {
        "descr": "The fetchStart read-only property represents a timestamp immediately before the browser starts to fetch the resource.",
        "name": "PerformanceResourceTiming.fetchStart",
        "params": [],
        "path": "dom/performanceresourcetiming/fetchstart",
        "syntax": "resource.fetchStart;  Return value A DOMHighResTimeStamp immediately before the browser starts to fetch the resource. Example In the following example, the value of the *Start and *End properties of all \"resource\" type events are logged. function print_PerformanceEntries() { // Use getEntriesByType() to just get the \"resource\" events var p = performance.getEntriesByType(\"resource\");\n or  for (var i=0; i < p.length; i++) { print_start_and_end_properties(p[i]);\n or  } } function print_start_and_end_properties(perfEntry) { // Print timestamps of the PerformanceEntry *start and *end properties properties = [\"connectStart\", \"connectEnd\", \"domainLookupStart\", \"domainLookupEnd\", \"fetchStart\", \"redirectStart\", \"redirectEnd\", \"requestStart\", \"responseStart\", \"responseEnd\", \"secureConnectionStart\"]; for (var i=0; i < properties.length; i++) { // check each property var supported = properties[i] in perfEntry; if (supported) { var value = perfEntry[properties[i]]; console.log(\"... \" + properties[i] + \" = \" + value);\n or  } else { console.log(\"... \" + properties[i] + \" = NOT supported\");\n or  } } });",
        "type": "Performance"
    },
    "PerformanceResourceTiming.initiatorType": {
        "descr": "The initiatorType read-only property is a string that represents the type of resource that initiated the performance event.",
        "name": "PerformanceResourceTiming.initiatorType",
        "params": [],
        "path": "dom/performanceresourcetiming/initiatortype",
        "syntax": "resource.initiatorType;  Return value A string representing the type of resource that initiated the performance event, as specified above. Example function print_PerformanceEntries() { // Use getEntriesByType() to just get the \"resource\" events var p = performance.getEntriesByType(\"resource\");\n or  for (var i=0; i < p.length; i++) { print_initiatorType(p[i]);\n or  } } function print_initiatorType(perfEntry) { // Print this performance entry object's initiatorType value var value = \"initiatorType\" in perfEntry; if (value) console.log(\"... initiatorType = \" + perfEntry.initiatorType);\n or  else console.log(\"... initiatorType = NOT supported\");\n or  });",
        "type": "Performance"
    },
    "PerformanceResourceTiming.nextHopProtocol": {
        "descr": "The nextHopProtocol read-only property is a string representing the network protocol used to fetch the resource, as identified by the ALPN Protocol ID (RFC7301).",
        "name": "PerformanceResourceTiming.nextHopProtocol",
        "params": [],
        "path": "dom/performanceresourcetiming/nexthopprotocol",
        "syntax": "resource.nextHopProtocol;  Return value A string representing the network protocol used to fetch the resource, as identified by the ALPN Protocol ID (RFC7301).",
        "type": "Performance"
    },
    "PerformanceResourceTiming.redirectEnd": {
        "descr": "The redirectEnd read-only property returns a timestamp immediately after receiving the last byte of the response of the last redirect.",
        "name": "PerformanceResourceTiming.redirectEnd",
        "params": [],
        "path": "dom/performanceresourcetiming/redirectend",
        "syntax": "resource.redirectEnd;  Return value A timestamp immediately after receiving the last byte of the response of the last redirect. Example In the following example, the value of the *Start and *End properties of all \"resource\" type events are logged. function print_PerformanceEntries() { // Use getEntriesByType() to just get the \"resource\" events var p = performance.getEntriesByType(\"resource\");\n or  for (var i=0; i < p.length; i++) { print_start_and_end_properties(p[i]);\n or  } } function print_start_and_end_properties(perfEntry) { // Print timestamps of the PerformanceEntry *start and *end properties properties = [\"connectStart\", \"connectEnd\", \"domainLookupStart\", \"domainLookupEnd\", \"fetchStart\", \"redirectStart\", \"redirectEnd\", \"requestStart\", \"responseStart\", \"responseEnd\", \"secureConnectionStart\"]; for (var i=0; i < properties.length; i++) { // check each property var supported = properties[i] in perfEntry; if (supported) { var value = perfEntry[properties[i]]; console.log(\"... \" + properties[i] + \" = \" + value);\n or  } else { console.log(\"... \" + properties[i] + \" = NOT supported\");\n or  } } });",
        "type": "Performance"
    },
    "PerformanceResourceTiming.redirectStart": {
        "descr": "The redirectStart read-only property returns a timestamp representing the start time of the fetch which that initiates the redirect.",
        "name": "PerformanceResourceTiming.redirectStart",
        "params": [],
        "path": "dom/performanceresourcetiming/redirectstart",
        "syntax": "resource.redirectStart;  Return value A timestamp representing the start time of the fetch which initiates the redirect. Example In the following example, the value of the *Start and *End properties of all \"resource\" type events are logged. function print_PerformanceEntries() { // Use getEntriesByType() to just get the \"resource\" events var p = performance.getEntriesByType(\"resource\");\n or  for (var i=0; i < p.length; i++) { print_start_and_end_properties(p[i]);\n or  } } function print_start_and_end_properties(perfEntry) { // Print timestamps of the PerformanceEntry *start and *end properties properties = [\"connectStart\", \"connectEnd\", \"domainLookupStart\", \"domainLookupEnd\", \"fetchStart\", \"redirectStart\", \"redirectEnd\", \"requestStart\", \"responseStart\", \"responseEnd\", \"secureConnectionStart\"]; for (var i=0; i < properties.length; i++) { // check each property var supported = properties[i] in perfEntry; if (supported) { var value = perfEntry[properties[i]]; console.log(\"... \" + properties[i] + \" = \" + value);\n or  } else { console.log(\"... \" + properties[i] + \" = NOT supported\");\n or  } } });",
        "type": "Performance"
    },
    "PerformanceResourceTiming.requestStart": {
        "descr": "The requestStart read-only property returns a timestamp of the time immediately before the browser starts requesting the resource from the server, cache, or local resource. If the transport connection fails and the browser retires the request, the value returned will be the start of the retry request.",
        "name": "PerformanceResourceTiming.requestStart",
        "params": [],
        "path": "dom/performanceresourcetiming/requeststart",
        "syntax": "resource.requestStart;  Return value A DOMHighResTimeStamp representing the time immediately before the bowser starts requesting the resource from the server Example In the following example, the value of the *Start and *End properties of all \"resource\" type events are logged. function print_PerformanceEntries() { // Use getEntriesByType() to just get the \"resource\" events var p = performance.getEntriesByType(\"resource\");\n or  for (var i=0; i < p.length; i++) { print_start_and_end_properties(p[i]);\n or  } } function print_start_and_end_properties(perfEntry) { // Print timestamps of the PerformanceEntry *start and *end properties properties = [\"connectStart\", \"connectEnd\", \"domainLookupStart\", \"domainLookupEnd\", \"fetchStart\", \"redirectStart\", \"redirectEnd\", \"requestStart\", \"responseStart\", \"responseEnd\", \"secureConnectionStart\"]; for (var i=0; i < properties.length; i++) { // check each property var supported = properties[i] in perfEntry; if (supported) { var value = perfEntry[properties[i]]; console.log(\"... \" + properties[i] + \" = \" + value);\n or  } else { console.log(\"... \" + properties[i] + \" = NOT supported\");\n or  } } });",
        "type": "Performance"
    },
    "PerformanceResourceTiming.responseEnd": {
        "descr": "The responseEnd read-only property returns a timestamp immediately after the browser receives the last byte of the resource or immediately before the transport connection is closed, whichever comes first.",
        "name": "PerformanceResourceTiming.responseEnd",
        "params": [],
        "path": "dom/performanceresourcetiming/responseend",
        "syntax": "resource.responseEnd;  Return value A DOMHighResTimeStamp immediately after the browser receives the last byte of the resource or immediately before the transport connection is closed, whichever comes first. Example In the following example, the value of the *Start and *End properties of all \"resource\" type events are logged. function print_PerformanceEntries() { // Use getEntriesByType() to just get the \"resource\" events var p = performance.getEntriesByType(\"resource\");\n or  for (var i=0; i < p.length; i++) { print_start_and_end_properties(p[i]);\n or  } } function print_start_and_end_properties(perfEntry) { // Print timestamps of the PerformanceEntry *start and *end properties properties = [\"connectStart\", \"connectEnd\", \"domainLookupStart\", \"domainLookupEnd\", \"fetchStart\", \"redirectStart\", \"redirectEnd\", \"requestStart\", \"responseStart\", \"responseEnd\", \"secureConnectionStart\"]; for (var i=0; i < properties.length; i++) { // check each property var supported = properties[i] in perfEntry; if (supported) { var value = perfEntry[properties[i]]; console.log(\"... \" + properties[i] + \" = \" + value);\n or  } else { console.log(\"... \" + properties[i] + \" = NOT supported\");\n or  } } });",
        "type": "Performance"
    },
    "PerformanceResourceTiming.responseStart": {
        "descr": "The responseStart read-only property returns a timestamp immediately after the browser receives the first byte of the response from the server, cache, or local resource.",
        "name": "PerformanceResourceTiming.responseStart",
        "params": [],
        "path": "dom/performanceresourcetiming/responsestart",
        "syntax": "resource.responseStart;  Return value A DOMHighResTimeStamp immediately after the browser receives the first byte of the response from the server. Example In the following example, the value of the *Start and *End properties of all \"resource\" type events are logged. function print_PerformanceEntries() { // Use getEntriesByType() to just get the \"resource\" events var p = performance.getEntriesByType(\"resource\");\n or  for (var i=0; i < p.length; i++) { print_start_and_end_properties(p[i]);\n or  } } function print_start_and_end_properties(perfEntry) { // Print timestamps of the PerformanceEntry *start and *end properties properties = [\"connectStart\", \"connectEnd\", \"domainLookupStart\", \"domainLookupEnd\", \"fetchStart\", \"redirectStart\", \"redirectEnd\", \"requestStart\", \"responseStart\", \"responseEnd\", \"secureConnectionStart\"]; for (var i=0; i < properties.length; i++) { // check each property var supported = properties[i] in perfEntry; if (supported) { var value = perfEntry[properties[i]]; console.log(\"... \" + properties[i] + \" = \" + value);\n or  } else { console.log(\"... \" + properties[i] + \" = NOT supported\");\n or  } } });",
        "type": "Performance"
    },
    "PerformanceResourceTiming.secureConnectionStart": {
        "descr": "The secureConnectionStart read-only property returns a timestamp immediately before the browser starts the handshake process to secure the current connection. If a secure connection is not used, the property returns zero.",
        "name": "PerformanceResourceTiming.secureConnectionStart",
        "params": [],
        "path": "dom/performanceresourcetiming/secureconnectionstart",
        "syntax": "resource.secureConnectionStart;  Return value If the resource is fetched over a secure connection, a DOMHighResTimeStamp immediately before the browser starts the handshake process to secure the current connection. If a secure connection is not used, this property returns zero. Example In the following example, the value of the *Start and *End properties of all \"resource\" type events are logged. function print_PerformanceEntries() { // Use getEntriesByType() to just get the \"resource\" events var p = performance.getEntriesByType(\"resource\");\n or  for (var i=0; i < p.length; i++) { print_start_and_end_properties(p[i]);\n or  } } function print_start_and_end_properties(perfEntry) { // Print timestamps of the PerformanceEntry *start and *end properties properties = [\"connectStart\", \"connectEnd\", \"domainLookupStart\", \"domainLookupEnd\", \"fetchStart\", \"redirectStart\", \"redirectEnd\", \"requestStart\", \"responseStart\", \"responseEnd\", \"secureConnectionStart\"]; for (var i=0; i < properties.length; i++) { // check each property var supported = properties[i] in perfEntry; if (supported) { var value = perfEntry[properties[i]]; console.log(\"... \" + properties[i] + \" = \" + value);\n or  } else { console.log(\"... \" + properties[i] + \" = NOT supported\");\n or  } } });",
        "type": "Performance"
    },
    "PerformanceResourceTiming.toJSON": {
        "descr": "The toJSON() method is a serializer that returns a JSON representation of the PerformanceResourceTiming object.",
        "name": "PerformanceResourceTiming.toJSON",
        "params": [
            {
                "descr": "A JSON object that is the serialization of the PerformanceResourceTiming object as a map with entries from the closest inherited interface and with entries for each of the serializable attributes.",
                "name": "None  Return value  json"
            }
        ],
        "path": "dom/performanceresourcetiming/tojson",
        "syntax": "json = resourcePerfEntry.toJSON();",
        "type": "Performance"
    },
    "PerformanceResourceTiming.transferSize": {
        "descr": "The transferSize read-only property represents the size (in octets) of the fetched resource. The size includes the response header fields plus the response payload body (as defined by RFC7230.",
        "name": "PerformanceResourceTiming.transferSize",
        "params": [],
        "path": "dom/performanceresourcetiming/transfersize",
        "syntax": "resource.transferSize;  Return value A number representing the size (in octets) of the fetched resource. The size includes the response header fields plus the response payload body (RFC7230).",
        "type": "Performance"
    },
    "PerformanceResourceTiming.workerStart": {
        "descr": "The workerStart read-only property of the PerformanceResourceTiming interface returns a DOMHighResTimeStamp immediately before dispatching the FetchEvent if a Service Worker thread is already running, or immediately before starting the Service Worker thread if it is not already running. If the resource is not intercepted by a Service Worker the property will always return 0.",
        "name": "PerformanceResourceTiming.workerStart",
        "params": [],
        "path": "dom/performanceresourcetiming/workerstart",
        "syntax": "resource.workerStart;  Value A DOMHighResTimeStamp. Example In the following example, the value of the *Start and *End properties of all \"resource\" type events are logged. function print_PerformanceEntries() { // Use getEntriesByType() to just get the \"resource\" events var p = performance.getEntriesByType(\"resource\");\n or  for (var i=0; i < p.length; i++) { print_start_and_end_properties(p[i]);\n or  } } function print_start_and_end_properties(perfEntry) { // Print timestamps of the PerformanceEntry *start and *end properties properties = [\"connectStart\", \"connectEnd\", \"domainLookupStart\", \"domainLookupEnd\", \"fetchStart\", \"redirectStart\", \"redirectEnd\", \"requestStart\", \"responseStart\", \"responseEnd\", \"secureConnectionStart\", \"workerStart\"]; for (var i=0; i < properties.length; i++) { // check each property var supported = properties[i] in perfEntry; if (supported) { var value = perfEntry[properties[i]]; console.log(\"... \" + properties[i] + \" = \" + value);\n or  } else { console.log(\"... \" + properties[i] + \" = NOT supported\");\n or  } } });",
        "type": "Performance"
    },
    "PeriodicWave.constructor": {
        "descr": "The PeriodicWave() constructor of the Web Audio API creates a new PeriodicWave object instance.",
        "name": "PeriodicWave.constructor",
        "params": [
            {
                "descr": "A BaseAudioContext representing the audio context you want the node to be associated with.",
                "name": "context"
            },
            {
                "descr": "A PeriodicWaveOptions dictionary object defining the properties you want the PeriodicWave to have (It also inherits the options defined in the PeriodicWaveConstraints dictionary.):   real: A Float32Array containing the cosine terms that you want to use to form the wave (equivalent to the real parameter of AudioContext.createPeriodicWave).  imag: A Float32Array containing the sine terms that you want to use to form the wave (equivalent to the imag parameter of AudioContext.createPeriodicWave).",
                "name": "options Optional"
            }
        ],
        "path": "dom/periodicwave/periodicwave",
        "syntax": "var myWave = new PeriodicWave(context, options);",
        "type": "Audio"
    },
    "Pipeline operator": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Pipeline operator",
        "params": [],
        "path": "javascript/operators/pipeline_operator",
        "syntax": "expression |> function Examples Chaining function calls The pipeline operator can improve readability when chaining several functions. const double = (n) => n * 2; const increment = (n) => n + 1; // without pipeline operator double(increment(double(double(5))));\n or  // 42 // with pipeline operator 5 |> double |> double |> increment |> double; // 42);",
        "type": "Operators"
    },
    "PluralRules": {
        "descr": "The Intl.PluralRules object is a constructor for objects that enable plural sensitive formatting and plural language rules.",
        "name": "PluralRules",
        "params": [
            {
                "descr": "Optional. A string with a BCP 47 language tag, or an array of such strings. ",
                "name": "locales"
            },
            {
                "descr": "Optional. An object with some or all of the following properties:  localeMatcher The locale matching algorithm to use. ",
                "name": "options"
            },
            {
                "descr": "The type to use. Possible values are:   \"cardinal\" for cardinal numbers (refering to the quantity of things). ",
                "name": "type"
            },
            {
                "descr": "Allows the addition of properties to all objects.",
                "name": "Intl.PluralRules.prototype"
            },
            {
                "descr": "Returns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.",
                "name": "Intl.PluralRules.supportedLocalesOf()"
            },
            {
                "descr": "A reference to Intl.PluralRules.",
                "name": "Intl.PluralRules.prototype.constructor"
            },
            {
                "descr": "Returns a new object with properties reflecting the locale and collation options computed during initialization of the object.",
                "name": "Intl.PluralRules.prototype.resolvedOptions()"
            },
            {
                "descr": "Returns a String indicating which plurar rule to use for locale-aware formatting.",
                "name": "Intl.PluralRules.prototype.select()"
            }
        ],
        "path": "javascript/global_objects/pluralrules",
        "syntax": "new Intl.PluralRules([locales[, options]])",
        "type": "PluralRules"
    },
    "PluralRules.supportedLocalesOf": {
        "descr": "The Intl.PluralRules.supportedLocalesOf() method returns an array containing those of the provided locales that are supported in plural formatting without having to fall back to the runtime's default locale.",
        "name": "PluralRules.supportedLocalesOf",
        "params": [
            {
                "descr": "A string with a BCP 47 language tag, or an array of such strings. ",
                "name": "locales"
            },
            {
                "descr": "Optional. An object that may have the following property:  localeMatcher The locale matching algorithm to use. ",
                "name": "options"
            }
        ],
        "path": "javascript/global_objects/pluralrules/supportedlocalesof",
        "syntax": "Intl.PluralRules.supportedLocalesOf(locales[, options])",
        "type": "PluralRules"
    },
    "Pointer Lock API": {
        "descr": "The Pointer Lock API (formerly called Mouse Lock API) provides input methods based on the movement of the mouse over time (i.e., deltas), not just the absolute position of the mouse cursor in the viewport. It gives you access to raw mouse movement, locks the target of mouse events to a single element, eliminates limits on how far mouse movement can go in a single direction, and removes the cursor from view. It is ideal for first person 3D games, for example.",
        "name": "Pointer Lock API",
        "params": [],
        "path": "dom/pointer_lock_api",
        "syntax": "requestPointerLock()",
        "type": "Pointer Events"
    },
    "Pointer events": {
        "descr": "Most of today's web content assumes the user's pointing device will be a mouse. However, since many devices support other types of pointing input devices, such as pen/stylus and touch surfaces, extensions to the existing pointing device event models are needed and pointer events address that need.",
        "name": "Pointer events",
        "params": [
            {
                "descr": "Any pointer input device that can produce events. ",
                "name": "active pointer"
            },
            {
                "descr": "Pointer capture allows the events for a pointer to be retargeted to a particular element other than the normal hit test result of the pointer's location.",
                "name": "pointer capture"
            }
        ],
        "path": "dom/pointer_events",
        "syntax": "PointerEvent interface extends the MouseEvent interface and has the following properties (all of them are Read only ).",
        "type": "Pointer Events"
    },
    "PointerEvent.constructor": {
        "descr": "The PointerEvent() constructor creates a new synthetic and untrusted PointerEvent object instance.",
        "name": "PointerEvent.constructor",
        "params": [
            {
                "descr": "Is a DOMString representing the name of the event (see PointerEvent event types).",
                "name": "type"
            },
            {
                "descr": "Is a PointerEventInit dictionary, having the following fields:   pointerId — optional and defaulting to 0, of type long, that sets the value of the instance's PointerEvent.pointerId. ",
                "name": "PointerEventInitOptional"
            }
        ],
        "path": "dom/pointerevent/pointerevent",
        "syntax": "event = new PointerEvent(type, PointerEventInit);",
        "type": "Pointer Events"
    },
    "PointerEvent.getCoalescedEvents": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "PointerEvent.getCoalescedEvents",
        "params": [],
        "path": "dom/pointerevent/getcoalescedevents",
        "syntax": "var pointerEvents[] = PointerEvent.getCoalescedEvents()",
        "type": "Pointer Events"
    },
    "PointerEvent.height": {
        "descr": "The height read-only property of the PointerEvent interface represents the height of the pointer's contact geometry, along the Y axis (in CSS pixels). Depending on the source of the pointer device (for example a finger), for a given pointer, each event may produce a different value.",
        "name": "PointerEvent.height",
        "params": [
            {
                "descr": "The height of the event's contact area (in CSS pixels).",
                "name": "contactHeight"
            }
        ],
        "path": "dom/pointerevent/height",
        "syntax": "var contactHeight = pointerEvent.height;  Return value  contactHeight The height of the event's contact area (in CSS pixels).  Example",
        "type": "Pointer Events"
    },
    "PointerEvent.isPrimary": {
        "descr": "The PointerEvent.isPrimary read-only property indicates whether or not the pointer device that created the event is the primary pointer. Returns true if the pointer that caused the event to be fired is the primary device and returns false otherwise.",
        "name": "PointerEvent.isPrimary",
        "params": [
            {
                "descr": "Returns true if the pointer for this event is the primary pointer and returns false otherwise.",
                "name": "isPrimary"
            }
        ],
        "path": "dom/pointerevent/isprimary",
        "syntax": "var isPrimary = pointerEvent.isPrimary;  Return value  isPrimary Returns true if the pointer for this event is the primary pointer and returns false otherwise.  Example This example illustrates using the value of the isPrimary to call the appropriate processing function. target.addEventListener(\"pointerdown\", function(ev) { if (ev.isPrimary) process_primary_pointer(ev);\n or  else process_secondary_pointer(ev);\n or  }, false);",
        "type": "Pointer Events"
    },
    "PointerEvent.pointerId": {
        "descr": "An identifier assigned to a pointer event that is unique from the identifiers of all active pointer events at the time. Authors cannot assume values convey any particular meaning other than an identifier for the pointer that is unique from all other active pointers.",
        "name": "PointerEvent.pointerId",
        "params": [
            {
                "descr": "The pointer event's unique identifier number.",
                "name": "id"
            }
        ],
        "path": "dom/pointerevent/pointerid",
        "syntax": "var id = pointerEvent.pointerId;  Return value  id The pointer event's unique identifier number.  Example This example illustrates the PointerEvent interface's pointerId property. The following code snippet compares a previously saved pointer id with the identifier of the pointerdown event that was just fired. var id; target.addEventListener(\"pointerdown\", function(ev) { // Compare previous id that was cached with this event's id // and handle accordingly if (id == ev.pointerId) process_event(ev);\n or  }, false);",
        "type": "Pointer Events"
    },
    "PointerEvent.pointerType": {
        "descr": "The pointerType read-only property of the PointerEvent interface indicates the device type that caused the pointer event. The supported values are the following strings:",
        "name": "PointerEvent.pointerType",
        "params": [
            {
                "descr": "The event was generated by a mouse device.",
                "name": "mouse"
            },
            {
                "descr": "The event was generated by a pen or stylus device.",
                "name": "pen"
            },
            {
                "descr": "The event was generated by a touch such as a finger.",
                "name": "touch"
            },
            {
                "descr": "The event's pointer type, either the string mouse, pen or touch.",
                "name": "pType"
            }
        ],
        "path": "dom/pointerevent/pointertype",
        "syntax": "var pType = pointerEvent.pointerType;  Return value  pType The event's pointer type, either the string mouse, pen or touch.  Example This example illustrates using the value of the pointerType to call the appropriate pointer type processing function. targetElement.addEventListener(\"pointerdown\", function(ev) { // Call the appropriate pointer type handler switch (ev.pointerType) { case \"mouse\": process_pointer_mouse(ev);\n or  break; case \"pen\": process_pointer_pen(ev);\n or  break; case \"touch\": process_pointer_touch(ev);\n or  break; default: console.log(\"pointerType \" + ev.pointerType + \" is Not suported\");\n or  } }, false);",
        "type": "Pointer Events"
    },
    "PointerEvent.pressure": {
        "descr": "The normalized pressure of the pointer input in the range of 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively. For hardware that does not support pressure, including but not limited to mouse, the value MUST be 0.5 when the pointer is active and 0 otherwise.",
        "name": "PointerEvent.pressure",
        "params": [
            {
                "descr": "The amount of pressure applied to the pointer.",
                "name": "pressure"
            }
        ],
        "path": "dom/pointerevent/pressure",
        "syntax": "var pressure = pointerEvent.pressure;  Return value  pressure The amount of pressure applied to the pointer.  Example This example illustrates using the pressure property. When a pointerdown event is fired, different functions are called depending on the value of the event's pressure property. someElement.addEventListener('pointerdown', function(ev) { if (ev.pressure == 0) { // No pressure process_no_pressure(ev);\n or  } else if (ev.pressure == 1) { // Maximum pressure process_max_pressure(ev);\n or  } else { // Default process_pressure(ev);\n or  } }, false);",
        "type": "Pointer Events"
    },
    "PointerEvent.tangentialPressure": {
        "descr": "The tangentialPressure read-only property of the PointerEvent interface represents the normalized tangential pressure of the pointer input (also known as barrel pressure or cylinder stress) in the range -1 to 1, where 0 is the neutral position of the control.",
        "name": "PointerEvent.tangentialPressure",
        "params": [],
        "path": "dom/pointerevent/tangentialpressure",
        "syntax": "var tanPressure = pointerEvent.tangentialPressure;  Value A float representing the amount of tangential pressure applied to the pointer. Example When a pointerdown event is fired, different functions are called depending on the value of the event's tangentialPressure property. someElement.addEventListener('pointerdown', function(ev) { if (ev.tangentialPressure == 0) { // No pressure process_no_tanPressure(ev);\n or  } else if (ev.tangentialPressure == 1) { // Maximum pressure process_max_tanPressure(ev);\n or  } else { // Default process_tanPressure(ev);\n or  } }, false);",
        "type": "Pointer Events"
    },
    "PointerEvent.tiltX": {
        "descr": "This property is the angle (in degrees) between the Y-Z plane of the pointer and the screen. This property is typically only useful for a pen/stylus pointer type. The range of values is -90 to 90 degrees and a positive value means a tilt to the right. For devices that do not support this property, the value is 0.",
        "name": "PointerEvent.tiltX",
        "params": [
            {
                "descr": "The angle between the Y-Z plane of the pointer (stylus) and the screen.",
                "name": "tilt"
            }
        ],
        "path": "dom/pointerevent/tiltx",
        "syntax": "var tilt = pointerEvent.tiltX;  Return value  tilt The angle between the Y-Z plane of the pointer (stylus) and the screen.  Example",
        "type": "Pointer Events"
    },
    "PointerEvent.tiltY": {
        "descr": "This property is the angle (in degrees) between the X-Z plane of the pointer and the screen. This property is typically only useful for a pen/stylus pointer type. The range of values is -90 to 90 degrees and a positive value is a tilt toward the user. For devices that do not support this property, the value is 0.",
        "name": "PointerEvent.tiltY",
        "params": [
            {
                "descr": "The angle between the X-Z plane of the pointer (stylus) and the screen.",
                "name": "tilt"
            }
        ],
        "path": "dom/pointerevent/tilty",
        "syntax": "var tilt = pointerEvent.tiltY;  Return value  tilt The angle between the X-Z plane of the pointer (stylus) and the screen.  Example",
        "type": "Pointer Events"
    },
    "PointerEvent.twist": {
        "descr": "The twist read-only property of the PointerEvent interface represents the clockwise rotation of the transducer (e.g. pen stylus) around its major axis in degrees, with a value in the range 0 to 359.",
        "name": "PointerEvent.twist",
        "params": [],
        "path": "dom/pointerevent/twist",
        "syntax": "var twist = pointerEvent.twist;  Value A long value representing the amount of twist applied to the pointer. Example When a pointerdown event is fired, different functions are called depending on the value of the event's twist property. someElement.addEventListener('pointerdown', function(ev) { if (ev.twist == 0) { // No twist process_no_twist(ev);\n or  } else { // Default process_twist(ev);\n or  } }, false);",
        "type": "Pointer Events"
    },
    "PointerEvent.width": {
        "descr": "The width read-only property of the PointerEvent interface represents the width of the pointer's contact geometry along the x-axis, measured in CSS pixels. Depending on the source of the pointer device (such as a finger), for a given pointer, each event may produce a different value.",
        "name": "PointerEvent.width",
        "params": [
            {
                "descr": "The width of the event's contact area (in CSS pixels).",
                "name": "contactWidth"
            }
        ],
        "path": "dom/pointerevent/width",
        "syntax": "var contactWidth = pointerEvent.width;  Return value  contactWidth The width of the event's contact area (in CSS pixels).  Example",
        "type": "Pointer Events"
    },
    "PopStateEvent": {
        "descr": "An event handler for the popstate event on the window.",
        "name": "PopStateEvent",
        "params": [],
        "path": "dom/popstateevent",
        "syntax": "window.onpopstate = funcRef;    funcRef is a handler function.  The popstate event As an example, a page at http://example.com/example.html running the following code will generate alerts as indicated: window.onpopstate = function(event) { alert(\"location: \" + document.location + \", state: \" + JSON.stringify(event.state));\n or  }; history.pushState({page: 1}, \"title 1\", \"?page=1\");\n or  history.pushState({page: 2}, \"title 2\", \"?page=2\");\n or  history.replaceState({page: 3}, \"title 3\", \"?page=3\");\n or  history.back();\n or  // alerts \"location: http://example.com/example.html?page=1, state: {\"page\":1}\" history.back();\n or  // alerts \"location: http://example.com/example.html, state: null history.go(2);\n or  // alerts \"location: http://example.com/example.html?page=3, state: {\"page\":3});",
        "type": "Events"
    },
    "PositionSensorVRDevice.getImmediateState": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "PositionSensorVRDevice.getImmediateState",
        "params": [],
        "path": "dom/positionsensorvrdevice/getimmediatestate",
        "syntax": "var myPositionstate = PositionSensorVRDevice.getImmediateState();",
        "type": "WebVR"
    },
    "PositionSensorVRDevice.getState": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "PositionSensorVRDevice.getState",
        "params": [],
        "path": "dom/positionsensorvrdevice/getstate",
        "syntax": "var myPositionState = PositionSensorVRDevice.getState();",
        "type": "WebVR"
    },
    "PositionSensorVRDevice.resetSensor": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "PositionSensorVRDevice.resetSensor",
        "params": [],
        "path": "dom/positionsensorvrdevice/resetsensor",
        "syntax": "PositionSensorVRDevice.resetSensor();",
        "type": "WebVR"
    },
    "Presentation.receiver": {
        "descr": "The read-only Presentation attribute receiver, which is only available in browser contexts which are receiving a presentation, returns the PresentationReceiver object which can be used to access and communicate with the browser context which controls the presentation. This property is always null when accessed from outside a browser context which is receiving a presentation.",
        "name": "Presentation.receiver",
        "params": [],
        "path": "dom/presentation/receiver",
        "syntax": "receiver = Presentation.receiver; receiver = navigator.presentation.receiver; Since the Presentation interface is typically accessed through navigation.presentation, the second form of the syntax shown above is the more commonly used. Value If the code is running in a context which is receiving a presentation, the returned value is a PresentationReceiver which can then be used to communicate with the context which is the source of the presentation. If the current context is not receiving a presentation, receiver is null. Example Determining whether or not the context is receiving a presentation You can easily determine whether or not the context is the receiver for a presentation by checking the value of navigator.receiver. If it's a non-null value, then the context is indeed receiving a presentation. If it's null, there's no incoming presentation. if (navigator.receiver) { footer.innerHTML = \"Receiving presentation\"; } else { footer.innerHTML = \"(idle)\"; }",
        "type": "Presentation"
    },
    "PresentationConnection.send": {
        "descr": "The send() method of the PresentationConnection interface tells a controlling browsing context to send binary or text data to a presenting browsing context.",
        "name": "PresentationConnection.send",
        "params": [
            {
                "descr": "The data to send to the presentation context. ",
                "name": "data"
            }
        ],
        "path": "dom/presentationconnection/send",
        "syntax": "PresentationConnection.send(data);",
        "type": "Presentation"
    },
    "PresentationConnection.url": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PresentationConnection.url",
        "params": [],
        "path": "dom/presentationconnection/url",
        "syntax": "var url = PresentationConnection.url Value A USVString containing a URL. Specifications    Specification Status Comment   Presentation APIThe definition of 'url' in that specification. Candidate Recommendation Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   57  ?   51Disabled    51Disabled   Disabled From version 51: this feature is behind the dom.presentation.enabled preference (needs to be set to true). To change preferences in Firefox, visit about:config.    ?   ?   ?        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   No  57  ?   51Disabled    51Disabled   Disabled From version 51: this feature is behind the dom.presentation.enabled",
        "type": "Presentation"
    },
    "PresentationConnectionAvailableEvent.constructor": {
        "descr": "The PresentationConnectionAvailableInit() constructor creates a new PresentationConnectionAvailableEvent.",
        "name": "PresentationConnectionAvailableEvent.constructor",
        "params": [
            {
                "descr": "A DOMSTring giving the name of the event. ",
                "name": "typeArg"
            },
            {
                "descr": "A PresentationConnectionAvailableInit dictionary, which only contains a reference to a PresentationConnection object.",
                "name": "eventInit"
            }
        ],
        "path": "dom/presentationconnectionavailableevent/presentationconnectionavailableevent",
        "syntax": "var pcaEvent = new PresentationConnectionAvailableInit(typeArg, eventInit)",
        "type": "Presentation"
    },
    "PresentationRequest.start": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PresentationRequest.start",
        "params": [],
        "path": "dom/presentationrequest/start",
        "syntax": "var promise = presentationRequest.start() promise.then(function(PresentationConnection) { ... }) .catch(function(error) { ...})",
        "type": "Presentation"
    },
    "ProgressEvent.constructor": {
        "descr": "The ProgressEvent() constructor returns a newly created ProgressEvent, representing the current completion of a long process.",
        "name": "ProgressEvent.constructor",
        "params": [
            {
                "descr": "Is a DOMString representing the name of the type of the ProgressEvent. ",
                "name": "type"
            },
            {
                "descr": "Is a Boolean flag indicating if the total work to be done, and the amount of work already done, by the underlying process is calculable. ",
                "name": "lengthComputable Optional"
            },
            {
                "descr": "Is an unsigned long long representing the amount of work already performed by the underlying process. ",
                "name": "loaded Optional"
            },
            {
                "descr": "Is an unsigned long long representing the total amount of work that the underlying process is in the progress of performing. ",
                "name": "total Optional"
            }
        ],
        "path": "dom/progressevent/progressevent",
        "syntax": "progressEvent = new ProgressEvent(type, {lengthComputable: aBooleanValue, loaded: aNumber, total: aNumber});",
        "type": "Events"
    },
    "Promise": {
        "descr": "The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.",
        "name": "Promise",
        "params": [
            {
                "descr": "A function that is passed with the arguments resolve and reject. ",
                "name": "executor"
            },
            {
                "descr": "Length property whose value is always 1 (number of constructor arguments).",
                "name": "Promise.length"
            },
            {
                "descr": "Represents the prototype for the Promise constructor.",
                "name": "Promise.prototype"
            },
            {
                "descr": "Returns a promise that either fulfills when all of the promises in the iterable argument have fulfilled or rejects as soon as one of the promises in the iterable argument rejects. ",
                "name": "Promise.all(iterable)"
            },
            {
                "descr": "Returns a promise that fulfills or rejects as soon as one of the promises in the iterable fulfills or rejects, with the value or reason from that promise.",
                "name": "Promise.race(iterable)"
            },
            {
                "descr": "Returns a Promise object that is rejected with the given reason.",
                "name": "Promise.reject(reason)"
            },
            {
                "descr": "Returns a Promise object that is resolved with the given value. ",
                "name": "Promise.resolve(value)"
            },
            {
                "descr": "Returns the function that created an instance's prototype. ",
                "name": "Promise.prototype.constructor"
            },
            {
                "descr": "Appends a rejection handler callback to the promise, and returns a new promise resolving to the return value of the callback if it is called, or to its original fulfillment value if the promise is instead fulfilled.",
                "name": "Promise.prototype.catch(onRejected)"
            },
            {
                "descr": "Appends fulfillment and rejection handlers to the promise, and returns a new promise resolving to the return value of the called handler, or to its original settled value if the promise was not handled (i.e. if the relevant handler onFulfilled or onRejected is not a function).",
                "name": "Promise.prototype.then(onFulfilled, onRejected)"
            },
            {
                "descr": "Appends a handler to the promise, and returns a new promise which is resolved when the original promise is resolved. ",
                "name": "Promise.prototype.finally(onFinally)"
            }
        ],
        "path": "javascript/global_objects/promise",
        "syntax": "new Promise( /* executor */ function(resolve, reject) { ... } );",
        "type": "Promise"
    },
    "Promise.all": {
        "descr": "The Promise.all(iterable) method returns a single Promise that resolves when all of the promises in the iterable argument have resolved or when the iterable argument contains no promises. It rejects with the reason of the first promise that rejects.",
        "name": "Promise.all",
        "params": [
            {
                "descr": "An iterable object such as an Array or String.",
                "name": "iterable"
            }
        ],
        "path": "javascript/global_objects/promise/all",
        "syntax": "Promise.all(iterable);",
        "type": "Promise"
    },
    "Promise.race": {
        "descr": "The Promise.race(iterable) method returns a promise that resolves or rejects as soon as one of the promises in the iterable resolves or rejects, with the value or reason from that promise.",
        "name": "Promise.race",
        "params": [
            {
                "descr": "An iterable object, such as an Array. ",
                "name": "iterable"
            }
        ],
        "path": "javascript/global_objects/promise/race",
        "syntax": "Promise.race(iterable);",
        "type": "Promise"
    },
    "Promise.reject": {
        "descr": "The Promise.reject(reason) method returns a Promise object that is rejected with the given reason.",
        "name": "Promise.reject",
        "params": [
            {
                "descr": "Reason why this Promise rejected.",
                "name": "reason"
            }
        ],
        "path": "javascript/global_objects/promise/reject",
        "syntax": "Promise.reject(reason);",
        "type": "Promise"
    },
    "Promise.resolve": {
        "descr": "The Promise.resolve(value) method returns a Promise object that is resolved with the given value. If the value is a promise, that promise is returned; if the value is a thenable (i.e. has a \"then\" method), the returned promise will \"follow\" that thenable, adopting its eventual state; otherwise the returned promise will be fulfilled with the value. This function flattens nested layers of promise-like objects (e.g. a promise that resolves to a promise that resolves to something) into a single layer.",
        "name": "Promise.resolve",
        "params": [
            {
                "descr": "Argument to be resolved by this Promise. ",
                "name": "value"
            }
        ],
        "path": "javascript/global_objects/promise/resolve",
        "syntax": "Promise.resolve(value);\n or  Promise.resolve(promise);\n or  Promise.resolve(thenable);",
        "type": "Promise"
    },
    "PromiseRejectionEvent.constructor": {
        "descr": "The PromiseRejectionEvent() constructor returns a newly created PromiseRejectionEvent, which represents events fired when a JavaScript Promise is rejected. With promise rejection events, it becomes possible to detect and report promises which fail and whose failures go unnoticed. It also becomes easier to write a global handler for errors.",
        "name": "PromiseRejectionEvent.constructor",
        "params": [
            {
                "descr": "A string representing the name of the type of the PromiseRejectionEvent. ",
                "name": "type"
            },
            {
                "descr": "An Object specifying details about the rejection which occurred:  promise The Promise that was rejected.",
                "name": "options"
            },
            {
                "descr": "Any value or Object which represents the reason the promise was rejected. ",
                "name": "reason"
            }
        ],
        "path": "dom/promiserejectionevent/promiserejectionevent",
        "syntax": "PromiseRejectionEvent = PromiseRejectionEvent(type, options);",
        "type": "Events"
    },
    "PromiseRejectionEvent.promise": {
        "descr": "The PromiseRejectionEvent interface's promise read-only property indicates the JavaScript Promise which was rejected. You can examine the event's PromiseRejectionEvent.reason property to learn why the promise was rejected.",
        "name": "PromiseRejectionEvent.promise",
        "params": [],
        "path": "dom/promiserejectionevent/promise",
        "syntax": "promise = PromiseRejectionEvent.promise Value The JavaScript Promise which was rejected, and whose rejection went unhandled. Examples This example listens for unhandled promises and, if the reason is an object with a code field containing the text \"Module not ready\", it sets up an idle callback that will retry the task that failed to execute correctly. event.preventDefault()",
        "type": "Events"
    },
    "PromiseRejectionEvent.reason": {
        "descr": "The read-only PromiseRejection property reason read-only property is any JavaScript value or Object which provides the reason passed into Promise.reject(). This in theory provides information about why the promise was rejected.",
        "name": "PromiseRejectionEvent.reason",
        "params": [],
        "path": "dom/promiserejectionevent/reason",
        "syntax": "reason = PromiseRejectionEvent.reason Value A value or object which provides information you can use to understand why the promise was rejected. This could be anything from an error code to an object with text, links, and whatever else you might wish to include. Examples window.onunhandledrejection = function(e) { console.log(e.reason);\n or  });",
        "type": "Events"
    },
    "Property Accessors": {
        "descr": "Property accessors provide access to an object's properties by using the dot notation or the bracket notation.",
        "name": "Property Accessors",
        "params": [],
        "path": "javascript/operators/property_accessors",
        "syntax": "object.property object['property']  Description One can think of an object as an associative array (a.k.a. map, dictionary, hash, lookup table). The keys in this array are the names of the object's properties. It's typical when speaking of an object's properties to make a distinction between properties and methods. However, the property/method distinction is little more than a convention. A method is simply a property that can be called, for example if it has a reference to a Function instance as its value.",
        "type": "Operators"
    },
    "Proxy": {
        "descr": "The Proxy object is used to define custom behavior for fundamental operations (e.g. property lookup, assignment, enumeration, function invocation, etc).",
        "name": "Proxy",
        "params": [
            {
                "descr": "Placeholder object which contains traps.",
                "name": "handler"
            },
            {
                "descr": "The methods that provide property access. ",
                "name": "traps"
            },
            {
                "descr": "Object which the proxy virtualizes. ",
                "name": "target"
            },
            {
                "descr": "A target object to wrap with Proxy. ",
                "name": "target"
            },
            {
                "descr": "An object whose properties are functions which define the behavior of the proxy when an operation is performed on it.",
                "name": "handler"
            },
            {
                "descr": "Creates a revocable Proxy object.",
                "name": "Proxy.revocable()"
            },
            {
                "descr": "A trap for Object.getPrototypeOf.",
                "name": "handler.getPrototypeOf()"
            },
            {
                "descr": "A trap for Object.setPrototypeOf.",
                "name": "handler.setPrototypeOf()"
            },
            {
                "descr": "A trap for Object.isExtensible.",
                "name": "handler.isExtensible()"
            },
            {
                "descr": "A trap for Object.preventExtensions.",
                "name": "handler.preventExtensions()"
            },
            {
                "descr": "A trap for Object.getOwnPropertyDescriptor.",
                "name": "handler.getOwnPropertyDescriptor()"
            },
            {
                "descr": "A trap for Object.defineProperty.",
                "name": "handler.defineProperty()"
            },
            {
                "descr": "A trap for the in operator.",
                "name": "handler.has()"
            },
            {
                "descr": "A trap for getting property values.",
                "name": "handler.get()"
            },
            {
                "descr": "A trap for setting property values.",
                "name": "handler.set()"
            },
            {
                "descr": "A trap for the delete operator.",
                "name": "handler.deleteProperty()"
            },
            {
                "descr": "A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.",
                "name": "handler.ownKeys()"
            },
            {
                "descr": "A trap for a function call.",
                "name": "handler.apply()"
            },
            {
                "descr": "A trap for the new operator.",
                "name": "handler.construct()"
            }
        ],
        "path": "javascript/global_objects/proxy",
        "syntax": "var p = new Proxy(target, handler);",
        "type": "Global Objects"
    },
    "Proxy.handler.apply": {
        "descr": "The handler.apply() method is a trap for a function call.",
        "name": "Proxy.handler.apply",
        "params": [
            {
                "descr": "The target object.",
                "name": "target"
            },
            {
                "descr": "The this argument for the call.",
                "name": "thisArg"
            },
            {
                "descr": "The list of arguments for the call.",
                "name": "argumentsList"
            }
        ],
        "path": "javascript/global_objects/proxy/handler/apply",
        "syntax": "var p = new Proxy(target, { apply: function(target, thisArg, argumentsList) { } });",
        "type": "Proxy"
    },
    "Proxy.handler.construct": {
        "descr": "The handler.construct() method is a trap for the new operator. In order for the new operation to be valid on the resulting Proxy object, the target used to initialize the proxy must itself have a [[Construct]] internal method (i.e. new target must be valid).",
        "name": "Proxy.handler.construct",
        "params": [
            {
                "descr": "The target object.",
                "name": "target"
            },
            {
                "descr": "The list of arguments for the constructor.",
                "name": "argumentsList"
            },
            {
                "descr": "The constructor that was originally called, p above.",
                "name": "newTarget"
            }
        ],
        "path": "javascript/global_objects/proxy/handler/construct",
        "syntax": "var p = new Proxy(target, { construct: function(target, argumentsList, newTarget) { } });",
        "type": "Proxy"
    },
    "Proxy.handler.defineProperty": {
        "descr": "The handler.defineProperty() method is a trap for Object.defineProperty().",
        "name": "Proxy.handler.defineProperty",
        "params": [
            {
                "descr": "The target object.",
                "name": "target"
            },
            {
                "descr": "The name or Symbol of the property whose description is to be retrieved.",
                "name": "property"
            },
            {
                "descr": "The descriptor for the property being defined or modified.",
                "name": "descriptor"
            }
        ],
        "path": "javascript/global_objects/proxy/handler/defineproperty",
        "syntax": "var p = new Proxy(target, { defineProperty: function(target, property, descriptor) { } });",
        "type": "Proxy"
    },
    "Proxy.handler.deleteProperty": {
        "descr": "The handler.deleteProperty() method is a trap for the delete operator.",
        "name": "Proxy.handler.deleteProperty",
        "params": [
            {
                "descr": "The target object.",
                "name": "target"
            },
            {
                "descr": "The name or Symbol of the property to delete.",
                "name": "property"
            }
        ],
        "path": "javascript/global_objects/proxy/handler/deleteproperty",
        "syntax": "var p = new Proxy(target, { deleteProperty: function(target, property) { } });",
        "type": "Proxy"
    },
    "Proxy.handler.get": {
        "descr": "The handler.get() method is a trap for getting a property value.",
        "name": "Proxy.handler.get",
        "params": [
            {
                "descr": "The target object.",
                "name": "target"
            },
            {
                "descr": "The name or Symbol of the property to get.",
                "name": "property"
            },
            {
                "descr": "Either the proxy or an object that inherits from the proxy.",
                "name": "receiver"
            }
        ],
        "path": "javascript/global_objects/proxy/handler/get",
        "syntax": "var p = new Proxy(target, { get: function(target, property, receiver) { } });",
        "type": "Proxy"
    },
    "Proxy.handler.getOwnPropertyDescriptor": {
        "descr": "The handler.getOwnPropertyDescriptor() method is a trap for Object.getOwnPropertyDescriptor().",
        "name": "Proxy.handler.getOwnPropertyDescriptor",
        "params": [
            {
                "descr": "The target object.",
                "name": "target"
            },
            {
                "descr": "The name of the property whose description should be retrieved.",
                "name": "prop"
            }
        ],
        "path": "javascript/global_objects/proxy/handler/getownpropertydescriptor",
        "syntax": "var p = new Proxy(target, { getOwnPropertyDescriptor: function(target, prop) { } });",
        "type": "Proxy"
    },
    "Proxy.handler.getPrototypeOf": {
        "descr": "The handler.getPrototypeOf() method is a trap for the [[GetPrototypeOf]] internal method.",
        "name": "Proxy.handler.getPrototypeOf",
        "params": [
            {
                "descr": "The target object.",
                "name": "target"
            }
        ],
        "path": "javascript/global_objects/proxy/handler/getprototypeof",
        "syntax": "var p = new Proxy(obj, { getPrototypeOf(target) { ... } });",
        "type": "Proxy"
    },
    "Proxy.handler.has": {
        "descr": "The handler.has() method is a trap for the in operator.",
        "name": "Proxy.handler.has",
        "params": [
            {
                "descr": "The target object.",
                "name": "target"
            },
            {
                "descr": "The name or Symbol of the property to check for existence.",
                "name": "prop"
            }
        ],
        "path": "javascript/global_objects/proxy/handler/has",
        "syntax": "var p = new Proxy(target, { has: function(target, prop) { } });",
        "type": "Proxy"
    },
    "Proxy.handler.isExtensible": {
        "descr": "The handler.isExtensible() method is a trap for Object.isExtensible().",
        "name": "Proxy.handler.isExtensible",
        "params": [
            {
                "descr": "The target object.",
                "name": "target"
            }
        ],
        "path": "javascript/global_objects/proxy/handler/isextensible",
        "syntax": "var p = new Proxy(target, { isExtensible: function(target) { } });",
        "type": "Proxy"
    },
    "Proxy.handler.ownKeys": {
        "descr": "The handler.ownKeys() method is a trap for Reflect.ownKeys().",
        "name": "Proxy.handler.ownKeys",
        "params": [
            {
                "descr": "The target object.",
                "name": "target"
            }
        ],
        "path": "javascript/global_objects/proxy/handler/ownkeys",
        "syntax": "var p = new Proxy(target, { ownKeys: function(target) { } });",
        "type": "Proxy"
    },
    "Proxy.handler.preventExtensions": {
        "descr": "The handler.preventExtensions() method is a trap for Object.preventExtensions().",
        "name": "Proxy.handler.preventExtensions",
        "params": [
            {
                "descr": "The target object.",
                "name": "target"
            }
        ],
        "path": "javascript/global_objects/proxy/handler/preventextensions",
        "syntax": "var p = new Proxy(target, { preventExtensions: function(target) { } });",
        "type": "Proxy"
    },
    "Proxy.handler.set": {
        "descr": "The handler.set() method is a trap for setting a property value.",
        "name": "Proxy.handler.set",
        "params": [
            {
                "descr": "The target object.",
                "name": "target"
            },
            {
                "descr": "The name or Symbol of the property to set.",
                "name": "property"
            },
            {
                "descr": "The new value of the property to set.",
                "name": "value"
            },
            {
                "descr": "The object to which the assignment was originally directed. ",
                "name": "receiver"
            }
        ],
        "path": "javascript/global_objects/proxy/handler/set",
        "syntax": "var p = new Proxy(target, { set: function(target, property, value, receiver) { } });",
        "type": "Proxy"
    },
    "Proxy.handler.setPrototypeOf": {
        "descr": "The handler.setPrototypeOf() method is a trap for Object.setPrototypeOf().",
        "name": "Proxy.handler.setPrototypeOf",
        "params": [
            {
                "descr": "The target object.",
                "name": "target"
            },
            {
                "descr": "The object's new prototype or null.",
                "name": "prototype"
            }
        ],
        "path": "javascript/global_objects/proxy/handler/setprototypeof",
        "syntax": "var p = new Proxy(target, { setPrototypeOf: function(target, prototype) { } });",
        "type": "Proxy"
    },
    "Proxy.revocable": {
        "descr": "The Proxy.revocable() method is used to create a revocable Proxy object.",
        "name": "Proxy.revocable",
        "params": [
            {
                "descr": "A target object to wrap with Proxy. ",
                "name": "target"
            },
            {
                "descr": "An object whose properties are functions which define the behavior of the proxy when an operation is performed on it.",
                "name": "handler"
            },
            {
                "descr": "A Proxy object created with new Proxy(target, handler) call.",
                "name": "proxy"
            },
            {
                "descr": "A function with no argument to invalidate (switch off) the proxy.",
                "name": "revoke"
            }
        ],
        "path": "javascript/global_objects/proxy/revocable",
        "syntax": "Proxy.revocable(target, handler);",
        "type": "Proxy"
    },
    "PushEvent.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PushEvent.constructor",
        "params": [
            {
                "descr": "A DOMString defining the type of PushEvent. ",
                "name": "type"
            },
            {
                "descr": "An options object containing any initialization data you want to populate the PushEvent object with. ",
                "name": "eventInitDict Optional"
            }
        ],
        "path": "dom/pushevent/pushevent",
        "syntax": "var myPushEvent = new PushEvent(type, eventInitDict);",
        "type": "Push"
    },
    "PushEvent.data": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PushEvent.data",
        "params": [],
        "path": "dom/pushevent/data",
        "syntax": "var myPushData = PushEvent.data; Value A PushMessageData object. Examples The following example takes data from a PushEvent and displays it on all of the service workers' clients. self.addEventListener('push', function(event) { if (!(self.Notification && self.Notification.permission === 'granted')) { return; } var data = {}; if (event.data) { data = event.data.json();\n or  } var title = data.title || \"Something Has Happened\"; var message = data.message || \"Here's something you might want to check out.\"; var icon = \"images/new-notification.png\"; var notification = new Notification(title, { body: message, tag: 'simple-push-demo-notification', icon: icon });\n or  notification.addEventListener('click', function() { if (clients.openWindow) { clients.openWindow('https://example.blog.com/2015/03/04/something-new.html');\n or  } });\n or  });",
        "type": "Push"
    },
    "PushManager.getSubscription": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PushManager.getSubscription",
        "params": [],
        "path": "dom/pushmanager/getsubscription",
        "syntax": "​PushManager.getSubscription().then(function(pushSubscription) { ... } );",
        "type": "Push"
    },
    "PushManager.permissionState": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PushManager.permissionState",
        "params": [
            {
                "descr": "An object containing optional configuration parameters. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/pushmanager/permissionstate",
        "syntax": "PushManager.permissionState(options).then(function(PushMessagingState) { ... });",
        "type": "Push"
    },
    "PushManager.subscribe": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PushManager.subscribe",
        "params": [
            {
                "descr": "An object containing optional configuration parameters. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/pushmanager/subscribe",
        "syntax": "​PushManager.subscribe(options).then(function(pushSubscription) { ... } );",
        "type": "Push"
    },
    "PushManager.supportedContentEncodings": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PushManager.supportedContentEncodings",
        "params": [],
        "path": "dom/pushmanager/supportedcontentencodings",
        "syntax": "var encodings[] = PushManager.supportedContentEncodings Value An array of strings. Specifications    Specification Status Comment   Push APIThe definition of 'supportedContentEncodings' in that specification. Working Draft Initial definition.    Browser CompatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   60  16Disabled    16Disabled   Disabled From version 16: this feature is behind the Enable service workers preference.  17     44   44   Service workers (and Push) have been disabled in the Firefox 45 and 52 Extended Support Releases (ESR.)    No  47  No       Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   No  60  Yes  48   48   Push enabled by default.    47  No  4.0     Edit this page on MDN",
        "type": "Push"
    },
    "PushMessageData.arrayBuffer": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PushMessageData.arrayBuffer",
        "params": [],
        "path": "dom/pushmessagedata/arraybuffer",
        "syntax": "var myArrayBuffer = PushEvent.data.arrayBuffer();",
        "type": "Push"
    },
    "PushMessageData.blob": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PushMessageData.blob",
        "params": [],
        "path": "dom/pushmessagedata/blob",
        "syntax": "var myBlob = PushEvent.data.blob();",
        "type": "Push"
    },
    "PushMessageData.json": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PushMessageData.json",
        "params": [],
        "path": "dom/pushmessagedata/json",
        "syntax": "var myData = PushEvent.data.json();",
        "type": "Push"
    },
    "PushMessageData.text": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PushMessageData.text",
        "params": [],
        "path": "dom/pushmessagedata/text",
        "syntax": "var myText = PushEvent.data.text();",
        "type": "Push"
    },
    "PushSubscription.endpoint": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PushSubscription.endpoint",
        "params": [],
        "path": "dom/pushsubscription/endpoint",
        "syntax": "var myEnd = pushSubscription.endpoint; Value A USVString. Example navigator.serviceWorker.ready.then(function(reg) { reg.pushManager.subscribe({userVisibleOnly: true}).then(function(subscription) { console.log(subscription.endpoint);\n or  // At this point you would most likely send the subscription // endpoint to your server, save it, then use it to send a // push message at a later date }) }));",
        "type": "Push"
    },
    "PushSubscription.getKey": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PushSubscription.getKey",
        "params": [
            {
                "descr": "A DOMString representing the encryption method used to generate a client key. ",
                "name": "name"
            }
        ],
        "path": "dom/pushsubscription/getkey",
        "syntax": "​var key = subscription.getKey(name);",
        "type": "Push"
    },
    "PushSubscription.options": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PushSubscription.options",
        "params": [],
        "path": "dom/pushsubscription/options",
        "syntax": "var options = PushSubscription.options Value An read-only options object containing the following values:   userVisibleOnly: A boolean, indicating that the returned push subscription will only be used for messages whose effect is made visible to the user.  applicationServerKey: A public key your push server will use to send messages to client apps via a push server. This value is part of a signing key pair generated by your application server, and usable with elliptic curve digital signature (ECDSA), over the P-256 curve.   Specifications",
        "type": "Push"
    },
    "PushSubscription.toJSON": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PushSubscription.toJSON",
        "params": [],
        "path": "dom/pushsubscription/tojson",
        "syntax": "​mySubscription = subscription.toJSON()",
        "type": "Push"
    },
    "PushSubscription.unsubscribe": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "PushSubscription.unsubscribe",
        "params": [],
        "path": "dom/pushsubscription/unsubscribe",
        "syntax": "​PushSubscription.unsubscribe().then(function(Boolean) { ... });",
        "type": "Push"
    },
    "RTCDTMFSender.insertDTMF": {
        "descr": "The insertDTMF() method on the RTCDTMFSender interface starts sending DTMF tones to the remote peer over the RTCPeerConnection. Sending of the tones is performed asynchronously, with tonechange events sent to the RTCDTMFSender every time a tone starts or ends.",
        "name": "RTCDTMFSender.insertDTMF",
        "params": [
            {
                "descr": "A DOMString containing the DTMF codes to be transmitted to the recipient. ",
                "name": "tones"
            },
            {
                "descr": "The amount of time, in milliseconds, that each DTMF tone should last. ",
                "name": "duration Optional"
            },
            {
                "descr": "The length of time, in milliseconds, to wait between tones. ",
                "name": "interToneGap Optional"
            },
            {
                "descr": "The DTMF tones couldn't be sent because the track has been stopped, or is in a read-only or inactive state.",
                "name": "InvalidStateError"
            },
            {
                "descr": "One or more of the characters in tones is not valid DTMF.",
                "name": "InvalidCharacterError"
            }
        ],
        "path": "dom/rtcdtmfsender/insertdtmf",
        "syntax": "RTCDTMFSender.insertDTMF(tones[, duration[, interToneGap]]);",
        "type": "WebRTC"
    },
    "RTCDTMFSender.toneBuffer": {
        "descr": "The RTCDTMFSender interface's toneBuffer property returns a string containing a list of the DTMF tones currently queued for sending to the remote peer over the RTCPeerConnection. To place tones into the buffer, call insertDTMF().",
        "name": "RTCDTMFSender.toneBuffer",
        "params": [
            {
                "descr": "These characters represent the digit keys on a telephone keypad.",
                "name": "The digits 0-9"
            },
            {
                "descr": "These characters represent the \"A\" through \"D\" keys which are part of the DTMF standard but not included on most telephones. ",
                "name": "The letters A-D"
            },
            {
                "descr": "These correspond to the similarly-labeled keys which are typically on the bottom row of the telephone keypad.",
                "name": "The pound/hash sign (\"#\") and the asterisk (\"*\")"
            },
            {
                "descr": "This character instructs the dialing process to pause for two seconds before sending the next character in the buffer.",
                "name": "The comma (\",\")"
            }
        ],
        "path": "dom/rtcdtmfsender/tonebuffer",
        "syntax": "var toneBuffer = RTCDTMFSender.toneBuffer; Value A DOMString listing the tones to be played. If the string is empty, there are no tones pending. Tone buffer format The tone buffer is a string which can contain any combination of the characters that are permitted by the DTMF standard. DTMF tone characters  The digits 0-9 These characters represent the digit keys on a telephone keypad. The letters A-D These characters represent the \"A\" through \"D\" keys which are part of the DTMF standard but not included on most telephones. These are not interpreted as digits. Lower-case \"a\"-\"d\" automatically gets converted to upper-case. The pound/hash sign (\"#\") and the asterisk (\"*\") These correspond to the similarly-labeled keys which are typically on the bottom row of the telephone keypad. The comma (\",\") This character instructs the dialing process to pause for two seconds before sending the next character in the buffer.   All other characters are unrecognized and will cause insertDTMF()",
        "type": "WebRTC"
    },
    "RTCDTMFToneChangeEvent.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCDTMFToneChangeEvent.constructor",
        "params": [
            {
                "descr": "A DOMString containing the name of the event. ",
                "name": "type"
            },
            {
                "descr": "A dictionary of type RTCDTMFToneChangeEventInit, which may contain one or more of the following fields:  tone A DOMString containing a single DTMF tone character which has just begun to play, or an empty string (\"\") to indicate that the previous tone has stopped playing. See Tone characters for details on what characters are permitted.",
                "name": "options"
            },
            {
                "descr": "These characters represent the digit keys on a telephone keypad.",
                "name": "The digits 0-9"
            },
            {
                "descr": "These characters represent the \"A\" through \"D\" keys which are part of the DTMF standard but not included on most telephones. ",
                "name": "The letters A-D"
            },
            {
                "descr": "These correspond to the similarly-labeled keys which are typically on the bottom row of the telephone keypad.",
                "name": "The pound/hash sign (\"#\") and the asterisk (\"*\")"
            },
            {
                "descr": "This character instructs the dialing process to pause for two seconds before sending the next character in the buffer.",
                "name": "The comma (\",\")"
            }
        ],
        "path": "dom/rtcdtmftonechangeevent/rtcdtmftonechangeevent",
        "syntax": "var event = new RTCDTMFToneChangeEvent(type, options);",
        "type": "WebRTC"
    },
    "RTCDTMFToneChangeEvent.tone": {
        "descr": "The read-only property RTCDTMFToneChangeEvent.tone returns the DTMF character which has just begun to play, or an empty string (\"\"). if all queued tones have finished playing (that is, RTCDTMFSender.toneBuffer is empty).",
        "name": "RTCDTMFToneChangeEvent.tone",
        "params": [],
        "path": "dom/rtcdtmftonechangeevent/tone",
        "syntax": "var tone = RTCDTMFToneChangeEvent.tone; Example This example establishes a handler for the tonechange event which updates an element to display the currently playing tone in its content, or, if all tones have played, the string \"<none>\". dtmfSender.ontonechange = function( ev ) { let tone = ev.tone; if (tone === \"\") { tone = \"&lt;none&gt;\" } document.getElementById(\"playingTone\").innerText = tone; };",
        "type": "WebRTC"
    },
    "RTCDataChannel.binaryType": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCDataChannel.binaryType",
        "params": [
            {
                "descr": "Received binary messages' contents will be contained in Blob objects.",
                "name": "\"blob\""
            },
            {
                "descr": "Received binary messages' contents will be contained in ArrayBuffer objects.",
                "name": "\"arraybuffer\""
            }
        ],
        "path": "dom/rtcdatachannel/binarytype",
        "syntax": "var type = aDataChannel.binaryType; aDataChannel.binaryType = type;  Value A DOMString that can have one of these values:  \"blob\" Received binary messages' contents will be contained in Blob objects. \"arraybuffer\" Received binary messages' contents will be contained in ArrayBuffer objects.  Example This code configures a data channel to receive binary data in ArrayBuffer objects, and establishes a listener for message events which constructs a string representing the received data as a list of hexadecimal byte values. var dc = peerConnection.createDataChannel(\"Binary\");\n or  dc.binaryType = \"arraybuffer\"; dc.onmessage = function(event) { let byteArray = new Uint8Array(event.data);\n or  let hexString = \"\"; byteArray.forEach(function(byte) { hexString += byte.toString(16) + \" \"; });\n or  };);",
        "type": "WebRTC"
    },
    "RTCDataChannel.bufferedAmount": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCDataChannel.bufferedAmount",
        "params": [],
        "path": "dom/rtcdatachannel/bufferedamount",
        "syntax": "var amount = aDataChannel.bufferedAmount;  Value The number of bytes of data currently queued to be sent over the data channel but have not yet been sent. Example The snippet below includes a function which changes the contents of a block with the ID \"bufferSize\" to a string indicating the number of bytes currently buffered on an RTCDataChannel. var dc = peerConnection.createDataChannel(\"File Transfer\");\n or  /* ... */ function showBufferedAmount(channel) { let el = document.getElementbyId(\"bufferSize\");\n or  el.innerHTML = channel.bufferedAmount + \" bytes\"; });",
        "type": "WebRTC"
    },
    "RTCDataChannel.bufferedAmountLowThreshold": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCDataChannel.bufferedAmountLowThreshold",
        "params": [],
        "path": "dom/rtcdatachannel/bufferedamountlowthreshold",
        "syntax": "var threshold = aDataChannel.bufferedAmountLowThreshold; aDataChannel.bufferedAmountLowThreshold = threshold;  Value The number of queued outgoing data bytes below which the buffer is considered to be \"low.\" Example In this snippet of code, bufferedAmountLowThreshold is set to 64kB, and a handler for the bufferedamountlow event is established by setting the RTCDataChannel.onbufferedamountlow property to a function which should send more data into the buffer by calling send()",
        "type": "WebRTC"
    },
    "RTCDataChannel.close": {
        "descr": "The RTCDataChannel.close() method closes the RTCDataChannel. Either peer is permitted to call this method to initiate closure of the channel.",
        "name": "RTCDataChannel.close",
        "params": [],
        "path": "dom/rtcdatachannel/close",
        "syntax": "RTCDataChannel.close();",
        "type": "WebRTC"
    },
    "RTCDataChannel.id": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCDataChannel.id",
        "params": [],
        "path": "dom/rtcdatachannel/id",
        "syntax": "var id = aDataChannel.id;  Value An unsigned short value (that is, an integer between 0 and 65,535) which uniquely identifies the data channel.",
        "type": "WebRTC"
    },
    "RTCDataChannel.label": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCDataChannel.label",
        "params": [],
        "path": "dom/rtcdatachannel/label",
        "syntax": "var name = aDataChannel.label;  Value A string identifier assigned by the Web site or app when the data channel was created, as specified when RTCPeerConnection.createDataChannel()",
        "type": "WebRTC"
    },
    "RTCDataChannel.maxPacketLifeTime": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCDataChannel.maxPacketLifeTime",
        "params": [],
        "path": "dom/rtcdatachannel/maxpacketlifetime",
        "syntax": "var lifetime = aDataChannel.maxPacketLifeTime;  Value The number of milliseconds over which the browser may continue to attempt to transmit the message until it either succeeds or gives up. If not set when RTCPeerConnection.createDataChannel()",
        "type": "WebRTC"
    },
    "RTCDataChannel.maxRetransmits": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCDataChannel.maxRetransmits",
        "params": [],
        "path": "dom/rtcdatachannel/maxretransmits",
        "syntax": "var tries = aDataChannel.maxRetransmits;  Value The maximum number of times the browser will try to send a message before giving up, or null if not set when RTCPeerConnection.createDataChannel()",
        "type": "WebRTC"
    },
    "RTCDataChannel.negotiated": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCDataChannel.negotiated",
        "params": [],
        "path": "dom/rtcdatachannel/negotiated",
        "syntax": "var negotiated = aDataChannel.negotiated;  Value true if the RTCDataChannel's connection was negotiated by the Web app itself; false if the negotiation was handled by the WebRTC layer. The default is false. Example // TBD  Specifications    Specification Status Comment     WebRTC 1.0: Real-time Communication Between BrowsersThe definition of 'RTCDataChannel.negotiated' in that specification. Candidate Recommendation Initial specification.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   56  ?   No  No  43  No       Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   56  56  ?   No  43  ?   6.0    See also  WebRTC RTCDataChannel RTCPeerConnection.createDataChannel()",
        "type": "WebRTC"
    },
    "RTCDataChannel.onbufferedamountlow": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCDataChannel.onbufferedamountlow",
        "params": [],
        "path": "dom/rtcdatachannel/onbufferedamountlow",
        "syntax": "RTCDataChannel.onbufferedamountlow = function; Value A function which the browser will call to handle the bufferedamountlow event. This function receives as its only input parameter a simple Event object representing the event which has occurred. Example This example responds to the bufferedamountlow event by fetching up to 64kB of a file represented by an object source and calling RTCDataChannel.send()",
        "type": "WebRTC"
    },
    "RTCDataChannel.onclose": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCDataChannel.onclose",
        "params": [],
        "path": "dom/rtcdatachannel/onclose",
        "syntax": "RTCDataChannel.onclose = function; Value A function which the browser will call to handle the close event. The function receives as its sole input parameter the event itself, as an object of type Event. Example In this sample from a hypothetical instant messaging client, a data channel is created, then handlers for the open and close events are set up to enable and disable user interface objects based on the state of the channel. This way, the message entry field and the send button are only enabled for use when the connection is actually open. let pc = new RTCPeerConnection();\n or  let dc = pc.createDataChannel(\"MessageChannel\")}}; dc.onopen = function(event) { document.getElementById(\"messageBox\").disabled = false; document.getElementById(\"sendButton\").disabled = false; }; dc.onclose = function(event) { document.getElementById(\"messageBox\").disabled = true; document.getElementById(\"sendButton\").disabled = true; } /* Now negotiate the connection, etc... */);",
        "type": "WebRTC"
    },
    "RTCDataChannel.onerror": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCDataChannel.onerror",
        "params": [],
        "path": "dom/rtcdatachannel/onerror",
        "syntax": "RTCDataChannel.onerror = function; Value A function which the browser will call to handle the error event when it occurs on the data channel. This function receives as its only input an ErrorEvent object describing the event which was received. That event object, in turn, describes the error that took place. Example In the example below, a data channel is established, and an onerror handler is added to it. The error handler passes information about the error to a UI library's alert box function to present an error message to the user. let pc = new RTCPeerConnection();\n or  let dc = pc.createDataChannel(\"PlayerControl\");\n or  dc.onerror = function(event) { myUILibrary.doAlertBox({ 'Network Error', // Alert title 'The error \"' + event.message + '\" occurred while handling player control network messages.', event.filename, event.lineno, event.colno });\n or  } /* ... */);",
        "type": "WebRTC"
    },
    "RTCDataChannel.onmessage": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCDataChannel.onmessage",
        "params": [],
        "path": "dom/rtcdatachannel/onmessage",
        "syntax": "RTCDataChannel.onmessage = function; Value A function which the browser will call to handle the message event. The function receives as its sole input parameter a MessageEvent object describing the event. Example This code snippet creates a peer connection, adds a data channel to it, and starts creating new <p> (paragraph) elements each time a message arrives, with the message's contents displayed inside it. The new elements are then attached to the end of the document.",
        "type": "WebRTC"
    },
    "RTCDataChannel.onopen": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCDataChannel.onopen",
        "params": [],
        "path": "dom/rtcdatachannel/onopen",
        "syntax": "RTCDataChannel.onopen = function; Value A function which the browser will call to handle the open event. The function receives as its only input parameter the event itself, of type Event. Example This example adds a new data channel to an existing RTCPeerConnection, myPeerConnection. It then establishes an open event handler which updates some user interface elements to prepare them for being used to send messages over the data channel. let dc = myPeerConnection.createDataChannel(\"Message Channel\");\n or  dc.onopen = function(event) { let messageBox = document.getElementById(\"messageBox\");\n or  let sendButton = document.getElementById(\"sendButton\");\n or  messageBox.disabled = false; messageBox.focus();\n or  sendButton.disabled = false; });",
        "type": "WebRTC"
    },
    "RTCDataChannel.ordered": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCDataChannel.ordered",
        "params": [],
        "path": "dom/rtcdatachannel/ordered",
        "syntax": "var ordered = aDataChannel.ordered;  A Boolean value which is true if in-order delivery is guaranteed and is otherwise false. Example var pc = new RTCPeerConnection();\n or  var dc = pc.createDataChannel(\"my channel\");\n or  if (!dc.ordered) { // Handle unordered messaging });",
        "type": "WebRTC"
    },
    "RTCDataChannel.protocol": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCDataChannel.protocol",
        "params": [],
        "path": "dom/rtcdatachannel/protocol",
        "syntax": "var subProtocol = aDataChannel.protocol;  Value A string identifying the app-defined subprotocol being used for exchanging data on the channel. If none has been established, this is an empty string (\"\").",
        "type": "WebRTC"
    },
    "RTCDataChannel.readyState": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCDataChannel.readyState",
        "params": [],
        "path": "dom/rtcdatachannel/readystate",
        "syntax": "var state = aDataChannel.readyState;  Values A string which is one of the values in the RTCDataChannelState enum, indicating the current state of the underlying data transport. RTCDataChannelState enum The RTCDataChannelState enum defines string constants which reflect the current status of the RTCDataChannel's underlying data connection.    Constant Description     \"connecting\" The user agent (browser) is in the process of creating the underlying data transport; that is, whatever network level connection is used to link the two peers together is in the process of being set up. This is the state of a new RTCDataChannel",
        "type": "WebRTC"
    },
    "RTCDataChannel.send": {
        "descr": "The send() method of the RTCDataChannel interface sends data across the data channel to the remote peer. This can be done any time except during the initial process of creating the underlying transport channel. Data sent before connecting is buffered if possible (or an error occurs if it's not possible), and is also buffered if sent while the connection is closing or closed.",
        "name": "RTCDataChannel.send",
        "params": [
            {
                "descr": "The data to transmit across the connection. ",
                "name": "data"
            },
            {
                "descr": "Since the data channel uses a separate transport channel from the media content, it must establish its own connection; if it hasn't finished doing so (that is, its readyState is \"connecting\"), this error occurs without sending or buffering the data.",
                "name": "InvalidStateError"
            },
            {
                "descr": "The specified data would need to be buffered, and there isn't room for it in the buffer. ",
                "name": "NetworkError"
            },
            {
                "descr": "The specified data is too large for the other peer to receive. ",
                "name": "TypeError"
            }
        ],
        "path": "dom/rtcdatachannel/send",
        "syntax": "RTCDataChannel.send(data);",
        "type": "WebRTC"
    },
    "RTCDataChannel.stream": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "RTCDataChannel.stream",
        "params": [],
        "path": "dom/rtcdatachannel/stream",
        "syntax": "var stream = aDataChannel.stream;  Value An unsigned short value (that is, an integer between 0 and 65,535) which uniquely identifies the data channel.",
        "type": "WebRTC"
    },
    "RTCDataChannelEvent.channel": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCDataChannelEvent.channel",
        "params": [],
        "path": "dom/rtcdatachannelevent/channel",
        "syntax": "var channel = RTCDataChannelEvent.channel; Value A RTCDataChannel object representing the data channel linking the receiving RTCPeerConnection to its remote peer. Example The first line of code in the datachannel event handler shown below takes the channel from the event object and saves it locally for use by the code handling data traffic. pc.ondatachannel = function(event) { inboundDataChannel = event.channel; inboundDataChannel.onmessage = handleIncomingMessage; inboundDataChannel.onopen = handleChannelOpen; inboundDataChannel.onclose = handleChannelClose; }",
        "type": "WebRTC"
    },
    "RTCDataChannelEvent.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCDataChannelEvent.constructor",
        "params": [
            {
                "descr": "A DOMString which specifies the name of the event. ",
                "name": "type"
            },
            {
                "descr": "A RTCDataChannelEventInit dictionary, which has following fields:   \"channel\" of type RTCDataChannel, representing the data channel being concerned by the event. ",
                "name": "rtcDataChannelEventInit"
            }
        ],
        "path": "dom/rtcdatachannelevent/rtcdatachannelevent",
        "syntax": "var event = new RTCDataChannelEvent(type, rtcDataChannelEventInit);",
        "type": "WebRTC"
    },
    "RTCIceCandidate.candidate": {
        "descr": "The read-only property candidate on the RTCIceCandidate interface returns a DOMString describing the candidate in detail. Most of the other properties of RTCIceCandidate are actually extracted from this string.",
        "name": "RTCIceCandidate.candidate",
        "params": [],
        "path": "dom/rtcicecandidate/candidate",
        "syntax": "var candidate = RTCIceCandidate.candidate; Value A DOMString describing the properties of the candidate, taken directly from the SDP attribute \"candidate\". The candidate string specifies the network connectivity information for the candidate. If the candidate is an empty string (\"\"), the end of the candidate list has been reached; this candidate is known as the \"end-of-candidates marker.\"",
        "type": "WebRTC"
    },
    "RTCIceCandidate.component": {
        "descr": "The read-only component property on the RTCIceCandidate interface is a string which indicates whether the candidate is an RTP or an RTCP candidate.",
        "name": "RTCIceCandidate.component",
        "params": [],
        "path": "dom/rtcicecandidate/component",
        "syntax": "var component = RTCIceCandidate.component; Value A DOMString which is \"rtp\" for RTP (or RTP and RTCP multiplexed together) candidates or \"rtcp\"",
        "type": "WebRTC"
    },
    "RTCIceCandidate.constructor": {
        "descr": "The RTCIceCandidate() constructor creates and returns a new RTCIceCandidate object, which can be configured to represent a single ICE candidate.",
        "name": "RTCIceCandidate.constructor",
        "params": [
            {
                "descr": "An optional RTCIceCandidateInit object providing information about the candidate; if this is provided, the candidate is initialized configured to represent the described candidate.",
                "name": "candidateInfo Optional"
            },
            {
                "descr": "The specified RTCIceCandidateInit has values of null in both the sdpMid and sdpMLineIndex properties.",
                "name": "TypeError"
            }
        ],
        "path": "dom/rtcicecandidate/rtcicecandidate",
        "syntax": "candidate = new RTCIceCandidate([candidateInfo]);",
        "type": "WebRTC"
    },
    "RTCIceCandidate.foundation": {
        "descr": "The RTCIceCandidate interface's read-only foundation property is a string which uniquely identifies the candidate across multiple transports. As such, the foundation can be used to correlate candidates that are present on multiple RTCIceTransport objects",
        "name": "RTCIceCandidate.foundation",
        "params": [],
        "path": "dom/rtcicecandidate/foundation",
        "syntax": "var foundation = RTCIceCandidate.foundation; Value A DOMString which uniquely identifies the candidate across all RTCIceTransports on which it is available.  Note: If port is null — and port is supported by the user agent — passing the candidate to addIceCandidate()",
        "type": "WebRTC"
    },
    "RTCIceCandidate.ip": {
        "descr": "The RTCIceCandidate interface's read-only ip property is a string providing the address of the device which is the source of the candidate. ip is null by default if not otherwise specified.",
        "name": "RTCIceCandidate.ip",
        "params": [],
        "path": "dom/rtcicecandidate/ip",
        "syntax": "var address = RTCIceCandidate.ip; Value A DOMString providing the IP address from which the candidate comes.  Note: If port is null — and port is supported by the user agent — passing the candidate to addIceCandidate()",
        "type": "WebRTC"
    },
    "RTCIceCandidate.port": {
        "descr": "The RTCIceCandidate interface's read-only port property contains the port number on the device at the address given by ip at which the candidate's peer can be reached.",
        "name": "RTCIceCandidate.port",
        "params": [],
        "path": "dom/rtcicecandidate/port",
        "syntax": "var port = RTCIceCandidate.port; Value A 16-bit number indicating the port number on the device at the address indicated by ip at which the candidate's peer can be reached. port is initialized to null if it is not specified in the candidate, or if the candidate string can't be parsed propertly.  Note: If port is null, passing the candidate to addIceCandidate()",
        "type": "WebRTC"
    },
    "RTCIceCandidate.priority": {
        "descr": "The RTCIceCandidate interface's read-only priority property specifies the candidate's priority according to the remote peer; the higher this value is, the better the remote peer considers the candidate to be.",
        "name": "RTCIceCandidate.priority",
        "params": [],
        "path": "dom/rtcicecandidate/priority",
        "syntax": "var priority = RTCIceCandidate.priority; Value A long, unsigned integer value indicating the priority of the candidate according to the remote peer. The larger this value is, the more preferable the remote peer considers this candidate to be. priority is initialized to null if it is not specified in the candidate, or if the candidate string can't be parsed propertly.  Note: If priority is null, passing the candidate to addIceCandidate()",
        "type": "WebRTC"
    },
    "RTCIceCandidate.protocol": {
        "descr": "The RTCIceCandidate interface's read-only protocol property is a string which indicates whether the candidate uses UDP or TCP as its transport protocol. protocol is null by default if not specified properly in the SDP, but this is an error condition and will result in a thrown exception when you call RTCPeerConnection.addIceCandidate().",
        "name": "RTCIceCandidate.protocol",
        "params": [
            {
                "descr": "The candidate, if selected, would use TCP as the transport protocol for its data. ",
                "name": "\"tcp\""
            },
            {
                "descr": "The candidate will use the UDP transport protocol for its data. ",
                "name": "\"udp\""
            }
        ],
        "path": "dom/rtcicecandidate/protocol",
        "syntax": "var protocol = RTCIceCandidate.protocol; Value A DOMString which indicates what network protocol the candidate uses, UDP or TCP. These values are defined by the enumerated type RTCIceProtocol:  \"tcp\" The candidate, if selected, would use TCP as the transport protocol for its data. The tcpType property provides additional information about the kind of TCP candidate represented by the object. \"udp\" The candidate will use the UDP transport protocol for its data. This is the preferred protocol for media interactions because of its better performance profile.   Note: If protocol is null — and protocol is supported by the user agent — passing the candidate to addIceCandidate()",
        "type": "WebRTC"
    },
    "RTCIceCandidate.relatedAddress": {
        "descr": "The RTCIceCandidate interface's read-only relatedAddress property is a string indicating the related address of a relay or reflexive candidate. If the candidate is a host candidate (that is, its ip is in fact the real IP address of the remote peer), relatedAddress is null.",
        "name": "RTCIceCandidate.relatedAddress",
        "params": [],
        "path": "dom/rtcicecandidate/relatedaddress",
        "syntax": "var relAddress = RTCIceCandidate.relatedAddress; Value A DOMString which contains the candidate's related address. For both peer and server reflexive candidates, the related address (and related port) are the base for that server or peer reflexive candidate. For relay candidates, the related address and port are set to the mapped address selected by the TURN server.",
        "type": "WebRTC"
    },
    "RTCIceCandidate.relatedPort": {
        "descr": "The RTCIceCandidate interface's read-only relatedPort property indicates the port number of reflexive or relay candidates. If the candidate is a host candidate (that is, its ip is in fact the real IP address of the remote peer), relatedPort is null.",
        "name": "RTCIceCandidate.relatedPort",
        "params": [],
        "path": "dom/rtcicecandidate/relatedport",
        "syntax": "var relPort = RTCIceCandidate.relatedPort; Value An unsigned 16-bit value containing the candidate's related port number, if any. For both peer and server reflexive candidates, the related address and port describe the base for that candidate. For relay candidates, the related address and port provide the mapped address selected by the TURN server. For host candidates, relatedPort is null, meaning the field is not included in the candidate's a-line. Usage notes The related address and port are not used by ICE itself, and are only present for diagnostic and Quality-of-Service purposes. They may in fact be omitted for security reasons, but if present can be a useful tool during debugging. See the example, which shows a bit of this. Here's an SDP attribute line (a-line) describing an ICE candidate discovered by the STUN server:",
        "type": "WebRTC"
    },
    "RTCIceCandidate.sdpMLineIndex": {
        "descr": "The read-only sdpMLineIndex property on the RTCIceCandidate interface is a zero-based index of the m-line describing the media associated with the candidate.",
        "name": "RTCIceCandidate.sdpMLineIndex",
        "params": [],
        "path": "dom/rtcicecandidate/sdpmlineindex",
        "syntax": "var sdpMLineIndex = RTCIceCandidate.sdpMLineIndex; Value A number containing a 0-based index into the set of m-lines providing media descriptions, indicating which media source is associated with the candidate, or null if no such association is available.  Note: Attempting to add a candidate (using addIceCandidate()",
        "type": "WebRTC"
    },
    "RTCIceCandidate.sdpMid": {
        "descr": "The read-only property sdpMid on the RTCIceCandidate interface returns a DOMString specifying the media stream identification tag of the media component with which the candidate is associated. This ID uniquely identifies a given stream for the component with which the candidate is associated.",
        "name": "RTCIceCandidate.sdpMid",
        "params": [],
        "path": "dom/rtcicecandidate/sdpmid",
        "syntax": "var sdpMid = RTCIceCandidate.sdpMid; Value A DOMString which uniquely identifies the source media component from which the candidate draws data, or null if no such association exists for the candidate.  Note: Attempting to add a candidate (using addIceCandidate()",
        "type": "WebRTC"
    },
    "RTCIceCandidate.tcpType": {
        "descr": "The RTCIceCandidate interface's read-only tcpType property is included on TCP candidates to provide additional details about the candidate type.",
        "name": "RTCIceCandidate.tcpType",
        "params": [
            {
                "descr": "The transport will try to open an outbound connection but won't receive inoming connection requests.",
                "name": "\"active\""
            },
            {
                "descr": "The transport will receive incoming connection requests but won't try to open an outbound connection.",
                "name": "\"passive\""
            },
            {
                "descr": "The transport will try to open a connection simultaneously with its peer.",
                "name": "\"so\""
            }
        ],
        "path": "dom/rtcicecandidate/tcptype",
        "syntax": "var tcpType = RTCIceCandidate.tcpType; Value A DOMString whose value is one of those defined by the RTCIceTcpCandidateType enumerated type.  \"active\" The transport will try to open an outbound connection but won't receive inoming connection requests. \"passive\" The transport will receive incoming connection requests but won't try to open an outbound connection. \"so\" The transport will try to open a connection simultaneously with its peer.  tcpType is null for UDP candidates. Example In this example, the candidate's protocol and tcpType are used to adjust the user interface for simultaneous-open TCP candidates. if (candidate.protocol == \"tcp\" && candidate.tcpType == \"so\") { adjustForSimultaneousOpen(candidate);\n or  });",
        "type": "WebRTC"
    },
    "RTCIceCandidate.toJSON": {
        "descr": "The RTCIceCandidate method toJSON() converts the RTCIceCandidate on which it's called into JSON in the form of an RTCIceCandidateInit object.",
        "name": "RTCIceCandidate.toJSON",
        "params": [],
        "path": "dom/rtcicecandidate/tojson",
        "syntax": "json = rtcIceCandidate.toJSON();",
        "type": "WebRTC"
    },
    "RTCIceCandidate.type": {
        "descr": "The RTCIceCandidate interface's read-only type specifies the type of candidate the object represents.",
        "name": "RTCIceCandidate.type",
        "params": [
            {
                "descr": "The candidate is a host candidate, whose IP address as specified in the RTCIceCandidate.ip property is in fact the true address of the remote peer.",
                "name": "\"host\""
            },
            {
                "descr": "The candidate is a server reflexive candidate; the ip indicates an intermediary address assigned by the STUN server to represent the candidate's peer anonymously.",
                "name": "\"srflx\""
            },
            {
                "descr": "The candidate is a peer reflexive candidate; the ip is an intermediary address assigned by the STUN server to represent the candidate's peer anonymously.",
                "name": "\"prflx\""
            },
            {
                "descr": "The candidate is a relay candidate, obtained from a TURN server. ",
                "name": "\"relay\""
            }
        ],
        "path": "dom/rtcicecandidate/type",
        "syntax": "var type = RTCIceCandidate.type; Value A DOMString whose value is one of those defined by the RTCIceCandidateType enumerated type. These candidate types are listed in order of priority; the higher in the list they are, the more efficient they are.  \"host\" The candidate is a host candidate, whose IP address as specified in the RTCIceCandidate.ip property is in fact the true address of the remote peer. \"srflx\" The candidate is a server reflexive candidate; the ip indicates an intermediary address assigned by the STUN server to represent the candidate's peer anonymously. \"prflx\" The candidate is a peer reflexive candidate; the ip is an intermediary address assigned by the STUN server to represent the candidate's peer anonymously. \"relay\" The candidate is a relay candidate, obtained from a TURN server. The relay candidate's IP address is an address the TURN server uses to forward the media between the two peers.  If type is null, that information was missing from the candidate's a-line, which will cause RTCPeerConnection.addIceCandidate()",
        "type": "WebRTC"
    },
    "RTCIceCandidate.usernameFragment": {
        "descr": "The read-only usernameFragment property on the RTCIceCandidate interface is a string indicating the username fragment (\"ufrag\") that uniquely identifies a single ICE interaction session.",
        "name": "RTCIceCandidate.usernameFragment",
        "params": [],
        "path": "dom/rtcicecandidate/usernamefragment",
        "syntax": "var ufrag = RTCIceCandidate.usernameFragment; Value A DOMString containing the username fragment (usually referred to in shorthand as \"ufrag\" or \"ice-ufrag\") that, along with the ICE password (\"ice-pwd\"), uniquely identifies a single ongoing ICE interaction. The string may be up to 256 characters long, and has no default value.",
        "type": "WebRTC"
    },
    "RTCIceCandidateInit.candidate": {
        "descr": "The optional property candidate in the RTCIceCandidateInit dictionary specifies the value of the RTCIceCandidate object's candidate property.",
        "name": "RTCIceCandidateInit.candidate",
        "params": [],
        "path": "dom/rtcicecandidateinit/candidate",
        "syntax": "a=candidate:4234997325 1 udp 2043278322 192.168.0.56 44323 typ host the corresponding candidate string's value will be \"candidate:4234997325 1 udp 2043278322 192.168.0.56 44323 typ host\". The user agent always prefers candidates with the highest priority, all else being equal. In the example above, the priority is 2043278322. The attributes are all separated by a single space character, and are in a specific order. The complete list of attributes for this example candidate is:   foundation = 4234997325  component = \"rtp\" (the number 1 is encoded to this string; 2 becomes \"rtcp\")  protocol",
        "type": "WebRTC"
    },
    "RTCIceCandidatePair.local": {
        "descr": "The local property of the RTCIceCandidatePair dictionary specifies the RTCIceCandidate which describes the configuration of the local end of a viable WebRTC connection.",
        "name": "RTCIceCandidatePair.local",
        "params": [],
        "path": "dom/rtcicecandidatepair/local",
        "syntax": "localCandidate = RTCIceCandidatePair.local;  Value An RTCIceCandidate which describes the configuration of the local end of a viable pair of ICE candidates. The RTCIceCandidatePair is returned by the RTCIceTransport method getSelectedCandidatePair()",
        "type": "WebRTC"
    },
    "RTCIceCandidatePair.remote": {
        "descr": "The remote property of the RTCIceCandidatePair dictionary specifies the RTCIceCandidate describing the configuration of the remote end of a viable WebRTC connection.",
        "name": "RTCIceCandidatePair.remote",
        "params": [],
        "path": "dom/rtcicecandidatepair/remote",
        "syntax": "remoteCandidate = RTCIceCandidatePair.remote;  Value An RTCIceCandidate which describes the configuration of the remote end of a viable pair of ICE candidates. The RTCIceCandidatePair is returned by the RTCIceTransport method getSelectedCandidatePair()",
        "type": "WebRTC"
    },
    "RTCIceParameters.password": {
        "descr": "The RTCIceParameters dictionary's password property specifies the ICE password that, in tandem with the usernameFragment, uniquely identifies an ICE session for its entire duration.",
        "name": "RTCIceParameters.password",
        "params": [],
        "path": "dom/rtciceparameters/password",
        "syntax": "password = RTCIceParameters.password; Value A DOMString containing the password that corresponds to the transport's usernameFragment string Specifications    Specification Status Comment     WebRTC 1.0: Real-time Communication Between BrowsersThe definition of 'RTCIceParameters.password' in that specification. Candidate Recommendation Initial specification.    Browser compatibility No compatibility data found. Please contribute data for \"api.RTCIceParameters.password\" (depth: 1) to the MDN compatibility data repository.",
        "type": "WebRTC"
    },
    "RTCIceParameters.usernameFragment": {
        "descr": "The RTCIceParameters dictionary's usernameFragment property specifies the username fragment (\"ufrag\") that uniquely identifies the corresponding ICE session for the duration of the current ICE session.",
        "name": "RTCIceParameters.usernameFragment",
        "params": [],
        "path": "dom/rtciceparameters/usernamefragment",
        "syntax": "ufrag = RTCIceParameters.usernameFragment; Value A DOMString containing the username fragment that, in tandem with the password, uniquely identify the ICE session being used by the transport. The string may be up to 256 characters long. See RTCIceCandidate.usernameFragment to learn more about username fragments and their role in a connection. Specifications    Specification Status Comment     WebRTC 1.0: Real-time Communication Between BrowsersThe definition of 'RTCIceParameters.usernameFragment' in that specification. Candidate Recommendation Initial specification.    Browser compatibility No compatibility data found. Please contribute data for \"api.RTCIceParameters.usernameFragment\" (depth: 1) to the MDN compatibility data repository.",
        "type": "WebRTC"
    },
    "RTCIceServer": {
        "descr": "The RTCIceServer dictionary defines how to connect to a single ICE server (such as a STUN or TURN server). It includes both the URL and the necessary credentials, if any, to connect to the server.",
        "name": "RTCIceServer",
        "params": [
            {
                "descr": "The credential to use when logging into the server. ",
                "name": "credential Optional"
            },
            {
                "descr": "If the RTCIceServer represents a TURN server, this attribute specifies what kind of credential is to be used when connecting. ",
                "name": "credentialType Optional"
            },
            {
                "descr": "This obsolete property is a string specifies a single ICE server's URL. ",
                "name": "url"
            },
            {
                "descr": "This required property is either a single DOMString or an array of DOMStrings, each specifying a URL which can be used to connect to the server.",
                "name": "urls"
            },
            {
                "descr": "If the RTCIceServer is a TURN server, then this is the username to use during the authentication process.",
                "name": "username Optional"
            }
        ],
        "path": "dom/rtciceserver",
        "syntax": "\"token\" The credential is an access token to be used with a third-party authentication system.    Example The configuration below establishes two ICE servers. The first one, stun:stun.services.mozilla.com, requires authentication, so the username and password are provided. The second server has two URLs: stun:stun.example.com and stun:stun-1.example.com. var configuration = { iceServers: [{ urls: \"stun:stun.services.mozilla.com\", username: \"louis@mozilla.com\", credential: \"webrtcdemo\" }, { urls: [ \"stun:stun.example.com\", \"stun:stun-1.example.com\" ] }] }; var pc = new RTCPeerConnection(configuration);",
        "type": "WebRTC"
    },
    "RTCIceServer.credential": {
        "descr": "Draft This page is not complete.",
        "name": "RTCIceServer.credential",
        "params": [],
        "path": "dom/rtciceserver/credential",
        "syntax": "var iceServer = { ... credential = credential, ... }; var credential = iceServer.credential; iceServer.credential = newCredential; Example This example creates a new RTCPeerConnection which uses a TURN server at turnserver.example.org to negotiate connections. Logging into the TURN server uses the username \"webrtc\" and the creative password \"turnpassword\". myPeerConnection = new RTCPeerConnection({ iceServers: [ { urls: \"turn:turnserver.example.org\", // A TURN server username: \"webrtc\", credential: \"turnpassword\" } ] });",
        "type": "WebRTC"
    },
    "RTCIceServer.credentialType": {
        "descr": "Draft This page is not complete.",
        "name": "RTCIceServer.credentialType",
        "params": [],
        "path": "dom/rtciceserver/credentialtype",
        "syntax": "var iceServer = { ... credentialType = [\"password\" | \"token\"], ... }; var credential = iceServer.credentialType; iceServer.credential = [\"password\" | \"token\"]; Constants RTCIceCredentialType enum The RTCIceCredentialType enum specifies values which can be returned by the credentialType property to define what kind of authentication credential is being provided in the RTCIceServer.credential property. This can be one of the values below.    Constant Description   \"password\" The credential is a long-term authentication password. See RFC 5389, section 10.2 for further details on this type of credential.   \"token\" The credential is an access token to be used with a third-party authentication system.    Example This example creates a new RTCPeerConnection which will use a TURN server at turnserver.example.org to negotiate connections. Logging into the TURN server will use the username \"webrtc\" and the creative password \"turnpassword\". myPeerConnection = new RTCPeerConnection({ iceServers: [ { urls: \"turn:turnserver.example.org\", // A TURN server username: \"webrtc\", credential: \"turnpassword\", credentialType: \"password\" } ] });",
        "type": "WebRTC"
    },
    "RTCIceServer.url": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "RTCIceServer.url",
        "params": [],
        "path": "dom/rtciceserver/url",
        "syntax": "var iceServer = { ... url = iceServerUrl, ... }; var serverUrl = iceServer.url; iceServer.url = iceServerUrl; The value of this property is a DOMString containing the full URL of a server to use during ICE negotiation. Example This example creates a new RTCPeerConnection which will use a STUN server at stunserver.example.org to negotiate connections. myPeerConnection = new RTCPeerConnection({ iceServers: [ { url: \"stun:stunserver.example.org\" } ] });",
        "type": "WebRTC"
    },
    "RTCIceServer.urls": {
        "descr": "Draft This page is not complete.",
        "name": "RTCIceServer.urls",
        "params": [],
        "path": "dom/rtciceserver/urls",
        "syntax": "var iceServer = { urls = iceServerUrl | [ url1, ..., urlN ], username: \"webrtc\", // optional credential: \"turnpassword\" // optional }; iceServers.push(iceServer);",
        "type": "WebRTC"
    },
    "RTCIceServer.username": {
        "descr": "Draft This page is not complete.",
        "name": "RTCIceServer.username",
        "params": [],
        "path": "dom/rtciceserver/username",
        "syntax": "var iceServer = { ... username = username, ... }; var username = iceServer.username; iceServer.username = newUsername; Example This example creates a new RTCPeerConnection which will use a TURN server at turnserver.example.org to negotiate connections. Logging into the TURN server will use the username \"webrtc\" and the creative password \"turnpassword\". myPeerConnection = new RTCPeerConnection({ iceServers: [ { urls: \"turn:turnserver.example.org\", // A TURN server username: \"webrtc\", credential: \"turnpassword\" } ] });",
        "type": "WebRTC"
    },
    "RTCIceTransport.component": {
        "descr": "The read-only RTCIceTransport property component specifies whether the object is serving to transport RTP or RTCP. The value is one of the strings in RTCIceComponent.",
        "name": "RTCIceTransport.component",
        "params": [
            {
                "descr": "Identifies an ICE transport which is being used for the Real-time Transport Protocol (RTP), or for RTP multiplexed with the RTP Control Protocol (RTCP). ",
                "name": "\"rtp\""
            },
            {
                "descr": "Identifies an ICE transport being used for RTCP, which is defined in RFC 3550, section 6. ",
                "name": "\"rtcp\""
            }
        ],
        "path": "dom/rtcicetransport/component",
        "syntax": "iceComponent = RTCIceTransport.component;  Value A DOMString whose value comes from the enumerated type RTCIceComponent:  \"rtp\" Identifies an ICE transport which is being used for the Real-time Transport Protocol (RTP), or for RTP multiplexed with the RTP Control Protocol (RTCP). RTP is defined in RFC 3550. An RTCIceComponent",
        "type": "WebRTC"
    },
    "RTCIceTransport.getLocalCandidates": {
        "descr": "The RTCIceTransport method getLocalCandidates() returns an array of RTCIceCandidate objects, one for each of the candidates that have been gathered by the local device during the current ICE agent session.",
        "name": "RTCIceTransport.getLocalCandidates",
        "params": [],
        "path": "dom/rtcicetransport/getlocalcandidates",
        "syntax": "localCandidates = RTCIceTransport.getLocalCandidates();",
        "type": "WebRTC"
    },
    "RTCIceTransport.getLocalParameters": {
        "descr": "The RTCIceTransport method getLocalParameters() returns an RTCIceParameters object which provides information uniquely identifying the local peer for the duration of the ICE session.",
        "name": "RTCIceTransport.getLocalParameters",
        "params": [],
        "path": "dom/rtcicetransport/getlocalparameters",
        "syntax": "parameters = RTCIceTransport.getLocalParameters();",
        "type": "WebRTC"
    },
    "RTCIceTransport.getRemoteCandidates": {
        "descr": "The RTCIceTransport method getRemoteCandidates() returns an array which contains one RTCIceCandidate for each of the candidates that have been received from the remote peer so far during the current ICE gathering session.",
        "name": "RTCIceTransport.getRemoteCandidates",
        "params": [],
        "path": "dom/rtcicetransport/getremotecandidates",
        "syntax": "remoteCandidates = RTCIceTransport.getRemoteCandidates();",
        "type": "WebRTC"
    },
    "RTCIceTransport.getRemoteParameters": {
        "descr": "The RTCIceTransport method getRemoteParameters() returns an RTCIceParameters object which provides information uniquely identifying the remote peer for the duration of the ICE session.",
        "name": "RTCIceTransport.getRemoteParameters",
        "params": [],
        "path": "dom/rtcicetransport/getremoteparameters",
        "syntax": "parameters = RTCIceTransport.getRemoteParameters();",
        "type": "WebRTC"
    },
    "RTCIceTransport.getSelectedCandidatePair": {
        "descr": "The RTCIceTransport method getSelectedCandidatePair() returns an RTCIceCandidatePair object containing the current best-choice pair of ICE candidates describing the configuration of the endpoints of the transport.",
        "name": "RTCIceTransport.getSelectedCandidatePair",
        "params": [],
        "path": "dom/rtcicetransport/getselectedcandidatepair",
        "syntax": "candidatePair = RTCIceTransport.getSelectedCandidatePair();",
        "type": "WebRTC"
    },
    "RTCIceTransport.ongatheringstatechange": {
        "descr": "The ongatheringstatechange event handler for the RTCIceTransport interface specifies an event handler that is to be called when the gatheringstatechange event occurs on the transport. This event is delivered whenever the transport's gatheringState property changes.",
        "name": "RTCIceTransport.ongatheringstatechange",
        "params": [
            {
                "descr": "The RTCIceTransport is newly created and has not yet started to gather ICE candidates.",
                "name": "\"new\""
            },
            {
                "descr": "The transport is in the process of gathering candidates.",
                "name": "\"gathering\""
            },
            {
                "descr": "The transport has finished gathering ICE candidates and has sent the end-of-candidates indicator to the remote device. ",
                "name": "\"complete\""
            }
        ],
        "path": "dom/rtcicetransport/ongatheringstatechange",
        "syntax": "RTCIceTransport.ongatheringstatechange = stateChangeHandler;  Value A function to be called when the RTCIceTransport object's gathering state changes. To determine the new state, examine the value of gatheringState. The gathering state indicates whether or not the ICE agent has begun gathering candidates, and if so, whether or not gathering has finished. Its possible values are:  \"new\" The RTCIceTransport is newly created and has not yet started to gather ICE candidates. \"gathering\" The transport is in the process of gathering candidates. \"complete\" The transport has finished gathering ICE candidates and has sent the end-of-candidates indicator to the remote device. The transport won't gather any further candidates unless an ICE restart occurs, at which point the gathering process starts over from scratch.  Example This snippet establishes a handler for the gatheringstatechange event that checks to see if the state has changed to \"complete\", indicating that all ICE candidates from both the local and remote peers have been received and processed. var iceTransport = pc.getSenders()[0].transport.transport; iceTransport.ongatheringstatechange = function(event) { if (iceTransport.gatheringState == \"complete\") { allCandidatesReceived(pc);\n or  } });",
        "type": "WebRTC"
    },
    "RTCIceTransport.onselectedcandidatepairchange": {
        "descr": "The RTCIceTransport interface's onselectedcandidatepairchange event handler specifies a function to be called to handle the selectedcandidatepairchange event, which is fired when the ICE agent selects a new candidate pair to be used for the connection.",
        "name": "RTCIceTransport.onselectedcandidatepairchange",
        "params": [],
        "path": "dom/rtcicetransport/onselectedcandidatepairchange",
        "syntax": "RTCIceTransport.onselectedcandidatepairchange = candidatePairHandler;  Value This propoerty should be set to reference an event handler function to be called by the ICE agent when it discovers a new candidate pair that the RTCIceTransport will be using for communication with the remote peer. This event will occur at least once, and may occur more than once if the ICE agent continues to identify candidate pairs that will work better, more closely match the requested parameters, and so forth. The event handler can determine the current state by calling the transport's getSelectedCandidatePair()",
        "type": "WebRTC"
    },
    "RTCIceTransport.onstatechange": {
        "descr": "The onstatechange event handler for the RTCIceTransport interface is a property which specifies a function to serve as the EventHandler for the statechange event that is fired whenever the transport's state changes.",
        "name": "RTCIceTransport.onstatechange",
        "params": [],
        "path": "dom/rtcicetransport/onstatechange",
        "syntax": "RTCIceTransport.onstatechange = stateChangeHandler;  Value Set this property to reference a function you provide that is called by the WebRTC layer when the RTCIceTransport object's state changes. The event handler receives as its sole input an Event object describing the statechange event which occurred. To determine the new state, examine the value of state. Example This snippet establishes a handler for the statechange event that looks to see if the transport has entered the \"failed\" state, which indicates that the connection has failed with no chance of being automatically restored. var iceTransport = pc.getSenders()[0].transport.transport; iceTransport.onstatechange = function(event) { if (iceTransport.state == \"failed\") { handleFailure(pc);\n or  } });",
        "type": "WebRTC"
    },
    "RTCIdentityErrorEvent.idp": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCIdentityErrorEvent.idp",
        "params": [],
        "path": "dom/rtcidentityerrorevent/idp",
        "syntax": "var idp = event.idp; event.idp = \"developer.mozilla.org\";  Example pc.onidpassertionerror = function( ev ) { alert(\"The idp named '\" + ev.idp + \"' encountered an error \" + \"while generating an assertion.\");\n or  });",
        "type": "WebRTC"
    },
    "RTCIdentityErrorEvent.loginUrl": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCIdentityErrorEvent.loginUrl",
        "params": [],
        "path": "dom/rtcidentityerrorevent/loginurl",
        "syntax": "var loginUrl = event.loginUrl; event.loginUrl = \"https://developer.mozilla.org/fakeURL\";  Example pc.onidpassertionerror = function( ev ) { alert(\"The idp requested an authentication\" + \" to be performed at th3 URL '\" + ev.url + \"'.\");\n or  });",
        "type": "WebRTC"
    },
    "RTCIdentityErrorEvent.protocol": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCIdentityErrorEvent.protocol",
        "params": [],
        "path": "dom/rtcidentityerrorevent/protocol",
        "syntax": "var protocol = event.protocol; event.protocol = \"idp.html\";  Example pc.onidpassertionerror = function( ev ) { alert(\"The idp uses the following protocol '\" + ev.protocol + \".\");\n or  });",
        "type": "WebRTC"
    },
    "RTCIdentityEvent.assertion": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCIdentityEvent.assertion",
        "params": [],
        "path": "dom/rtcidentityevent/assertion",
        "syntax": "var blob = event.assertion; Example pc.onidentityresult = function( ev ) { alert(\"A new identity assertion (blob: '\" + ev.assertion + \"') has been generated.\");\n or  });",
        "type": "WebRTC"
    },
    "RTCOfferOptions.iceRestart": {
        "descr": "The iceRestart property of the RTCOfferOptions dictionary is a Boolean value which, when true, tells the RTCPeerConnection to start ICE renegotiation.",
        "name": "RTCOfferOptions.iceRestart",
        "params": [],
        "path": "dom/rtcofferoptions/icerestart",
        "syntax": "var options = { iceRestart: trueOrFalse };  Value A Boolean value indicating whether or not the RTCPeerConnection should generate new values for the connection's ice-ufrag and ice-pwd values, which will trigger ICE renegotiation on the next message sent to the remote peer. Usage notes When the RTCPeerConnection object's ICE connection state changes to \"failed\", you should try to trigger an ICE restart. Example This example shows a handler for the iceconnectionstatechange event. It watches for the ICE connection state to transition to \"failed\", which indicates that an ICE restart should be tried in order to attempt to bring the connection back up. pc.oniceconnectionstatechange = function(evt) { if (pc.iceConnectionState == \"failed\") { pc.createOffer({ iceRestart: true }) .then(offer => return pc.setLocalDescription(offer)) .then(() => sendOfferToServer());\n or  } });",
        "type": "WebRTC"
    },
    "RTCPeerConnection.addIceCandidate": {
        "descr": "When a web site or app using RTCPeerConnection receives a new ICE candidate from the remote peer over its signaling channel, it delivers the newly-received candidate to the browser's ICE agent by calling RTCPeerConnection.addIceCandidate(). This adds this new remote candidate to the RTCPeerConnection's remote description, which describes the state of the remote end of the connection.",
        "name": "RTCPeerConnection.addIceCandidate",
        "params": [
            {
                "descr": "An object conforming to the RTCIceCandidateInit dictionary; the contents of the object should be constructed from a message received over the signaling channel, describing a newly received ICE candidate that's ready to be delivered to the local ICE agent.",
                "name": "candidate"
            },
            {
                "descr": "A function to be called when the ICE candidate has been successfully added. ",
                "name": "successCallback"
            },
            {
                "descr": "A function to be called if attempting to add the ICE candidate fails. ",
                "name": "failureCallback"
            },
            {
                "descr": "The specified candidate's sdpMid and sdpMLineIndex are both null.",
                "name": "TypeError"
            },
            {
                "descr": "The RTCPeerConnection currently has no remote peer established (remoteDescription is null).",
                "name": "InvalidStateError"
            },
            {
                "descr": "This can happen for a number of reasons:  The value specified for sdpMid is non-null and doesn't match the media description ID of any media description included within the remoteDescription. ",
                "name": "OperationError"
            }
        ],
        "path": "dom/rtcpeerconnection/addicecandidate",
        "syntax": "aPromise = pc.addIceCandidate(candidate);\n or  addIceCandidate(candidate, successCallback, failureCallback);",
        "type": "WebRTC"
    },
    "RTCPeerConnection.addTrack": {
        "descr": "The RTCPeerConnection method addTrack() adds a new media track to the set of tracks which will be transmitted to the other peer.",
        "name": "RTCPeerConnection.addTrack",
        "params": [
            {
                "descr": "A MediaStreamTrack object representing the media track to add to the peer connection.",
                "name": "track"
            },
            {
                "descr": "One or more MediaStream objects in which the specified track are to be contained.",
                "name": "stream..."
            },
            {
                "descr": "The specified track (or all of its underlying streams) is already part of the RTCPeerConnection.",
                "name": "InvalidAccessError"
            },
            {
                "descr": "The RTCPeerConnection is closed.",
                "name": "InvalidStateError"
            }
        ],
        "path": "dom/rtcpeerconnection/addtrack",
        "syntax": "rtpSender = RTCPeerConnection.addTrack(track, stream...);",
        "type": "WebRTC"
    },
    "RTCPeerConnection.addTransceiver": {
        "descr": "The RTCPeerConnection method addTransceiver() creates a new RTCRtpTransceiver and adds it to the set of transceivers associated with the RTCPeerConnection. Each transceiver represents a bidirectional stream, with both an RTCRtpSender and an RTCRtpReceiver associated with it.",
        "name": "RTCPeerConnection.addTransceiver",
        "params": [
            {
                "descr": "A MediaStreamTrack to associate with the transceiver, or a DOMString which is used as the kind of the receiver's track, and by extension of the RTCRtpReceiver itself.",
                "name": "trackOrKind"
            },
            {
                "descr": "An object that conforms to the RTCRtpTransceiverInit dictionary which provides any options that you may wish to specify when creating the new transceiver. ",
                "name": "init Optional"
            },
            {
                "descr": "A list of encodings to allow when sending RTP media from the RTCRtpSender. ",
                "name": "sendEncodings Optional"
            },
            {
                "descr": "A list of MediaStream objects to add to the transceiver'sRTCRtpReceiver; when the remote peer's RTCPeerConnection's track event occurs, these are the streams that will be specified by that event.",
                "name": "streams Optional"
            },
            {
                "descr": "A string was specified as trackOrKind which is not valid. ",
                "name": "TypeError"
            }
        ],
        "path": "dom/rtcpeerconnection/addtransceiver",
        "syntax": "rtpTransceiver = RTCPeerConnection.addTransceiver(trackOrKind, init);",
        "type": "WebRTC"
    },
    "RTCPeerConnection.canTrickleIceCandidates": {
        "descr": "The read-only RTCPeerConnection property canTrickleIceCandidates returns a Boolean which indicates whether or not the remote peer can accept trickled ICE candidates.",
        "name": "RTCPeerConnection.canTrickleIceCandidates",
        "params": [],
        "path": "dom/rtcpeerconnection/cantrickleicecandidates",
        "syntax": "var canTrickle = RTCPeerConnection.canTrickleIceCandidates; Value A Boolean that is true if the remote peer can accept trickled ICE candidates and false if it cannot. If no remote peer has been established, this value is null.  Note: This property's value is determined once the local peer has called RTCPeerConnection.setRemoteDescription()",
        "type": "WebRTC"
    },
    "RTCPeerConnection.close": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCPeerConnection.close",
        "params": [],
        "path": "dom/rtcpeerconnection/close",
        "syntax": "peerConnection.close();",
        "type": "WebRTC"
    },
    "RTCPeerConnection.connectionState": {
        "descr": "The read-only connectionState property of the RTCPeerConnection interface indicates the current state of the peer connection by returning one of the string values specified by the enum RTCPeerConnectionState.",
        "name": "RTCPeerConnection.connectionState",
        "params": [],
        "path": "dom/rtcpeerconnection/connectionstate",
        "syntax": "var connectionState = RTCPeerConnection.connectionState; Value The current state of the connection, as a value from the enum RTCPeerConnectionState. RTCPeerConnectionState enum The RTCPeerConnectionState enum defines string constants which describe states in which the RTCPeerConnection may be. These values are returned by the connectionState property. This state essentially represents the aggregate state of all ICE transports (which are of type RTCIceTransport or RTCDtlsTransport) being used by the connection.",
        "type": "WebRTC"
    },
    "RTCPeerConnection.constructor": {
        "descr": "The RTCPeerConnection() constructor returns a newly-created RTCPeerConnection, which represents a connection between the local device and a remote peer.",
        "name": "RTCPeerConnection.constructor",
        "params": [
            {
                "descr": "An RTCConfiguration dictionary providing options to configure the new connection.",
                "name": "configuration Optional"
            },
            {
                "descr": "Specifies how to handle negotiation of candidates when the remote peer is not compatible with the SDP BUNDLE standard. ",
                "name": "bundlePolicy Optional"
            },
            {
                "descr": "An Array of objects of type RTCCertificate which are used by the connection for authentication. ",
                "name": "certificates Optional"
            },
            {
                "descr": "An unsigned 16-bit integer value which specifies the size of the prefetched ICE candidate pool. ",
                "name": "iceCandidatePoolSize Optional"
            },
            {
                "descr": "An array of RTCIceServer objects, each describing one server which may be used by the ICE agent; these are typically STUN and/or TURN servers. ",
                "name": "iceServers Optional"
            },
            {
                "descr": "The current ICE transport policy; this must be one of the values from the RTCIceTransportPolicy enum. ",
                "name": "iceTransportPolicy Optional"
            },
            {
                "descr": "A DOMString which specifies the target peer identity for the RTCPeerConnection. ",
                "name": "peerIdentity Optional"
            },
            {
                "descr": "The RTCP mux policy to use when gathering ICE candidates, in order to support non-multiplexed RTCP. ",
                "name": "rtcpMuxPolicy Optional"
            }
        ],
        "path": "dom/rtcpeerconnection/rtcpeerconnection",
        "syntax": "pc = new RTCPeerConnection([configuration]);",
        "type": "WebRTC"
    },
    "RTCPeerConnection.createAnswer": {
        "descr": "The createAnswer() method on the RTCPeerConnection interface creates an SDP answer to an offer received from a remote peer during the offer/answer negotiation of a WebRTC connection. The answer contains information about any media already attached to the session, codecs and options supported by the browser, and any ICE candidates already gathered. The answer is delivered to the returned Promise, and should then be sent to the source of the offer to continue the negotiation process.",
        "name": "RTCPeerConnection.createAnswer",
        "params": [
            {
                "descr": "An object which contains options which customize the answer; this is based on the RTCAnswerOptions dictionary.",
                "name": "options Optional"
            },
            {
                "descr": "An RTCSessionDescriptionCallback which will be passed a single RTCSessionDescription object describing the newly-created answer.",
                "name": "successCallback"
            },
            {
                "descr": "An RTCPeerConnectionErrorCallback which will be passed a single DOMException object explaining why the request to create an answer failed.",
                "name": "failureCallback"
            },
            {
                "descr": "An optional RTCOfferOptions object providing options requested for the answer.",
                "name": "options Optional"
            },
            {
                "descr": "The identity provider wasn't able to provide an identity assertion.",
                "name": "NotReadableError"
            },
            {
                "descr": "Generation of the SDP failed for some reason; this is a general failure catch-all exception.",
                "name": "OperationError"
            }
        ],
        "path": "dom/rtcpeerconnection/createanswer",
        "syntax": "aPromise = RTCPeerConnection.createAnswer([options]);\n or  RTCPeerConnection.createAnswer(successCallback, failureCallback[, options]);",
        "type": "WebRTC"
    },
    "RTCPeerConnection.createDataChannel": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCPeerConnection.createDataChannel",
        "params": [
            {
                "descr": "A human-readable name for the channel. ",
                "name": "label"
            },
            {
                "descr": "An RTCDataChannelInit dictionary providing configuration options for the data channel",
                "name": "options Optional"
            },
            {
                "descr": "Indicates whether or not messages sent on the RTCDataChannel are required to arrive at their destination in the same order in which they were sent (true), or if they're allowed to arrive out-of-order (false). true",
                "name": "ordered Optional"
            },
            {
                "descr": "The maximum number of milliseconds that attempts to transfer a message may take in unreliable mode. ",
                "name": "maxPacketLifeTime Optional"
            },
            {
                "descr": "The maximum number of times the user agent should attempt to retransmit a message which fails the first time in unreliable mode. ",
                "name": "maxRetransmits Optional"
            },
            {
                "descr": "The name of the sub-protocol being used on the RTCDataChannel, if any; otherwise, the empty string (\"\"). ",
                "name": "protocol Optional"
            },
            {
                "descr": "By default (false), data channels are negotiated in-band, where one side calls createDataChannel, and the other side listens to the RTCDataChannelEvent event using the ondatachannel EventHandler . ",
                "name": "negotiated Optional"
            },
            {
                "descr": "An 16-bit numeric ID for the channel; permitted values are 0-65534. ",
                "name": "id Optional"
            },
            {
                "descr": "The RTCPeerConnection is closed.",
                "name": "InvalidStateError"
            },
            {
                "descr": "This can happen in a couple of situations:  The label and/or protocol string is too long; these cannot be longer than 65,535 bytes (bytes, rather than characters). ",
                "name": "TypeError"
            },
            {
                "descr": "Values were specified for both the maxPacketLifeTime and maxRetransmits options. ",
                "name": "SyntaxError"
            },
            {
                "descr": "An id was specified, but another RTCDataChannel is already using the same value.",
                "name": "ResourceInUse"
            },
            {
                "descr": "Either the specified id is already in use or, if no id was specified, the WebRTC layer was unable to automatically generate an ID because all IDs are in use.",
                "name": "OperationError"
            }
        ],
        "path": "dom/rtcpeerconnection/createdatachannel",
        "syntax": "dataChannel = RTCPeerConnection.createDataChannel(label[, options]);",
        "type": "WebRTC"
    },
    "RTCPeerConnection.createOffer": {
        "descr": "The createOffer() method of the RTCPeerConnection interface initiates the creation of an SDP offer for the purpose of starting a new WebRTC connection to a remote peer. The SDP offer includes information about any MediaStreamTracks already attached to the WebRTC session, codec, and options supported by the browser, and any candidates already gathered by the ICE agent, for the purpose of being sent over the signaling channel to a potential peer to request a connection or to update the configuration of an existing connection.",
        "name": "RTCPeerConnection.createOffer",
        "params": [
            {
                "descr": "An RTCOfferOptions dictionary providing options requested for the offer.",
                "name": "options Optional"
            },
            {
                "descr": "To restart ICE on an active connection, set this to true. ",
                "name": "iceRestart Optional"
            },
            {
                "descr": "A legacy Boolean option which used to control whether or not to offer to the remote peer the opportunity to try to send audio. ",
                "name": "offerToReceiveAudio Optional (Legacy)"
            },
            {
                "descr": "A legacy Boolean option which used to control whether or not to offer to the remote peer the opportunity to try to send video. ",
                "name": "offerToReceiveVideo Optional (Legacy)"
            },
            {
                "descr": "Some codecs and hardware are able to detect when audio begins and ends by watching for \"silence\" (or relatively low sound levels) to occur. ",
                "name": "voiceActivityDetection Optional"
            },
            {
                "descr": "An RTCSessionDescriptionCallback which will be passed a single RTCSessionDescription object describing the newly-created offer.",
                "name": "Deprecated parameters   In older code and documentation, you may see a callback-based version of this function. This has been deprecated and its use is strongly discouraged. You should update any existing code to use the Promise-based version of createOffer() instead. The parameters for this form of createOffer() are described below, to aid in updating existing code.   successCallback"
            },
            {
                "descr": "An RTCPeerConnectionErrorCallback which will be passed a single DOMException object explaining why the request to create an offer failed.",
                "name": "errorCallback"
            },
            {
                "descr": "An optional RTCOfferOptions dictionary providing options requested for the offer.",
                "name": "options Optional"
            },
            {
                "descr": "The RTCPeerConnection is closed.",
                "name": "InvalidStateError"
            },
            {
                "descr": "No certificate or set of certificates was provided for securing the connection, and createOffer() was unable to create a new one. ",
                "name": "NotReadableError"
            },
            {
                "descr": "Examining the state of the system to determine resource availability in order to generate the offer failed for some reason.",
                "name": "OperationError"
            }
        ],
        "path": "dom/rtcpeerconnection/createoffer",
        "syntax": "aPromise = myPeerConnection.createOffer([options]);\n or  myPeerConnection.createOffer(successCallback, failureCallback, [options]));",
        "type": "WebRTC"
    },
    "RTCPeerConnection.currentLocalDescription": {
        "descr": "The read-only property RTCPeerConnection.currentLocalDescription returns an RTCSessionDescription object describing the local end of the connection as it was most recently successfully negotiated since the last time the RTCPeerConnection finished negotiating and connecting to a remote peer. Also included is a list of any ICE candidates that may already have been generated by the ICE agent since the offer or answer represented by the description was first instantiated.",
        "name": "RTCPeerConnection.currentLocalDescription",
        "params": [],
        "path": "dom/rtcpeerconnection/currentlocaldescription",
        "syntax": "sessionDescription = RTCPeerConnection.currentLocalDescription; Return value The current description of the local end of the connection, if one has been set. If none has been successfully set, this value is null. Example This example looks at the currentLocalDescription and displays an alert containing the RTCSessionDescription object's type and sdp fields. var pc = new RTCPeerConnection();\n or  … var sd = pc.currentLocalDescription; if (sd) { alert(\"Local session: type='\" + sd.type + \"'; sdp description='\" + sd.sdp + \"'\");\n or  } else { alert(\"No local session yet.\");\n or  });",
        "type": "WebRTC"
    },
    "RTCPeerConnection.currentRemoteDescription": {
        "descr": "The read-only property RTCPeerConnection.currentRemoteDescription returns an RTCSessionDescription object describing the remote end of the connection as it was most recently successfully negotiated since the last time the RTCPeerConnection finished negotiating and connecting to a remote peer. Also included is a list of any ICE candidates that may already have been generated by the ICE agent since the offer or answer represented by the description was first instantiated.",
        "name": "RTCPeerConnection.currentRemoteDescription",
        "params": [],
        "path": "dom/rtcpeerconnection/currentremotedescription",
        "syntax": "sessionDescription = RTCPeerConnection.currentRemoteDescription; Return value The current description of the remote end of the connection, if one has been set. If none has been successfully set, this value is null. Example This example looks at the currentRemoteDescription and displays an alert containing the RTCSessionDescription object's type and sdp fields. var pc = new RTCPeerConnection();\n or  … var sd = pc.currentRemoteDescription; if (sd) { alert(\"Local session: type='\" + sd.type + \"'; sdp description='\" + sd.sdp + \"'\");\n or  } else { alert(\"No local session yet.\");\n or  });",
        "type": "WebRTC"
    },
    "RTCPeerConnection.defaultIceServers": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCPeerConnection.defaultIceServers",
        "params": [],
        "path": "dom/rtcpeerconnection/defaulticeservers",
        "syntax": "var defaultIceServers = RTCPeerConnection.defaultIceServers; Value An array of ICE servers, specified as objects based on RTCIceServer, which the browser will use if none are specified in the configuration of the RTCPeerConnection. If there are no defaults provided by the browser, the returned array is empty; this property's value is never null. Example var pc = new RTCPeerConnection();\n or  var iceServers = pc.defaultIceServers; if (iceServers.length === 0) { // Deal with the lack of default ICE servers, possibly by using our own defaults });",
        "type": "WebRTC"
    },
    "RTCPeerConnection.generateCertificate": {
        "descr": "The generateCertificate() method of the RTCPeerConnection interface creates and stores an X.509 certificate and corresponding private key then returns an RTCCertificate, providing access to it.",
        "name": "RTCPeerConnection.generateCertificate",
        "params": [
            {
                "descr": "A DOMString identifying the algorithm to use in creating the key.",
                "name": "keygenAlgorithm"
            }
        ],
        "path": "dom/rtcpeerconnection/generatecertificate",
        "syntax": "var cert = RTCPeerConnection.generateCertificate(keygenAlgorithm)",
        "type": "WebRTC"
    },
    "RTCPeerConnection.getConfiguration": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCPeerConnection.getConfiguration",
        "params": [],
        "path": "dom/rtcpeerconnection/getconfiguration",
        "syntax": "var configuration = RTCPeerConnection.getConfiguration();",
        "type": "WebRTC"
    },
    "RTCPeerConnection.getIdentityAssertion": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCPeerConnection.getIdentityAssertion",
        "params": [],
        "path": "dom/rtcpeerconnection/getidentityassertion",
        "syntax": "pc.getIdentityAssertion();",
        "type": "WebRTC"
    },
    "RTCPeerConnection.getLocalStreams": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCPeerConnection.getLocalStreams",
        "params": [],
        "path": "dom/rtcpeerconnection/getlocalstreams",
        "syntax": "var mediaStreams[] = pc.getLocalStreams();",
        "type": "WebRTC"
    },
    "RTCPeerConnection.getReceivers": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCPeerConnection.getReceivers",
        "params": [],
        "path": "dom/rtcpeerconnection/getreceivers",
        "syntax": "var receivers[] = RTCPeerConnection.getReceivers();",
        "type": "WebRTC"
    },
    "RTCPeerConnection.getRemoteStreams": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCPeerConnection.getRemoteStreams",
        "params": [],
        "path": "dom/rtcpeerconnection/getremotestreams",
        "syntax": "var mediaStreams[] = pc.getRemoteStreams();",
        "type": "WebRTC"
    },
    "RTCPeerConnection.getSenders": {
        "descr": "The RTCPeerConnection method getSenders() returns an array of RTCRtpSender objects, each of which represents the RTP sender responsible for transmitting one track's data. A sender object provides methods and properties for examining and controlling the encoding and transmission of the track's data.",
        "name": "RTCPeerConnection.getSenders",
        "params": [],
        "path": "dom/rtcpeerconnection/getsenders",
        "syntax": "var senders = RTCPeerConnection.getSenders();",
        "type": "WebRTC"
    },
    "RTCPeerConnection.getStats": {
        "descr": "The RTCPeerConnection method getStats() returns a promise which resolves with data providing statistics about either the overall connection or about the specified MediaStreamTrack.",
        "name": "RTCPeerConnection.getStats",
        "params": [
            {
                "descr": "A MediaStreamTrack for which to gather statistics. ",
                "name": "selector Optional"
            },
            {
                "descr": "There is no RTCRtpSender or RTCRtpReceiver whose track matches the specified selector, or selector matches more than one sender or receiver.",
                "name": "InvalidAccessError"
            }
        ],
        "path": "dom/rtcpeerconnection/getstats",
        "syntax": "promise = rtcPeerConnection.getStats(selector)",
        "type": "WebRTC"
    },
    "RTCPeerConnection.getStreamById": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCPeerConnection.getStreamById",
        "params": [
            {
                "descr": "Is a DOMString corresponding to the stream to return.",
                "name": "id"
            }
        ],
        "path": "dom/rtcpeerconnection/getstreambyid",
        "syntax": "var mediaStream = pc.getStream(id);",
        "type": "WebRTC"
    },
    "RTCPeerConnection.iceConnectionState": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCPeerConnection.iceConnectionState",
        "params": [],
        "path": "dom/rtcpeerconnection/iceconnectionstate",
        "syntax": "var state = RTCPeerConnection.iceConnectionState; Value The current state of the ICE agent and its connection. The value is one of the strings in the RTCIceConnectionState enum. RTCIceConnectionState enum The RTCIceConnectionState enum defines the string constants used to describe the current state of the ICE agent and its connection to the ICE server (that is, the STUN or TURN server).",
        "type": "WebRTC"
    },
    "RTCPeerConnection.iceGatheringState": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCPeerConnection.iceGatheringState",
        "params": [],
        "path": "dom/rtcpeerconnection/icegatheringstate",
        "syntax": "var state = RTCPeerConnection.iceGatheringState; Value The possible values are those of an enum of type RTCIceGatheringState. RTCIceGatheringState enum The RTCIceGatheringState enum defines string constants which reflect the current status of ICE gathering, as returned using the RTCPeerConnection.iceGatheringState property. You can detect when this value changes by watching for an event of type icegatheringstatechange.    Constant Description     \"new\" The peer connection was just created and hasn't done any networking yet.   \"gathering\" The ICE agent is in the process of gathering candidates for the connection.   \"complete\" The ICE agent has finished gathering candidates. If something happens that requires collecting new candidates, such as a new interface being added or the addition of a new ICE server, the state will revert to \"gathering\" to gather those candidates.    Example var pc = new RTCPeerConnection();\n or  var state = pc.iceGatheringState;);",
        "type": "WebRTC"
    },
    "RTCPeerConnection.localDescription": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCPeerConnection.localDescription",
        "params": [],
        "path": "dom/rtcpeerconnection/localdescription",
        "syntax": "var sessionDescription = peerConnection.localDescription; On a more fundamental level, the returned value is the value of RTCPeerConnection.pendingLocalDescription if that property isn't null; otherwise, the value of RTCPeerConnection.currentLocalDescription is returned. See Pending and current descriptions in WebRTC connectivity for details on this algorithm and why it's used. Example This example looks at the localDescription and displays an alert containing the RTCSessionDescription object's type and sdp fields. var pc = new RTCPeerConnection();\n or  … var sd = pc.localDescription; if (sd) { alert(\"Local session: type='\" + sd.type + \"'; sdp description='\" + sd.sdp + \"'\");\n or  } else { alert(\"No local session yet.\");\n or  });",
        "type": "WebRTC"
    },
    "RTCPeerConnection.onaddstream": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCPeerConnection.onaddstream",
        "params": [],
        "path": "dom/rtcpeerconnection/onaddstream",
        "syntax": "RTCPeerConnection.onaddstream = eventHandler;  Value This property is a function which handles addstream events. These events, of type MediaStreamEvent, are sent when streams are added to the connection by the remote peer. The first time an event occurs may be nearly immediately after the remote end of the connection is set using RTCPeerConnection.setRemoteDescription()",
        "type": "WebRTC"
    },
    "RTCPeerConnection.onconnectionstatechange": {
        "descr": "The RTCPeerConnection.onconnectionstatechange property specifies an EventHandler which is called to handle the connectionstatechange event when it occurs on an instance of RTCPeerConnection. This happens whenever the aggregate state of the connection changes. The aggregate state is a combination of the states of all of the individual network transports being used by the connection.",
        "name": "RTCPeerConnection.onconnectionstatechange",
        "params": [],
        "path": "dom/rtcpeerconnection/onconnectionstatechange",
        "syntax": "RTCPeerConnection.onconnectionstatechange = eventHandler;  Value A function which is called by the browser when the connectionstatechange event occurs on the RTCPeerConnection. The function receives as input a single parameter, which is an object of type Event. The event object contains no special information of note; you can look at the value of the peer connection's connectionState property to determine what the new state is. Example pc.onconnectionstatechange = function(event) { switch(pc.connectionState) { case \"connected\": // The connection has become fully connected break; case \"disconnected\": case \"failed\": // One or more transports has terminated unexpectedly or in an error break; case \"closed\": // The connection has been closed break; } }",
        "type": "WebRTC"
    },
    "RTCPeerConnection.ondatachannel": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCPeerConnection.ondatachannel",
        "params": [],
        "path": "dom/rtcpeerconnection/ondatachannel",
        "syntax": "RTCPeerConnection.ondatachannel = function;  Value Set this property to be a function you provide which receives as input a single parameter: an RTCDataChannelEvent which provides in its channel property the RTCDataChannel which has been created. Example pc.ondatachannel = function(ev) { console.log('Data channel is created!');\n or  ev.channel.onopen = function() { console.log('Data channel is open and ready to be used.');\n or  }; };);",
        "type": "WebRTC"
    },
    "RTCPeerConnection.onicecandidate": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCPeerConnection.onicecandidate",
        "params": [],
        "path": "dom/rtcpeerconnection/onicecandidate",
        "syntax": "RTCPeerConnection.onicecandidate = eventHandler;  Value This should be set to a function which you provide that accepts as input an RTCPeerConnectionIceEvent object representing the icecandidate event. The function should deliver the ICE candidate, whose SDP can be found in the event's candidate property, to the remote peer through the signaling server. If the event's candidate property is null, ICE gathering has finished. Example The example below, which is based on the code from the article Signaling and video calling, sets up a handler for icecandidate events to send the candidates to the remote peer. Example and sequence of icecandidate events happening: 13:28:58.561 ice RTCPeerConnectionIceEvent {isTrusted: true, candidate: RTCIceCandidate, type: \"icecandidate\", …} 13:28:58.562 ice RTCPeerConnectionIceEvent {isTrusted: true, candidate: RTCIceCandidate, type: \"icecandidate\", …} 13:28:58.660 ice RTCPeerConnectionIceEvent {isTrusted: true, candidate: RTCIceCandidate, type: \"icecandidate\", …} 13:28:58.661 ice RTCPeerConnectionIceEvent {isTrusted: true, candidate: RTCIceCandidate, type: \"icecandidate\", …} 13:28:58.661 ice RTCPeerConnectionIceEvent {isTrusted: true, candidate: null, type: \"icecandidate\", …}  pc.onicecandidate = function(event) { if (event.candidate) { // Send the candidate to the remote peer } else { // All ICE candidates have been sent } }",
        "type": "WebRTC"
    },
    "RTCPeerConnection.oniceconnectionstatechange": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCPeerConnection.oniceconnectionstatechange",
        "params": [],
        "path": "dom/rtcpeerconnection/oniceconnectionstatechange",
        "syntax": "RTCPeerConnection.oniceconnectionstatechange = eventHandler;  Value This event handler can be set to function which is passed a single input parameter: an Event object describing the iceconnectionstatechange event which occurred. Your code can look at the value of RTCPeerConnection.iceConnectionState to determine what the new state is. Example The example below watches the state of the ICE agent for a failure or unexpected closure and takes appropriate action, such as presenting an error message or attempting to restart the ICE agent. pc.oniceconnectionstatechange = function(event) { if (pc.iceConnectionState === \"failed\" || pc.iceConnectionState === \"disconnected\" || pc.iceConnectionState === \"closed\") { // Handle the failure } };",
        "type": "WebRTC"
    },
    "RTCPeerConnection.onicegatheringstatechange": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCPeerConnection.onicegatheringstatechange",
        "params": [],
        "path": "dom/rtcpeerconnection/onicegatheringstatechange",
        "syntax": "RTCPeerConnection.onicegatheringstatechange = eventHandler;  Value A function you provide which is passed a single parameter: an Event object containing the icegatheringstatechange event. You can determine the new state of ICE gathering by looking at the value of the RTCPeerConnection.iceGatheringState property. Example This example updates status information presented to the user to let them know what's happening by examining the current value of the iceGatheringState property each time it changes and changing the contents of a status display based on the new information. The status is simply presented as text in a <div> element: <div id=\"iceStatus\"></div>  The actual event handler looks like this: pc.onicegatheringstatechange = function() { let label = \"Unknown\"; switch(pc.iceGatheringState) { case \"new\": case \"complete\": label = \"Idle\"; break; case \"gathering\": label = \"Determining route\"; break; } document.getElementById(\"iceStatus\").innerHTML = label; }",
        "type": "WebRTC"
    },
    "RTCPeerConnection.onidentityresult": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCPeerConnection.onidentityresult",
        "params": [],
        "path": "dom/rtcpeerconnection/onidentityresult",
        "syntax": "peerconnection.onidentityresult = function;  Values   function is the name of a user-defined function, without the ()",
        "type": "WebRTC"
    },
    "RTCPeerConnection.onidpassertionerror": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCPeerConnection.onidpassertionerror",
        "params": [],
        "path": "dom/rtcpeerconnection/onidpassertionerror",
        "syntax": "peerconnection.onidpassertionerror = function;  Values   function is the name of a user-defined function, without the ()",
        "type": "WebRTC"
    },
    "RTCPeerConnection.onidpvalidationerror": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCPeerConnection.onidpvalidationerror",
        "params": [],
        "path": "dom/rtcpeerconnection/onidpvalidationerror",
        "syntax": "peerconnection.onidpvalidationerror = function;  Values   function is the name of a user-defined function, without the ()",
        "type": "WebRTC"
    },
    "RTCPeerConnection.onnegotiationneeded": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCPeerConnection.onnegotiationneeded",
        "params": [],
        "path": "dom/rtcpeerconnection/onnegotiationneeded",
        "syntax": "RTCPeerConnection.onnegotiationneeded = eventHandler;  Value This should be set to a function you provide which is passed a single parameter: an Event object containing the negotiationneeded event. There's no additional information provided in the event; anything you need, you can get by examining the properties of the RTCPeerConnection. Example This example, derived from the example in Signaling and video calling, establishes a handler for negotiationneeded events to handle creating an offer, configuring the local end of the connection, and sending the offer to the remote peer. pc.onnegotiationneeded = function() { pc.createOffer().then(function(offer) { return pc.setLocalDescription(offer);\n or  }) .then(function() { // Send the offer to the remote peer through the signaling server });\n or  }) .catch(reportError);\n or  });",
        "type": "WebRTC"
    },
    "RTCPeerConnection.onpeeridentity": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCPeerConnection.onpeeridentity",
        "params": [],
        "path": "dom/rtcpeerconnection/onpeeridentity",
        "syntax": "peerconnection.onpeeridentity = function;  Values   function is the name of a user-defined function, without the ()",
        "type": "WebRTC"
    },
    "RTCPeerConnection.onsignalingstatechange": {
        "descr": "The onsignalingstatechange property of the RTCPeerConnection interface is an EventHandler which specifies a function to be called when the signalingstatechange event occurs on an RTCPeerConnection interface. The function receives as input the event object, of type Event; this event is sent when the value of RTCPeerConnection.signalingState changes, as the result of a call to either setLocalDescription() or setRemoteDescription().",
        "name": "RTCPeerConnection.onsignalingstatechange",
        "params": [],
        "path": "dom/rtcpeerconnection/onsignalingstatechange",
        "syntax": "RTCPeerConnection.onsignalingstatechange = errorHandler;  Value Set this to a function which you provide that receives an Event object as input; this contains the signalingstatechange event. This event object doesn't provide details about what changed, but you can examine the signalingState property to determine what the new state is. Example This snippet shows a handler for signalingstatechange that looks for the \"have-local-pranswer\" signaling state—indicating that a remote offer has been received and a local description of type \"pranswer\" has been applied in response. pc.onsignalingstatechange = function(event) { if (pc.signalingState === \"have-local-pranswer\") { // setLocalDescription() has been called with an answer } };",
        "type": "WebRTC"
    },
    "RTCPeerConnection.ontrack": {
        "descr": "The RTCPeerConnection property ontrack is an EventHandler which specifies a function to be called when the track event occurs, indicating that a track has been added to the RTCPeerConnection. The function receives as input the event object, of type RTCTrackEvent; this event is sent when a new incoming MediaStreamTrack has been created and associated with an RTCRtpReceiver object which has been added to the set of receivers on connection.",
        "name": "RTCPeerConnection.ontrack",
        "params": [],
        "path": "dom/rtcpeerconnection/ontrack",
        "syntax": "RTCPeerConnection.ontrack = eventHandler;  Value Set ontrack to be a function you provide that accepts as input a RTCTrackEvent object describing the new track and how it's being used. This information includes the MediaStreamTrack object representing the new track, the RTCRtpReceiver and RTCRtpTransceiver, and a list of MediaStream objects which indicates which stream or streams the track is part of.. Example This example, taken from the code for the article Signaling and video calling, connects the incoming track to the <video> element which will be used to display the incoming video. pc.ontrack = function(event) { document.getElementById(\"received_video\").srcObject = event.streams[0]; document.getElementById(\"hangup-button\").disabled = false; };",
        "type": "WebRTC"
    },
    "RTCPeerConnection.peerIdentity": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCPeerConnection.peerIdentity",
        "params": [
            {
                "descr": "Is a RTCIdentityAssertion, a dictionary of two values:   \"idp\", a DOMString representing the domain name of the Identity Provider who produced the assertion. ",
                "name": "identity"
            }
        ],
        "path": "dom/rtcpeerconnection/peeridentity",
        "syntax": "var identity = peerConnection.peerIdentity; Value  identity Is a RTCIdentityAssertion, a dictionary of two values:   \"idp\", a DOMString representing the domain name of the Identity Provider who produced the assertion.  \"name\", a DOMString containing the verified assertion.    Example var pc = new RTCPeerConnection();\n or  … var identity = pc.peerIdentity; if (identity) { alert(\"Identity of the peer: idp='\" + identity.idp + \"'; assertion='\" + identity.name + \"'\");\n or  } else { alert(\"Identity of the peer has not been verified\");\n or  });",
        "type": "WebRTC"
    },
    "RTCPeerConnection.pendingLocalDescription": {
        "descr": "The read-only property RTCPeerConnection.pendingLocalDescription returns an RTCSessionDescription object describing a pending configuration change for the local end of the connection. This does not describe the connection as it currently stands, but as it may exist in the near future. Use RTCPeerConnection.currentLocalDescription or RTCPeerConnection.localDescription to get the current state of the endpoint. For details on the difference, see Pending and current descriptions in WebRTC connectivity.",
        "name": "RTCPeerConnection.pendingLocalDescription",
        "params": [],
        "path": "dom/rtcpeerconnection/pendinglocaldescription",
        "syntax": "sessionDescription = RTCPeerConnection.pendingLocalDescription; Return value If a local description change is in progress, this is an RTCSessionDescription describing the proposed configuration. Otherwise, this returns null. Example This example looks at the pendingLocalDescription to determine whether or not there's a description change being processed. var pc = new RTCPeerConnection();\n or  … var sd = pc.pendingLocalDescription; if (sd) { // There's a description change underway! } else { // No description change pending });",
        "type": "WebRTC"
    },
    "RTCPeerConnection.pendingRemoteDescription": {
        "descr": "The read-only property RTCPeerConnection.pendingRemoteDescription returns an RTCSessionDescription object describing a pending configuration change for the remote end of the connection. This does not describe the connection as it currently stands, but as it may exist in the near future. Use RTCPeerConnection.currentRemoteDescription or RTCPeerConnection.remoteDescription to get the current session description for the remote endpoint. For details on the difference, see Pending and current descriptions in WebRTC connectivity.",
        "name": "RTCPeerConnection.pendingRemoteDescription",
        "params": [],
        "path": "dom/rtcpeerconnection/pendingremotedescription",
        "syntax": "sessionDescription = RTCPeerConnection.pendingRemoteDescription; Return value If a remote description change is in progress, this is an RTCSessionDescription describing the proposed configuration. Otherwise, this returns null. Example This example looks at the pendingRemoteDescription to determine whether or not there's a description change being processed. var pc = new RTCPeerConnection();\n or  … var sd = pc.pendingRemoteDescription; if (sd) { // There's a description change underway! } else { // No description change pending });",
        "type": "WebRTC"
    },
    "RTCPeerConnection.remoteDescription": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCPeerConnection.remoteDescription",
        "params": [],
        "path": "dom/rtcpeerconnection/remotedescription",
        "syntax": "var sessionDescription = peerConnection.remoteDescription; On a more fundamental level, the returned value is the value of RTCPeerConnection.pendingRemoteDescription if that property isn't null; otherwise, the value of RTCPeerConnection.currentRemoteDescription is returned. See Pending and current descriptions in WebRTC connectivity for details on this algorithm and why it's used. Example This example looks at the remoteDescription and displays an alert containing the RTCSessionDescription object's type and sdp fields. var pc = new RTCPeerConnection();\n or  … var sd = pc.remoteDescription; if (sd) { alert(\"Remote session: type='\" + sd.type + \"'; sdp description='\" + sd.sdp + \"'\");\n or  } else { alert(\"No remote session yet.\");\n or  });",
        "type": "WebRTC"
    },
    "RTCPeerConnection.removeStream": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "RTCPeerConnection.removeStream",
        "params": [
            {
                "descr": "A MediaStream specifying the stream to remove from the connection.",
                "name": "mediaStream"
            }
        ],
        "path": "dom/rtcpeerconnection/removestream",
        "syntax": "RTCPeerConnection.removeStream(mediaStream);",
        "type": "WebRTC"
    },
    "RTCPeerConnection.removeTrack": {
        "descr": "The RTCPeerConnection.removeTrack() method tells the local end of the connection to stop sending media from the specified track, without actually removing the corresponding RTCRtpSender from the list of senders as reported by RTCPeerConnection.getSenders(). If the track is already stopped, or is not in the connection's senders list, this method has no effect.",
        "name": "RTCPeerConnection.removeTrack",
        "params": [
            {
                "descr": "A RTCRtpSender specifying the sender to remove from the connection.",
                "name": "mediaTrack"
            },
            {
                "descr": "The connection is not open.",
                "name": "InvalidStateError"
            }
        ],
        "path": "dom/rtcpeerconnection/removetrack",
        "syntax": "pc.removeTrack(sender);",
        "type": "WebRTC"
    },
    "RTCPeerConnection.sctp": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCPeerConnection.sctp",
        "params": [],
        "path": "dom/rtcpeerconnection/sctp",
        "syntax": "var sctp = RTCPeerConnection.sctp; Value A RTCSctpTransport object describing the SCTP transport being used by the RTCPeerConnection for transmitting and receiving on its data channels, or null if SCTP negotiation hasn't happened. Example var pc = new RTCPeerConnection();\n or  var channel = pc.createDataChannel(\"Mydata\");\n or  channel.onopen = function(event) { channel.send('sending a message');\n or  } channel.onmessage = function(event) { console.log(event.data);\n or  } // Determine the largest message size that can be sent var sctp = pc.sctp; var maxMessageSize = sctp.maxMessageSize;);",
        "type": "WebRTC"
    },
    "RTCPeerConnection.setConfiguration": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCPeerConnection.setConfiguration",
        "params": [
            {
                "descr": "An RTCConfiguration object which provides the options to be set. ",
                "name": "configuration"
            },
            {
                "descr": "One or more of the URLs specified in configuration.iceServers is a TURN server, but complete login information is not provided (that is, either the RTCIceServer.username or RTCIceServer.credentials is missing). This prevents successful login to the server.",
                "name": "InvalidAccessError"
            },
            {
                "descr": "The configuration includes changed identity information, but the connection already has identity information specified. ",
                "name": "InvalidModificationError"
            },
            {
                "descr": "The RTCPeerConnection is closed.",
                "name": "InvalidStateError"
            },
            {
                "descr": "One or more of the URLs provided in the configuration.iceServers list is invalid.",
                "name": "SyntaxError"
            }
        ],
        "path": "dom/rtcpeerconnection/setconfiguration",
        "syntax": "RTCPeerConnection.setConfiguration(configuration);",
        "type": "WebRTC"
    },
    "RTCPeerConnection.setIdentityProvider": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCPeerConnection.setIdentityProvider",
        "params": [
            {
                "descr": "Is a DOMString is the domain name where the IdP is.",
                "name": "domainname"
            },
            {
                "descr": "Is a DOMString representing the protocol used to communicate with the IdP. ",
                "name": "protocol Optional"
            },
            {
                "descr": "Is a DOMString representing the username associated with the IdP.",
                "name": "username Optional"
            }
        ],
        "path": "dom/rtcpeerconnection/setidentityprovider",
        "syntax": "pc.setIdentityProvider(domainname [, protocol] [, username]);",
        "type": "WebRTC"
    },
    "RTCPeerConnection.setLocalDescription": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCPeerConnection.setLocalDescription",
        "params": [
            {
                "descr": "An RTCSessionDescriptionInit or RTCSessionDescription which specifies the configuration to be applied to the local end of the connection.",
                "name": "sessionDescription"
            },
            {
                "descr": "A JavaScript Function which accepts no input parameters to be be called once the description has been successfully set. ",
                "name": "successCallback"
            },
            {
                "descr": "A function matching the signature RTCPeerConnectionErrorCallback which gets called if the description can't be set. ",
                "name": "errorCallback"
            },
            {
                "descr": "The connection's signalingState is \"closed\", indicating that the connection is not currently open, so negotiation cannot take place.",
                "name": "InvalidStateError"
            },
            {
                "descr": "The RTCSessionDescription specified by the sessionDescription parameter is invalid.",
                "name": "InvalidSessionDescriptionError"
            }
        ],
        "path": "dom/rtcpeerconnection/setlocaldescription",
        "syntax": "aPromise = RTCPeerConnection.setLocalDescription(sessionDescription);\n or  pc.setLocalDescription(sessionDescription, successCallback, errorCallback);",
        "type": "WebRTC"
    },
    "RTCPeerConnection.setRemoteDescription": {
        "descr": "The RTCPeerConnection.setRemoteDescription() method changes the remote description associated with the connection. This description specifies the properties of the remote end of the connection, including the media format. The method takes a single parameter—the session description—and it returns a Promise which is fulfilled once the description has been changed, asynchronously.",
        "name": "RTCPeerConnection.setRemoteDescription",
        "params": [
            {
                "descr": "An RTCSessionDescriptionInit or RTCSessionDescription which specifies the configuration to be considered for the remote end of the connection.",
                "name": "sessionDescription"
            },
            {
                "descr": "A JavaScript Function which accepts no input parameters to be be called once the description has been successfully set. ",
                "name": "successCallback"
            },
            {
                "descr": "A function matching the signautre RTCPeerConnectionErrorCallback which gets called if the description can't be set. ",
                "name": "errorCallback"
            },
            {
                "descr": "The connection's signalingState is \"closed\", indicating that the connection is not currently open, so negotiation cannot take place.",
                "name": "InvalidStateError"
            },
            {
                "descr": "The RTCSessionDescription specified by the sessionDescription parameter is invalid.",
                "name": "InvalidSessionDescriptionError"
            }
        ],
        "path": "dom/rtcpeerconnection/setremotedescription",
        "syntax": "aPromise = pc.setRemoteDescription(sessionDescription);\n or  pc.setRemoteDescription(sessionDescription, successCallback, errorCallback);",
        "type": "WebRTC"
    },
    "RTCPeerConnection.signalingState": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCPeerConnection.signalingState",
        "params": [],
        "path": "dom/rtcpeerconnection/signalingstate",
        "syntax": "var state = RTCPeerConnection.signalingState; Value The allowed values are those included in the enum RTCSignalingState. RTCSignalingState enum The RTCSignalingState enum specifies the possible values of RTCPeerConnection.signalingState, which indicates where in the process of signaling the exchange of offer and answer the connection currently is.    Constant Description     \"stable\" There is no ongoing exchange of offer and answer underway. This may mean that the RTCPeerConnection object is new, in which case both the localDescription and remoteDescription are null; it may also mean that negotiation is complete and a connection has been established.   \"have-local-offer\" The local peer has called RTCPeerConnection.setLocalDescription()",
        "type": "WebRTC"
    },
    "RTCPeerConnectionIceEvent.candidate": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCPeerConnectionIceEvent.candidate",
        "params": [],
        "path": "dom/rtcpeerconnectioniceevent/candidate",
        "syntax": "var candidate = event.candidate; Example pc.onicecandidate = function( ev ) { alert(\"The ICE candidate (transport address: '\" + ev.candidate.candidate + \"') has been added to this connection.\");\n or  });",
        "type": "WebRTC"
    },
    "RTCPeerConnectionIceEvent.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCPeerConnectionIceEvent.constructor",
        "params": [
            {
                "descr": "Is a DOMString containing the name of the event, like \"icecandidate\".",
                "name": "type"
            },
            {
                "descr": "A dictionary of type RTCPeerConnectionInit, which may contain one or more of the following fields:   \"candidate\" (optional, default is null): A RTCIceCandidate representing the ICE candidate being concerned by the event. If null, the event indicates the end of candidate gathering.  \"url\" (optional, default is null): The URL of the STUN or TURN server which was used to gather the candidate. If the candidate was not gathered by a STUN or TURN server, this value must be null.  \"bubbles\" (optional, default is false): Inherited from EventInit(), this Boolean option indicates whether or not the event must bubble.  \"cancelable\" (optional, default is false, inherited from EventInit(), this Boolean indicates whether or not the event can be canceled.",
                "name": "options"
            }
        ],
        "path": "dom/rtcpeerconnectioniceevent/rtcpeerconnectioniceevent",
        "syntax": "var event = new RTCPeerConnectionIceEvent(type, options);",
        "type": "WebRTC"
    },
    "RTCRtpCodecParameters": {
        "descr": "The RTCRtpCodecParameters dictionary, part of the WebRTC API, is used to describe the configuration parameters for a single media codec. In addition to being the type of the RTCRtpParameters.codecs property, it's used when calling RTCRtpTransceiver.setCodecPreferences() to configure a transceiver's codecs before beginning the offer/answer process to establish a WebRTC peer connection.",
        "name": "RTCRtpCodecParameters",
        "params": [
            {
                "descr": "The RTP payload type used to identify this codec.",
                "name": "payloadType Read only  Optional"
            },
            {
                "descr": "The codec's MIME media type and subtype specified as a DOMString of the form \"type/subtype\". ",
                "name": "mimeType Read only  Optional"
            },
            {
                "descr": "An unsigned long integer value specifying the codec's clock rate in hertz (Hz). ",
                "name": "clockRate Read only  Optional"
            },
            {
                "descr": "An unsigned short integer indicating the number of channels the codec should support. ",
                "name": "channels Read only  Optional"
            },
            {
                "descr": "A DOMString containing the format-specific parameters field from the \"a=fmtp\" line in the codec's SDP, if one is present; see section 5.8 of the IETF specification for JSEP. ",
                "name": "sdpFmtpLine Read only  Optional"
            },
            {
                "descr": "The IANA document providing registries of permitted values for the RTP parameters used by this dictionary.",
                "name": "Real-Time Transport Protocol (RTP) Parameters"
            }
        ],
        "path": "dom/rtcrtpcodecparameters",
        "syntax": "payloadType Read only  Optional  The RTP payload type used to identify this codec.  mimeType Read only  Optional  The codec's MIME media type and subtype specified as a DOMString of the form \"type/subtype\". IANA maintains a registry of valid MIME types.  clockRate Read only  Optional  An unsigned long integer value specifying the codec's clock rate in hertz (Hz). The clock rate is the rate at which the codec's RTP timestamp advances. Most codecs have specific values or ranges of values they permit; see the IANA payload format media type registry for details.  channels",
        "type": "WebRTC"
    },
    "RTCRtpContributingSource.audioLevel": {
        "descr": "The read-only audioLevel property of the RTCRtpContributingSource interface indicates the audio level contained in the last RTP packet played from the described source. audioLevel will be the level value defined in [RFC6465] if the RFC 6465 header extension is present, and otherwise null.",
        "name": "RTCRtpContributingSource.audioLevel",
        "params": [],
        "path": "dom/rtcrtpcontributingsource/audiolevel",
        "syntax": "var audioLevel = RTCRtpContributingSource.audioLevel Value A double-precision floating-point number which indicates the volume level of the audio in the most recently received RTP packet from the source described by the RTCRtpContributingSource. This value, which is in the range 0.0 to 1.0, is on a linear scale and its value is defined in dBov, or decibels (overload). This is the amplitude relative to the point at which clipping of the audio begins to occur. A value of 1.0 represents 0 dBov (maximum volume), a value of 0.0 represents silence, and a value of 0.5 represents approximately 6 dB SPL (decibels of sound pressure level) change in the sound pressure level from 0 dBov.",
        "type": "WebRTC"
    },
    "RTCRtpContributingSource.source": {
        "descr": "The read-only source property of the RTCRtpContributingSource interface returns the source identifier of a particular stream of RTP packets. The value is the contributing source (CSRC) or synchronization source (SSRC) identifier, depending on whether the object is an RTCRtpContributingSource or RTCRtpSynchronizationSource, which is based on the former.",
        "name": "RTCRtpContributingSource.source",
        "params": [],
        "path": "dom/rtcrtpcontributingsource/source",
        "syntax": "var sourceID = RTCRtpContributingSource.source Value An unsigned, 32-bit integer value which uniquely identifies the source of RTP packets described by this RTCRtpContributingSource (in which case the value is a CSRC identifier) or RTCRtpSynchronizationSource",
        "type": "WebRTC"
    },
    "RTCRtpContributingSource.timestamp": {
        "descr": "The read-only timestamp property of the RTCRtpContributingSource interface returns a DOMHighResTimeStamp indicating the most recent time of playout of an RTP packet from the source.",
        "name": "RTCRtpContributingSource.timestamp",
        "params": [],
        "path": "dom/rtcrtpcontributingsource/timestamp",
        "syntax": "var domHighResTimeStamp = RTCRtpContributingSource.timestamp Value A DOMHighResTimeStamp which indicates the time at which the most recent RTP packet from the corresponding source was played out. Specifications    Specification Status Comment   WebRTC 1.0: Real-time Communication Between BrowsersThe definition of 'timestamp' in that specification. Candidate Recommendation Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  59  ?   59 Disabled    59 Disabled    Starting in version 60, the timestamp is correctly computed based on the window's Performance time, rather than Date.getTime()",
        "type": "WebRTC"
    },
    "RTCRtpReceiver.getContributingSources": {
        "descr": "The getContributingSources() method of the RTCRtpReceiver interface returns an array of RTCRtpContributingSource instances, each corresponding to one CSRC (contributing source) identifier received by the current RTCRtpReceiver in the last ten seconds.",
        "name": "RTCRtpReceiver.getContributingSources",
        "params": [],
        "path": "dom/rtcrtpreceiver/getcontributingsources",
        "syntax": "var rtcRtpContributingSources = rtcRtpReceiver.getContributingSources()",
        "type": "WebRTC"
    },
    "RTCRtpReceiver.getStats": {
        "descr": "The RTCRtpReceiver method getStats() asynchronously requests an RTCStatsReport object which provides statistics about incoming traffic on the owning RTCPeerConnection, returning a Promise whose fulfillment handler will be called once the results are available.",
        "name": "RTCRtpReceiver.getStats",
        "params": [],
        "path": "dom/rtcrtpreceiver/getstats",
        "syntax": "var promise = RTCRtpReceiver.getStats();",
        "type": "WebRTC"
    },
    "RTCRtpReceiver.getSynchronizationSources": {
        "descr": "The getSynchronizationSources() method of the RTCRtpReceiver interface returns an array of RTCRtpContributingSource instances, each corresponding to one SSRC (synchronization source) identifier received by the current RTCRtpReceiver in the last ten seconds.",
        "name": "RTCRtpReceiver.getSynchronizationSources",
        "params": [],
        "path": "dom/rtcrtpreceiver/getsynchronizationsources",
        "syntax": "var rtcRtpContributingSources = rtcRtpReceiver.getContributingSources()",
        "type": "WebRTC"
    },
    "RTCRtpSender.getParameters": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCRtpSender.getParameters",
        "params": [],
        "path": "dom/rtcrtpsender/getparameters",
        "syntax": "var rTCRtpParameters = rTCRtpSender.getParameters()",
        "type": "WebRTC"
    },
    "RTCRtpSender.getStats": {
        "descr": "The RTCRtpSender method getStats() asynchronously requests an RTCStatsReport object which provides statistics about outgoing traffic on the RTCPeerConnection which owns the sender, returning a Promise which is fulfilled when the results are available.",
        "name": "RTCRtpSender.getStats",
        "params": [],
        "path": "dom/rtcrtpsender/getstats",
        "syntax": "var promise = RTCRtpSender.getStats();",
        "type": "WebRTC"
    },
    "RTCRtpSender.replaceTrack": {
        "descr": "The RTCRtpSender method replaceTrack() replaces the track currently being used as the sender's source with a new MediaStreamTrack. The new track must be of the same media kind (audio, video, etc) and switching the track should not require negotiation.",
        "name": "RTCRtpSender.replaceTrack",
        "params": [
            {
                "descr": "A MediaStreamTrack specifying the track with which to replace the RTCRtpSender's current source track. ",
                "name": "newTrack Optional"
            },
            {
                "descr": "Replacing the RTCRtpSender's current track with the new one would require negotiation.",
                "name": "InvalidModificationError"
            },
            {
                "descr": "The track on which this method was called is stopped rather than running.",
                "name": "InvalidStateError"
            },
            {
                "descr": "The new track's kind doesn't match the original track.",
                "name": "TypeError"
            }
        ],
        "path": "dom/rtcrtpsender/replacetrack",
        "syntax": "trackReplacedPromise = sender.replaceTrack(newTrack);",
        "type": "WebRTC"
    },
    "RTCRtpSender.setParameters": {
        "descr": "The setParameters() method of the RTCRtpSender interface applies changes the configuration of the RTCRtpSender.track property. RTCRtpSender.track is an instance of MediaStreamTrack.",
        "name": "RTCRtpSender.setParameters",
        "params": [
            {
                "descr": "An object that sets options for the RTCRtpSender.track property. ",
                "name": "parameters Optional"
            }
        ],
        "path": "dom/rtcrtpsender/setparameters",
        "syntax": "var promise = rTCRtpSender.setParameters(parameters)",
        "type": "WebRTC"
    },
    "RTCRtpStreamStats.pliCount": {
        "descr": "The pliCount property of the RTCRtpStreamStats dictionary states the number of times the stream's receiving end sent a Picture Loss Indication (PLI) packet to the sender. A PLI packet indicates that some amount of encoded video data has been lost for one or more frames.",
        "name": "RTCRtpStreamStats.pliCount",
        "params": [],
        "path": "dom/rtcrtpstreamstats/plicount",
        "syntax": "var pliCount = RTCRtpStreamStats.pliCount; Value An integer value indicating he number of times a PLI packet was sent by the stream's receiver to the sender. A PLI message is used by video decoders (running on the receiving end of the stream) to notify the encoder (the sender) that an undefined amount of coded video data, which may span frame boundaries, has been lost.",
        "type": "WebRTC"
    },
    "RTCRtpStreamStats.qpSum": {
        "descr": "The qpSum property of the RTCRtpStreamStats dictionary is a value generated by adding the Quantization Parameter (QP) values for every frame sent or received to date on the video track corresponding to this RTCRtpStreamStats object. In general, the higher this number is, the more heavily compressed the video data is.",
        "name": "RTCRtpStreamStats.qpSum",
        "params": [],
        "path": "dom/rtcrtpstreamstats/qpsum",
        "syntax": "var qpSum = RTCRtpStreamStats.qpSum; Value An unsigned 64-bit integer value which indicates the sum of the quantization parameter (QP) value for every frame sent or received so far on the track described by the RTCRtpStreamStats",
        "type": "WebRTC"
    },
    "RTCRtpStreamStats.sliCount": {
        "descr": "Draft This page is not complete.",
        "name": "RTCRtpStreamStats.sliCount",
        "params": [],
        "path": "dom/rtcrtpstreamstats/slicount",
        "syntax": "var sliCount = RTCRtpStreamStats.sliCount; Value An unsigned long integer indicating the number of SLI packets the sender received from the receiver due to lost runs of macroblocks. A high value of sliCount may be an indication of an unreliable network. For technical details, see RFC 4585: 6.3.2.  Note: This value is sent by the sender to the receiver and is only present for video media.  Specifications    Specification Status Comment   Identifiers for WebRTC's Statistics APIThe definition of 'RTCRtpStreamStats.sliCount' in that specification. Candidate Recommendation Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  No  ?   55  No  No  ?        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support  No  No  ?   55  No  ?   ?     See also   RFC 4585: 6.3.2: Definition of \"Slice Loss Indication\" in the document Extended RTP Profile for Real-time Transport Control Protocol (RTCP)-Based Feedback (RTP/AVPF).    Edit this page on MDN",
        "type": "WebRTC"
    },
    "RTCRtpStreamStats.trackId": {
        "descr": "The RTCRtpStreamStats dictionary's trackId property is a string which uniquely identifies the RTCMediaStreamTrackStats object which contains the track statistics for the MediaStreamTrack for which statistics are provided in this object.",
        "name": "RTCRtpStreamStats.trackId",
        "params": [],
        "path": "dom/rtcrtpstreamstats/trackid",
        "syntax": "var trackID = RTCRtpStreamStats.trackId; Value A DOMString which uniquely identifies the RTCMediaStreamTrackStats object that provides statistics for the track for which statistics are being collected by this RTCStatsReport.  Note: This value is not the same as the value of MediaStramTrack.id.  Specifications    Specification Status Comment   Identifiers for WebRTC's Statistics APIThe definition of 'RTCRtpStreamStats.trackId' in that specification. Candidate Recommendation Initial definition.    Browser compatibility No compatibility data found. Please contribute data for \"api.RTCRtpStreamStats.trackId\" (depth: 1) to the MDN compatibility data repository.",
        "type": "WebRTC"
    },
    "RTCRtpSynchronizationSource.voiceActivityFlag": {
        "descr": "The read-only voiceActivityFlag property of the RTCRtpSynchronizationSource interface indicates whether or not the most recent RTP packet on the source includes voice activity. This is only present if the stream is using the voice activity detection feature; see the RTCOfferOptions flag voiceActivityDetection.",
        "name": "RTCRtpSynchronizationSource.voiceActivityFlag",
        "params": [],
        "path": "dom/rtcrtpsynchronizationsource/voiceactivityflag",
        "syntax": "var voiceActivity = RTCRtpSynchronizationSource.voiceActivityFlag Value A Boolean value which is true if voice activity is present in the most recently received RTP packet played by the associated source, or false if voice activity is not present.  This property is omitted entirely if voice activity detection is not enabled on the source, or if the RFC 6464 extension header isn't present.  Specifications    Specification Status Comment   WebRTC 1.0: Real-time Communication Between BrowsersThe definition of 'voiceActivityFlag' in that specification. Candidate Recommendation Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  No  ?   59Disabled    59Disabled   Disabled From version 59: this feature is behind the media.peerconnection.rtpsourcesapi.enable preference (needs to be set to true). To change preferences in Firefox, visit about:config.    No  No  ?        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support  No  No  ?   59Disabled    59Disabled   Disabled From version 59: this feature is behind the media.peerconnection.rtpsourcesapi.enable",
        "type": "WebRTC"
    },
    "RTCRtpTransceiver": {
        "descr": "The WebRTC interface RTCRtpTransceiver describes a permanent pairing of an RTCRtpSender and an RTCRtpReceiver, along with some shared state.",
        "name": "RTCRtpTransceiver",
        "params": [
            {
                "descr": "A string from the enum RTCRtpTransceiverDirection which indicates the transceiver's current directionality, or null if the transceiver is stopped or has never participated in an exchange of offers and answers.",
                "name": "currentDirection Read only"
            },
            {
                "descr": "A string from the enum RTCRtpTransceiverDirection which is used to set the transceiver's desired direction.",
                "name": "direction"
            },
            {
                "descr": "The media ID of the m-line associated with this transceiver. ",
                "name": "mid Read only"
            },
            {
                "descr": "The RTCRtpReceiver object that handles receiving and decoding incoming media.",
                "name": "receiver Read only"
            },
            {
                "descr": "The RTCRtpSender object responsible for encoding and sending data to the remote peer.",
                "name": "sender Read only"
            },
            {
                "descr": "Indicates whether or not sending and receiving using the paired RTCRtpSender and RTCRtpReceiver has been permanently disabled, either due to SDP offer/answer, or due to a call to stop().",
                "name": "stopped"
            },
            {
                "descr": "A list of RTCRtpCodecParameters objects which override the default preferences used by the user agent for the transceiver's codecs.",
                "name": "setCodecPreferences()"
            },
            {
                "descr": "Permanently stops the RTCRtpTransceiver. ",
                "name": "stop()"
            }
        ],
        "path": "dom/rtcrtptransceiver",
        "syntax": "RTCDataChannel, if present). This pairing of send and receive SRTP streams is significant for some applications, so RTCRtpTransceiver",
        "type": "WebRTC"
    },
    "RTCRtpTransceiver.currentDirection": {
        "descr": "The read-only RTCRtpTransceiver property currentDirection is a string which indicates the current directionality of the transceiver. Its value is one of the strings defined by the RTCRtpTransceiverDirection enumeration.",
        "name": "RTCRtpTransceiver.currentDirection",
        "params": [],
        "path": "dom/rtcrtptransceiver/currentdirection",
        "syntax": "var direction = RTCRtpTransceiver.currentDirection Value A DOMString whose value is one of the strings which are a member of the RTCRtpTransceiverDirection enumerated type. The RTCRtpTransceiverDirection type is an enumeration of string values. Each describes how the transceiver's associated RTCRtpSender and RTCRtpReceiver behave as shown in the table below.    Value  RTCRtpSender behavior  RTCRtpReceiver behavior     \"sendrecv\" Offers to send RTP data, and will do so if the other peer accepts the connection and at least one of the sender's encodings is active1. Offers to receive RTP data, and does so if the other peer accepts.   \"sendonly\" Offers to send RTP data, and will do so if the other peer accepts the connection and at least one of the sender's encodings is active1. Does not offer to receive RTP data and will not do so.   \"recvonly\" Does not offer to send RTP data, and will not do so. Offers to receive RTP data, and will do so if the other peer offers.   \"inactive\" Does not offer to send RTP data, and will not do so. Does not offer to receive RTP data and will not do so.    [1] To determine if a sender has at least one active encoding, the user agent gets its parameters using RTCRtpSender.getParameters()",
        "type": "WebRTC"
    },
    "RTCRtpTransceiver.direction": {
        "descr": "The read-only RTCRtpTransceiver property direction is a string which indicates the transceiver's preferred directionality. Its value must be one of the strings defined by the RTCRtpTransceiverDirection enumeration.",
        "name": "RTCRtpTransceiver.direction",
        "params": [
            {
                "descr": "Either the receiver's RTCPeerConnection is closed or the RTCRtpReceiver is stopped.",
                "name": "InvalidStateError"
            }
        ],
        "path": "dom/rtcrtptransceiver/direction",
        "syntax": "var direction = RTCRtpTransceiver.direction Value A DOMString whose value is one of the strings which are a member of the RTCRtpTransceiverDirection enumerated type, indicating the transceiver's preferred direction. The RTCRtpTransceiverDirection type is an enumeration of string values. Each describes how the transceiver's associated RTCRtpSender and RTCRtpReceiver behave as shown in the table below.    Value  RTCRtpSender behavior  RTCRtpReceiver behavior     \"sendrecv\" Offers to send RTP data, and will do so if the other peer accepts the connection and at least one of the sender's encodings is active1. Offers to receive RTP data, and does so if the other peer accepts.   \"sendonly\" Offers to send RTP data, and will do so if the other peer accepts the connection and at least one of the sender's encodings is active1. Does not offer to receive RTP data and will not do so.   \"recvonly\" Does not offer to send RTP data, and will not do so. Offers to receive RTP data, and will do so if the other peer offers.   \"inactive\" Does not offer to send RTP data, and will not do so. Does not offer to receive RTP data and will not do so.    [1] To determine if a sender has at least one active encoding, the user agent gets its parameters using RTCRtpSender.getParameters()",
        "type": "WebRTC"
    },
    "RTCRtpTransceiver.mid": {
        "descr": "The read-only RTCRtpTransceiver interface's mid property specifies the negotiated media ID (mid) which the local and remote peers have agreed upon to uniquely identify the stream's pairing of sender and receiver.",
        "name": "RTCRtpTransceiver.mid",
        "params": [],
        "path": "dom/rtcrtptransceiver/mid",
        "syntax": "var mediaID = RTCRtpTransceiver.mid; Value A DOMString which uniquely identifies the pairing of source and destination of the transceiver's stream. Its value is taken from the media ID of the SDP m-line. This value is null if negotiation has not completed. Specifications    Specification Status Comment   WebRTC 1.0: Real-time Communication Between BrowsersThe definition of 'RTCRtpTransceiver.mid' in that specification. Candidate Recommendation      Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  No  ?   59  No  No  ?        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support  No  No  ?   59  No  ?   No    See also  Introduction to the Real-time Transport Protocol (RTP)    Edit this page on MDN",
        "type": "WebRTC"
    },
    "RTCRtpTransceiver.receiver": {
        "descr": "The read-only receiver property of WebRTC's RTCRtpTransceiver interface indicates the RTCRtpReceiver responsible for receiving and decoding incoming media data for the transceiver's stream.",
        "name": "RTCRtpTransceiver.receiver",
        "params": [],
        "path": "dom/rtcrtptransceiver/receiver",
        "syntax": "var rtpReceiver = RTCRtpTransceiver.receiver; Value An RTCRtpReceiver object which is responsible for receiving and decoding incoming media data whose media ID is the same as the current value of mid. Specifications    Specification Status Comment   WebRTC 1.0: Real-time Communication Between BrowsersThe definition of 'RTCRtpTransceiver.receiver' in that specification. Candidate Recommendation      Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  No  ?   59  No  No  ?        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support  No  No  ?   59  No  ?   No    See also  Introduction to the Real-time Transport Protocol (RTP) RTCRtpReceiver",
        "type": "WebRTC"
    },
    "RTCRtpTransceiver.sender": {
        "descr": "The read-only sender property of WebRTC's RTCRtpTransceiver interface indicates the RTCRtpSender responsible for encoding and sending outgoing media data for the transceiver's stream.",
        "name": "RTCRtpTransceiver.sender",
        "params": [],
        "path": "dom/rtcrtptransceiver/sender",
        "syntax": "var rtpSender = RTCRtpTransceiver.sender; Value An RTCRtpSender object used to encode and send media whose media ID matches the current value of mid. Specifications    Specification Status Comment   WebRTC 1.0: Real-time Communication Between BrowsersThe definition of 'RTCRtpTransceiver.sender' in that specification. Candidate Recommendation      Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  No  ?   59  No  No  ?        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support  No  No  ?   59  No  ?   No    See also  Introduction to the Real-time Transport Protocol (RTP) RTCRtpSender",
        "type": "WebRTC"
    },
    "RTCRtpTransceiver.setCodecPreferences": {
        "descr": "The RTCRtpTransceiver method setCodecPreferences() configures the transceiver's codecs given a list of RTCRtpCodecParameters objects specifying the new preferences for each codec. The specified set of codecs and configurations will be used for all future connections including this transceiver until this method is called again.",
        "name": "RTCRtpTransceiver.setCodecPreferences",
        "params": [
            {
                "descr": "An array of RTCRtpCodecParameters objects, in order of preference, each providing the parameters for one of the transceiver's supported codecs. ",
                "name": "codecs"
            },
            {
                "descr": "The codecs list includes one or more codecs which are not supported by the transceiver.",
                "name": "InvalidAccessError"
            }
        ],
        "path": "dom/rtcrtptransceiver/setcodecpreferences",
        "syntax": "RTCRtpTransceiver.setCodecPreferences(codecs)",
        "type": "WebRTC"
    },
    "RTCRtpTransceiver.stop": {
        "descr": "The stop() method in the RTCRtpTransceiver interface permanently stops the transceiver by stopping both the associated RTCRtpSender and RTCRtpReceiver. Once stopped, the transceiver's stopped property will return true.",
        "name": "RTCRtpTransceiver.stop",
        "params": [
            {
                "descr": "The RTCPeerConnection of which the transceiver is a member is closed.",
                "name": "InvalidStateError"
            }
        ],
        "path": "dom/rtcrtptransceiver/stop",
        "syntax": "RTCRtpTransceiver.stop()",
        "type": "WebRTC"
    },
    "RTCRtpTransceiver.stopped": {
        "descr": "The read-only stopped property on the RTCRtpTransceiver interface indicates whether or not the transceiver's associated sender and receiver have both been stopped.",
        "name": "RTCRtpTransceiver.stopped",
        "params": [],
        "path": "dom/rtcrtptransceiver/stopped",
        "syntax": "var isStopped = RTCRtpTransceiver.stopped; Value A Boolean value which is true if the transceiver's sender will no longer send data, and its receiver will no longer receive data. If either or both are still at work, the result is false. Specifications    Specification Status Comment   WebRTC 1.0: Real-time Communication Between BrowsersThe definition of 'RTCRtpTransceiver.stopped' in that specification. Candidate Recommendation      Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  No  ?   59  No  No  ?        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support  No  No  ?   59  No  ?   No    See also  Introduction to the Real-time Transport Protocol (RTP)    Edit this page on MDN",
        "type": "WebRTC"
    },
    "RTCSessionDescription.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCSessionDescription.constructor",
        "params": [
            {
                "descr": "An object providing the default values for the session description; the object conforms to the RTCSessionDescriptionInit dictionary. ",
                "name": "rtcSessionDescriptionInitOptional"
            },
            {
                "descr": "A string containing a SDP message describing the session. ",
                "name": "sdp"
            }
        ],
        "path": "dom/rtcsessiondescription/rtcsessiondescription",
        "syntax": "sessionDescription = new RTCSessionDescription(rtcSessionDescriptionInit);",
        "type": "WebRTC"
    },
    "RTCSessionDescription.sdp": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCSessionDescription.sdp",
        "params": [],
        "path": "dom/rtcsessiondescription/sdp",
        "syntax": "var value = sessionDescription.sdp; sessionDescription.sdp = value;  Value The value is a DOMString containing an SDP message like this one:  v=0 o=alice 2890844526 2890844526 IN IP4 host.anywhere.com s= c=IN IP4 host.anywhere.com t=0 0 m=audio 49170 RTP/AVP 0 a=rtpmap:0 PCMU/8000 m=video 51372 RTP/AVP 31 a=rtpmap:31 H261/90000 m=video 53000 RTP/AVP 32 a=rtpmap:32 MPV/90000 Example // The remote description has been set previously on pc, an RTCPeerConnection alert(pc.remoteDescription.sdp);",
        "type": "WebRTC"
    },
    "RTCSessionDescription.toJSON": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCSessionDescription.toJSON",
        "params": [],
        "path": "dom/rtcsessiondescription/tojson",
        "syntax": "var jsonValue = sd.toJSON();",
        "type": "WebRTC"
    },
    "RTCSessionDescription.type": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "RTCSessionDescription.type",
        "params": [],
        "path": "dom/rtcsessiondescription/type",
        "syntax": "var value = sessionDescription.type; sessionDescription.type = value;  Value The possible values are defined by an enum of type RTCSdpType. The allowed values are those of an enum of type RTCSdpType:   \"offer\", the description is the initial proposal in an offer/answer exchange.  \"answer\", the description is the definitive choice in an offer/answer exchange.  \"pranswer\", the description is a provisional answer and may be changed when the definitive choice will be given. \"rollback\", the description rolls back to offer/answer state to the last stable state.  Example // The remote description has been set previously on pc, a RTCPeerconnection alert(pc.remoteDescription.type);",
        "type": "WebRTC"
    },
    "RTCStats.id": {
        "descr": "The id property of the RTCStats dictionary is a string which uniquely identifies the object for which this RTCStats object provides statistics. Using the id, you can correlate two or more RTCStats-based objects in order to monitor statistics over time for a given WebRTC object, such as an RTP stream, an RTCPeerConnection, or an RTCDataChannel.",
        "name": "RTCStats.id",
        "params": [],
        "path": "dom/rtcstats/id",
        "syntax": "var id = RTCStats.id; Value A DOMString which uniquely identifies the object for which this RTCStats-based object provides statistics. The format of the ID string is not defined by the specification, so you cannot reliably make any assumptions about the contents of the string, or assume that the format of the string will remain unchanged for a given object type. Specifications    Specification Status Comment   WebRTC 1.0: Real-time Communication Between BrowsersThe definition of 'RTCStats.id' in that specification. Candidate Recommendation Initial definition.    Browser compatibility No compatibility data found. Please contribute data for \"api.RTCStats.id\" (depth: 1) to the MDN compatibility data repository.",
        "type": "WebRTC"
    },
    "RTCStats.timestamp": {
        "descr": "The timestamp property of the RTCStats dictionary is a DOMHighResTimeStamp object specifying the time at which the data in the object was sampled. For reports related to RTCP packets, for instance, this indicates the time at which the data covered by the statistics was received at the corresponding endpoint.",
        "name": "RTCStats.timestamp",
        "params": [],
        "path": "dom/rtcstats/timestamp",
        "syntax": "var timestamp = RTCStats.timestamp; Value A DOMHighResTimeStamp value indicating the time at which the activity described by the statistics in this object was recorded, in milliseconds elapsed since the beginning of January 1, 1970, UTC. This should be accurate to within a few milliseconds but may not be entirely pricise, either because of hardware or operating system limitations or because of fingerprinting protection in the form of reduced clock precision or accuracy. Specifications    Specification Status Comment   WebRTC 1.0: Real-time Communication Between BrowsersThe definition of 'RTCStats.timestamp' in that specification. Candidate Recommendation Initial definition.    Browser compatibility No compatibility data found. Please contribute data for \"api.RTCStats.timestamp\" (depth: 1) to the MDN compatibility data repository.",
        "type": "WebRTC"
    },
    "RTCStats.type": {
        "descr": "The RTCStats dictionary's property type is a string which specifies the type of statistic represented by the object, where the permitted values are drawn from the enum type RTCStatsType. The string can be used to determine which of the RTCStats-based dictionaries are the foundation of the statistics object.",
        "name": "RTCStats.type",
        "params": [],
        "path": "dom/rtcstats/type",
        "syntax": "var type = RTCStats.type; Value A DOMString which specifies which type of statistic is represented by the object. The string comes from the RTCStatsType enum and corrsponds to one of the RTCStats-based statistic object types. Specifications    Specification Status Comment   WebRTC 1.0: Real-time Communication Between BrowsersThe definition of 'RTCStats.type' in that specification. Candidate Recommendation Initial definition.    Browser compatibility No compatibility data found. Please contribute data for \"api.RTCStats.type\" (depth: 1) to the MDN compatibility data repository.",
        "type": "WebRTC"
    },
    "RTCTrackEvent.constructor": {
        "descr": "The RTCTrackEvent() constructor creates and returns a new RTCTrackEvent object, configured to describe the track which has been added to the RTCPeerConnection.",
        "name": "RTCTrackEvent.constructor",
        "params": [
            {
                "descr": "An object based on the RTCTrackEventInit dictionary, providing information about the track which has been added to the RTCPeerConnection. ",
                "name": "eventInfo"
            },
            {
                "descr": "The RTCRtpReceiver which is being used to receive the track's media.",
                "name": "receiver"
            },
            {
                "descr": "An array of MediaStream objects representing each of the streams that comprise the event's corresponding track.",
                "name": "streams Optional"
            },
            {
                "descr": "The MediaStreamTrack the event is associated with.",
                "name": "track"
            },
            {
                "descr": "The RTCRtpTransceiver associated with the event.",
                "name": "transceiver"
            }
        ],
        "path": "dom/rtctrackevent/rtctrackevent",
        "syntax": "trackEvent = new RTCTrackEvent(eventInfo);",
        "type": "WebRTC"
    },
    "RTCiceTransport.state": {
        "descr": "The read-only RTCIceTransport property state returns the current state of the ICE transport, so you can determine the state of ICE gathering in which the ICE agent currently is operating.",
        "name": "RTCiceTransport.state",
        "params": [
            {
                "descr": "The RTCIceTransport is currently gathering local candidates, or is waiting for the remote device to begin to transmit the remote candidates, or both. ",
                "name": "\"new\""
            },
            {
                "descr": "At least one remote candidate has been received, and the RTCIceTransport has begun examining pairings of remote and local candidates in order to attempt to identify viable pairs that could be used to establish a connection. Keep in mind that gathering of local candidates may still be underway, and, similarly, the remote device also may still be gathering candidates of its own.",
                "name": "\"checking\""
            },
            {
                "descr": "A viable candidate pair has been found and selected, and the RTCIceTransport has connected the two peers together using that pair. ",
                "name": "\"connected\""
            },
            {
                "descr": "The transport has finished gathering local candidates and has received a notification from the remote peer that no more candidates will be sent. ",
                "name": "\"completed\""
            },
            {
                "descr": "The ICE agent has determined that connectivity has been lost for this RTCIceTransport. ",
                "name": "\"disconnected\""
            },
            {
                "descr": "The RTCIceTransport has finished the gathering process, has received the \"no more candidates\" notification from the remote peer, and has finished checking pairs of candidates, without successfully finding a pair that is both valid and for which consent can be obtained. This is a terminal state, indicating that the connection cannot be achieved or maintained.",
                "name": "\"failed\""
            },
            {
                "descr": "The transport has shut down and is no longer responding to STUN requests.",
                "name": "\"closed\""
            }
        ],
        "path": "dom/rtcicetransport/state",
        "syntax": "iceState = RTCIceTransport.state;  Value A DOMString, whose value is one of those found in the enumerated type RTCIceTransportState, which indicates the stage of ICE gathering that's currently underway. Its value will be one of the following:  \"new\" The RTCIceTransport is currently gathering local candidates, or is waiting for the remote device to begin to transmit the remote candidates, or both. In this state, checking of candidates to look for those which might be acceptable has not yet begun. \"checking\" At least one remote candidate has been received, and the RTCIceTransport has begun examining pairings of remote and local candidates in order to attempt to identify viable pairs that could be used to establish a connection. Keep in mind that gathering of local candidates may still be underway, and, similarly, the remote device also may still be gathering candidates of its own. \"connected\"  A viable candidate pair has been found and selected, and the RTCIceTransport has connected the two peers together using that pair. However, there are still candidates pairings to consider, and there may still be gathering underway on one or both of the two devices. The transport may revert from the \"connected\" state to the \"checking\" state if either peer decides to cancel consent to use the selected candidate pair, and may revert to \"disconnected\" if there are no candidates left to check but one or both clients are still gathering candidates.  \"completed\" The transport has finished gathering local candidates and has received a notification from the remote peer that no more candidates will be sent. In addition, all candidate pairs have been considered and a pair has been selected for use. If consent checks fail on all successful candidate pairs, the transport state will change to \"failed\". \"disconnected\" The ICE agent has determined that connectivity has been lost for this RTCIceTransport. This is not a failure state (that's \"failed\"). A value of \"disconnected\"",
        "type": "WebRTC"
    },
    "RadioNodeList.value": {
        "descr": "If the underlying element collection contains radio buttons, the RadioNodeList.value property represents the checked radio button. On retrieving the value property, the value of the currently checked radio button is returned as a string. If the collection does not contain any radio buttons or none of the radio buttons in the collection is in checked state, the empty string is returned. On setting the value property, the first radio button input element whose value property is equal to the new value will be set to checked.",
        "name": "RadioNodeList.value",
        "params": [],
        "path": "dom/radionodelist/value",
        "syntax": "value = radioNodeList.value; radioNodeList.value = string;  Example var form = document.forms[0]; var radios = form.elements['myRadio']; console.log(radios.value);\n or  radios.value = 'Mr.';);",
        "type": "Nodes"
    },
    "Range.cloneContents": {
        "descr": "The Range.cloneContents() returns a DocumentFragment copying the objects of type Node included in the Range.",
        "name": "Range.cloneContents",
        "params": [],
        "path": "dom/range/clonecontents",
        "syntax": "documentFragment = range.cloneContents();",
        "type": "Range"
    },
    "Range.cloneRange": {
        "descr": "The Range.cloneRange() method returns a Range object with boundary points identical to the cloned Range.",
        "name": "Range.cloneRange",
        "params": [],
        "path": "dom/range/clonerange",
        "syntax": "clone = range.cloneRange();",
        "type": "Range"
    },
    "Range.collapse": {
        "descr": "The Range.collapse() method collapses the Range to one of its boundary points.",
        "name": "Range.collapse",
        "params": [
            {
                "descr": "A boolean value: true collapses the Range to its start, false to its end. ",
                "name": "toStart Optional"
            }
        ],
        "path": "dom/range/collapse",
        "syntax": "range.collapse(toStart);",
        "type": "Range"
    },
    "Range.collapsed": {
        "descr": "The Range.collapsed read-only property returns a Boolean flag indicating whether the start and end points of the Range are at the same position. It returns true if the start and end boundary points of the Range are the same point in the DOM, false if not.",
        "name": "Range.collapsed",
        "params": [],
        "path": "dom/range/collapsed",
        "syntax": "isCollapsed = range.collapsed;  Example var range = document.createRange();\n or  range.setStart(startNode,startOffset);\n or  range.setEnd(endNode,endOffset);\n or  isCollapsed = range.collapsed;);",
        "type": "Range"
    },
    "Range.commonAncestorContainer": {
        "descr": "The Range.commonAncestorContainerread-only property returns the deepest — or furthest down the document tree — Node that contains both boundary points of the range. This means that if Range.startContainer and Range.endContainer both refer to the same node, this node is the commonAncestorContainer.",
        "name": "Range.commonAncestorContainer",
        "params": [],
        "path": "dom/range/commonancestorcontainer",
        "syntax": "rangeAncestor = range.commonAncestorContainer; Example var range = document.createRange();\n or  range.setStart(startNode,startOffset);\n or  range.setEnd(endNode,endOffset);\n or  rangeAncestor = range.commonAncestorContainer;);",
        "type": "Range"
    },
    "Range.compareBoundaryPoints": {
        "descr": "The Range.compareBoundaryPoints() method compares the boundary points of the Range with another one.",
        "name": "Range.compareBoundaryPoints",
        "params": [
            {
                "descr": "A number, -1, 0, or 1, indicating whether the corresponding boundary-point of the Range is respectively before, equal to, or after the corresponding boundary-point of sourceRange.",
                "name": "compare"
            },
            {
                "descr": "A constant describing the comparison method:   Range.END_TO_END compares the end boundary-point of sourceRange to the end boundary-point of Range. ",
                "name": "how"
            },
            {
                "descr": "A Range to compare boundary points with the range.",
                "name": "sourceRange"
            }
        ],
        "path": "dom/range/compareboundarypoints",
        "syntax": "compare = range.compareBoundaryPoints(how, sourceRange);",
        "type": "Range"
    },
    "Range.comparePoint": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Range.comparePoint",
        "params": [
            {
                "descr": "The Node to compare with the Range.",
                "name": "referenceNode"
            },
            {
                "descr": "An integer greater than or equal to zero representing the offset inside the referenceNode.",
                "name": "offset"
            }
        ],
        "path": "dom/range/comparepoint",
        "syntax": "CDATASection, then offset is the number of characters from the start of reference node. For other Node types, offset is the number of child nodes between the start of the reference node. Syntax returnValue = range.comparePoint( referenceNode, offset )",
        "type": "Range"
    },
    "Range.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Range.constructor",
        "params": [],
        "path": "dom/range/range",
        "syntax": "range = new Range()",
        "type": "Range"
    },
    "Range.createContextualFragment": {
        "descr": "The Range.createContextualFragment() method returns a DocumentFragment by invoking the HTML fragment parsing algorithm or the XML fragment parsing algorithm with the start of the range (the parent of the selected node) as the context node. The HTML fragment parsing algorithm is used if the range belongs to a Document whose HTMLness bit is set. In the HTML case, if the context node would be html, for historical reasons the fragment parsing algorithm is invoked with body as the context instead.",
        "name": "Range.createContextualFragment",
        "params": [
            {
                "descr": "Text that contains text and tags to be converted to a document fragment.",
                "name": "tagString"
            }
        ],
        "path": "dom/range/createcontextualfragment",
        "syntax": "documentFragment = range.createContextualFragment( tagString )",
        "type": "Range"
    },
    "Range.deleteContents": {
        "descr": "The Range.deleteContents() removes the contents of the Range from the Document.",
        "name": "Range.deleteContents",
        "params": [],
        "path": "dom/range/deletecontents",
        "syntax": "range.deleteContents()",
        "type": "Range"
    },
    "Range.detach": {
        "descr": "The Range.detach() method does nothing. It used to disable the Range object and enable the browser to release associated resources. The method has been kept for compatibility.",
        "name": "Range.detach",
        "params": [],
        "path": "dom/range/detach",
        "syntax": "range.detach();",
        "type": "Range"
    },
    "Range.endContainer": {
        "descr": "The Range.endContainer read-only property returns the Node within which the Range ends. To change the end position of a node, use the Range.setEnd() method or a similar one.",
        "name": "Range.endContainer",
        "params": [],
        "path": "dom/range/endcontainer",
        "syntax": "endRangeNode = range.endContainer;  Example var range = document.createRange();\n or  range.setStart(startNode,startOffset);\n or  range.setEnd(endNode,endOffset);\n or  endRangeNode = range.endContainer;);",
        "type": "Range"
    },
    "Range.endOffset": {
        "descr": "The Range.endOffset read-only property returns a number representing where in the Range.endContainer the Range ends.",
        "name": "Range.endOffset",
        "params": [],
        "path": "dom/range/endoffset",
        "syntax": "CDATASection, then the offset is the number of characters from the start of the endContainer to the boundary point of the Range. For other Node types, the endOffset is the number of child nodes between the start of the endContainer and the boundary point of the Range. This property is read-only. To change the endOffset of a Range, use one of the Range.setEnd methods. Syntax endRangeOffset = range.endOffset;  Example var range = document.createRange();\n or  range.setStart(startNode,startOffset);\n or  range.setEnd(endNode,endOffset);\n or  endRangeOffset = range.endOffset;);",
        "type": "Range"
    },
    "Range.extractContents": {
        "descr": "The Range.extractContents() method moves contents of the Range from the document tree into a DocumentFragment.",
        "name": "Range.extractContents",
        "params": [],
        "path": "dom/range/extractcontents",
        "syntax": "documentFragment = range.extractContents();",
        "type": "Range"
    },
    "Range.getBoundingClientRect": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Range.getBoundingClientRect",
        "params": [],
        "path": "dom/range/getboundingclientrect",
        "syntax": "boundingRect = range.getBoundingClientRect()",
        "type": "Range"
    },
    "Range.getClientRects": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Range.getClientRects",
        "params": [],
        "path": "dom/range/getclientrects",
        "syntax": "rectList = range.getClientRects()",
        "type": "Range"
    },
    "Range.insertNode": {
        "descr": "The Range.insertNode() method inserts a node at the start of the Range.",
        "name": "Range.insertNode",
        "params": [
            {
                "descr": "The Node to insert at the start of the range.",
                "name": "newNode"
            }
        ],
        "path": "dom/range/insertnode",
        "syntax": "range.insertNode(newNode);",
        "type": "Range"
    },
    "Range.intersectsNode": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Range.intersectsNode",
        "params": [
            {
                "descr": "The Node to compare with the Range.",
                "name": "referenceNode"
            }
        ],
        "path": "dom/range/intersectsnode",
        "syntax": "bool = range.intersectsNode( referenceNode )",
        "type": "Range"
    },
    "Range.isPointInRange": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Range.isPointInRange",
        "params": [
            {
                "descr": "The Node to compare with the Range.",
                "name": "referenceNode"
            },
            {
                "descr": "The offset into Node of the point to compare with the Range.",
                "name": "offset"
            }
        ],
        "path": "dom/range/ispointinrange",
        "syntax": "bool = range.isPointInRange( referenceNode, offset )",
        "type": "Range"
    },
    "Range.selectNode": {
        "descr": "The Range.selectNode() method sets the Range to contain the Node and its contents. The parent Node of the start and end of the Range will be the same as the parent of the referenceNode.",
        "name": "Range.selectNode",
        "params": [
            {
                "descr": "The Node to select within a Range.",
                "name": "referenceNode"
            }
        ],
        "path": "dom/range/selectnode",
        "syntax": "range.selectNode(referenceNode);",
        "type": "Range"
    },
    "Range.selectNodeContents": {
        "descr": "The Range.selectNodeContents() sets the Range to contain the contents of a Node.",
        "name": "Range.selectNodeContents",
        "params": [
            {
                "descr": "The Node whose contents will be selected within a Range.",
                "name": "referenceNode"
            }
        ],
        "path": "dom/range/selectnodecontents",
        "syntax": "range.selectNodeContents(referenceNode);",
        "type": "Range"
    },
    "Range.setEnd": {
        "descr": "The Range.setEnd() method sets the end position of a Range.",
        "name": "Range.setEnd",
        "params": [
            {
                "descr": "The Node where the Range should end.",
                "name": "endNode"
            },
            {
                "descr": "An integer greater than or equal to zero representing the offset for the end of the Range from the start of endNode.",
                "name": "endOffset"
            }
        ],
        "path": "dom/range/setend",
        "syntax": "range.setEnd(endNode, endOffset);",
        "type": "Range"
    },
    "Range.setEndAfter": {
        "descr": "The Range.setEndAfter() method sets the end position of a Range relative to another Node. The parent Node of end of the Range will be the same as that for the referenceNode.",
        "name": "Range.setEndAfter",
        "params": [
            {
                "descr": "The Node to end the Range after.",
                "name": "referenceNode"
            }
        ],
        "path": "dom/range/setendafter",
        "syntax": "range.setEndAfter(referenceNode);",
        "type": "Range"
    },
    "Range.setEndBefore": {
        "descr": "The Range.setEndBefore() method sets the end position of a Range relative to another Node. The parent Node of end of the Range will be the same as that for the referenceNode.",
        "name": "Range.setEndBefore",
        "params": [
            {
                "descr": "The Node to end the Range before.",
                "name": "referenceNode"
            }
        ],
        "path": "dom/range/setendbefore",
        "syntax": "range.setEndBefore(referenceNode);",
        "type": "Range"
    },
    "Range.setStart": {
        "descr": "The Range.setStart() method sets the start position of a Range.",
        "name": "Range.setStart",
        "params": [
            {
                "descr": "The Node where the Range should start.",
                "name": "startNode"
            },
            {
                "descr": "An integer greater than or equal to zero representing the offset for the start of the Range from the start of startNode.",
                "name": "startOffset"
            }
        ],
        "path": "dom/range/setstart",
        "syntax": "range.setStart(startNode, startOffset);",
        "type": "Range"
    },
    "Range.setStartAfter": {
        "descr": "The Range.setStartAfter() method sets the start position of a Range relative to a Node. The parent Node of the start of the Range will be the same as that for the referenceNode.",
        "name": "Range.setStartAfter",
        "params": [
            {
                "descr": "The Node to start the Range after.",
                "name": "referenceNode"
            }
        ],
        "path": "dom/range/setstartafter",
        "syntax": "range.setStartAfter(referenceNode);",
        "type": "Range"
    },
    "Range.setStartBefore": {
        "descr": "The Range.setStartBefore() method sets the start position of a Range relative to another Node. The parent Node of the start of the Range will be the same as that for the referenceNode.",
        "name": "Range.setStartBefore",
        "params": [
            {
                "descr": "The Node before which the Range should start.",
                "name": "referenceNode"
            }
        ],
        "path": "dom/range/setstartbefore",
        "syntax": "range.setStartBefore(referenceNode);",
        "type": "Range"
    },
    "Range.startContainer": {
        "descr": "The Range.startContainer read-only property returns the Node within which the Range starts. To change the start position of a node, use one of the Range.setStart() methods.",
        "name": "Range.startContainer",
        "params": [],
        "path": "dom/range/startcontainer",
        "syntax": "startRangeNode = range.startContainer;  Example range = document.createRange();\n or  range.setStart(startNode,startOffset);\n or  range.setEnd(endNode,endOffset);\n or  startRangeNode = range.startContainer;);",
        "type": "Range"
    },
    "Range.startOffset": {
        "descr": "The Range.startOffset read-only property returns a number representing where in the startContainer the Range starts.",
        "name": "Range.startOffset",
        "params": [],
        "path": "dom/range/startoffset",
        "syntax": "CDATASection, then the offset is the number of characters from the start of the startContainer to the boundary point of the Range. For other Node types, the startOffset is the number of child nodes between the start of the startContainer and the boundary point of the Range. To change the startOffset of a Range, use the Range.setStart method. Syntax startRangeOffset = range.startOffset;  Example var range = document.createRange();\n or  range.setStart(startNode,startOffset);\n or  range.setEnd(endNode,endOffset);\n or  var startRangeOffset = range.startOffset;);",
        "type": "Range"
    },
    "Range.surroundContents": {
        "descr": "The Range.surroundContents() method moves content of the Range into a new node, placing the new node at the start of the specified range.",
        "name": "Range.surroundContents",
        "params": [
            {
                "descr": "A Node to split based on the range.",
                "name": "newNode"
            }
        ],
        "path": "dom/range/surroundcontents",
        "syntax": "range.surroundContents(newNode);",
        "type": "Range"
    },
    "Range.toString": {
        "descr": "The Range.toString() method is a stringifier returning the text of the Range.",
        "name": "Range.toString",
        "params": [],
        "path": "dom/range/tostring",
        "syntax": "text = range.toString();",
        "type": "Range"
    },
    "RangeError": {
        "descr": "The RangeError object indicates an error when a value is not in the set or range of allowed values.",
        "name": "RangeError",
        "params": [
            {
                "descr": "Optional. Human-readable description of the error",
                "name": "message"
            },
            {
                "descr": "Optional. The name of the file containing the code that caused the exception",
                "name": "fileName"
            },
            {
                "descr": "Optional. The line number of the code that caused the exception",
                "name": "lineNumber"
            },
            {
                "descr": "Allows the addition of properties to an RangeError object.",
                "name": "RangeError.prototype"
            },
            {
                "descr": "Specifies the function that created an instance's prototype.",
                "name": "RangeError.prototype.constructor"
            },
            {
                "descr": "Error message. Although ECMA-262 specifies that RangeError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.",
                "name": "RangeError.prototype.message"
            },
            {
                "descr": "Error name. Inherited from Error.",
                "name": "RangeError.prototype.name"
            },
            {
                "descr": "Path to file that raised this error. ",
                "name": "RangeError.prototype.fileName"
            },
            {
                "descr": "Line number in file that raised this error. ",
                "name": "RangeError.prototype.lineNumber"
            },
            {
                "descr": "Column number in line that raised this error. ",
                "name": "RangeError.prototype.columnNumber"
            },
            {
                "descr": "Stack trace. Inherited from Error.",
                "name": "RangeError.prototype.stack"
            }
        ],
        "path": "javascript/global_objects/rangeerror",
        "syntax": "new RangeError([message[, fileName[, lineNumber]]])",
        "type": "Errors"
    },
    "ReadableByteStreamController.close": {
        "descr": "Draft This page is not complete.",
        "name": "ReadableByteStreamController.close",
        "params": [
            {
                "descr": "The source object is not a ReadableStreamDefaultController, or the stream is not readable for some other reason.",
                "name": "TypeError"
            }
        ],
        "path": "dom/readablebytestreamcontroller/close",
        "syntax": "readableByteStreamControllerInstance.close();",
        "type": "Media Streams"
    },
    "ReadableByteStreamController.constructor": {
        "descr": "Draft This page is not complete.",
        "name": "ReadableByteStreamController.constructor",
        "params": [
            {
                "descr": "The ReadableStream to be controlled.",
                "name": "stream"
            },
            {
                "descr": "An object containing methods and properties that define how the constructed stream instance will behave. ",
                "name": "underlyingSource"
            },
            {
                "descr": "A non-negative integer — this defines the total number of chunks that can be contained in the internal queue before backpressure is applied.",
                "name": "highWaterMark"
            },
            {
                "descr": "The associated ReadableStream was constructed with autoAllocateChunkSize set, but its value is not an integer or below 0.",
                "name": "RangeError"
            },
            {
                "descr": "The supplied stream parameter is not a ReadableStream, or it already has an associated controller.",
                "name": "TypeError"
            }
        ],
        "path": "dom/readablebytestreamcontroller/readablebytestreamcontroller",
        "syntax": "var readableStreamController = new ReadableStreamController(stream, underlyingSource, highWaterMark);",
        "type": "Media Streams"
    },
    "ReadableByteStreamController.enqueue": {
        "descr": "Draft This page is not complete.",
        "name": "ReadableByteStreamController.enqueue",
        "params": [
            {
                "descr": "The chunk to enqueue.",
                "name": "chunk"
            },
            {
                "descr": "The source object is not a ReadableByteStreamController, or the stream cannot be read for some other reason, or the chunk is not an object, or the chunk's internal array buffer is non-existant or detached.",
                "name": "TypeError"
            }
        ],
        "path": "dom/readablebytestreamcontroller/enqueue",
        "syntax": "readableByteStreamControllerInstance.enqueue(chunk);",
        "type": "Media Streams"
    },
    "ReadableByteStreamController.error": {
        "descr": "Draft This page is not complete.",
        "name": "ReadableByteStreamController.error",
        "params": [
            {
                "descr": "The error you want future interactions to fail with.",
                "name": "e"
            },
            {
                "descr": "The source object is not a ReadableByteStreamController, or the stream is not readable for some other reason.",
                "name": "TypeError"
            }
        ],
        "path": "dom/readablebytestreamcontroller/error",
        "syntax": "readableByteStreamControllerInstance.error(e);",
        "type": "Media Streams"
    },
    "ReadableStream.cancel": {
        "descr": "Draft This page is not complete.",
        "name": "ReadableStream.cancel",
        "params": [
            {
                "descr": "A DOMString providing a human-readable reason for the cancellation.",
                "name": "reason"
            },
            {
                "descr": "The stream you are trying to cancel is not a ReadableStream, or it is locked.",
                "name": "TypeError"
            }
        ],
        "path": "dom/readablestream/cancel",
        "syntax": "Promise<reason> readableStreamInstance.cancel(reason);",
        "type": "Media Streams"
    },
    "ReadableStream.constructor": {
        "descr": "Draft This page is not complete.",
        "name": "ReadableStream.constructor",
        "params": [
            {
                "descr": "An object containing methods and properties that define how the constructed stream instance will behave. ",
                "name": "underlyingSource"
            },
            {
                "descr": "This method, also defined by the developer, will be called repeatedly when the stream's internal queue of chunks is not full, up until it reaches its high water mark. ",
                "name": "pull(controller) Optional"
            },
            {
                "descr": "This method, also defined by the developer, will be called if the app signals that the stream is to be cancelled (e.g. ",
                "name": "cancel(reason) Optional"
            },
            {
                "descr": "This property controls what type of readable stream is being dealt with. ",
                "name": "type Optional"
            },
            {
                "descr": "For byte streams, the developer can set the autoAllocateChunkSize with a positive integer value to turn on the stream's auto-allocation feature. ",
                "name": "autoAllocateChunkSize Optional"
            },
            {
                "descr": "An object that optionally defines a queueing strategy for the stream. ",
                "name": "queueingStrategy Optional"
            },
            {
                "descr": "A method containing a parameter chunk — this indicates the size to use for each chunk, in bytes.",
                "name": "size(chunk)"
            },
            {
                "descr": "The supplied type value is neither bytes nor undefined.",
                "name": "RangeError"
            }
        ],
        "path": "dom/readablestream/readablestream",
        "syntax": "var readableStream = new ReadableStream(underlyingSource[, queueingStrategy]);",
        "type": "Media Streams"
    },
    "ReadableStream.getReader": {
        "descr": "Draft This page is not complete.",
        "name": "ReadableStream.getReader",
        "params": [
            {
                "descr": "An object containing a property mode, which takes as its value a DOMString specifying the type of reader to create. ",
                "name": "{mode} Optional"
            },
            {
                "descr": "The provided mode value is not byob or undefined.",
                "name": "RangeError"
            },
            {
                "descr": "The stream you are trying to create a reader for is not a ReadableStream.",
                "name": "TypeError"
            }
        ],
        "path": "dom/readablestream/getreader",
        "syntax": "var reader = readableStreamInstance.getReader({mode});",
        "type": "Media Streams"
    },
    "ReadableStream.locked": {
        "descr": "Draft This page is not complete.",
        "name": "ReadableStream.locked",
        "params": [],
        "path": "dom/readablestream/locked",
        "syntax": "var locked = readableStreamInstance.locked; Value A Boolean indicating whether or not the readable stream is locked. Examples const stream = new ReadableStream({ ... });\n or  const reader = stream.getReader();\n or  stream.locked // should return true, as the stream has been locked to a reader);",
        "type": "Media Streams"
    },
    "ReadableStream.pipeThrough": {
        "descr": "Draft This page is not complete.",
        "name": "ReadableStream.pipeThrough",
        "params": [
            {
                "descr": "A TransformStream (or an object with the structure {writable, readable}) consisting of a readable stream and a writable stream working together to transform some data from one form to another. ",
                "name": "transformStream"
            },
            {
                "descr": "The options that should be used when piping to the writable stream. ",
                "name": "options Optional"
            },
            {
                "descr": "The writable and/or readable property of transformStream are undefined.",
                "name": "TypeError"
            }
        ],
        "path": "dom/readablestream/pipethrough",
        "syntax": "ReadableStream readableStreamInstance.pipeThrough(transformStream[, options]);",
        "type": "Media Streams"
    },
    "ReadableStream.pipeTo": {
        "descr": "Draft This page is not complete.",
        "name": "ReadableStream.pipeTo",
        "params": [
            {
                "descr": "A WritableStream that acts as the final destination for the ReadableStream.",
                "name": "destination"
            },
            {
                "descr": "An options object containing properties that can define when cancellation, closing, or aborting of the stream is prevented (all optional). ",
                "name": "options Optional"
            },
            {
                "descr": "The writableStream and/or readableStream objects are not a writable stream/readable stream, or one or both of the streams are locked.",
                "name": "TypeError"
            }
        ],
        "path": "dom/readablestream/pipeto",
        "syntax": "Promise<void> readableStreamInstance.pipeTo(destination[, options]);",
        "type": "Media Streams"
    },
    "ReadableStream.tee": {
        "descr": "Draft This page is not complete.",
        "name": "ReadableStream.tee",
        "params": [
            {
                "descr": "The source stream is not a ReadableStream.",
                "name": "TypeError"
            }
        ],
        "path": "dom/readablestream/tee",
        "syntax": "readableStreamInstance.tee();",
        "type": "Media Streams"
    },
    "ReadableStreamBYOBReader.cancel": {
        "descr": "Draft This page is not complete.",
        "name": "ReadableStreamBYOBReader.cancel",
        "params": [
            {
                "descr": "A DOMString providing a human-readable reason for the cancellation.",
                "name": "reason"
            },
            {
                "descr": "The source object is not a ReadableStreamBYOBReader, or the stream has no owner.",
                "name": "TypeError"
            }
        ],
        "path": "dom/readablestreambyobreader/cancel",
        "syntax": "Promise<reason> readableStreamBYOBReaderInstance.cancel(reason);",
        "type": "Media Streams"
    },
    "ReadableStreamBYOBReader.constructor": {
        "descr": "Draft This page is not complete.",
        "name": "ReadableStreamBYOBReader.constructor",
        "params": [
            {
                "descr": "The ReadableStream to be read.",
                "name": "stream"
            },
            {
                "descr": "The supplied stream parameter is not a ReadableStream, or it is already locked for reading by another reader, or its stream controller is not a ReadableByteStreamController.",
                "name": "TypeError"
            }
        ],
        "path": "dom/readablestreambyobreader/readablestreambyobreader",
        "syntax": "var readableStreamReader = new ReadableStreamBYOBReader(stream);",
        "type": "Media Streams"
    },
    "ReadableStreamBYOBReader.read": {
        "descr": "Draft This page is not complete.",
        "name": "ReadableStreamBYOBReader.read",
        "params": [
            {
                "descr": "The view to be read into.",
                "name": "view"
            },
            {
                "descr": "The source object is not a ReadableStreamBYOBReader, the stream has no owner, the view is not an object or has become detached, or the view's length is 0.",
                "name": "TypeError"
            }
        ],
        "path": "dom/readablestreambyobreader/read",
        "syntax": "Promise<result> readableStreamBYOBReaderInstance.read(view);",
        "type": "Media Streams"
    },
    "ReadableStreamBYOBReader.releaseLock": {
        "descr": "Draft This page is not complete.",
        "name": "ReadableStreamBYOBReader.releaseLock",
        "params": [
            {
                "descr": "The source object is not a ReadableStreamBYOBReader, or a read request is pending.",
                "name": "TypeError"
            }
        ],
        "path": "dom/readablestreambyobreader/releaselock",
        "syntax": "readableStreamBYOBReaderInstance.releaseLock();",
        "type": "Media Streams"
    },
    "ReadableStreamBYOBRequest.constructor": {
        "descr": "Draft This page is not complete.",
        "name": "ReadableStreamBYOBRequest.constructor",
        "params": [
            {
                "descr": "The associated ReadableByteStreamController.",
                "name": "controller"
            },
            {
                "descr": "The current view.",
                "name": "view"
            }
        ],
        "path": "dom/readablestreambyobrequest/readablestreambyobrequest",
        "syntax": "var readableStreamRequest = new ReadableStreamBYOBRequest(controller, view);",
        "type": "Media Streams"
    },
    "ReadableStreamBYOBRequest.respond": {
        "descr": "Draft This page is not complete.",
        "name": "ReadableStreamBYOBRequest.respond",
        "params": [
            {
                "descr": "xxx",
                "name": "bytesWritten"
            },
            {
                "descr": "The source object is not a ReadableStreamBYOBRequest, or there is no associated controller, or the associated internal array buffer is detached.",
                "name": "TypeError"
            }
        ],
        "path": "dom/readablestreambyobrequest/respond",
        "syntax": "readableStreamBYOBRequestInstance.respond(bytesWritten);",
        "type": "Media Streams"
    },
    "ReadableStreamBYOBRequest.respondWithNewView": {
        "descr": "Draft This page is not complete.",
        "name": "ReadableStreamBYOBRequest.respondWithNewView",
        "params": [
            {
                "descr": "xxx",
                "name": "view"
            },
            {
                "descr": "The source object is not a ReadableStreamBYOBRequest, or there is no associated controller, or the associated internal array buffer is non-existant or detached.",
                "name": "TypeError"
            }
        ],
        "path": "dom/readablestreambyobrequest/respondwithnewview",
        "syntax": "readableStreamBYOBRequestInstance.respondWithNewView(view);",
        "type": "Media Streams"
    },
    "ReadableStreamDefaultController.close": {
        "descr": "Draft This page is not complete.",
        "name": "ReadableStreamDefaultController.close",
        "params": [
            {
                "descr": "The source object is not a ReadableStreamDefaultController.",
                "name": "TypeError"
            }
        ],
        "path": "dom/readablestreamdefaultcontroller/close",
        "syntax": "readableStreamDefaultControllerInstance.close();",
        "type": "Media Streams"
    },
    "ReadableStreamDefaultController.constructor": {
        "descr": "Draft This page is not complete.",
        "name": "ReadableStreamDefaultController.constructor",
        "params": [
            {
                "descr": "The ReadableStream to be controlled.",
                "name": "stream"
            },
            {
                "descr": "An object containing methods and properties that define how the constructed stream instance will behave. ",
                "name": "underlyingSource"
            },
            {
                "descr": "A method containing a parameter chunk — this indicates the size to use for each chunk, in bytes.",
                "name": "size"
            },
            {
                "descr": "A non-negative integer — this defines the total number of chunks that can be contained in the internal queue before backpressure is applied.",
                "name": "highWaterMark"
            },
            {
                "descr": "The supplied stream parameter is not a ReadableStream, or it already has an associated controller.",
                "name": "TypeError"
            }
        ],
        "path": "dom/readablestreamdefaultcontroller/readablestreamdefaultcontroller",
        "syntax": "var readableStreamController = new ReadableStreamDefaultController(stream, underlyingSource, size, highWaterMark);",
        "type": "Media Streams"
    },
    "ReadableStreamDefaultController.desiredSize": {
        "descr": "Draft This page is not complete.",
        "name": "ReadableStreamDefaultController.desiredSize",
        "params": [],
        "path": "dom/readablestreamdefaultcontroller/desiredsize",
        "syntax": "var desiredSize = readableStreamDefaultControllerInstance.desiredSize; Value An integer. Note that this can be negative if the queue is over-full. Examples The A readable stream with an underlying push source and backpressure support example in the spec provides a good example of using desiredSize to manually detect when the stream is full and apply backpressure, and also of using ReadablestreamDefaultController.error()",
        "type": "Media Streams"
    },
    "ReadableStreamDefaultController.enqueue": {
        "descr": "Draft This page is not complete.",
        "name": "ReadableStreamDefaultController.enqueue",
        "params": [
            {
                "descr": "The chunk to enqueue.",
                "name": "chunk"
            },
            {
                "descr": "The source object is not a ReadableStreamDefaultController.",
                "name": "TypeError"
            }
        ],
        "path": "dom/readablestreamdefaultcontroller/enqueue",
        "syntax": "readableStreamDefaultControllerInstance.enqueue(chunk);",
        "type": "Media Streams"
    },
    "ReadableStreamDefaultController.error": {
        "descr": "Draft This page is not complete.",
        "name": "ReadableStreamDefaultController.error",
        "params": [
            {
                "descr": "The error you want future interactions to fail with.",
                "name": "e"
            },
            {
                "descr": "The source object is not a ReadableStreamDefaultController, or the stream is not readable for some other reason.",
                "name": "TypeError"
            }
        ],
        "path": "dom/readablestreamdefaultcontroller/error",
        "syntax": "readableStreamDefaultControllerInstance.error(e);",
        "type": "Media Streams"
    },
    "ReadableStreamDefaultReader.cancel": {
        "descr": "Draft This page is not complete.",
        "name": "ReadableStreamDefaultReader.cancel",
        "params": [
            {
                "descr": "A DOMString providing a human-readable reason for the cancellation.",
                "name": "reason Optional"
            },
            {
                "descr": "The source object is not a ReadableStreamDefaultReader, or the stream has no owner.",
                "name": "TypeError"
            }
        ],
        "path": "dom/readablestreamdefaultreader/cancel",
        "syntax": "Promise<reason> readableStreamDefaultReaderInstance.cancel(reason);",
        "type": "Media Streams"
    },
    "ReadableStreamDefaultReader.closed": {
        "descr": "Draft This page is not complete.",
        "name": "ReadableStreamDefaultReader.closed",
        "params": [],
        "path": "dom/readablestreamdefaultreader/closed",
        "syntax": "var closed = readableStreamDefaultReaderInstance.closed; Value A Promise. Examples In this snippet, a previously-created reader is queried to see if the stream has been closed. When it is closed, the promise fulfills and the message is logged to the console. reader.closed.then(() => { console.log('reader closed');\n or  }));",
        "type": "Media Streams"
    },
    "ReadableStreamDefaultReader.constructor": {
        "descr": "Draft This page is not complete.",
        "name": "ReadableStreamDefaultReader.constructor",
        "params": [
            {
                "descr": "The ReadableStream to be read.",
                "name": "stream"
            },
            {
                "descr": "The supplied stream parameter is not a ReadableStream, or it is already locked for reading by another reader.",
                "name": "TypeError"
            }
        ],
        "path": "dom/readablestreamdefaultreader/readablestreamdefaultreader",
        "syntax": "var readableStreamReader = new ReadableStreamDefaultReader(stream);",
        "type": "Media Streams"
    },
    "ReadableStreamDefaultReader.read": {
        "descr": "Draft This page is not complete.",
        "name": "ReadableStreamDefaultReader.read",
        "params": [
            {
                "descr": "The source object is not a ReadableStreamDefaultReader, or the stream has no owner.",
                "name": "TypeError"
            }
        ],
        "path": "dom/readablestreamdefaultreader/read",
        "syntax": "Promise<result> readableStreamDefaultReaderInstance.read();",
        "type": "Media Streams"
    },
    "ReadableStreamDefaultReader.releaseLock": {
        "descr": "Draft This page is not complete.",
        "name": "ReadableStreamDefaultReader.releaseLock",
        "params": [
            {
                "descr": "The source object is not a ReadableStreamDefaultReader, or a read request is pending.",
                "name": "TypeError"
            }
        ],
        "path": "dom/readablestreamdefaultreader/releaselock",
        "syntax": "readableStreamDefaultReaderInstance.releaseLock();",
        "type": "Media Streams"
    },
    "ReferenceError": {
        "descr": "The ReferenceError object represents an error when a non-existent variable is referenced.",
        "name": "ReferenceError",
        "params": [
            {
                "descr": "Optional. Human-readable description of the error",
                "name": "message"
            },
            {
                "descr": "Optional. The name of the file containing the code that caused the exception",
                "name": "fileName"
            },
            {
                "descr": "Optional. The line number of the code that caused the exception",
                "name": "lineNumber"
            },
            {
                "descr": "Allows the addition of properties to an ReferenceError object.",
                "name": "ReferenceError.prototype"
            },
            {
                "descr": "Specifies the function that created an instance's prototype.",
                "name": "ReferenceError.prototype.constructor"
            },
            {
                "descr": "Error message. Although ECMA-262 specifies that ReferenceError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.",
                "name": "ReferenceError.prototype.message"
            },
            {
                "descr": "Error name. Inherited from Error.",
                "name": "ReferenceError.prototype.name"
            },
            {
                "descr": "Path to file that raised this error. ",
                "name": "ReferenceError.prototype.fileName"
            },
            {
                "descr": "Line number in file that raised this error. ",
                "name": "ReferenceError.prototype.lineNumber"
            },
            {
                "descr": "Column number in line that raised this error. ",
                "name": "ReferenceError.prototype.columnNumber"
            },
            {
                "descr": "Stack trace. Inherited from Error.",
                "name": "ReferenceError.prototype.stack"
            }
        ],
        "path": "javascript/global_objects/referenceerror",
        "syntax": "new ReferenceError([message[, fileName[, lineNumber]]])",
        "type": "Errors"
    },
    "Reflect.apply": {
        "descr": "The static Reflect.apply() method calls a target function with arguments as specified.",
        "name": "Reflect.apply",
        "params": [
            {
                "descr": "The target function to call.",
                "name": "target"
            },
            {
                "descr": "The value of this provided for the call to target.",
                "name": "thisArgument"
            },
            {
                "descr": "An array-like object specifying the arguments with which target should be called.",
                "name": "argumentsList"
            }
        ],
        "path": "javascript/global_objects/reflect/apply",
        "syntax": "Reflect.apply(target, thisArgument, argumentsList)",
        "type": "Reflect"
    },
    "Reflect.construct": {
        "descr": "The static Reflect.construct() method acts like the new operator, but as a function. It is equivalent to calling new target(...args). It gives also the added option to specify a different prototype.",
        "name": "Reflect.construct",
        "params": [
            {
                "descr": "The target function to call.",
                "name": "target"
            },
            {
                "descr": "An array-like object specifying the arguments with which target should be called.",
                "name": "argumentsList"
            },
            {
                "descr": "The constructor whose prototype should be used. ",
                "name": "newTarget Optional"
            }
        ],
        "path": "javascript/global_objects/reflect/construct",
        "syntax": "Reflect.construct(target, argumentsList[, newTarget])",
        "type": "Reflect"
    },
    "Reflect.defineProperty": {
        "descr": "The static Reflect.defineProperty() method is like Object.defineProperty() but returns a Boolean.",
        "name": "Reflect.defineProperty",
        "params": [
            {
                "descr": "The target object on which to define the property.",
                "name": "target"
            },
            {
                "descr": "The name of the property to be defined or modified.",
                "name": "propertyKey"
            },
            {
                "descr": "The attributes for the property being defined or modified.",
                "name": "attributes"
            }
        ],
        "path": "javascript/global_objects/reflect/defineproperty",
        "syntax": "Reflect.defineProperty(target, propertyKey, attributes)",
        "type": "Reflect"
    },
    "Reflect.deleteProperty": {
        "descr": "The static Reflect.deleteProperty() method allows to delete properties. It is like the delete operator as a function.",
        "name": "Reflect.deleteProperty",
        "params": [
            {
                "descr": "The target object on which to delete the property.",
                "name": "target"
            },
            {
                "descr": "The name of the property to be deleted.",
                "name": "propertyKey"
            }
        ],
        "path": "javascript/global_objects/reflect/deleteproperty",
        "syntax": "Reflect.deleteProperty(target, propertyKey)",
        "type": "Reflect"
    },
    "Reflect.get": {
        "descr": "The static Reflect.get() method works like getting a property from an object (target[propertyKey]) as a function.",
        "name": "Reflect.get",
        "params": [
            {
                "descr": "The target object on which to get the property.",
                "name": "target"
            },
            {
                "descr": "The name of the property to get.",
                "name": "propertyKey"
            },
            {
                "descr": "The value of this provided for the call to target if a getter is encountered. ",
                "name": "receiver Optional"
            }
        ],
        "path": "javascript/global_objects/reflect/get",
        "syntax": "Reflect.get(target, propertyKey[, receiver])",
        "type": "Reflect"
    },
    "Reflect.getOwnPropertyDescriptor": {
        "descr": "The static Reflect.getOwnPropertyDescriptor() method is similar to Object.getOwnPropertyDescriptor(). It returns a property descriptor of the given property if it exists on the object, undefined otherwise.",
        "name": "Reflect.getOwnPropertyDescriptor",
        "params": [
            {
                "descr": "The target object in which to look for the property.",
                "name": "target"
            },
            {
                "descr": "The name of the property to get an own property descriptor for.",
                "name": "propertyKey"
            }
        ],
        "path": "javascript/global_objects/reflect/getownpropertydescriptor",
        "syntax": "Reflect.getOwnPropertyDescriptor(target, propertyKey)",
        "type": "Reflect"
    },
    "Reflect.getPrototypeOf": {
        "descr": "The static Reflect.getPrototypeOf() method is almost the same method as Object.getPrototypeOf(). It returns the prototype (i.e. the value of the internal [[Prototype]] property) of the specified object.",
        "name": "Reflect.getPrototypeOf",
        "params": [
            {
                "descr": "The target object of which to get the prototype.",
                "name": "target"
            }
        ],
        "path": "javascript/global_objects/reflect/getprototypeof",
        "syntax": "Reflect.getPrototypeOf(target)",
        "type": "Reflect"
    },
    "Reflect.has": {
        "descr": "The static Reflect.has() method works like the in operator as a function.",
        "name": "Reflect.has",
        "params": [
            {
                "descr": "The target object in which to look for the property.",
                "name": "target"
            },
            {
                "descr": "The name of the property to check.",
                "name": "propertyKey"
            }
        ],
        "path": "javascript/global_objects/reflect/has",
        "syntax": "Reflect.has(target, propertyKey)",
        "type": "Reflect"
    },
    "Reflect.isExtensible": {
        "descr": "The static Reflect.isExtensible() method determines if an object is extensible (whether it can have new properties added to it). It is similar to Object.isExtensible(), but with some differences.",
        "name": "Reflect.isExtensible",
        "params": [
            {
                "descr": "The target object which to check if it is extensible.",
                "name": "target"
            }
        ],
        "path": "javascript/global_objects/reflect/isextensible",
        "syntax": "Reflect.isExtensible(target)",
        "type": "Reflect"
    },
    "Reflect.ownKeys": {
        "descr": "The static Reflect.ownKeys() method returns an array of the target object's own property keys.",
        "name": "Reflect.ownKeys",
        "params": [
            {
                "descr": "The target object from which to get the own keys.",
                "name": "target"
            }
        ],
        "path": "javascript/global_objects/reflect/ownkeys",
        "syntax": "Reflect.ownKeys(target)",
        "type": "Reflect"
    },
    "Reflect.preventExtensions": {
        "descr": "The static Reflect.preventExtensions() method prevents new properties from ever being added to an object (i.e. prevents future extensions to the object). It is similar to Object.preventExtensions(), but with some differences.",
        "name": "Reflect.preventExtensions",
        "params": [
            {
                "descr": "The target object on which to prevent extensions.",
                "name": "target"
            }
        ],
        "path": "javascript/global_objects/reflect/preventextensions",
        "syntax": "Reflect.preventExtensions(target)",
        "type": "Reflect"
    },
    "Reflect.set": {
        "descr": "The static Reflect.set() method works like setting a property on an object.",
        "name": "Reflect.set",
        "params": [
            {
                "descr": "The target object on which to set the property.",
                "name": "target"
            },
            {
                "descr": "The name of the property to set.",
                "name": "propertyKey"
            },
            {
                "descr": "The value to set.",
                "name": "value"
            },
            {
                "descr": "The value of this provided for the call to target if a setter is encountered.",
                "name": "receiver"
            }
        ],
        "path": "javascript/global_objects/reflect/set",
        "syntax": "Reflect.set(target, propertyKey, value[, receiver])",
        "type": "Reflect"
    },
    "Reflect.setPrototypeOf": {
        "descr": "The static Reflect.setPrototypeOf() method is the same method as Object.setPrototypeOf(). It sets the prototype (i.e., the internal [[Prototype]] property) of a specified object to another object or to null.",
        "name": "Reflect.setPrototypeOf",
        "params": [
            {
                "descr": "The target object of which to set the prototype.",
                "name": "target"
            },
            {
                "descr": "The object's new prototype (an object or null).",
                "name": "prototype"
            }
        ],
        "path": "javascript/global_objects/reflect/setprototypeof",
        "syntax": "Reflect.setPrototypeOf(target, prototype)",
        "type": "Reflect"
    },
    "RegExp": {
        "descr": "The RegExp constructor creates a regular expression object for matching text with a pattern.",
        "name": "RegExp",
        "params": [
            {
                "descr": "The text of the regular expression or, as of ES5, another RegExp object (or literal) to copy (the latter for the two RegExp constructor notations only).",
                "name": "pattern"
            },
            {
                "descr": "If specified, flags indicates the flags to add, or if an object is supplied for the pattern, the flags value will replace any of that object's flags (and lastIndex will be reset to 0) (as of ES2015). ",
                "name": "flags"
            },
            {
                "descr": "ignore case; if u flag is also enabled, use Unicode case folding",
                "name": "i"
            },
            {
                "descr": "multiline; treat beginning and end characters (^ and $) as working over multiple lines (i.e., match the beginning or end of each line (delimited by \\n or \\r), not only the very beginning or end of the whole input string)",
                "name": "m"
            },
            {
                "descr": "Unicode; treat pattern as a sequence of Unicode code points",
                "name": "u"
            },
            {
                "descr": "sticky; matches only from the index indicated by the lastIndex property of this regular expression in the target string (and does not attempt to match from any later indexes).",
                "name": "y"
            },
            {
                "descr": "Allows the addition of properties to all objects.",
                "name": "RegExp.prototype"
            },
            {
                "descr": "The value of RegExp.length is 2.",
                "name": "RegExp.length"
            },
            {
                "descr": "The constructor function that is used to create derived objects.",
                "name": "get RegExp[@@species]"
            },
            {
                "descr": "The index at which to start the next match.",
                "name": "RegExp.lastIndex"
            },
            {
                "descr": "Specifies the function that creates an object's prototype.",
                "name": "RegExp.prototype.constructor"
            },
            {
                "descr": "A string that contains the flags of the RegExp object.",
                "name": "RegExp.prototype.flags"
            },
            {
                "descr": "Whether to test the regular expression against all possible matches in a string, or only against the first.",
                "name": "RegExp.prototype.global"
            },
            {
                "descr": "Whether to ignore case while attempting a match in a string.",
                "name": "RegExp.prototype.ignoreCase"
            },
            {
                "descr": "Whether or not to search in strings across multiple lines.",
                "name": "RegExp.prototype.multiline"
            },
            {
                "descr": "The text of the pattern.",
                "name": "RegExp.prototype.source"
            },
            {
                "descr": "Whether or not the search is sticky.",
                "name": "RegExp.prototype.sticky"
            },
            {
                "descr": "Whether or not Unicode features are enabled.",
                "name": "RegExp.prototype.unicode"
            },
            {
                "descr": "(Re-)compiles a regular expression during execution of a script.",
                "name": "RegExp.prototype.compile()"
            },
            {
                "descr": "Executes a search for a match in its string parameter.",
                "name": "RegExp.prototype.exec()"
            },
            {
                "descr": "Tests for a match in its string parameter.",
                "name": "RegExp.prototype.test()"
            },
            {
                "descr": "Performs match to given string and returns match result.",
                "name": "RegExp.prototype[@@match]()"
            },
            {
                "descr": "Replaces matches in given string with new substring.",
                "name": "RegExp.prototype[@@replace]()"
            },
            {
                "descr": "Searches the match in given string and returns the index the pattern found in the string.",
                "name": "RegExp.prototype[@@search]()"
            },
            {
                "descr": "Splits given string into an array by separating the string into substring.",
                "name": "RegExp.prototype[@@split]()"
            },
            {
                "descr": "Returns an object literal representing the specified object; you can use this value to create a new object. ",
                "name": "RegExp.prototype.toSource()"
            },
            {
                "descr": "Returns a string representing the specified object. ",
                "name": "RegExp.prototype.toString()"
            }
        ],
        "path": "javascript/global_objects/regexp",
        "syntax": "/pattern/flags new RegExp(pattern[, flags]) RegExp(pattern[, flags])",
        "type": "RegExp"
    },
    "RegExp.@@species": {
        "descr": "The RegExp[@@species] accessor property returns the RegExp constructor.",
        "name": "RegExp.@@species",
        "params": [],
        "path": "javascript/global_objects/regexp/@@species",
        "syntax": "RegExp[Symbol.species]  Description The species accessor property returns the default constructor for RegExp objects. Subclass constructors may over-ride it to change the constructor assignment. Examples The species property returns the default constructor function, which is the RegExp constructor for RegExp objects: RegExp[Symbol.species]; // function RegExp()",
        "type": "RegExp"
    },
    "RelativeOrientationSensor.constructor": {
        "descr": "The RelativeOrientationSensor constructor creates a new RelativeOrientationSensor object which describes the device's physical orientation.",
        "name": "RelativeOrientationSensor.constructor",
        "params": [
            {
                "descr": "Options are as follows:   frequency: The desired number of times per second a sample should be taken, meaning the number of times per second that sensor.onreading will be called. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/relativeorientationsensor/relativeorientationsensor",
        "syntax": "var relativeOrientationSensor = new RelativeOrientationSEnsor([options])",
        "type": "Sensors"
    },
    "Request": {
        "descr": "The Request interface of the Fetch API represents a resource request.",
        "name": "Request",
        "params": [
            {
                "descr": "Creates a new Request object.",
                "name": "Request.Request()"
            },
            {
                "descr": "Contains the cache mode of the request (e.g., default, reload, no-cache).",
                "name": "Request.cache Read only"
            },
            {
                "descr": "Contains the context of the request (e.g., audio, image, iframe, etc.)",
                "name": "Request.context Read only"
            },
            {
                "descr": "Contains the credentials of the request (e.g., \"omit\", \"same-origin\", \"include\"). ",
                "name": "Request.credentials Read only"
            },
            {
                "descr": "Returns a string from the RequestDestination enum describing the request's destination. ",
                "name": "Request.destination Read only"
            },
            {
                "descr": "Contains the associated Headers object of the request.",
                "name": "Request.headers Read only"
            },
            {
                "descr": "Contains the subresource integrity value of the request (e.g., sha256-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=).",
                "name": "Request.integrity Read only"
            },
            {
                "descr": "Contains the request's method (GET, POST, etc.)",
                "name": "Request.method Read only"
            },
            {
                "descr": "Contains the mode of the request (e.g., cors, no-cors, same-origin, navigate.)",
                "name": "Request.mode Read only"
            },
            {
                "descr": "Contains the mode for how redirects are handled. ",
                "name": "Request.redirect Read only"
            },
            {
                "descr": "Contains the referrer of the request (e.g., client).",
                "name": "Request.referrer Read only"
            },
            {
                "descr": "Contains the referrer policy of the request (e.g., no-referrer).",
                "name": "Request.referrerPolicy Read only"
            },
            {
                "descr": "Contains the URL of the request.",
                "name": "Request.url Read only"
            },
            {
                "descr": "A simple getter used to expose a ReadableStream of the body contents.",
                "name": "body Read only"
            },
            {
                "descr": "Stores a Boolean that declares whether the body has been used in a response yet.",
                "name": "bodyUsed Read only"
            },
            {
                "descr": "Creates a copy of the current Request object.",
                "name": "Request.clone()"
            },
            {
                "descr": "Returns a promise that resolves with an ArrayBuffer representation of the request body.",
                "name": "Body.arrayBuffer()"
            },
            {
                "descr": "Returns a promise that resolves with a Blob representation of the request body.",
                "name": "Body.blob()"
            },
            {
                "descr": "Returns a promise that resolves with a FormData representation of the request body.",
                "name": "Body.formData()"
            },
            {
                "descr": "Returns a promise that resolves with a JSON representation of the request body.",
                "name": "Body.json()"
            },
            {
                "descr": "Returns a promise that resolves with an USVString (text) representation of the request body.",
                "name": "Body.text()"
            }
        ],
        "path": "dom/request",
        "syntax": "dom.fetch.enabled preference. To change preferences in Firefox, visit about:config.    No  29   29   28Disabled   Disabled From version 28: this feature is behind the Experimental Web Platform Features preference.    10.1    cache   No   No   Nightly build     Yes  48  No  No  11    clone   42   42   41Disabled   Disabled From version 41: this feature is behind the Experimental Web Platform Features preference. To change preferences in Chrome, visit chrome://flags.    Yes  39   39   34Disabled   Disabled From version 34: this feature is behind the dom.fetch.enabled preference. To change preferences in Firefox, visit about:config.    No  29   29   28Disabled   Disabled From version 28: this feature is behind the Experimental Web Platform Features preference.    No    context  42 — 46  ?  39 — 42  39 — 42   see bug 1188062 for more information.    No 28 — 29  No    credentials   42   42   41Disabled   Disabled From version 41: this feature is behind the Experimental Web Platform Features preference. To change preferences in Chrome, visit chrome://flags.    Yes  39   39   34Disabled   Disabled From version 34: this feature is behind the dom.fetch.enabled preference. To change preferences in Firefox, visit about:config.    No  29   29   28Disabled   Disabled From version 28: this feature is behind the Experimental Web Platform Features preference.    No    destination   65  14  61  No  52  No    headers   42   42   41Disabled   Disabled From version 41: this feature is behind the Experimental Web Platform Features preference. To change preferences in Chrome, visit chrome://flags.    Yes  39   39   34Disabled   Disabled From version 34: this feature is behind the dom.fetch.enabled preference. To change preferences in Firefox, visit about:config.    No  29   29   28Disabled   Disabled From version 28: this feature is behind the Experimental Web Platform Features preference.    No    integrity   46  Yes  Yes  No  Yes  No    keepalive   66  15  ?   ?   43  ?     method   42   42   41Disabled   Disabled From version 41: this feature is behind the Experimental Web Platform Features preference. To change preferences in Chrome, visit chrome://flags.    Yes  39   39   34Disabled   Disabled From version 34: this feature is behind the dom.fetch.enabled preference. To change preferences in Firefox, visit about:config.    No  29   29   28Disabled   Disabled From version 28: this feature is behind the Experimental Web Platform Features preference.    No    mode   42  Yes  39  No  29  No    redirect   46  Yes  Yes  No  Yes  No    referrer   42   42   41Disabled   Disabled From version 41: this feature is behind the Experimental Web Platform Features preference. To change preferences in Chrome, visit chrome://flags.    Yes  47  No  29   29   28Disabled   Disabled From version 28: this feature is behind the Experimental Web Platform Features preference.    No   referrerPolicy  52  No  52  No  39  11.1   signal  ?   16  ?   ?   ?   ?     url   42   42   Fragment support added in Chrome 59.    Yes  39   39   34Disabled   Disabled From version 34: this feature is behind the dom.fetch.enabled preference. To change preferences in Firefox, visit about:config.    No  29   29   Fragment support added in Opera 46.    No        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet     Basic support   42  42  Yes  Yes  28  No  4.0    Request()",
        "type": "Fetch"
    },
    "Request.cache": {
        "descr": "The cache read-only property of the Request interface contains the cache mode of the request. It controls how the request will interact with the browser's HTTP cache.",
        "name": "Request.cache",
        "params": [],
        "path": "dom/request/cache",
        "syntax": "var currentCacheMode = request.cache; Value A RequestCache value. The available values are:   default — The browser looks for a matching request in its HTTP cache.  If there is a match and it is fresh, it will be returned from the cache. If there is a match but it is stale, the browser will make a conditional request to the remote server. If the server indicates that the resource has not changed, it will be returned from the cache. Otherwise the resource will be downloaded from the server and the cache will be updated. If there is no match, the browser will make a normal request, and will update the cache with the downloaded resource.    no-store — The browser fetches the resource from the remote server without first looking in the cache, and will not update the cache with the downloaded resource.  reload — The browser fetches the resource from the remote server without first looking in the cache, but then will update the cache with the downloaded resource.  no-cache — The browser looks for a matching request in its HTTP cache.  If there is a match, fresh or stale, the browser will make a conditional request to the remote server. If the server indicates that the resource has not changed, it will be returned from the cache. Otherwise the resource will be downloaded from the server and the cache will be updated. If there is no match, the browser will make a normal request, and will update the cache with the downloaded resource.    force-cache — The browser looks for a matching request in its HTTP cache.  If there is a match, fresh or stale, it will be returned from the cache. If there is no match, the browser will make a normal request, and will update the cache with the downloaded resource.    only-if-cached — The browser looks for a matching request in its HTTP cache.  If there is a match, fresh or stale, if will be returned from the cache. If there is no match, the browser will respond with a 504 Gateway timeout status.  The \"only-if-cached\" mode can only be used if the request's mode is \"same-origin\". Cached redirects will be followed if the request's redirect property is \"follow\" and the redirects do not violate the \"same-origin\" mode.  Example // Download a resource with cache busting, to bypass the cache // completely. fetch(\"some.json\", {cache: \"no-store\"}) .then(function(response) { /* consume the response */ });\n or  // Download a resource with cache busting, but update the HTTP // cache with the downloaded resource. fetch(\"some.json\", {cache: \"reload\"}) .then(function(response) { /* consume the response */ });\n or  // Download a resource with cache busting when dealing with a // properly configured server that will send the correct ETag // and Date headers and properly handle If-Modified-Since and // If-None-Match request headers, therefore we can rely on the // validation to guarantee a fresh response. fetch(\"some.json\", {cache: \"no-cache\"}) .then(function(response) { /* consume the response */ });\n or  // Download a resource with economics in mind! Prefer a cached // albeit stale response to conserve as much bandwidth as possible. fetch(\"some.json\", {cache: \"force-cache\"}) .then(function(response) { /* consume the response */ });\n or  // Naive stale-while-revalidate client-level implementation. // Prefer a cached albeit stale response; but update if it's too old. // AbortController and signal to allow better memory cleaning. // In reality; this would be a function that takes a path and a // reference to the controller since it would need to change the value let controller = new AbortController();\n or  fetch(\"some.json\", {cache: \"only-if-cached\", mode: \"same-origin\", signal: controller.signal}) .catch(e => e instanceof TypeError && e.message === \"Failed to fetch\" ? ({status: 504}) : // Workaround for chrome; which simply fails with a typeerror Promise.reject(e)) .then(res => { if (res.status === 504) { controller.abort() controller = new AbortController();\n or  return fetch(\"some.json\", {cache: \"force-cache\", mode: \"same-origin\", signal: controller.signal}) } const date = res.headers.get(\"date\"), dt = date ? new Date(date).getTime() : 0 if (dt < (Date.now() - 86400000)) { // if older than 24 hours controller.abort() controller = new AbortController();\n or  return fetch(\"some.json\", {cache: \"reload\", mode: \"same-origin\", signal: controller.signal}) } // Other possible conditions if (dt < (Date.now() - 300000)) // If it's older than 5 minutes fetch(\"some.json\", {cache: \"no-cache\", mode: \"same-origin\"}) // no cancellation or return value. return res }) .then(function(response) { /* consume the (possibly stale) response */ }) .catch(error => { /* Can be an AbortError/DOMError or a TypeError */ });",
        "type": "Fetch"
    },
    "Request.clone": {
        "descr": "The clone() method of the Request interface creates a copy of the current Request object.",
        "name": "Request.clone",
        "params": [],
        "path": "dom/request/clone",
        "syntax": "var newRequest = request.clone();",
        "type": "Fetch"
    },
    "Request.constructor": {
        "descr": "The Request() constructor creates a new Request object.",
        "name": "Request.constructor",
        "params": [
            {
                "descr": "Defines the resource that you wish to fetch. ",
                "name": "input"
            },
            {
                "descr": "An options object containing any custom settings that you want to apply to the request. ",
                "name": "init Optional"
            }
        ],
        "path": "dom/request/request",
        "syntax": "var myRequest = new Request(input[, init]);",
        "type": "Fetch"
    },
    "Request.credentials": {
        "descr": "The credentials read-only property of the Request interface indicates whether the user agent should send cookies from the other domain in the case of cross-origin requests. This is similar to XHR’s withCredentials flag, but with three available values (instead of two):",
        "name": "Request.credentials",
        "params": [],
        "path": "dom/request/credentials",
        "syntax": "var myCred = request.credentials; Value A RequestCredentials value representing the credentials to use for this transaction. Example In the following snippet, we create a new request using the Request.Request()",
        "type": "Fetch"
    },
    "Request.destination": {
        "descr": "The destination read-only property of the Request interface returns a string describing the type of content being requested. The string must be one of those found in the RequestDestination enumerated type or the empty string, which is the default value.",
        "name": "Request.destination",
        "params": [],
        "path": "dom/request/destination",
        "syntax": "var destination = request.destination; Value A string from the RequestDestination enumerated type which indicates the type of content the request is asking for. This type is much broader than the usual document type values (such as \"document\" or \"manifest\"), and may include contextual cues such as \"image\"",
        "type": "Fetch"
    },
    "Request.headers": {
        "descr": "The headers read-only property of the Request interface contains the Headers object associated with the request.",
        "name": "Request.headers",
        "params": [],
        "path": "dom/request/headers",
        "syntax": "var myHeaders = request.headers; Value A Headers object. Example In the following snippet, we create a new request using the Request.Request()",
        "type": "Fetch"
    },
    "Request.integrity": {
        "descr": "The integrity read-only property of the Request interface contains the subresource integrity value of the request.",
        "name": "Request.integrity",
        "params": [],
        "path": "dom/request/integrity",
        "syntax": "var myIntegrity = request.integrity; Value The subresource integrity value of the request (e.g., sha256-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=).",
        "type": "Fetch"
    },
    "Request.method": {
        "descr": "The method read-only property of the Request interface contains the request's method (GET, POST, etc.)",
        "name": "Request.method",
        "params": [],
        "path": "dom/request/method",
        "syntax": "var myMethod = request.method; Value A ByteString indicating the method of the request. Example In the following snippet, we create a new request using the Request.Request()",
        "type": "Fetch"
    },
    "Request.mode": {
        "descr": "The mode read-only property of the Request interface contains the mode of the request (e.g., cors, no-cors, same-origin, or navigate.) This is used to determine if cross-origin requests lead to valid responses, and which properties of the response are readable.",
        "name": "Request.mode",
        "params": [
            {
                "descr": "The associated mode, available values of which are:   same-origin — If a request is made to another origin with this mode set, the result is simply an error. ",
                "name": "A RequestMode value."
            }
        ],
        "path": "dom/request/mode",
        "syntax": "var myMode = request.mode; Value   A RequestMode value.   The associated mode, available values of which are:   same-origin — If a request is made to another origin with this mode set, the result is simply an error. You could use this to ensure that a request is always being made to your origin.  no-cors — Prevents the method from being anything other than HEAD, GET or POST, and the headers from being anything other than simple headers. If any ServiceWorkers intercept these requests, they may not add or override any headers except for those that are simple headers. In addition, JavaScript may not access any properties of the resulting Response. This ensures that ServiceWorkers do not affect the semantics of the Web and prevents security and privacy issues arising from leaking data across domains.  cors — Allows cross-origin requests, for example to access various APIs offered by 3rd party vendors. These are expected to adhere to the CORS protocol. Only a limited set of headers are exposed in the Response, but the body is readable.  navigate — A mode for supporting navigation. The navigate value is intended to be used only by HTML navigation. A navigate request is created only while navigating between documents.    Default mode Requests can be initiated in a variety of ways, and the mode for a request depends on the particular means by which it was initiated. For example, when a Request object is created using the Request.Request constructor, the value of the mode property for that Request is set to cors. However, for requests created other than by the Request.Request constructor, no-cors is typically used as the mode; for example, for embedded resources where the request is initiated from markup, unless the crossorigin attribute is present, the request is in most cases made using the no-cors mode — that is, for the <link> or <script> elements (except when used with modules), or <img>",
        "type": "Fetch"
    },
    "Request.redirect": {
        "descr": "The redirect read-only property of the Request interface contains the mode for how redirects are handled.",
        "name": "Request.redirect",
        "params": [],
        "path": "dom/request/redirect",
        "syntax": "var myRedirect = request.redirect; Value A RequestRedirect enum value, which can be one the following strings:  follow error manual  If not specified when the request is created, it takes the default value of follow. Example In the following snippet, we create a new request using the Request.Request()",
        "type": "Fetch"
    },
    "Request.referrer": {
        "descr": "The referrer read-only property of the Request interface is set by the user agent to be the referrer of the Request. (e.g., client, no-referrer, or a URL.)",
        "name": "Request.referrer",
        "params": [],
        "path": "dom/request/referrer",
        "syntax": "var myReferrer = request.referrer; Value A DOMString representing the request's referrer. Example In the following snippet, we create a new request using the Request.Request()",
        "type": "Fetch"
    },
    "Request.referrerPolicy": {
        "descr": "The referrerPolicy read-only property of the Request interface returns the referrer policy, which governs what referrer information, sent in the Referer header, should be included with the request.",
        "name": "Request.referrerPolicy",
        "params": [],
        "path": "dom/request/referrerpolicy",
        "syntax": "var myReferrerPolicy = request.referrerPolicy; Value A DOMString representing the request's referrerPolicy. For more information and possible values, see the Referrer-Policy HTTP header page. Example In the following snippet, we create a new request using the Request.Request()",
        "type": "Fetch"
    },
    "Request.url": {
        "descr": "The url read-only property of the Request interface contains the URL of the request.",
        "name": "Request.url",
        "params": [],
        "path": "dom/request/url",
        "syntax": "var myURL = request.url; Value A USVString indicating the url of the request. Example In the following snippet, we create a new request using the Request.Request()",
        "type": "Fetch"
    },
    "Resource Timing API": {
        "descr": "The Resource Timing interfaces enable retrieving and analyzing detailed network timing data regarding the loading of an application's resource(s). An application can use the timing metrics to determine, for example, the length of time it takes to load a specific resource, such as an XMLHttpRequest, <SVG>, image, or script.",
        "name": "Resource Timing API",
        "params": [],
        "path": "dom/resource_timing_api",
        "syntax": "PerformanceResourceTiming interface extends the PerformanceEntry for performance entries which have an entryType of \"resource\". High-resolution time stamps Several of the Resource Timing properties return high-resolution timestamps. These timestamps have a DOMHighResTimeStamp type and as its name implies, they represent a high-resolution point in time. This type is a double and its value is a discrete point in time or the difference in time between two discrete points in time. The unit of DOMHighResTimeStamp is milliseconds and should be accurate to 5 µs (microseconds). However, If the browser is unable to provide a time value accurate to 5 µs (because, for example, due to hardware or software constraints), the browser can represent a the value as a time in milliseconds accurate to a millisecond.",
        "type": "Performance"
    },
    "Resource Timing API: Using the Resource Timing API": {
        "descr": "The Resource Timing API provides a way to retrieve and analyze detailed network timing data regarding the loading of an application's resource(s). An application can use the timing metrics to determine, for example, the length of time it takes to fetch a specific resource such as an XMLHttpRequest, <SVG>, image, script, etc.).",
        "name": "Resource Timing API: Using the Resource Timing API",
        "params": [],
        "path": "dom/resource_timing_api/using_the_resource_timing_api",
        "syntax": "redirectStart and redirectEnd ), DNS lookup (domainLookupStart",
        "type": "Performance"
    },
    "Response.clone": {
        "descr": "The clone() method of the Response interface creates a clone of a response object, identical in every way, but stored in a different variable.",
        "name": "Response.clone",
        "params": [],
        "path": "dom/response/clone",
        "syntax": "var response2 = response1.clone();",
        "type": "Fetch"
    },
    "Response.constructor": {
        "descr": "The Response() constructor creates a new Response object.",
        "name": "Response.constructor",
        "params": [
            {
                "descr": "An object defining a body for the response. ",
                "name": "body Optional"
            },
            {
                "descr": "An options object containing any custom settings that you want to apply to the response. ",
                "name": "init Optional"
            }
        ],
        "path": "dom/response/response",
        "syntax": "var myResponse = new Response(body, init);",
        "type": "Fetch"
    },
    "Response.error": {
        "descr": "The error() method of the Response interface returns a new Response object associated with a network error.",
        "name": "Response.error",
        "params": [],
        "path": "dom/response/error",
        "syntax": "var errorResponse = Response.error();",
        "type": "Fetch"
    },
    "Response.headers": {
        "descr": "The headers read-only property of the Response interface contains the Headers object associated with the response.",
        "name": "Response.headers",
        "params": [],
        "path": "dom/response/headers",
        "syntax": "var myHeaders = response.headers; Value A Headers object. Example In our Fetch Response example (see Fetch Response live) we create a new Request",
        "type": "Fetch"
    },
    "Response.ok": {
        "descr": "The ok read-only property of the Response interface contains a Boolean stating whether the response was successful (status in the range 200-299) or not.",
        "name": "Response.ok",
        "params": [],
        "path": "dom/response/ok",
        "syntax": "var myOK = response.ok; Value A Boolean. Example In our Fetch Response example (see Fetch Response live) we create a new Request",
        "type": "Fetch"
    },
    "Response.redirect": {
        "descr": "The redirect() method of the Response interface returns a Response resulting in a redirect to the specified URL.",
        "name": "Response.redirect",
        "params": [
            {
                "descr": "The URL that the new response is to originate from.",
                "name": "url"
            },
            {
                "descr": "An optional status code for the response (e.g., 302.)",
                "name": "status Optional"
            }
        ],
        "path": "dom/response/redirect",
        "syntax": "var response = Response.redirect(url,status);",
        "type": "Fetch"
    },
    "Response.redirected": {
        "descr": "The read-only redirected property of the Response interface indicates whether or not the response is the result of a request you made which was redirected.",
        "name": "Response.redirected",
        "params": [],
        "path": "dom/response/redirected",
        "syntax": "var isRedirected = Response.redirected; Value A Boolean which is true if the response indicates that your request was redirected. Examples Detecting redirects Checking to see if the response comes from a redirected request is as simple as checking this flag on the Response object. In the code below, a textual message is inserted into an element when a redirect occurred during the fetch operation. Note, however, that this isn't as safe as outright rejecting redirects if they're unexpected, as described under Disallowing redirects below. fetch(\"awesome-picture.jpg\").then(function(response) { let elem = document.getElementById(\"warning-message-box\");\n or  if (response.redirected) { elem.innerHTML = \"Unexpected redirect\"; } else { elem.innerHTML = \"\"; } return response.blob();\n or  }).then(function(imageBlob) { let imgObjectURL = URL.createObjectURL(imageBlob);\n or  document.getElementById(\"img-element-id\").src = imgObjectURL; });",
        "type": "Fetch"
    },
    "Response.status": {
        "descr": "The status read-only property of the Response interface contains the status code of the response (e.g., 200 for a success).",
        "name": "Response.status",
        "params": [],
        "path": "dom/response/status",
        "syntax": "var myStatus = response.status; Value A number (to be precise, an unsigned short).",
        "type": "Fetch"
    },
    "Response.statusText": {
        "descr": "The statusText read-only property of the Response interface contains the status message corresponding to the status code (e.g., OK for 200).",
        "name": "Response.statusText",
        "params": [],
        "path": "dom/response/statustext",
        "syntax": "var myStatusText = response.statusText; Value A ByteString. Example In our Fetch Response example (see Fetch Response live) we create a new Request",
        "type": "Fetch"
    },
    "Response.type": {
        "descr": "The type read-only property of the Response interface contains the type of the response. It can be one of the following:",
        "name": "Response.type",
        "params": [],
        "path": "dom/response/type",
        "syntax": "var myType = response.type; Value A ResponseType string indicating the type of the response. Example In our Fetch Response example (see Fetch Response live) we create a new Request",
        "type": "Fetch"
    },
    "Response.url": {
        "descr": "The url read-only property of the Response interface contains the URL of the response. The value of the url property will be the final URL obtained after any redirects.",
        "name": "Response.url",
        "params": [],
        "path": "dom/response/url",
        "syntax": "var myURL = response.url; Value A USVString. Example In our Fetch Response example (see Fetch Response live) we create a new Request",
        "type": "Fetch"
    },
    "Response.useFinalURL": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "Response.useFinalURL",
        "params": [],
        "path": "dom/response/usefinalurl",
        "syntax": "var isfinalURL = Response.useFinalURL; Value A Boolean indicating whether or not the URL is final rather than a redirect. Example Consider a script residing in page index.html: fetch('/test').then((r) => console.log(r.url))",
        "type": "Fetch"
    },
    "SVGAElement.target": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SVGAElement.target",
        "params": [],
        "path": "dom/svgaelement/target",
        "syntax": "myLink.target = 'value'; Value An SVGAnimatedString indicating the ending resource target that opens the document when the link is activated. Sample values can be found here Example The code is taken from the \"SVGAElement example code\" ... var linkRef = document.querySelector('a');\n or  linkRef.target ='_blank'; ...);",
        "type": "SVG"
    },
    "SVGAnimatedString.animVal": {
        "descr": "AnimVal attribute or animVal property contains the same value as the baseVal property.If the given attribute or property is being animated, contains the current animated value of the attribute or property. If the given attribute or property is not currently being animated, then it contains the same value as baseVal",
        "name": "SVGAnimatedString.animVal",
        "params": [],
        "path": "dom/svganimatedstring/animval",
        "syntax": "var = object.animVal Specifications    Specification Status Comment   Scalable Vector Graphics (SVG) 1.1 (Second Edition) Recommendation     Scalable Vector Graphics (SVG) 2 Candidate Recommendation      Browser compatibilityUpdate compatibility data on GitHub",
        "type": "SVG"
    },
    "SVGAnimationElement.targetElement": {
        "descr": "The SVGAnimationElement.targetElement property refers to the element which is being animated. If no target element is being animated (for example, because the href attribute specifies an unknown element), the value returned is null.",
        "name": "SVGAnimationElement.targetElement",
        "params": [],
        "path": "dom/svganimationelement/targetelement",
        "syntax": "var targetElement = someElement.targetElement;  Specifications    Specification Status Comment   SVG Animations Level 2The definition of 'SVGAnimationElement.targetElement' in that specification. Editor's Draft Added null as return value in case that no target element is being animated.   Scalable Vector Graphics (SVG) 1.1 (Second Edition)The definition of 'SVGAnimationElement.targetElement' in that specification. Recommendation Initial definition    Browser compatibilityUpdate compatibility data on GitHub",
        "type": "SVG"
    },
    "SVGCircleElement.cx": {
        "descr": "« SVG Attribute reference home",
        "name": "SVGCircleElement.cx",
        "params": [
            {
                "descr": "A <coordinate> is a length in the user coordinate system that is the given distance from the origin of the user coordinate system along the relevant axis (the x-axis for X coordinates, the y-axis for Y coordinates). Its syntax is the same as that for <length>. Within the SVG DOM, a <coordinate> is represented as an SVGLength or an SVGAnimatedLength.",
                "name": "<coordinate>"
            }
        ],
        "path": "dom/svgcircleelement/cx",
        "syntax": "SVGLength or an SVGAnimatedLength.   Example SVG 'cx' attribute example HTML Content <svg viewBox=\"0 0 500 100\"> <circle cy=\"50\" r=\"25\"/> <!-- This circle will appear cut off (cx=0) --> <circle cx=\"150\" cy=\"50\" r=\"25\"/> <circle cx=\"350\" cy=\"50\" r=\"25\"/> </svg>",
        "type": "SVG"
    },
    "SVGElement.dataset": {
        "descr": "The SVGElement.dataset property allows access, both in reading and writing mode, to all the custom data attributes (data-*) set on the element. It is a map of DOMStrings representing keys to DOMStrings representing the values for those keys, with one entry for each custom data attribute. Each key corresponds to the name of a custom data attribute; for example, a custom attribute named data-foo is in the map with the key \"foo\".",
        "name": "SVGElement.dataset",
        "params": [],
        "path": "dom/svgelement/dataset",
        "syntax": "string = SVGElement.dataset.camelCasedName; SVGElement.dataset.camelCasedName = string; Value The value of dataset is a DOMStringMap object mapping key names to values; both the key names and the values are, themselves, DOMString objects. You can access an individual value by using the syntax SVGElement.dataset.keyName to refer to the key. Examples <div id=\"user\" data-id=\"1234567890\" data-user=\"johndoe\" data-date-of-birth>John Doe </div> var el = document.querySelector('#user');\n or  // el.id == 'user' // el.dataset.id === '1234567890' // el.dataset.user === 'johndoe' // el.dataset.dateOfBirth === '' el.dataset.dateOfBirth = '1960-10-03'; // set the DOB. // 'someDataAttr' in el.dataset === false el.dataset.someDataAttr = 'mydata'; // 'someDataAttr' in el.dataset === true);",
        "type": "SVG"
    },
    "SVGGeometryElement.getPointAtLength": {
        "descr": "The SVGGeometryElement.getPointAtLength() method returns the point at a given distance along the path.",
        "name": "SVGGeometryElement.getPointAtLength",
        "params": [
            {
                "descr": "A float referring to the distance along the path.",
                "name": "distance"
            }
        ],
        "path": "dom/svggeometryelement/getpointatlength",
        "syntax": "DOMPoint someElement.getPointAtLength(float distance);",
        "type": "SVG"
    },
    "SVGGeometryElement.getTotalLength": {
        "descr": "The SVGGeometryElement.getTotalLength() method returns the user agent's computed value for the total length of the path in user units.",
        "name": "SVGGeometryElement.getTotalLength",
        "params": [],
        "path": "dom/svggeometryelement/gettotallength",
        "syntax": "float someElement.getTotalLength();",
        "type": "SVG"
    },
    "SVGGeometryElement.isPointInFill": {
        "descr": "The SVGGeometryElement.isPointInFill() method determines whether a given point is within the fill shape of an element. Normal hit testing rules apply; the value of the pointer-events property on the element determines whether a point is considered to be within the fill. The point argument is interpreted as a point in the local coordiante system of the element.",
        "name": "SVGGeometryElement.isPointInFill",
        "params": [
            {
                "descr": "A DOMPoint interpreted as a point in the local coordiante system of the element.",
                "name": "point"
            }
        ],
        "path": "dom/svggeometryelement/ispointinfill",
        "syntax": "boolean someElement.isPointInFill(DOMPoint point);",
        "type": "SVG"
    },
    "SVGGeometryElement.isPointInStroke": {
        "descr": "The SVGGeometryElement.isPointInStroke() method determines whether a given point is within the stroke shape of an element. Normal hit testing rules apply; the value of the pointer-events property on the element determines whether a point is considered to be within the stroke. The point argument is interpreted as a point in the local coordiante system of the element.",
        "name": "SVGGeometryElement.isPointInStroke",
        "params": [
            {
                "descr": "A DOMPoint interpreted as a point in the local coordinate system of the element.",
                "name": "point"
            }
        ],
        "path": "dom/svggeometryelement/ispointinstroke",
        "syntax": "boolean someElement.isPointInStroke(DOMPoint point);",
        "type": "SVG"
    },
    "SVGGeometryElement.pathLength": {
        "descr": "The SVGGeometryElement.pathLength property reflects the pathLength attribute and returns the total length of the path, in user units.",
        "name": "SVGGeometryElement.pathLength",
        "params": [],
        "path": "dom/svggeometryelement/pathlength",
        "syntax": "var pathLength = someElement.pathLength;  Specifications    Specification Status Comment   Scalable Vector Graphics (SVG) 2The definition of 'SVGGeometryElement.pathLength' in that specification. Candidate Recommendation Initial definition    Browser compatibilityUpdate compatibility data on GitHub",
        "type": "SVG"
    },
    "SVGPathElement.getTotalLength": {
        "descr": "The SVGPathElement.getTotalLength() method returns the user agent's computed value for the total length of the path in user units.",
        "name": "SVGPathElement.getTotalLength",
        "params": [],
        "path": "dom/svgpathelement/gettotallength",
        "syntax": "float someElement.getTotalLength();",
        "type": "SVG"
    },
    "SVGPoint": {
        "descr": "An SVGPoint represents a 2D or 3D point in the SVG coordinate system.",
        "name": "SVGPoint",
        "params": [],
        "path": "dom/svgpoint",
        "syntax": "retObject = SVGElement.createSVGPoint()",
        "type": "SVG"
    },
    "SVGSVGElement": {
        "descr": "The SVGSVGElement interface provides access to the properties of <svg> elements, as well as methods to manipulate them. This interface contains also various miscellaneous commonly-used utility methods, such as matrix operations and the ability to control the time of redraw on visual rendering devices.",
        "name": "SVGSVGElement",
        "params": [
            {
                "descr": "An SVGAnimatedLength corresponding to the x attribute of the given <svg> element.",
                "name": "SVGSVGElement.x Read only"
            },
            {
                "descr": "An SVGAnimatedLength corresponding to the y attribute of the given <svg> element.",
                "name": "SVGSVGElement.y Read only"
            },
            {
                "descr": "An SVGAnimatedLength corresponding to the width attribute of the given <svg> element.",
                "name": "SVGSVGElement.width Read only"
            },
            {
                "descr": "An SVGAnimatedLength corresponding to the height attribute of the given <svg> element.",
                "name": "SVGSVGElement.height Read only"
            },
            {
                "descr": "An SVGAnimatedLength corresponding to the contentScriptType attribute of the given <svg> element.",
                "name": "SVGSVGElement.contentScriptType"
            },
            {
                "descr": "An SVGAnimatedLength corresponding to the contentStyleType attribute of the given <svg> element.",
                "name": "SVGSVGElement.contentStyleType"
            },
            {
                "descr": "An SVGRect containing the position and size of the viewport (implicit or explicit) that corresponds to the given <svg> element. ",
                "name": "SVGSVGElement.viewport"
            },
            {
                "descr": "A float representing the size of the pixel unit (as defined by CSS2) along the x-axis of the viewport, which represents a unit somewhere in the range of 70dpi to 120dpi, and, on systems that support this, might actually match the characteristics of the target medium. On systems where it is impossible to know the size of a pixel, a suitable default pixel size is provided.",
                "name": "SVGSVGElement.pixelUnitToMillimeterX"
            },
            {
                "descr": "A float representing the size of a pixel unit along the y-axis of the viewport.",
                "name": "SVGSVGElement.pixelUnitToMillimeterY"
            },
            {
                "descr": "User interface (UI) events in DOM Level 2 indicate the screen positions at which the given UI event occurred. ",
                "name": "SVGSVGElement.screenPixelToMillimeterX"
            },
            {
                "descr": "Corresponding size of a screen pixel along the y-axis of the viewport.",
                "name": "SVGSVGElement.screenPixelToMillimeterY"
            },
            {
                "descr": "The initial view (i.e., before magnification and panning) of the current innermost SVG document fragment can be either the \"standard\" view, i.e., based on attributes on the <svg> element such as viewBox) or on a \"custom\" view (i.e., a hyperlink into a particular <view> or other element). If the initial view is the \"standard\" view, then this attribute is false. If the initial view is a \"custom\" view, then this attribute is true.",
                "name": "SVGSVGElement.useCurrentView"
            },
            {
                "descr": "An SVGViewSpec defining the initial view (i.e., before magnification and panning) of the current innermost SVG document fragment. ",
                "name": "SVGSVGElement.currentView"
            },
            {
                "descr": "On an outermost <svg> element, this float attribute indicates the current scale factor relative to the initial view to take into account user magnification and panning operations. ",
                "name": "SVGSVGElement.currentScale"
            },
            {
                "descr": "An SVGPoint representing the translation factor that takes into account user \"magnification\" corresponding to an outermost <svg> element. ",
                "name": "SVGSVGElement.currentTranslate Read only"
            },
            {
                "descr": "Takes a time-out value which indicates that redraw shall not occur until: the corresponding unsuspendRedraw() call has been made, an unsuspendRedrawAll() call has been made, or its timer has timed out. ",
                "name": "SVGSVGElement.suspendRedraw()"
            },
            {
                "descr": "Cancels a specified suspendRedraw() by providing a unique suspend handle ID that was returned by a previous suspendRedraw() call.",
                "name": "SVGSVGElement.unsuspendRedraw()"
            },
            {
                "descr": "Cancels all currently active suspendRedraw() method calls. ",
                "name": "SVGSVGElement.unsuspendRedrawAll()"
            },
            {
                "descr": "In rendering environments supporting interactivity, forces the user agent to immediately redraw all regions of the viewport that require updating.",
                "name": "SVGSVGElement.forceRedraw()"
            },
            {
                "descr": "Suspends (i.e., pauses) all currently running animations that are defined within the SVG document fragment corresponding to this <svg> element, causing the animation clock corresponding to this document fragment to stand still until it is unpaused.",
                "name": "SVGSVGElement.pauseAnimations()"
            },
            {
                "descr": "Unsuspends (i.e., unpauses) currently running animations that are defined within the SVG document fragment, causing the animation clock to continue from the time at which it was suspended.",
                "name": "SVGSVGElement.unpauseAnimations()"
            },
            {
                "descr": "Returns true if this SVG document fragment is in a paused state.",
                "name": "SVGSVGElement.animationsPaused()"
            },
            {
                "descr": "Returns the current time in seconds relative to the start time for the current SVG document fragment. ",
                "name": "SVGSVGElement.getCurrentTime()"
            },
            {
                "descr": "Adjusts the clock for this SVG document fragment, establishing a new current time. ",
                "name": "SVGSVGElement.setCurrentTime()"
            },
            {
                "descr": "Returns a NodeList of graphics elements whose rendered content intersects the supplied rectangle. ",
                "name": "SVGSVGElement.getIntersectionList()"
            },
            {
                "descr": "Returns a NodeList of graphics elements whose rendered content is entirely contained within the supplied rectangle. ",
                "name": "SVGSVGElement.getEnclosureList()"
            },
            {
                "descr": "Returns true if the rendered content of the given element intersects the supplied rectangle. ",
                "name": "SVGSVGElement.checkIntersection()"
            },
            {
                "descr": "Returns true if the rendered content of the given element is entirely contained within the supplied rectangle. ",
                "name": "SVGSVGElement.checkEnclosure()"
            },
            {
                "descr": "Unselects any selected objects, including any selections of text strings and type-in bars.",
                "name": "SVGSVGElement.deselectAll()"
            },
            {
                "descr": "Creates an SVGNumber object outside of any document trees. ",
                "name": "SVGSVGElement.createSVGNumber()"
            },
            {
                "descr": "Creates an SVGLength object outside of any document trees. ",
                "name": "SVGSVGElement.createSVGLength()"
            },
            {
                "descr": "Creates an SVGAngle object outside of any document trees. ",
                "name": "SVGSVGElement.createSVGAngle()"
            },
            {
                "descr": "Creates an SVGPoint object outside of any document trees. ",
                "name": "SVGSVGElement.createSVGPoint()"
            },
            {
                "descr": "Creates an SVGMatrix object outside of any document trees. ",
                "name": "SVGSVGElement.createSVGMatrix()"
            },
            {
                "descr": "Creates an SVGRect object outside of any document trees. ",
                "name": "SVGSVGElement.createSVGRect()"
            },
            {
                "descr": "Creates an SVGTransform object outside of any document trees. ",
                "name": "SVGSVGElement.createSVGTransform()"
            },
            {
                "descr": "Creates an SVGTransform object outside of any document trees. ",
                "name": "SVGSVGElement.createSVGTransformFromMatrix()"
            },
            {
                "descr": "Searches this SVG document fragment (i.e., the search is restricted to a subset of the document tree) for an Element whose id is given by elementId. ",
                "name": "SVGSVGElement.getElementById()"
            }
        ],
        "path": "dom/svgsvgelement",
        "syntax": "SVGSVGElement.getIntersectionList()",
        "type": "SVG"
    },
    "ScriptProcessorNode.bufferSize": {
        "descr": "Note: As of the August 29 2014 Web Audio API spec publication, this feature has been marked as deprecated, and is soon to be replaced by Audio Workers.",
        "name": "ScriptProcessorNode.bufferSize",
        "params": [],
        "path": "dom/scriptprocessornode/buffersize",
        "syntax": "var audioCtx = new AudioContext();\n or  var scriptNode = audioCtx.createScriptProcessor(4096, 1, 1);\n or  console.log(scriptNode.bufferSize);",
        "type": "Audio"
    },
    "ScriptProcessorNode.onaudioprocess": {
        "descr": "Note: As of the August 29 2014 Web Audio API spec publication, this feature has been marked as deprecated, and is soon to be replaced by Audio Workers.",
        "name": "ScriptProcessorNode.onaudioprocess",
        "params": [],
        "path": "dom/scriptprocessornode/onaudioprocess",
        "syntax": "var audioCtx = new AudioContext();\n or  var scriptNode = audioCtx.createScriptProcessor(4096, 1, 1);\n or  scriptNode.onaudioprocess = function() { ... });",
        "type": "Audio"
    },
    "ScrollToOptions.behavior": {
        "descr": "The behavior property of the ScrollToOptions dictionary specifies whether the scrolling should animate smoothly, or happen instantly in a single jump.",
        "name": "ScrollToOptions.behavior",
        "params": [],
        "path": "dom/scrolltooptions/behavior",
        "syntax": "behavior: ScrollBehavior Value An enum, the value of which can be one of the following:   smooth: The scrolling animates smoothly.  auto: The scrolling happens in a single jump.  Examples In our scrolltooptions example (see it live) we include a form that allows the user to enter three values — two numbers representing the left and top properties (i.e. the positions to scroll to along the X and Y axes), and a checkbox indicating whether they want smooth scrolling enabled or not.",
        "type": "CSS"
    },
    "ScrollToOptions.left": {
        "descr": "The left property of the ScrollToOptions dictionary specifies the number of pixels along the X axis to scroll the window or element.",
        "name": "ScrollToOptions.left",
        "params": [],
        "path": "dom/scrolltooptions/left",
        "syntax": "left: double Value A double. Examples In our scrolltooptions example (see it live) we include a form that allows the user to enter three values — two numbers representing the left and top properties (i.e. the positions to scroll to along the X and Y axes), and a checkbox indicating whether they want smooth scrolling enabled or not.",
        "type": "CSS"
    },
    "ScrollToOptions.top": {
        "descr": "The top property of the ScrollToOptions dictionary specifies the number of pixels along the Y axis to scroll the window or element.",
        "name": "ScrollToOptions.top",
        "params": [],
        "path": "dom/scrolltooptions/top",
        "syntax": "top: double Value A double. Examples In our scrolltooptions example (see it live) we include a form that allows the user to enter three values — two numbers representing the left and top properties (i.e. the positions to scroll to along the X and Y axes), and a checkbox indicating whether they want smooth scrolling enabled or not.",
        "type": "CSS"
    },
    "SecurityPolicyViolationEvent.blockedURI": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SecurityPolicyViolationEvent.blockedURI",
        "params": [],
        "path": "dom/securitypolicyviolationevent/blockeduri",
        "syntax": "let blockedURI = violationEventInstance.blockedURI; Value A USVString representing the URI of the blocked resource. Example document.addEventListener(\"securitypolicyviolation\", (e) => { console.log(e.blockedURI);\n or  });",
        "type": "Content Security Policy"
    },
    "SecurityPolicyViolationEvent.columnNumber": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SecurityPolicyViolationEvent.columnNumber",
        "params": [],
        "path": "dom/securitypolicyviolationevent/columnnumber",
        "syntax": "let colNum = violationEventInstance.columnNumber; Value A number representing the column number where the violation occurred. Example document.addEventListener(\"securitypolicyviolation\", (e) => { console.log(e.columnNumber);\n or  });",
        "type": "Content Security Policy"
    },
    "SecurityPolicyViolationEvent.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SecurityPolicyViolationEvent.constructor",
        "params": [
            {
                "descr": "A DOMString representing the type of security policy violation that occurred.",
                "name": "type"
            },
            {
                "descr": "A dictionary object containing information about the properties of the SecurityPolicyViolationEvent to be constructed. ",
                "name": "eventInitDict Optional"
            }
        ],
        "path": "dom/securitypolicyviolationevent/securitypolicyviolationevent",
        "syntax": "let SPVEvt = new SecurityPolicyViolationEvent(type, eventInitDict);",
        "type": "Content Security Policy"
    },
    "SecurityPolicyViolationEvent.disposition": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SecurityPolicyViolationEvent.disposition",
        "params": [],
        "path": "dom/securitypolicyviolationevent/disposition",
        "syntax": "let disposition = violationEventInstance.disposition; Value A value defined in the SecurityPolicyViolationEventDisposition enum representing the URI of the blocked resource. Possible values are \"enforce\" or \"report\" Example document.addEventListener(\"securitypolicyviolation\", (e) => { console.log(e.disposition);\n or  });",
        "type": "Content Security Policy"
    },
    "SecurityPolicyViolationEvent.documentURI": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SecurityPolicyViolationEvent.documentURI",
        "params": [],
        "path": "dom/securitypolicyviolationevent/documenturi",
        "syntax": "let documentURI = violationEventInstance.documentURI; Value A USVString representing the URI of the document or worker in which the violation was found. Example document.addEventListener(\"securitypolicyviolation\", (e) => { console.log(e.documentURI);\n or  });",
        "type": "Content Security Policy"
    },
    "SecurityPolicyViolationEvent.effectiveDirective": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SecurityPolicyViolationEvent.effectiveDirective",
        "params": [],
        "path": "dom/securitypolicyviolationevent/effectivedirective",
        "syntax": "let effDir = violationEventInstance.effectiveDirective; Value A DOMString representing the directive whose enforcement uncovered the violation. Example document.addEventListener(\"securitypolicyviolation\", (e) => { console.log(e.effectiveDirective);\n or  });",
        "type": "Content Security Policy"
    },
    "SecurityPolicyViolationEvent.lineNumber": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SecurityPolicyViolationEvent.lineNumber",
        "params": [],
        "path": "dom/securitypolicyviolationevent/linenumber",
        "syntax": "let lineNumber = violationEventInstance.lineNumber; Value A number representing the line number at which the violation occurred. Example document.addEventListener(\"securitypolicyviolation\", (e) => { console.log(e.lineNumber);\n or  });",
        "type": "Content Security Policy"
    },
    "SecurityPolicyViolationEvent.originalPolicy": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SecurityPolicyViolationEvent.originalPolicy",
        "params": [],
        "path": "dom/securitypolicyviolationevent/originalpolicy",
        "syntax": "let origPolicy = violationEventInstance.originalPolicy; Value A DOMString representing the policy whose enforcement uncovered the violation. Example document.addEventListener(\"securitypolicyviolation\", (e) => { console.log(e.originalPolicy);\n or  });",
        "type": "Content Security Policy"
    },
    "SecurityPolicyViolationEvent.referrer": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SecurityPolicyViolationEvent.referrer",
        "params": [],
        "path": "dom/securitypolicyviolationevent/referrer",
        "syntax": "let referrer = violationEventInstance.referrer; Value A USVString representing the URL of the referrer of the violating resources. Example document.addEventListener(\"securitypolicyviolation\", (e) => { console.log(e.referrer);\n or  });",
        "type": "Content Security Policy"
    },
    "SecurityPolicyViolationEvent.sample": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SecurityPolicyViolationEvent.sample",
        "params": [],
        "path": "dom/securitypolicyviolationevent/sample",
        "syntax": "let sample = violationEventInstance.sample; Value A DOMString containing a sample of the resource that caused the violation, usually the first 40 characters. This will only be populated if the resource is an inline script, event handler, or style — external resources causing a violation will not generate a sample. Example document.addEventListener(\"securitypolicyviolation\", (e) => { console.log(e.sample);\n or  });",
        "type": "Content Security Policy"
    },
    "SecurityPolicyViolationEvent.sourceFile": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SecurityPolicyViolationEvent.sourceFile",
        "params": [],
        "path": "dom/securitypolicyviolationevent/sourcefile",
        "syntax": "let source = violationEventInstance.sourceFile; Value A USVString representing the URI of the document or worker in which the violation was found. Example document.addEventListener(\"securitypolicyviolation\", (e) => { console.log(e.sourceFile);\n or  });",
        "type": "Content Security Policy"
    },
    "SecurityPolicyViolationEvent.statusCode": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SecurityPolicyViolationEvent.statusCode",
        "params": [],
        "path": "dom/securitypolicyviolationevent/statuscode",
        "syntax": "let status = violationEventInstance.statusCode; Value A number representing the status code of the document or worker in which the violation occurred. Example document.addEventListener(\"securitypolicyviolation\", (e) => { console.log(e.statusCode);\n or  });",
        "type": "Content Security Policy"
    },
    "SecurityPolicyViolationEvent.violatedDirective": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SecurityPolicyViolationEvent.violatedDirective",
        "params": [],
        "path": "dom/securitypolicyviolationevent/violateddirective",
        "syntax": "let violatedDir = violationEventInstance.violatedDirective; Value A DOMString representing the directive whose enforcement uncovered the violation. Example document.addEventListener(\"securitypolicyviolation\", (e) => { console.log(e.violatedDirective);\n or  });",
        "type": "Content Security Policy"
    },
    "Selection": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Selection",
        "params": [
            {
                "descr": "Returns the Node in which the selection begins.",
                "name": "Selection.anchorNodeRead only"
            },
            {
                "descr": "Returns a number representing the offset of the selection's anchor within the anchorNode. ",
                "name": "Selection.anchorOffsetRead only"
            },
            {
                "descr": "Returns the Node in which the selection ends.",
                "name": "Selection.focusNodeRead only"
            },
            {
                "descr": "Returns a number representing the offset of the selection's anchor within the focusNode. ",
                "name": "Selection.focusOffsetRead only"
            },
            {
                "descr": "Returns a Boolean indicating whether the selection's start and end points are at the same position.",
                "name": "Selection.isCollapsedRead only"
            },
            {
                "descr": "Returns the number of ranges in the selection.",
                "name": "Selection.rangeCountRead only"
            },
            {
                "descr": "Returns a DOMString describing the type of the current selection.",
                "name": "Selection.typeRead only"
            },
            {
                "descr": "A Range object that will be added to the selection.",
                "name": "Selection.addRange()"
            },
            {
                "descr": "Collapses the current selection to a single point.",
                "name": "Selection.collapse()"
            },
            {
                "descr": "Collapses the selection to the end of the last range in the selection.",
                "name": "Selection.collapseToEnd()"
            },
            {
                "descr": "Collapses the selection to the start of the first range in the selection.",
                "name": "Selection.collapseToStart()"
            },
            {
                "descr": "Indicates if a certain node is part of the selection.",
                "name": "Selection.containsNode()"
            },
            {
                "descr": "Deletes the selection's content from the document.",
                "name": "Selection.deleteFromDocument()"
            },
            {
                "descr": "Removes all ranges from the selection. ",
                "name": "Selection.empty()"
            },
            {
                "descr": "Moves the focus of the selection to a specified point.",
                "name": "Selection.extend()"
            },
            {
                "descr": "Returns a Range object representing one of the ranges currently selected.",
                "name": "Selection.getRangeAt()"
            },
            {
                "descr": "Changes the current selection.",
                "name": "Selection.modify()"
            },
            {
                "descr": "Removes a range from the selection.",
                "name": "Selection.removeRange()"
            },
            {
                "descr": "Removes all ranges from the selection.",
                "name": "Selection.removeAllRanges()"
            },
            {
                "descr": "Adds all the children of the specified node to the selection.",
                "name": "Selection.selectAllChildren()"
            },
            {
                "descr": "Sets the selection to be a range including all or parts of two specified DOM nodes, and any content located between them.",
                "name": "Selection.setBaseAndExtent()"
            },
            {
                "descr": "Collapses the current selection to a single point. ",
                "name": "Selection.setPosition()"
            },
            {
                "descr": "Returns a string currently being represented by the selection object, i.e. ",
                "name": "Selection.toString()"
            },
            {
                "descr": "The anchor of a selection is the beginning point of the selection. ",
                "name": "anchor"
            },
            {
                "descr": "An editable element — i.e. an HTML element with contenteditable set on it, or the HTML child of a document that has designMode enabled.",
                "name": "Editing host"
            },
            {
                "descr": "The focus of a selection is the end point of the selection. ",
                "name": "focus of a selection"
            },
            {
                "descr": "A range is a contiguous part of a document. ",
                "name": "range"
            }
        ],
        "path": "dom/selection",
        "syntax": "contenteditable set on it, or the HTML child of a document that has designMode enabled. focus of a selection The focus of a selection is the end point of the selection. When making a selection with a mouse, the focus is where in the document the mouse button is released. As the user changes the selection using the mouse or the keyboard, the focus is the end of the selection that moves. Note: This is not the same as the focused element of the document, as returned by document.activeElement. range A range is a contiguous part of a document. A range can contain entire nodes as well as portions of nodes, such as a portion of a text node. A user will normally only select a single range at a time, but it's possible for a user to select multiple ranges (e.g. by using the Control key). A range can be retrieved from a selection as a range",
        "type": "Selection"
    },
    "Selection.addRange": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Selection.addRange",
        "params": [
            {
                "descr": "A Range object that will be added to the Selection.",
                "name": "range"
            }
        ],
        "path": "dom/selection/addrange",
        "syntax": "sel.addRange(range)",
        "type": "Selection"
    },
    "Selection.collapse": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Selection.collapse",
        "params": [
            {
                "descr": "The caret location will be within this node. ",
                "name": "node"
            },
            {
                "descr": "The offset in node to which the selection will be collapsed. ",
                "name": "offset Optional"
            }
        ],
        "path": "dom/selection/collapse",
        "syntax": "sel.collapse(node, offset);",
        "type": "Selection"
    },
    "Selection.collapseToEnd": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Selection.collapseToEnd",
        "params": [],
        "path": "dom/selection/collapsetoend",
        "syntax": "sel.collapseToEnd()",
        "type": "Selection"
    },
    "Selection.collapseToStart": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Selection.collapseToStart",
        "params": [],
        "path": "dom/selection/collapsetostart",
        "syntax": "sel.collapseToStart()",
        "type": "Selection"
    },
    "Selection.containsNode": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Selection.containsNode",
        "params": [
            {
                "descr": "The node that is being looked for in the selection.",
                "name": "node"
            },
            {
                "descr": "When true, containsNode() returns true when a part of the node is part of the selection. ",
                "name": "partialContainment Optional"
            }
        ],
        "path": "dom/selection/containsnode",
        "syntax": "sel.containsNode(node, partialContainment)",
        "type": "Selection"
    },
    "Selection.deleteFromDocument": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Selection.deleteFromDocument",
        "params": [],
        "path": "dom/selection/deletefromdocument",
        "syntax": "sel.deleteFromDocument()",
        "type": "Selection"
    },
    "Selection.extend": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Selection.extend",
        "params": [
            {
                "descr": "The node within which the focus will be moved.",
                "name": "node"
            },
            {
                "descr": "The offset position within node where the focus will be moved to. ",
                "name": "offset Optional"
            }
        ],
        "path": "dom/selection/extend",
        "syntax": "sel.extend(node, offset)",
        "type": "Selection"
    },
    "Selection.getRangeAt": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Selection.getRangeAt",
        "params": [
            {
                "descr": "The Range object that will be returned.",
                "name": "range"
            },
            {
                "descr": "The zero-based index of the range to return. ",
                "name": "index"
            }
        ],
        "path": "dom/selection/getrangeat",
        "syntax": "range = sel.getRangeAt(index)",
        "type": "Selection"
    },
    "Selection.rangeCount": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Selection.rangeCount",
        "params": [],
        "path": "dom/selection/rangecount",
        "syntax": "value = sel.rangeCount  Example The following example will show the rangeCount every second. Select text in the browser to see it change. HTML Content Open the console to see how many ranges are in the selection. In Gecko browsers, you can select multiple ranges across table cells by holding down Ctrl while dragging with the mouse. <table> <tr><td>a.1<td>a.2 <tr><td>b.1<td>b.2  JavaScript Content window.setInterval(function () { console.log(window.getSelection().rangeCount);\n or  }, 1000);",
        "type": "Selection"
    },
    "Selection.removeAllRanges": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Selection.removeAllRanges",
        "params": [],
        "path": "dom/selection/removeallranges",
        "syntax": "sel.removeAllRanges();",
        "type": "Selection"
    },
    "Selection.removeRange": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Selection.removeRange",
        "params": [
            {
                "descr": "A range object that will be removed to the selection.",
                "name": "range"
            }
        ],
        "path": "dom/selection/removerange",
        "syntax": "sel.removeRange(range)",
        "type": "Selection"
    },
    "Selection.selectAllChildren": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Selection.selectAllChildren",
        "params": [
            {
                "descr": "All children ofparentNode will be selected.parentNode itself is not part of the selection.",
                "name": "parentNode"
            }
        ],
        "path": "dom/selection/selectallchildren",
        "syntax": "sel.selectAllChildren(parentNode)",
        "type": "Selection"
    },
    "Selection.setBaseAndExtent": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Selection.setBaseAndExtent",
        "params": [
            {
                "descr": "The node at the start of the selection.",
                "name": "anchorNode"
            },
            {
                "descr": "The number of child nodes from the start of the anchor node that should be excluded from the selection. ",
                "name": "anchorOffset"
            },
            {
                "descr": "The node at the end of the selection.",
                "name": "focusNode"
            },
            {
                "descr": "The number of child nodes from the start of the focus node that should be included in the selection. ",
                "name": "focusOffset"
            }
        ],
        "path": "dom/selection/setbaseandextent",
        "syntax": "sel.setBaseAndExtent(anchorNode,anchorOffset,focusNode,focusOffset)",
        "type": "Selection"
    },
    "Selection.toString": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Selection.toString",
        "params": [],
        "path": "dom/selection/tostring",
        "syntax": "str = sel.toString()",
        "type": "Selection"
    },
    "Selection.type": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Selection.type",
        "params": [],
        "path": "dom/selection/type",
        "syntax": "value = sel.type  Value A DOMString describing the type of the current selection. Possible values are:   None: No selection has currently been made.  Caret: The selection is collapsed (i.e. the caret is placed on some text, but no range has been selected).  Range",
        "type": "Selection"
    },
    "Sensor.onactivate": {
        "descr": "The onactivate EventHandler is called when one of the Sensor interface's child interfaces becomes active.",
        "name": "Sensor.onactivate",
        "params": [],
        "path": "dom/sensor/onactivate",
        "syntax": "sensorInstance.onactivate = function sensorInstance.addEventListener('activate', function() { ... })",
        "type": "Sensors"
    },
    "Sensor.onerror": {
        "descr": "The onerror EventHandler is called when an error occurs on one of the child interfaces of the Sensor interface.",
        "name": "Sensor.onerror",
        "params": [],
        "path": "dom/sensor/onerror",
        "syntax": "sensorInstance.onerror = function sensorInstance.addEventListener('error', function() { ... })",
        "type": "Sensors"
    },
    "Sensor.onreading": {
        "descr": "The onreading EventHandler is called when a reading is taken on one of the child interfaces of the Sensor interface.",
        "name": "Sensor.onreading",
        "params": [],
        "path": "dom/sensor/onreading",
        "syntax": "sensorInstance.onreading = function sensorInstance.addEventListener('reading', function() { ... })",
        "type": "Sensors"
    },
    "Sensor.start": {
        "descr": "The start method activates one of the sensors based on Sensor.",
        "name": "Sensor.start",
        "params": [],
        "path": "dom/sensor/start",
        "syntax": "Sensor.start()",
        "type": "Sensors"
    },
    "Sensor.stop": {
        "descr": "The stop method of the Sensor interface deactivates the current sensor.",
        "name": "Sensor.stop",
        "params": [],
        "path": "dom/sensor/stop",
        "syntax": "Sensor.stop()",
        "type": "Sensors"
    },
    "SensorErrorEvent.constructor": {
        "descr": "The SensorErrorEvent constructor creates a new SensorErrorEvent object which provides information about errors thrown by any of the interfaces based on Sensor.",
        "name": "SensorErrorEvent.constructor",
        "params": [
            {
                "descr": "Will always be 'SensorErrorEvent'.",
                "name": "type"
            },
            {
                "descr": "Currently only one option is supported:   error: An instance of DOMException.",
                "name": "options Optional"
            }
        ],
        "path": "dom/sensorerrorevent/sensorerrorevent",
        "syntax": "sensorErrorEvent = new SensorErrorEvent(type, {error: domException});",
        "type": "Sensors"
    },
    "Server-sent events.Using server-sent events": {
        "descr": "Developing a web application that uses server-sent events is quite easy. You'll need a bit of code on the server to stream the events to the web application, but the client side of things works almost identically for handling any other type of event.",
        "name": "Server-sent events.Using server-sent events",
        "params": [
            {
                "descr": "A string identifying the type of event described. ",
                "name": "event"
            },
            {
                "descr": "The data field for the message. ",
                "name": "data"
            },
            {
                "descr": "The event ID to set the EventSource object's last event ID value.",
                "name": "id"
            },
            {
                "descr": "The reconnection time to use when attempting to send the event. ",
                "name": "retry"
            }
        ],
        "path": "dom/server-sent_events/using_server-sent_events",
        "syntax": "message event: evtSource.onmessage = function(e) { var newElement = document.createElement(\"li\");\n or  var eventList = document.getElementById('list');\n or  newElement.innerHTML = \"message: \" + e.data; eventList.appendChild(newElement);\n or  });",
        "type": "Server-Sent Events"
    },
    "Service Worker API: Using Service Workers": {
        "descr": "This article provides information on getting started with service workers, including basic architecture, registering a service worker, the install and activation process for a new service worker, updating your service worker, cache control and custom responses, all in the context of a simple app with offline functionality.",
        "name": "Service Worker API: Using Service Workers",
        "params": [],
        "path": "dom/service_worker_api/using_service_workers",
        "syntax": "about:config and set dom.serviceWorkers.enabled to true; restart browser.  Chrome Canary: Go to chrome://flags and turn on experimental-web-platform-features; restart browser (note that some features are now enabled by default in Chrome.)  Opera: Go to opera://flags",
        "type": "Web Workers"
    },
    "ServiceWorker": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ServiceWorker",
        "params": [
            {
                "descr": "Returns the ServiceWorker serialized script URL defined as part of ServiceWorkerRegistration. ",
                "name": "ServiceWorker.scriptURL Read only"
            },
            {
                "descr": "Returns the state of the service worker. ",
                "name": "ServiceWorker.state Read only"
            },
            {
                "descr": "An EventListener property called whenever an event of type statechange is fired; it is basically fired anytime the ServiceWorker.state changes.",
                "name": "ServiceWorker.onstatechange Read only"
            }
        ],
        "path": "dom/serviceworker",
        "syntax": "Working Draft Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari     Basic support   40  17   17   16Disabled   Disabled From version 16: this feature is behind the Enable service workers preference.    44   44   Service workers (and Push) have been disabled in the Firefox 45 and 52 Extended Support Releases (ESR.)    No  27  11.1    scriptURL",
        "type": "Service Workers"
    },
    "ServiceWorker.onstatechange": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ServiceWorker.onstatechange",
        "params": [],
        "path": "dom/serviceworker/onstatechange",
        "syntax": "ServiceWorker.onstatechange = function(statechangeevent) { ... } ServiceWorker.addEventListener('statechange', function(statechangeevent) { ... } )",
        "type": "Service Workers"
    },
    "ServiceWorker.scriptURL": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ServiceWorker.scriptURL",
        "params": [],
        "path": "dom/serviceworker/scripturl",
        "syntax": "someURL = ServiceWorker.scriptURL  Value A USVString (see the WebIDL definition of USVString.)",
        "type": "Service Workers"
    },
    "ServiceWorker.state": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ServiceWorker.state",
        "params": [],
        "path": "dom/serviceworker/state",
        "syntax": "someURL = ServiceWorker.state  Value A ServiceWorkerState definition (see the spec.)",
        "type": "Service Workers"
    },
    "ServiceWorkerContainer.controller": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ServiceWorkerContainer.controller",
        "params": [],
        "path": "dom/serviceworkercontainer/controller",
        "syntax": "var myController = navigator.serviceWorker.controller;  Value A ServiceWorker object. Example if ('serviceWorker' in navigator) { // Do a one-off check to see if a service worker's in control. if (navigator.serviceWorker.controller) { console.log('This page is currently controlled by:', navigator.serviceWorker.controller);\n or  } else { console.log('This page is not currently controlled ' + 'by a service worker.');\n or  } } else { console.log('Service workers are not supported.');\n or  });",
        "type": "Service Workers"
    },
    "ServiceWorkerContainer.getRegistration": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ServiceWorkerContainer.getRegistration",
        "params": [
            {
                "descr": "A unique identifier for a service worker registration — the scope URL of the registration object you want to return. ",
                "name": "scope Optional"
            }
        ],
        "path": "dom/serviceworkercontainer/getregistration",
        "syntax": "ServiceWorkerContainer.getRegistration(scope).then(function(ServiceWorkerRegistration) { ... });",
        "type": "Service Workers"
    },
    "ServiceWorkerContainer.getRegistrations": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ServiceWorkerContainer.getRegistrations",
        "params": [],
        "path": "dom/serviceworkercontainer/getregistrations",
        "syntax": "ServiceWorkerContainer.getRegistrations().then(function(ServiceWorkerRegistrations) { ... });",
        "type": "Service Workers"
    },
    "ServiceWorkerContainer.oncontrollerchange": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ServiceWorkerContainer.oncontrollerchange",
        "params": [],
        "path": "dom/serviceworkercontainer/oncontrollerchange",
        "syntax": "ServiceWorkerContainer.oncontrollerchange = function(controllerchangeevent) { ... }",
        "type": "Service Workers"
    },
    "ServiceWorkerContainer.onerror": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ServiceWorkerContainer.onerror",
        "params": [],
        "path": "dom/serviceworkercontainer/onerror",
        "syntax": "ServiceWorkerContainer.onerror = function(errorevent) { ... }",
        "type": "Service Workers"
    },
    "ServiceWorkerContainer.onmessage": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ServiceWorkerContainer.onmessage",
        "params": [],
        "path": "dom/serviceworkercontainer/onmessage",
        "syntax": "ServiceWorkerContainer.onmessage = function(messageevent) { ... }",
        "type": "Service Workers"
    },
    "ServiceWorkerContainer.ready": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ServiceWorkerContainer.ready",
        "params": [],
        "path": "dom/serviceworkercontainer/ready",
        "syntax": "Syntax navigator.serviceWorker.ready.then(function(serviceWorkerRegistration) { ... });",
        "type": "Service Workers"
    },
    "ServiceWorkerContainer.register": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ServiceWorkerContainer.register",
        "params": [
            {
                "descr": "The URL of the service worker script. ",
                "name": "scriptURL"
            },
            {
                "descr": "An object containing registration options. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/serviceworkercontainer/register",
        "syntax": "ServiceWorkerContainer.register(scriptURL, options) .then(function(ServiceWorkerRegistration) { ... });",
        "type": "Service Workers"
    },
    "ServiceWorkerContainer.startMessages": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ServiceWorkerContainer.startMessages",
        "params": [],
        "path": "dom/serviceworkercontainer/startmessages",
        "syntax": "ServiceWorkerContainer.startMessages();",
        "type": "Service Workers"
    },
    "ServiceWorkerGlobalScope.caches": {
        "descr": "The ServiceWorkerGlobalScope.caches read-only property returns the CacheStorage object associated with the service worker.",
        "name": "ServiceWorkerGlobalScope.caches",
        "params": [],
        "path": "dom/serviceworkerglobalscope/caches",
        "syntax": "var myCacheStorage = self.caches;  Value A CacheStorage object. Specifications    Specification Status Comment   Service WorkersThe definition of 'ServiceWorkerGlobalScope.caches' in that specification. Working Draft Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   40  ?   44   44   Service workers (and Push) have been disabled in the Firefox 45 and 52 Extended Support Releases (ESR).    No  24  11.1       Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   40  40  ?   44  24  11.1  4.0    See also",
        "type": "Service Workers"
    },
    "ServiceWorkerGlobalScope.clients": {
        "descr": "The clients read-only property of the ServiceWorkerGlobalScope interface returns the Clients object associated with the service worker.",
        "name": "ServiceWorkerGlobalScope.clients",
        "params": [],
        "path": "dom/serviceworkerglobalscope/clients",
        "syntax": "swClients = self.clients  Value The Clients object associated with the specific worker. Specifications    Specification Status Comment   Service WorkersThe definition of 'ServiceWorkerRegistration.clients' in that specification. Working Draft Initial definition.     Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   40  ?   44   44   Service workers (and Push) have been disabled in the Firefox 45 and 52 Extended Support Releases (ESR).    No  24  11.1       Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   40  40  ?   44  24  11.1  4.0    See also",
        "type": "Service Workers"
    },
    "ServiceWorkerGlobalScope.onactivate": {
        "descr": "The onactivate property of the ServiceWorkerGlobalScope interface is an event handler fired whenever an activate event occurs (when the service worker activates). This happens after installation, when the page to be controlled by the service worker refreshes.",
        "name": "ServiceWorkerGlobalScope.onactivate",
        "params": [],
        "path": "dom/serviceworkerglobalscope/onactivate",
        "syntax": "ServiceWorkerGlobalScope.onactivate = function(event) { ... }; ServiceWorkerGlobalScope.addEventListener('activate', function(event) { ... });",
        "type": "Service Workers"
    },
    "ServiceWorkerGlobalScope.onfetch": {
        "descr": "The onfetch property of the ServiceWorkerGlobalScope interface is an event handler fired whenever a fetch event occurs (usually when the ServiceWorkerGlobalScope.fetch method is called.)",
        "name": "ServiceWorkerGlobalScope.onfetch",
        "params": [],
        "path": "dom/serviceworkerglobalscope/onfetch",
        "syntax": "ServiceWorkerGlobalScope.onfetch = function(FetchEvent) { ... }",
        "type": "Service Workers"
    },
    "ServiceWorkerGlobalScope.oninstall": {
        "descr": "The oninstall property of the ServiceWorkerGlobalScope interface is an event handler fired whenever an install event occurs (when the service worker installs). This happens before activation.",
        "name": "ServiceWorkerGlobalScope.oninstall",
        "params": [],
        "path": "dom/serviceworkerglobalscope/oninstall",
        "syntax": "ServiceWorkerGlobalScope.oninstall = function(event) { ... }; ServiceWorkerGlobalScope.addEventListener('install', function(event) { ... });",
        "type": "Service Workers"
    },
    "ServiceWorkerGlobalScope.onmessage": {
        "descr": "The ServiceWorkerGlobalScope.onmessage event of the ServiceWorkerGlobalScope interface is called whenever incoming messages are received.",
        "name": "ServiceWorkerGlobalScope.onmessage",
        "params": [],
        "path": "dom/serviceworkerglobalscope/onmessage",
        "syntax": "ServiceWorkerGlobalScope.onmessage = function(MessageEvent) { ... }",
        "type": "Service Workers"
    },
    "ServiceWorkerGlobalScope.onnotificationclick": {
        "descr": "The ServiceWorkerGlobalScope.onnotificationclick property is an event handler called whenever the notificationclick event is dispatched on the ServiceWorkerGlobalScope object, that is when a user clicks on a displayed notification spawned by ServiceWorkerRegistration.showNotification().",
        "name": "ServiceWorkerGlobalScope.onnotificationclick",
        "params": [],
        "path": "dom/serviceworkerglobalscope/onnotificationclick",
        "syntax": "ServiceWorkerGlobalScope.onnotificationclick = function(NotificationEvent) { ... };",
        "type": "Service Workers"
    },
    "ServiceWorkerGlobalScope.onnotificationclose": {
        "descr": "The ServiceWorkerGlobalScope.onnotificationclose property is an event handler called whenever the notificationclose event is dispatched on the ServiceWorkerGlobalScope object, that is when a user closes a displayed notification spawned by ServiceWorkerRegistration.showNotification().",
        "name": "ServiceWorkerGlobalScope.onnotificationclose",
        "params": [],
        "path": "dom/serviceworkerglobalscope/onnotificationclose",
        "syntax": "ServiceWorkerGlobalScope.onnotificationclose = function(NotificationEvent) { ... }; ServiceWorkerGlobalScope.addEventListener('notificationclose', function(NotificationEvent) { ... });",
        "type": "Service Workers"
    },
    "ServiceWorkerGlobalScope.onpush": {
        "descr": "The ServiceWorkerGlobalScope.onpush event of the ServiceWorkerGlobalScope interface is fired whenever a push message is received by a service worker via a push server.",
        "name": "ServiceWorkerGlobalScope.onpush",
        "params": [],
        "path": "dom/serviceworkerglobalscope/onpush",
        "syntax": "ServiceWorkerGlobalScope.onpush = function(PushEvent) { ... } self.addEventListener('push', function(PushEvent) { ... })",
        "type": "Service Workers"
    },
    "ServiceWorkerGlobalScope.onpushsubscriptionchange": {
        "descr": "The ServiceWorkerGlobalScope.onpushsubscriptionchange event of the ServiceWorkerGlobalScope interface is fired to indicate a change in push subscription that was triggered outside the application's control, e.g. when browser refresh the push subscription.",
        "name": "ServiceWorkerGlobalScope.onpushsubscriptionchange",
        "params": [],
        "path": "dom/serviceworkerglobalscope/onpushsubscriptionchange",
        "syntax": "ServiceWorkerGlobalScope.onpushsubscriptionchange = function() { ... } self.addEventListener('pushsubscriptionchange', function() { ... })",
        "type": "Service Workers"
    },
    "ServiceWorkerGlobalScope.onsync": {
        "descr": "The ServiceWorkerGlobalScope.onsync event of the ServiceWorkerGlobalScope interface is fired whenever a SyncEvent event occurs. This is triggered when a call to SyncManager.register is made from a service worker client page. The attempt to sync is made either immediately if the network is available or as soon as the network becomes available.",
        "name": "ServiceWorkerGlobalScope.onsync",
        "params": [],
        "path": "dom/serviceworkerglobalscope/onsync",
        "syntax": "ServiceWorkerGlobalScope.onsync = function(SyncEvent) { ... } self.addEventListener('sync', function(SyncEvent) { ... })",
        "type": "Service Workers"
    },
    "ServiceWorkerGlobalScope.registration": {
        "descr": "The registration read-only property of the ServiceWorkerGlobalScope interface returns a reference to the ServiceWorkerRegistration object, which represents the service worker's registration.",
        "name": "ServiceWorkerGlobalScope.registration",
        "params": [],
        "path": "dom/serviceworkerglobalscope/registration",
        "syntax": "serviceWorkerRegistration = self.registration  Value A ServiceWorkerRegistration object. Specifications    Specification Status Comment   Service WorkersThe definition of 'ServiceWorkerGlobalScope.registration' in that specification. Working Draft Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   40  ?   44   44   Service workers (and Push) have been disabled in the Firefox 45 and 52 Extended Support Releases (ESR).    No  24  11.1       Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   40  40  ?   44  24  11.1  4.0    See also",
        "type": "Service Workers"
    },
    "ServiceWorkerGlobalScope.skipWaiting": {
        "descr": "The ServiceWorkerGlobalScope.skipWaiting() method of the ServiceWorkerGlobalScope forces the waiting service worker to become the active service worker.",
        "name": "ServiceWorkerGlobalScope.skipWaiting",
        "params": [],
        "path": "dom/serviceworkerglobalscope/skipwaiting",
        "syntax": "ServiceWorkerGlobalScope.skipWaiting().then(function() { //Do something });",
        "type": "Service Workers"
    },
    "ServiceWorkerMessageEvent.constructor": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "ServiceWorkerMessageEvent.constructor",
        "params": [
            {
                "descr": "A DOMString that defines the type of the message event being created.",
                "name": "type"
            },
            {
                "descr": "An initialisation object, which should contain the following parameters:   data: The event's data — this can be any type. ",
                "name": "init Optional"
            }
        ],
        "path": "dom/serviceworkermessageevent/serviceworkermessageevent",
        "syntax": "var mySWME = new ServiceWorkerMessageEvent(type, init);",
        "type": "Service Workers"
    },
    "ServiceWorkerRegistration.active": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ServiceWorkerRegistration.active",
        "params": [],
        "path": "dom/serviceworkerregistration/active",
        "syntax": "sw = ServiceWorker.active  Value A ServiceWorker object, if it is currently in an activating or activated state. Specifications    Specification Status Comment   Service WorkersThe definition of 'ServiceWorkerRegistration.active' in that specification. Working Draft Initial definition.     Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   40  17   17   16Disabled   Disabled From version 16: this feature is behind the Enable service workers preference.    44   44   Service workers (and Push) have been disabled in the Firefox 45 and 52 Extended Support Releases (ESR).    No  27  11.1       Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   40  40  ?   44  27  11.1  4.0    See also",
        "type": "Service Workers"
    },
    "ServiceWorkerRegistration.getNotifications": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ServiceWorkerRegistration.getNotifications",
        "params": [
            {
                "descr": "An object containing options to filter the notifications returned. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/serviceworkerregistration/getnotifications",
        "syntax": "​ServiceWorkerRegistration.getNotifications(options) .then(function(NotificationsList) { ... });",
        "type": "Service Workers"
    },
    "ServiceWorkerRegistration.installing": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ServiceWorkerRegistration.installing",
        "params": [],
        "path": "dom/serviceworkerregistration/installing",
        "syntax": "sw = ServiceWorker.installing  Value A ServiceWorker object, if it is currently in an installing state. Specifications    Specification Status Comment   Service WorkersThe definition of 'ServiceWorkerRegistration.installing' in that specification. Working Draft Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   40  17   17   16Disabled   Disabled From version 16: this feature is behind the Enable service workers preference.    44   44   Service workers (and Push) have been disabled in the Firefox 45 and 52 Extended Support Releases (ESR).    No  27  11.1       Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   40  40  ?   44  27  11.1  4.0    See also",
        "type": "Service Workers"
    },
    "ServiceWorkerRegistration.navigationPreload": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ServiceWorkerRegistration.navigationPreload",
        "params": [],
        "path": "dom/serviceworkerregistration/navigationpreload",
        "syntax": "var navigationPreloadManager = serviceWorkerRegistration.navigationPreload Value An instance of NavigationPreloadManager. Specifications    Specification Status Comment   Service WorkersThe definition of 'navigationPreload' in that specification. Working Draft Initial definition.    Browser CompatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   59  17   17   16Disabled   Disabled From version 16: this feature is behind the Enable service workers preference.    44   44   Service workers (and Push) have been disabled in the Firefox 45 and 52 Extended Support Releases (ESR).    No  46  11.1       Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   59  59  ?   44  46  11.1  4.0     Edit this page on MDN",
        "type": "Service Workers"
    },
    "ServiceWorkerRegistration.onupdatefound": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ServiceWorkerRegistration.onupdatefound",
        "params": [],
        "path": "dom/serviceworkerregistration/onupdatefound",
        "syntax": "ServiceWorkerRegistration.onupdatefound = function() { ... };",
        "type": "Service Workers"
    },
    "ServiceWorkerRegistration.pushManager": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ServiceWorkerRegistration.pushManager",
        "params": [],
        "path": "dom/serviceworkerregistration/pushmanager",
        "syntax": "myPushManager = ServiceWorker.pushManager  Value A PushManager object. Examples this.onpush = function(event) { console.log(event.data);\n or  // From here we can write the data to IndexedDB, send it to any open // windows, display a notification, etc. } navigator.serviceWorker.register('serviceworker.js').then( function(serviceWorkerRegistration) { serviceWorkerRegistration.pushManager.subscribe().then( function(pushSubscription) { console.log(pushSubscription.subscriptionId);\n or  console.log(pushSubscription.endpoint);\n or  // The push subscription details needed by the application // server are now available, and can be sent to it using, // for example, an XMLHttpRequest. }, function(error) { // During development it often helps to log errors to the // console. In a production environment it might make sense to // also report information about errors back to the // application server. console.log(error);\n or  } );\n or  });",
        "type": "Service Workers"
    },
    "ServiceWorkerRegistration.scope": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ServiceWorkerRegistration.scope",
        "params": [],
        "path": "dom/serviceworkerregistration/scope",
        "syntax": "swScope = ServiceWorkerRegistration.scope; Specifications    Specification Status Comment   Service WorkersThe definition of 'ServiceWorkerRegistration.scope' in that specification. Working Draft Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   40  17   17   16Disabled   Disabled From version 16: this feature is behind the Enable service workers preference.    44   44   Service workers (and Push) have been disabled in the Firefox 45 and 52 Extended Support Releases (ESR).    No  27  No       Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   40  40  ?   44  27  No  4.0    See also",
        "type": "Service Workers"
    },
    "ServiceWorkerRegistration.showNotification": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ServiceWorkerRegistration.showNotification",
        "params": [
            {
                "descr": "The title that must be shown within the notification",
                "name": "title"
            },
            {
                "descr": "An object that allows configuring the notification. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/serviceworkerregistration/shownotification",
        "syntax": "​ServiceWorkerRegistration.showNotification(title, [options]).then(function(NotificationEvent) { ... });",
        "type": "Service Workers"
    },
    "ServiceWorkerRegistration.unregister": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ServiceWorkerRegistration.unregister",
        "params": [],
        "path": "dom/serviceworkerregistration/unregister",
        "syntax": "ServiceWorkerRegistration.unregister().then(function(boolean) { });",
        "type": "Service Workers"
    },
    "ServiceWorkerRegistration.update": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ServiceWorkerRegistration.update",
        "params": [],
        "path": "dom/serviceworkerregistration/update",
        "syntax": "ServiceWorkerRegistration.update();",
        "type": "Service Workers"
    },
    "ServiceWorkerRegistration.waiting": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "ServiceWorkerRegistration.waiting",
        "params": [],
        "path": "dom/serviceworkerregistration/waiting",
        "syntax": "sw = ServiceWorker.waiting  Value A ServiceWorker object, if it is currently in an installed state. Specifications    Specification Status Comment   Service WorkersThe definition of 'ServiceWorkerRegistration.waiting' in that specification. Working Draft Initial definition.     Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   40  17   17   16Disabled   Disabled From version 16: this feature is behind the Enable service workers preference.    44   44   Service workers (and Push) have been disabled in the Firefox 45 and 52 Extended Support Releases (ESR).    No  27  No       Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   40  40  ?   44  27  No  4.0    See also",
        "type": "Service Workers"
    },
    "Set": {
        "descr": "The Set object lets you store unique values of any type, whether primitive values or object references.",
        "name": "Set",
        "params": [
            {
                "descr": "If an iterable object is passed, all of its elements will be added to the new Set. ",
                "name": "iterable"
            },
            {
                "descr": "The value of the length property is 0.",
                "name": "Set.length"
            },
            {
                "descr": "The constructor function that is used to create derived objects.",
                "name": "get Set[@@species]"
            },
            {
                "descr": "Represents the prototype for the Set constructor. ",
                "name": "Set.prototype"
            },
            {
                "descr": "Returns the function that created an instance's prototype. ",
                "name": "Set.prototype.constructor"
            },
            {
                "descr": "Returns the number of values in the Set object.",
                "name": "Set.prototype.size"
            },
            {
                "descr": "Appends a new element with the given value to the Set object. ",
                "name": "Set.prototype.add(value)"
            },
            {
                "descr": "Removes all elements from the Set object.",
                "name": "Set.prototype.clear()"
            },
            {
                "descr": "Removes the element associated to the value and returns the value that Set.prototype.has(value) would have previously returned. ",
                "name": "Set.prototype.delete(value)"
            },
            {
                "descr": "Returns a new Iterator object that contains[value, value] for each element in the Set object, in insertion order. ",
                "name": "Set.prototype.entries()"
            },
            {
                "descr": "Calls callbackFn once for each value present in the Set object, in insertion order. ",
                "name": "Set.prototype.forEach(callbackFn[, thisArg])"
            },
            {
                "descr": "Returns a boolean asserting whether an element is present with the given value in the Set object or not.",
                "name": "Set.prototype.has(value)"
            },
            {
                "descr": "Is the same function as the values() function and returns a new Iterator object that contains the values for each element in the Set object in insertion order.",
                "name": "Set.prototype.keys()"
            },
            {
                "descr": "Returns a new Iterator object that contains the values for each element in the Set object in insertion order.",
                "name": "Set.prototype.values()"
            },
            {
                "descr": "Returns a new Iterator object that contains the values for each element in the Set object in insertion order.",
                "name": "Set.prototype[@@iterator]()"
            }
        ],
        "path": "javascript/global_objects/set",
        "syntax": "new Set([iterable]);",
        "type": "Set"
    },
    "Set.@@species": {
        "descr": "The Set[@@species] accessor property returns the Set constructor.",
        "name": "Set.@@species",
        "params": [],
        "path": "javascript/global_objects/set/@@species",
        "syntax": "Set[Symbol.species]  Description The species accessor property returns the default constructor for Set objects. Subclass constructors may over-ride it to change the constructor assignment. Examples The species property returns the default constructor function, which is the Set constructor for Set objects: Set[Symbol.species]; // function Set()",
        "type": "Set"
    },
    "ShadowRoot.host": {
        "descr": "The host read-only property of the ShadowRoot returns a reference to the DOM element the ShadowRoot is attached to.",
        "name": "ShadowRoot.host",
        "params": [],
        "path": "dom/shadowroot/host",
        "syntax": "var element = shadowRoot.host Value A DOM Element. Examples let customElem = document.querySelector('my-shadow-dom-element');\n or  let shadow = customElem.shadowRoot; ... // return the original host element sometime later let hostElem = shadow.host;);",
        "type": "Shadow DOM"
    },
    "ShadowRoot.mode": {
        "descr": "The mode property of the ShadowRoot specifies its mode — either open or closed. This defines whether or not the shadow root's internal features are accessible from JavaScript.",
        "name": "ShadowRoot.mode",
        "params": [],
        "path": "dom/shadowroot/mode",
        "syntax": "var mode = shadowRoot.mode Value A value defined in the ShadowRootMode enum — either open or closed. Examples let customElem = document.querySelector('my-shadow-dom-element');\n or  let shadow = customElem.shadowRoot; // Another way to check whether the shadow root is open; it will return null if not if(shadow) { // If it is open, close it to stop people stealing our secrets! shadow.mode = 'closed'; });",
        "type": "Shadow DOM"
    },
    "SharedArrayBuffer": {
        "descr": "The SharedArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer, similar to the ArrayBuffer object, but in a way that they can be used to create views on shared memory. Unlike an ArrayBuffer, a SharedArrayBuffer cannot become detached.",
        "name": "SharedArrayBuffer",
        "params": [
            {
                "descr": "The size, in bytes, of the array buffer to create.",
                "name": "length"
            },
            {
                "descr": "The SharedArrayBuffer constructor's length property whose value is 1.",
                "name": "SharedArrayBuffer.length"
            },
            {
                "descr": "Allows the addition of properties to all SharedArrayBuffer objects.",
                "name": "SharedArrayBuffer.prototype"
            },
            {
                "descr": "Specifies the function that creates an object's prototype. ",
                "name": "SharedArrayBuffer.prototype.constructor"
            },
            {
                "descr": "The size, in bytes, of the array. ",
                "name": "SharedArrayBuffer.prototype.byteLength Read only"
            },
            {
                "descr": "Returns a new SharedArrayBuffer whose contents are a copy of this SharedArrayBuffer's bytes from begin, inclusive, up to end, exclusive. ",
                "name": "SharedArrayBuffer.prototype.slice(begin, end)"
            }
        ],
        "path": "javascript/global_objects/sharedarraybuffer",
        "syntax": "new SharedArrayBuffer(length)",
        "type": "SharedArrayBuffer"
    },
    "SharedArrayBuffer.prototype": {
        "descr": "The SharedArrayBuffer.prototype property represents the prototype for the SharedArrayBuffer object.",
        "name": "SharedArrayBuffer.prototype",
        "params": [
            {
                "descr": "Specifies the function that creates an object's prototype. ",
                "name": "SharedArrayBuffer.prototype.constructor"
            },
            {
                "descr": "The size, in bytes, of the array. ",
                "name": "SharedArrayBuffer.prototype.byteLength Read only"
            },
            {
                "descr": "Returns a new SharedArrayBuffer whose contents are a copy of this SharedArrayBuffer's bytes from begin, inclusive, up to end, exclusive. ",
                "name": "SharedArrayBuffer.prototype.slice(begin, end)"
            }
        ],
        "path": "javascript/global_objects/sharedarraybuffer/prototype",
        "syntax": "javascript.options.shared_memory preference (needs to be set to true). To change preferences in Firefox, visit about:config. 55 — 57  46 — 55Disabled   Disabled From version 46 until version 55 (exclusive): this feature is behind the javascript.options.shared_memory",
        "type": "SharedArrayBuffer"
    },
    "SharedWorker.constructor": {
        "descr": "The SharedWorker() constructor creates a SharedWorker object that executes the script at the specified URL. This script must obey the same-origin policy.",
        "name": "SharedWorker.constructor",
        "params": [
            {
                "descr": "A DOMString representing the URL of the script the worker will execute. ",
                "name": "aURL"
            },
            {
                "descr": "A DOMString specifying an identifying name for the SharedWorkerGlobalScope representing the scope of the worker, which is mainly useful for debugging purposes.",
                "name": "name Optional"
            },
            {
                "descr": "An object containing option properties that can set when creating the object instance. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/sharedworker/sharedworker",
        "syntax": "DOMException of type SECURITY_ERR is thrown.  Note: there is disagreement among browser manufacturers about whether a data URI is of the same origin or not. Although Gecko 10.0 (Firefox 10.0 / Thunderbird 10.0 / SeaMonkey 2.7) and later accept data URIs, that's not the case in all other browsers.",
        "type": "Web Workers"
    },
    "SharedWorker.port": {
        "descr": "The port property of the SharedWorker interface returns a MessagePort object used to communicate and control the shared worker.",
        "name": "SharedWorker.port",
        "params": [],
        "path": "dom/sharedworker/port",
        "syntax": "myWorker.port; Value A MessagePort object. Example The following code snippet shows creation of a SharedWorker object using the SharedWorker()",
        "type": "Web Workers"
    },
    "SharedWorkerGlobalScope.close": {
        "descr": "The close() method of the SharedWorkerGlobalScope interface discards any tasks queued in the SharedWorkerGlobalScope's event loop, effectively closing this particular scope.",
        "name": "SharedWorkerGlobalScope.close",
        "params": [],
        "path": "dom/sharedworkerglobalscope/close",
        "syntax": "self.close();",
        "type": "Web Workers"
    },
    "SharedWorkerGlobalScope.name": {
        "descr": "The name read-only property of the SharedWorkerGlobalScope interface returns the name that the SharedWorker was (optionally) given when it was created. This is the name that the SharedWorker() constructor can pass to get a reference to the SharedWorkerGlobalScope.",
        "name": "SharedWorkerGlobalScope.name",
        "params": [],
        "path": "dom/sharedworkerglobalscope/name",
        "syntax": "var nameObj = self.name; Value A DOMString. Example If a shared worker is created using a constructor with a name option: var myWorker = new SharedWorker(\"worker.js\", { name : \"mySharedWorker\" });",
        "type": "Web Workers"
    },
    "SharedWorkerGlobalScope.onconnect": {
        "descr": "The onconnect property of the SharedWorkerGlobalScope interface is an EventHandler representing the code to be called when the connect event is raised — that is, when a MessagePort connection is opened between the associated SharedWorker and the main thread.",
        "name": "SharedWorkerGlobalScope.onconnect",
        "params": [],
        "path": "dom/sharedworkerglobalscope/onconnect",
        "syntax": "onconnect = function() { ... };",
        "type": "Web Workers"
    },
    "Slotable.assignedSlot": {
        "descr": "The assignedSlot read-only property of the Slotable interface returns an HTMLSlotElement representing the <slot> element the node is inserted in.",
        "name": "Slotable.assignedSlot",
        "params": [],
        "path": "dom/slotable/assignedslot",
        "syntax": "var slotElement = elementInstance.assignedSlot Value An HTMLSlotElement instance, or null if the element is not assigned to a slot, or if the associated shadow root was attached with its mode set to closed (see Element.attachShadow for further details).",
        "type": "Miscellaneous"
    },
    "SourceBuffer.abort": {
        "descr": "Draft This page is not complete.",
        "name": "SourceBuffer.abort",
        "params": [],
        "path": "dom/sourcebuffer/abort",
        "syntax": "sourceBuffer.abort();",
        "type": "Media"
    },
    "SourceBuffer.appendBuffer": {
        "descr": "Draft This page is not complete.",
        "name": "SourceBuffer.appendBuffer",
        "params": [
            {
                "descr": "A BufferSource (that is, either an ArrayBufferView or ArrayBuffer) which contains the media segment data you want to add to the SourceBuffer.",
                "name": "source"
            }
        ],
        "path": "dom/sourcebuffer/appendbuffer",
        "syntax": "sourceBuffer.appendBuffer(source);",
        "type": "Media"
    },
    "SourceBuffer.appendStream": {
        "descr": "Draft This page is not complete.",
        "name": "SourceBuffer.appendStream",
        "params": [
            {
                "descr": "The ReadableStream that is the source of the media segment data you want to append to the SourceBuffer.",
                "name": "stream"
            },
            {
                "descr": "An unsigned long value indicating the maximum number of bytes that can be appended in this operation.",
                "name": "maxSize"
            }
        ],
        "path": "dom/sourcebuffer/appendstream",
        "syntax": "sourceBuffer.appendStream(stream, maxSize);",
        "type": "Media"
    },
    "SourceBuffer.appendWindowEnd": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SourceBuffer.appendWindowEnd",
        "params": [],
        "path": "dom/sourcebuffer/appendwindowend",
        "syntax": "var myAppendWindowEnd = sourceBuffer.appendWindowEnd; sourceBuffer.appendWindowEnd = 120.0;  Value A double, indicating the end time of the append window, in seconds. Errors The following errors may be thrown when setting a new value for this property.    Error Explanation     InvalidAccessError An attempt was made to set the value to less than or equal to SourceBuffer.appendWindowStart, or NaN.   InvalidStateError This SourceBuffer object is being updated (i.e. its SourceBuffer.updating property is currently true), or this SourceBuffer",
        "type": "Media"
    },
    "SourceBuffer.appendWindowStart": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SourceBuffer.appendWindowStart",
        "params": [],
        "path": "dom/sourcebuffer/appendwindowstart",
        "syntax": "var myAppendWindowStart = sourceBuffer.appendWindowStart; sourceBuffer.appendWindowStart = 2.0;  Value A double, indicating the start time of the append window, in seconds. Errors The following errors may be thrown when setting a new value for this property.    Error Explanation     InvalidAccessError An attempt was made to set the value to less than 0, or a value greater than or equal to SourceBuffer.appendWindowEnd.   InvalidStateError This SourceBuffer object is being updated (i.e. its SourceBuffer.updating property is currently true), or this SourceBuffer",
        "type": "Media"
    },
    "SourceBuffer.audioTracks": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SourceBuffer.audioTracks",
        "params": [],
        "path": "dom/sourcebuffer/audiotracks",
        "syntax": "var myAudioTracks = sourceBuffer.audioTracks;  Value An AudioTrackList object. Example TBD Specifications    Specification Status Comment   Media Source ExtensionsThe definition of 'audioTracks' in that specification. Recommendation Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  31   31  23 — 31Prefixed   Prefixed Requires the vendor prefix: -webkit-    12  42   42  25 — 42 Disabled    Limited support to a whitelist of sites, for example YouTube, Netflix, and other popular streaming sites. The whitelist was removed when Media Source Extensions was enabled by default in Firefox 42. Disabled From version 25 until version 42 (exclusive): this feature is behind the media.mediasource.enabled",
        "type": "Audio"
    },
    "SourceBuffer.buffered": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SourceBuffer.buffered",
        "params": [],
        "path": "dom/sourcebuffer/buffered",
        "syntax": "var myBufferedRange = sourceBuffer.buffered;  Value A TimeRanges object. Example TBD Specifications    Specification Status Comment   Media Source ExtensionsThe definition of 'buffered' in that specification. Recommendation Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  31   31  23 — 31Prefixed   Prefixed Requires the vendor prefix: -webkit-    12  42   42  25 — 42 Disabled    Limited support to a whitelist of sites, for example YouTube, Netflix, and other popular streaming sites. The whitelist was removed when Media Source Extensions was enabled by default in Firefox 42. Disabled From version 25 until version 42 (exclusive): this feature is behind the media.mediasource.enabled",
        "type": "Media"
    },
    "SourceBuffer.changeType": {
        "descr": "The SourceBuffer method changeType() sets the MIME type that future calls to appendBuffer() should expect the new media data to conform to. This makes it possible to change codecs or container type mid-stream.",
        "name": "SourceBuffer.changeType",
        "params": [
            {
                "descr": "A DOMString specifying the MIME type that future buffers will conform to.",
                "name": "type"
            },
            {
                "descr": "The specified string is empty, rather than indicating a valid MIME type.",
                "name": "TypeError"
            },
            {
                "descr": "The SourceBuffer is not a member of the parent media source's sourceBuffers list, or the buffer's updating property indicates that a previously queued appendBuffer() or remove() is still being processed.",
                "name": "InvalidStateError"
            },
            {
                "descr": "The specified MIME type is not supported, or is not supported with the types of SourceBuffer objects present in the MediaSource.sourceBuffers list.",
                "name": "NotSupportedError"
            }
        ],
        "path": "dom/sourcebuffer/changetype",
        "syntax": "sourceBuffer.changeType(type);",
        "type": "Media"
    },
    "SourceBuffer.mode": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SourceBuffer.mode",
        "params": [],
        "path": "dom/sourcebuffer/mode",
        "syntax": "var myMode = sourceBuffer.mode; sourceBuffer.mode = 'sequence';  Value A DOMString. Errors The following errors may be thrown when setting a new value for this property.    Error Explanation     InvalidAccessError An attempt was made to set the value to segments when the initial value is sequence.   InvalidStateError The SourceBuffer object is being updated (i.e. its SourceBuffer.updating property is currently true), the last media segment appended to this",
        "type": "Media"
    },
    "SourceBuffer.remove": {
        "descr": "Draft This page is not complete.",
        "name": "SourceBuffer.remove",
        "params": [
            {
                "descr": "A double representing the start of the time range, in seconds.",
                "name": "start"
            },
            {
                "descr": "A double representing the end of the time range, in seconds.",
                "name": "end"
            }
        ],
        "path": "dom/sourcebuffer/remove",
        "syntax": "sourceBuffer.remove(start, end);",
        "type": "Media"
    },
    "SourceBuffer.textTracks": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SourceBuffer.textTracks",
        "params": [],
        "path": "dom/sourcebuffer/texttracks",
        "syntax": "var myTextTracks = sourceBuffer.textTracks;  Value An TextTrackList object. Example TBD Specifications    Specification Status Comment   Media Source ExtensionsThe definition of 'textTracks' in that specification. Recommendation Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  31   31  23 — 31Prefixed   Prefixed Requires the vendor prefix: -webkit-    Yes  42   42  25 — 42 Disabled    Limited support to a whitelist of sites, for example YouTube, Netflix, and other popular streaming sites. The whitelist was removed when Media Source Extensions was enabled by default in Firefox 42. Disabled From version 25 until version 42 (exclusive): this feature is behind the media.mediasource.enabled",
        "type": "Media"
    },
    "SourceBuffer.timestampOffset": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SourceBuffer.timestampOffset",
        "params": [],
        "path": "dom/sourcebuffer/timestampoffset",
        "syntax": "var myOffset = sourceBuffer.timestampOffset; sourceBuffer.timestampOffset = 2.5;  Value A double, with the offset amount expressed in seconds. Errors The following errors may be thrown when setting a new value for this property.    Error Explanation     InvalidStateError One or more of the SourceBuffer objects in MediaSource.sourceBuffers are being updated (i.e. their SourceBuffer.updating property is currently true), a media segment inside the SourceBuffer",
        "type": "Media"
    },
    "SourceBuffer.trackDefaults": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SourceBuffer.trackDefaults",
        "params": [],
        "path": "dom/sourcebuffer/trackdefaults",
        "syntax": "var myTrackDefaults = sourceBuffer.trackDefaults; sourceBuffer.trackDefaults = myTrackDefaultList;  Value A TrackDefaultList object. Errors The following errors may be thrown when setting a new value for this property.    Error Explanation     InvalidStateError One or more of the SourceBuffer objects in MediaSource.sourceBuffers are being updated (i.e. their SourceBuffer.updating property is currently true), or this SourceBuffer",
        "type": "Media"
    },
    "SourceBuffer.updating": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SourceBuffer.updating",
        "params": [],
        "path": "dom/sourcebuffer/updating",
        "syntax": "var isUpdating = sourceBuffer.updating;  Value A Boolean. Example TBD Specifications    Specification Status Comment   Media Source ExtensionsThe definition of 'updating' in that specification. Recommendation Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  31   31  23 — 31Prefixed   Prefixed Requires the vendor prefix: -webkit-    12  42   42  25 — 42 Disabled    Limited support to a whitelist of sites, for example YouTube, Netflix, and other popular streaming sites. The whitelist was removed when Media Source Extensions was enabled by default in Firefox 42. Disabled From version 25 until version 42 (exclusive): this feature is behind the media.mediasource.enabled",
        "type": "Media"
    },
    "SourceBuffer.videoTracks": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SourceBuffer.videoTracks",
        "params": [],
        "path": "dom/sourcebuffer/videotracks",
        "syntax": "var myVideoTracks = sourceBuffer.videoTracks;  Value An VideoTrackList object. Example TBD Specifications    Specification Status Comment   Media Source ExtensionsThe definition of 'videoTracks' in that specification. Recommendation Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  31   31  23 — 31Prefixed   Prefixed Requires the vendor prefix: -webkit-    12  42   42  25 — 42 Disabled    Limited support to a whitelist of sites, for example YouTube, Netflix, and other popular streaming sites. The whitelist was removed when Media Source Extensions was enabled by default in Firefox 42. Disabled From version 25 until version 42 (exclusive): this feature is behind the media.mediasource.enabled",
        "type": "Media"
    },
    "SourceBufferList.SourceBuffer": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SourceBufferList.SourceBuffer",
        "params": [
            {
                "descr": "The index position of the SourceBuffer object you want to return.",
                "name": "index"
            }
        ],
        "path": "dom/sourcebufferlist/sourcebuffer",
        "syntax": "var mySourceBuffer = SourceBufferList[index]; Parameters  index The index position of the SourceBuffer object you want to return.  Returns A SourceBuffer object. Errors No specific errors are returned, but if the supplied index is great than or equal to SourceBufferList.length, the operation will return undefined. Example TBD. Specifications    Specification Status Comment   Media Source ExtensionsThe definition of 'SourceBuffer() getter' in that specification. Recommendation Initial definition.    Browser compatibilityUpdate compatibility data on GitHub",
        "type": "Media"
    },
    "SourceBufferList.length": {
        "descr": "Draft This page is not complete.",
        "name": "SourceBufferList.length",
        "params": [],
        "path": "dom/sourcebufferlist/length",
        "syntax": "var myListLength = SourceBufferList.length; Value An unsigned long number. Example TBD Specifications    Specification Status Comment   Media Source ExtensionsThe definition of 'length' in that specification. Recommendation Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   31   31  23 — 31Prefixed   Prefixed Requires the vendor prefix: -webkit-    12  42   42  25 — 42 Disabled    Limited support to a whitelist of sites, for example YouTube, Netflix, and other popular streaming sites. The whitelist was removed when Media Source Extensions was enabled by default in Firefox 42. Disabled From version 25 until version 42 (exclusive): this feature is behind the media.mediasource.enabled",
        "type": "Media"
    },
    "SpeechGrammar.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechGrammar.constructor",
        "params": [],
        "path": "dom/speechgrammar/speechgrammar",
        "syntax": "var mySpeechGrammar = new SpeechGrammar();",
        "type": "Speech"
    },
    "SpeechGrammar.src": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechGrammar.src",
        "params": [],
        "path": "dom/speechgrammar/src",
        "syntax": "var myGrammar = speechGrammarInstance.src; Value A DOMString representing the grammar. Examples var grammar = '#JSGF V1.0; grammar colors; public <color> = aqua | azure | beige | bisque | black | blue | brown | chocolate | coral | crimson | cyan | fuchsia | ghostwhite | gold | goldenrod | gray | green | indigo | ivory | khaki | lavender | lime | linen | magenta | maroon | moccasin | navy | olive | orange | orchid | peru | pink | plum | purple | red | salmon | sienna | silver | snow | tan | teal | thistle | tomato | turquoise | violet | white | yellow ;' var recognition = new SpeechRecognition();\n or  var speechRecognitionList = new SpeechGrammarList();\n or  speechRecognitionList.addFromString(grammar, 1);\n or  recognition.grammars = speechRecognitionList; console.log(speechRecognitionList[0].src);\n or  // should return the same as the contents of the grammar variable console.log(speechRecognitionList[0].weight);\n or  // should return 1 - the same as the weight set in line 4.);",
        "type": "Speech"
    },
    "SpeechGrammar.weight": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechGrammar.weight",
        "params": [],
        "path": "dom/speechgrammar/weight",
        "syntax": "var myGrammarWeight = speechGrammarInstance.weight; Value A float representing the weight of the grammar, in the range 0.0–1.0. Examples var grammar = '#JSGF V1.0; grammar colors; public <color> = aqua | azure | beige | bisque | black | blue | brown | chocolate | coral | crimson | cyan | fuchsia | ghostwhite | gold | goldenrod | gray | green | indigo | ivory | khaki | lavender | lime | linen | magenta | maroon | moccasin | navy | olive | orange | orchid | peru | pink | plum | purple | red | salmon | sienna | silver | snow | tan | teal | thistle | tomato | turquoise | violet | white | yellow ;' var recognition = new SpeechRecognition();\n or  var speechRecognitionList = new SpeechGrammarList();\n or  speechRecognitionList.addFromString(grammar, 1);\n or  recognition.grammars = speechRecognitionList; console.log(speechRecognitionList[0].src);\n or  // should return the same as the contents of the grammar variable console.log(speechRecognitionList[0].weight);\n or  // should return 1 - the same as the weight set in line 4.);",
        "type": "Speech"
    },
    "SpeechGrammarList": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechGrammarList",
        "params": [
            {
                "descr": "Creates a new SpeechGrammarList object.",
                "name": "SpeechGrammarList.SpeechGrammarList()"
            },
            {
                "descr": "Returns the number of SpeechGrammar objects contained in the SpeechGrammarList.",
                "name": "SpeechGrammarList.length Read only"
            },
            {
                "descr": "Standard getter — allows individual SpeechGrammar objects to be retrieved from the SpeechGrammarList using array syntax.",
                "name": "SpeechGrammarList.item()"
            },
            {
                "descr": "Takes a grammar present at a specific URI and adds it to the SpeechGrammarList as a new SpeechGrammar object.",
                "name": "SpeechGrammarList.addFromURI()"
            },
            {
                "descr": "Takes a grammar present in a specific DOMString within the code base (e.g. ",
                "name": "SpeechGrammarList.addFromString()"
            }
        ],
        "path": "dom/speechgrammarlist",
        "syntax": "SpeechGrammarList.addFromURI()",
        "type": "Speech"
    },
    "SpeechGrammarList.addFromString": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechGrammarList.addFromString",
        "params": [
            {
                "descr": "A DOMString representing the grammar to be added.",
                "name": "string"
            },
            {
                "descr": "A float representing the weight of the grammar relative to other grammars present in the SpeechGrammarList. ",
                "name": "weight Optional"
            }
        ],
        "path": "dom/speechgrammarlist/addfromstring",
        "syntax": "speechGrammarListInstance.addFromString(string,weight);",
        "type": "Speech"
    },
    "SpeechGrammarList.addFromURI": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechGrammarList.addFromURI",
        "params": [
            {
                "descr": "A DOMString representing the URI of the grammar to be added.",
                "name": "src"
            },
            {
                "descr": "A float representing the weight of the grammar relative to other grammars present in the SpeechGrammarList. ",
                "name": "weight Optional"
            }
        ],
        "path": "dom/speechgrammarlist/addfromuri",
        "syntax": "speechGrammarListInstance.addFromURI(src,weight);",
        "type": "Speech"
    },
    "SpeechGrammarList.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechGrammarList.constructor",
        "params": [],
        "path": "dom/speechgrammarlist/speechgrammarlist",
        "syntax": "var myGrammarList = new SpeechGrammarList();",
        "type": "Speech"
    },
    "SpeechGrammarList.item": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechGrammarList.item",
        "params": [],
        "path": "dom/speechgrammarlist/item",
        "syntax": "var myFirstGrammar = speechGrammarListInstance[0]; Returns A SpeechGrammar object. Examples var grammar = '#JSGF V1.0; grammar colors; public <color> = aqua | azure | beige | bisque | black | blue | brown | chocolate | coral | crimson | cyan | fuchsia | ghostwhite | gold | goldenrod | gray | green | indigo | ivory | khaki | lavender | lime | linen | magenta | maroon | moccasin | navy | olive | orange | orchid | peru | pink | plum | purple | red | salmon | sienna | silver | snow | tan | teal | thistle | tomato | turquoise | violet | white | yellow ;' var recognition = new SpeechRecognition();\n or  var speechRecognitionList = new SpeechGrammarList();\n or  speechRecognitionList.addFromString(grammar, 1);\n or  recognition.grammars = speechRecognitionList; var myFirstGrammar = speechRecognitionList[0]; // var should contain the SpeechGrammar object created in line 4.);",
        "type": "Speech"
    },
    "SpeechGrammarList.length": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechGrammarList.length",
        "params": [],
        "path": "dom/speechgrammarlist/length",
        "syntax": "var myListLength = speechGrammarListInstance.length; Value A number indicating the number of SpeechGrammar objects contained in the SpeechGrammarList. Examples var grammar = '#JSGF V1.0; grammar colors; public <color> = aqua | azure | beige | bisque | black | blue | brown | chocolate | coral | crimson | cyan | fuchsia | ghostwhite | gold | goldenrod | gray | green | indigo | ivory | khaki | lavender | lime | linen | magenta | maroon | moccasin | navy | olive | orange | orchid | peru | pink | plum | purple | red | salmon | sienna | silver | snow | tan | teal | thistle | tomato | turquoise | violet | white | yellow ;' var recognition = new SpeechRecognition();\n or  var speechRecognitionList = new SpeechGrammarList();\n or  speechRecognitionList.addFromString(grammar, 1);\n or  recognition.grammars = speechRecognitionList; speechRecognitionList.length; // should return 1.);",
        "type": "Speech"
    },
    "SpeechRecognition.abort": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognition.abort",
        "params": [],
        "path": "dom/speechrecognition/abort",
        "syntax": "mySpeechRecognition.abort();",
        "type": "Speech"
    },
    "SpeechRecognition.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognition.constructor",
        "params": [],
        "path": "dom/speechrecognition/speechrecognition",
        "syntax": "var myRecognition = new SpeechRecognition();",
        "type": "Speech"
    },
    "SpeechRecognition.continuous": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognition.continuous",
        "params": [],
        "path": "dom/speechrecognition/continuous",
        "syntax": "var myContinuous = mySpeechRecognition.continuous; mySpeechRecognition.continuous = true;  Value A Boolean representing the current SpeechRecognition's continuous status. true means continuous, and false means not continuous (single result each time.)",
        "type": "Speech"
    },
    "SpeechRecognition.grammars": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognition.grammars",
        "params": [],
        "path": "dom/speechrecognition/grammars",
        "syntax": "var myGrammars = mySpeechRecognition.grammars; mySpeechRecognition.grammars = mySpeechGrammarList;  Value A SpeechGrammarList containing the SpeechGrammar objects that represent your grammar for your app. Examples This code is excerpted from our Speech color changer example. var grammar = '#JSGF V1.0; grammar colors; public <color> = aqua | azure | beige | bisque | black | blue | brown | chocolate | coral | crimson | cyan | fuchsia | ghostwhite | gold | goldenrod | gray | green | indigo | ivory | khaki | lavender | lime | linen | magenta | maroon | moccasin | navy | olive | orange | orchid | peru | pink | plum | purple | red | salmon | sienna | silver | snow | tan | teal | thistle | tomato | turquoise | violet | white | yellow ;' var recognition = new SpeechRecognition();\n or  var speechRecognitionList = new SpeechGrammarList();\n or  speechRecognitionList.addFromString(grammar, 1);\n or  recognition.grammars = speechRecognitionList; //recognition.continuous = false; recognition.lang = 'en-US'; recognition.interimResults = false; recognition.maxAlternatives = 1; ...);",
        "type": "Speech"
    },
    "SpeechRecognition.interimResults": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognition.interimResults",
        "params": [],
        "path": "dom/speechrecognition/interimresults",
        "syntax": "var myInterimResult = mySpeechRecognition.interimResults; mySpeechRecognition.interimResults = false;  Value A Boolean representing the state of the current SpeechRecognition's interim results. true means interim results are returned, and false means they aren't. Examples This code is excerpted from our Speech color changer example. var grammar = '#JSGF V1.0; grammar colors; public <color> = aqua | azure | beige | bisque | black | blue | brown | chocolate | coral | crimson | cyan | fuchsia | ghostwhite | gold | goldenrod | gray | green | indigo | ivory | khaki | lavender | lime | linen | magenta | maroon | moccasin | navy | olive | orange | orchid | peru | pink | plum | purple | red | salmon | sienna | silver | snow | tan | teal | thistle | tomato | turquoise | violet | white | yellow ;' var recognition = new SpeechRecognition();\n or  var speechRecognitionList = new SpeechGrammarList();\n or  speechRecognitionList.addFromString(grammar, 1);\n or  recognition.grammars = speechRecognitionList; //recognition.continuous = false; recognition.lang = 'en-US'; recognition.interimResults = false; recognition.maxAlternatives = 1; ...);",
        "type": "Speech"
    },
    "SpeechRecognition.lang": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognition.lang",
        "params": [],
        "path": "dom/speechrecognition/lang",
        "syntax": "var myLang = mySpeechRecognition.lang; mySpeechRecognition.lang = 'en-US';  Value A DOMString representing the BCP 47 language tag for the current SpeechRecognition. Examples This code is excerpted from our Speech color changer example. var grammar = '#JSGF V1.0; grammar colors; public <color> = aqua | azure | beige | bisque | black | blue | brown | chocolate | coral | crimson | cyan | fuchsia | ghostwhite | gold | goldenrod | gray | green | indigo | ivory | khaki | lavender | lime | linen | magenta | maroon | moccasin | navy | olive | orange | orchid | peru | pink | plum | purple | red | salmon | sienna | silver | snow | tan | teal | thistle | tomato | turquoise | violet | white | yellow ;' var recognition = new SpeechRecognition();\n or  var speechRecognitionList = new SpeechGrammarList();\n or  speechRecognitionList.addFromString(grammar, 1);\n or  recognition.grammars = speechRecognitionList; //recognition.continuous = false; recognition.lang = 'en-US'; recognition.interimResults = false; recognition.maxAlternatives = 1; ...);",
        "type": "Speech"
    },
    "SpeechRecognition.maxAlternatives": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognition.maxAlternatives",
        "params": [],
        "path": "dom/speechrecognition/maxalternatives",
        "syntax": "var myMaxAlternativeNumber = mySpeechRecognition.maxAlternatives; mySpeechRecognition.maxAlternatives = 2;  Value A number representing the maximum returned alternatives for each result. Examples This code is excerpted from our Speech color changer example. var grammar = '#JSGF V1.0; grammar colors; public <color> = aqua | azure | beige | bisque | black | blue | brown | chocolate | coral | crimson | cyan | fuchsia | ghostwhite | gold | goldenrod | gray | green | indigo | ivory | khaki | lavender | lime | linen | magenta | maroon | moccasin | navy | olive | orange | orchid | peru | pink | plum | purple | red | salmon | sienna | silver | snow | tan | teal | thistle | tomato | turquoise | violet | white | yellow ;' var recognition = new SpeechRecognition();\n or  var speechRecognitionList = new SpeechGrammarList();\n or  speechRecognitionList.addFromString(grammar, 1);\n or  recognition.grammars = speechRecognitionList; //recognition.continuous = false; recognition.lang = 'en-US'; recognition.interimResults = false; recognition.maxAlternatives = 1; ...);",
        "type": "Speech"
    },
    "SpeechRecognition.onaudioend": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognition.onaudioend",
        "params": [],
        "path": "dom/speechrecognition/onaudioend",
        "syntax": "mySpeechRecognition.onaudioend = function() { ... };",
        "type": "Speech"
    },
    "SpeechRecognition.onaudiostart": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognition.onaudiostart",
        "params": [],
        "path": "dom/speechrecognition/onaudiostart",
        "syntax": "mySpeechRecognition.onaudiostart = function() { ... };",
        "type": "Speech"
    },
    "SpeechRecognition.onend": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognition.onend",
        "params": [],
        "path": "dom/speechrecognition/onend",
        "syntax": "mySpeechRecognition.onend = function() { ... };",
        "type": "Speech"
    },
    "SpeechRecognition.onerror": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognition.onerror",
        "params": [],
        "path": "dom/speechrecognition/onerror",
        "syntax": "mySpeechRecognition.onerror = function() { ... };",
        "type": "Speech"
    },
    "SpeechRecognition.onnomatch": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognition.onnomatch",
        "params": [],
        "path": "dom/speechrecognition/onnomatch",
        "syntax": "mySpeechRecognition.onnomatch = function() { ... };",
        "type": "Speech"
    },
    "SpeechRecognition.onresult": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognition.onresult",
        "params": [],
        "path": "dom/speechrecognition/onresult",
        "syntax": "mySpeechRecognition.onresult = function() { ... };",
        "type": "Speech"
    },
    "SpeechRecognition.onsoundend": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognition.onsoundend",
        "params": [],
        "path": "dom/speechrecognition/onsoundend",
        "syntax": "mySpeechRecognition.onsoundend = function() { ... };",
        "type": "Speech"
    },
    "SpeechRecognition.onsoundstart": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognition.onsoundstart",
        "params": [],
        "path": "dom/speechrecognition/onsoundstart",
        "syntax": "mySpeechRecognition.onsoundstart = function() { ... };",
        "type": "Speech"
    },
    "SpeechRecognition.onspeechend": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognition.onspeechend",
        "params": [],
        "path": "dom/speechrecognition/onspeechend",
        "syntax": "mySpeechRecognition.onspeechend = function() { ... };",
        "type": "Speech"
    },
    "SpeechRecognition.onspeechstart": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognition.onspeechstart",
        "params": [],
        "path": "dom/speechrecognition/onspeechstart",
        "syntax": "mySpeechRecognition.onspeechstart = function() { ... };",
        "type": "Speech"
    },
    "SpeechRecognition.onstart": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognition.onstart",
        "params": [],
        "path": "dom/speechrecognition/onstart",
        "syntax": "mySpeechRecognition.onstart = function() { ... };",
        "type": "Speech"
    },
    "SpeechRecognition.serviceURI": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognition.serviceURI",
        "params": [],
        "path": "dom/speechrecognition/serviceuri",
        "syntax": "var myServiceURI = mySpeechRecognition.serviceURI; mySpeechRecognition.serviceURI = 'path/to/my/service/';  Value A DOMString representing the URI of the speech recognition service. Examples var recognition = new SpeechRecognition();\n or  recognition.speechURI = 'http://www.example.com'; ...);",
        "type": "Speech"
    },
    "SpeechRecognition.start": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognition.start",
        "params": [],
        "path": "dom/speechrecognition/start",
        "syntax": "mySpeechRecognition.start();",
        "type": "Speech"
    },
    "SpeechRecognition.stop": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognition.stop",
        "params": [],
        "path": "dom/speechrecognition/stop",
        "syntax": "mySpeechRecognition.stop();",
        "type": "Speech"
    },
    "SpeechRecognitionAlternative.confidence": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognitionAlternative.confidence",
        "params": [],
        "path": "dom/speechrecognitionalternative/confidence",
        "syntax": "var myConfidence = speechRecognitionAlternativeInstance.confidence; Returns A number betwen 0 and 1. Examples This code is excerpted from our Speech color changer example. recognition.onresult = function(event) { // The SpeechRecognitionEvent results property returns a SpeechRecognitionResultList object // The SpeechRecognitionResultList object contains SpeechRecognitionResult objects. // It has a getter so it can be accessed like an array // The first [0] returns the SpeechRecognitionResult at position 0. // Each SpeechRecognitionResult object contains SpeechRecognitionAlternative objects that contain individual results. // These also have getters so they can be accessed like arrays. // The second [0] returns the SpeechRecognitionAlternative at position 0. // We then return the transcript property of the SpeechRecognitionAlternative object var color = event.results[0][0].transcript; diagnostic.textContent = 'Result received: ' + color + '.'; bg.style.backgroundColor = color; console.log('Confidence: ' + event.results[0][0].confidence);\n or  });",
        "type": "Speech"
    },
    "SpeechRecognitionAlternative.transcript": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognitionAlternative.transcript",
        "params": [],
        "path": "dom/speechrecognitionalternative/transcript",
        "syntax": "var myTranscript = speechRecognitionAlternativeInstance.transcript; Returns A DOMString. Examples This code is excerpted from our Speech color changer example. recognition.onresult = function(event) { // The SpeechRecognitionEvent results property returns a SpeechRecognitionResultList object // The SpeechRecognitionResultList object contains SpeechRecognitionResult objects. // It has a getter so it can be accessed like an array // The first [0] returns the SpeechRecognitionResult at position 0. // Each SpeechRecognitionResult object contains SpeechRecognitionAlternative objects that contain individual results. // These also have getters so they can be accessed like arrays. // The second [0] returns the SpeechRecognitionAlternative at position 0. // We then return the transcript property of the SpeechRecognitionAlternative object var color = event.results[0][0].transcript; diagnostic.textContent = 'Result received: ' + color + '.'; bg.style.backgroundColor = color; }",
        "type": "Speech"
    },
    "SpeechRecognitionError.error": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognitionError.error",
        "params": [
            {
                "descr": "No speech was detected.",
                "name": "no-speech"
            },
            {
                "descr": "Speech input was aborted in some manner, perhaps by some user-agent-specific behavior like a button the user can press to cancel speech input.",
                "name": "aborted"
            },
            {
                "descr": "Audio capture failed.",
                "name": "audio-capture"
            },
            {
                "descr": "Network communication required for completing the recognition failed.",
                "name": "network"
            },
            {
                "descr": "The user agent disallowed any speech input from occurring for reasons of security, privacy or user preference.",
                "name": "not-allowed"
            },
            {
                "descr": "The user agent disallowed the requested speech recognition service, either because the user agent doesn't support it or because of reasons of security, privacy or user preference. ",
                "name": "service-not-allowed"
            },
            {
                "descr": "There was an error in the speech recognition grammar or semantic tags, or the chosen grammar format or semantic tag format was unsupported.",
                "name": "bad-grammar"
            },
            {
                "descr": "The language was not supported.",
                "name": "language-not-supported"
            }
        ],
        "path": "dom/speechrecognitionerror/error",
        "syntax": "var myError = event.error;  Value A DOMString naming the type of error. The possible error types are:  no-speech No speech was detected. aborted Speech input was aborted in some manner, perhaps by some user-agent-specific behavior like a button the user can press to cancel speech input. audio-capture Audio capture failed. network Network communication required for completing the recognition failed. not-allowed The user agent disallowed any speech input from occurring for reasons of security, privacy or user preference. service-not-allowed The user agent disallowed the requested speech recognition service, either because the user agent doesn't support it or because of reasons of security, privacy or user preference. In this case it would allow another more suitable speech recognition service to be used instead. bad-grammar There was an error in the speech recognition grammar or semantic tags, or the chosen grammar format or semantic tag format was unsupported. language-not-supported The language was not supported.  Examples var recognition = new SpeechRecognition();\n or  recognition.onerror = function(event) { console.log('Speech recognition error detected: ' + event.error);\n or  console.log('Additional information: ' + event.message);\n or  });",
        "type": "Speech"
    },
    "SpeechRecognitionError.message": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognitionError.message",
        "params": [],
        "path": "dom/speechrecognitionerror/message",
        "syntax": "var myErrorMsg = event.message;  Value A DOMString containing more details about the error that was raised. Note that the spec does not define the exact wording of these messages — this is up to the implementors to decide upon. Examples var recognition = new SpeechRecognition();\n or  recognition.onerror = function(event) { console.log('Speech recognition error detected: ' + event.error);\n or  console.log('Additional information: ' + event.message);\n or  });",
        "type": "Speech"
    },
    "SpeechRecognitionEvent.emma": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognitionEvent.emma",
        "params": [],
        "path": "dom/speechrecognitionevent/emma",
        "syntax": "var myEmma = event.emma;  Value A valid XML document. The exact contents can vary across user agents and recognition engines, but all supporting implementations will expose a valid XML document complete with an EMMA namespace. If the speech recognition system does not supply EMMA data then the user agent will return null. Examples recognition.onresult = function(event) { var color = event.results[0][0].transcript; diagnostic.textContent = 'Result received: ' + color + '.'; bg.style.backgroundColor = color; console.log(event.emma);\n or  });",
        "type": "Speech"
    },
    "SpeechRecognitionEvent.interpretation": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognitionEvent.interpretation",
        "params": [],
        "path": "dom/speechrecognitionevent/interpretation",
        "syntax": "var myInterpretation = event.interpretation;  Value The returned value can be of any type. If no semantic interpretation has been returned by the speec recognition system, null will be returned. Examples recognition.onresult = function(event) { var color = event.results[0][0].transcript; diagnostic.textContent = 'Result received: ' + color + '.'; bg.style.backgroundColor = color; console.log(event.interpretation);\n or  });",
        "type": "Speech"
    },
    "SpeechRecognitionEvent.resultIndex": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognitionEvent.resultIndex",
        "params": [],
        "path": "dom/speechrecognitionevent/resultindex",
        "syntax": "var myResultIndex = event.resultIndex;  Value A number. Examples recognition.onresult = function(event) { var color = event.results[0][0].transcript; diagnostic.textContent = 'Result received: ' + color + '.'; bg.style.backgroundColor = color; console.log(event.resultIndex);\n or  // returns 0 if there is only one result });",
        "type": "Speech"
    },
    "SpeechRecognitionEvent.results": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognitionEvent.results",
        "params": [],
        "path": "dom/speechrecognitionevent/results",
        "syntax": "var myResults = event.results;  Value A SpeechRecognitionResultList object. Examples This code is excerpted from our Speech color changer example. recognition.onresult = function(event) { // The SpeechRecognitionEvent results property returns a SpeechRecognitionResultList object // The SpeechRecognitionResultList object contains SpeechRecognitionResult objects. // It has a getter so it can be accessed like an array // The first [0] returns the SpeechRecognitionResult at position 0. // Each SpeechRecognitionResult object contains SpeechRecognitionAlternative objects that contain individual results. // These also have getters so they can be accessed like arrays. // The second [0] returns the SpeechRecognitionAlternative at position 0. // We then return the transcript property of the SpeechRecognitionAlternative object var color = event.results[0][0].transcript; diagnostic.textContent = 'Result received: ' + color + '.'; bg.style.backgroundColor = color; }",
        "type": "Speech"
    },
    "SpeechRecognitionResult": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognitionResult",
        "params": [
            {
                "descr": "A Boolean that states whether this result is final (true) or not (false) — if so, then this is the final time this result will be returned; if not, then this result is an interim result, and may be updated later on.",
                "name": "SpeechRecognitionResult.isFinal Read only"
            },
            {
                "descr": "Returns the length of the \"array\" — the number of SpeechRecognitionAlternative objects contained in the result (also referred to as \"n-best alternatives\".)",
                "name": "SpeechRecognitionResult.length Read only"
            },
            {
                "descr": "A standard getter that allows SpeechRecognitionAlternative objects within the result to be accessed via array syntax.",
                "name": "SpeechRecognitionResult.item"
            }
        ],
        "path": "dom/speechrecognitionresult",
        "syntax": "recognition.onresult = function(event) { // The SpeechRecognitionEvent results property returns a SpeechRecognitionResultList object // The SpeechRecognitionResultList object contains SpeechRecognitionResult objects. // It has a getter so it can be accessed like an array // The first [0] returns the SpeechRecognitionResult at position 0. // Each SpeechRecognitionResult object contains SpeechRecognitionAlternative objects that contain individual results. // These also have getters so they can be accessed like arrays. // The second [0] returns the SpeechRecognitionAlternative at position 0. // We then return the transcript property of the SpeechRecognitionAlternative object var color = event.results[0][0].transcript; diagnostic.textContent = 'Result received: ' + color + '.'; bg.style.backgroundColor = color; }",
        "type": "Speech"
    },
    "SpeechRecognitionResult.isFinal": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognitionResult.isFinal",
        "params": [],
        "path": "dom/speechrecognitionresult/isfinal",
        "syntax": "var myIsFinal = speechRecognitionResultInstance.isFinal; Returns A Boolean. Examples recognition.onresult = function(event) { // The SpeechRecognitionEvent results property returns a SpeechRecognitionResultList object // The SpeechRecognitionResultList object contains SpeechRecognitionResult objects. // It has a getter so it can be accessed like an array // The first [0] returns the SpeechRecognitionResult at position 0. // Each SpeechRecognitionResult object contains SpeechRecognitionAlternative objects that contain individual results. // These also have getters so they can be accessed like arrays. // The second [0] returns the SpeechRecognitionAlternative at position 0. // We then return the transcript property of the SpeechRecognitionAlternative object var color = event.results[0][0].transcript; diagnostic.textContent = 'Result received: ' + color + '.'; bg.style.backgroundColor = color; console.log(event.results[0].isFinal);\n or  });",
        "type": "Speech"
    },
    "SpeechRecognitionResult.item": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognitionResult.item",
        "params": [],
        "path": "dom/speechrecognitionresult/item",
        "syntax": "var myAlternative = speechRecognitionResultInstance[0]; Returns A SpeechRecognitionAlternative object. Examples This code is excerpted from our Speech color changer example. recognition.onresult = function(event) { // The SpeechRecognitionEvent results property returns a SpeechRecognitionResultList object // The SpeechRecognitionResultList object contains SpeechRecognitionResult objects. // It has a getter so it can be accessed like an array // The first [0] returns the SpeechRecognitionResult at position 0. // Each SpeechRecognitionResult object contains SpeechRecognitionAlternative objects that contain individual results. // These also have getters so they can be accessed like arrays. // The second [0] returns the SpeechRecognitionAlternative at position 0. // We then return the transcript property of the SpeechRecognitionAlternative object var color = event.results[0][0].transcript; diagnostic.textContent = 'Result received: ' + color + '.'; bg.style.backgroundColor = color; }",
        "type": "Speech"
    },
    "SpeechRecognitionResult.length": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognitionResult.length",
        "params": [],
        "path": "dom/speechrecognitionresult/length",
        "syntax": "var myLength = speechRecognitionResultInstance.length; Returns A number. Examples This code is excerpted from our Speech color changer example. recognition.onresult = function(event) { // The SpeechRecognitionEvent results property returns a SpeechRecognitionResultList object // The SpeechRecognitionResultList object contains SpeechRecognitionResult objects. // It has a getter so it can be accessed like an array // The first [0] returns the SpeechRecognitionResult at position 0. // Each SpeechRecognitionResult object contains SpeechRecognitionAlternative objects that contain individual results. // These also have getters so they can be accessed like arrays. // The second [0] returns the SpeechRecognitionAlternative at position 0. // We then return the transcript property of the SpeechRecognitionAlternative object var color = event.results[0][0].transcript; diagnostic.textContent = 'Result received: ' + color + '.'; bg.style.backgroundColor = color; console.log(event.results[0].length);\n or  });",
        "type": "Speech"
    },
    "SpeechRecognitionResultList": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognitionResultList",
        "params": [
            {
                "descr": "Returns the length of the \"array\" — the number of SpeechRecognitionResult objects in the list.",
                "name": "SpeechRecognitionResultList.length Read only"
            },
            {
                "descr": "A standard getter that allows SpeechRecognitionResult objects in the list to be accessed via array syntax.",
                "name": "SpeechRecognitionResultList.item"
            }
        ],
        "path": "dom/speechrecognitionresultlist",
        "syntax": "recognition.onresult = function(event) { // The SpeechRecognitionEvent results property returns a SpeechRecognitionResultList object // The SpeechRecognitionResultList object contains SpeechRecognitionResult objects. // It has a getter so it can be accessed like an array // The first [0] returns the SpeechRecognitionResult at position 0. // Each SpeechRecognitionResult object contains SpeechRecognitionAlternative objects that contain individual results. // These also have getters so they can be accessed like arrays. // The second [0] returns the SpeechRecognitionAlternative at position 0. // We then return the transcript property of the SpeechRecognitionAlternative object var color = event.results[0][0].transcript; diagnostic.textContent = 'Result received: ' + color + '.'; bg.style.backgroundColor = color; }",
        "type": "Speech"
    },
    "SpeechRecognitionResultList.item": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognitionResultList.item",
        "params": [],
        "path": "dom/speechrecognitionresultlist/item",
        "syntax": "var myResult = speechRecognitionResultListInstance[0]; Returns A SpeechRecognitionResult object. Examples This code is excerpted from our Speech color changer example. recognition.onresult = function(event) { // The SpeechRecognitionEvent results property returns a SpeechRecognitionResultList object // The SpeechRecognitionResultList object contains SpeechRecognitionResult objects. // It has a getter so it can be accessed like an array // The first [0] returns the SpeechRecognitionResult at position 0. // Each SpeechRecognitionResult object contains SpeechRecognitionAlternative objects that contain individual results. // These also have getters so they can be accessed like arrays. // The second [0] returns the SpeechRecognitionAlternative at position 0. // We then return the transcript property of the SpeechRecognitionAlternative object var color = event.results[0][0].transcript; diagnostic.textContent = 'Result received: ' + color + '.'; bg.style.backgroundColor = color; }",
        "type": "Speech"
    },
    "SpeechRecognitionResultList.length": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechRecognitionResultList.length",
        "params": [],
        "path": "dom/speechrecognitionresultlist/length",
        "syntax": "var myLength = speechRecognitionResultListInstance.length; Returns A number. Examples This code is excerpted from our Speech color changer example. recognition.onresult = function(event) { // The SpeechRecognitionEvent results property returns a SpeechRecognitionResultList object // The SpeechRecognitionResultList object contains SpeechRecognitionResult objects. // It has a getter so it can be accessed like an array // The first [0] returns the SpeechRecognitionResult at position 0. // Each SpeechRecognitionResult object contains SpeechRecognitionAlternative objects that contain individual results. // These also have getters so they can be accessed like arrays. // The second [0] returns the SpeechRecognitionAlternative at position 0. // We then return the transcript property of the SpeechRecognitionAlternative object var color = event.results[0][0].transcript; diagnostic.textContent = 'Result received: ' + color + '.'; bg.style.backgroundColor = color; console.log(event.results.length);\n or  });",
        "type": "Speech"
    },
    "SpeechSynthesis": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechSynthesis",
        "params": [
            {
                "descr": "A Boolean that returns true if the SpeechSynthesis object is in a paused state.",
                "name": "SpeechSynthesis.paused Read only"
            },
            {
                "descr": "A Boolean that returns true if the utterance queue contains as-yet-unspoken utterances.",
                "name": "SpeechSynthesis.pending Read only"
            },
            {
                "descr": "A Boolean that returns true if an utterance is currently in the process of being spoken — even if SpeechSynthesis is in a paused state.",
                "name": "SpeechSynthesis.speaking Read only"
            },
            {
                "descr": "Fired when the list of SpeechSynthesisVoice objects that would be returned by the SpeechSynthesis.getVoices() method has changed.",
                "name": "SpeechSynthesis.onvoiceschanged"
            },
            {
                "descr": "Removes all utterances from the utterance queue.",
                "name": "SpeechSynthesis.cancel()"
            },
            {
                "descr": "Returns a list of SpeechSynthesisVoice objects representing all the available voices on the current device.",
                "name": "SpeechSynthesis.getVoices()"
            },
            {
                "descr": "Puts the SpeechSynthesis object into a paused state.",
                "name": "SpeechSynthesis.pause()"
            },
            {
                "descr": "Puts the SpeechSynthesis object into a non-paused state: resumes it if it was already paused.",
                "name": "SpeechSynthesis.resume()"
            },
            {
                "descr": "Adds an utterance to the utterance queue; it will be spoken when any other utterances queued before it have been spoken.",
                "name": "SpeechSynthesis.speak()"
            }
        ],
        "path": "dom/speechsynthesis",
        "syntax": "Draft      Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari     Basic support   33  Yes  49  No  21  7    cancel   33  Yes  49  No  21  7    getVoices   33  Yes  49  No  21  7    onvoiceschanged   33  Yes  49  No  No  No    pause   33  Yes  49  No  21  7    paused   33  Yes  49  No  21  7    pending   33  Yes  49  No  21  7    resume   33  Yes  49  No  21  7    speak   33  Yes  49  No  21  7    speaking   33  Yes  49  No  21  7        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet     Basic support   4.4.3  33  Yes  62   62  61 — 62Disabled   Disabled From version 61 until version 62 (exclusive): this feature is behind the media.webspeech.synth.enabled",
        "type": "Speech"
    },
    "SpeechSynthesis.cancel": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechSynthesis.cancel",
        "params": [],
        "path": "dom/speechsynthesis/cancel",
        "syntax": "speechSynthesisInstance.cancel();",
        "type": "Speech"
    },
    "SpeechSynthesis.getVoices": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechSynthesis.getVoices",
        "params": [],
        "path": "dom/speechsynthesis/getvoices",
        "syntax": "speechSynthesisInstance.getVoices();",
        "type": "Speech"
    },
    "SpeechSynthesis.onvoiceschanged": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechSynthesis.onvoiceschanged",
        "params": [],
        "path": "dom/speechsynthesis/onvoiceschanged",
        "syntax": "speechSynthesisInstance.onvoiceschanged = function() { ... };",
        "type": "Speech"
    },
    "SpeechSynthesis.pause": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechSynthesis.pause",
        "params": [],
        "path": "dom/speechsynthesis/pause",
        "syntax": "speechSynthesisInstance.pause();",
        "type": "Speech"
    },
    "SpeechSynthesis.paused": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechSynthesis.paused",
        "params": [],
        "path": "dom/speechsynthesis/paused",
        "syntax": "var amIPaused = speechSynthesisInstance.paused;  Value A Boolean. Examples var synth = window.speechSynthesis; synth.pause();\n or  var amIPaused = synth.paused; // will return true);",
        "type": "Speech"
    },
    "SpeechSynthesis.pending": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechSynthesis.pending",
        "params": [],
        "path": "dom/speechsynthesis/pending",
        "syntax": "var amIPending = speechSynthesisInstance.pending;  Value A Boolean. Examples var synth = window.speechSynthesis; var utterance1 = new SpeechSynthesisUtterance('How about we say this now? This is quite a long sentence to say.');\n or  var utterance2 = new SpeechSynthesisUtterance('We should say another sentence too, just to be on the safe side.');\n or  synth.speak(utterance1);\n or  synth.speak(utterance2);\n or  var amIPending = synth.pending; // will return true if utterance 1 is still being spoken and utterance 2 is in the queue);",
        "type": "Speech"
    },
    "SpeechSynthesis.resume": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechSynthesis.resume",
        "params": [],
        "path": "dom/speechsynthesis/resume",
        "syntax": "speechSynthesisInstance.resume();",
        "type": "Speech"
    },
    "SpeechSynthesis.speak": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechSynthesis.speak",
        "params": [
            {
                "descr": "A SpeechSynthesisUtterance object.",
                "name": "utterance"
            }
        ],
        "path": "dom/speechsynthesis/speak",
        "syntax": "speechSynthesisInstance.speak(utterance);",
        "type": "Speech"
    },
    "SpeechSynthesis.speaking": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechSynthesis.speaking",
        "params": [],
        "path": "dom/speechsynthesis/speaking",
        "syntax": "var amISpeaking = speechSynthesisInstance.speaking;  Value A Boolean. Examples var synth = window.speechSynthesis; var utterance1 = new SpeechSynthesisUtterance('How about we say this now? This is quite a long sentence to say.');\n or  var utterance2 = new SpeechSynthesisUtterance('We should say another sentence too, just to be on the safe side.');\n or  synth.speak(utterance1);\n or  synth.speak(utterance2);\n or  var amISpeaking = synth.speaking; // will return true if utterance 1 or utterance 2 are currently being spoken);",
        "type": "Speech"
    },
    "SpeechSynthesisErrorEvent.error": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechSynthesisErrorEvent.error",
        "params": [
            {
                "descr": "A SpeechSynthesis.cancel method call caused the SpeechSynthesisUtterance to be removed from the queue before it had begun being spoken.",
                "name": "canceled"
            },
            {
                "descr": "A SpeechSynthesis.cancel method call caused the SpeechSynthesisUtterance to be interrupted after it had begun being spoken and before it completed.",
                "name": "interrupted"
            },
            {
                "descr": "The operation couldn't be completed at this time because the user-agent couldn't access the audio output device (for example, the user may need to correct this by closing another application.)",
                "name": "audio-busy"
            },
            {
                "descr": "The operation couldn't be completed at this time because the user-agent couldn't identify an audio output device (for example, the user may need to connect a speaker or configure system settings.)",
                "name": "audio-hardware"
            },
            {
                "descr": "The operation couldn't be completed at this time because some required network communication failed.",
                "name": "network"
            },
            {
                "descr": "The operation couldn't be completed at this time because no synthesis engine was available (For example, the user may need to install or configure a synthesis engine.)",
                "name": "synthesis-unavailable"
            },
            {
                "descr": "The operation failed because the synthesis engine raised an error.",
                "name": "synthesis-failed"
            },
            {
                "descr": "No appropriate voice was available for the language set in SpeechSynthesisUtterance.lang.",
                "name": "language-unavailable"
            },
            {
                "descr": "The voice set in SpeechSynthesisUtterance.voice was not available.",
                "name": "voice-unavailable"
            },
            {
                "descr": "The contents of the SpeechSynthesisUtterance.text attribute was too long to synthesize.",
                "name": "text-too-long"
            },
            {
                "descr": "The content of the SpeechSynthesisUtterance.rate, SpeechSynthesisUtterance.pitch or SpeechSynthesisUtterance.volume property was not valid.",
                "name": "invalid-argument"
            }
        ],
        "path": "dom/speechsynthesiserrorevent/error",
        "syntax": "myError = event.error;  Value A DOMString containing an error code. Possible codes are:  canceled A SpeechSynthesis.cancel method call caused the SpeechSynthesisUtterance to be removed from the queue before it had begun being spoken. interrupted A SpeechSynthesis.cancel method call caused the SpeechSynthesisUtterance to be interrupted after it had begun being spoken and before it completed. audio-busy The operation couldn't be completed at this time because the user-agent couldn't access the audio output device (for example, the user may need to correct this by closing another application.) audio-hardware The operation couldn't be completed at this time because the user-agent couldn't identify an audio output device (for example, the user may need to connect a speaker or configure system settings.) network The operation couldn't be completed at this time because some required network communication failed. synthesis-unavailable The operation couldn't be completed at this time because no synthesis engine was available (For example, the user may need to install or configure a synthesis engine.) synthesis-failed The operation failed because the synthesis engine raised an error. language-unavailable No appropriate voice was available for the language set in SpeechSynthesisUtterance.lang",
        "type": "Speech"
    },
    "SpeechSynthesisEvent.charIndex": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechSynthesisEvent.charIndex",
        "params": [],
        "path": "dom/speechsynthesisevent/charindex",
        "syntax": "event.charIndex;  Value A number. Examples utterThis.onpause = function(event) { var char = event.utterance.text.charAt(event.charIndex);\n or  console.log('Speech paused at character ' + event.charIndex + ' of \"' + event.utterance.text + '\", which is \"' + char + '\".');\n or  });",
        "type": "Speech"
    },
    "SpeechSynthesisEvent.elapsedTime": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechSynthesisEvent.elapsedTime",
        "params": [],
        "path": "dom/speechsynthesisevent/elapsedtime",
        "syntax": "event.elapsedTime;  Value A float. Examples utterThis.onboundary = function(event) { console.log(event.name + ' boundary reached after ' + event.elapsedTime + ' seconds.');\n or  });",
        "type": "Speech"
    },
    "SpeechSynthesisEvent.name": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechSynthesisEvent.name",
        "params": [],
        "path": "dom/speechsynthesisevent/name",
        "syntax": "event.name;  Value A DOMString. Examples utterThis.onboundary = function(event) { console.log(event.name + ' boundary reached after ' + event.elapsedTime + ' milliseconds.');\n or  });",
        "type": "Speech"
    },
    "SpeechSynthesisEvent.utterance": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechSynthesisEvent.utterance",
        "params": [],
        "path": "dom/speechsynthesisevent/utterance",
        "syntax": "event.utterance;  Value A SpeechSynthesisUtterance object. Examples utterThis.onpause = function(event) { var char = event.utterance.text.charAt(event.charIndex);\n or  console.log('Speech paused at character ' + event.charIndex + ' of \"' + event.utterance.text + '\", which is \"' + char + '\".');\n or  });",
        "type": "Speech"
    },
    "SpeechSynthesisUtterance.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechSynthesisUtterance.constructor",
        "params": [
            {
                "descr": "A DOMString containing the text that will be synthesised when the utterance is spoken..",
                "name": "text"
            }
        ],
        "path": "dom/speechsynthesisutterance/speechsynthesisutterance",
        "syntax": "var utterThis = new SpeechSynthesisUtterance(text);",
        "type": "Speech"
    },
    "SpeechSynthesisUtterance.lang": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechSynthesisUtterance.lang",
        "params": [],
        "path": "dom/speechsynthesisutterance/lang",
        "syntax": "var myLang = speechSynthesisUtteranceInstance.lang; speechSynthesisUtteranceInstance.lang = 'en-US';  Value A DOMString representing a BCP 47 language tag. Examples var synth = window.speechSynthesis; var inputForm = document.querySelector('form');\n or  var inputTxt = document.querySelector('input');\n or  var voiceSelect = document.querySelector('select');\n or  var voices = synth.getVoices();\n or  ... inputForm.onsubmit = function(event) { event.preventDefault();\n or  var utterThis = new SpeechSynthesisUtterance(inputTxt.value);\n or  var selectedOption = voiceSelect.selectedOptions[0].getAttribute('data-name');\n or  for(i = 0; i < voices.length ; i++) { if(voices[i].name === selectedOption) { utterThis.voice = voices[i]; } } utterThis.lang = 'en-US'; synth.speak(utterThis);\n or  inputTxt.blur();\n or  });",
        "type": "Speech"
    },
    "SpeechSynthesisUtterance.onboundary": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechSynthesisUtterance.onboundary",
        "params": [],
        "path": "dom/speechsynthesisutterance/onboundary",
        "syntax": "speechSynthesisUtteranceInstance.onboundary = function() { ... };",
        "type": "Speech"
    },
    "SpeechSynthesisUtterance.onend": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechSynthesisUtterance.onend",
        "params": [],
        "path": "dom/speechsynthesisutterance/onend",
        "syntax": "speechSynthesisUtteranceInstance.onend = function() { ... };",
        "type": "Speech"
    },
    "SpeechSynthesisUtterance.onerror": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechSynthesisUtterance.onerror",
        "params": [],
        "path": "dom/speechsynthesisutterance/onerror",
        "syntax": "speechSynthesisUtteranceInstance.onerror = function() { ... };",
        "type": "Speech"
    },
    "SpeechSynthesisUtterance.onmark": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechSynthesisUtterance.onmark",
        "params": [],
        "path": "dom/speechsynthesisutterance/onmark",
        "syntax": "speechSynthesisUtteranceInstance.onmark = function() { ... };",
        "type": "Speech"
    },
    "SpeechSynthesisUtterance.onpause": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechSynthesisUtterance.onpause",
        "params": [],
        "path": "dom/speechsynthesisutterance/onpause",
        "syntax": "speechSynthesisUtteranceInstance.onpause = function() { ... };",
        "type": "Speech"
    },
    "SpeechSynthesisUtterance.onresume": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechSynthesisUtterance.onresume",
        "params": [],
        "path": "dom/speechsynthesisutterance/onresume",
        "syntax": "speechSynthesisUtteranceInstance.onresume = function() { ... };",
        "type": "Speech"
    },
    "SpeechSynthesisUtterance.onstart": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechSynthesisUtterance.onstart",
        "params": [],
        "path": "dom/speechsynthesisutterance/onstart",
        "syntax": "speechSynthesisUtteranceInstance.onstart = function() { ... };",
        "type": "Speech"
    },
    "SpeechSynthesisUtterance.pitch": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechSynthesisUtterance.pitch",
        "params": [],
        "path": "dom/speechsynthesisutterance/pitch",
        "syntax": "// default 1 speechSynthesisUtteranceInstance.pitch = 1.5;  Value A float representing the pitch value. It can range between 0 (lowest) and 2 (highest), with 1 being the default pitch for the current platform or voice. Some speech synthesis engines or voices may constrain the minimum and maximum rates further. If SSML is used, this value will be overridden by prosody tags in the markup.",
        "type": "Speech"
    },
    "SpeechSynthesisUtterance.rate": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechSynthesisUtterance.rate",
        "params": [],
        "path": "dom/speechsynthesisutterance/rate",
        "syntax": "var myRate = speechSynthesisUtteranceInstance.rate; speechSynthesisUtteranceInstance.rate = 1.5;  Value A float representing the rate value. It can range between 0.1 (lowest) and 10 (highest), with 1 being the default pitch for the current platform or voice, which should correspond to a normal speaking rate. Other values act as a percentage relative to this, so for example 2 is twice as fast, 0.5 is half as fast, etc.",
        "type": "Speech"
    },
    "SpeechSynthesisUtterance.text": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechSynthesisUtterance.text",
        "params": [],
        "path": "dom/speechsynthesisutterance/text",
        "syntax": "var myText = speechSynthesisUtteranceInstance.text; speechSynthesisUtteranceInstance.text = 'Hello I am speaking';  Value A DOMString represenitng the text to the synthesised. The maximum length of the text that can be spoken in each utterance is 32,767 characters. Examples var synth = window.speechSynthesis; var inputForm = document.querySelector('form');\n or  var inputTxt = document.querySelector('input');\n or  var voiceSelect = document.querySelector('select');\n or  var voices = synth.getVoices();\n or  ... inputForm.onsubmit = function(event) { event.preventDefault();\n or  var utterThis = new SpeechSynthesisUtterance(inputTxt.value);\n or  var selectedOption = voiceSelect.selectedOptions[0].getAttribute('data-name');\n or  for(i = 0; i < voices.length ; i++) { if(voices[i].name === selectedOption) { utterThis.voice = voices[i]; } } console.log(utterThis.text);\n or  synth.speak(utterThis);\n or  inputTxt.blur();\n or  });",
        "type": "Speech"
    },
    "SpeechSynthesisUtterance.voice": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechSynthesisUtterance.voice",
        "params": [],
        "path": "dom/speechsynthesisutterance/voice",
        "syntax": "var myVoice = speechSynthesisUtteranceInstance.voice; speechSynthesisUtteranceInstance.voice = speechSynthesisVoiceInstance;  Value A SpeechSynthesisVoice object. Examples var synth = window.speechSynthesis; var inputForm = document.querySelector('form');\n or  var inputTxt = document.querySelector('input');\n or  var voiceSelect = document.querySelector('select');\n or  var voices = synth.getVoices();\n or  ... inputForm.onsubmit = function(event) { event.preventDefault();\n or  var utterThis = new SpeechSynthesisUtterance(inputTxt.value);\n or  var selectedOption = voiceSelect.selectedOptions[0].getAttribute('data-name');\n or  for(i = 0; i < voices.length ; i++) { if(voices[i].name === selectedOption) { utterThis.voice = voices[i]; } } synth.speak(utterThis);\n or  inputTxt.blur();\n or  });",
        "type": "Speech"
    },
    "SpeechSynthesisUtterance.volume": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechSynthesisUtterance.volume",
        "params": [],
        "path": "dom/speechsynthesisutterance/volume",
        "syntax": "var myVolume = speechSynthesisUtteranceInstance.volume; speechSynthesisUtteranceInstance.volume = 0.5;  Value A float that represents the volume value, between 0 (lowest) and 1 (highest.)",
        "type": "Speech"
    },
    "SpeechSynthesisVoice.default": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechSynthesisVoice.default",
        "params": [],
        "path": "dom/speechsynthesisvoice/default",
        "syntax": "var amIDefault = speechSynthesisVoiceInstance.default;  Value A Boolean. Examples for(i = 0; i < voices.length ; i++) { var option = document.createElement('option');\n or  option.textContent = voices[i].name + ' (' + voices[i].lang + ')'; if(voices[i].default) { option.textContent += ' -- DEFAULT'; } option.setAttribute('data-lang', voices[i].lang);\n or  option.setAttribute('data-name', voices[i].name);\n or  voiceSelect.appendChild(option);\n or  });",
        "type": "Speech"
    },
    "SpeechSynthesisVoice.lang": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechSynthesisVoice.lang",
        "params": [],
        "path": "dom/speechsynthesisvoice/lang",
        "syntax": "var myLang = speechSynthesisVoiceInstance.lang;  Value A DOMString representing the language of the device. Examples for(i = 0; i < voices.length ; i++) { var option = document.createElement('option');\n or  option.textContent = voices[i].name + ' (' + voices[i].lang + ')'; if(voices[i].default) { option.textContent += ' -- DEFAULT'; } option.setAttribute('data-lang', voices[i].lang);\n or  option.setAttribute('data-name', voices[i].name);\n or  voiceSelect.appendChild(option);\n or  });",
        "type": "Speech"
    },
    "SpeechSynthesisVoice.localService": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechSynthesisVoice.localService",
        "params": [],
        "path": "dom/speechsynthesisvoice/localservice",
        "syntax": "var amILocal = speechSynthesisVoiceInstance.localService;  Value A Boolean. Examples for(i = 0; i < voices.length ; i++) { var option = document.createElement('option');\n or  option.textContent = voices[i].name + ' (' + voices[i].lang + ')'; if(voices[i].default) { option.textContent += ' -- DEFAULT'; } console.log(voices[i].localService);\n or  option.setAttribute('data-lang', voices[i].lang);\n or  option.setAttribute('data-name', voices[i].name);\n or  voiceSelect.appendChild(option);\n or  });",
        "type": "Speech"
    },
    "SpeechSynthesisVoice.name": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechSynthesisVoice.name",
        "params": [],
        "path": "dom/speechsynthesisvoice/name",
        "syntax": "var voiceName = speechSynthesisVoiceInstance.name;  Value A DOMString representing the name of the voice. Examples for(i = 0; i < voices.length ; i++) { var option = document.createElement('option');\n or  option.textContent = voices[i].name + ' (' + voices[i].lang + ')'; if(voices[i].default) { option.textContent += ' -- DEFAULT'; } option.setAttribute('data-lang', voices[i].lang);\n or  option.setAttribute('data-name', voices[i].name);\n or  voiceSelect.appendChild(option);\n or  });",
        "type": "Speech"
    },
    "SpeechSynthesisVoice.voiceURI": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "SpeechSynthesisVoice.voiceURI",
        "params": [],
        "path": "dom/speechsynthesisvoice/voiceuri",
        "syntax": "var myVoiceURI = speechSynthesisVoiceInstance.voiceURI;  Value A DOMString representing the URI of the voice. This is a generic URI and can point to local or remote services, e.g. it could be a proprietary system URN or a a URL to a remote service. Examples for(i = 0; i < voices.length ; i++) { var option = document.createElement('option');\n or  option.textContent = voices[i].name + ' (' + voices[i].lang + ')'; if(voices[i].default) { option.textContent += ' -- DEFAULT'; } console.log(voices[i].voiceURI);\n or  // On Mac, this returns URNs, for example 'urn:moz-tts:osx:com.apple.speech.synthesis.voice.daniel' option.setAttribute('data-lang', voices[i].lang);\n or  option.setAttribute('data-name', voices[i].name);\n or  voiceSelect.appendChild(option);\n or  }');",
        "type": "Speech"
    },
    "Spread syntax": {
        "descr": "Spread syntax allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.",
        "name": "Spread syntax",
        "params": [],
        "path": "javascript/operators/spread_syntax",
        "syntax": "myFunction(...iterableObj);",
        "type": "Operators"
    },
    "StaticRange.constructor": {
        "descr": "The StaticRange() constructor creates a new StaticRange object which provides attributes that track the start and end position of a range, and a boolean attribute indicating whether the current range is collapsed into a single position.",
        "name": "StaticRange.constructor",
        "params": [
            {
                "descr": "Options are as follows:   startContainer: The start Node for the range. ",
                "name": "options"
            }
        ],
        "path": "dom/staticrange/staticrange",
        "syntax": "var staticRange = new StaticRange(options)",
        "type": "Range"
    },
    "StaticRange.toRange": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "StaticRange.toRange",
        "params": [],
        "path": "dom/staticrange/torange",
        "syntax": "var range = staticRange.toRange()",
        "type": "Range"
    },
    "StereoPannerNode.constructor": {
        "descr": "The StereoPannerNode() constructor of the Web Audio API creates a new StereoPannerNode object which is an AudioNode that represents a simple stereo panner node that can be used to pan an audio stream left or right.",
        "name": "StereoPannerNode.constructor",
        "params": [
            {
                "descr": "A reference to an AudioContext.",
                "name": "context"
            },
            {
                "descr": "Options are as follows:   pan: A floating point number in the range [-1,1] indicating the position of an AudioNode in an output image. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/stereopannernode/stereopannernode",
        "syntax": "var stereoPannerNode = StereoPannerNode(context, options)",
        "type": "Audio"
    },
    "StereoPannerNode.pan": {
        "descr": "The pan property of the StereoPannerNode interface is an a-rate AudioParam representing the amount of panning to apply. The value can range between -1 (full left pan) and 1 (full right pan).",
        "name": "StereoPannerNode.pan",
        "params": [],
        "path": "dom/stereopannernode/pan",
        "syntax": "var audioCtx = new AudioContext();\n or  var panNode = audioCtx.createStereoPanner();\n or  panNode.pan.value = -0.5;);",
        "type": "Audio"
    },
    "Storage.clear": {
        "descr": "The clear() method of the Storage interface, when invoked, clears all stored keys.",
        "name": "Storage.clear",
        "params": [],
        "path": "dom/storage/clear",
        "syntax": "storage.clear();",
        "type": "Storage"
    },
    "Storage.getItem": {
        "descr": "The getItem() method of the Storage interface, when passed a key name, will return that key's value or null if the key does not exist.",
        "name": "Storage.getItem",
        "params": [
            {
                "descr": "A DOMString containing the name of the key you want to retrieve the value of.",
                "name": "keyName"
            }
        ],
        "path": "dom/storage/getitem",
        "syntax": "var aValue = localStorage.getItem(keyName);",
        "type": "Storage"
    },
    "Storage.key": {
        "descr": "The key() method of the Storage interface, when passed a number n, returns the name of the nth key in the storage. The order of keys is user-agent defined, so you should not rely on it.",
        "name": "Storage.key",
        "params": [
            {
                "descr": "An integer representing the number of the key you want to get the name of. ",
                "name": "index"
            }
        ],
        "path": "dom/storage/key",
        "syntax": "var aKeyName = storage.key(index);",
        "type": "Storage"
    },
    "Storage.length": {
        "descr": "The length read-only property of the Storage interface returns an integer representing the number of data items stored in the Storage object.",
        "name": "Storage.length",
        "params": [],
        "path": "dom/storage/length",
        "syntax": "var aLength = Storage.length; Return value An integer. Example The following function adds three data items to the local storage for the current domain, then returns the number of items in the storage: function populateStorage() { localStorage.setItem('bgcolor', 'yellow');\n or  localStorage.setItem('font', 'Helvetica');\n or  localStorage.setItem('image', 'cats.png');\n or  localStorage.length; // should return 3 });",
        "type": "Storage"
    },
    "Storage.removeItem": {
        "descr": "The removeItem() method of the Storage interface, when passed a key name, will remove that key from the storage if it exists. If there is no item associated with the given key, this method will do nothing.",
        "name": "Storage.removeItem",
        "params": [
            {
                "descr": "A DOMString containing the name of the key you want to remove.",
                "name": "keyName"
            }
        ],
        "path": "dom/storage/removeitem",
        "syntax": "storage.removeItem(keyName);",
        "type": "Storage"
    },
    "Storage.setItem": {
        "descr": "The setItem() method of the Storage interface, when passed a key name and value, will add that key to the storage, or update that key's value if it already exists.",
        "name": "Storage.setItem",
        "params": [
            {
                "descr": "A DOMString containing the name of the key you want to create/update.",
                "name": "keyName"
            },
            {
                "descr": "A DOMString containing the value you want to give the key you are creating/updating.",
                "name": "keyValue"
            }
        ],
        "path": "dom/storage/setitem",
        "syntax": "storage.setItem(keyName, keyValue);",
        "type": "Storage"
    },
    "StorageEstimate.quota": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "StorageEstimate.quota",
        "params": [],
        "path": "dom/storageestimate/quota",
        "syntax": "quota = StorageEstimate.quota;  Value A numeric value specifying an approximation of the total amount of storage space available for use by the application. Example In this example, we obtain the usage estimates and present the percentage of storage capacity currently used to the user. HTML content <p> You're currently using about <span id=\"percent\"> </span>% of your available storage. </p>  JavaScript content navigator.storage.estimate().then(function(estimate) { document.getElementById(\"percent\").innerHTML = (estimate.usage / estimate.quota).toFixed(2);\n or  });",
        "type": "Storage"
    },
    "StorageEstimate.usage": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "StorageEstimate.usage",
        "params": [],
        "path": "dom/storageestimate/usage",
        "syntax": "usage = StorageEstimate.usage;  Value A numeric value specifying an approximation of the total amount of storage space available for use by the application. Example In this example, we obtain the usage estimates and present the percentage of storage capacity currently used to the user. HTML content <p> You're currently using about <span id=\"percent\"> </span>% of your available storage. </p>  JavaScript content navigator.storage.estimate().then(function(estimate) { document.getElementById(\"percent\").innerHTML = (estimate.usage / estimate.quota).toFixed(2);\n or  });",
        "type": "Storage"
    },
    "StorageManager.estimate": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "StorageManager.estimate",
        "params": [],
        "path": "dom/storagemanager/estimate",
        "syntax": "var estimatePromise = StorageManager.estimate();",
        "type": "Storage"
    },
    "StorageManager.persist": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "StorageManager.persist",
        "params": [],
        "path": "dom/storagemanager/persist",
        "syntax": "navigator.storage.persist().then(function(persistent) { ... })",
        "type": "Storage"
    },
    "StorageManager.persisted": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "StorageManager.persisted",
        "params": [],
        "path": "dom/storagemanager/persisted",
        "syntax": "navigator.storage.persisted().then(function(persistent) { ... })",
        "type": "Storage"
    },
    "StorageQuota.queryInfo": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "StorageQuota.queryInfo",
        "params": [],
        "path": "dom/storagequota/queryinfo",
        "syntax": "StorageQuota.queryInfo().then(function(storageInfo) { ... })",
        "type": "Storage"
    },
    "StorageQuota.requestPersistentQuota": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "StorageQuota.requestPersistentQuota",
        "params": [],
        "path": "dom/storagequota/requestpersistentquota",
        "syntax": "StorageQuota.requestPersistentQuota().then(function(storageInfo) { ... })",
        "type": "Storage"
    },
    "Streams API: Concepts": {
        "descr": "A readable stream is a data source represented in JavaScript by a ReadableStream object that flows from an underlying source — this is a resource somewhere on the network or elsewhere on your domain that you want to get data from.",
        "name": "Streams API: Concepts",
        "params": [],
        "path": "dom/streams_api/concepts",
        "syntax": "ReadableStream.ReadableStream()",
        "type": "Media Streams"
    },
    "Streams API: Using readable streams": {
        "descr": "Note: This article assumes that you understand the use cases of readable streams, and are aware of the high-level concepts. If not, we suggest that you first read the Streams concepts and usage overview and dedicated Streams API concepts article, then come back.",
        "name": "Streams API: Using readable streams",
        "params": [],
        "path": "dom/streams_api/using_readable_streams",
        "syntax": "Response out of it, consume it as a Blob, create an object URL out of that blob using URL.createObjectURL()",
        "type": "Media Streams"
    },
    "Streams API: Using writable streams": {
        "descr": "As a JavaScript developer, programmatically writing data to a stream is very useful! This article explains the Streams API’s writable stream functionality.",
        "name": "Streams API: Using writable streams",
        "params": [],
        "path": "dom/streams_api/using_writable_streams",
        "syntax": "const stream = new WritableStream({ start(controller) { }, write(chunk,controller) { }, close(controller) { }, abort(reason) { } }, { highWaterMark, size() });",
        "type": "Media Streams"
    },
    "Strict mode": {
        "descr": "JavaScript's strict mode, introduced in ECMAScript 5, is a way to opt in to a restricted variant of JavaScript, thereby implicitly opting-out of \"sloppy mode\". Strict mode isn't just a subset: it intentionally has different semantics from normal code. Browsers not supporting strict mode will run strict mode code with different behavior from browsers that do, so don't rely on strict mode without feature-testing for support for the relevant aspects of strict mode. Strict mode code and non-strict mode code can coexist, so scripts can opt into strict mode incrementally.",
        "name": "Strict mode",
        "params": [],
        "path": "javascript/strict_mode",
        "syntax": "{} braces; attempting to apply it to such contexts does nothing. eval code, Function code, event handler attributes, strings passed to WindowTimers.setTimeout()",
        "type": "Miscellaneous"
    },
    "Strict mode: Transitioning to strict mode": {
        "descr": "ECMAScript 5 introduced strict mode which is now implemented in all major browsers (including IE10). While making web browsers interpret code as strict is easy (just add 'use strict'; at the top of your source code), transitioning an existing code base to strict mode requires a bit more work.",
        "name": "Strict mode: Transitioning to strict mode",
        "params": [],
        "path": "javascript/strict_mode/transitioning_to_strict_mode",
        "syntax": "'use strict';, the following cases will throw a SyntaxError before the script is executing:  Octal syntax var n = 023;   with statement Using delete on a variable name delete myVariable; Using eval or arguments as variable or function argument name Using one of the newly reserved keywords (in prevision for ECMAScript 2015): implements",
        "type": "Miscellaneous"
    },
    "String": {
        "descr": "The String global object is a constructor for strings or a sequence of characters.",
        "name": "String",
        "params": [
            {
                "descr": "Anything to be converted to a string.",
                "name": "thing"
            },
            {
                "descr": "Allows the addition of properties to a String object.",
                "name": "String.prototype"
            },
            {
                "descr": "Returns a string created by using the specified sequence of Unicode values.",
                "name": "String.fromCharCode()"
            },
            {
                "descr": "Returns a string created by using the specified sequence of code points.",
                "name": "String.fromCodePoint()"
            },
            {
                "descr": "Returns a string created from a raw template string.",
                "name": "String.raw()"
            },
            {
                "descr": "Specifies the function that creates an object's prototype.",
                "name": "String.prototype.constructor"
            },
            {
                "descr": "Reflects the length of the string.",
                "name": "String.prototype.length"
            },
            {
                "descr": "Used to access the character in the Nth position where N is an integer between 0 and one less than the value of length. ",
                "name": "N"
            },
            {
                "descr": "Returns the character (exactly one UTF-16 code unit) at the specified index.",
                "name": "String.prototype.charAt()"
            },
            {
                "descr": "Returns a number that is the UTF-16 code unit value at the given index.",
                "name": "String.prototype.charCodeAt()"
            },
            {
                "descr": "Returns a nonnegative integer Number that is the code point value of the UTF-16 encoded code point starting at the specified index.",
                "name": "String.prototype.codePointAt()"
            },
            {
                "descr": "Combines the text of two strings and returns a new string.",
                "name": "String.prototype.concat()"
            },
            {
                "descr": "Determines whether one string may be found within another string.",
                "name": "String.prototype.includes()"
            },
            {
                "descr": "Determines whether a string ends with the characters of another string.",
                "name": "String.prototype.endsWith()"
            },
            {
                "descr": "Returns the index within the calling String object of the first occurrence of the specified value, or -1 if not found.",
                "name": "String.prototype.indexOf()"
            },
            {
                "descr": "Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found.",
                "name": "String.prototype.lastIndexOf()"
            },
            {
                "descr": "Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.",
                "name": "String.prototype.localeCompare()"
            },
            {
                "descr": "Used to match a regular expression against a string.",
                "name": "String.prototype.match()"
            },
            {
                "descr": "Returns the Unicode Normalization Form of the calling string value.",
                "name": "String.prototype.normalize()"
            },
            {
                "descr": "Pads the current string from the end with a given string to create a new string from a given length.",
                "name": "String.prototype.padEnd()"
            },
            {
                "descr": "Pads the current string from the start with a given string to create a new string from a given length.",
                "name": "String.prototype.padStart()"
            },
            {
                "descr": "Wraps the string in double quotes (\"\"\").",
                "name": "String.prototype.quote()"
            },
            {
                "descr": "Returns a string consisting of the elements of the object repeated the given times.",
                "name": "String.prototype.repeat()"
            },
            {
                "descr": "Used to find a match between a regular expression and a string, and to replace the matched substring with a new substring.",
                "name": "String.prototype.replace()"
            },
            {
                "descr": "Executes the search for a match between a regular expression and a specified string.",
                "name": "String.prototype.search()"
            },
            {
                "descr": "Extracts a section of a string and returns a new string.",
                "name": "String.prototype.slice()"
            },
            {
                "descr": "Splits a String object into an array of strings by separating the string into substrings.",
                "name": "String.prototype.split()"
            },
            {
                "descr": "Determines whether a string begins with the characters of another string.",
                "name": "String.prototype.startsWith()"
            },
            {
                "descr": "Returns the characters in a string beginning at the specified location through the specified number of characters.",
                "name": "String.prototype.substr()"
            },
            {
                "descr": "Returns the characters in a string between two indexes into the string.",
                "name": "String.prototype.substring()"
            },
            {
                "descr": "The characters within a string are converted to lower case while respecting the current locale. ",
                "name": "String.prototype.toLocaleLowerCase()"
            },
            {
                "descr": "The characters within a string are converted to upper case while respecting the current locale. ",
                "name": "String.prototype.toLocaleUpperCase()"
            },
            {
                "descr": "Returns the calling string value converted to lower case.",
                "name": "String.prototype.toLowerCase()"
            },
            {
                "descr": "Returns an object literal representing the specified object; you can use this value to create a new object. ",
                "name": "String.prototype.toSource()"
            },
            {
                "descr": "Returns a string representing the specified object. ",
                "name": "String.prototype.toString()"
            },
            {
                "descr": "Returns the calling string value converted to uppercase.",
                "name": "String.prototype.toUpperCase()"
            },
            {
                "descr": "Trims whitespace from the beginning and end of the string. ",
                "name": "String.prototype.trim()"
            },
            {
                "descr": "Trims whitespace from the beginning of the string.",
                "name": "String.prototype.trimStart() String.prototype.trimLeft()"
            },
            {
                "descr": "Trims whitespace from the end of the string.",
                "name": "String.prototype.trimEnd() String.prototype.trimRight()"
            },
            {
                "descr": "Returns the primitive value of the specified object. ",
                "name": "String.prototype.valueOf()"
            },
            {
                "descr": "Returns a new Iterator object that iterates over the code points of a String value, returning each code point as a String value.",
                "name": "String.prototype[@@iterator]()"
            },
            {
                "descr": "<a name=\"name\"> (hypertext target)",
                "name": "String.prototype.anchor()"
            },
            {
                "descr": "<big>",
                "name": "String.prototype.big()"
            },
            {
                "descr": "<blink>",
                "name": "String.prototype.blink()"
            },
            {
                "descr": "<b>",
                "name": "String.prototype.bold()"
            },
            {
                "descr": "<tt>",
                "name": "String.prototype.fixed()"
            },
            {
                "descr": "<font color=\"color\">",
                "name": "String.prototype.fontcolor()"
            },
            {
                "descr": "<font size=\"size\">",
                "name": "String.prototype.fontsize()"
            },
            {
                "descr": "<i>",
                "name": "String.prototype.italics()"
            },
            {
                "descr": "<a href=\"url\"> (link to URL)",
                "name": "String.prototype.link()"
            },
            {
                "descr": "<small>",
                "name": "String.prototype.small()"
            },
            {
                "descr": "<strike>",
                "name": "String.prototype.strike()"
            },
            {
                "descr": "<sub>",
                "name": "String.prototype.sub()"
            },
            {
                "descr": "<sup>",
                "name": "String.prototype.sup()"
            }
        ],
        "path": "javascript/global_objects/string",
        "syntax": "'string text' \"string text\" \"中文 español Deutsch English देवनागरी العربية português বাংলা русский 日本語 ਪੰਜਾਬੀ 한국어 தமிழ் עברית\" Strings can also be created using the String global object directly: String(thing)",
        "type": "String"
    },
    "String.fromCharCode": {
        "descr": "The static String.fromCharCode() method returns a string created from the specified sequence of UTF-16 code units.",
        "name": "String.fromCharCode",
        "params": [
            {
                "descr": "A sequence of numbers that are UTF-16 code units. ",
                "name": "num1, ..., numN"
            }
        ],
        "path": "javascript/global_objects/string/fromcharcode",
        "syntax": "String.fromCharCode(num1[, ...[, numN]])",
        "type": "String"
    },
    "String.fromCodePoint": {
        "descr": "The static String.fromCodePoint() method returns a string created by using the specified sequence of code points.",
        "name": "String.fromCodePoint",
        "params": [
            {
                "descr": "A sequence of code points.",
                "name": "num1, ..., numN"
            }
        ],
        "path": "javascript/global_objects/string/fromcodepoint",
        "syntax": "String.fromCodePoint(num1[, ...[, numN]])",
        "type": "String"
    },
    "String.prototype": {
        "descr": "The String.prototype property represents the String prototype object.",
        "name": "String.prototype",
        "params": [
            {
                "descr": "Specifies the function that creates an object's prototype.",
                "name": "String.prototype.constructor"
            },
            {
                "descr": "Reflects the length of the string.",
                "name": "String.prototype.length"
            },
            {
                "descr": "Used to access the character in the Nth position where N is an integer between 0 and one less than the value of length. ",
                "name": "N"
            },
            {
                "descr": "Returns the character (exactly one UTF-16 code unit) at the specified index.",
                "name": "String.prototype.charAt()"
            },
            {
                "descr": "Returns a number that is the UTF-16 code unit value at the given index.",
                "name": "String.prototype.charCodeAt()"
            },
            {
                "descr": "Returns a nonnegative integer Number that is the code point value of the UTF-16 encoded code point starting at the specified index.",
                "name": "String.prototype.codePointAt()"
            },
            {
                "descr": "Combines the text of two strings and returns a new string.",
                "name": "String.prototype.concat()"
            },
            {
                "descr": "Determines whether one string may be found within another string.",
                "name": "String.prototype.includes()"
            },
            {
                "descr": "Determines whether a string ends with the characters of another string.",
                "name": "String.prototype.endsWith()"
            },
            {
                "descr": "Returns the index within the calling String object of the first occurrence of the specified value, or -1 if not found.",
                "name": "String.prototype.indexOf()"
            },
            {
                "descr": "Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found.",
                "name": "String.prototype.lastIndexOf()"
            },
            {
                "descr": "Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.",
                "name": "String.prototype.localeCompare()"
            },
            {
                "descr": "Used to match a regular expression against a string.",
                "name": "String.prototype.match()"
            },
            {
                "descr": "Returns the Unicode Normalization Form of the calling string value.",
                "name": "String.prototype.normalize()"
            },
            {
                "descr": "Pads the current string from the end with a given string to create a new string from a given length.",
                "name": "String.prototype.padEnd()"
            },
            {
                "descr": "Pads the current string from the start with a given string to create a new string from a given length.",
                "name": "String.prototype.padStart()"
            },
            {
                "descr": "Wraps the string in double quotes (\"\"\").",
                "name": "String.prototype.quote()"
            },
            {
                "descr": "Returns a string consisting of the elements of the object repeated the given times.",
                "name": "String.prototype.repeat()"
            },
            {
                "descr": "Used to find a match between a regular expression and a string, and to replace the matched substring with a new substring.",
                "name": "String.prototype.replace()"
            },
            {
                "descr": "Executes the search for a match between a regular expression and a specified string.",
                "name": "String.prototype.search()"
            },
            {
                "descr": "Extracts a section of a string and returns a new string.",
                "name": "String.prototype.slice()"
            },
            {
                "descr": "Splits a String object into an array of strings by separating the string into substrings.",
                "name": "String.prototype.split()"
            },
            {
                "descr": "Determines whether a string begins with the characters of another string.",
                "name": "String.prototype.startsWith()"
            },
            {
                "descr": "Returns the characters in a string beginning at the specified location through the specified number of characters.",
                "name": "String.prototype.substr()"
            },
            {
                "descr": "Returns the characters in a string between two indexes into the string.",
                "name": "String.prototype.substring()"
            },
            {
                "descr": "The characters within a string are converted to lower case while respecting the current locale. ",
                "name": "String.prototype.toLocaleLowerCase()"
            },
            {
                "descr": "The characters within a string are converted to upper case while respecting the current locale. ",
                "name": "String.prototype.toLocaleUpperCase()"
            },
            {
                "descr": "Returns the calling string value converted to lower case.",
                "name": "String.prototype.toLowerCase()"
            },
            {
                "descr": "Returns an object literal representing the specified object; you can use this value to create a new object. ",
                "name": "String.prototype.toSource()"
            },
            {
                "descr": "Returns a string representing the specified object. ",
                "name": "String.prototype.toString()"
            },
            {
                "descr": "Returns the calling string value converted to uppercase.",
                "name": "String.prototype.toUpperCase()"
            },
            {
                "descr": "Trims whitespace from the beginning and end of the string. ",
                "name": "String.prototype.trim()"
            },
            {
                "descr": "Trims whitespace from the beginning of the string.",
                "name": "String.prototype.trimStart() String.prototype.trimLeft()"
            },
            {
                "descr": "Trims whitespace from the end of the string.",
                "name": "String.prototype.trimEnd() String.prototype.trimRight()"
            },
            {
                "descr": "Returns the primitive value of the specified object. ",
                "name": "String.prototype.valueOf()"
            },
            {
                "descr": "Returns a new Iterator object that iterates over the code points of a String value, returning each code point as a String value.",
                "name": "String.prototype[@@iterator]()"
            },
            {
                "descr": "<a name=\"name\"> (hypertext target)",
                "name": "String.prototype.anchor()"
            },
            {
                "descr": "<big>",
                "name": "String.prototype.big()"
            },
            {
                "descr": "<blink>",
                "name": "String.prototype.blink()"
            },
            {
                "descr": "<b>",
                "name": "String.prototype.bold()"
            },
            {
                "descr": "<tt>",
                "name": "String.prototype.fixed()"
            },
            {
                "descr": "<font color=\"color\">",
                "name": "String.prototype.fontcolor()"
            },
            {
                "descr": "<font size=\"size\">",
                "name": "String.prototype.fontsize()"
            },
            {
                "descr": "<i>",
                "name": "String.prototype.italics()"
            },
            {
                "descr": "<a href=\"url\"> (link to URL)",
                "name": "String.prototype.link()"
            },
            {
                "descr": "<small>",
                "name": "String.prototype.small()"
            },
            {
                "descr": "<strike>",
                "name": "String.prototype.strike()"
            },
            {
                "descr": "<sub>",
                "name": "String.prototype.sub()"
            },
            {
                "descr": "<sup>",
                "name": "String.prototype.sup()"
            }
        ],
        "path": "javascript/global_objects/string/prototype",
        "syntax": "String.prototype.split()",
        "type": "String"
    },
    "String.raw": {
        "descr": "The static String.raw() method is a tag function of template literals, similar to the r prefix in Python or the @ prefix in C# for string literals (yet there is a difference: see explanations in this issue). It's used to get the raw string form of template strings, that is, substitutions (e.g. ${foo}) are processed, but escapes (e.g. \\n) are not.",
        "name": "String.raw",
        "params": [
            {
                "descr": "Well-formed template call site object, like { raw: ['foo', 'bar', 'baz'] }.",
                "name": "callSite"
            },
            {
                "descr": "Contains substitution values.",
                "name": "...substitutions"
            },
            {
                "descr": "A template string, optionally with substitutions (${...}).",
                "name": "templateString"
            },
            {
                "descr": "A TypeError is thrown if the first argument is not a well formed object.",
                "name": "TypeError"
            }
        ],
        "path": "javascript/global_objects/string/raw",
        "syntax": "String.raw(callSite, ...substitutions) String.raw`templateString`",
        "type": "String"
    },
    "StylePropertyMap.append": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "StylePropertyMap.append",
        "params": [
            {
                "descr": "An identifier indicating the stylistic feature (e.g. ",
                "name": "property"
            },
            {
                "descr": "The value the given property should have.",
                "name": "value"
            }
        ],
        "path": "dom/stylepropertymap/append",
        "syntax": "StylePropertyMap.append(property,value)",
        "type": "CSS"
    },
    "StylePropertyMap.clear": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "StylePropertyMap.clear",
        "params": [],
        "path": "dom/stylepropertymap/clear",
        "syntax": "StylePropertMap.clear()",
        "type": "CSS"
    },
    "StylePropertyMap.delete": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "StylePropertyMap.delete",
        "params": [
            {
                "descr": "An identifier indicating the stylistic feature (e.g. ",
                "name": "property"
            }
        ],
        "path": "dom/stylepropertymap/delete",
        "syntax": "StylePropertyMap.delete(property)",
        "type": "CSS"
    },
    "StylePropertyMap.set": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "StylePropertyMap.set",
        "params": [
            {
                "descr": "An identifier indicating the stylistic feature (e.g. ",
                "name": "property"
            },
            {
                "descr": "The value the given property should have.",
                "name": "value"
            }
        ],
        "path": "dom/stylepropertymap/set",
        "syntax": "StylePropertyMap.set(property,value)",
        "type": "CSS"
    },
    "StylePropertyMapReadOnly.entries": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "StylePropertyMapReadOnly.entries",
        "params": [],
        "path": "dom/stylepropertymapreadonly/entries",
        "syntax": "StylePropertyMapReadOnly.entries()",
        "type": "CSS"
    },
    "StylePropertyMapReadOnly.forEach": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "StylePropertyMapReadOnly.forEach",
        "params": [
            {
                "descr": "The function to execute for each element, taking three arguments:  currentValue The value of the current element being processed.",
                "name": "callback"
            },
            {
                "descr": "The index of the current element being processed.",
                "name": "indexOptional"
            },
            {
                "descr": "The StylePropertyMapReadOnly thatforEach() is being called on.",
                "name": "arrayOptional"
            },
            {
                "descr": "Value to use as this (i.e the reference Object) when executing callback.",
                "name": "thisArg Optional"
            }
        ],
        "path": "dom/stylepropertymapreadonly/foreach",
        "syntax": "StylePropertyMapReadOnly.forEach(function callback(currentValue[, index[, array]]) { //your code }[, thisArg]);",
        "type": "CSS"
    },
    "StylePropertyMapReadOnly.get": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "StylePropertyMapReadOnly.get",
        "params": [
            {
                "descr": "The name of the property to retrieve the value of.",
                "name": "property"
            }
        ],
        "path": "dom/stylepropertymapreadonly/get",
        "syntax": "var declarationBlock = StylePropertyMapReadOnly.get(property)",
        "type": "CSS"
    },
    "StylePropertyMapReadOnly.getAll": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "StylePropertyMapReadOnly.getAll",
        "params": [
            {
                "descr": "The name of the property to retrieve all values of.",
                "name": "property"
            }
        ],
        "path": "dom/stylepropertymapreadonly/getall",
        "syntax": "var cssStyleValues[] = StylePropertyMapReadOnly.getAll(property)",
        "type": "CSS"
    },
    "StylePropertyMapReadOnly.has": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "StylePropertyMapReadOnly.has",
        "params": [
            {
                "descr": "The name of a property.",
                "name": "property"
            }
        ],
        "path": "dom/stylepropertymapreadonly/has",
        "syntax": "var boolean = StylePropertyMapReadOnly.has(property)",
        "type": "CSS"
    },
    "StylePropertyMapReadOnly.keys": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "StylePropertyMapReadOnly.keys",
        "params": [],
        "path": "dom/stylepropertymapreadonly/keys",
        "syntax": "StylePropertyMapReadOnly.keys()",
        "type": "CSS"
    },
    "StylePropertyMapReadOnly.values": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "StylePropertyMapReadOnly.values",
        "params": [],
        "path": "dom/stylepropertymapreadonly/values",
        "syntax": "StylePropertyMapReadOnly.values()",
        "type": "CSS"
    },
    "StyleSheet.disabled": {
        "descr": "",
        "name": "StyleSheet.disabled",
        "params": [],
        "path": "dom/stylesheet/disabled",
        "syntax": "bool = stylesheet.disabled  Example // if the stylesheet is disabled... if (stylesheet.disabled) { // apply style in-line }",
        "type": "CSS"
    },
    "StyleSheet.href": {
        "descr": "Returns the location of the stylesheet.",
        "name": "StyleSheet.href",
        "params": [],
        "path": "dom/stylesheet/href",
        "syntax": "uri = stylesheet.href  Parameters   uri is a string containing the stylesheet's URI.  Example  // on a local machine: <html> <head> <link rel=\"StyleSheet\" href=\"example.css\" type=\"text/css\" /> <script> function sref() { alert(document.styleSheets[0].href);\n or  } </script> </head> <body> <div class=\"thunder\">Thunder</div> <button onclick=\"sref()\">ss</button> </body> </html> // returns \"file:////C:/Windows/Desktop/example.css);",
        "type": "CSS"
    },
    "StyleSheet.ownerNode": {
        "descr": "ownerNode returns the node that associates this style sheet with the document.",
        "name": "StyleSheet.ownerNode",
        "params": [],
        "path": "dom/stylesheet/ownernode",
        "syntax": "objRef = stylesheet.ownerNode  Example <html> <head> <link rel=\"StyleSheet\" href=\"example.css\" type=\"text/css\" /> <script> function stilo() { alert(document.styleSheets[0].ownerNode);\n or  } </script> </head> <body> <button onclick=\"stilo()\">ss</button> </body> </html> // displays \"object HTMLLinkElement\");",
        "type": "CSS"
    },
    "StyleSheet.parentStyleSheet": {
        "descr": "Returns the stylesheet that is including this one, if any.",
        "name": "StyleSheet.parentStyleSheet",
        "params": [],
        "path": "dom/stylesheet/parentstylesheet",
        "syntax": "objRef = stylesheet.parentStyleSheet  Example // find the top level stylesheet if (stylesheet.parentStyleSheet) { sheet = stylesheet.parentStyleSheet; } else { sheet = stylesheet; }",
        "type": "CSS"
    },
    "SubtleCrypto.decrypt": {
        "descr": "The SubtleCrypto.decrypt() method returns a Promise of the plaintext corresponding to the ciphertext data, algorithm and key given as parameters.",
        "name": "SubtleCrypto.decrypt",
        "params": [
            {
                "descr": "when the requested operation is not valid for the provided key (e.g. ",
                "name": "InvalidAccessError"
            },
            {
                "descr": "when the operation failed for an operation-specific reason (e.g. ",
                "name": "OperationError"
            }
        ],
        "path": "dom/subtlecrypto/decrypt",
        "syntax": "var result = crypto.subtle.decrypt(algorithm, key, data);",
        "type": "Cryptography"
    },
    "SubtleCrypto.deriveKey": {
        "descr": "The SubtleCrypto.deriveKey() method returns a Promise of a newly generated CryptoKey derived from a master key and a specific algorithm given as parameters.",
        "name": "SubtleCrypto.deriveKey",
        "params": [],
        "path": "dom/subtlecrypto/derivekey",
        "syntax": "const result = crypto.subtle.deriveKey( algorithm, masterKey, derivedKeyAlgorithm, extractable, keyUsages);",
        "type": "Cryptography"
    },
    "SubtleCrypto.digest": {
        "descr": "The SubtleCrypto.digest() method returns a Promise of a digest generated from the hash function and text given as parameters.",
        "name": "SubtleCrypto.digest",
        "params": [],
        "path": "dom/subtlecrypto/digest",
        "syntax": "var hash = crypto.subtle.digest(algo, buffer);",
        "type": "Cryptography"
    },
    "SubtleCrypto.encrypt": {
        "descr": "The SubtleCrypto.encrypt() method returns a Promise of the encrypted data corresponding to the plaintext data, algorithm and key given as parameters.",
        "name": "SubtleCrypto.encrypt",
        "params": [
            {
                "descr": "when the requested operation is not valid for the provided key (e.g. ",
                "name": "InvalidAccessError"
            },
            {
                "descr": "when the operation failed for an operation-specific reason (e.g. ",
                "name": "OperationError"
            }
        ],
        "path": "dom/subtlecrypto/encrypt",
        "syntax": "var result = crypto.subtle.encrypt(algorithm, key, data);",
        "type": "Cryptography"
    },
    "SubtleCrypto.exportKey": {
        "descr": "The SubtleCrypto.exportKey() method returns a Promise of the key encrypted in the requested format. If the key is not extractable, that is if CryptoKey.extractable returns false, the promise fails with an InvalidAccessError exception; it the format is unknown, the promise fails with a NotSupported exception.",
        "name": "SubtleCrypto.exportKey",
        "params": [],
        "path": "dom/subtlecrypto/exportkey",
        "syntax": "var result = crypto.subtle.exportKey(format, key);",
        "type": "Cryptography"
    },
    "SubtleCrypto.generateKey": {
        "descr": "The SubtleCrypto.generateKey() method returns a Promise of a newly generated CryptoKey, for symmetrical algorithms, or a CryptoKeyPair, containing two newly generated keys, for asymmetrical algorithm, that matches the algorithm, the usages and the extractability given as parameters.",
        "name": "SubtleCrypto.generateKey",
        "params": [],
        "path": "dom/subtlecrypto/generatekey",
        "syntax": "var result = crypto.subtle.generateKey(algo, extractable, keyUsages);",
        "type": "Cryptography"
    },
    "SubtleCrypto.importKey": {
        "descr": "The SubtleCrypto.importKey() method returns a Promise of the CryptoKey generated from the data given in parameters.",
        "name": "SubtleCrypto.importKey",
        "params": [],
        "path": "dom/subtlecrypto/importkey",
        "syntax": "var result = crypto.subtle.importKey(format, keyData, algo, extractable, usages);",
        "type": "Cryptography"
    },
    "SubtleCrypto.sign": {
        "descr": "The SubtleCrypto.sign() method returns a Promise containing the signature corresponding to the text, algorithm and key given as parameters.",
        "name": "SubtleCrypto.sign",
        "params": [],
        "path": "dom/subtlecrypto/sign",
        "syntax": "var signature = crypto.subtle.sign(algorithm, key, text2sign);",
        "type": "Cryptography"
    },
    "SubtleCrypto.unwrapKey": {
        "descr": "The SubtleCrypto.unwrapKey() method returns a Promise of a CryptoKey corresponding to the wrapped key given in parameter.",
        "name": "SubtleCrypto.unwrapKey",
        "params": [],
        "path": "dom/subtlecrypto/unwrapkey",
        "syntax": "var result = crypto.subtle.unwrapKey(format, wrappedKey, unwrappingKey, unwrapAlgo, unwrappedKeyAlgo, extractable, keyUsages);",
        "type": "Cryptography"
    },
    "SubtleCrypto.verify": {
        "descr": "The SubtleCrypto.verify() method returns a Promise of a Boolean value indicating if the signature given as parameter matches the text, algorithm and key also given as parameters.",
        "name": "SubtleCrypto.verify",
        "params": [],
        "path": "dom/subtlecrypto/verify",
        "syntax": "var result = crypto.subtle.verify(algo, key, signature, text2verify);",
        "type": "Cryptography"
    },
    "SubtleCrypto.wrapKey": {
        "descr": "The SubtleCrypto.wrapKey() method returns a Promise of a wrapped symmetric key for usage (transfer, storage) in unsecure environments. The wrapped buffer returned is in the format given in parameters, and contains the key wrapped by the given wrapping key with the given algorithm.",
        "name": "SubtleCrypto.wrapKey",
        "params": [],
        "path": "dom/subtlecrypto/wrapkey",
        "syntax": "var result = crypto.subtle.wrapKey(format, key, wrappingKey, wrapAlgo);",
        "type": "Cryptography"
    },
    "Symbol": {
        "descr": "The Symbol() function returns a value of type symbol, has static properties that expose several members of built-in objects, has static methods that expose the global symbol registry, and resembles a built-in object class but is incomplete as a constructor because it does not support the syntax \"new Symbol()\".",
        "name": "Symbol",
        "params": [
            {
                "descr": "Optional, string. A description of the symbol which can be used for debugging but not to access the symbol itself.",
                "name": "description Optional"
            },
            {
                "descr": "Length property whose value is 0.",
                "name": "Symbol.length"
            },
            {
                "descr": "Represents the prototype for the Symbol constructor.",
                "name": "Symbol.prototype"
            },
            {
                "descr": "A method returning the default iterator for an object. ",
                "name": "Symbol.iterator"
            },
            {
                "descr": "A method that returns the default AsyncIterator for an object. ",
                "name": "Symbol.asyncIterator"
            },
            {
                "descr": "A method that matches against a string, also used to determine if an object may be used as a regular expression. ",
                "name": "Symbol.match"
            },
            {
                "descr": "A method that replaces matched substrings of a string. ",
                "name": "Symbol.replace"
            },
            {
                "descr": "A method that returns the index within a string that matches the regular expression. ",
                "name": "Symbol.search"
            },
            {
                "descr": "A method that splits a string at the indices that match a regular expression. ",
                "name": "Symbol.split"
            },
            {
                "descr": "A method determining if a constructor object recognizes an object as its instance. ",
                "name": "Symbol.hasInstance"
            },
            {
                "descr": "A Boolean value indicating if an object should be flattened to its array elements. ",
                "name": "Symbol.isConcatSpreadable"
            },
            {
                "descr": "An object value of whose own and inherited property names are excluded from the with environment bindings of the associated object.",
                "name": "Symbol.unscopables"
            },
            {
                "descr": "A constructor function that is used to create derived objects.",
                "name": "Symbol.species"
            },
            {
                "descr": "A method converting an object to a primitive value.",
                "name": "Symbol.toPrimitive"
            },
            {
                "descr": "A string value used for the default description of an object. ",
                "name": "Symbol.toStringTag"
            },
            {
                "descr": "Searches for existing symbols with the given key and returns it if found. ",
                "name": "Symbol.for(key)"
            },
            {
                "descr": "Retrieves a shared symbol key from the global symbol registry for the given symbol.",
                "name": "Symbol.keyFor(sym)"
            },
            {
                "descr": "Returns the function that created an instance's prototype. ",
                "name": "Symbol.prototype.constructor"
            },
            {
                "descr": "A read-only string containing the description of the symbol.",
                "name": "Symbol.prototype.description"
            },
            {
                "descr": "Returns a string containing the source of the Symbol object. ",
                "name": "Symbol.prototype.toSource()"
            },
            {
                "descr": "Returns a string containing the description of the Symbol. ",
                "name": "Symbol.prototype.toString()"
            },
            {
                "descr": "Returns the primitive value of the Symbol object. ",
                "name": "Symbol.prototype.valueOf()"
            },
            {
                "descr": "Returns the primitive value of the Symbol object.",
                "name": "Symbol.prototype[@@toPrimitive]"
            }
        ],
        "path": "javascript/global_objects/symbol",
        "syntax": "new Symbol()",
        "type": "Symbol"
    },
    "Symbol.for": {
        "descr": "The Symbol.for(key) method searches for existing symbols in a runtime-wide symbol registry with the given key and returns it if found. Otherwise a new symbol gets created in the global symbol registry with this key.",
        "name": "Symbol.for",
        "params": [
            {
                "descr": "String, required. The key for the symbol (and also used for the description of the symbol).",
                "name": "key"
            }
        ],
        "path": "javascript/global_objects/symbol/for",
        "syntax": "Symbol.for(key);",
        "type": "Symbol"
    },
    "Symbol.keyFor": {
        "descr": "The Symbol.keyFor(sym) method retrieves a shared symbol key from the global symbol registry for the given symbol.",
        "name": "Symbol.keyFor",
        "params": [
            {
                "descr": "Symbol, required. The symbol to find a key for.",
                "name": "sym"
            }
        ],
        "path": "javascript/global_objects/symbol/keyfor",
        "syntax": "Symbol.keyFor(sym);",
        "type": "Symbol"
    },
    "Symbol.toStringTag": {
        "descr": "The Symbol.toStringTag well-known symbol is a string valued property that is used in the creation of the default string description of an object. It is accessed internally by the Object.prototype.toString() method.",
        "name": "Symbol.toStringTag",
        "params": [],
        "path": "javascript/global_objects/symbol/tostringtag",
        "syntax": "--harmony runtime flag.      See also  Object.prototype.toString()",
        "type": "Symbol"
    },
    "SyntaxError": {
        "descr": "The SyntaxError object represents an error when trying to interpret syntactically invalid code.",
        "name": "SyntaxError",
        "params": [
            {
                "descr": "Human-readable description of the error",
                "name": "message Optional"
            },
            {
                "descr": "The name of the file containing the code that caused the exception",
                "name": "fileName Optional"
            },
            {
                "descr": "The line number of the code that caused the exception",
                "name": "lineNumber Optional"
            },
            {
                "descr": "Allows the addition of properties to a SyntaxError object.",
                "name": "SyntaxError.prototype"
            },
            {
                "descr": "Specifies the function that created an instance's prototype.",
                "name": "SyntaxError.prototype.constructor"
            },
            {
                "descr": "Error message. Although ECMA-262 specifies that SyntaxError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.",
                "name": "SyntaxError.prototype.message"
            },
            {
                "descr": "Error name. Inherited from Error.",
                "name": "SyntaxError.prototype.name"
            },
            {
                "descr": "Path to file that raised this error. ",
                "name": "SyntaxError.prototype.fileName"
            },
            {
                "descr": "Line number in file that raised this error. ",
                "name": "SyntaxError.prototype.lineNumber"
            },
            {
                "descr": "Column number in line that raised this error. ",
                "name": "SyntaxError.prototype.columnNumber"
            },
            {
                "descr": "Stack trace. Inherited from Error.",
                "name": "SyntaxError.prototype.stack"
            }
        ],
        "path": "javascript/global_objects/syntaxerror",
        "syntax": "SyntaxError object represents an error when trying to interpret syntactically invalid code. Description A SyntaxError is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code. Syntax new SyntaxError([message[, fileName[, lineNumber]]])",
        "type": "Errors"
    },
    "SyntaxError.prototype": {
        "descr": "The SyntaxError.prototype property represents the prototype for the SyntaxError constructor.",
        "name": "SyntaxError.prototype",
        "params": [
            {
                "descr": "Specifies the function that created an instance's prototype.",
                "name": "SyntaxError.prototype.constructor"
            },
            {
                "descr": "Error message. Although ECMA-262 specifies that SyntaxError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.",
                "name": "SyntaxError.prototype.message"
            },
            {
                "descr": "Error name. Inherited from Error.",
                "name": "SyntaxError.prototype.name"
            },
            {
                "descr": "Path to file that raised this error. ",
                "name": "SyntaxError.prototype.fileName"
            },
            {
                "descr": "Line number in file that raised this error. ",
                "name": "SyntaxError.prototype.lineNumber"
            },
            {
                "descr": "Column number in line that raised this error. ",
                "name": "SyntaxError.prototype.columnNumber"
            },
            {
                "descr": "Stack trace. Inherited from Error.",
                "name": "SyntaxError.prototype.stack"
            }
        ],
        "path": "javascript/global_objects/syntaxerror/prototype",
        "syntax": "SyntaxError.prototype property represents the prototype for the SyntaxError constructor. Description All SyntaxError instances inherit from SyntaxError.prototype. You can use the prototype to add properties or methods to all instances. Properties  SyntaxError.prototype.constructor Specifies the function that created an instance's prototype. SyntaxError.prototype.message Error message. Although ECMA-262 specifies that SyntaxError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message. SyntaxError.prototype.name Error name. Inherited from Error. SyntaxError.prototype.fileName Path to file that raised this error. Inherited from Error. SyntaxError.prototype.lineNumber Line number in file that raised this error. Inherited from Error. SyntaxError.prototype.columnNumber Column number in line that raised this error. Inherited from Error. SyntaxError.prototype.stack Stack trace. Inherited from Error.  Methods Although the SyntaxError prototype object does not contain any methods of its own, SyntaxError instances do inherit some methods through the prototype chain. Specifications    Specification Status Comment   ECMAScript 3rd Edition (ECMA-262) Standard Initial definition.   ECMAScript 5.1 (ECMA-262)The definition of 'NativeError.prototype' in that specification. Standard Defined as NativeError.prototype",
        "type": "Errors"
    },
    "Template literals": {
        "descr": "Template literals are string literals allowing embedded expressions. You can use multi-line strings and string interpolation features with them. They were called \"template strings\" in prior editions of the ES2015 specification.",
        "name": "Template literals",
        "params": [],
        "path": "javascript/template_literals",
        "syntax": "`string text` `string text line 1 string text line 2` `string text ${expression} string text` tag `string text ${expression} string text`  Description Template literals are enclosed by the back-tick (` `) (grave accent) character instead of double or single quotes. Template literals can contain placeholders. These are indicated by the dollar sign and curly braces (${expression}",
        "type": "Miscellaneous"
    },
    "Text.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Text.constructor",
        "params": [],
        "path": "dom/text/text",
        "syntax": "text1 = new Text();\n or  // Create an empty text node text2 = new Text(\"This is a text node\");",
        "type": "Nodes"
    },
    "Text.isElementContentWhitespace": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "Text.isElementContentWhitespace",
        "params": [],
        "path": "dom/text/iselementcontentwhitespace",
        "syntax": "b = textnode.isElementContentWhitespace; Example In the example below, we create a node with mixed display and whitespace characters and the attribute is false. var tn = document.createTextNode(\"Hello world\");\n or  tn.isElementContentWhitespace; /* evaluates to false */);",
        "type": "Nodes"
    },
    "Text.replaceWholeText": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "Text.replaceWholeText",
        "params": [],
        "path": "dom/text/replacewholetext",
        "syntax": "replacementNode = textnode.replaceWholeText(content)",
        "type": "Nodes"
    },
    "Text.splitText": {
        "descr": "The Text.splitText() method breaks the Text node into two nodes at the specified offset, keeping both nodes in the tree as siblings.",
        "name": "Text.splitText",
        "params": [],
        "path": "dom/text/splittext",
        "syntax": "replacementNode = textnode.splitText(offset)",
        "type": "Nodes"
    },
    "Text.wholeText": {
        "descr": "The Text.wholeText read-only property returns the full text of all Text nodes logically adjacent to the node. The text is concatenated in document order. This allows to specify any text node and obtain all adjacent text as a single string.",
        "name": "Text.wholeText",
        "params": [],
        "path": "dom/text/wholetext",
        "syntax": "str = textnode.wholeText; Notes and example Suppose you have the following simple paragraph within your webpage (with some whitespace added to aid formatting throughout the code samples here), whose DOM node is stored in the variable para",
        "type": "Nodes"
    },
    "TextDecoder.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "TextDecoder.constructor",
        "params": [
            {
                "descr": "Is a DOMString, defaulting to \"utf-8\", containing the label of the encoder. ",
                "name": "utfLabelOptional"
            },
            {
                "descr": "Is a TextDecoderOptions dictionary with the property:  fatal A Boolean flag indicating if the TextDecoder.decode() method must throw a DOMException with the \"EncodingError\" value when an coding error is found. It defaults to false.",
                "name": "optionsOptional"
            }
        ],
        "path": "dom/textdecoder/textdecoder",
        "syntax": "decoder = new TextDecoder(utfLabel, options);",
        "type": "Encoding"
    },
    "TextDecoder.decode": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "TextDecoder.decode",
        "params": [
            {
                "descr": "Is either an ArrayBuffer or an ArrayBufferView containing the text to decode.",
                "name": "bufferOptional"
            },
            {
                "descr": "Is a TextDecodeOptions dictionary with the property:  stream A Boolean flag indicating that additional data will follow in subsequent calls to decode(). ",
                "name": "optionsOptional"
            }
        ],
        "path": "dom/textdecoder/decode",
        "syntax": "b1 = decoder.decode(buffer, options);\n or  b2 = decoder.decode(buffer);\n or  b3 = decoder.decode();",
        "type": "Encoding"
    },
    "TextEncoder.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "TextEncoder.constructor",
        "params": [],
        "path": "dom/textencoder/textencoder",
        "syntax": "encoder = new TextEncoder();",
        "type": "Encoding"
    },
    "TextEncoder.encode": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "TextEncoder.encode",
        "params": [
            {
                "descr": "Is a DOMString containing the text to encode.",
                "name": "string"
            }
        ],
        "path": "dom/textencoder/encode",
        "syntax": "b1 = encoder.encode(string);",
        "type": "Encoding"
    },
    "TextMetrics.width": {
        "descr": "The readonly TextMetrics.width property contains the text's advance width (the width of that inline box) in CSS pixels.",
        "name": "TextMetrics.width",
        "params": [],
        "path": "dom/textmetrics/width",
        "syntax": "readonly metrics.width; Examples Given this <canvas> element: <canvas id=\"canvas\"></canvas>  You can get a TextMetrics object using the following code: var canvas = document.getElementById(\"canvas\");\n or  var ctx = canvas.getContext(\"2d\");\n or  var text = ctx.measureText(\"foo\");\n or  // TextMetrics object text.width; // 16;);",
        "type": "Canvas"
    },
    "TextTrack.mode": {
        "descr": "The TextTrack.mode property is a string which indicates the text track's mode. You can read this value to determine the current mode, and you can change this value to switch modes.",
        "name": "TextTrack.mode",
        "params": [
            {
                "descr": "The text track is currently disabled. ",
                "name": "\"disabled\""
            },
            {
                "descr": "The text track is currently active but the cues aren't being displayed. ",
                "name": "\"hidden\""
            },
            {
                "descr": "The text track is currently enabled and is visible. ",
                "name": "\"showing\""
            }
        ],
        "path": "dom/texttrack/mode",
        "syntax": "var mode = TextTrack.mode; TextTrack.mode = \"disabled\" | \"hidden\" | \"showing\"; Value A DOMString which indicates the track's current mode. The text track mode is one of the values listed below, under Text track mode constants. Text track mode constants The text track mode—sometimes identified using the IDL enum TextTrackMode—must be one of the following values:  \"disabled\" The text track is currently disabled. While the track's presence is exposed in the DOM, the user agent is otherwise ignoring it. No cues are active, no events are being fired, and the user agent won't attempt to obtain the track's cues. \"hidden\" The text track is currently active but the cues aren't being displayed. If the user agent hasn't tried to obtain the track's cues yet, it will do so soon (thereby populating the track's TextTrack.cues property). The user agent is keeping a list of the active cues (in the track's activeCues",
        "type": "WebVTT"
    },
    "TimeRanges.end": {
        "descr": "Returns the time offset at which a specified time range ends.",
        "name": "TimeRanges.end",
        "params": [
            {
                "descr": "A DOMException thrown if the specified index doesn't correspond to an existing range.",
                "name": "INDEX_SIZE_ERR"
            }
        ],
        "path": "dom/timeranges/end",
        "syntax": "endTime = TimeRanges.end(index)",
        "type": "Media"
    },
    "TimeRanges.length": {
        "descr": "The TimeRanges.length read-only property returns the number of ranges in the object.",
        "name": "TimeRanges.length",
        "params": [],
        "path": "dom/timeranges/length",
        "syntax": "length = TimeRanges.length;  Example Given a video element with the ID \"myVideo\": var v = document.GetElementById(\"myVideo\");\n or  var buf = v.buffered; var numRanges = buf.length; if (buf.length == 1) { // only one range if (buf.start(0) == 0 && buf.end(0) == v.duration) { // The one range starts at the beginning and ends at // the end of the video, so the whole thing is loaded } });",
        "type": "Media"
    },
    "TimeRanges.start": {
        "descr": "Returns the time offset at which a specified time range begins.",
        "name": "TimeRanges.start",
        "params": [
            {
                "descr": "A DOMException thrown if the specified index doesn't correspond to an existing range.",
                "name": "INDEX_SIZE_ERR"
            }
        ],
        "path": "dom/timeranges/start",
        "syntax": "startTime = TimeRanges.start(index)",
        "type": "Media"
    },
    "Touch events": {
        "descr": "In order to provide quality support for touch-based user interfaces, touch events offer the ability to interpret finger (or stylus) activity on touch screens or trackpads.",
        "name": "Touch events",
        "params": [
            {
                "descr": "The touch-sensitive surface. This may be a screen or trackpad.",
                "name": "Surface"
            },
            {
                "descr": "A point of contact with the surface. ",
                "name": "Touch point"
            },
            {
                "descr": "Represents an event that occurs when the state of touches on the surface changes.",
                "name": "TouchEvent"
            },
            {
                "descr": "Represents a single point of contact between the user and the touch surface.",
                "name": "Touch"
            },
            {
                "descr": "Represents a group of touches; this is used when the user has, for example, multiple fingers on the surface at the same time.",
                "name": "TouchList"
            }
        ],
        "path": "dom/touch_events",
        "syntax": "preventDefault()",
        "type": "Touch Events"
    },
    "Touch events.Supporting both TouchEvent and MouseEvent": {
        "descr": "The touch interfaces enable applications to create enhanced user experiences on touch enabled devices. However, the reality is the vast majority of today's web content is designed only to work with mouse input. Consequently, even if a browser supports touch, the browser must still emulate mouse events so content that assumes mouse-only input will work as is without direct modification.",
        "name": "Touch events.Supporting both TouchEvent and MouseEvent",
        "params": [],
        "path": "dom/touch_events/supporting_both_touchevent_and_mouseevent",
        "syntax": "touchstart before any mouse events. Consequently, if an application does not want mouse events fired on a specific touch target element, the element's touch event handlers should call preventDefault()",
        "type": "Touch Events"
    },
    "Touch events.Using Touch Events": {
        "descr": "Today, most Web content is designed for keyboard and mouse input. However, devices with touch screens (especially portable devices) are mainstream and Web applications can either directly process touch-based input by using Touch Events or the application can use interpreted mouse events for the application input. A disadvantage to using mouse events is that they do not support concurrent user input, whereas touch events support multiple simultaneous inputs (possibly at different locations on the touch surface), thus enhancing user experiences.",
        "name": "Touch events.Using Touch Events",
        "params": [],
        "path": "dom/touch_events/using_touch_events",
        "syntax": "Touch Events Overview for a more detailed example. Register an event handler for each touch event type. // Register touch event handlers someElement.addEventListener('touchstart', process_touchstart, false);\n or  someElement.addEventListener('touchmove', process_touchmove, false);\n or  someElement.addEventListener('touchcancel', process_touchcancel, false);\n or  someElement.addEventListener('touchend', process_touchend, false);",
        "type": "Touch Events"
    },
    "Touch.clientX": {
        "descr": "The Touch.clientX read-only property returns the X coordinate of the touch point relative to the viewport, not including any scroll offset.",
        "name": "Touch.clientX",
        "params": [],
        "path": "dom/touch/clientx",
        "syntax": "touchItem.clientX; Return value A long representing the X coordinate of the touch point relative to the viewport, not including any scroll offset. Example This example illustrates using the Touch object's Touch.clientX and Touch.clientY properties. The Touch.clientX property is the horizontal coordinate of a touch point relative to the browser's viewport excluding any scroll offset. The Touch.clientY property is the vertical coordinate of the touch point relative to the browser's viewport excluding any scroll offset . In this example, we assume the user initiates a touch on an element with an id of source, moves within the element or out of the element and then releases contact with the surface. When the touchend event handler is invoked, the changes in the Touch.clientX and Touch.clientY coordinates, from the starting touch point to the ending touch point, are calculated. // Register touchstart and touchend listeners for element 'source' var src = document.getElementById(\"source\");\n or  var clientX, clientY; src.addEventListener('touchstart', function(e) { // Cache the client X/Y coordinates clientX = e.touches[0].clientX; clientY = e.touches[0].clientY; }, false);\n or  src.addEventListener('touchend', function(e) { var deltaX, deltaY; // Compute the change in X and Y coordinates. // The first touch point in the changedTouches // list is the touch point that was just removed from the surface. deltaX = e.changedTouches[0].clientX - clientX; deltaY = e.changedTouches[0].clientY - clientY; // Process the data ... }, false);",
        "type": "Touch Events"
    },
    "Touch.clientY": {
        "descr": "The Touch.clientYread-only property returns the Y coordinate of the touch point relative to the browser's viewport, not including any scroll offset.",
        "name": "Touch.clientY",
        "params": [],
        "path": "dom/touch/clienty",
        "syntax": "touchItem.clientY; Return value A long value representing the Y coordinate of the touch point relative to the viewport, not including any scroll offset. Example This example illustrates using the Touch object's Touch.clientX and Touch.clientY properties. The Touch.clientX property is the horizontal coordinate of a touch point relative to the browser's viewport excluding any scroll offset. The Touch.clientY property is the vertical coordinate of the touch point relative to the browser's viewport excluding any scroll offset . In this example, we assume the user initiates a touch on an element with an id of source, moves within the element or out of the element and then releases contact with the surface. When the touchend event handler is invoked, the changes in the Touch.clientX and Touch.clientY coordinates, from the starting touch point to the ending touch point, are calculated. // Register touchstart and touchend listeners for element 'source' var src = document.getElementById(\"source\");\n or  var clientX, clientY; src.addEventListener('touchstart', function(e) { // Cache the client X/Y coordinates clientX = e.touches[0].clientX; clientY = e.touches[0].clientY; }, false);\n or  src.addEventListener('touchend', function(e) { var deltaX, deltaY; // Compute the change in X and Y coordinates. // The first touch point in the changedTouches // list is the touch point that was just removed from the surface. deltaX = e.changedTouches[0].clientX - clientX; deltaY = e.changedTouches[0].clientY - clientY; // Process the data ... }, false);",
        "type": "Touch Events"
    },
    "Touch.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Touch.constructor",
        "params": [
            {
                "descr": "Is a TouchInit dictionary, having the following fields:",
                "name": "touchInit"
            }
        ],
        "path": "dom/touch/touch",
        "syntax": "touch = new Touch(touchInit);",
        "type": "Touch Events"
    },
    "Touch.force": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Touch.force",
        "params": [],
        "path": "dom/touch/force",
        "syntax": "touchItem.force; Return value A float that represents the amount of pressure the user is applying to the touch surface. This is a value between 0.0 (no pressure) and 1.0",
        "type": "Touch Events"
    },
    "Touch.identifier": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Touch.identifier",
        "params": [],
        "path": "dom/touch/identifier",
        "syntax": "touchItem.identifier; Return value A long that represents the unique ID of the Touch object. Example someElement.addEventListener('touchmove', function(e) { // Iterate through the list of touch points that changed // since the last event and print each touch point's identifier. for (var i=0; i < e.changedTouches.length; i++) { console.log(\"changedTouches[\" + i + \"].identifier = \" + e.changedTouches[i].identifier);\n or  } }, false);",
        "type": "Touch Events"
    },
    "Touch.pageX": {
        "descr": "The Touch.pageX read-only property returns the X coordinate of the touch point relative to the viewport, including any scroll offset.",
        "name": "Touch.pageX",
        "params": [],
        "path": "dom/touch/pagex",
        "syntax": "touchItem.pageX; Return value A long representing the X coordinate of the touch point relative to the viewport, including any scroll offset. Example This example illustrates how to access the Touch object's Touch.pageX and Touch.pageY properties. The Touch.pageX property is the horizontal coordinate of a touch point relative to the viewport (in CSS pixels), including any scroll offset. The Touch.pageY",
        "type": "Touch Events"
    },
    "Touch.pageY": {
        "descr": "The Touch.pageY read-only property returns the Y coordinate of the touch point relative to the viewport, including any scroll offset.",
        "name": "Touch.pageY",
        "params": [],
        "path": "dom/touch/pagey",
        "syntax": "touchItem.pageY; Return value A long value that representes the Y coordinate of the touch point relative to the viewport, including any scroll offset. Example This example illustrates how to access the Touch object's Touch.pageX and Touch.pageY properties. The Touch.pageX property is the horizontal coordinate of a touch point relative to the viewport (in CSS pixels), including any scroll offset. The Touch.pageY",
        "type": "Touch Events"
    },
    "Touch.radiusX": {
        "descr": "Returns the X radius of the ellipse that most closely circumscribes the area of contact with the touch surface. The value is in CSS pixels of the same scale as Touch.screenX.",
        "name": "Touch.radiusX",
        "params": [
            {
                "descr": "The X radius of the ellipse that most closely circumscribes the area of contact with the touch surface.",
                "name": "xRadius"
            }
        ],
        "path": "dom/touch/radiusx",
        "syntax": "var xRadius = touchItem.radiusX;  Return value  xRadius The X radius of the ellipse that most closely circumscribes the area of contact with the touch surface.  Example This example illustrates using the Touch interface's Touch.radiusX, Touch.radiusX and Touch.rotationAngle properties. The Touch.radiusX property is the radius of the ellipse which most closely circumscribes the touching area (e.g. finger, stylus) along the axis indicated by the touch point's Touch.rotationAngle",
        "type": "Touch Events"
    },
    "Touch.screenX": {
        "descr": "Returns the X coordinate of the touch point relative to the screen, not including any scroll offset.",
        "name": "Touch.screenX",
        "params": [
            {
                "descr": "The X coordinate of the touch point relative to the screen, not including any scroll offset.",
                "name": "x"
            }
        ],
        "path": "dom/touch/screenx",
        "syntax": "var x = touchItem.screenX;  Return value  x The X coordinate of the touch point relative to the screen, not including any scroll offset.  Example This example illustrates how to access the Touch object's Touch.screenX and Touch.screenY properties. The Touch.screenX property is the horizontal (x) coordinate of a touch point relative to the screen in CSS pixels. The Touch.screenY",
        "type": "Touch Events"
    },
    "Touch.target": {
        "descr": "Returns the Element (EventTarget) on which the touch contact started when it was first placed on the surface, even if the touch point has since moved outside the interactive area of that element or even been removed from the document. Note that if the target element is removed from the document, events will still be targeted at it, and hence won't necessarily bubble up to the window or document anymore. If there is any risk of an element being removed while it is being touched, the best practice is to attach the touch listeners directly to the target.",
        "name": "Touch.target",
        "params": [
            {
                "descr": "The target element of the Touch object.",
                "name": "el"
            }
        ],
        "path": "dom/touch/target",
        "syntax": "var el = touchPoint.target;  Return value  el The target element of the Touch object.  Example This example illustrates how to access the Touch object's Touch.target property. The Touch.target property is an Element (EventTarget) on which a touch point is started when contact is first placed on the surface.",
        "type": "Touch Events"
    },
    "TouchEvent.altKey": {
        "descr": "A Boolean value indicating whether or not the alt (Alternate) key is enabled when the touch event is created. If the alt key is enabled, the attribute's value is true. Otherwise, it is false.",
        "name": "TouchEvent.altKey",
        "params": [
            {
                "descr": "true if the alt key is enabled for this event; and false if the alt is not enabled.",
                "name": "altEnabled"
            }
        ],
        "path": "dom/touchevent/altkey",
        "syntax": "var altEnabled = touchEvent.altKey;  Return value  altEnabled  true if the alt key is enabled for this event; and false if the alt is not enabled.  Example This example illustrates how to access the TouchEvent key modifier properties: TouchEvent.altKey, TouchEvent.ctrlKey, TouchEvent.metaKey and TouchEvent.shiftKey. In following code snippet, the touchstart event handler logs the state of the event's modifier keys. someElement.addEventListener('touchstart', function(e) { // Log the state of this event's modifier keys console.log(\"altKey = \" + e.altKey);\n or  console.log(\"ctrlKey = \" + e.ctrlKey);\n or  console.log(\"metaKey = \" + e.metaKey);\n or  console.log(\"shiftKey = \" + e.shiftKey);\n or  }, false);",
        "type": "Touch Events"
    },
    "TouchEvent.changedTouches": {
        "descr": "A TouchList whose touch points (Touch objects) varies depending on the event type, as follows:",
        "name": "TouchEvent.changedTouches",
        "params": [
            {
                "descr": "A TouchList whose Touch objects include all the touch points that contributed to this touch event.",
                "name": "changes"
            }
        ],
        "path": "dom/touchevent/changedtouches",
        "syntax": "var changes = touchEvent.changedTouches;  Return value  changes A TouchList whose Touch objects include all the touch points that contributed to this touch event.  Example This example illustrates the TouchEvent object's TouchEvent.changedTouches property. The TouchEvent.changedTouches property is a TouchList object that contains one Touch object for each touch point which contributed to the event. In following code snippet, the touchmove event handler iterrates through the changedTouches list and prints the identifier of each touch point that changed since the last event. someElement.addEventListener('touchmove', function(e) { // Iterate through the list of touch points that changed // since the last event and print each touch point's identifier. for (var i=0; i < e.changedTouches.length; i++) { console.log(\"changedTouches[\" + i + \"].identifier = \" + e.changedTouches[i].identifier);\n or  } }, false);",
        "type": "Touch Events"
    },
    "TouchEvent.constructor": {
        "descr": "The TouchEvent() constructor creates a new TouchEvent.",
        "name": "TouchEvent.constructor",
        "params": [
            {
                "descr": "Is a DOMString representing the name of the event.",
                "name": "typeArg"
            },
            {
                "descr": "Is a TouchEventInit dictionary, having the following fields:   \"touches\", optional and defaulting to [], of type Touch[], that is a list of objects for every point of contact currently touching the surface.  \"targetTouches\", optional and defaulting to [], of type Touch[], that is a list of objects for every point of contact that is touching the surface and started on the element that is the target of the current event.  \"changedTouches\", optional and defaulting to [], of type Touch[], that is a list of objects for every point of contact which contributed to the event.  \"ctrlKey\", optional and defaulting to false, of type Boolean, that indicates if the ctrl key was simultaneously pressed.  \"shiftKey\", optional and defaulting to false, of type Boolean, that indicates if the shift key was simultaneously pressed.  \"altKey\", optional and defaulting to false, of type Boolean, that indicates if the alt key was simultaneously pressed.  \"metaKey\", optional and defaulting to false, of type Boolean, that indicates if the meta key was simultaneously pressed.  The TouchEventInit dictionary also accepts fields from UIEventInit and from EventInit dictionaries.",
                "name": "touchEventInit Optional"
            }
        ],
        "path": "dom/touchevent/touchevent",
        "syntax": "event = new TouchEvent(typeArg, touchEventInit);",
        "type": "Touch Events"
    },
    "TouchEvent.targetTouches": {
        "descr": "A TouchList listing all the Touch objects for touch points that are still in contact with the touch surface and whose touchstart event occurred inside the same target element as the current target element.",
        "name": "TouchEvent.targetTouches",
        "params": [
            {
                "descr": "A TouchList listing all the Touch objects for touch points that are still in contact with the touch surface and whose touchstart event occurred inside the same target element as the current target element.",
                "name": "touches"
            }
        ],
        "path": "dom/touchevent/targettouches",
        "syntax": "var touches = touchEvent.targetTouches;  Return value  touches A TouchList listing all the Touch objects for touch points that are still in contact with the touch surface and whose touchstart event occurred inside the same target element as the current target element.  Example This example illustrates the TouchEvent object's TouchEvent.targetTouches property. The TouchEvent.targetTouches property is a TouchList object that includes those TPs that are currently touching the surface and started on the element that is the target of the current event. As such, the targetTouches list is a strict subset of the touches list. In following code snippet, the function compares the length of the touches list to the the length of the targetTouches list and returns true if the lengths are the same and returns false otherwise. function touches_in_target(ev) { // Return true if all of the touches are within the target element; // otherwise return false. return (ev.touches.length == ev.targetTouches.length ? true : false);\n or  });",
        "type": "Touch Events"
    },
    "TouchEvent.touches": {
        "descr": "A TouchList listing all the Touch objects for touch points that are currently in contact with the touch surface, regardless of whether or not they've changed or what their target element was at touchstart time.",
        "name": "TouchEvent.touches",
        "params": [
            {
                "descr": "A TouchList listing all the Touch objects for touch points that are still in contact with the touch surface, regardless of whether or not they've changed or what their target element was at touchstart time.",
                "name": "touches"
            }
        ],
        "path": "dom/touchevent/touches",
        "syntax": "var touches = touchEvent.touches;  Return value  touches A TouchList listing all the Touch objects for touch points that are still in contact with the touch surface, regardless of whether or not they've changed or what their target element was at touchstart time.  Example This example illustrates the TouchEvent object's TouchEvent.touches property. The TouchEvent.touches property is a TouchList object and containing a list of Touch objects for every point of contact currently touching the surface. In following code snippet, the touchstart event handler checks the length of the TouchEvent.touches list to determine the number of touch points that were activated and then invokes different handlers depending on the number of touch points. someElement.addEventListener('touchstart', function(e) { // Invoke the appropriate handler depending on the // number of touch points. switch (e.touches.length) { case 1: handle_one_touch(e);\n or  break; case 2: handle_two_touches(e);\n or  break; case 3: handle_three_touches(e);\n or  break; default: console.log(\"Not supported\");\n or  break; } }, false);",
        "type": "Touch Events"
    },
    "TouchList.identifiedTouch": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "TouchList.identifiedTouch",
        "params": [
            {
                "descr": "An integer value identifying the Touch object to retrieve from the list.",
                "name": "id"
            },
            {
                "descr": "A Touch object matching the specified id.",
                "name": "touchItem"
            }
        ],
        "path": "dom/touchlist/identifiedtouch",
        "syntax": "var touchItem = touchList.identifiedTouch(id);",
        "type": "Touch Events"
    },
    "TouchList.item": {
        "descr": "Returns the Touch object at the specified index in the TouchList.",
        "name": "TouchList.item",
        "params": [
            {
                "descr": "The index of the Touch object to retrieve. ",
                "name": "index"
            },
            {
                "descr": "The requested Touch object from the TouchList. ",
                "name": "touchPoint"
            }
        ],
        "path": "dom/touchlist/item",
        "syntax": "var touchPoint = touchList.item(index);",
        "type": "Touch Events"
    },
    "TouchList.length": {
        "descr": "This read-only property indicates the number of items (touch points) in a TouchList.",
        "name": "TouchList.length",
        "params": [
            {
                "descr": "The number of touch points in touchList.",
                "name": "numTouches"
            }
        ],
        "path": "dom/touchlist/length",
        "syntax": "var numTouches = touchList.length;  Return value  numTouches The number of touch points in touchList.  Example This code example illustrates the use of the TouchList interface's item method and the length property. target = document.getElementById(\"target\");\n or  target.addEventListener('touchstart', function(ev) { // If this touchstart event started on element target, // set touch to the first item in the targetTouches list; // otherwise set touch to the first item in the touches list var touch; if (ev.targetTouches.length >= 1) touch = ev.targetTouches.item(0);\n or  else touch = ev.touches.item(0);\n or  }, false);",
        "type": "Touch Events"
    },
    "TrackDefault.constructor": {
        "descr": "Draft This page is not complete.",
        "name": "TrackDefault.constructor",
        "params": [
            {
                "descr": "A DOMString specifying a media segment data type for the SourceBuffer to contain. ",
                "name": "type"
            },
            {
                "descr": "A DOMString specifying a default language for the SourceBuffer to use when an initialization segment does not contain language information for a new track.",
                "name": "language"
            },
            {
                "descr": "A DOMString specifying a default label for the SourceBuffer to use when an initialization segment does not contain label information for a new track.",
                "name": "label"
            },
            {
                "descr": "An array (sequence) of DOMStrings specifying default kinds for the SourceBuffer to use when an initialization segment does not contain kind information for a new track.",
                "name": "kinds"
            },
            {
                "descr": "A DOMString specifying the ID of the specific track that the SourceBuffer should apply to. ",
                "name": "byteStreamTrackID Optional"
            }
        ],
        "path": "dom/trackdefault/trackdefault",
        "syntax": "var trackDefault = new TrackDefault(type, language, label, kinds, byteStreamTrackID);",
        "type": "Media"
    },
    "TrackDefaultList.TrackDefault": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "TrackDefaultList.TrackDefault",
        "params": [
            {
                "descr": "The index position of the TrackDefault object you want to return.",
                "name": "index"
            }
        ],
        "path": "dom/trackdefaultlist/trackdefault",
        "syntax": "var myTrackDefault = TrackDefaultList[index]; Parameters  index The index position of the TrackDefault object you want to return.  Returns A TrackDefault object. Errors No specific errors are returned, but if the supplied index is great than or equal to TrackDefaultList.length, the operation will return undefined. Example TBD. Specifications    Specification Status Comment   Media Source ExtensionsThe definition of 'TrackDefault() getter' in that specification. Recommendation Initial definition.    Browser compatibilityUpdate compatibility data on GitHub",
        "type": "Media"
    },
    "TrackDefaultList.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "TrackDefaultList.constructor",
        "params": [
            {
                "descr": "A sequence (array) of TrackDefault objects.",
                "name": "trackDefaults"
            }
        ],
        "path": "dom/trackdefaultlist/trackdefaultlist",
        "syntax": "var trackDefaultList = new TrackDefaultList(trackDefaults);",
        "type": "Media"
    },
    "TrackEvent.constructor": {
        "descr": "The TrackEvent() constructor creates and returns a new TrackEvent object describing an event which occurred on a list of tracks (AudioTrackList, VideoTrackList, or TextTrackList).",
        "name": "TrackEvent.constructor",
        "params": [
            {
                "descr": "The type of track event which is described by the object: \"addtrack\" or \"removetrack\".",
                "name": "type"
            },
            {
                "descr": "An optional dictionary providing additional information configuring the new event; it can contain the following fields in any combination:   track Optional  The track to which the event refers; this is null by default, but should be set to a VideoTrack, AudioTrack, or TextTrack as appropriate given the type of track.",
                "name": "eventInfo Optional"
            },
            {
                "descr": "A Boolean indicating whether the event bubbles or not.",
                "name": "bubbles Optional"
            },
            {
                "descr": "A Boolean indicating whether or not the event can be canceled.",
                "name": "cancelable Optional"
            },
            {
                "descr": "A Boolean indicating whether or not the event will trigger listeners outside of a shadow root; see Event.composed for more details.",
                "name": "composed Optional"
            }
        ],
        "path": "dom/trackevent/trackevent",
        "syntax": "trackEvent = new TrackEvent(type, eventInfo);",
        "type": "Events"
    },
    "TrackEvent.track": {
        "descr": "The read-only track property of the TrackEvent interface specifies the media track object to which the event applies. This will be an AudioTrack, VideoTrack, or TextTrack object.",
        "name": "TrackEvent.track",
        "params": [],
        "path": "dom/trackevent/track",
        "syntax": "track = TrackEvent.track; Value An object which is one of the types AudioTrack, VideoTrack, or TextTrack, depending on the type of media represented by the track. This identifies the track to which the event applies. Specifications    Specification Status Comment   HTML Living StandardThe definition of 'TrackEvent.track' in that specification. Living Standard Initial definition.   HTML5The definition of 'TrackEvent.track' in that specification. Recommendation Initial definition.    Browser compatibility No compatibility data found. Please contribute data for \"api.TrackEvent.track\" (depth: 1) to the MDN compatibility data repository.",
        "type": "Events"
    },
    "TransitionEvent.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "TransitionEvent.constructor",
        "params": [
            {
                "descr": "Is a DOMString representing the name of the type of the TransitionEvent. ",
                "name": "type"
            },
            {
                "descr": "Is a DOMString containing the value of the property-name CSS property associated with the transition. ",
                "name": "propertyName Optional"
            },
            {
                "descr": "Is float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused. ",
                "name": "elapsedTime Optional"
            },
            {
                "descr": "Is a DOMString, starting with \"::\", containing the name of the pseudo-element the animation runs on. ",
                "name": "pseudoElement Optional"
            }
        ],
        "path": "dom/transitionevent/transitionevent",
        "syntax": "transitionEvent = new TransitionEvent(type, {propertyName: aPropertyName, elapsedTime : aFloat, pseudoElement: aPseudoElementName});",
        "type": "Events"
    },
    "TreeWalker": {
        "descr": "The TreeWalker object represents the nodes of a document subtree and a position within them.",
        "name": "TreeWalker",
        "params": [
            {
                "descr": "Returns a Node representing the root node as specified when the TreeWalker was created.",
                "name": "TreeWalker.root Read only"
            },
            {
                "descr": "Returns an unsigned long being a bitmask made of constants describing the types of Node that must be presented. ",
                "name": "TreeWalker.whatToShow Read only"
            },
            {
                "descr": "Returns a NodeFilter used to select the relevant nodes.",
                "name": "TreeWalker.filter Read only"
            },
            {
                "descr": "Is a Boolean indicating, when discarding an EntityReference its whole sub-tree must be discarded at the same time.",
                "name": "TreeWalker.expandEntityReferences Read only"
            },
            {
                "descr": "Is the Node on which the TreeWalker is currently pointing at.",
                "name": "TreeWalker.currentNode"
            },
            {
                "descr": "Moves the current Node to the first visible ancestor node in the document order, and returns the found node. ",
                "name": "TreeWalker.parentNode()"
            },
            {
                "descr": "Moves the current Node to the first visible child of the current node, and returns the found child. ",
                "name": "TreeWalker.firstChild()"
            },
            {
                "descr": "Moves the current Node to the last visible child of the current node, and returns the found child. ",
                "name": "TreeWalker.lastChild()"
            },
            {
                "descr": "Moves the current Node to its previous sibling, if any, and returns the found sibling. ",
                "name": "TreeWalker.previousSibling()"
            },
            {
                "descr": "Moves the current Node to its next sibling, if any, and returns the found sibling. ",
                "name": "TreeWalker.nextSibling()"
            },
            {
                "descr": "Moves the current Node to the previous visible node in the document order, and returns the found node. ",
                "name": "TreeWalker.previousNode()"
            },
            {
                "descr": "Moves the current Node to the next visible node in the document order, and returns the found node. ",
                "name": "TreeWalker.nextNode()"
            }
        ],
        "path": "dom/treewalker",
        "syntax": "CDATASection nodes.   NodeFilter.SHOW_COMMENT 128 Shows Comment nodes.   NodeFilter.SHOW_DOCUMENT 256 Shows Document nodes.   NodeFilter.SHOW_DOCUMENT_FRAGMENT 1024 Shows DocumentFragment nodes.   NodeFilter.SHOW_DOCUMENT_TYPE 512 Shows DocumentType nodes.   NodeFilter.SHOW_ELEMENT 1 Shows Element nodes.    NodeFilter.SHOW_ENTITY  32 Shows Entity nodes. This is meaningful only when creating a TreeWalker with an Entity node as its root; in this case, it means that the Entity node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.    NodeFilter.SHOW_ENTITY_REFERENCE  16 Shows EntityReference nodes.    NodeFilter.SHOW_NOTATION  2048 Shows Notation nodes. This is meaningful only when creating a TreeWalker with a Notation node as its root; in this case, it means that the Notation node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.   NodeFilter.SHOW_PROCESSING_INSTRUCTION 64 Shows ProcessingInstruction nodes.   NodeFilter.SHOW_TEXT 4 Shows Text nodes.      TreeWalker.filter Read only   Returns a NodeFilter used to select the relevant nodes.  TreeWalker.expandEntityReferences Read only   Is a Boolean indicating, when discarding an EntityReference its whole sub-tree must be discarded at the same time. TreeWalker.currentNode Is the Node on which the TreeWalker is currently pointing at.  Methods This interface doesn't inherit any method.  Note that the TreeWalker only considers visible DOM nodes.   TreeWalker.parentNode()",
        "type": "TreeWalker"
    },
    "TreeWalker.currentNode": {
        "descr": "The TreeWalker.currentNode property represents the Node on which the TreeWalker is currently pointing at.",
        "name": "TreeWalker.currentNode",
        "params": [],
        "path": "dom/treewalker/currentnode",
        "syntax": "node = treeWalker.currentNode; treeWalker.currentNode = node;  Example var treeWalker = document.createTreeWalker( document.body, NodeFilter.SHOW_ELEMENT, { acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } }, false );\n or  root = treeWalker.currentNode; // the root element as it is the first element!);",
        "type": "TreeWalker"
    },
    "TreeWalker.expandEntityReferences": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "TreeWalker.expandEntityReferences",
        "params": [],
        "path": "dom/treewalker/expandentityreferences",
        "syntax": "expand = treeWalker.expandEntityReferences;  Example var treeWalker = document.createTreeWalker( document.body, NodeFilter.SHOW_ELEMENT, { acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } }, false );\n or  expand = treeWalker.expandEntityReferences;);",
        "type": "TreeWalker"
    },
    "TreeWalker.filter": {
        "descr": "The TreeWalker.filter read-only property returns a NodeFilter that is the filtering object associated with the TreeWalker.",
        "name": "TreeWalker.filter",
        "params": [],
        "path": "dom/treewalker/filter",
        "syntax": "nodeFilter = treeWalker.filter;  Example var treeWalker = document.createTreeWalker( document.body, NodeFilter.SHOW_ELEMENT, { acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } }, false );\n or  nodeFilter = treeWalker.filter; // document.body in this case);",
        "type": "TreeWalker"
    },
    "TreeWalker.firstChild": {
        "descr": "The TreeWalker.firstChild() method moves the current Node to the first visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, returns null and the current node is not changed.",
        "name": "TreeWalker.firstChild",
        "params": [],
        "path": "dom/treewalker/firstchild",
        "syntax": "node = treeWalker.firstChild; Example var treeWalker = document.createTreeWalker( document.body, NodeFilter.SHOW_ELEMENT, { acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } }, false );\n or  var node = treeWalker.firstChild();\n or  // returns the first child of the root element, or null if none);",
        "type": "TreeWalker"
    },
    "TreeWalker.lastChild": {
        "descr": "The TreeWalker.lastChild() method moves the current Node to the last visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, returns null and the current node is not changed.",
        "name": "TreeWalker.lastChild",
        "params": [],
        "path": "dom/treewalker/lastchild",
        "syntax": "node = treeWalker.lastChild();",
        "type": "TreeWalker"
    },
    "TreeWalker.nextNode": {
        "descr": "The TreeWalker.nextNode() method moves the current Node to the next visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, returns null and the current node is not changed.",
        "name": "TreeWalker.nextNode",
        "params": [],
        "path": "dom/treewalker/nextnode",
        "syntax": "node = treeWalker.nextNode();",
        "type": "TreeWalker"
    },
    "TreeWalker.nextSibling": {
        "descr": "The TreeWalker.nextSibling() method moves the current Node to its next sibling, if any, and returns the found sibling. I there is no such node, return null and the current node is not changed.",
        "name": "TreeWalker.nextSibling",
        "params": [],
        "path": "dom/treewalker/nextsibling",
        "syntax": "node = treeWalker.nextSibling();",
        "type": "TreeWalker"
    },
    "TreeWalker.parentNode": {
        "descr": "The TreeWalker.parentNode() method moves the current Node to the first visible ancestor node in the document order, and returns the found node. If no such node exists, or if it is above the TreeWalker's root node, returns null and the current node is not changed.",
        "name": "TreeWalker.parentNode",
        "params": [],
        "path": "dom/treewalker/parentnode",
        "syntax": "node = treeWalker.parentNode();",
        "type": "TreeWalker"
    },
    "TreeWalker.previousNode": {
        "descr": "The TreeWalker.previousNode() method moves the current Node to the previous visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists,or if it is before that the root node defined at the object construction, returns null and the current node is not changed.",
        "name": "TreeWalker.previousNode",
        "params": [],
        "path": "dom/treewalker/previousnode",
        "syntax": "node = treeWalker.previousNode();",
        "type": "TreeWalker"
    },
    "TreeWalker.previousSibling": {
        "descr": "The TreeWalker.previousSibling() method moves the current Node to its previous sibling, if any, and returns the found sibling. If there is no such node, return null and the current node is not changed.",
        "name": "TreeWalker.previousSibling",
        "params": [],
        "path": "dom/treewalker/previoussibling",
        "syntax": "node = treeWalker.previousSibling();",
        "type": "TreeWalker"
    },
    "TreeWalker.root": {
        "descr": "The TreeWalker.root read-only property returns the node that is the root of what the TreeWalker traverses.",
        "name": "TreeWalker.root",
        "params": [],
        "path": "dom/treewalker/root",
        "syntax": "root = TreeWalker.root; Example var treeWalker = document.createTreeWalker( document.body, NodeFilter.SHOW_ELEMENT, { acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } }, false );\n or  root = treeWalker.root; // document.body in this case);",
        "type": "TreeWalker"
    },
    "TreeWalker.whatToShow": {
        "descr": "The TreeWalker.whatToShow read-only property returns an unsigned long being a bitmask made of constants describing the types of Node that must to be presented. Non-matching nodes are skipped, but their children may be included, if relevant. The possible values are:",
        "name": "TreeWalker.whatToShow",
        "params": [],
        "path": "dom/treewalker/whattoshow",
        "syntax": "CDATASection nodes.   NodeFilter.SHOW_COMMENT 128 Shows Comment nodes.   NodeFilter.SHOW_DOCUMENT 256 Shows Document nodes.   NodeFilter.SHOW_DOCUMENT_FRAGMENT 1024 Shows DocumentFragment nodes.   NodeFilter.SHOW_DOCUMENT_TYPE 512 Shows DocumentType nodes.   NodeFilter.SHOW_ELEMENT 1 Shows Element nodes.    NodeFilter.SHOW_ENTITY  32 Shows Entity nodes. This is meaningful only when creating a TreeWalker with an Entity node as its root; in this case, it means that the Entity node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.    NodeFilter.SHOW_ENTITY_REFERENCE  16 Shows EntityReference nodes.    NodeFilter.SHOW_NOTATION  2048 Shows Notation nodes. This is meaningful only when creating a TreeWalker with a Notation node as its root; in this case, it means that the Notation node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.   NodeFilter.SHOW_PROCESSING_INSTRUCTION 64 Shows ProcessingInstruction nodes.   NodeFilter.SHOW_TEXT 4 Shows Text nodes.    Syntax nodeTypes = treeWalker.whatToShow; Example var treeWalker = document.createTreeWalker( document.body, NodeFilter.SHOW_ELEMENT + NodeFilter.SHOW_COMMENT + NodeFilter.SHOW_TEXT, { acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } }, false );\n or  if( (treeWalker.whatToShow == NodeFilter.SHOW_ALL) || (treeWalker.whatToShow % (NodeFilter.SHOW_COMMENT*2)) >= NodeFilter.SHOW_COMMENT) { // treeWalker will show comments });",
        "type": "TreeWalker"
    },
    "TypeError": {
        "descr": "The TypeError object represents an error when a value is not of the expected type.",
        "name": "TypeError",
        "params": [
            {
                "descr": "Optional. Human-readable description of the error",
                "name": "message"
            },
            {
                "descr": "Optional. The name of the file containing the code that caused the exception",
                "name": "fileName"
            },
            {
                "descr": "Optional. The line number of the code that caused the exception",
                "name": "lineNumber"
            },
            {
                "descr": "Allows the addition of properties to a TypeError object.",
                "name": "TypeError.prototype"
            },
            {
                "descr": "Specifies the function that created an instance's prototype.",
                "name": "TypeError.prototype.constructor"
            },
            {
                "descr": "Error message. Although ECMA-262 specifies that TypeError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.",
                "name": "TypeError.prototype.message"
            },
            {
                "descr": "Error name. Inherited from Error.",
                "name": "TypeError.prototype.name"
            },
            {
                "descr": "Path to file that raised this error. ",
                "name": "TypeError.prototype.fileName"
            },
            {
                "descr": "Line number in file that raised this error. ",
                "name": "TypeError.prototype.lineNumber"
            },
            {
                "descr": "Column number in line that raised this error. ",
                "name": "TypeError.prototype.columnNumber"
            },
            {
                "descr": "Stack trace. Inherited from Error.",
                "name": "TypeError.prototype.stack"
            }
        ],
        "path": "javascript/global_objects/typeerror",
        "syntax": "new TypeError([message[, fileName[, lineNumber]]])",
        "type": "Errors"
    },
    "TypedArray": {
        "descr": "A TypedArray object describes an array-like view of an underlying binary data buffer. There is no global property named TypedArray, nor is there a directly visible TypedArray constructor. Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.",
        "name": "TypedArray",
        "params": [
            {
                "descr": "When called with a length argument, an internal array buffer is created in memory, of size length multiplied by BYTES_PER_ELEMENT bytes, containing zeros.",
                "name": "length"
            },
            {
                "descr": "When called with a typedArray argument, which can be an object of any of the typed array types (such as Int32Array), the typedArray gets copied into a new typed array. ",
                "name": "typedArray"
            },
            {
                "descr": "When called with an object argument, a new typed array is created as if by the TypedArray.from() method.",
                "name": "object"
            },
            {
                "descr": "When called with a buffer, and optionally a byteOffset and a length argument, a new typed array view is created that views the specified ArrayBuffer. ",
                "name": "buffer, byteOffset, length"
            },
            {
                "descr": "Returns a number value of the element size for the different typed array objects.",
                "name": "TypedArray.BYTES_PER_ELEMENT"
            },
            {
                "descr": "Length property whose value is 0.",
                "name": "TypedArray.length"
            },
            {
                "descr": "Returns the string value of the constructor name. ",
                "name": "TypedArray.name"
            },
            {
                "descr": "The constructor function that is used to create derived objects.",
                "name": "get TypedArray[@@species]"
            },
            {
                "descr": "Prototype for the TypedArray objects.",
                "name": "TypedArray.prototype"
            },
            {
                "descr": "Creates a new typed array from an array-like or iterable object. ",
                "name": "TypedArray.from()"
            },
            {
                "descr": "Creates a new typed array with a variable number of arguments. ",
                "name": "TypedArray.of()"
            },
            {
                "descr": "Returns the function that created an instance's prototype. ",
                "name": "TypedArray.prototype.constructor"
            },
            {
                "descr": "Returns the ArrayBuffer referenced by the typed array. ",
                "name": "TypedArray.prototype.buffer Read only"
            },
            {
                "descr": "Returns the length (in bytes) of the typed array. ",
                "name": "TypedArray.prototype.byteLength Read only"
            },
            {
                "descr": "Returns the offset (in bytes) of the typed array from the start of its ArrayBuffer. ",
                "name": "TypedArray.prototype.byteOffset Read only"
            },
            {
                "descr": "Returns the number of elements held in the typed array. ",
                "name": "TypedArray.prototype.length Read only"
            },
            {
                "descr": "Copies a sequence of array elements within the array. ",
                "name": "TypedArray.prototype.copyWithin()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the key/value pairs for each index in the array. ",
                "name": "TypedArray.prototype.entries()"
            },
            {
                "descr": "Tests whether all elements in the array pass the test provided by a function. ",
                "name": "TypedArray.prototype.every()"
            },
            {
                "descr": "Fills all the elements of an array from a start index to an end index with a static value. ",
                "name": "TypedArray.prototype.fill()"
            },
            {
                "descr": "Creates a new array with all of the elements of this array for which the provided filtering function returns true. ",
                "name": "TypedArray.prototype.filter()"
            },
            {
                "descr": "Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found. ",
                "name": "TypedArray.prototype.find()"
            },
            {
                "descr": "Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found. ",
                "name": "TypedArray.prototype.findIndex()"
            },
            {
                "descr": "Calls a function for each element in the array. ",
                "name": "TypedArray.prototype.forEach()"
            },
            {
                "descr": "Determines whether a typed array includes a certain element, returning true or false as appropriate. ",
                "name": "TypedArray.prototype.includes()"
            },
            {
                "descr": "Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. ",
                "name": "TypedArray.prototype.indexOf()"
            },
            {
                "descr": "Joins all elements of an array into a string. ",
                "name": "TypedArray.prototype.join()"
            },
            {
                "descr": "Returns a new Array Iterator that contains the keys for each index in the array. ",
                "name": "TypedArray.prototype.keys()"
            },
            {
                "descr": "Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found. ",
                "name": "TypedArray.prototype.lastIndexOf()"
            },
            {
                "descr": "Creates a new array with the results of calling a provided function on every element in this array. ",
                "name": "TypedArray.prototype.map()"
            },
            {
                "descr": "Former non-standard version of TypedArray.prototype.copyWithin().",
                "name": "TypedArray.prototype.move() Unimplemented"
            },
            {
                "descr": "Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value. ",
                "name": "TypedArray.prototype.reduce()"
            },
            {
                "descr": "Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value. ",
                "name": "TypedArray.prototype.reduceRight()"
            },
            {
                "descr": "Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first. ",
                "name": "TypedArray.prototype.reverse()"
            },
            {
                "descr": "Stores multiple values in the typed array, reading input values from a specified array.",
                "name": "TypedArray.prototype.set()"
            },
            {
                "descr": "Extracts a section of an array and returns a new array. ",
                "name": "TypedArray.prototype.slice()"
            },
            {
                "descr": "Returns true if at least one element in this array satisfies the provided testing function. ",
                "name": "TypedArray.prototype.some()"
            },
            {
                "descr": "Sorts the elements of an array in place and returns the array. ",
                "name": "TypedArray.prototype.sort()"
            },
            {
                "descr": "Returns a new TypedArray from the given start and end element index.",
                "name": "TypedArray.prototype.subarray()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array. ",
                "name": "TypedArray.prototype.values()"
            },
            {
                "descr": "Returns a localized string representing the array and its elements. ",
                "name": "TypedArray.prototype.toLocaleString()"
            },
            {
                "descr": "Returns a string representing the array and its elements. ",
                "name": "TypedArray.prototype.toString()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array.",
                "name": "TypedArray.prototype[@@iterator]()"
            },
            {
                "descr": "Negative integers are not considered as indexed properties and therefore return the value of the prototype property.",
                "name": "?"
            }
        ],
        "path": "javascript/global_objects/typedarray",
        "syntax": "new TypedArray();\n or  // new in ES2017 new TypedArray(length);\n or  new TypedArray(typedArray);\n or  new TypedArray(object);\n or  new TypedArray(buffer [, byteOffset [, length]]);\n or  where TypedArray() is one of: Int8Array();\n or  Uint8Array();\n or  Uint8ClampedArray();\n or  Int16Array();\n or  Uint16Array();\n or  Int32Array();\n or  Uint32Array();\n or  Float32Array();\n or  Float64Array();",
        "type": "TypedArray"
    },
    "TypedArray.@@species": {
        "descr": "The TypedArray[@@species] accessor property returns the constructor of a typed array.",
        "name": "TypedArray.@@species",
        "params": [],
        "path": "javascript/global_objects/typedarray/@@species",
        "syntax": "TypedArray[Symbol.species] where TypedArray is one of: Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array  Description The species accessor property returns the default constructor for typed array objects. Subclass constructors may over-ride it to change the constructor assignment. Examples The species property returns the default constructor function, which is one of the typed array constructors for a given typed array object: Int8Array[Symbol.species]; // function Int8Array() Uint8Array[Symbol.species]; // function Uint8Array() Float32Array[Symbol.species]; // function Float32Array()",
        "type": "TypedArray"
    },
    "TypedArray.BYTES_PER_ELEMENT": {
        "descr": "The TypedArray.BYTES_PER_ELEMENT property represents the size in bytes of each element in an typed array.",
        "name": "TypedArray.BYTES_PER_ELEMENT",
        "params": [],
        "path": "javascript/global_objects/typedarray/bytes_per_element",
        "syntax": "TypedArray.BYTES_PER_ELEMENT; Description TypedArray objects differ from each other in the number of bytes per element and in the way the bytes are interpreted. The BYTES_PER_ELEMENT constant contains the number of bytes each element in the given TypedArray has. Examples Int8Array.BYTES_PER_ELEMENT; // 1 Uint8Array.BYTES_PER_ELEMENT; // 1 Uint8ClampedArray.BYTES_PER_ELEMENT; // 1 Int16Array.BYTES_PER_ELEMENT; // 2 Uint16Array.BYTES_PER_ELEMENT; // 2 Int32Array.BYTES_PER_ELEMENT; // 4 Uint32Array.BYTES_PER_ELEMENT; // 4 Float32Array.BYTES_PER_ELEMENT; // 4 Float64Array.BYTES_PER_ELEMENT; // 8 Specifications    Specification Status Comment   Typed Array Specification Obsolete Superseded by ECMAScript 6.   ECMAScript 2015 (6th Edition, ECMA-262)The definition of 'TypedArray.BYTES_PER_ELEMENT' in that specification. Standard Initial definition in an ECMA standard.   ECMAScript Latest Draft (ECMA-262)The definition of 'TypedArray.BYTES_PER_ELEMENT' in that specification. Draft      Browser compatibilityUpdate compatibility data on GitHub",
        "type": "TypedArray"
    },
    "TypedArray.from": {
        "descr": "The TypedArray.from() method creates a new typed array from an array-like or iterable object. This method is nearly the same as Array.from().",
        "name": "TypedArray.from",
        "params": [
            {
                "descr": "An array-like or iterable object to convert to a typed array.",
                "name": "source"
            },
            {
                "descr": "Optional. Map function to call on every element of the typed array.",
                "name": "mapFn"
            },
            {
                "descr": "Optional. Value to use as this when executing mapFn.",
                "name": "thisArg"
            }
        ],
        "path": "javascript/global_objects/typedarray/from",
        "syntax": "TypedArray.from(source[, mapFn[, thisArg]]) where TypedArray is one of: Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array",
        "type": "TypedArray"
    },
    "TypedArray.name": {
        "descr": "The TypedArray.name property represents a string value of the typed array constructor name.",
        "name": "TypedArray.name",
        "params": [],
        "path": "javascript/global_objects/typedarray/name",
        "syntax": "TypedArray.name; Description TypedArray objects differ from each other in the number of bytes per element and in the way the bytes are interpreted. The name property describes of what data type the array consists. The first part can be Int for \"integer\" or Uint for an \"unsigned integer\", also Float for \"floating point\" is used. The second part is a number describing the bit-size of the array. Finally, the object type is Array, with ClampedArray as a special case. Please see Uint8ClampedArray for more details. Examples Int8Array.name; // \"Int8Array\" Uint8Array.name; // \"Uint8Array\" Uint8ClampedArray.name; // \"Uint8ClampedArray\" Int16Array.name; // \"Int16Array\" Uint16Array.name; // \"Uint16Array\" Int32Array.name; // \"Int32Array\" Uint32Array.name; // \"Uint32Array\" Float32Array.name; // \"Float32Array\" Float64Array.name; // \"Float64Array\" Specifications    Specification Status Comment   ECMAScript 2015 (6th Edition, ECMA-262)The definition of 'TypedArray.name' in that specification. Standard Initial definition.   ECMAScript Latest Draft (ECMA-262)The definition of 'TypedArray.name' in that specification. Draft      Browser compatibilityUpdate compatibility data on GitHub",
        "type": "TypedArray"
    },
    "TypedArray.of": {
        "descr": "The TypedArray.of() method creates a new typed array with a variable number of arguments. This method is nearly the same as Array.of().",
        "name": "TypedArray.of",
        "params": [
            {
                "descr": "Elements of which to create the typed array.",
                "name": "elementN"
            }
        ],
        "path": "javascript/global_objects/typedarray/of",
        "syntax": "TypedArray.of(element0[, element1[, ...[, elementN]]]) where TypedArray is one of: Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array",
        "type": "TypedArray"
    },
    "TypedArray.prototype": {
        "descr": "The TypedArray.prototype property represents the prototype for TypedArray constructors.",
        "name": "TypedArray.prototype",
        "params": [
            {
                "descr": "Returns the function that created an instance's prototype. ",
                "name": "TypedArray.prototype.constructor"
            },
            {
                "descr": "Returns the ArrayBuffer referenced by the typed array. ",
                "name": "TypedArray.prototype.buffer Read only"
            },
            {
                "descr": "Returns the length (in bytes) of the typed array. ",
                "name": "TypedArray.prototype.byteLength Read only"
            },
            {
                "descr": "Returns the offset (in bytes) of the typed array from the start of its ArrayBuffer. ",
                "name": "TypedArray.prototype.byteOffset Read only"
            },
            {
                "descr": "Returns the number of elements held in the typed array. ",
                "name": "TypedArray.prototype.length Read only"
            },
            {
                "descr": "Copies a sequence of array elements within the array. ",
                "name": "TypedArray.prototype.copyWithin()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the key/value pairs for each index in the array. ",
                "name": "TypedArray.prototype.entries()"
            },
            {
                "descr": "Tests whether all elements in the array pass the test provided by a function. ",
                "name": "TypedArray.prototype.every()"
            },
            {
                "descr": "Fills all the elements of an array from a start index to an end index with a static value. ",
                "name": "TypedArray.prototype.fill()"
            },
            {
                "descr": "Creates a new array with all of the elements of this array for which the provided filtering function returns true. ",
                "name": "TypedArray.prototype.filter()"
            },
            {
                "descr": "Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found. ",
                "name": "TypedArray.prototype.find()"
            },
            {
                "descr": "Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found. ",
                "name": "TypedArray.prototype.findIndex()"
            },
            {
                "descr": "Calls a function for each element in the array. ",
                "name": "TypedArray.prototype.forEach()"
            },
            {
                "descr": "Determines whether a typed array includes a certain element, returning true or false as appropriate. ",
                "name": "TypedArray.prototype.includes()"
            },
            {
                "descr": "Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. ",
                "name": "TypedArray.prototype.indexOf()"
            },
            {
                "descr": "Joins all elements of an array into a string. ",
                "name": "TypedArray.prototype.join()"
            },
            {
                "descr": "Returns a new Array Iterator that contains the keys for each index in the array. ",
                "name": "TypedArray.prototype.keys()"
            },
            {
                "descr": "Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found. ",
                "name": "TypedArray.prototype.lastIndexOf()"
            },
            {
                "descr": "Creates a new array with the results of calling a provided function on every element in this array. ",
                "name": "TypedArray.prototype.map()"
            },
            {
                "descr": "Former non-standard version of TypedArray.prototype.copyWithin().",
                "name": "TypedArray.prototype.move() Unimplemented"
            },
            {
                "descr": "Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value. ",
                "name": "TypedArray.prototype.reduce()"
            },
            {
                "descr": "Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value. ",
                "name": "TypedArray.prototype.reduceRight()"
            },
            {
                "descr": "Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first. ",
                "name": "TypedArray.prototype.reverse()"
            },
            {
                "descr": "Stores multiple values in the typed array, reading input values from a specified array.",
                "name": "TypedArray.prototype.set()"
            },
            {
                "descr": "Extracts a section of an array and returns a new array. ",
                "name": "TypedArray.prototype.slice()"
            },
            {
                "descr": "Returns true if at least one element in this array satisfies the provided testing function. ",
                "name": "TypedArray.prototype.some()"
            },
            {
                "descr": "Sorts the elements of an array in place and returns the array. ",
                "name": "TypedArray.prototype.sort()"
            },
            {
                "descr": "Returns a new TypedArray from the given start and end element index.",
                "name": "TypedArray.prototype.subarray()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array. ",
                "name": "TypedArray.prototype.values()"
            },
            {
                "descr": "Returns a localized string representing the array and its elements. ",
                "name": "TypedArray.prototype.toLocaleString()"
            },
            {
                "descr": "Returns a string representing the array and its elements. ",
                "name": "TypedArray.prototype.toString()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array.",
                "name": "TypedArray.prototype[@@iterator]()"
            }
        ],
        "path": "javascript/global_objects/typedarray/prototype",
        "syntax": "Array.prototype.slice()",
        "type": "TypedArray"
    },
    "Types": {
        "descr": "This page documents data types appearing in jQuery function signatures, whether defined by JavaScript itself or further restricted by jQuery. Unless explicitly stated otherwise, jQuery functions require primitive values where applicable, and do not accept their Object-wrapped forms. If you want to study these concepts in depth, take a look at MDN.",
        "name": "Types",
        "params": [],
        "path": "jquery/types",
        "syntax": "\"x defaulted to false\" is printed.  To keep the examples short, the invert (\"not\") operator and double-negation are used to show a boolean context:",
        "type": "Miscellaneous"
    },
    "UIEvent.constructor": {
        "descr": "The UIEvent() constructor creates a new UIEvent.",
        "name": "UIEvent.constructor",
        "params": [
            {
                "descr": "Is a DOMString representing the name of the event.",
                "name": "typeArg"
            },
            {
                "descr": "Is a UIEventInit dictionary, having the following fields:   detail: optional and defaulting to 0, of type long, that is a event-dependant value associated with the event. ",
                "name": "UIEventInitOptional"
            }
        ],
        "path": "dom/uievent/uievent",
        "syntax": "event = new UIEvent(typeArg, UIEventInit)",
        "type": "Events"
    },
    "UIEvent.isChar": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "UIEvent.isChar",
        "params": [],
        "path": "dom/uievent/ischar",
        "syntax": "var isChar = UIEvent.isChar;  Value A Boolean which is true if the event produces a character; otherwise false. Some keystroke combinations may raise events but not produce any character (example: ctrl-alt-?). When this is the case, isChar",
        "type": "Events"
    },
    "UIEvent.pageX": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "UIEvent.pageX",
        "params": [],
        "path": "dom/uievent/pagex",
        "syntax": "var pos = event.pageX Value An integer value, in pixels, indicating the X coordinate at which the mouse pointer was located when the event occurred. This value is relative to the left edge of the entire document, regardless of the current horizontal scrolling offset of the document. Examples For an example, see the documentation for the standard MouseEvent.pageX property, which you should use instead. Specifications This property is not part of any specification. See MouseEvent.pageX instead. Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  ? — 44  ? — 44   Replaced by MouseEvent.pageX in version 45.    ?   ?   9  ?   ?        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support  ? — 44  ? — 44   Replaced by MouseEvent.pageX in version 45.   ? — 44  ? — 44   Replaced by MouseEvent.pageX in version 45.    ?   ?   ?   ?   ?     See also  The standard MouseEvent.pageX property  MouseEvent.pageY (replacement for UIEvent.pageY)   Edit this page on MDN",
        "type": "Events"
    },
    "UIEvent.view": {
        "descr": "The UIEvent.view read-only property returns the WindowProxy object from which the event was generated. In browsers, this is the Window object the event happened in.",
        "name": "UIEvent.view",
        "params": [],
        "path": "dom/uievent/view",
        "syntax": "var view = event.view;    view is a reference to an AbstractView object.  Specifications    Specification Status Comment   Document Object Model (DOM) Level 3 Events SpecificationThe definition of 'UIEvent' in that specification. Obsolete From Document Object Model (DOM) Level 2 Events Specification, changed the type of view",
        "type": "Events"
    },
    "URIError": {
        "descr": "The URIError object represents an error when a global URI handling function was used in a wrong way.",
        "name": "URIError",
        "params": [
            {
                "descr": "Optional. Human-readable description of the error",
                "name": "message"
            },
            {
                "descr": "Optional. The name of the file containing the code that caused the exception",
                "name": "fileName"
            },
            {
                "descr": "Optional. The line number of the code that caused the exception",
                "name": "lineNumber"
            },
            {
                "descr": "Allows the addition of properties to a URIError object.",
                "name": "URIError.prototype"
            },
            {
                "descr": "Specifies the function that created an instance's prototype.",
                "name": "URIError.prototype.constructor"
            },
            {
                "descr": "Error message. Although ECMA-262 specifies that URIError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.",
                "name": "URIError.prototype.message"
            },
            {
                "descr": "Error name. Inherited from Error.",
                "name": "URIError.prototype.name"
            },
            {
                "descr": "Path to file that raised this error. ",
                "name": "URIError.prototype.fileName"
            },
            {
                "descr": "Line number in file that raised this error. ",
                "name": "URIError.prototype.lineNumber"
            },
            {
                "descr": "Column number in line that raised this error. ",
                "name": "URIError.prototype.columnNumber"
            },
            {
                "descr": "Stack trace. Inherited from Error.",
                "name": "URIError.prototype.stack"
            }
        ],
        "path": "javascript/global_objects/urierror",
        "syntax": "new URIError([message[, fileName[, lineNumber]]])",
        "type": "Errors"
    },
    "URL.constructor": {
        "descr": "The URL() constructor returns a newly created URL object representing the URL defined by the parameters.",
        "name": "URL.constructor",
        "params": [
            {
                "descr": "A USVString representing an absolute or relative URL. ",
                "name": "url"
            },
            {
                "descr": "A USVString representing the base URL to use in case url is a relative URL. ",
                "name": "base Optional"
            }
        ],
        "path": "dom/url/url",
        "syntax": "url = new URL(url, [base])",
        "type": "URL"
    },
    "URL.createObjectURL": {
        "descr": "The URL.createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter. The URL lifetime is tied to the document in the window on which it was created. The new object URL represents the specified File object or Blob object.",
        "name": "URL.createObjectURL",
        "params": [
            {
                "descr": "A File, Blob or MediaSource object to create an object URL for.",
                "name": "object"
            },
            {
                "descr": "See here for progress on deprecation.",
                "name": "?"
            },
            {
                "descr": "See here for progress on deprecation.",
                "name": "?"
            },
            {
                "descr": "See here for progress on deprecation.",
                "name": "?"
            },
            {
                "descr": "See here for progress on deprecation.",
                "name": "?"
            },
            {
                "descr": "See here for progress on deprecation.",
                "name": "?"
            },
            {
                "descr": "See here for progress on deprecation.",
                "name": "?"
            }
        ],
        "path": "dom/url/createobjecturl",
        "syntax": "objectURL = URL.createObjectURL(object);",
        "type": "URL"
    },
    "URL.origin": {
        "descr": "The URL.origin read-only property returns a USVString containing the Unicode serialization of the origin of the represented URL, that is:",
        "name": "URL.origin",
        "params": [],
        "path": "dom/url/origin",
        "syntax": "string = URLObject.origin;  Examples var result = new URL(\"blob:https://mozilla.org:443/\").origin; // Returns:'https://developer.mozilla.org:443'",
        "type": "URL"
    },
    "URL.revokeObjectURL": {
        "descr": "The URL.revokeObjectURL() static method releases an existing object URL which was previously created by calling URL.createObjectURL(). Call this method when you've finished using an object URL to let the browser know not to keep the reference to the file any longer.",
        "name": "URL.revokeObjectURL",
        "params": [
            {
                "descr": "A DOMString representing a object URL that was previously created by calling createObjectURL().",
                "name": "objectURL"
            }
        ],
        "path": "dom/url/revokeobjecturl",
        "syntax": "window.URL.revokeObjectURL(objectURL);",
        "type": "URL"
    },
    "URL.searchParams": {
        "descr": "The searchParams property of the URL interface returns a URLSearchParams object allowing access to the GET query arguments contained in the URL.",
        "name": "URL.searchParams",
        "params": [],
        "path": "dom/url/searchparams",
        "syntax": "var urlSearchParams = URL.searchParams; Value A URLSearchParams object. Example If the URL of your page is https://example.com/?name=Jonathan&age=18 you could parse out the 'name' and 'age' parameters using: let params = (new URL(document.location)).searchParams; let name = params.get(\"name\");\n or  // is the string \"Jonathan\" let age = parseInt(params.get(\"age\"));\n or  // is the number 18);",
        "type": "URL"
    },
    "URLSearchParams.append": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "URLSearchParams.append",
        "params": [
            {
                "descr": "The name of the parameter to append.",
                "name": "name"
            },
            {
                "descr": "The value of the parameter to append.",
                "name": "value"
            }
        ],
        "path": "dom/urlsearchparams/append",
        "syntax": "URLSearchParams.append(name, value)",
        "type": "URL"
    },
    "URLSearchParams.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "URLSearchParams.constructor",
        "params": [
            {
                "descr": "A USVString instance, a URLSearchParams instance, a sequence of USVStrings, or a record containing USVStrings. ",
                "name": "init Optional"
            }
        ],
        "path": "dom/urlsearchparams/urlsearchparams",
        "syntax": "var URLSearchParams = new URLSearchParams(init);",
        "type": "URL"
    },
    "URLSearchParams.delete": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "URLSearchParams.delete",
        "params": [
            {
                "descr": "The name of the parameter to be deleted.",
                "name": "name"
            }
        ],
        "path": "dom/urlsearchparams/delete",
        "syntax": "URLSearchParams.delete(name)",
        "type": "URL"
    },
    "URLSearchParams.entries": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "URLSearchParams.entries",
        "params": [],
        "path": "dom/urlsearchparams/entries",
        "syntax": "searchParams.entries();",
        "type": "URL"
    },
    "URLSearchParams.get": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "URLSearchParams.get",
        "params": [
            {
                "descr": "The name of the parameter to return.",
                "name": "name"
            }
        ],
        "path": "dom/urlsearchparams/get",
        "syntax": "URLSearchParams.get(name)",
        "type": "URL"
    },
    "URLSearchParams.getAll": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "URLSearchParams.getAll",
        "params": [
            {
                "descr": "The name of the parameter to return.",
                "name": "name"
            }
        ],
        "path": "dom/urlsearchparams/getall",
        "syntax": "URLSearchParams.getAll(name)",
        "type": "URL"
    },
    "URLSearchParams.has": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "URLSearchParams.has",
        "params": [
            {
                "descr": "The name of the parameter to find.",
                "name": "name"
            }
        ],
        "path": "dom/urlsearchparams/has",
        "syntax": "var hasName = URLSearchParams.has(name)",
        "type": "URL"
    },
    "URLSearchParams.keys": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "URLSearchParams.keys",
        "params": [],
        "path": "dom/urlsearchparams/keys",
        "syntax": "searchParams.keys();",
        "type": "URL"
    },
    "URLSearchParams.set": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "URLSearchParams.set",
        "params": [
            {
                "descr": "The name of the parameter to set.",
                "name": "name"
            },
            {
                "descr": "The value of the parameter to set.",
                "name": "value"
            }
        ],
        "path": "dom/urlsearchparams/set",
        "syntax": "URLSearchParams.set(name, value)",
        "type": "URL"
    },
    "URLSearchParams.sort": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "URLSearchParams.sort",
        "params": [],
        "path": "dom/urlsearchparams/sort",
        "syntax": "searchParams.sort();",
        "type": "URL"
    },
    "URLSearchParams.toString": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "URLSearchParams.toString",
        "params": [],
        "path": "dom/urlsearchparams/tostring",
        "syntax": "URLSearchParams.toString()",
        "type": "URL"
    },
    "URLSearchParams.values": {
        "descr": "The URLSearchParams.values() method returns an iterator allowing to go through all values contained in this object. The values are USVString objects.",
        "name": "URLSearchParams.values",
        "params": [],
        "path": "dom/urlsearchparams/values",
        "syntax": "searchParams.values();",
        "type": "URL"
    },
    "URLUtilsReadOnly.toString": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "URLUtilsReadOnly.toString",
        "params": [],
        "path": "dom/urlutilsreadonly/tostring",
        "syntax": "string = object.toString();",
        "type": "URL"
    },
    "USB.getDevices": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "USB.getDevices",
        "params": [],
        "path": "dom/usb/getdevices",
        "syntax": "var promise[] = USB.getDevices();",
        "type": "WebUSB"
    },
    "USB.requestDevice": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "USB.requestDevice",
        "params": [
            {
                "descr": "An array of filter objects for possible devices you would like to pair. ",
                "name": "filters"
            }
        ],
        "path": "dom/usb/requestdevice",
        "syntax": "var promise = USB.requestDevice([filters])",
        "type": "WebUSB"
    },
    "USBDevice.claimInterface": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "USBDevice.claimInterface",
        "params": [
            {
                "descr": "The index of one of the interfaces supported by the device. ",
                "name": "interfaceNumber"
            }
        ],
        "path": "dom/usbdevice/claiminterface",
        "syntax": "var promise = USBDevice.claimInterface(interfaceNumber)",
        "type": "WebUSB"
    },
    "USBDevice.clearHalt": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "USBDevice.clearHalt",
        "params": [
            {
                "descr": "Indicates whether the devices input or output should be cleared. ",
                "name": "direction"
            },
            {
                "descr": "Indicates the number of the endpoint to clear. ",
                "name": "endpointNumber"
            }
        ],
        "path": "dom/usbdevice/clearhalt",
        "syntax": "var promise = USBDevice.clearHalt(direction, endpointNumber)",
        "type": "WebUSB"
    },
    "USBDevice.close": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "USBDevice.close",
        "params": [],
        "path": "dom/usbdevice/close",
        "syntax": "var promise = USBDevice.close()",
        "type": "WebUSB"
    },
    "USBDevice.configuration": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "USBDevice.configuration",
        "params": [],
        "path": "dom/usbdevice/configuration",
        "syntax": "var USBConfiguration = USBDevice.configuration Value A USBConfiguration object. Example The following example uses this property to test for the existence of a USBConfiguration property to select a configuration before claiming an interface. async function connectDevice(usbDevice) { await usbDevice.open();\n or  if (usbDevice.configuration === null) await usbDevice.selectConfiguration(1);\n or  await usbDevice.claimInterface(0);\n or  });",
        "type": "WebUSB"
    },
    "USBDevice.controlTransferIn": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "USBDevice.controlTransferIn",
        "params": [
            {
                "descr": "An object that sets options for . ",
                "name": "setup"
            },
            {
                "descr": "A variable to contain the length of the data that will be read back from the device. ",
                "name": "length"
            }
        ],
        "path": "dom/usbdevice/controltransferin",
        "syntax": "var promise = USBDevice.controlTransferIn(setup, length)",
        "type": "WebUSB"
    },
    "USBDevice.controlTransferOut": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "USBDevice.controlTransferOut",
        "params": [
            {
                "descr": "An object that sets options for . ",
                "name": "setup"
            },
            {
                "descr": "A variable to contain the data that will be transfered out of the device.",
                "name": "data"
            }
        ],
        "path": "dom/usbdevice/controltransferout",
        "syntax": "var promise = USBDevice.controlTransferOut(setup, data)",
        "type": "WebUSB"
    },
    "USBDevice.isochronousTransferIn": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "USBDevice.isochronousTransferIn",
        "params": [
            {
                "descr": "The number of a device-specific endpoint (buffer).",
                "name": "endpointNumber"
            },
            {
                "descr": "An array of lengths for the packets being transfered.",
                "name": "packetLengths"
            }
        ],
        "path": "dom/usbdevice/isochronoustransferin",
        "syntax": "var promise = USBDevice.isochronousTransferIn(endpointNumber, packetLengths)",
        "type": "WebUSB"
    },
    "USBDevice.isochronousTransferOut": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "USBDevice.isochronousTransferOut",
        "params": [
            {
                "descr": "The number of a device-specific endpoint (buffer).",
                "name": "endpointNumber"
            },
            {
                "descr": "A variable to hold the data returned by the transfer.",
                "name": "data"
            },
            {
                "descr": "An array of lengths for the packets being transfered.",
                "name": "packetLengths"
            }
        ],
        "path": "dom/usbdevice/isochronoustransferout",
        "syntax": "var promise = USBDevice.isochronousTransferOut(endpointNumber, data, packetLengths)",
        "type": "WebUSB"
    },
    "USBDevice.open": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "USBDevice.open",
        "params": [],
        "path": "dom/usbdevice/open",
        "syntax": "var promise = USBDevice.open()",
        "type": "WebUSB"
    },
    "USBDevice.opened": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "USBDevice.opened",
        "params": [],
        "path": "dom/usbdevice/opened",
        "syntax": "var serialNumber = USBDevice.opened Value A boolean. Example This example is for a hypothetical USB device with a multi-colored LED. It shows how to test that a device is open before calling USBDevice.controlTransferOut to set a specified LED color.  What data can be passed to a USB device and how it is passed is particular and unique to each device.   async setDeviceColor(usbDevice, r, g, b) { if (device.opened) { // This hypothetical USB device requires that the data passed to // it be in a Uint8Array. let payload = new Uint8Array([r, g, b]);\n or  await usbDevice.controlTransferOut({ requestType: 'vendor', recipient: 'device', request: 1, value: 0, index: 0, }, payload);\n or  } });",
        "type": "WebUSB"
    },
    "USBDevice.productID": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "USBDevice.productID",
        "params": [],
        "path": "dom/usbdevice/productid",
        "syntax": "var serialNumber = USBDevice.productID Value The manufacturer-defined code that identifies a USB device. Specifications    Specification Status Comment   WebUSBThe definition of 'productID' in that specification. Draft Initial definition.    Browser compatibility No compatibility data found. Please contribute data for \"api.USBDevice.productID\" (depth: 1) to the MDN compatibility data repository.",
        "type": "WebUSB"
    },
    "USBDevice.releaseInterface": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "USBDevice.releaseInterface",
        "params": [
            {
                "descr": "The device-specific index of the currently-claimed interface.",
                "name": "interfaceNumber"
            }
        ],
        "path": "dom/usbdevice/releaseinterface",
        "syntax": "var promise = USBDevice.releaseInterface(interfaceNumber)",
        "type": "WebUSB"
    },
    "USBDevice.reset": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "USBDevice.reset",
        "params": [],
        "path": "dom/usbdevice/reset",
        "syntax": "var promise = USBDevice.reset()",
        "type": "WebUSB"
    },
    "USBDevice.selectAlternateInterface": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "USBDevice.selectAlternateInterface",
        "params": [
            {
                "descr": "The index of one of the interfaces supported by the device. ",
                "name": "interfaceNumber"
            },
            {
                "descr": "The configuration of the selected interface.",
                "name": "alternateSetting"
            }
        ],
        "path": "dom/usbdevice/selectalternateinterface",
        "syntax": "var promise = USBDevice.selectAlternateInterface(inerfaceNumber, alternateSetting)",
        "type": "WebUSB"
    },
    "USBDevice.selectConfiguration": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "USBDevice.selectConfiguration",
        "params": [
            {
                "descr": "The number of a device-specific configuration.",
                "name": "configurationValue"
            }
        ],
        "path": "dom/usbdevice/selectconfiguration",
        "syntax": "var promise = USBDevice.selectConfiguration(configurationValue)",
        "type": "WebUSB"
    },
    "USBDevice.transferIn": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "USBDevice.transferIn",
        "params": [
            {
                "descr": "The number of a device-specific endpoint (buffer).",
                "name": "endpointNumber"
            },
            {
                "descr": "A variable to contain the length of the data that will be read back from the device. ",
                "name": "length"
            }
        ],
        "path": "dom/usbdevice/transferin",
        "syntax": "var promise = USBDevice.transferIn(endpointNumber, length)",
        "type": "WebUSB"
    },
    "USBDevice.transferOut": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "USBDevice.transferOut",
        "params": [
            {
                "descr": "The number of a device-specific endpoint (buffer).",
                "name": "endpointNumber"
            },
            {
                "descr": "A variable to hold the data returned by the transfer.",
                "name": "data"
            }
        ],
        "path": "dom/usbdevice/transferout",
        "syntax": "var promise = USBDevice.transferOut(endpointNumber, data)",
        "type": "WebUSB"
    },
    "USBDevice.vendorID": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "USBDevice.vendorID",
        "params": [],
        "path": "dom/usbdevice/vendorid",
        "syntax": "var serialNumber = USBDevice.vendorID Value The official usg.org-assigned vendor ID. Specifications    Specification Status Comment   WebUSBThe definition of 'vendorID' in that specification. Draft Initial definition.    Browser compatibility No compatibility data found. Please contribute data for \"api.USBDevice.vendorID\" (depth: 1) to the MDN compatibility data repository.",
        "type": "WebUSB"
    },
    "UTC": {
        "descr": "The Date.UTC() method accepts the same parameters as the Date constructor, but treats them as UTC. It returns the number of milliseconds since January 1, 1970, 00:00:00 UTC.",
        "name": "Date.UTC",
        "params": [
            {
                "descr": "A full year.",
                "name": "year"
            },
            {
                "descr": "An integer between 0 and 11 representing the month.",
                "name": "month"
            },
            {
                "descr": "Optional. An integer between 1 and 31 representing the day of the month. ",
                "name": "day"
            },
            {
                "descr": "Optional. An integer between 0 and 23 representing the hours. ",
                "name": "hour"
            },
            {
                "descr": "Optional. An integer between 0 and 59 representing the minutes. ",
                "name": "minute"
            },
            {
                "descr": "Optional. An integer between 0 and 59 representing the seconds. ",
                "name": "second"
            },
            {
                "descr": "Optional. An integer between 0 and 999 representing the milliseconds. ",
                "name": "millisecond"
            }
        ],
        "path": "javascript/global_objects/date/utc",
        "syntax": "Date.UTC(year, month[, day[, hour[, minute[, second[, millisecond]]]]])",
        "type": "Date"
    },
    "Uint16Array": {
        "descr": "The Uint16Array typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
        "name": "Uint16Array",
        "params": [
            {
                "descr": "Returns a number value of the element size. ",
                "name": "Uint16Array.BYTES_PER_ELEMENT"
            },
            {
                "descr": "Static length property whose value is 0. ",
                "name": "Uint16Array.length"
            },
            {
                "descr": "Returns the string value of the constructor name. ",
                "name": "Uint16Array.name"
            },
            {
                "descr": "Prototype for the TypedArray objects.",
                "name": "Uint16Array.prototype"
            },
            {
                "descr": "Creates a new Uint16Array from an array-like or iterable object. ",
                "name": "Uint16Array.from()"
            },
            {
                "descr": "Creates a new Uint16Array with a variable number of arguments. ",
                "name": "Uint16Array.of()"
            },
            {
                "descr": "Returns the function that created an instance's prototype. ",
                "name": "Uint16Array.prototype.constructor"
            },
            {
                "descr": "Returns the ArrayBuffer referenced by the Uint16Array Fixed at construction time and thus read only.",
                "name": "Uint16Array.prototype.buffer Read only"
            },
            {
                "descr": "Returns the length (in bytes) of the Uint16Array from the start of its ArrayBuffer. ",
                "name": "Uint16Array.prototype.byteLength Read only"
            },
            {
                "descr": "Returns the offset (in bytes) of the Uint16Array from the start of its ArrayBuffer. ",
                "name": "Uint16Array.prototype.byteOffset Read only"
            },
            {
                "descr": "Returns the number of elements hold in the Uint16Array. ",
                "name": "Uint16Array.prototype.length Read only"
            },
            {
                "descr": "Copies a sequence of array elements within the array. ",
                "name": "Uint16Array.prototype.copyWithin()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the key/value pairs for each index in the array. ",
                "name": "Uint16Array.prototype.entries()"
            },
            {
                "descr": "Tests whether all elements in the array pass the test provided by a function. ",
                "name": "Uint16Array.prototype.every()"
            },
            {
                "descr": "Fills all the elements of an array from a start index to an end index with a static value. ",
                "name": "Uint16Array.prototype.fill()"
            },
            {
                "descr": "Creates a new array with all of the elements of this array for which the provided filtering function returns true. ",
                "name": "Uint16Array.prototype.filter()"
            },
            {
                "descr": "Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found. ",
                "name": "Uint16Array.prototype.find()"
            },
            {
                "descr": "Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found. ",
                "name": "Uint16Array.prototype.findIndex()"
            },
            {
                "descr": "Calls a function for each element in the array. ",
                "name": "Uint16Array.prototype.forEach()"
            },
            {
                "descr": "Determines whether a typed array includes a certain element, returning true or false as appropriate. ",
                "name": "Uint16Array.prototype.includes()"
            },
            {
                "descr": "Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. ",
                "name": "Uint16Array.prototype.indexOf()"
            },
            {
                "descr": "Joins all elements of an array into a string. ",
                "name": "Uint16Array.prototype.join()"
            },
            {
                "descr": "Returns a new Array Iterator that contains the keys for each index in the array. ",
                "name": "Uint16Array.prototype.keys()"
            },
            {
                "descr": "Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found. ",
                "name": "Uint16Array.prototype.lastIndexOf()"
            },
            {
                "descr": "Creates a new array with the results of calling a provided function on every element in this array. ",
                "name": "Uint16Array.prototype.map()"
            },
            {
                "descr": "Former non-standard version of Uint16Array.prototype.copyWithin().",
                "name": "Uint16Array.prototype.move() Unimplemented"
            },
            {
                "descr": "Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value. ",
                "name": "Uint16Array.prototype.reduce()"
            },
            {
                "descr": "Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value. ",
                "name": "Uint16Array.prototype.reduceRight()"
            },
            {
                "descr": "Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first. ",
                "name": "Uint16Array.prototype.reverse()"
            },
            {
                "descr": "Stores multiple values in the typed array, reading input values from a specified array.",
                "name": "Uint16Array.prototype.set()"
            },
            {
                "descr": "Extracts a section of an array and returns a new array. ",
                "name": "Uint16Array.prototype.slice()"
            },
            {
                "descr": "Returns true if at least one element in this array satisfies the provided testing function. ",
                "name": "Uint16Array.prototype.some()"
            },
            {
                "descr": "Sorts the elements of an array in place and returns the array. ",
                "name": "Uint16Array.prototype.sort()"
            },
            {
                "descr": "Returns a new Uint16Array from the given start and end element index.",
                "name": "Uint16Array.prototype.subarray()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array. ",
                "name": "Uint16Array.prototype.values()"
            },
            {
                "descr": "Returns a localized string representing the array and its elements. ",
                "name": "Uint16Array.prototype.toLocaleString()"
            },
            {
                "descr": "Returns a string representing the array and its elements. ",
                "name": "Uint16Array.prototype.toString()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array.",
                "name": "Uint16Array.prototype[@@iterator]()"
            }
        ],
        "path": "javascript/global_objects/uint16array",
        "syntax": "new Uint16Array();\n or  // new in ES2017 new Uint16Array(length);\n or  new Uint16Array(typedArray);\n or  new Uint16Array(object);\n or  new Uint16Array(buffer [, byteOffset [, length]]);",
        "type": "Global Objects"
    },
    "Uint32Array": {
        "descr": "The Uint32Array typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
        "name": "Uint32Array",
        "params": [
            {
                "descr": "Returns a number value of the element size. ",
                "name": "Uint32Array.BYTES_PER_ELEMENT"
            },
            {
                "descr": "Static length property whose value is 0. ",
                "name": "Uint32Array.length"
            },
            {
                "descr": "Returns the string value of the constructor name. ",
                "name": "Uint32Array.name"
            },
            {
                "descr": "Prototype for the TypedArray objects.",
                "name": "Uint32Array.prototype"
            },
            {
                "descr": "Creates a new Uint32Array from an array-like or iterable object. ",
                "name": "Uint32Array.from()"
            },
            {
                "descr": "Creates a new Uint32Array with a variable number of arguments. ",
                "name": "Uint32Array.of()"
            },
            {
                "descr": "Returns the function that created an instance's prototype. ",
                "name": "Uint32Array.prototype.constructor"
            },
            {
                "descr": "Returns the ArrayBuffer referenced by the Uint32Array Fixed at construction time and thus read only.",
                "name": "Uint32Array.prototype.buffer Read only"
            },
            {
                "descr": "Returns the length (in bytes) of the Uint32Array from the start of its ArrayBuffer. ",
                "name": "Uint32Array.prototype.byteLength Read only"
            },
            {
                "descr": "Returns the offset (in bytes) of the Uint32Array from the start of its ArrayBuffer. ",
                "name": "Uint32Array.prototype.byteOffset Read only"
            },
            {
                "descr": "Returns the number of elements hold in the Uint32Array. ",
                "name": "Uint32Array.prototype.length Read only"
            },
            {
                "descr": "Copies a sequence of array elements within the array. ",
                "name": "Uint32Array.prototype.copyWithin()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the key/value pairs for each index in the array. ",
                "name": "Uint32Array.prototype.entries()"
            },
            {
                "descr": "Tests whether all elements in the array pass the test provided by a function. ",
                "name": "Uint32Array.prototype.every()"
            },
            {
                "descr": "Fills all the elements of an array from a start index to an end index with a static value. ",
                "name": "Uint32Array.prototype.fill()"
            },
            {
                "descr": "Creates a new array with all of the elements of this array for which the provided filtering function returns true. ",
                "name": "Uint32Array.prototype.filter()"
            },
            {
                "descr": "Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found. ",
                "name": "Uint32Array.prototype.find()"
            },
            {
                "descr": "Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found. ",
                "name": "Uint32Array.prototype.findIndex()"
            },
            {
                "descr": "Calls a function for each element in the array. ",
                "name": "Uint32Array.prototype.forEach()"
            },
            {
                "descr": "Determines whether a typed array includes a certain element, returning true or false as appropriate. ",
                "name": "Uint32Array.prototype.includes()"
            },
            {
                "descr": "Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. ",
                "name": "Uint32Array.prototype.indexOf()"
            },
            {
                "descr": "Joins all elements of an array into a string. ",
                "name": "Uint32Array.prototype.join()"
            },
            {
                "descr": "Returns a new Array Iterator that contains the keys for each index in the array. ",
                "name": "Uint32Array.prototype.keys()"
            },
            {
                "descr": "Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found. ",
                "name": "Uint32Array.prototype.lastIndexOf()"
            },
            {
                "descr": "Creates a new array with the results of calling a provided function on every element in this array. ",
                "name": "Uint32Array.prototype.map()"
            },
            {
                "descr": "Former non-standard version of Uint32Array.prototype.copyWithin().",
                "name": "Uint32Array.prototype.move() Unimplemented"
            },
            {
                "descr": "Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value. ",
                "name": "Uint32Array.prototype.reduce()"
            },
            {
                "descr": "Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value. ",
                "name": "Uint32Array.prototype.reduceRight()"
            },
            {
                "descr": "Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first. ",
                "name": "Uint32Array.prototype.reverse()"
            },
            {
                "descr": "Stores multiple values in the typed array, reading input values from a specified array.",
                "name": "Uint32Array.prototype.set()"
            },
            {
                "descr": "Extracts a section of an array and returns a new array. ",
                "name": "Uint32Array.prototype.slice()"
            },
            {
                "descr": "Returns true if at least one element in this array satisfies the provided testing function. ",
                "name": "Uint32Array.prototype.some()"
            },
            {
                "descr": "Sorts the elements of an array in place and returns the array. ",
                "name": "Uint32Array.prototype.sort()"
            },
            {
                "descr": "Returns a new Uint32Array from the given start and end element index.",
                "name": "Uint32Array.prototype.subarray()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array. ",
                "name": "Uint32Array.prototype.values()"
            },
            {
                "descr": "Returns a localized string representing the array and its elements. ",
                "name": "Uint32Array.prototype.toLocaleString()"
            },
            {
                "descr": "Returns a string representing the array and its elements. ",
                "name": "Uint32Array.prototype.toString()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array.",
                "name": "Uint32Array.prototype[@@iterator]()"
            }
        ],
        "path": "javascript/global_objects/uint32array",
        "syntax": "new Uint32Array();\n or  // new in ES2017 new Uint32Array(length);\n or  new Uint32Array(typedArray);\n or  new Uint32Array(object);\n or  new Uint32Array(buffer [, byteOffset [, length]]);",
        "type": "Global Objects"
    },
    "Uint8Array": {
        "descr": "The Uint8Array typed array represents an array of 8-bit unsigned integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
        "name": "Uint8Array",
        "params": [
            {
                "descr": "Returns a number value of the element size. ",
                "name": "Uint8Array.BYTES_PER_ELEMENT"
            },
            {
                "descr": "Static length property whose value is 0. ",
                "name": "Uint8Array.length"
            },
            {
                "descr": "Returns the string value of the constructor name. ",
                "name": "Uint8Array.name"
            },
            {
                "descr": "Prototype for the TypedArray objects.",
                "name": "Uint8Array.prototype"
            },
            {
                "descr": "Creates a new Uint8Array from an array-like or iterable object. ",
                "name": "Uint8Array.from()"
            },
            {
                "descr": "Creates a new Uint8Array with a variable number of arguments. ",
                "name": "Uint8Array.of()"
            },
            {
                "descr": "Returns the function that created an instance's prototype. ",
                "name": "Uint8Array.prototype.constructor"
            },
            {
                "descr": "Returns the ArrayBuffer referenced by the Uint8Array Fixed at construction time and thus read only.",
                "name": "Uint8Array.prototype.buffer Read only"
            },
            {
                "descr": "Returns the length (in bytes) of the Uint8Array. ",
                "name": "Uint8Array.prototype.byteLength Read only"
            },
            {
                "descr": "Returns the offset (in bytes) of the Uint8Array from the start of its ArrayBuffer. ",
                "name": "Uint8Array.prototype.byteOffset Read only"
            },
            {
                "descr": "Returns the number of elements held in the Uint8Array. ",
                "name": "Uint8Array.prototype.length Read only"
            },
            {
                "descr": "Copies a sequence of array elements within the array. ",
                "name": "Uint8Array.prototype.copyWithin()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the key/value pairs for each index in the array. ",
                "name": "Uint8Array.prototype.entries()"
            },
            {
                "descr": "Tests whether all elements in the array pass the test provided by a function. ",
                "name": "Uint8Array.prototype.every()"
            },
            {
                "descr": "Fills all the elements of an array from a start index to an end index with a static value. ",
                "name": "Uint8Array.prototype.fill()"
            },
            {
                "descr": "Creates a new array with all of the elements of this array for which the provided filtering function returns true. ",
                "name": "Uint8Array.prototype.filter()"
            },
            {
                "descr": "Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found. ",
                "name": "Uint8Array.prototype.find()"
            },
            {
                "descr": "Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found. ",
                "name": "Uint8Array.prototype.findIndex()"
            },
            {
                "descr": "Calls a function for each element in the array. ",
                "name": "Uint8Array.prototype.forEach()"
            },
            {
                "descr": "Determines whether a typed array includes a certain element, returning true or false as appropriate. ",
                "name": "Uint8Array.prototype.includes()"
            },
            {
                "descr": "Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. ",
                "name": "Uint8Array.prototype.indexOf()"
            },
            {
                "descr": "Joins all elements of an array into a string. ",
                "name": "Uint8Array.prototype.join()"
            },
            {
                "descr": "Returns a new Array Iterator that contains the keys for each index in the array. ",
                "name": "Uint8Array.prototype.keys()"
            },
            {
                "descr": "Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found. ",
                "name": "Uint8Array.prototype.lastIndexOf()"
            },
            {
                "descr": "Creates a new array with the results of calling a provided function on every element in this array. ",
                "name": "Uint8Array.prototype.map()"
            },
            {
                "descr": "Former non-standard version of Uint8Array.prototype.copyWithin().",
                "name": "Uint8Array.prototype.move() Unimplemented"
            },
            {
                "descr": "Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value. ",
                "name": "Uint8Array.prototype.reduce()"
            },
            {
                "descr": "Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value. ",
                "name": "Uint8Array.prototype.reduceRight()"
            },
            {
                "descr": "Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first. ",
                "name": "Uint8Array.prototype.reverse()"
            },
            {
                "descr": "Stores multiple values in the typed array, reading input values from a specified array.",
                "name": "Uint8Array.prototype.set()"
            },
            {
                "descr": "Extracts a section of an array and returns a new array. ",
                "name": "Uint8Array.prototype.slice()"
            },
            {
                "descr": "Returns true if at least one element in this array satisfies the provided testing function. ",
                "name": "Uint8Array.prototype.some()"
            },
            {
                "descr": "Sorts the elements of an array in place and returns the array. ",
                "name": "Uint8Array.prototype.sort()"
            },
            {
                "descr": "Returns a new Uint8Array from the given start and end element index.",
                "name": "Uint8Array.prototype.subarray()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array. ",
                "name": "Uint8Array.prototype.values()"
            },
            {
                "descr": "Returns a localized string representing the array and its elements. ",
                "name": "Uint8Array.prototype.toLocaleString()"
            },
            {
                "descr": "Returns a string representing the array and its elements. ",
                "name": "Uint8Array.prototype.toString()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array.",
                "name": "Uint8Array.prototype[@@iterator]()"
            }
        ],
        "path": "javascript/global_objects/uint8array",
        "syntax": "new Uint8Array();\n or  // new in ES2017 new Uint8Array(length);\n or  new Uint8Array(typedArray);\n or  new Uint8Array(object);\n or  new Uint8Array(buffer [, byteOffset [, length]]);",
        "type": "Global Objects"
    },
    "Uint8ClampedArray": {
        "descr": "The Uint8ClampedArray typed array represents an array of 8-bit unsigned integers clamped to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead; if you specify a non-integer, the nearest integer will be set. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
        "name": "Uint8ClampedArray",
        "params": [
            {
                "descr": "Returns a number value of the element size. ",
                "name": "Uint8ClampedArray.BYTES_PER_ELEMENT"
            },
            {
                "descr": "Static length property whose value is 0. ",
                "name": "Uint8ClampedArray.length"
            },
            {
                "descr": "Returns the string value of the constructor name. ",
                "name": "Uint8ClampedArray.name"
            },
            {
                "descr": "Prototype for the TypedArray objects.",
                "name": "Uint8ClampedArray.prototype"
            },
            {
                "descr": "Creates a new Uint8ClampedArray from an array-like or iterable object. ",
                "name": "Uint8ClampedArray.from()"
            },
            {
                "descr": "Creates a new Uint8ClampedArray with a variable number of arguments. ",
                "name": "Uint8ClampedArray.of()"
            },
            {
                "descr": "Returns the function that created an instance's prototype. ",
                "name": "Uint8ClampedArray.prototype.constructor"
            },
            {
                "descr": "Returns the ArrayBuffer referenced by the Uint8ClampedArray Fixed at construction time and thus read only.",
                "name": "Uint8ClampedArray.prototype.buffer Read only"
            },
            {
                "descr": "Returns the length (in bytes) of the Uint8ClampedArray from the start of its ArrayBuffer. ",
                "name": "Uint8ClampedArray.prototype.byteLength Read only"
            },
            {
                "descr": "Returns the offset (in bytes) of the Uint8ClampedArray from the start of its ArrayBuffer. ",
                "name": "Uint8ClampedArray.prototype.byteOffset Read only"
            },
            {
                "descr": "Returns the number of elements hold in the UintClamped8Array. ",
                "name": "Uint8ClampedArray.prototype.length Read only"
            },
            {
                "descr": "Copies a sequence of array elements within the array. ",
                "name": "Uint8ClampedArray.prototype.copyWithin()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the key/value pairs for each index in the array. ",
                "name": "Uint8ClampedArray.prototype.entries()"
            },
            {
                "descr": "Tests whether all elements in the array pass the test provided by a function. ",
                "name": "Uint8ClampedArray.prototype.every()"
            },
            {
                "descr": "Fills all the elements of an array from a start index to an end index with a static value. ",
                "name": "Uint8ClampedArray.prototype.fill()"
            },
            {
                "descr": "Creates a new array with all of the elements of this array for which the provided filtering function returns true. ",
                "name": "Uint8ClampedArray.prototype.filter()"
            },
            {
                "descr": "Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found. ",
                "name": "Uint8ClampedArray.prototype.find()"
            },
            {
                "descr": "Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found. ",
                "name": "Uint8ClampedArray.prototype.findIndex()"
            },
            {
                "descr": "Calls a function for each element in the array. ",
                "name": "Uint8ClampedArray.prototype.forEach()"
            },
            {
                "descr": "Determines whether a typed array includes a certain element, returning true or false as appropriate. ",
                "name": "Uint8ClampedArray.prototype.includes()"
            },
            {
                "descr": "Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. ",
                "name": "Uint8ClampedArray.prototype.indexOf()"
            },
            {
                "descr": "Joins all elements of an array into a string. ",
                "name": "Uint8ClampedArray.prototype.join()"
            },
            {
                "descr": "Returns a new Array Iterator that contains the keys for each index in the array. ",
                "name": "Uint8ClampedArray.prototype.keys()"
            },
            {
                "descr": "Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found. ",
                "name": "Uint8ClampedArray.prototype.lastIndexOf()"
            },
            {
                "descr": "Creates a new array with the results of calling a provided function on every element in this array. ",
                "name": "Uint8ClampedArray.prototype.map()"
            },
            {
                "descr": "Former non-standard version of Uint8ClampedArray.prototype.copyWithin().",
                "name": "Uint8ClampedArray.prototype.move() Unimplemented"
            },
            {
                "descr": "Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value. ",
                "name": "Uint8ClampedArray.prototype.reduce()"
            },
            {
                "descr": "Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value. ",
                "name": "Uint8ClampedArray.prototype.reduceRight()"
            },
            {
                "descr": "Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first. ",
                "name": "Uint8ClampedArray.prototype.reverse()"
            },
            {
                "descr": "Stores multiple values in the typed array, reading input values from a specified array.",
                "name": "Uint8ClampedArray.prototype.set()"
            },
            {
                "descr": "Extracts a section of an array and returns a new array. ",
                "name": "Uint8ClampedArray.prototype.slice()"
            },
            {
                "descr": "Returns true if at least one element in this array satisfies the provided testing function. ",
                "name": "Uint8ClampedArray.prototype.some()"
            },
            {
                "descr": "Sorts the elements of an array in place and returns the array. ",
                "name": "Uint8ClampedArray.prototype.sort()"
            },
            {
                "descr": "Returns a new Uint8ClampedArray from the given start and end element index.",
                "name": "Uint8ClampedArray.prototype.subarray()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array. ",
                "name": "Uint8ClampedArray.prototype.values()"
            },
            {
                "descr": "Returns a localized string representing the array and its elements. ",
                "name": "Uint8ClampedArray.prototype.toLocaleString()"
            },
            {
                "descr": "Returns a string representing the array and its elements. ",
                "name": "Uint8ClampedArray.prototype.toString()"
            },
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array.",
                "name": "Uint8ClampedArray.prototype[@@iterator]()"
            }
        ],
        "path": "javascript/global_objects/uint8clampedarray",
        "syntax": "new Uint8ClampedArray();\n or  // new in ES2017 new Uint8ClampedArray(length);\n or  new Uint8ClampedArray(typedArray);\n or  new Uint8ClampedArray(object);\n or  new Uint8ClampedArray(buffer [, byteOffset [, length]]);",
        "type": "Global Objects"
    },
    "UserProximityEvent.near": {
        "descr": "The near property tell if there is an object close to the device (true) or not (false).",
        "name": "UserProximityEvent.near",
        "params": [],
        "path": "dom/userproximityevent/near",
        "syntax": "var near = instanceOfUserProximityEvent.near; Value A boolean Specifications    Specification Status Comment     Proximity SensorThe definition of 'Proximity Events' in that specification. Working Draft Initial specification    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   No  ?   62 Disabled    62 Disabled    See bug 1462308. Disabled From version 62: this feature is behind the device.sensors.proximity.enabled preference (needs to be set to true). To change preferences in Firefox, visit about:config. ? — 61     No  No  No       Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   No  No  ?   62 Disabled    62 Disabled    See bug 1462308. Disabled From version 62: this feature is behind the device.sensors.proximity.enabled",
        "type": "Events"
    },
    "Using dynamic styling information": {
        "descr": "In many cases, and where possible, it really is best practice to dynamically manipulate classes via the className property since the ultimate appearance of all of the styling hooks can be controlled in a single stylesheet. One's JavaScript code also becomes cleaner since instead of being dedicated to styling details, it can focus on the overall semantics of each section it is creating or manipulating, leaving the precise style details to the stylesheet. However, there are cases where actually obtaining or manipulating the rules can be useful (whether for whole stylesheets or individual elements), and that is described in further detail below. Note also that, as with individual element's DOM styles, when speaking of manipulating the stylesheets, this is not actually manipulating the physical document(s), but merely the internal representation of the document.",
        "name": "Using dynamic styling information",
        "params": [],
        "path": "dom/css_object_model/using_dynamic_styling_information",
        "syntax": "style object exposes the Stylesheet and the CSSStylesheet interfaces. Those interfaces contain members like insertRule, selectorText, and parentStyleSheet for accessing and manipulating the individual style rules that make up a CSS stylesheet. To get to the style objects from the document, you can use the document.styleSheets property and access the individual objects by index (e.g., document.styleSheets[0] is the first stylesheet defined for the document, etc.).",
        "type": "Miscellaneous"
    },
    "VRDisplay.cancelAnimationFrame": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRDisplay.cancelAnimationFrame",
        "params": [
            {
                "descr": "The handle returned by the VRDisplay.requestAnimationFrame() call that you want to unregister.",
                "name": "handle"
            }
        ],
        "path": "dom/vrdisplay/cancelanimationframe",
        "syntax": "vrDisplayInstance.cancelAnimationFrame(handle);",
        "type": "WebVR"
    },
    "VRDisplay.capabilities": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRDisplay.capabilities",
        "params": [],
        "path": "dom/vrdisplay/capabilities",
        "syntax": "var myCapabilities = vrDisplayInstance.capabilities; Value A VRDisplayCapabilities object. Examples function reportDisplays() { navigator.getVRDisplays().then(function(displays) { for(var i = 0; i < displays.length; i++) { var cap = displays[i].capabilities; // cap is a VRDisplayCapabilities object var listItem = document.createElement('li');\n or  listItem.innerHTML = '<strong>Display ' + (i+1) + '</strong>' + '<br>VR Display ID: ' + displays[i].displayId + '<br>VR Display Name: ' + displays[i].displayName + '<br>Display can present content: ' + cap.canPresent + '<br>Display is separate from the computer\\'s main display: ' + cap.hasExternalDisplay + '<br>Display can return position info: ' + cap.hasPosition + '<br>Display can return orientation info: ' + cap.hasOrientation + '<br>Display max layers: ' + cap.maxLayers; list.appendChild(listItem);\n or  } });\n or  });",
        "type": "WebVR"
    },
    "VRDisplay.depthFar": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRDisplay.depthFar",
        "params": [],
        "path": "dom/vrdisplay/depthfar",
        "syntax": "var mydepthFar = vrDisplayInstance.depthFar; vrDisplayInstance.depthFar = 7500.0;  Value A double, representing the z-depth in meters; its initial value is 10000.0. Examples var vrDisplay; navigator.getVRDisplays().then(function(displays) { vrDisplay = displays[0]; vrDisplay.depthNear = 1.0; vrDisplay.depthFar = 7500.0; });",
        "type": "WebVR"
    },
    "VRDisplay.depthNear": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRDisplay.depthNear",
        "params": [],
        "path": "dom/vrdisplay/depthnear",
        "syntax": "var mydepthNear = vrDisplayInstance.depthNear; vrDisplayInstance.depthNear = 1.0;  Value A double, representing the z-depth in meters; its initial value is 0.01. Examples var vrDisplay; navigator.getVRDisplays().then(function(displays) { vrDisplay = displays[0]; vrDisplay.depthNear = 1.0; vrDisplay.depthFar = 7500.0; });",
        "type": "WebVR"
    },
    "VRDisplay.displayId": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRDisplay.displayId",
        "params": [],
        "path": "dom/vrdisplay/displayid",
        "syntax": "var myDisplayID = vrDisplayInstance.displayId; Value A number representing the ID of the specific VRDisplay. Examples function reportDisplays() { navigator.getVRDisplays().then(function(displays) { for(var i = 0; i < displays.length; i++) { var cap = displays[i].capabilities; // cap is a VRDisplayCapabilities object var listItem = document.createElement('li');\n or  listItem.innerHTML = '<strong>Display ' + (i+1) + '</strong>' + '<br>VR Display ID: ' + displays[i].displayId + '<br>VR Display Name: ' + displays[i].displayName + '<br>Display can present content: ' + cap.canPresent + '<br>Display is separate from the computer\\'s main display: ' + cap.hasExternalDisplay + '<br>Display can return position info: ' + cap.hasPosition + '<br>Display can return orientation info: ' + cap.hasOrientation + '<br>Display max layers: ' + cap.maxLayers; list.appendChild(listItem);\n or  } });\n or  });",
        "type": "WebVR"
    },
    "VRDisplay.displayName": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRDisplay.displayName",
        "params": [],
        "path": "dom/vrdisplay/displayname",
        "syntax": "var myDisplayName = vrDisplayInstance.displayName; Value A DOMString containing the human-readable name of the specific VR display. Examples function reportDisplays() { navigator.getVRDisplays().then(function(displays) { for(var i = 0; i < displays.length; i++) { var cap = displays[i].capabilities; // cap is a VRDisplayCapabilities object var listItem = document.createElement('li');\n or  listItem.innerHTML = '<strong>Display ' + (i+1) + '</strong>' + '<br>VR Display ID: ' + displays[i].displayId + '<br>VR Display Name: ' + displays[i].displayName + '<br>Display can present content: ' + cap.canPresent + '<br>Display is separate from the computer\\'s main display: ' + cap.hasExternalDisplay + '<br>Display can return position info: ' + cap.hasPosition + '<br>Display can return orientation info: ' + cap.hasOrientation + '<br>Display max layers: ' + cap.maxLayers; list.appendChild(listItem);\n or  } });\n or  });",
        "type": "WebVR"
    },
    "VRDisplay.exitPresent": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRDisplay.exitPresent",
        "params": [],
        "path": "dom/vrdisplay/exitpresent",
        "syntax": "vrDisplayInstance.exitPresent().then(function() { // Do something after the presentation has ended });",
        "type": "WebVR"
    },
    "VRDisplay.getEyeParameters": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRDisplay.getEyeParameters",
        "params": [
            {
                "descr": "A DOMString representing the eye you want to return the eye parameters for. ",
                "name": "whichEye"
            }
        ],
        "path": "dom/vrdisplay/geteyeparameters",
        "syntax": "var myEyeParameters = vrDisplayInstance.getEyeParameters(whichEye);",
        "type": "WebVR"
    },
    "VRDisplay.getFrameData": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRDisplay.getFrameData",
        "params": [
            {
                "descr": "The VRFrameData object you want to populate.",
                "name": "frameData"
            }
        ],
        "path": "dom/vrdisplay/getframedata",
        "syntax": "vrDisplayInstance.getFrameData(frameData);",
        "type": "WebVR"
    },
    "VRDisplay.getImmediatePose": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "VRDisplay.getImmediatePose",
        "params": [],
        "path": "dom/vrdisplay/getimmediatepose",
        "syntax": "var myImmediatePose = vrDisplayInstance.getImmediatePose();",
        "type": "WebVR"
    },
    "VRDisplay.getLayers": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRDisplay.getLayers",
        "params": [],
        "path": "dom/vrdisplay/getlayers",
        "syntax": "var myLayers = vrDisplayInstance.getLayers();",
        "type": "WebVR"
    },
    "VRDisplay.hardwareUnitId": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "VRDisplay.hardwareUnitId",
        "params": [],
        "path": "dom/vrdisplay/hardwareunitid",
        "syntax": "var hardwareID = VRDevice.hardwareUnitId; Value A DOMString containing the ID of the overall hardware unit. Examples The following snippet (see our VRDevice example) returns an array of all the VRDevice",
        "type": "WebVR"
    },
    "VRDisplay.isConnected": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRDisplay.isConnected",
        "params": [],
        "path": "dom/vrdisplay/isconnected",
        "syntax": "var isItConnected = vrDisplayInstance.isConnected;  Value A Boolean; true means the display is connected; false means it isn't. Examples navigator.getVRDisplays().then(function(displays) { // If a display is available, use it to present the scene if(displays.length > 0) { vrDisplay = displays[0]; // Starting the presentation when the button is clicked: It can only be called in response to a user gesture btn.addEventListener('click', function() { // Only request presentation if the display is still connected. if(vrDisplay.isConnected) { vrDisplay.requestPresent([{ source: canvas }]).then(function() { // start rendering the app, etc. });\n or  } else { console.log('Connection to display lost');\n or  } });\n or  } });",
        "type": "WebVR"
    },
    "VRDisplay.ispresenting": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRDisplay.ispresenting",
        "params": [],
        "path": "dom/vrdisplay/ispresenting",
        "syntax": "var isItPresenting = vrDisplayInstance.isPresenting;  Value A Boolean; true means the display is presenting; false means it isn't. Examples function onVRExitPresent () { // No sense in exiting presentation if we're not actually presenting. // (This may happen if we get an event like vrdisplaydeactivate when // we weren't presenting.) if (!vrDisplay.isPresenting) return; vrDisplay.exitPresent().then(function () { // Nothing to do because we're handling things in onVRPresentChange. }, function (err) { var errMsg = \"exitPresent failed.\"; if (err && err.message) { errMsg += \"<br/>\" + err.message } VRSamplesUtil.addError(errMsg, 2000);\n or  });\n or  });",
        "type": "WebVR"
    },
    "VRDisplay.requestAnimationFrame": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRDisplay.requestAnimationFrame",
        "params": [
            {
                "descr": "A callback function that will be called every time a new frame of the VRDisplay presentation is rendered.",
                "name": "callback"
            }
        ],
        "path": "dom/vrdisplay/requestanimationframe",
        "syntax": "var handle = vrDisplayInstance.requestAnimationFrame(callback);",
        "type": "WebVR"
    },
    "VRDisplay.requestPresent": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRDisplay.requestPresent",
        "params": [
            {
                "descr": "An array of VRLayerInit objects representing the scene you want to present. ",
                "name": "layers"
            }
        ],
        "path": "dom/vrdisplay/requestpresent",
        "syntax": "vrDisplayInstance.requestPresent(layers).then(function() { // Do something after the presentation has begun });",
        "type": "WebVR"
    },
    "VRDisplay.stageParameters": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRDisplay.stageParameters",
        "params": [],
        "path": "dom/vrdisplay/stageparameters",
        "syntax": "var myStageParameters = vrDisplayInstance.stageParameters;  Value VRStageParameters object containing the VRDisplay's room-scale parameters, or null if the VRDisplay is not capable of supporting room-scale experiences. Examples var info = document.querySelector('p');\n or  var vrDisplay; navigator.getVRDisplays().then(function(displays) { vrDisplay = displays[0]; var stageParams = vrDisplay.stageParameters; // stageParams is a VRStageParameters object if(stageParams === null) { info.textContent = 'Your VR Hardware does not support room-scale experiences.' } else { info.innerHTML = '<strong>Display stage parameters</strong>' + '<br>Sitting to standing transform: ' + stageParams.sittingToStandingTransform + '<br>Play area width (m): ' + stageParams.sizeX + '<br>Play area depth (m): ' + stageParams.sizeY } });",
        "type": "WebVR"
    },
    "VRDisplay.submitFrame": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRDisplay.submitFrame",
        "params": [],
        "path": "dom/vrdisplay/submitframe",
        "syntax": "vrDisplayInstance.submitFrame();",
        "type": "WebVR"
    },
    "VRDisplayCapabilities.canPresent": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRDisplayCapabilities.canPresent",
        "params": [],
        "path": "dom/vrdisplaycapabilities/canpresent",
        "syntax": "var canIPresent = vrDisplayCapabilitiesInstance.canPresent; Value A Boolean. Examples function reportDisplays() { navigator.getVRDisplays().then(function(displays) { for(var i = 0; i < displays.length; i++) { var cap = displays[i].capabilities; // cap is a VRDisplayCapabilities object var listItem = document.createElement('li');\n or  listItem.innerHTML = '<strong>Display ' + (i+1) + '</strong>' + '<br>VR Display ID: ' + displays[i].displayId + '<br>VR Display Name: ' + displays[i].displayName + '<br>Display can present content: ' + cap.canPresent + '<br>Display is separate from the computer\\'s main display: ' + cap.hasExternalDisplay + '<br>Display can return position info: ' + cap.hasPosition + '<br>Display can return orientation info: ' + cap.hasOrientation + '<br>Display max layers: ' + cap.maxLayers; list.appendChild(listItem);\n or  } });\n or  });",
        "type": "WebVR"
    },
    "VRDisplayCapabilities.hasExternalDisplay": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRDisplayCapabilities.hasExternalDisplay",
        "params": [],
        "path": "dom/vrdisplaycapabilities/hasexternaldisplay",
        "syntax": "var hasAnExternalDisplay = vrDisplayCapabilitiesInstance.hasExternalDisplay; Value A Boolean. Examples function reportDisplays() { navigator.getVRDisplays().then(function(displays) { for(var i = 0; i < displays.length; i++) { var cap = displays[i].capabilities; // cap is a VRDisplayCapabilities object var listItem = document.createElement('li');\n or  listItem.innerHTML = '<strong>Display ' + (i+1) + '</strong>' + '<br>VR Display ID: ' + displays[i].displayId + '<br>VR Display Name: ' + displays[i].displayName + '<br>Display can present content: ' + cap.canPresent + '<br>Display is separate from the computer\\'s main display: ' + cap.hasExternalDisplay + '<br>Display can return position info: ' + cap.hasPosition + '<br>Display can return orientation info: ' + cap.hasOrientation + '<br>Display max layers: ' + cap.maxLayers; list.appendChild(listItem);\n or  } });\n or  });",
        "type": "WebVR"
    },
    "VRDisplayCapabilities.hasOrientation": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRDisplayCapabilities.hasOrientation",
        "params": [],
        "path": "dom/vrdisplaycapabilities/hasorientation",
        "syntax": "var hasItGotOrientation = vrDisplayCapabilitiesInstance.hasOrientation; Value A Boolean. Examples function reportDisplays() { navigator.getVRDisplays().then(function(displays) { for(var i = 0; i < displays.length; i++) { var cap = displays[i].capabilities; // cap is a VRDisplayCapabilities object var listItem = document.createElement('li');\n or  listItem.innerHTML = '<strong>Display ' + (i+1) + '</strong>' + '<br>VR Display ID: ' + displays[i].displayId + '<br>VR Display Name: ' + displays[i].displayName + '<br>Display can present content: ' + cap.canPresent + '<br>Display is separate from the computer\\'s main display: ' + cap.hasExternalDisplay + '<br>Display can return position info: ' + cap.hasPosition + '<br>Display can return orientation info: ' + cap.hasOrientation + '<br>Display max layers: ' + cap.maxLayers; list.appendChild(listItem);\n or  } });\n or  });",
        "type": "WebVR"
    },
    "VRDisplayCapabilities.hasPosition": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRDisplayCapabilities.hasPosition",
        "params": [],
        "path": "dom/vrdisplaycapabilities/hasposition",
        "syntax": "var hasItGotPosition = vrDisplayCapabilitiesInstance.hasPosition; Value A Boolean. Examples function reportDisplays() { navigator.getVRDisplays().then(function(displays) { for(var i = 0; i < displays.length; i++) { var cap = displays[i].capabilities; // cap is a VRDisplayCapabilities object var listItem = document.createElement('li');\n or  listItem.innerHTML = '<strong>Display ' + (i+1) + '</strong>' + '<br>VR Display ID: ' + displays[i].displayId + '<br>VR Display Name: ' + displays[i].displayName + '<br>Display can present content: ' + cap.canPresent + '<br>Display is separate from the computer\\'s main display: ' + cap.hasExternalDisplay + '<br>Display can return position info: ' + cap.hasPosition + '<br>Display can return orientation info: ' + cap.hasOrientation + '<br>Display max layers: ' + cap.maxLayers; list.appendChild(listItem);\n or  } });\n or  });",
        "type": "WebVR"
    },
    "VRDisplayCapabilities.maxLayers": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRDisplayCapabilities.maxLayers",
        "params": [],
        "path": "dom/vrdisplaycapabilities/maxlayers",
        "syntax": "var maximumLayers = vrDisplayCapabilitiesInstance.maxLayers; Value A number, which must be 1 if VRDisplayCapabilities.canPresent is true, or 0 otherwise. Examples function reportDisplays() { navigator.getVRDisplays().then(function(displays) { for(var i = 0; i < displays.length; i++) { var cap = displays[i].capabilities; // cap is a VRDisplayCapabilities object var listItem = document.createElement('li');\n or  listItem.innerHTML = '<strong>Display ' + (i+1) + '</strong>' + '<br>VR Display ID: ' + displays[i].displayId + '<br>VR Display Name: ' + displays[i].displayName + '<br>Display can present content: ' + cap.canPresent + '<br>Display is separate from the computer\\'s main display: ' + cap.hasExternalDisplay + '<br>Display can return position info: ' + cap.hasPosition + '<br>Display can return orientation info: ' + cap.hasOrientation + '<br>Display max layers: ' + cap.maxLayers; list.appendChild(listItem);\n or  } });\n or  });",
        "type": "WebVR"
    },
    "VRDisplayEvent.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRDisplayEvent.constructor",
        "params": [
            {
                "descr": "A DOMString describing the type of event object you want to create.",
                "name": "type"
            },
            {
                "descr": "A object contaning initialization options to use when creating the constructor. ",
                "name": "eventInitDict"
            },
            {
                "descr": "A property containing a string representing the human-readable reason why the event is to be fired (see VRDisplayEvent.reason).",
                "name": "reason"
            }
        ],
        "path": "dom/vrdisplayevent/vrdisplayevent",
        "syntax": "var myEventObject = new VRDisplayEvent(type, eventInitDict);",
        "type": "WebVR"
    },
    "VRDisplayEvent.display": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRDisplayEvent.display",
        "params": [],
        "path": "dom/vrdisplayevent/display",
        "syntax": "var myDisplay = vrDisplayEventInstance.display; Value A VRDisplay object. Examples window.addEventListener('vrdisplaypresentchange', function(e) { console.log('Display ' + e.display.displayId + ' presentation has changed. Reason given: ' + e.reason + '.');\n or  }));",
        "type": "WebVR"
    },
    "VRDisplayEvent.reason": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRDisplayEvent.reason",
        "params": [],
        "path": "dom/vrdisplayevent/reason",
        "syntax": "var myReason = vrDisplayEventInstance.reason; Value A string representing the reason why the event was fired. The available reasons are defined in the VRDisplayEventReason enum, and are as follows:   mounted — The VRDisplay has detected that the user has put it on (or it has been otherwise activated).  navigation",
        "type": "WebVR"
    },
    "VREyeParameters.fieldOfView": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VREyeParameters.fieldOfView",
        "params": [],
        "path": "dom/vreyeparameters/fieldofview",
        "syntax": "var myFOV = eyeParametersInstance.fieldOfView; Value A VRFieldOfView object. Examples var info = document.querySelector('p');\n or  var list = document.querySelector('ul');\n or  var vrDisplay; if(navigator.getVRDisplays) { reportFieldOfView();\n or  } else { info.textContent = 'WebVR API not supported by this browser.' } function reportFieldOfView() { navigator.getVRDisplays().then(function(displays) { vrDisplay = displays[0]; var lEye = vrDisplay.getEyeParameters('left');\n or  var rEye = vrDisplay.getEyeParameters('right');\n or  // lEye and rEye are VREyeParameters objects var lFOV = lEye.fieldOfView; var rFOV = rEye.fieldOfView; // lFOV and rFOV are VRFieldOfView objects var listitem1 = document.createElement('li');\n or  var listitem2 = document.createElement('li');\n or  listitem1.innerHTML = '<strong>Left eye parameters</strong>' + '<br>Offset: ' + lEye.offset + '<br>Render width: ' + lEye.renderWidth + '<br>Render height: ' + lEye.renderHeight + '<br>Up degrees: ' + lFOV.upDegrees + '<br>Right degrees: ' + lFOV.rightDegrees + '<br>Down degrees: ' + lFOV.downDegrees + '<br>Left degrees: ' + lFOV.leftDegrees listitem2.innerHTML = '<strong>Right eye parameters</strong>' + '<br>Offset: ' + rEye.offset + '<br>Render width: ' + rEye.renderWidth + '<br>Render height: ' + rEye.renderHeight + '<br>Up degrees: ' + rFOV.upDegrees + '<br>Right degrees: ' + rFOV.rightDegrees + '<br>Down degrees: ' + rFOV.downDegrees + '<br>Left degrees: ' + rFOV.leftDegrees list.appendChild(listitem1);\n or  list.appendChild(listitem2);\n or  });\n or  });",
        "type": "WebVR"
    },
    "VREyeParameters.offset": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VREyeParameters.offset",
        "params": [],
        "path": "dom/vreyeparameters/offset",
        "syntax": "var myOffset = eyeParametersInstance.offset; Value A Float32Array representing a vector describing the offset from the center point between the users eyes to the center of the eye in meters.  Note: Values for the left eye will be negative; values for the right eye will be positive.  Examples var info = document.querySelector('p');\n or  var list = document.querySelector('ul');\n or  var vrDisplay; if(navigator.getVRDisplays) { reportFieldOfView();\n or  } else { info.textContent = 'WebVR API not supported by this browser.' } function reportFieldOfView() { navigator.getVRDisplays().then(function(displays) { vrDisplay = displays[0]; var lEye = vrDisplay.getEyeParameters('left');\n or  var rEye = vrDisplay.getEyeParameters('right');\n or  // lEye and rEye are VREyeParameters objects var lFOV = lEye.fieldOfView; var rFOV = rEye.fieldOfView; // lFOV and rFOV are VRFieldOfView objects var listitem1 = document.createElement('li');\n or  var listitem2 = document.createElement('li');\n or  listitem1.innerHTML = '<strong>Left eye parameters</strong>' + '<br>Offset: ' + lEye.offset + '<br>Render width: ' + lEye.renderWidth + '<br>Render height: ' + lEye.renderHeight + '<br>Up degrees: ' + lFOV.upDegrees + '<br>Right degrees: ' + lFOV.rightDegrees + '<br>Down degrees: ' + lFOV.downDegrees + '<br>Left degrees: ' + lFOV.leftDegrees listitem2.innerHTML = '<strong>Right eye parameters</strong>' + '<br>Offset: ' + rEye.offset + '<br>Render width: ' + rEye.renderWidth + '<br>Render height: ' + rEye.renderHeight + '<br>Up degrees: ' + rFOV.upDegrees + '<br>Right degrees: ' + rFOV.rightDegrees + '<br>Down degrees: ' + rFOV.downDegrees + '<br>Left degrees: ' + rFOV.leftDegrees list.appendChild(listitem1);\n or  list.appendChild(listitem2);\n or  });\n or  });",
        "type": "WebVR"
    },
    "VREyeParameters.recommendedFieldOfView": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "VREyeParameters.recommendedFieldOfView",
        "params": [],
        "path": "dom/vreyeparameters/recommendedfieldofview",
        "syntax": "var recFOV = myEyeParameters.recommendedFieldOfView; Value A VRFieldOfView object. Examples The following example is taken from the Mozilla VR Team's threejs-vr-boilerplate code — to be precise, the VREffect.js file. Early on in the code the HMDVRDevice.getEyeParameters method is used to access information about each eye — VREyeParameters.eyeTranslation and VREyeParameters.recommendedFieldOfView — which are used for rendering calulations later on. if ( vrHMD.getEyeParameters !== undefined ) { var eyeParamsL = vrHMD.getEyeParameters( 'left' );\n or  var eyeParamsR = vrHMD.getEyeParameters( 'right' );\n or  eyeTranslationL = eyeParamsL.eyeTranslation; eyeTranslationR = eyeParamsR.eyeTranslation; eyeFOVL = eyeParamsL.recommendedFieldOfView; eyeFOVR = eyeParamsR.recommendedFieldOfView; } else { ... });",
        "type": "WebVR"
    },
    "VREyeParameters.renderHeight": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VREyeParameters.renderHeight",
        "params": [],
        "path": "dom/vreyeparameters/renderheight",
        "syntax": "var myRenderHeight = eyeParametersInstance.renderHeight; Value A number, representing the height in pixels. Examples navigator.getVRDisplays().then(function(displays) { // If a display is available, use it to present the scene vrDisplay = displays[0]; console.log('Display found');\n or  // Starting the presentation when the button is clicked: // It can only be called in response to a user gesture btn.addEventListener('click', function() { vrDisplay.requestPresent([{ source: canvas }]).then(function() { console.log('Presenting to WebVR display');\n or  // Set the canvas size to the size of the vrDisplay viewport var leftEye = vrDisplay.getEyeParameters('left');\n or  var rightEye = vrDisplay.getEyeParameters('right');\n or  canvas.width = Math.max(leftEye.renderWidth, rightEye.renderWidth) * 2; canvas.height = Math.max(leftEye.renderHeight, rightEye.renderHeight);\n or  drawVRScene();\n or  });\n or  });\n or  });",
        "type": "WebVR"
    },
    "VREyeParameters.renderWidth": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VREyeParameters.renderWidth",
        "params": [],
        "path": "dom/vreyeparameters/renderwidth",
        "syntax": "var myRenderWidth = eyeParametersInstance.renderWidth; Value A number, representing the width in pixels. Examples navigator.getVRDisplays().then(function(displays) { // If a display is available, use it to present the scene vrDisplay = displays[0]; console.log('Display found');\n or  // Starting the presentation when the button is clicked: // It can only be called in response to a user gesture btn.addEventListener('click', function() { vrDisplay.requestPresent([{ source: canvas }]).then(function() { console.log('Presenting to WebVR display');\n or  // Set the canvas size to the size of the vrDisplay viewport var leftEye = vrDisplay.getEyeParameters('left');\n or  var rightEye = vrDisplay.getEyeParameters('right');\n or  canvas.width = Math.max(leftEye.renderWidth, rightEye.renderWidth) * 2; canvas.height = Math.max(leftEye.renderHeight, rightEye.renderHeight);\n or  drawVRScene();\n or  });\n or  });\n or  });",
        "type": "WebVR"
    },
    "VRFieldOfView.constructor": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "VRFieldOfView.constructor",
        "params": [
            {
                "descr": "The number of degrees upwards that the field of view will extend in.",
                "name": "upDegrees"
            },
            {
                "descr": "The number of degrees to the right that the field of view will extend in.",
                "name": "rightDegrees"
            },
            {
                "descr": "The number of degrees downwards that the field of view will extend in.",
                "name": "downDegrees"
            },
            {
                "descr": "The number of degrees to the left that the field of view will extend in.",
                "name": "leftDegrees"
            },
            {
                "descr": "A dictionary object containing the four degree values specified above.",
                "name": "init"
            }
        ],
        "path": "dom/vrfieldofview/vrfieldofview",
        "syntax": "VRFieldOfViewReadOnly.upDegrees, VRFieldOfViewReadOnly.rightDegrees, VRFieldOfViewReadOnly.downDegrees, and VRFieldOfViewReadOnly.leftDegrees values you want the field of view to have var myFOV = new VRFieldOfView(upDegrees, rightDegrees, downDegrees, leftDegrees);",
        "type": "WebVR"
    },
    "VRFieldOfView.downDegrees": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRFieldOfView.downDegrees",
        "params": [],
        "path": "dom/vrfieldofview/downdegrees",
        "syntax": "var myDownDegrees = VRFieldOfView.downDegrees; Value A double. Examples var info = document.querySelector('p');\n or  var list = document.querySelector('ul');\n or  var vrDisplay; if(navigator.getVRDisplays) { reportFieldOfView();\n or  } else { info.textContent = 'WebVR API not supported by this browser.' } function reportFieldOfView() { navigator.getVRDisplays().then(function(displays) { vrDisplay = displays[0]; var lEye = vrDisplay.getEyeParameters('left');\n or  var rEye = vrDisplay.getEyeParameters('right');\n or  // lEye and rEye are VREyeParameters objects var lFOV = lEye.fieldOfView; var rFOV = rEye.fieldOfView; // lFOV and rFOV are VRFieldOfView objects var listitem1 = document.createElement('li');\n or  var listitem2 = document.createElement('li');\n or  listitem1.innerHTML = '<strong>Left eye parameters</strong>' + '<br>Offset: ' + lEye.offset + '<br>Render width: ' + lEye.renderWidth + '<br>Render height: ' + lEye.renderHeight + '<br>Up degrees: ' + lFOV.upDegrees + '<br>Right degrees: ' + lFOV.rightDegrees + '<br>Down degrees: ' + lFOV.downDegrees + '<br>Left degrees: ' + lFOV.leftDegrees listitem2.innerHTML = '<strong>Right eye parameters</strong>' + '<br>Offset: ' + rEye.offset + '<br>Render width: ' + rEye.renderWidth + '<br>Render height: ' + rEye.renderHeight + '<br>Up degrees: ' + rFOV.upDegrees + '<br>Right degrees: ' + rFOV.rightDegrees + '<br>Down degrees: ' + rFOV.downDegrees + '<br>Left degrees: ' + rFOV.leftDegrees list.appendChild(listitem1);\n or  list.appendChild(listitem2);\n or  });\n or  });",
        "type": "WebVR"
    },
    "VRFieldOfView.leftDegrees": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRFieldOfView.leftDegrees",
        "params": [],
        "path": "dom/vrfieldofview/leftdegrees",
        "syntax": "var myLeftDegrees = VRFieldOfView.leftDegrees; Value A double. Examples var info = document.querySelector('p');\n or  var list = document.querySelector('ul');\n or  var vrDisplay; if(navigator.getVRDisplays) { reportFieldOfView();\n or  } else { info.textContent = 'WebVR API not supported by this browser.' } function reportFieldOfView() { navigator.getVRDisplays().then(function(displays) { vrDisplay = displays[0]; var lEye = vrDisplay.getEyeParameters('left');\n or  var rEye = vrDisplay.getEyeParameters('right');\n or  // lEye and rEye are VREyeParameters objects var lFOV = lEye.fieldOfView; var rFOV = rEye.fieldOfView; // lFOV and rFOV are VRFieldOfView objects var listitem1 = document.createElement('li');\n or  var listitem2 = document.createElement('li');\n or  listitem1.innerHTML = '<strong>Left eye parameters</strong>' + '<br>Offset: ' + lEye.offset + '<br>Render width: ' + lEye.renderWidth + '<br>Render height: ' + lEye.renderHeight + '<br>Up degrees: ' + lFOV.upDegrees + '<br>Right degrees: ' + lFOV.rightDegrees + '<br>Down degrees: ' + lFOV.downDegrees + '<br>Left degrees: ' + lFOV.leftDegrees listitem2.innerHTML = '<strong>Right eye parameters</strong>' + '<br>Offset: ' + rEye.offset + '<br>Render width: ' + rEye.renderWidth + '<br>Render height: ' + rEye.renderHeight + '<br>Up degrees: ' + rFOV.upDegrees + '<br>Right degrees: ' + rFOV.rightDegrees + '<br>Down degrees: ' + rFOV.downDegrees + '<br>Left degrees: ' + rFOV.leftDegrees list.appendChild(listitem1);\n or  list.appendChild(listitem2);\n or  });\n or  });",
        "type": "WebVR"
    },
    "VRFieldOfView.rightDegrees": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRFieldOfView.rightDegrees",
        "params": [],
        "path": "dom/vrfieldofview/rightdegrees",
        "syntax": "var myRightDegrees = VRFieldOfView.rightDegrees; Value A double. Examples var info = document.querySelector('p');\n or  var list = document.querySelector('ul');\n or  var vrDisplay; if(navigator.getVRDisplays) { reportFieldOfView();\n or  } else { info.textContent = 'WebVR API not supported by this browser.' } function reportFieldOfView() { navigator.getVRDisplays().then(function(displays) { vrDisplay = displays[0]; var lEye = vrDisplay.getEyeParameters('left');\n or  var rEye = vrDisplay.getEyeParameters('right');\n or  // lEye and rEye are VREyeParameters objects var lFOV = lEye.fieldOfView; var rFOV = rEye.fieldOfView; // lFOV and rFOV are VRFieldOfView objects var listitem1 = document.createElement('li');\n or  var listitem2 = document.createElement('li');\n or  listitem1.innerHTML = '<strong>Left eye parameters</strong>' + '<br>Offset: ' + lEye.offset + '<br>Render width: ' + lEye.renderWidth + '<br>Render height: ' + lEye.renderHeight + '<br>Up degrees: ' + lFOV.upDegrees + '<br>Right degrees: ' + lFOV.rightDegrees + '<br>Down degrees: ' + lFOV.downDegrees + '<br>Left degrees: ' + lFOV.leftDegrees listitem2.innerHTML = '<strong>Right eye parameters</strong>' + '<br>Offset: ' + rEye.offset + '<br>Render width: ' + rEye.renderWidth + '<br>Render height: ' + rEye.renderHeight + '<br>Up degrees: ' + rFOV.upDegrees + '<br>Right degrees: ' + rFOV.rightDegrees + '<br>Down degrees: ' + rFOV.downDegrees + '<br>Left degrees: ' + rFOV.leftDegrees list.appendChild(listitem1);\n or  list.appendChild(listitem2);\n or  });\n or  });",
        "type": "WebVR"
    },
    "VRFieldOfView.upDegrees": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRFieldOfView.upDegrees",
        "params": [],
        "path": "dom/vrfieldofview/updegrees",
        "syntax": "var myUpDegrees = VRFieldOfView.upDegrees; Value A double. Examples var info = document.querySelector('p');\n or  var list = document.querySelector('ul');\n or  var vrDisplay; if(navigator.getVRDisplays) { reportFieldOfView();\n or  } else { info.textContent = 'WebVR API not supported by this browser.' } function reportFieldOfView() { navigator.getVRDisplays().then(function(displays) { vrDisplay = displays[0]; var lEye = vrDisplay.getEyeParameters('left');\n or  var rEye = vrDisplay.getEyeParameters('right');\n or  // lEye and rEye are VREyeParameters objects var lFOV = lEye.fieldOfView; var rFOV = rEye.fieldOfView; // lFOV and rFOV are VRFieldOfView objects var listitem1 = document.createElement('li');\n or  var listitem2 = document.createElement('li');\n or  listitem1.innerHTML = '<strong>Left eye parameters</strong>' + '<br>Offset: ' + lEye.offset + '<br>Render width: ' + lEye.renderWidth + '<br>Render height: ' + lEye.renderHeight + '<br>Up degrees: ' + lFOV.upDegrees + '<br>Right degrees: ' + lFOV.rightDegrees + '<br>Down degrees: ' + lFOV.downDegrees + '<br>Left degrees: ' + lFOV.leftDegrees listitem2.innerHTML = '<strong>Right eye parameters</strong>' + '<br>Offset: ' + rEye.offset + '<br>Render width: ' + rEye.renderWidth + '<br>Render height: ' + rEye.renderHeight + '<br>Up degrees: ' + rFOV.upDegrees + '<br>Right degrees: ' + rFOV.rightDegrees + '<br>Down degrees: ' + rFOV.downDegrees + '<br>Left degrees: ' + rFOV.leftDegrees list.appendChild(listitem1);\n or  list.appendChild(listitem2);\n or  });\n or  });",
        "type": "WebVR"
    },
    "VRFrameData.constructor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRFrameData.constructor",
        "params": [],
        "path": "dom/vrframedata/vrframedata",
        "syntax": "var myFrameData = new VRFrameData();",
        "type": "WebVR"
    },
    "VRFrameData.leftProjectionMatrix": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRFrameData.leftProjectionMatrix",
        "params": [],
        "path": "dom/vrframedata/leftprojectionmatrix",
        "syntax": "var myLPM = vrFrameDataInstance.leftProjectionMatrix; Value A Float32Array object. Examples var frameData = new VRFrameData();\n or  var vrDisplay; navigator.getVRDisplays().then(function(displays) { vrDisplay = displays[0]; console.log('Display found');\n or  // Starting the presentation when the button is clicked: It can only be called in response to a user gesture btn.addEventListener('click', function() { vrDisplay.requestPresent([{ source: canvas }]).then(function() { drawVRScene();\n or  });\n or  });\n or  });\n or  // WebVR: Draw the scene for the WebVR display. function drawVRScene() { // WebVR: Request the next frame of the animation vrSceneFrame = vrDisplay.requestAnimationFrame(drawVRScene);\n or  // Populate frameData with the data of the next frame to display vrDisplay.getFrameData(frameData);\n or  // You can get the position, orientation, etc. of the display from the current frame's pose // curFramePose is a VRPose object var curFramePose = frameData.pose; var curPos = curFramePose.position; var curOrient = curFramePose.orientation; // Clear the canvas before we start drawing on it. gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n or  // WebVR: Create the required projection and view matrix locations needed // for passing into the uniformMatrix4fv methods below var projectionMatrixLocation = gl.getUniformLocation(shaderProgram, \"projMatrix\");\n or  var viewMatrixLocation = gl.getUniformLocation(shaderProgram, \"viewMatrix\");\n or  // WebVR: Render the left eye’s view to the left half of the canvas gl.viewport(0, 0, canvas.width * 0.5, canvas.height);\n or  gl.uniformMatrix4fv(projectionMatrixLocation, false, frameData.leftProjectionMatrix);\n or  gl.uniformMatrix4fv(viewMatrixLocation, false, frameData.leftViewMatrix);\n or  drawGeometry();\n or  // WebVR: Render the right eye’s view to the right half of the canvas gl.viewport(canvas.width * 0.5, 0, canvas.width * 0.5, canvas.height);\n or  gl.uniformMatrix4fv(projectionMatrixLocation, false, frameData.rightProjectionMatrix);\n or  gl.uniformMatrix4fv(viewMatrixLocation, false, frameData.rightViewMatrix);\n or  drawGeometry();\n or  function drawGeometry() { // draw the view for each eye } ... // WebVR: Indicate that we are ready to present the rendered frame to the VR display vrDisplay.submitFrame();\n or  });",
        "type": "WebVR"
    },
    "VRFrameData.leftViewMatrix": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRFrameData.leftViewMatrix",
        "params": [],
        "path": "dom/vrframedata/leftviewmatrix",
        "syntax": "var myLVM = vrFrameDataInstance.leftViewMatrix; Value A Float32Array object. Examples var frameData = new VRFrameData();\n or  var vrDisplay; navigator.getVRDisplays().then(function(displays) { vrDisplay = displays[0]; console.log('Display found');\n or  // Starting the presentation when the button is clicked: It can only be called in response to a user gesture btn.addEventListener('click', function() { vrDisplay.requestPresent([{ source: canvas }]).then(function() { drawVRScene();\n or  });\n or  });\n or  });\n or  // WebVR: Draw the scene for the WebVR display. function drawVRScene() { // WebVR: Request the next frame of the animation vrSceneFrame = vrDisplay.requestAnimationFrame(drawVRScene);\n or  // Populate frameData with the data of the next frame to display vrDisplay.getFrameData(frameData);\n or  // You can get the position, orientation, etc. of the display from the current frame's pose // curFramePose is a VRPose object var curFramePose = frameData.pose; var curPos = curFramePose.position; var curOrient = curFramePose.orientation; // Clear the canvas before we start drawing on it. gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n or  // WebVR: Create the required projection and view matrix locations needed // for passing into the uniformMatrix4fv methods below var projectionMatrixLocation = gl.getUniformLocation(shaderProgram, \"projMatrix\");\n or  var viewMatrixLocation = gl.getUniformLocation(shaderProgram, \"viewMatrix\");\n or  // WebVR: Render the left eye’s view to the left half of the canvas gl.viewport(0, 0, canvas.width * 0.5, canvas.height);\n or  gl.uniformMatrix4fv(projectionMatrixLocation, false, frameData.leftProjectionMatrix);\n or  gl.uniformMatrix4fv(viewMatrixLocation, false, frameData.leftViewMatrix);\n or  drawGeometry();\n or  // WebVR: Render the right eye’s view to the right half of the canvas gl.viewport(canvas.width * 0.5, 0, canvas.width * 0.5, canvas.height);\n or  gl.uniformMatrix4fv(projectionMatrixLocation, false, frameData.rightProjectionMatrix);\n or  gl.uniformMatrix4fv(viewMatrixLocation, false, frameData.rightViewMatrix);\n or  drawGeometry();\n or  function drawGeometry() { // draw the view for each eye } ... // WebVR: Indicate that we are ready to present the rendered frame to the VR display vrDisplay.submitFrame();\n or  });",
        "type": "WebVR"
    },
    "VRFrameData.pose": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRFrameData.pose",
        "params": [],
        "path": "dom/vrframedata/pose",
        "syntax": "var myPose = vrFrameDataInstance.pose; Value A VRPose object. Examples var frameData = new VRFrameData();\n or  var vrDisplay; navigator.getVRDisplays().then(function(displays) { vrDisplay = displays[0]; console.log('Display found');\n or  // Starting the presentation when the button is clicked: It can only be called in response to a user gesture btn.addEventListener('click', function() { vrDisplay.requestPresent([{ source: canvas }]).then(function() { drawVRScene();\n or  });\n or  });\n or  });\n or  // WebVR: Draw the scene for the WebVR display. function drawVRScene() { // WebVR: Request the next frame of the animation vrSceneFrame = vrDisplay.requestAnimationFrame(drawVRScene);\n or  // Populate frameData with the data of the next frame to display vrDisplay.getFrameData(frameData);\n or  // You can get the position, orientation, etc. of the display from the current frame's pose // curFramePose is a VRPose object var curFramePose = frameData.pose; var curPos = curFramePose.position; var curOrient = curFramePose.orientation; // Clear the canvas before we start drawing on it. gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n or  // WebVR: Create the required projection and view matrix locations needed // for passing into the uniformMatrix4fv methods below var projectionMatrixLocation = gl.getUniformLocation(shaderProgram, \"projMatrix\");\n or  var viewMatrixLocation = gl.getUniformLocation(shaderProgram, \"viewMatrix\");\n or  // WebVR: Render the left eye’s view to the left half of the canvas gl.viewport(0, 0, canvas.width * 0.5, canvas.height);\n or  gl.uniformMatrix4fv(projectionMatrixLocation, false, frameData.leftProjectionMatrix);\n or  gl.uniformMatrix4fv(viewMatrixLocation, false, frameData.leftViewMatrix);\n or  drawGeometry();\n or  // WebVR: Render the right eye’s view to the right half of the canvas gl.viewport(canvas.width * 0.5, 0, canvas.width * 0.5, canvas.height);\n or  gl.uniformMatrix4fv(projectionMatrixLocation, false, frameData.rightProjectionMatrix);\n or  gl.uniformMatrix4fv(viewMatrixLocation, false, frameData.rightViewMatrix);\n or  drawGeometry();\n or  function drawGeometry() { // draw the view for each eye } ... // WebVR: Indicate that we are ready to present the rendered frame to the VR display vrDisplay.submitFrame();\n or  });",
        "type": "WebVR"
    },
    "VRFrameData.rightProjectionMatrix": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRFrameData.rightProjectionMatrix",
        "params": [],
        "path": "dom/vrframedata/rightprojectionmatrix",
        "syntax": "var myRPM = vrFrameDataInstance.rightProjectionMatrix; Value A Float32Array object. Examples var frameData = new VRFrameData();\n or  var vrDisplay; navigator.getVRDisplays().then(function(displays) { vrDisplay = displays[0]; console.log('Display found');\n or  // Starting the presentation when the button is clicked: It can only be called in response to a user gesture btn.addEventListener('click', function() { vrDisplay.requestPresent([{ source: canvas }]).then(function() { drawVRScene();\n or  });\n or  });\n or  });\n or  // WebVR: Draw the scene for the WebVR display. function drawVRScene() { // WebVR: Request the next frame of the animation vrSceneFrame = vrDisplay.requestAnimationFrame(drawVRScene);\n or  // Populate frameData with the data of the next frame to display vrDisplay.getFrameData(frameData);\n or  // You can get the position, orientation, etc. of the display from the current frame's pose // curFramePose is a VRPose object var curFramePose = frameData.pose; var curPos = curFramePose.position; var curOrient = curFramePose.orientation; // Clear the canvas before we start drawing on it. gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n or  // WebVR: Create the required projection and view matrix locations needed // for passing into the uniformMatrix4fv methods below var projectionMatrixLocation = gl.getUniformLocation(shaderProgram, \"projMatrix\");\n or  var viewMatrixLocation = gl.getUniformLocation(shaderProgram, \"viewMatrix\");\n or  // WebVR: Render the left eye’s view to the left half of the canvas gl.viewport(0, 0, canvas.width * 0.5, canvas.height);\n or  gl.uniformMatrix4fv(projectionMatrixLocation, false, frameData.leftProjectionMatrix);\n or  gl.uniformMatrix4fv(viewMatrixLocation, false, frameData.leftViewMatrix);\n or  drawGeometry();\n or  // WebVR: Render the right eye’s view to the right half of the canvas gl.viewport(canvas.width * 0.5, 0, canvas.width * 0.5, canvas.height);\n or  gl.uniformMatrix4fv(projectionMatrixLocation, false, frameData.rightProjectionMatrix);\n or  gl.uniformMatrix4fv(viewMatrixLocation, false, frameData.rightViewMatrix);\n or  drawGeometry();\n or  function drawGeometry() { // draw the view for each eye } ... // WebVR: Indicate that we are ready to present the rendered frame to the VR display vrDisplay.submitFrame();\n or  });",
        "type": "WebVR"
    },
    "VRFrameData.rightViewMatrix": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRFrameData.rightViewMatrix",
        "params": [],
        "path": "dom/vrframedata/rightviewmatrix",
        "syntax": "var myRVM = vrFrameDataInstance.rightViewMatrix; Value A Float32Array object. Examples var frameData = new VRFrameData();\n or  var vrDisplay; navigator.getVRDisplays().then(function(displays) { vrDisplay = displays[0]; console.log('Display found');\n or  // Starting the presentation when the button is clicked: It can only be called in response to a user gesture btn.addEventListener('click', function() { vrDisplay.requestPresent([{ source: canvas }]).then(function() { drawVRScene();\n or  });\n or  });\n or  });\n or  // WebVR: Draw the scene for the WebVR display. function drawVRScene() { // WebVR: Request the next frame of the animation vrSceneFrame = vrDisplay.requestAnimationFrame(drawVRScene);\n or  // Populate frameData with the data of the next frame to display vrDisplay.getFrameData(frameData);\n or  // You can get the position, orientation, etc. of the display from the current frame's pose // curFramePose is a VRPose object var curFramePose = frameData.pose; var curPos = curFramePose.position; var curOrient = curFramePose.orientation; // Clear the canvas before we start drawing on it. gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n or  // WebVR: Create the required projection and view matrix locations needed // for passing into the uniformMatrix4fv methods below var projectionMatrixLocation = gl.getUniformLocation(shaderProgram, \"projMatrix\");\n or  var viewMatrixLocation = gl.getUniformLocation(shaderProgram, \"viewMatrix\");\n or  // WebVR: Render the left eye’s view to the left half of the canvas gl.viewport(0, 0, canvas.width * 0.5, canvas.height);\n or  gl.uniformMatrix4fv(projectionMatrixLocation, false, frameData.leftProjectionMatrix);\n or  gl.uniformMatrix4fv(viewMatrixLocation, false, frameData.leftViewMatrix);\n or  drawGeometry();\n or  // WebVR: Render the right eye’s view to the right half of the canvas gl.viewport(canvas.width * 0.5, 0, canvas.width * 0.5, canvas.height);\n or  gl.uniformMatrix4fv(projectionMatrixLocation, false, frameData.rightProjectionMatrix);\n or  gl.uniformMatrix4fv(viewMatrixLocation, false, frameData.rightViewMatrix);\n or  drawGeometry();\n or  function drawGeometry() { // draw the view for each eye } ... // WebVR: Indicate that we are ready to present the rendered frame to the VR display vrDisplay.submitFrame();\n or  });",
        "type": "WebVR"
    },
    "VRFrameData.timestamp": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRFrameData.timestamp",
        "params": [],
        "path": "dom/vrframedata/timestamp",
        "syntax": "var myTimestamp = vrFrameDataInstance.timestamp; Value A DOMHighResTimeStamp object. Examples var frameData = new VRFrameData();\n or  var vrDisplay; navigator.getVRDisplays().then(function(displays) { vrDisplay = displays[0]; console.log('Display found');\n or  // Starting the presentation when the button is clicked: It can only be called in response to a user gesture btn.addEventListener('click', function() { vrDisplay.requestPresent([{ source: canvas }]).then(function() { drawVRScene();\n or  });\n or  });\n or  });\n or  // WebVR: Draw the scene for the WebVR display. function drawVRScene() { // WebVR: Request the next frame of the animation vrSceneFrame = vrDisplay.requestAnimationFrame(drawVRScene);\n or  // Populate frameData with the data of the next frame to display vrDisplay.getFrameData(frameData);\n or  // grab the current timestamp on each run of the rendering loop // and do something with it framedata.timestamp ... // WebVR: Indicates that we are ready to present the rendered frame to the VR display vrDisplay.submitFrame();\n or  });",
        "type": "WebVR"
    },
    "VRLayerInit.leftBounds": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRLayerInit.leftBounds",
        "params": [],
        "path": "dom/vrlayerinit/leftbounds",
        "syntax": "var myVRLayerInit = { }; myVRLayerInit.leftBounds = [0.0, 0.0, 0.5, 1.0]; Value An array of four floating point values, which can take values from 0.0–1.0:  The left offset of the bounds. The top offset of the bounds. The width of the bounds. The height of the bounds.  If leftBounds is not specified in the dictionary, the default value used is [0.0, 0.0, 0.5, 1.0]. Examples // currently returns an empty array var layers = vrDisplay.getLayers();\n or  if(navigator.getVRDisplays) { console.log('WebVR 1.1 supported');\n or  // Then get the displays attached to the computer navigator.getVRDisplays().then(function(displays) { // If a display is available, use it to present the scene if(displays.length > 0) { vrDisplay = displays[0]; console.log('Display found');\n or  // Starting the presentation when the button is clicked: It can only be called in response to a user gesture btn.addEventListener('click', function() { vrDisplay.requestPresent([{ source: canvas }]).then(function() { console.log('Presenting to WebVR display');\n or  // Here it returns an array of VRLayerInit objects var layers = vrDisplay.getLayers();\n or  ... });\n or  });\n or  } });\n or  });",
        "type": "WebVR"
    },
    "VRLayerInit.rightBounds": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRLayerInit.rightBounds",
        "params": [],
        "path": "dom/vrlayerinit/rightbounds",
        "syntax": "var myVRLayerInit = { }; myVRLayerInit.rightBounds = [0.5, 0.0, 0.5, 1.0]; Value An array of four floating point values, which can take values from 0.0–1.0:  The left offset of the bounds. The top offset of the bounds. The width of the bounds. The height of the bounds.  If leftBounds is not specified in the dictionary, the default value used is [0.5, 0.0, 0.5, 1.0]. Examples // currently returns an empty array var layers = vrDisplay.getLayers();\n or  if(navigator.getVRDisplays) { console.log('WebVR 1.1 supported');\n or  // Then get the displays attached to the computer navigator.getVRDisplays().then(function(displays) { // If a display is available, use it to present the scene if(displays.length > 0) { vrDisplay = displays[0]; console.log('Display found');\n or  // Starting the presentation when the button is clicked: It can only be called in response to a user gesture btn.addEventListener('click', function() { vrDisplay.requestPresent([{ source: canvas }]).then(function() { console.log('Presenting to WebVR display');\n or  // Here it returns an array of VRLayerInit objects var layers = vrDisplay.getLayers();\n or  ... });\n or  });\n or  } });\n or  });",
        "type": "WebVR"
    },
    "VRLayerInit.source": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRLayerInit.source",
        "params": [],
        "path": "dom/vrlayerinit/source",
        "syntax": "var myVRLayerInit = { }; myVRLayerInit.source = myCanvas; Value An HTMLCanvasElement or OffscreenCanvas object. Examples // currently returns an empty array var layers = vrDisplay.getLayers();\n or  if(navigator.getVRDisplays) { console.log('WebVR 1.1 supported');\n or  // Then get the displays attached to the computer navigator.getVRDisplays().then(function(displays) { // If a display is available, use it to present the scene if(displays.length > 0) { vrDisplay = displays[0]; console.log('Display found');\n or  // Starting the presentation when the button is clicked: It can only be called in response to a user gesture btn.addEventListener('click', function() { vrDisplay.requestPresent([{ source: canvas }]).then(function() { console.log('Presenting to WebVR display');\n or  // Here it returns an array of VRLayerInit objects var layers = vrDisplay.getLayers();\n or  ... });\n or  });\n or  } });\n or  });",
        "type": "WebVR"
    },
    "VRPose.angularAcceleration": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRPose.angularAcceleration",
        "params": [],
        "path": "dom/vrpose/angularacceleration",
        "syntax": "var myAngularAcceleration = VRPose.angularAcceleration; Value A Float32Array, or null if the VR sensor is not able to provide angular acceleration information. Examples // rendering loop for a VR scene function drawVRScene() { // WebVR: Request the next frame of the animation vrSceneFrame = vrDisplay.requestAnimationFrame(drawVRScene);\n or  // Populate frameData with the data of the next frame to display vrDisplay.getFrameData(frameData);\n or  // Retrieve the angular acceleration values for use in rendering // curFramePose is a VRPose object var curFramePose = frameData.pose; var angAcc = curFramePose.angularAcceleration; var aax = angAcc[0]; var aay = angAcc[1]; var aaz = angAcc[2]; // render the scene ... // WebVR: submit the rendered frame to the VR display vrDisplay.submitFrame();\n or  });",
        "type": "WebVR"
    },
    "VRPose.angularVelocity": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRPose.angularVelocity",
        "params": [],
        "path": "dom/vrpose/angularvelocity",
        "syntax": "var myAngularVelocity = VRPose.angularVelocity; Value A Float32Array, or null if the VR sensor is not able to provide angular velocity information. Examples // rendering loop for a VR scene function drawVRScene() { // WebVR: Request the next frame of the animation vrSceneFrame = vrDisplay.requestAnimationFrame(drawVRScene);\n or  // Populate frameData with the data of the next frame to display vrDisplay.getFrameData(frameData);\n or  // Retrieve the angular velocity values for use in rendering // curFramePose is a VRPose object var curFramePose = frameData.pose; var angVel = curFramePose.angularVelocity; var avx = angVel[0]; var avy = angVel[1]; var avz = angVel[2]; // render the scene ... // WebVR: submit the rendered frame to the VR display vrDisplay.submitFrame();\n or  });",
        "type": "WebVR"
    },
    "VRPose.linearAcceleration": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRPose.linearAcceleration",
        "params": [],
        "path": "dom/vrpose/linearacceleration",
        "syntax": "var myLinearAcceleration = VRPose.linearAcceleration; Value A Float32Array, or null if the VR sensor is not able to provide linear acceleration data. Examples // rendering loop for a VR scene function drawVRScene() { // WebVR: Request the next frame of the animation vrSceneFrame = vrDisplay.requestAnimationFrame(drawVRScene);\n or  // Populate frameData with the data of the next frame to display vrDisplay.getFrameData(frameData);\n or  // Retrieve the linear acceleration values for use in rendering // curFramePose is a VRPose object var curFramePose = frameData.pose; var linAcc = curFramePose.linearAcceleration; var lax = linAcc[0]; var lay = linAcc[1]; var laz = linAcc[2]; // render the scene ... // WebVR: submit the rendered frame to the VR display vrDisplay.submitFrame();\n or  });",
        "type": "WebVR"
    },
    "VRPose.linearVelocity": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRPose.linearVelocity",
        "params": [],
        "path": "dom/vrpose/linearvelocity",
        "syntax": "var myLinearVelocity = VRPose.linearVelocity; Value A Float32Array, or null if the VR sensor is not able to provide linear velocity data. Examples // rendering loop for a VR scene function drawVRScene() { // WebVR: Request the next frame of the animation vrSceneFrame = vrDisplay.requestAnimationFrame(drawVRScene);\n or  // Populate frameData with the data of the next frame to display vrDisplay.getFrameData(frameData);\n or  // Retrieve the linear velocity values for use in rendering // curFramePose is a VRPose object var curFramePose = frameData.pose; var linVel = curFramePose.linearVelocity; var lvx = linVel[0]; var lvy = linVel[1]; var lvz = linVel[2]; // render the scene ... // WebVR: submit the rendered frame to the VR display vrDisplay.submitFrame();\n or  });",
        "type": "WebVR"
    },
    "VRPose.orientation": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRPose.orientation",
        "params": [],
        "path": "dom/vrpose/orientation",
        "syntax": "var myOrientation = VRPose.orientation; Value A Float32Array, or null if the VR sensor is not able to provide orientation data. Examples var frameData = new VRFrameData();\n or  var vrDisplay; navigator.getVRDisplays().then(function(displays) { vrDisplay = displays[0]; console.log('Display found');\n or  // Starting the presentation when the button is clicked: It can only be called in response to a user gesture btn.addEventListener('click', function() { vrDisplay.requestPresent([{ source: canvas }]).then(function() { drawVRScene();\n or  });\n or  });\n or  });\n or  // WebVR: Draw the scene for the WebVR display. function drawVRScene() { // WebVR: Request the next frame of the animation vrSceneFrame = vrDisplay.requestAnimationFrame(drawVRScene);\n or  // Populate frameData with the data of the next frame to display vrDisplay.getFrameData(frameData);\n or  // You can get the position, orientation, etc. of the display from the current frame's pose // curFramePose is a VRPose object var curFramePose = frameData.pose; var curPos = curFramePose.position; var curOrient = curFramePose.orientation; // Clear the canvas before we start drawing on it. gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n or  // WebVR: Create the required projection and view matrix locations needed // for passing into the uniformMatrix4fv methods below var projectionMatrixLocation = gl.getUniformLocation(shaderProgram, \"projMatrix\");\n or  var viewMatrixLocation = gl.getUniformLocation(shaderProgram, \"viewMatrix\");\n or  // WebVR: Render the left eye’s view to the left half of the canvas gl.viewport(0, 0, canvas.width * 0.5, canvas.height);\n or  gl.uniformMatrix4fv(projectionMatrixLocation, false, frameData.leftProjectionMatrix);\n or  gl.uniformMatrix4fv(viewMatrixLocation, false, frameData.leftViewMatrix);\n or  drawGeometry();\n or  // WebVR: Render the right eye’s view to the right half of the canvas gl.viewport(canvas.width * 0.5, 0, canvas.width * 0.5, canvas.height);\n or  gl.uniformMatrix4fv(projectionMatrixLocation, false, frameData.rightProjectionMatrix);\n or  gl.uniformMatrix4fv(viewMatrixLocation, false, frameData.rightViewMatrix);\n or  drawGeometry();\n or  function drawGeometry() { // draw the view for each eye } ... // WebVR: Indicate that we are ready to present the rendered frame to the VR display vrDisplay.submitFrame();\n or  });",
        "type": "WebVR"
    },
    "VRPose.position": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRPose.position",
        "params": [],
        "path": "dom/vrpose/position",
        "syntax": "var myPosition = VRPose.position; Value A Float32Array, or null if the VR sensor is not able to provide position data.  Note: User agents may provide emulated position values through techniques such as neck modeling; when doing so they should still report VRDisplayCapabilities.hasPosition as false.  Examples var frameData = new VRFrameData();\n or  var vrDisplay; navigator.getVRDisplays().then(function(displays) { vrDisplay = displays[0]; console.log('Display found');\n or  // Starting the presentation when the button is clicked: It can only be called in response to a user gesture btn.addEventListener('click', function() { vrDisplay.requestPresent([{ source: canvas }]).then(function() { drawVRScene();\n or  });\n or  });\n or  });\n or  // WebVR: Draw the scene for the WebVR display. function drawVRScene() { // WebVR: Request the next frame of the animation vrSceneFrame = vrDisplay.requestAnimationFrame(drawVRScene);\n or  // Populate frameData with the data of the next frame to display vrDisplay.getFrameData(frameData);\n or  // You can get the position, orientation, etc. of the display from the current frame's pose // curFramePose is a VRPose object var curFramePose = frameData.pose; var curPos = curFramePose.position; var curOrient = curFramePose.orientation; // Clear the canvas before we start drawing on it. gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n or  // WebVR: Create the required projection and view matrix locations needed // for passing into the uniformMatrix4fv methods below var projectionMatrixLocation = gl.getUniformLocation(shaderProgram, \"projMatrix\");\n or  var viewMatrixLocation = gl.getUniformLocation(shaderProgram, \"viewMatrix\");\n or  // WebVR: Render the left eye’s view to the left half of the canvas gl.viewport(0, 0, canvas.width * 0.5, canvas.height);\n or  gl.uniformMatrix4fv(projectionMatrixLocation, false, frameData.leftProjectionMatrix);\n or  gl.uniformMatrix4fv(viewMatrixLocation, false, frameData.leftViewMatrix);\n or  drawGeometry();\n or  // WebVR: Render the right eye’s view to the right half of the canvas gl.viewport(canvas.width * 0.5, 0, canvas.width * 0.5, canvas.height);\n or  gl.uniformMatrix4fv(projectionMatrixLocation, false, frameData.rightProjectionMatrix);\n or  gl.uniformMatrix4fv(viewMatrixLocation, false, frameData.rightViewMatrix);\n or  drawGeometry();\n or  function drawGeometry() { // draw the view for each eye } ... // WebVR: Indicate that we are ready to present the rendered frame to the VR display vrDisplay.submitFrame();\n or  });",
        "type": "WebVR"
    },
    "VRStageParameters.sittingToStandingTransform": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRStageParameters.sittingToStandingTransform",
        "params": [],
        "path": "dom/vrstageparameters/sittingtostandingtransform",
        "syntax": "var myTransform = vrStageParametersInstance.sittingToStandingTransform; Value A 16-element Float32Array containing the components of a 4×4 transform matrix. Examples var info = document.querySelector('p');\n or  var vrDisplay; navigator.getVRDisplays().then(function(displays) { vrDisplay = displays[0]; var stageParams = vrDisplay.stageParameters; // stageParams is a VRStageParameters object if(stageParams === null) { info.textContent = 'Your VR Hardware does not support room-scale experiences.' } else { info.innerHTML = '<strong>Display stage parameters</strong>' + '<br>Sitting to standing transform: ' + stageParams.sittingToStandingTransform + '<br>Play area width (m): ' + stageParams.sizeX + '<br>Play area depth (m): ' + stageParams.sizeY } });",
        "type": "WebVR"
    },
    "VRStageParameters.sizeX": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRStageParameters.sizeX",
        "params": [],
        "path": "dom/vrstageparameters/sizex",
        "syntax": "var mySizeX = vrStageParametersInstance.sizeX; Value A float representing the width in meters. Examples var info = document.querySelector('p');\n or  var vrDisplay; navigator.getVRDisplays().then(function(displays) { vrDisplay = displays[0]; var stageParams = vrDisplay.stageParameters; // stageParams is a VRStageParameters object if(stageParams === null) { info.textContent = 'Your VR Hardware does not support room-scale experiences.' } else { info.innerHTML = '<strong>Display stage parameters</strong>' + '<br>Sitting to standing transform: ' + stageParams.sittingToStandingTransform + '<br>Play area width (m): ' + stageParams.sizeX + '<br>Play area depth (m): ' + stageParams.sizeY } });",
        "type": "WebVR"
    },
    "VRStageParameters.sizeY": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VRStageParameters.sizeY",
        "params": [],
        "path": "dom/vrstageparameters/sizey",
        "syntax": "var mySizeY = vrStageParametersInstance.sizeY; Value A float representing the depth in meters. Examples var info = document.querySelector('p');\n or  var vrDisplay; navigator.getVRDisplays().then(function(displays) { vrDisplay = displays[0]; var stageParams = vrDisplay.stageParameters; // stageParams is a VRStageParameters object if(stageParams === null) { info.textContent = 'Your VR Hardware does not support room-scale experiences.' } else { info.innerHTML = '<strong>Display stage parameters</strong>' + '<br>Sitting to standing transform: ' + stageParams.sittingToStandingTransform + '<br>Play area width (m): ' + stageParams.sizeX + '<br>Play area depth (m): ' + stageParams.sizeY } });",
        "type": "WebVR"
    },
    "VTTCue.constructor": {
        "descr": "The VTTCue() constructor returns a new VTTCue object.",
        "name": "VTTCue.constructor",
        "params": [
            {
                "descr": "This is a double representing the time in the video that the cue will start being shown.",
                "name": "startTime"
            },
            {
                "descr": "This is a double representing the time in the video that the cue will stop being shown.",
                "name": "endTime"
            },
            {
                "descr": "This is a DOMString representing the text that will be shown.",
                "name": "text"
            }
        ],
        "path": "dom/vttcue/vttcue",
        "syntax": "vttCue = new VTTCue(startTime, endTime, text);",
        "type": "WebVTT"
    },
    "ValidityState": {
        "descr": "The ValidityState interface represents the validity states that an element can be in, with respect to constraint validation. Together, they help explain why an element's value fails to validate, if it's not valid.",
        "name": "ValidityState",
        "params": [
            {
                "descr": "A Boolean that is true if the user has provided input that the browser is unable to convert.",
                "name": "badInput Read only"
            },
            {
                "descr": "A Boolean indicating whether the element's custom validity message has been set to a non-empty string by calling the element's setCustomValidity() method.",
                "name": "customError Read only"
            },
            {
                "descr": "A Boolean that is true if the value does not match the specified pattern, and false if it does match. ",
                "name": "patternMismatch Read only"
            },
            {
                "descr": "A Boolean that is true if the value is greater than the maximum specified by the max attribute, or false if it is less than or equal to the maximum. ",
                "name": "rangeOverflow Read only"
            },
            {
                "descr": "A Boolean that is true if the value is less than the minimum specified by the min attribute, or false if it is greater than or equal to the minimum. ",
                "name": "rangeUnderflow Read only"
            },
            {
                "descr": "A Boolean that is true if the value does not fit the rules determined by the step attribute (that is, it's not evenly divisible by the step value), or false if it does fit the step rule. ",
                "name": "stepMismatch Read only"
            },
            {
                "descr": "A Boolean that is true if the value exceeds the specified maxlength for HTMLInputElement or HTMLTextAreaElement objects, or false if its length is less than or equal to the maximum length. ",
                "name": "tooLong Read only"
            },
            {
                "descr": "A Boolean that is true if the value fails to meet the specified minlength for HTMLInputElement or HTMLTextAreaElement objects, or false if its length is greater than or equal to the minimum length. ",
                "name": "tooShort Read only"
            },
            {
                "descr": "A Boolean that is true if the value is not in the required syntax (when type is email or url), or false if the syntax is correct. ",
                "name": "typeMismatch Read only"
            },
            {
                "descr": "A Boolean that is true if the element meets all its validation constraints, and is therefore considered to be valid, or false if it fails any constraint. ",
                "name": "valid Read only"
            },
            {
                "descr": "A Boolean that is true if the element has a required attribute, but no value, or false otherwise. ",
                "name": "valueMissing Read only"
            }
        ],
        "path": "dom/validitystate",
        "syntax": "type is email or url), or false",
        "type": "Miscellaneous"
    },
    "VideoPlaybackQuality.corruptedVideoFrames": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VideoPlaybackQuality.corruptedVideoFrames",
        "params": [],
        "path": "dom/videoplaybackquality/corruptedvideoframes",
        "syntax": "value = videoPlaybackQuality.corruptedVideoFrames; Example var videoElt = document.getElementById('my_vid');\n or  var quality = videoElt.getVideoPlaybackQuality();\n or  alert(quality.corruptedVideoFrames);",
        "type": "Media"
    },
    "VideoPlaybackQuality.creationTime": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VideoPlaybackQuality.creationTime",
        "params": [],
        "path": "dom/videoplaybackquality/creationtime",
        "syntax": "value = videoPlaybackQuality.creationTime; Example var videoElt = document.getElementById('my_vid');\n or  var quality = videoElt.getVideoPlaybackQuality();\n or  alert(quality.creationTime);",
        "type": "Media"
    },
    "VideoPlaybackQuality.droppedVideoFrames": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VideoPlaybackQuality.droppedVideoFrames",
        "params": [],
        "path": "dom/videoplaybackquality/droppedvideoframes",
        "syntax": "value = videoPlaybackQuality.droppedVideoFrames; Example var videoElt = document.getElementById('my_vid');\n or  var quality = videoElt.getVideoPlaybackQuality();\n or  alert(quality.droppedVideoFrames);",
        "type": "Media"
    },
    "VideoPlaybackQuality.totalFrameDelay": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VideoPlaybackQuality.totalFrameDelay",
        "params": [],
        "path": "dom/videoplaybackquality/totalframedelay",
        "syntax": "value = videoPlaybackQuality.totalFrameDelay; Example var videoElt = document.getElementById('my_vid');\n or  var quality = videoElt.getVideoPlaybackQuality();\n or  alert(quality.totalFrameDelay);",
        "type": "Media"
    },
    "VideoPlaybackQuality.totalVideoFrames": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VideoPlaybackQuality.totalVideoFrames",
        "params": [],
        "path": "dom/videoplaybackquality/totalvideoframes",
        "syntax": "value = videoPlaybackQuality.totalVideoFrames; Example var videoElt = document.getElementById('my_vid');\n or  var quality = videoElt.getVideoPlaybackQuality();\n or  alert(quality.totalVideoFrames);",
        "type": "Media"
    },
    "VideoTrack": {
        "descr": "The VideoTrack interface represents a single video track from a <video> element. The most common use for accessing a VideoTrack object is to toggle its selected property in order to make it the active video track for its <video> element.",
        "name": "VideoTrack",
        "params": [
            {
                "descr": "A Boolean value which controls whether or not the video track is active. ",
                "name": "selected"
            },
            {
                "descr": "A DOMString which uniquely identifies the track within the media. ",
                "name": "id Read only"
            },
            {
                "descr": "A DOMString specifying the category into which the track falls. ",
                "name": "kind Read only"
            },
            {
                "descr": "A DOMString providing a human-readable label for the track. ",
                "name": "label Read only"
            },
            {
                "descr": "A DOMString specifying the video track's primary language, or an empty string if unknown. ",
                "name": "language Read only"
            },
            {
                "descr": "The SourceBuffer that created the track. ",
                "name": "sourceBuffer Read only"
            }
        ],
        "path": "dom/videotrack",
        "syntax": "forEach()",
        "type": "Miscellaneous"
    },
    "VideoTrack.id": {
        "descr": "The id property contains a string which uniquely identifies the track represented by the VideoTrack. This ID can be used with the VideoTrackList.getTrackById() method to locate a specific track within the media associated with a media element.",
        "name": "VideoTrack.id",
        "params": [],
        "path": "dom/videotrack/id",
        "syntax": "var trackID = VideoTrack.id; Value A DOMString which identifies the track, suitable for use when calling getTrackById()",
        "type": "Miscellaneous"
    },
    "VideoTrack.kind": {
        "descr": "The kind property contains a string indicating the category of video contained in the VideoTrack. The kind can be used to determine the scenarios in which specific tracks should be enabled or disabled. See Video track kind strings for a list of the kinds available for video tracks.",
        "name": "VideoTrack.kind",
        "params": [
            {
                "descr": "A potential alternative to the main track, such as a different video take or a version of the soundtrack with only the music and no dialogue.",
                "name": "\"alternative\""
            },
            {
                "descr": "A version of the main video track with captions burnt in.",
                "name": "\"captions\""
            },
            {
                "descr": "The primary video track.",
                "name": "\"main\""
            },
            {
                "descr": "A sign-language interpretation of an audio track.",
                "name": "\"sign\""
            },
            {
                "descr": "A version of the main video track with subtitles burnt in.",
                "name": "\"subtitles\""
            },
            {
                "descr": "A video track containing a commentary. ",
                "name": "\"commentary\""
            },
            {
                "descr": "The track doesn't have an explicit kind, or the kind provided by the track's metadata isn't recognized by the user agent.",
                "name": "\"\" (empty string)"
            }
        ],
        "path": "dom/videotrack/kind",
        "syntax": "var trackKind = VideoTrack.kind; Value A DOMString specifying the type of content the media represents. The string is one of those found in Video track kind strings below. Video track kind strings The kinds available for video tracks are:  \"alternative\" A potential alternative to the main track, such as a different video take or a version of the soundtrack with only the music and no dialogue. \"captions\" A version of the main video track with captions burnt in. \"main\" The primary video track. \"sign\" A sign-language interpretation of an audio track. \"subtitles\" A version of the main video track with subtitles burnt in. \"commentary\" A video track containing a commentary. This might be used to contain the director's commentary track on a movie, for example.  \"\" (empty string) The track doesn't have an explicit kind, or the kind provided by the track's metadata isn't recognized by the user agent.  Specifications",
        "type": "Miscellaneous"
    },
    "VideoTrack.label": {
        "descr": "The read-only VideoTrack property label returns a string specifying the video track's human-readable label, if one is available; otherwise, it returns an empty string.",
        "name": "VideoTrack.label",
        "params": [],
        "path": "dom/videotrack/label",
        "syntax": "var videoTrackLabel = VideoTrack.label; Value A DOMString specifying the track's human-readable label, if one is available in the track metadata. Otherwise, an empty string (\"\") is returned.",
        "type": "Miscellaneous"
    },
    "VideoTrack.language": {
        "descr": "The read-only VideoTrack property language returns a string identifying the language used in the video track. For tracks that include multiple languages (such as a movie in English in which a few lines are spoken in other languages), this should be the video's primary language.",
        "name": "VideoTrack.language",
        "params": [],
        "path": "dom/videotrack/language",
        "syntax": "var videoTrackLanguage = VideoTrack.language; Value A DOMString specifying the BCP 47 (RFC 5646) format language tag of the primary language used in the video track, or an empty string (\"\"",
        "type": "Miscellaneous"
    },
    "VideoTrackList": {
        "descr": "The VideoTrackList interface is used to represent a list of the video tracks contained within a <video> element, with each track represented by a separate VideoTrack object in the list.",
        "name": "VideoTrackList",
        "params": [
            {
                "descr": "The number of tracks in the list.",
                "name": "length Read only"
            },
            {
                "descr": "The index of the currently selected track, if any, or −1 otherwise. ",
                "name": "selectedIndex Read only"
            },
            {
                "descr": "An event handler to be called when the addtrack event is fired, indicating that a new video track has been added to the media element.",
                "name": "onaddtrack"
            },
            {
                "descr": "An event handler to be called when the change event occurs — that is, when the value of the selected property for a track has changed, due to the track being made active or inactive.",
                "name": "onchange"
            },
            {
                "descr": "An event handler to call when the removetrack event is sent, indicating that a video track has been removed from the media element.",
                "name": "onremovetrack"
            },
            {
                "descr": "Returns the VideoTrack found within the VideoTrackList whose id matches the specified string. ",
                "name": "getTrackById()"
            }
        ],
        "path": "dom/videotracklist",
        "syntax": "forEach()",
        "type": "Miscellaneous"
    },
    "VideoTrackList.getTrackById": {
        "descr": "The VideoTrackList method getTrackById() returns the first VideoTrack object from the track list whose id matches the specified string. This lets you find a specified track if you know its ID string.",
        "name": "VideoTrackList.getTrackById",
        "params": [
            {
                "descr": "A DOMString indicating the ID of the track to locate within the track list.",
                "name": "id"
            }
        ],
        "path": "dom/videotracklist/gettrackbyid",
        "syntax": "var theTrack = VideoTrackList.getTrackById(id);",
        "type": "Miscellaneous"
    },
    "VideoTrackList.length": {
        "descr": "The read-only VideoTrackList property length returns the number of entries in the VideoTrackList, each of which is a VideoTrack representing one video track in the media element. A value of 0 indicates that there are no video tracks in the media.",
        "name": "VideoTrackList.length",
        "params": [],
        "path": "dom/videotracklist/length",
        "syntax": "var trackCount = VideoTrackList.length; Value A number indicating how many video tracks are included in the VideoTrackList. Each track can be accessed by treating the VideoTrackList as an array of objects of type VideoTrack. Example This snippet gets the number of video tracks in the first <video> element found in the DOM by querySelector()",
        "type": "Miscellaneous"
    },
    "VideoTrackList.onaddtrack": {
        "descr": "The VideoTrackList property onaddtrack is an event handler which is called when the addtrack event occurs, indicating that a new video track has been added to the media element whose video tracks the VideoTrackList represents.",
        "name": "VideoTrackList.onaddtrack",
        "params": [],
        "path": "dom/videotracklist/onaddtrack",
        "syntax": "VideoTrackList.onaddtrack = eventHandler; Value Set onaddtrack to a function that accepts as input a TrackEvent object which indicates in its track property which video track has been added to the media. Usage notes The addtrack event is called whenever a new track is added to the media element whose video tracks are represented by the VideoTrackList object. This happens when tracks are added to the element when the media is first attached to the element; one addtrack event will occur for each video track in the media resource. Example This snippet establishes a handler for the addtrack event that calls a function, addToTrackList()",
        "type": "Miscellaneous"
    },
    "VideoTrackList.onchange": {
        "descr": "The VideoTrackList property onchange is an event handler which is called when the change event occurs, indicating that a VideoTrack in the VideoTrackList has been made active.",
        "name": "VideoTrackList.onchange",
        "params": [],
        "path": "dom/videotracklist/onchange",
        "syntax": "VideoTrackList.onchange = eventHandler; Value Set onchange to a function that should be called whenever a track is made active. Example This snippet establishes a handler for the change event that looks at each of the tracks in the list, calling a function to update the state of a user interface control that indicates the current state of the track. var trackList = document.querySelector(\"video\").videoTracks; trackList.onchange = function(event) { trackList.forEach(function(track) { updateTrackSelectedButton(track.id, track.selected);\n or  });\n or  };);",
        "type": "Miscellaneous"
    },
    "VideoTrackList.onremovetrack": {
        "descr": "The VideoTrackList onremovetrack event handler is called when the removetrack event occurs, indicating that a video track has been removed from the media element, and therefore also from the VideoTrackList.",
        "name": "VideoTrackList.onremovetrack",
        "params": [],
        "path": "dom/videotracklist/onremovetrack",
        "syntax": "VideoTrackList.onremovetrack = eventHandler; Value Set onremovetrack to a function that accepts as input a TrackEvent object which indicates in its track property which video track has been removed from the media element. Example This simple example just fetches the current number of video tracks in the media element whenever a track is removed from the media element. document.querySelector(\"my-video\").videoTracks.onremovetrack = function(event) { myTrackCount = document.querySelector(\"my-video\").videoTracks.length; };",
        "type": "Miscellaneous"
    },
    "VideoTrackList.selectedIndex": {
        "descr": "The read-only VideoTrackList property selectedIndex returns the index of the currently selected track, if any, or -1 otherwise.",
        "name": "VideoTrackList.selectedIndex",
        "params": [],
        "path": "dom/videotracklist/selectedindex",
        "syntax": "var index = VideoTrackList.selectedIndex; Value A number indicating the index of the currently selected track, if any, or -1 otherwise. Specifications    Specification Status Comment     HTML Living StandardThe definition of 'VideoTrackList: selectedIndex' in that specification. Living Standard      Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  45Disabled    45Disabled   Disabled From version 45: this feature is behind the enable-experimental-web-platform-features preference (needs to be set to enabled). To change preferences in Chrome, visit chrome://flags.    12  33Disabled    33Disabled   Disabled From version 33: this feature is behind the media.track.enabled",
        "type": "Miscellaneous"
    },
    "VisualViewport.height": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VisualViewport.height",
        "params": [],
        "path": "dom/visualviewport/height",
        "syntax": "var height = VisualViewport.height Value A double. Specifications    Specification Status Comment   Visual Viewport APIThe definition of 'height' in that specification. Draft Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   61  No  63Disabled    63Disabled   Disabled From version 63: this feature is behind the dom.visualviewport.enabled preference (needs to be set to true). To change preferences in Firefox, visit about:config.    No  48  No       Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   61  61  No  63Disabled    63Disabled   Disabled From version 63: this feature is behind the dom.visualviewport.enabled",
        "type": "Visual Viewport"
    },
    "VisualViewport.offsetTop": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VisualViewport.offsetTop",
        "params": [],
        "path": "dom/visualviewport/offsettop",
        "syntax": "var offsetTop = VisualViewport.offsetTop Value A double. Specifications    Specification Status Comment   Visual Viewport APIThe definition of 'offsetTop' in that specification. Draft Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   61  No  63Disabled    63Disabled   Disabled From version 63: this feature is behind the dom.visualviewport.enabled preference (needs to be set to true). To change preferences in Firefox, visit about:config.    No  48  No       Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   61  61  No  63Disabled    63Disabled   Disabled From version 63: this feature is behind the dom.visualviewport.enabled",
        "type": "Visual Viewport"
    },
    "VisualViewport.offsetleft": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VisualViewport.offsetleft",
        "params": [],
        "path": "dom/visualviewport/offsetleft",
        "syntax": "var offsetLeft = VisualViewport.offsetLeft Value A double. Specifications    Specification Status Comment   UnknownThe definition of 'offsetLeft' in that specification. Unknown Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari     Basic support   61  No  63Disabled    63Disabled   Disabled From version 63: this feature is behind the dom.visualviewport.enabled preference (needs to be set to true). To change preferences in Firefox, visit about:config.    No  48  No       Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet     Basic support   61  61  No  63Disabled    63Disabled   Disabled From version 63: this feature is behind the dom.visualviewport.enabled",
        "type": "Miscellaneous"
    },
    "VisualViewport.onresize": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VisualViewport.onresize",
        "params": [],
        "path": "dom/visualviewport/onresize",
        "syntax": "VisualViewport.addEventListener('resize', function(e) { ... }) VisualViewport.onresize = function(e) { ... }",
        "type": "Visual Viewport"
    },
    "VisualViewport.onscroll": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VisualViewport.onscroll",
        "params": [],
        "path": "dom/visualviewport/onscroll",
        "syntax": "VisualViewport.addEventListener('scroll', function(e) { ... }) VisualViewport.onscroll = function(e) { ... }",
        "type": "Visual Viewport"
    },
    "VisualViewport.pageLeft": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VisualViewport.pageLeft",
        "params": [],
        "path": "dom/visualviewport/pageleft",
        "syntax": "var pageLeft = VisualViewport.pageLeft Value A double. Specifications    Specification Status Comment   Visual Viewport APIThe definition of 'pageLeft' in that specification. Draft Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   61  No  63Disabled    63Disabled   Disabled From version 63: this feature is behind the dom.visualviewport.enabled preference (needs to be set to true). To change preferences in Firefox, visit about:config.    No  48  No       Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   61  61  No  63Disabled    63Disabled   Disabled From version 63: this feature is behind the dom.visualviewport.enabled",
        "type": "Visual Viewport"
    },
    "VisualViewport.pageTop": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VisualViewport.pageTop",
        "params": [],
        "path": "dom/visualviewport/pagetop",
        "syntax": "var pageTop = VisualViewport.pageTop Value A double. Specifications    Specification Status Comment   Visual Viewport APIThe definition of 'pageTop' in that specification. Draft Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   61  No  63Disabled    63Disabled   Disabled From version 63: this feature is behind the dom.visualviewport.enabled preference (needs to be set to true). To change preferences in Firefox, visit about:config.    No  48  No       Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   61  61  No  63Disabled    63Disabled   Disabled From version 63: this feature is behind the dom.visualviewport.enabled",
        "type": "Visual Viewport"
    },
    "VisualViewport.scale": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VisualViewport.scale",
        "params": [],
        "path": "dom/visualviewport/scale",
        "syntax": "var scale = VisualViewport.scale Value A double. Specifications    Specification Status Comment   Visual Viewport APIThe definition of 'scale' in that specification. Draft Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   61  No  63Disabled    63Disabled   Disabled From version 63: this feature is behind the dom.visualviewport.enabled preference (needs to be set to true). To change preferences in Firefox, visit about:config.    No  48  No       Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   61  61  No  63Disabled    63Disabled   Disabled From version 63: this feature is behind the dom.visualviewport.enabled",
        "type": "Visual Viewport"
    },
    "VisualViewport.width": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "VisualViewport.width",
        "params": [],
        "path": "dom/visualviewport/width",
        "syntax": "var width = VisualViewport.width Value A double. Specifications    Specification Status Comment   Visual Viewport APIThe definition of 'width' in that specification. Draft Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   61  No  63Disabled    63Disabled   Disabled From version 63: this feature is behind the dom.visualviewport.enabled preference (needs to be set to true). To change preferences in Firefox, visit about:config.    No  48  No       Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   61  61  No  63Disabled    63Disabled   Disabled From version 63: this feature is behind the dom.visualviewport.enabled",
        "type": "Visual Viewport"
    },
    "WaveShaperNode.constructor": {
        "descr": "The WaveShaperNode() constructor of the Web Audio API creates a new WaveShaperNode object which is an AudioNode that represents a non-linear distorter.",
        "name": "WaveShaperNode.constructor",
        "params": [
            {
                "descr": "A reference to an AudioContext.",
                "name": "context"
            },
            {
                "descr": "Options are as follows:   curve: The shaping curve used for the waveshaping effect. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/waveshapernode/waveshapernode",
        "syntax": "var waveShaperNode = new WaveShaperNode(context, options)",
        "type": "Audio"
    },
    "WaveShaperNode.curve": {
        "descr": "The curve property of the WaveShaperNode interface is a Float32Array of numbers describing the distortion to apply.",
        "name": "WaveShaperNode.curve",
        "params": [],
        "path": "dom/waveshapernode/curve",
        "syntax": "var audioCtx = new AudioContext();\n or  var distortion = audioCtx.createWaveShaper();\n or  distortion.curve = myCurveDataArray; // myCurveDataArray is a Float32Array);",
        "type": "Audio"
    },
    "WaveShaperNode.oversample": {
        "descr": "The oversample property of the WaveShaperNode interface is an enumerated value indicating if oversampling must be used. Oversampling is a technique for creating more samples (up-sampling) before applying a distortion effect to the audio signal.",
        "name": "WaveShaperNode.oversample",
        "params": [],
        "path": "dom/waveshapernode/oversample",
        "syntax": "distortion.oversample = enumeratedValue;  Values   distortion is a WaveShaperNode.  enumeratedValue is one of 'none', '2x', or '4x'.  Example The following example shows basic usage of an AudioContext to create a wave shaper node. For applied examples/information, check out our Voice-change-O-matic demo (see app.js for relevant code).",
        "type": "Audio"
    },
    "WeakMap": {
        "descr": "The WeakMap object is a collection of key/value pairs in which the keys are weakly referenced. The keys must be objects and the values can be arbitrary values.",
        "name": "WeakMap",
        "params": [
            {
                "descr": "Iterable is an Array or other iterable object whose elements are key-value pairs (2-element Arrays). ",
                "name": "iterable"
            },
            {
                "descr": "The value of the length property is 0.",
                "name": "WeakMap.length"
            },
            {
                "descr": "Represents the prototype for the WeakMap constructor. ",
                "name": "WeakMap.prototype"
            },
            {
                "descr": "Returns the function that created an instance's prototype. ",
                "name": "WeakMap.prototype.constructor"
            },
            {
                "descr": "Removes any value associated to the key. ",
                "name": "WeakMap.prototype.delete(key)"
            },
            {
                "descr": "Returns the value associated to the key, or undefined if there is none.",
                "name": "WeakMap.prototype.get(key)"
            },
            {
                "descr": "Returns a Boolean asserting whether a value has been associated to the key in the WeakMap object or not.",
                "name": "WeakMap.prototype.has(key)"
            },
            {
                "descr": "Sets the value for the key in the WeakMap object. ",
                "name": "WeakMap.prototype.set(key, value)"
            },
            {
                "descr": "Removes all key/value pairs from the WeakMap object. ",
                "name": "WeakMap.prototype.clear()"
            }
        ],
        "path": "javascript/global_objects/weakmap",
        "syntax": "new WeakMap([iterable])",
        "type": "WeakMap"
    },
    "WeakSet": {
        "descr": "The WeakSet object lets you store weakly held objects in a collection.",
        "name": "WeakSet",
        "params": [
            {
                "descr": "If an iterable object is passed, all of its elements will be added to the new WeakSet. ",
                "name": "iterable"
            },
            {
                "descr": "The value of the length property is 0.",
                "name": "WeakSet.length"
            },
            {
                "descr": "Represents the prototype for the WeakSet constructor. ",
                "name": "WeakSet.prototype"
            },
            {
                "descr": "Returns the function that created an instance's prototype. ",
                "name": "WeakSet.prototype.constructor"
            },
            {
                "descr": "Appends a new object with the given value to the WeakSet object.",
                "name": "WeakSet.prototype.add(value)"
            },
            {
                "descr": "Removes the element associated to the value. ",
                "name": "WeakSet.prototype.delete(value)"
            },
            {
                "descr": "Returns a boolean asserting whether an element is present with the given value in the WeakSet object or not.",
                "name": "WeakSet.prototype.has(value)"
            },
            {
                "descr": "Removes all elements from the WeakSet object.",
                "name": "WeakSet.prototype.clear()"
            }
        ],
        "path": "javascript/global_objects/weakset",
        "syntax": "new WeakSet([iterable]);",
        "type": "WeakSet"
    },
    "Web Animations API: Keyframe Formats": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Web Animations API: Keyframe Formats",
        "params": [
            {
                "descr": "The offset of the keyframe specified as a number between 0.0 and 1.0 inclusive or null. ",
                "name": "offset"
            },
            {
                "descr": "The timing function used from this keyframe until the next keyframe in the series.",
                "name": "easing"
            },
            {
                "descr": "The KeyframeEffect.composite operation used to combine the values specified in this keyframe with the underlying value. ",
                "name": "composite"
            }
        ],
        "path": "dom/web_animations_api/keyframe_formats",
        "syntax": "array of objects (keyframes) consisting of properties and values to iterate over. This is the canonical format returned by the getKeyframes()",
        "type": "Animation"
    },
    "Web Animations API: Using the Web Animations API": {
        "descr": "The Web Animations API opens the browser’s animation engine to developers and manipulation by JavaScript. This API was designed to underlie implementations of both CSS Animations and CSS Transitions, and leaves the door open to future animation effects. It is one of the most performant ways to animate on the Web where supported, letting the browser make its own internal optimizations without hacks, coercion, or Window.requestAnimationFrame().",
        "name": "Web Animations API: Using the Web Animations API",
        "params": [],
        "path": "dom/web_animations_api/using_the_web_animations_api",
        "syntax": "#alice { animation: aliceTumbling infinite 3s linear; } @keyframes aliceTumbling { 0% { color: #000; transform: rotate(0) translate3D(-50%, -50%, 0);\n or  } 30% { color: #431236; } 100% { color: #000; transform: rotate(360deg) translate3D(-50%, -50%, 0);\n or  } });",
        "type": "Animation"
    },
    "Web Audio API: Advanced techniques": {
        "descr": "We're going to be looking at a very simple step sequencer:",
        "name": "Web Audio API: Advanced techniques",
        "params": [],
        "path": "dom/web_audio_api/advanced_techniques",
        "syntax": "<label for=\"duration\">Duration</label> <input name=\"duration\" id=\"duration\" type=\"range\" min=\"0\" max=\"2\" value=\"1\" step=\"0.1\" /> <label for=\"band\">Band</label> <input name=\"band\" id=\"band\" type=\"range\" min=\"400\" max=\"1200\" value=\"1000\" step=\"5\" />  let noiseDuration = 1; const durControl = document.querySelector('#duration');\n or  durControl.addEventListener('input', function() { noiseDuration = Number(this.value);\n or  }, false);\n or  let bandHz = 1000; const bandControl = document.querySelector('#band');\n or  bandControl.addEventListener('input', function() { bandHz = Number(this.value);\n or  }, false);",
        "type": "Audio"
    },
    "Web Audio API: Best practices": {
        "descr": "There are four main ways to load sound with the Web Audio API and it can be a little confusing as to which one you should use.",
        "name": "Web Audio API: Best practices",
        "params": [],
        "path": "dom/web_audio_api/best_practices",
        "syntax": "MediaStreamAudioSourceNode interface. This is good for WebRTC and situations where you might want to record or possibly analyse audio. The last way is to generate your own sound, which can be done with either an OscillatorNode or by creating a buffer and populating it with your own data. Check out the tutorial here for creating your own instrument for information on creating sounds with oscillators and buffers. Cross browser & legacy support The Web Audio API specification is constantly evolving and like most things on the web, there are some issues with it working consistently across browsers. Here we'll look at options for getting around cross-browser problems. There's the standardised-audio-context npm package, which creates API functionality consistently across browsers, full holes as they are found. It's constantly in development and endeavours to keep up with the current specification. There is also the option of libraries, of which there are a few depending on your use case. For a good all-rounder, howler.js is a good choice. It has cross-browser support and, provides a useful subset of functionality. Although it doesn't harness the full gamut of filters and other effects the Web Audio API comes with, you can do most of what you'd want to do. If you are looking for sound creation or a more instrument-based option, tone.js is a great library. It provides advanced scheduling capabilities, synths, and effects, and intuitive musical abstractions built on top of the Web Audio API. R-audio, from the BBC's Research & Development department, is a library of React components aiming to provide a \"more intuitive, declarative interface to Web Audio\". If you're used to writing JSX it might be worth looking at. Autoplay policy Browsers have started to implement an autoplay policy, which in general can be summed up as:  \"Create or resume context from inside a user gesture\".  But what does that mean in practice? A user gesture has been interpreted to mean a user-initiated event, normally a click event. Browser vendors decided that Web Audio contexts should not be allowed to automatically play audio; they should instead be started by a user. This is because autoplaying audio can be really annoying and obtrusive. But how do we handle this? When you create an audio context (either offline or online) it is created with a state",
        "type": "Audio"
    },
    "Web Audio API: Using Web Audio API": {
        "descr": "The Web Audio API does not replace the <audio> media element, but rather complements it, just like <canvas> coexists alongside the <img> element. Your use case will determine what tools you use to implement audio. If you simply want to control playback of an audio track, the <audio> media element provides a better, quicker solution than the Web Audio API. If you want to carry out more complex audio processing, as well as playback, the Web Audio API provides much more power and control.",
        "name": "Web Audio API: Using Web Audio API",
        "params": [],
        "path": "dom/web_audio_api/using_web_audio_api",
        "syntax": "GainNode, which represents how big our sound wave is. There are two ways you can create nodes with the Web Audio API. You can use the factory method on the context itself (e.g. audioCtx.createGain()",
        "type": "Audio"
    },
    "Web Audio API: Visualizations with Web Audio API": {
        "descr": "One of the most interesting features of the Web Audio API is the ability to extract frequency, waveform, and other data from your audio source, which can then be used to create visualizations. This article explains how, and provides a couple of basic use cases.",
        "name": "Web Audio API: Visualizations with Web Audio API",
        "params": [],
        "path": "dom/web_audio_api/visualizations_with_web_audio_api",
        "syntax": "analyser.fftSize = 2048; var bufferLength = analyser.frequencyBinCount; var dataArray = new Uint8Array(bufferLength);",
        "type": "Audio"
    },
    "Web Authentication API: Attestation and Assertion": {
        "descr": "Draft This page is not complete.",
        "name": "Web Authentication API: Attestation and Assertion",
        "params": [
            {
                "descr": "- An ArrayBuffer that contains a JSON representation of what the browser saw when being asked to authenticate.",
                "name": "clientDataJSON"
            },
            {
                "descr": "- Optional. (Nullable) A user identifier. ",
                "name": "userHandle"
            }
        ],
        "path": "dom/web_authentication_api/attestation_and_assertion",
        "syntax": "When an authenticator registers a new key pair with a service, the authenticator signs the public key with an attestation certificate. The attestation certificate is built in to the authenticator during manufacturing time and is specific to a device model. That is, all \"Samsung Galaxy S8\" phones, manufactured at a specific time or particular manufacturing run, have the same attestation certificate. The attestation  is returned through the WebAuthn API as the AuthenticatorAttestationResponse. The attestation format contains two basic ArrayBuffers:   clientDataJSON - An ArrayBuffer that contains a JSON representation of what the browser saw when being asked to authenticate.   attestationObject - Cryptographic attestation that a newly generated keypair was created by that authenticator. Contains authenticator data and an attestation statement. The authenticator data contains an attestedCredentialData field. The attestedCredentialData field contains the credentialId and credentialPublicKey. (The authenticator data is the same structure that is used in the AuthenticatorAssertionResponse. The attestedCredentialData is an optional field used in attestation. It is not included when used in the AuthenticatorAssertionResponse.)   Different devices have different attestation formats. The pre-defined attestation formats in WebAuthn are:   Packed - a generic attestation format that is commonly used by devices who's sole function is as a WebAuthn authenticator, such as security keys.   TPM - the Trusted Platform Module (TPM) is a set of specifications from the Trusted Platform Group (TPG). This attestation format is commonly found in desktop computers and is used by Windows Hello as its preferred attestation format.   Android Key Attestation - one of the features added in Android O was Android Key Attestation, which enables the Android operating system to attest to keys.   Android SafetyNet -prior to Android Key Attestation, the only option for Android devices was to create Android SafetyNet attestations   FIDO U2F - security keys that implement the FIDO U2F standard use this format   none - browsers may prompt users whether they want a site to be allowed to see their attestation data and / or may remove attestation data from the authenticator's response if the `attestation` parameter in `navigator.credentials.create()` is set to `none`   The purpose of attestation is to cryptographically prove that a newly generated key pair came from a specific device. This provides a root of trust for a newly generated key pair as well as being able to identify the attributes of a device being used (how the private key is protected; if / what kind of biometric is being used; whether a device has been certified; etc.). It should be noted that while attestation provides the capability for a root of trust, validating the root of trust is frequently not necessary. When registering an authenticator for a new account, typically a Trust On First Use (TOFU) model applies; and when adding an authenticator to an existing account, a user has already been authenticated and has established a secure session. Assertion",
        "type": "Miscellaneous"
    },
    "Web Crypto API: Supported algorithms": {
        "descr": "Different algorithms are supported for the different functions provided by the Web Crypto API. Also, depending of the context, these algorithms needs parameters or they will raise a SyntaxError. This pages lists the context, the available algorithms and the required parameters.",
        "name": "Web Crypto API: Supported algorithms",
        "params": [
            {
                "descr": "It represents AES in Cipher Block Chaining mode. ",
                "name": "AES-CBC"
            },
            {
                "descr": "It represents AES in Counter Mode. ",
                "name": "AES-CTR"
            },
            {
                "descr": "It represents AES in Galois/Counter Mode. ",
                "name": "AES-GCM"
            },
            {
                "descr": "It represents RSAES-OAEP algorithm, using a SHA hash functions and a MGF1 mask generating function. ",
                "name": "RSA-OAEP"
            },
            {
                "descr": "It represents the key wrapping in AES algorithm. ",
                "name": "AES-KW"
            },
            {
                "descr": "It represents the hash-based message authentication method using SHA hash functions. ",
                "name": "HMAC"
            },
            {
                "descr": "It represents RSASSA-PKCS1-v1_5 algorithm, using a SHA hash function. ",
                "name": "RSASSA-PKCS1-v1_5"
            },
            {
                "descr": "It represents the Elliptic Curve Digital Signature Algorithm.",
                "name": "ECDSA"
            }
        ],
        "path": "dom/web_crypto_api/supported_algorithms",
        "syntax": "SyntaxError. This pages lists the context, the available algorithms and the required parameters. Key generation algorithms  AES-CBC  It represents AES in Cipher Block Chaining mode. For key generation, it uses PKCS #7 as the padding method. Key usages for keys generated with this method are restricted to \"encrypt\", \"decrypt\", \"wrapKey\" or \"unwrapKey\". If any other usage is requested for the key generated with this method, the key generation aborts with a SyntaxError. The returned key is a CryptoKey. The AES-CBC algorithm must be described using a dictionary with the following parameters:   \"name\", a DOMString containing \"AES-CBC\".  \"length\", an unsigned integer containing the length of the key (in bits). If the value is not  128",
        "type": "Cryptography"
    },
    "Web Workers API: Using web workers": {
        "descr": "Web Workers is a simple means for web content to run scripts in background threads. The worker thread can perform tasks without interfering with the user interface. In addition, they can perform I/O using XMLHttpRequest (although the responseXML and channel attributes are always null). Once created, a worker can send messages to the JavaScript code that created it by posting messages to an event handler specified by that code (and vice versa). This article provides a detailed introduction to using web workers.",
        "name": "Web Workers API: Using web workers",
        "params": [
            {
                "descr": "A human-readable error message.",
                "name": "message"
            },
            {
                "descr": "The name of the script file in which the error occurred.",
                "name": "filename"
            },
            {
                "descr": "The line number of the script file on which the error occurred.",
                "name": "lineno"
            }
        ],
        "path": "dom/web_workers_api/using_web_workers",
        "syntax": "if (window.Worker) { ... }",
        "type": "Web Workers"
    },
    "WebAssembly": {
        "descr": "The WebAssembly JavaScript object acts as the namespace for all WebAssembly-related functionality.",
        "name": "WebAssembly",
        "params": [
            {
                "descr": "The primary API for compiling and instantiating WebAssembly code, returning both a Module and its first Instance.",
                "name": "WebAssembly.instantiate()"
            },
            {
                "descr": "Compiles and instantiates a WebAssembly module directly from a streamed underlying source, returning both a Module and its first Instance.",
                "name": "WebAssembly.instantiateStreaming()"
            },
            {
                "descr": "Compiles a WebAssembly.Module from WebAssembly binary code, leaving instantiation as a separate step.",
                "name": "WebAssembly.compile()"
            },
            {
                "descr": "compiles a WebAssembly.Module directly from a streamed underlying source, leaving instantiation as a separate step.",
                "name": "WebAssembly.compileStreaming()"
            },
            {
                "descr": "Validates a given typed array of WebAssembly binary code, returning whether the bytes are valid WebAssembly code (true) or not (false).",
                "name": "WebAssembly.validate()"
            },
            {
                "descr": "Creates a new WebAssembly Global object.",
                "name": "WebAssembly.Global()"
            },
            {
                "descr": "Creates a new WebAssembly Module object.",
                "name": "WebAssembly.Module()"
            },
            {
                "descr": "Creates a new WebAssembly Instance object.",
                "name": "WebAssembly.Instance()"
            },
            {
                "descr": "Creates a new WebAssembly Memory object.",
                "name": "WebAssembly.Memory()"
            },
            {
                "descr": "Creates a new WebAssembly Table object.",
                "name": "WebAssembly.Table()"
            },
            {
                "descr": "Creates a new WebAssembly CompileError object.",
                "name": "WebAssembly.CompileError()"
            },
            {
                "descr": "Creates a new WebAssembly LinkError object.",
                "name": "WebAssembly.LinkError()"
            },
            {
                "descr": "Creates a new WebAssembly RuntimeError object.",
                "name": "WebAssembly.RuntimeError()"
            }
        ],
        "path": "javascript/global_objects/webassembly",
        "syntax": "CompileError  57  16  52   52   Disabled in the Firefox 52 Extended Support Release (ESR).    No  44  11   Global",
        "type": "Global Objects"
    },
    "WebAssembly.compile": {
        "descr": "The WebAssembly.compile() function compiles a WebAssembly.Module from WebAssembly binary code. This function is useful if it is necessary to a compile a module before it can be instantiated (otherwise, the WebAssembly.instantiate() function should be used).",
        "name": "WebAssembly.compile",
        "params": [
            {
                "descr": "A typed array or ArrayBuffer containing the binary code of the .wasm module you want to compile.",
                "name": "bufferSource"
            }
        ],
        "path": "javascript/global_objects/webassembly/compile",
        "syntax": "Promise<WebAssembly.Module> WebAssembly.compile(bufferSource);",
        "type": "WebAssembly"
    },
    "WebAssembly.compileError": {
        "descr": "The WebAssembly.CompileError() constructor creates a new WebAssembly CompileError object, which indicates an error during WebAssembly decoding or validation.",
        "name": "WebAssembly.compileError",
        "params": [
            {
                "descr": "Human-readable description of the error.",
                "name": "message Optional"
            },
            {
                "descr": "The name of the file containing the code that caused the exception.",
                "name": "fileName Optional"
            },
            {
                "descr": "The line number of the code that caused the exception.",
                "name": "lineNumber Optional"
            },
            {
                "descr": "Specifies the function that created an instance's prototype.",
                "name": "WebAssembly.CompileError.prototype.constructor"
            },
            {
                "descr": "Error message. Although ECMA-262 specifies that URIError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.",
                "name": "WebAssembly.CompileError.prototype.message"
            },
            {
                "descr": "Error name. Inherited from Error.",
                "name": "WebAssembly.CompileError.prototype.name"
            },
            {
                "descr": "Path to file that raised this error. ",
                "name": "WebAssembly.CompileError.prototype.fileName"
            },
            {
                "descr": "Line number in file that raised this error. ",
                "name": "WebAssembly.CompileError.prototype.lineNumber"
            },
            {
                "descr": "Column number in line that raised this error. ",
                "name": "WebAssembly.CompileError.prototype.columnNumber"
            },
            {
                "descr": "Stack trace. Inherited from Error.",
                "name": "WebAssembly.CompileError.prototype.stack"
            },
            {
                "descr": "Returns code that could eval to the same error. ",
                "name": "WebAssembly.CompileError.prototype.toSource()"
            },
            {
                "descr": "Returns a string representing the specified Error object.. ",
                "name": "WebAssembly.CompileError.prototype.toString()"
            }
        ],
        "path": "javascript/global_objects/webassembly/compileerror",
        "syntax": "new WebAssembly.CompileError(message, fileName, lineNumber)",
        "type": "WebAssembly"
    },
    "WebAssembly.compileStreaming": {
        "descr": "The WebAssembly.compileStreaming() function compiles a WebAssembly.Module directly from a streamed underlying source. This function is useful if it is necessary to a compile a module before it can be instantiated (otherwise, the WebAssembly.instantiateStreaming() function should be used).",
        "name": "WebAssembly.compileStreaming",
        "params": [
            {
                "descr": "A Response object or a promise that will fulfill with one, representing the underlying source of a .wasm module you want to stream and compile.",
                "name": "source"
            }
        ],
        "path": "javascript/global_objects/webassembly/compilestreaming",
        "syntax": "Promise<WebAssembly.Module> WebAssembly.compileStreaming(source);",
        "type": "WebAssembly"
    },
    "WebAssembly.global": {
        "descr": "A WebAssembly.Global object represents a global variable instance, accessible from both JavaScript and importable/exportable across one or more WebAssembly.Module instances. This allows dynamic linking of multiple modules.",
        "name": "WebAssembly.global",
        "params": [
            {
                "descr": "A GlobalDescriptor dictionary object, which contains two properties:   value: A USVString representing the data type of the global. ",
                "name": "descriptor"
            },
            {
                "descr": "The value the variable contains. ",
                "name": "value"
            },
            {
                "descr": "Returns the function that created this object's instance. ",
                "name": "Global.prototype.constructor"
            },
            {
                "descr": "The initial value of the @@toStringTag property is the String value \"WebAssembly.Global\".",
                "name": "Global.prototype[@@toStringTag]"
            },
            {
                "descr": "The value contained inside the global variable — this can be used to directly set and get the global's value.",
                "name": "Global.prototype.value"
            },
            {
                "descr": "Old-style method that returns the value contained inside the global variable.",
                "name": "Global.prototype.valueOf()"
            }
        ],
        "path": "javascript/global_objects/webassembly/global",
        "syntax": "var myGlobal = new WebAssembly.Global(descriptor, value);",
        "type": "WebAssembly"
    },
    "WebAssembly.instance": {
        "descr": "A WebAssembly.Instance object is a stateful, executable instance of a WebAssembly.Module. Instance objects contain all the Exported WebAssembly functions that allow calling into WebAssembly code from JavaScript.",
        "name": "WebAssembly.instance",
        "params": [
            {
                "descr": "The WebAssembly.Module object to be instantiated.",
                "name": "module"
            },
            {
                "descr": "An object containing the values to be imported into the newly-created Instance, such as functions or WebAssembly.Memory objects. ",
                "name": "importObject Optional"
            },
            {
                "descr": "Returns the function that created this object's instance. ",
                "name": "Instance.prototype.constructor"
            },
            {
                "descr": "Returns an object containing as its members all the functions exported from the WebAssembly module instance, to allow them to be accessed and used by JavaScript.",
                "name": "Instance.prototype.exports Read only"
            }
        ],
        "path": "javascript/global_objects/webassembly/instance",
        "syntax": "Instance()",
        "type": "WebAssembly"
    },
    "WebAssembly.instance.exports": {
        "descr": "The exports readonly property of the WebAssembly.Instance object prototype returns an object containing as its members all the functions exported from the WebAssembly module instance, to allow them to be accessed and used by JavaScript.",
        "name": "WebAssembly.instance.exports",
        "params": [],
        "path": "javascript/global_objects/webassembly/instance/exports",
        "syntax": "WebAssembly.instantiateStreaming()",
        "type": "WebAssembly"
    },
    "WebAssembly.instance.prototype": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebAssembly.instance.prototype",
        "params": [
            {
                "descr": "Returns the function that created this object's instance. ",
                "name": "Instance.prototype.constructor"
            },
            {
                "descr": "Returns an object containing as its members all the functions exported from the WebAssembly module instance, to allow them to be accessed and used by JavaScript.",
                "name": "Instance.prototype.exports Read only"
            }
        ],
        "path": "javascript/global_objects/webassembly/instance/prototype",
        "syntax": "Experimental JavaScript Features preference.    52   52   Disabled in the Firefox 52 Extended Support Release (ESR).    ?   11  7.0       Server    Node.js    Basic support  8.0.0    See also",
        "type": "WebAssembly"
    },
    "WebAssembly.instantiate": {
        "descr": "The WebAssembly.instantiate() function allows you to compile and instantiate WebAssembly code. This function has two overloads:",
        "name": "WebAssembly.instantiate",
        "params": [
            {
                "descr": "A typed array or ArrayBuffer containing the binary code of the .wasm module you want to compile.",
                "name": "bufferSource"
            },
            {
                "descr": "An object containing the values to be imported into the newly-created Instance, such as functions or WebAssembly.Memory objects. ",
                "name": "importObject Optional"
            },
            {
                "descr": "The WebAssembly.Module object to be instantiated.",
                "name": "module"
            },
            {
                "descr": "An object containing the values to be imported into the newly-created Instance, such as functions or WebAssembly.Memory objects. ",
                "name": "importObject Optional"
            }
        ],
        "path": "javascript/global_objects/webassembly/instantiate",
        "syntax": "Promise<ResultObject> WebAssembly.instantiate(bufferSource, importObject);",
        "type": "WebAssembly"
    },
    "WebAssembly.instantiateStreaming": {
        "descr": "The WebAssembly.instantiateStreaming() function compiles and instantiates a WebAssembly module directly from a streamed underlying source. This is the most efficient, optimized way to load wasm code.",
        "name": "WebAssembly.instantiateStreaming",
        "params": [
            {
                "descr": "A Response object or a promise that will fulfill with one, representing the underlying source of a .wasm module you want to stream, compile, and instantiate.",
                "name": "source"
            },
            {
                "descr": "An object containing the values to be imported into the newly-created Instance, such as functions or WebAssembly.Memory objects. ",
                "name": "importObject Optional"
            }
        ],
        "path": "javascript/global_objects/webassembly/instantiatestreaming",
        "syntax": "Promise<ResultObject> WebAssembly.instantiateStreaming(source, importObject);",
        "type": "WebAssembly"
    },
    "WebAssembly.linkError": {
        "descr": "The WebAssembly.LinkError() constructor creates a new WebAssembly LinkError object, which indicates an error during module instantiation (besides traps from the start function).",
        "name": "WebAssembly.linkError",
        "params": [
            {
                "descr": "Human-readable description of the error.",
                "name": "message Optional"
            },
            {
                "descr": "The name of the file containing the code that caused the exception.",
                "name": "fileName Optional"
            },
            {
                "descr": "The line number of the code that caused the exception.",
                "name": "lineNumber Optional"
            },
            {
                "descr": "Specifies the function that created an instance's prototype.",
                "name": "WebAssembly.LinkError.prototype.constructor"
            },
            {
                "descr": "Error message. Although ECMA-262 specifies that URIError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.",
                "name": "WebAssembly.LinkError.prototype.message"
            },
            {
                "descr": "Error name. Inherited from Error.",
                "name": "WebAssembly.LinkError.prototype.name"
            },
            {
                "descr": "Path to file that raised this error. ",
                "name": "WebAssembly.LinkError.prototype.fileName"
            },
            {
                "descr": "Line number in file that raised this error. ",
                "name": "WebAssembly.LinkError.prototype.lineNumber"
            },
            {
                "descr": "Column number in line that raised this error. ",
                "name": "WebAssembly.LinkError.prototype.columnNumber"
            },
            {
                "descr": "Stack trace. Inherited from Error.",
                "name": "WebAssembly.LinkError.prototype.stack"
            },
            {
                "descr": "Returns code that could eval to the same error. ",
                "name": "WebAssembly.LinkError.prototype.toSource()"
            },
            {
                "descr": "Returns a string representing the specified Error object.. ",
                "name": "WebAssembly.LinkError.prototype.toString()"
            }
        ],
        "path": "javascript/global_objects/webassembly/linkerror",
        "syntax": "new WebAssembly.LinkError(message, fileName, lineNumber)",
        "type": "WebAssembly"
    },
    "WebAssembly.memory": {
        "descr": "The WebAssembly.Memory() constructor creates a new Memory object which is a resizable ArrayBuffer that holds the raw bytes of memory accessed by a WebAssembly Instance.",
        "name": "WebAssembly.memory",
        "params": [
            {
                "descr": "An object that can contain the following members:  initial The initial size of the WebAssembly Memory, in units of WebAssembly pages.",
                "name": "memoryDescriptor"
            },
            {
                "descr": "The maximum size the WebAssembly Memory is allowed to grow to, in units of WebAssembly pages. ",
                "name": "maximum Optional"
            },
            {
                "descr": "Returns the function that created this object's instance. ",
                "name": "Memory.prototype.constructor"
            },
            {
                "descr": "An accessor property that returns the buffer contained in the memory.",
                "name": "Memory.prototype.buffer"
            },
            {
                "descr": "Increases the size of the memory instance by a specified number of WebAssembly pages (each one is 64KB in size).",
                "name": "Memory.prototype.grow()"
            }
        ],
        "path": "javascript/global_objects/webassembly/memory",
        "syntax": "var myMemory = new WebAssembly.Memory(memoryDescriptor);",
        "type": "WebAssembly"
    },
    "WebAssembly.memory.buffer": {
        "descr": "The buffer prototype property of the Memory object returns the buffer contained in the memory.",
        "name": "WebAssembly.memory.buffer",
        "params": [],
        "path": "javascript/global_objects/webassembly/memory/buffer",
        "syntax": "WebAssembly.instantiateStreaming()",
        "type": "WebAssembly"
    },
    "WebAssembly.memory.grow": {
        "descr": "The grow() protoype method of the Memory object increases the size of the memory instance by a specified number of WebAssembly pages.",
        "name": "WebAssembly.memory.grow",
        "params": [
            {
                "descr": "The number of WebAssembly pages you want to grow the memory by (each one is 64KiB in size).",
                "name": "number"
            }
        ],
        "path": "javascript/global_objects/webassembly/memory/grow",
        "syntax": "memory.grow(number);",
        "type": "WebAssembly"
    },
    "WebAssembly.memory.prototype": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebAssembly.memory.prototype",
        "params": [
            {
                "descr": "Returns the function that created this object's instance. ",
                "name": "Memory.prototype.constructor"
            },
            {
                "descr": "An accessor property that returns the buffer contained in the memory.",
                "name": "Memory.prototype.buffer"
            },
            {
                "descr": "Increases the size of the memory instance by a specified number of WebAssembly pages (each one is 64KB in size).",
                "name": "Methods  Memory.prototype.grow()"
            }
        ],
        "path": "javascript/global_objects/webassembly/memory/prototype",
        "syntax": "Experimental JavaScript Features preference.    52   52   Disabled in the Firefox 52 Extended Support Release (ESR).    ?   11  7.0       Server    Node.js    Basic support  8.0.0    See also",
        "type": "WebAssembly"
    },
    "WebAssembly.module": {
        "descr": "Important: Since compilation for large modules can be expensive, developers should only use the Module() constructor when synchronous compilation is absolutely required; the asynchronous WebAssembly.compileStreaming() method should be used at all other times.",
        "name": "WebAssembly.module",
        "params": [
            {
                "descr": "A typed array or ArrayBuffer containing the binary code of the .wasm module you want to compile.",
                "name": "bufferSource"
            },
            {
                "descr": "Given a Module and string, returns a copy of the contents of all custom sections in the module with the given string name.",
                "name": "WebAssembly.Module.customSections()"
            },
            {
                "descr": "Given a Module, returns an array containing descriptions of all the declared exports.",
                "name": "WebAssembly.Module.exports()"
            },
            {
                "descr": "Given a Module, returns an array containing descriptions of all the declared imports.",
                "name": "WebAssembly.Module.imports()"
            },
            {
                "descr": "Returns the function that created this object's instance. ",
                "name": "Module.prototype.constructor"
            },
            {
                "descr": "The initial value of the @@toStringTag property is the String value \"WebAssembly.Module\".",
                "name": "Module.prototype[@@toStringTag]"
            }
        ],
        "path": "javascript/global_objects/webassembly/module",
        "syntax": "Module()",
        "type": "WebAssembly"
    },
    "WebAssembly.module.customSections": {
        "descr": "The WebAssembly.customSections() function returns a copy of the contents of all custom sections in the given module with the given string name.",
        "name": "WebAssembly.module.customSections",
        "params": [
            {
                "descr": "The WebAssembly.Module object whose custom sections are being considered.",
                "name": "module"
            },
            {
                "descr": "The string name of the desired custom section.",
                "name": "sectionName"
            }
        ],
        "path": "javascript/global_objects/webassembly/module/customsections",
        "syntax": "var custSec = WebAssembly.Module.customSections(module, sectionName);",
        "type": "WebAssembly"
    },
    "WebAssembly.module.exports": {
        "descr": "The WebAssembly.exports() function returns an array containing descriptions of all the declared exports of the given Module.",
        "name": "WebAssembly.module.exports",
        "params": [
            {
                "descr": "A WebAssembly.Module object.",
                "name": "module"
            }
        ],
        "path": "javascript/global_objects/webassembly/module/exports",
        "syntax": "var exports = WebAssembly.Module.exports(module);",
        "type": "WebAssembly"
    },
    "WebAssembly.module.imports": {
        "descr": "The WebAssembly.imports() function returns an array containing descriptions of all the declared imports of the given Module.",
        "name": "WebAssembly.module.imports",
        "params": [
            {
                "descr": "A WebAssembly.Module object.",
                "name": "module"
            }
        ],
        "path": "javascript/global_objects/webassembly/module/imports",
        "syntax": "var custSec = WebAssembly.Module.imports(module);",
        "type": "WebAssembly"
    },
    "WebAssembly.module.prototype": {
        "descr": "The WebAssembly.Module.prototype property represents the prototype for the WebAssembly.Module() constructor.",
        "name": "WebAssembly.module.prototype",
        "params": [
            {
                "descr": "Returns the function that created this object's instance. ",
                "name": "Module.prototype.constructor"
            },
            {
                "descr": "The initial value of the @@toStringTag property is the String value \"WebAssembly.Module\".",
                "name": "Module.prototype[@@toStringTag]"
            }
        ],
        "path": "javascript/global_objects/webassembly/module/prototype",
        "syntax": "Experimental JavaScript Features preference.    52   52   Disabled in the Firefox 52 Extended Support Release (ESR).    ?   11  7.0       Server    Node.js    Basic support  8.0.0    See also",
        "type": "WebAssembly"
    },
    "WebAssembly.runtimeError": {
        "descr": "The WebAssembly.RuntimeError() constructor creates a new WebAssembly RuntimeError object — the type that is thrown whenever WebAssembly specifies a trap.",
        "name": "WebAssembly.runtimeError",
        "params": [
            {
                "descr": "Human-readable description of the error.",
                "name": "message Optional"
            },
            {
                "descr": "The name of the file containing the code that caused the exception.",
                "name": "fileName Optional"
            },
            {
                "descr": "The line number of the code that caused the exception.",
                "name": "lineNumber Optional"
            },
            {
                "descr": "Specifies the function that created an instance's prototype.",
                "name": "WebAssembly.RuntimeError.prototype.constructor"
            },
            {
                "descr": "Error message. Although ECMA-262 specifies that URIError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.",
                "name": "WebAssembly.RuntimeError.prototype.message"
            },
            {
                "descr": "Error name. Inherited from Error.",
                "name": "WebAssembly.RuntimeError.prototype.name"
            },
            {
                "descr": "Path to file that raised this error. ",
                "name": "WebAssembly.RuntimeError.prototype.fileName"
            },
            {
                "descr": "Line number in file that raised this error. ",
                "name": "WebAssembly.RuntimeError.prototype.lineNumber"
            },
            {
                "descr": "Column number in line that raised this error. ",
                "name": "WebAssembly.RuntimeError.prototype.columnNumber"
            },
            {
                "descr": "Stack trace. Inherited from Error.",
                "name": "WebAssembly.RuntimeError.prototype.stack"
            },
            {
                "descr": "Returns code that could eval to the same error. ",
                "name": "WebAssembly.RuntimeError.prototype.toSource()"
            },
            {
                "descr": "Returns a string representing the specified Error object.. ",
                "name": "WebAssembly.RuntimeError.prototype.toString()"
            }
        ],
        "path": "javascript/global_objects/webassembly/runtimeerror",
        "syntax": "new WebAssembly.RuntimeError(message, fileName, lineNumber)",
        "type": "WebAssembly"
    },
    "WebAssembly.table": {
        "descr": "The WebAssembly.Table() constructor creates a new Table object of the given size and element type.",
        "name": "WebAssembly.table",
        "params": [
            {
                "descr": "An object that can contain the following members:  element A string representing the type of value to be stored in the table. ",
                "name": "tableDescriptor"
            },
            {
                "descr": "The initial number of elements of the WebAssembly Table.",
                "name": "initial"
            },
            {
                "descr": "The maximum number of elements the WebAssembly Table is allowed to grow to.",
                "name": "maximum Optional"
            },
            {
                "descr": "Returns the function that created this object's instance. ",
                "name": "Table.prototype.constructor"
            },
            {
                "descr": "Returns the length of the table, i.e. ",
                "name": "Table.prototype.length"
            },
            {
                "descr": "Accessor function — gets the element stored at a given index.",
                "name": "Table.prototype.get()"
            },
            {
                "descr": "Increases the size of the Table instance by a specified number of elements.",
                "name": "Table.prototype.grow()"
            },
            {
                "descr": "Sets an element stored at a given index to a given value.",
                "name": "Table.prototype.set()"
            }
        ],
        "path": "javascript/global_objects/webassembly/table",
        "syntax": "var myTable = new WebAssembly.Table(tableDescriptor);",
        "type": "WebAssembly"
    },
    "WebAssembly.table.get": {
        "descr": "The get() prototype method of the WebAssembly.Table() object retrieves a function reference stored at a given index.",
        "name": "WebAssembly.table.get",
        "params": [
            {
                "descr": "The index of the function reference you want to retrieve.",
                "name": "index"
            }
        ],
        "path": "javascript/global_objects/webassembly/table/get",
        "syntax": "var funcRef = table.get(index);",
        "type": "WebAssembly"
    },
    "WebAssembly.table.grow": {
        "descr": "The grow() prototype method of the WebAssembly.Table object increases the size of the Table instance by a specified number of elements.",
        "name": "WebAssembly.table.grow",
        "params": [
            {
                "descr": "The number of elements you want to grow the table by.",
                "name": "number"
            }
        ],
        "path": "javascript/global_objects/webassembly/table/grow",
        "syntax": "table.grow(number);",
        "type": "WebAssembly"
    },
    "WebAssembly.table.length": {
        "descr": "The length prototype property of the WebAssembly.Table object returns the length of the table, i.e. the number of elements in the table.",
        "name": "WebAssembly.table.length",
        "params": [],
        "path": "javascript/global_objects/webassembly/table/length",
        "syntax": "table.length;  Examples The following example creates a new WebAssembly Table instance with an initial size of 2 and a maximum size of 10. var table = new WebAssembly.Table({ element: \"anyfunc\", initial: 2, maximum: 10 });",
        "type": "WebAssembly"
    },
    "WebAssembly.table.prototype": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebAssembly.table.prototype",
        "params": [
            {
                "descr": "Returns the function that created this object's instance. ",
                "name": "Table.prototype.constructor"
            },
            {
                "descr": "Returns the length of the table, i.e. ",
                "name": "Table.prototype.length"
            },
            {
                "descr": "Accessor function — gets a reference stored at a given index.",
                "name": "Methods  Table.prototype.get()"
            },
            {
                "descr": "Increases the size of the Table instance by a specified number of references.",
                "name": "Table.prototype.grow()"
            },
            {
                "descr": "Mutates a reference stored at a given index to a different value.",
                "name": "Table.prototype.set()"
            }
        ],
        "path": "javascript/global_objects/webassembly/table/prototype",
        "syntax": "Experimental JavaScript Features preference.    52   52   Disabled in the Firefox 52 Extended Support Release (ESR).    ?   11  7.0       Server    Node.js    Basic support  8.0.0    See also",
        "type": "WebAssembly"
    },
    "WebAssembly.table.set": {
        "descr": "The set() prototype method of the WebAssembly.Table object mutates a reference stored at a given index to a different value.",
        "name": "WebAssembly.table.set",
        "params": [
            {
                "descr": "The index of the function reference you want to mutate.",
                "name": "index"
            },
            {
                "descr": "The value you want to mutate the reference to. ",
                "name": "value"
            }
        ],
        "path": "javascript/global_objects/webassembly/table/set",
        "syntax": "table.set(index, value);",
        "type": "WebAssembly"
    },
    "WebAssembly.validate": {
        "descr": "The WebAssembly.validate() function validates a given typed array of WebAssembly binary code, returning whether the bytes form a valid wasm module (true) or not (false).",
        "name": "WebAssembly.validate",
        "params": [
            {
                "descr": "A typed array or ArrayBuffer containing WebAssembly binary code to be validated.",
                "name": "bufferSource"
            }
        ],
        "path": "javascript/global_objects/webassembly/validate",
        "syntax": "WebAssembly.validate(bufferSource);",
        "type": "WebAssembly"
    },
    "WebGL API: Matrix math for the web": {
        "descr": "While this article uses CSS3 for the ease of explanations, matrices are a core concept used by many different technologies including WebGL and shaders. This article is also available as an MDN content kit. The live examples use a collection of utility functions availabile under a global object named \"MDN\".",
        "name": "WebGL API: Matrix math for the web",
        "params": [],
        "path": "dom/webgl_api/matrix_math_for_the_web",
        "syntax": "function multiplyMatrices(matrixA, matrixB) { // Slice the second matrix up into columns var column0 = [matrixB[0], matrixB[4], matrixB[8], matrixB[12]]; var column1 = [matrixB[1], matrixB[5], matrixB[9], matrixB[13]]; var column2 = [matrixB[2], matrixB[6], matrixB[10], matrixB[14]]; var column3 = [matrixB[3], matrixB[7], matrixB[11], matrixB[15]]; // Multiply each column by the matrix var result0 = multiplyMatrixAndPoint(matrixA, column0);\n or  var result1 = multiplyMatrixAndPoint(matrixA, column1);\n or  var result2 = multiplyMatrixAndPoint(matrixA, column2);\n or  var result3 = multiplyMatrixAndPoint(matrixA, column3);\n or  // Turn the result columns back into a single matrix return [ result0[0], result1[0], result2[0], result3[0], result0[1], result1[1], result2[1], result3[1], result0[2], result1[2], result2[2], result3[2], result0[3], result1[3], result2[3], result3[3] ]; });",
        "type": "WebGL"
    },
    "WebGL API: WebGL model view projection": {
        "descr": "Note: This article is also available as an MDN content kit. It also uses a collection of utility functions available under the MDN global object.",
        "name": "WebGL API: WebGL model view projection",
        "params": [],
        "path": "dom/webgl_api/webgl_model_view_projection",
        "syntax": "WebGLBox object that will draw a box on the screen.  Note: The code for each WebGLBox example is available in this github repo and is organized by section. In addition there is a JSFiddle link at the bottom of each section.  WebGLBox Constructor The constructor looks like this: function WebGLBox() { // Setup the canvas and WebGL context this.canvas = document.getElementById('canvas');\n or  this.canvas.width = window.innerWidth; this.canvas.height = window.innerHeight; this.gl = MDN.createContext(canvas);\n or  var gl = this.gl; // Setup a WebGL program, anything part of the MDN object is defined outside of this article this.webglProgram = MDN.createWebGLProgramFromIds(gl, 'vertex-shader', 'fragment-shader');\n or  gl.useProgram(this.webglProgram);\n or  // Save the attribute and uniform locations this.positionLocation = gl.getAttribLocation(this.webglProgram, 'position');\n or  this.colorLocation = gl.getUniformLocation(this.webglProgram, 'color');\n or  // Tell WebGL to test the depth when drawing, so if a square is behind // another square it won't be drawn gl.enable(gl.DEPTH_TEST);\n or  });",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.beginQuery": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.beginQuery",
        "params": [
            {
                "descr": "A GLenum specifying the target of the query. ",
                "name": "target"
            },
            {
                "descr": "A WebGLQuery object for which to start the querying.",
                "name": "query"
            }
        ],
        "path": "dom/webgl2renderingcontext/beginquery",
        "syntax": "void gl.beginQuery(target, query);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.beginTransformFeedback": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.beginTransformFeedback",
        "params": [
            {
                "descr": "A GLenum specifying the output type of the primitives that will be recorded into the buffer objects that are bound for transform feedback. ",
                "name": "primitiveMode"
            }
        ],
        "path": "dom/webgl2renderingcontext/begintransformfeedback",
        "syntax": "void gl.beginTransformFeedback(primitiveMode);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.bindBufferBase": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.bindBufferBase",
        "params": [
            {
                "descr": "A Glenum specifying the target for the bind operation. ",
                "name": "target"
            },
            {
                "descr": "A GLuint specifying the index of the target.",
                "name": "index"
            },
            {
                "descr": "A WebGLBuffer which to bind to the binding point (target).",
                "name": "buffer"
            }
        ],
        "path": "dom/webgl2renderingcontext/bindbufferbase",
        "syntax": "void gl.bindBufferBase(target, index, buffer);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.bindBufferRange": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.bindBufferRange",
        "params": [
            {
                "descr": "A Glenum specifying the target for the bind operation. ",
                "name": "target"
            },
            {
                "descr": "A GLuint specifying the index of the target.",
                "name": "index"
            },
            {
                "descr": "A WebGLBuffer which to bind to the binding point (target).",
                "name": "buffer"
            },
            {
                "descr": "A GLintptr specifying the starting offset.",
                "name": "offset"
            },
            {
                "descr": "A GLsizeiptr specifying the amount of data that can be read from the buffer.",
                "name": "size"
            }
        ],
        "path": "dom/webgl2renderingcontext/bindbufferrange",
        "syntax": "void gl.bindBufferRange(target, index, buffer, offset, size);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.bindSampler": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.bindSampler",
        "params": [
            {
                "descr": "A GLuint specifying the index of the texture unit to which to bind the sampler to.",
                "name": "unit"
            },
            {
                "descr": "A WebGLSampler object to bind.",
                "name": "sampler"
            }
        ],
        "path": "dom/webgl2renderingcontext/bindsampler",
        "syntax": "void gl.bindSampler(unit, sampler);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.bindTransformFeedback": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.bindTransformFeedback",
        "params": [
            {
                "descr": "A GLenum specifying the target (binding point). ",
                "name": "target"
            },
            {
                "descr": "A WebGLTransformFeedback object to bind.",
                "name": "transformFeedback"
            }
        ],
        "path": "dom/webgl2renderingcontext/bindtransformfeedback",
        "syntax": "void gl.bindTransformFeedback(target, transformFeedback);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.bindVertexArray": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.bindVertexArray",
        "params": [
            {
                "descr": "A WebGLVertexArrayObject (VAO) object to bind.",
                "name": "vertexArray"
            }
        ],
        "path": "dom/webgl2renderingcontext/bindvertexarray",
        "syntax": "void gl.bindVertexArray(vertexArray);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.blitFramebuffer": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.blitFramebuffer",
        "params": [
            {
                "descr": "A GLint specifying the bounds of the source rectangle.",
                "name": "srcX0, srcY0, srcX1, srcY1"
            },
            {
                "descr": "A GLint specifying the bounds of the destination rectangle.",
                "name": "dstX0, dstY0, dstX1, dstY1"
            },
            {
                "descr": "A GLbitfield specifying a bitwise OR mask indicating which buffers are to be copied. ",
                "name": "mask"
            },
            {
                "descr": "A GLenum specifying the interpolation to be applied if the image is stretched. ",
                "name": "filter"
            }
        ],
        "path": "dom/webgl2renderingcontext/blitframebuffer",
        "syntax": "void gl.blitFramebuffer(srcX0, srcY0, srcX1, srcY1,  dstX0, dstY0, dstX1, dstY1, mask, filter);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.clearBuffer": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.clearBuffer",
        "params": [
            {
                "descr": "A GLenum specifying the buffer to clear. ",
                "name": "buffer"
            },
            {
                "descr": "A GLint specifying the draw buffer to clear.",
                "name": "drawBuffer"
            },
            {
                "descr": "An Array of GLint, GLuint or GLfloat values or an Int32Array, Uint32Array or Float32Array specifying the values to clear to.",
                "name": "values"
            },
            {
                "descr": "A GLfloat specifying the value to clear a depth render buffer to.",
                "name": "depth"
            },
            {
                "descr": "A GLint specifying the value to clear the stencil render buffer to.",
                "name": "stencil"
            }
        ],
        "path": "dom/webgl2renderingcontext/clearbuffer",
        "syntax": "void gl.clearBufferfv(buffer, drawbuffer, values, optional srcOffset);\n or  void gl.clearBufferiv(buffer, drawbuffer, values, optional srcOffset);\n or  void gl.clearBufferuiv(buffer, drawbuffer, values, optional srcOffset);\n or  void gl.clearBufferfi(buffer, drawbuffer, depth, stencil);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.clientWaitSync": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.clientWaitSync",
        "params": [
            {
                "descr": "A WebGLSync object on which to wait on.",
                "name": "sync"
            },
            {
                "descr": "A GLbitfield specifying a bitwise combination of flags controlling the flushing behavior. ",
                "name": "flags"
            },
            {
                "descr": "A GLint64 specifying a timeout (in nanoseconds) for which to wait for the sync object to become signaled. ",
                "name": "timeout"
            }
        ],
        "path": "dom/webgl2renderingcontext/clientwaitsync",
        "syntax": "GLenum gl.clientWaitSync(sync, flags, timeout);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.compressedTexSubImage3D": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.compressedTexSubImage3D",
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target) of the active texture. ",
                "name": "target"
            },
            {
                "descr": "A GLint specifying the level of detail. ",
                "name": "level"
            },
            {
                "descr": "A GLint specifying the x offset within the compressed texture image.",
                "name": "xoffset"
            },
            {
                "descr": "A GLint specifying the y offset within the compressed texture image.",
                "name": "yoffset"
            },
            {
                "descr": "A GLint specifying the z offset within the compressed texture image.",
                "name": "zoffset"
            },
            {
                "descr": "A GLsizei specifying the width of the texture.",
                "name": "width"
            },
            {
                "descr": "A GLsizei specifying the height of the texture.",
                "name": "height"
            },
            {
                "descr": "A GLsizei specifying the depth of the texture.",
                "name": "depth"
            },
            {
                "descr": "A GLenum specifying the compressed image format. ",
                "name": "format"
            },
            {
                "descr": "A GLint specifying the number of bytes to read from the buffer bound to gl.PIXEL_UNPACK_BUFFER.",
                "name": "imageSize"
            },
            {
                "descr": "A GLint specifying the offset in bytes from which to read from the buffer bound to gl.PIXEL_UNPACK_BUFFER.",
                "name": "offset"
            },
            {
                "descr": "An ArrayBufferView that be used as a data store for the compressed image data in memory.",
                "name": "srcData"
            }
        ],
        "path": "dom/webgl2renderingcontext/compressedtexsubimage3d",
        "syntax": "// read from the buffer bound to gl.PIXEL_UNPACK_BUFFER void gl.compressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, offset);\n or  void gl.compressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, ArrayBufferView srcData, optional srcOffset, optional srcLengthOverride);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.copyBufferSubData": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.copyBufferSubData",
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target) from whose data store should be read or written. ",
                "name": "readTarget writeTarget"
            },
            {
                "descr": "A GLintptr specifying the byte offset from which to start reading from or writing to the buffer.",
                "name": "readOffset writeOffset"
            },
            {
                "descr": "A GLsizei in bytes specifying the size of the data to be copied from readTarget to writeTarget.",
                "name": "size"
            }
        ],
        "path": "dom/webgl2renderingcontext/copybuffersubdata",
        "syntax": "void gl.copyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.copyTexSubImage3D": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.copyTexSubImage3D",
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target) of the active texture. ",
                "name": "target"
            },
            {
                "descr": "A GLint specifying the level of detail. ",
                "name": "level"
            },
            {
                "descr": "A GLint specifying the x offset within the texture image.",
                "name": "xoffset"
            },
            {
                "descr": "A GLint specifying the y offset within the texture image.",
                "name": "yoffset"
            },
            {
                "descr": "A GLint specifying the z offset within the texture image.",
                "name": "zoffset"
            },
            {
                "descr": "A GLint specifying the x coordinate of the lower left corner where to start copying.",
                "name": "x"
            },
            {
                "descr": "A GLint specifying the y coordinate of the lower left corner where to start copying.",
                "name": "y"
            },
            {
                "descr": "A GLsizei specifying the width of the texture.",
                "name": "width"
            },
            {
                "descr": "A GLsizei specifying the height of the texture.",
                "name": "height"
            }
        ],
        "path": "dom/webgl2renderingcontext/copytexsubimage3d",
        "syntax": "void gl.copyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.createQuery": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.createQuery",
        "params": [],
        "path": "dom/webgl2renderingcontext/createquery",
        "syntax": "WebGLQuery gl.createQuery();",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.createSampler": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.createSampler",
        "params": [],
        "path": "dom/webgl2renderingcontext/createsampler",
        "syntax": "WebGLSampler gl.createSampler();",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.createTransformFeedback": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.createTransformFeedback",
        "params": [],
        "path": "dom/webgl2renderingcontext/createtransformfeedback",
        "syntax": "WebGLTransformFeedback gl.createTransformFeedback();",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.createVertexArray": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.createVertexArray",
        "params": [],
        "path": "dom/webgl2renderingcontext/createvertexarray",
        "syntax": "WebGLVertexArrayObject gl.createVertexArray();",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.deleteQuery": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.deleteQuery",
        "params": [
            {
                "descr": "A WebGLQuery object to delete.",
                "name": "query"
            }
        ],
        "path": "dom/webgl2renderingcontext/deletequery",
        "syntax": "void gl.deleteQuery(query);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.deleteSampler": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.deleteSampler",
        "params": [
            {
                "descr": "A WebGLSampler object to delete.",
                "name": "sampler"
            }
        ],
        "path": "dom/webgl2renderingcontext/deletesampler",
        "syntax": "void gl.deleteSampler(sampler);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.deleteSync": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.deleteSync",
        "params": [
            {
                "descr": "A WebGLSync object to delete.",
                "name": "sync"
            }
        ],
        "path": "dom/webgl2renderingcontext/deletesync",
        "syntax": "void gl.deleteSync(sync);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.deleteTransformFeedback": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.deleteTransformFeedback",
        "params": [
            {
                "descr": "A WebGLTransformFeedback object to delete.",
                "name": "transformFeedback"
            }
        ],
        "path": "dom/webgl2renderingcontext/deletetransformfeedback",
        "syntax": "void gl.deleteTransformFeedback(transformFeedback);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.deleteVertexArray": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.deleteVertexArray",
        "params": [
            {
                "descr": "A WebGLVertexArrayObject (VAO) object to delete.",
                "name": "vertexArray"
            }
        ],
        "path": "dom/webgl2renderingcontext/deletevertexarray",
        "syntax": "void gl.deleteVertexArray(vertexArray);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.drawArraysInstanced": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.drawArraysInstanced",
        "params": [
            {
                "descr": "A GLenum specifying the type primitive to render. ",
                "name": "mode"
            },
            {
                "descr": "A GLint specifying the starting index in the array of vector points.",
                "name": "first"
            },
            {
                "descr": "A GLsizei specifying the number of indices to be rendered.",
                "name": "count"
            },
            {
                "descr": "A GLsizei specifying the number of instances of the range of elements to execute.",
                "name": "instanceCount"
            }
        ],
        "path": "dom/webgl2renderingcontext/drawarraysinstanced",
        "syntax": "void gl.drawArraysInstanced(mode, first, count, instanceCount);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.drawBuffers": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.drawBuffers",
        "params": [
            {
                "descr": "An Array of GLenum specifying the buffers into which fragment colors will be written. ",
                "name": "buffers"
            }
        ],
        "path": "dom/webgl2renderingcontext/drawbuffers",
        "syntax": "void gl.drawBuffers(buffers);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.drawElementsInstanced": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.drawElementsInstanced",
        "params": [
            {
                "descr": "A GLenum specifying the type primitive to render. ",
                "name": "mode"
            },
            {
                "descr": "A GLsizei specifying the number of elements to be rendered.",
                "name": "count"
            },
            {
                "descr": "A GLenum specifying the type of the values in the element array buffer. ",
                "name": "type"
            },
            {
                "descr": "A GLintptr specifying an offset in the element array buffer. ",
                "name": "offset"
            },
            {
                "descr": "A GLsizei specifying the number of instances of the set of elements to execute.",
                "name": "instanceCount"
            }
        ],
        "path": "dom/webgl2renderingcontext/drawelementsinstanced",
        "syntax": "void gl.drawElementsInstanced(mode, count, type, offset, instanceCount);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.drawRangeElements": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.drawRangeElements",
        "params": [
            {
                "descr": "A GLenum specifying the type primitive to render. ",
                "name": "mode"
            },
            {
                "descr": "A GLuint specifying the minimum array index contained in offset.",
                "name": "start"
            },
            {
                "descr": "A GLuint specifying the maximum array index contained in offset.",
                "name": "end"
            },
            {
                "descr": "A GLsizei specifying the number of elements to be rendered.",
                "name": "count"
            },
            {
                "descr": "A GLenum specifying the type of the values in the element array buffer. ",
                "name": "type"
            },
            {
                "descr": "A GLintptr specifying an offset in the element array buffer. ",
                "name": "offset"
            }
        ],
        "path": "dom/webgl2renderingcontext/drawrangeelements",
        "syntax": "void gl.drawRangeElements(mode, start, end, count, type, offset);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.endQuery": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.endQuery",
        "params": [
            {
                "descr": "A GLenum specifying the target of the query. ",
                "name": "target"
            }
        ],
        "path": "dom/webgl2renderingcontext/endquery",
        "syntax": "void gl.endQuery(target);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.endTransformFeedback": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.endTransformFeedback",
        "params": [],
        "path": "dom/webgl2renderingcontext/endtransformfeedback",
        "syntax": "void gl.endTransformFeedback();",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.fenceSync": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.fenceSync",
        "params": [
            {
                "descr": "A GLenum specifying the condition that must be met to set the sync object's state to signaled. ",
                "name": "condition"
            },
            {
                "descr": "A GLbitfield specifying a bitwise combination of flags controlling the behavior of the sync object. ",
                "name": "flags"
            }
        ],
        "path": "dom/webgl2renderingcontext/fencesync",
        "syntax": "WebGLSync gl.fenceSync(condition, flags);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.framebufferTextureLayer": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.framebufferTextureLayer",
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target). ",
                "name": "target"
            },
            {
                "descr": "A GLenum specifying the attachment point for the texture. ",
                "name": "attachment"
            },
            {
                "descr": "A WebGLTexture object whose image to attach.",
                "name": "texture"
            },
            {
                "descr": "A GLint specifying the mipmap level of the texture image to attach.",
                "name": "level"
            },
            {
                "descr": "A GLint specifying the layer of the texture image to attach.",
                "name": "layer"
            }
        ],
        "path": "dom/webgl2renderingcontext/framebuffertexturelayer",
        "syntax": "void gl.framebufferTextureLayer(target, attachment, texture, level, layer);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.getActiveUniformBlockName": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.getActiveUniformBlockName",
        "params": [
            {
                "descr": "A WebGLProgram containing the uniform block.",
                "name": "program"
            },
            {
                "descr": "A GLuint specifying the index of the uniform block to whose name to retrieve.",
                "name": "uniformBlockIndex"
            }
        ],
        "path": "dom/webgl2renderingcontext/getactiveuniformblockname",
        "syntax": "DOMString gl.getActiveUniformBlockName(program, uniformBlockIndex);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.getActiveUniformBlockParameter": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.getActiveUniformBlockParameter",
        "params": [
            {
                "descr": "A WebGLProgram containing the active uniform block.",
                "name": "program"
            },
            {
                "descr": "A GLuint specifying the index of the active uniform block within the program.",
                "name": "uniformBlockIndex"
            },
            {
                "descr": "A GLenum specifying which information to query. ",
                "name": "pname"
            }
        ],
        "path": "dom/webgl2renderingcontext/getactiveuniformblockparameter",
        "syntax": "any gl.getActiveUniformBlockParameter(program, uniformBlockIndex, pname);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.getActiveUniforms": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.getActiveUniforms",
        "params": [
            {
                "descr": "A WebGLProgram containing the active uniforms.",
                "name": "program"
            },
            {
                "descr": "An Array of GLuint specifying the indices of the active uniforms to query.",
                "name": "uniformIndices"
            },
            {
                "descr": "A GLenum specifying which information to query. ",
                "name": "pname"
            }
        ],
        "path": "dom/webgl2renderingcontext/getactiveuniforms",
        "syntax": "any gl.getActiveUniforms(program, uniformIndices, pname);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.getBufferSubData": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.getBufferSubData",
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target). ",
                "name": "target"
            },
            {
                "descr": "A GLintptr specifying the byte offset from which to start reading from the buffer.",
                "name": "srcByteOffset"
            },
            {
                "descr": "An ArrayBuffer or SharedArrayBuffer to which to write the buffer data.",
                "name": "dstData"
            },
            {
                "descr": "A GLuint specifying the element index offset where to start reading the buffer.",
                "name": "srcOffset Optional"
            },
            {
                "descr": "A GLuint defaulting to 0.",
                "name": "length Optional"
            }
        ],
        "path": "dom/webgl2renderingcontext/getbuffersubdata",
        "syntax": "void gl.getBufferSubData(target, srcByteOffset, ArrayBufferView dstData, optional dstOffset, optional length);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.getFragDataLocation": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.getFragDataLocation",
        "params": [
            {
                "descr": "A WebGLProgram to query.",
                "name": "program"
            },
            {
                "descr": "A DOMString specifying the name of the user-defined varying out variable.",
                "name": "name"
            }
        ],
        "path": "dom/webgl2renderingcontext/getfragdatalocation",
        "syntax": "GLint gl.getFragDataLocation(program, name);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.getIndexedParameter": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.getIndexedParameter",
        "params": [
            {
                "descr": "A Glenum specifying the target for which to return information. ",
                "name": "target"
            },
            {
                "descr": "A GLuint specifying the index of the target that is queried.",
                "name": "index"
            }
        ],
        "path": "dom/webgl2renderingcontext/getindexedparameter",
        "syntax": "any gl.getIndexedParameter(target, index);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.getInternalformatParameter": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.getInternalformatParameter",
        "params": [
            {
                "descr": "A Glenum specifying the target renderbuffer object. ",
                "name": "target"
            },
            {
                "descr": "A GLenum specifying the internal format about which to retrieve information (must be a color-renderable, depth-renderable or stencil-renderable format).",
                "name": "internalformat"
            },
            {
                "descr": "A GLenum specifying the type of information to query. ",
                "name": "pname"
            }
        ],
        "path": "dom/webgl2renderingcontext/getinternalformatparameter",
        "syntax": "any gl.getInternalformatParameter(target, internalformat, pname);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.getQuery": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.getQuery",
        "params": [
            {
                "descr": "A GLenum specifying the target of the query. ",
                "name": "target"
            },
            {
                "descr": "A GLenum specifying the query object target. ",
                "name": "pname"
            }
        ],
        "path": "dom/webgl2renderingcontext/getquery",
        "syntax": "WebGLQuery gl.getQuery(target, pname);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.getQueryParameter": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.getQueryParameter",
        "params": [
            {
                "descr": "A WebGLQuery object.",
                "name": "query"
            },
            {
                "descr": "A GLenum specifying which information to return. ",
                "name": "pname"
            }
        ],
        "path": "dom/webgl2renderingcontext/getqueryparameter",
        "syntax": "any gl.getQueryParameter(query, pname);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.getSamplerParameter": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.getSamplerParameter",
        "params": [
            {
                "descr": "A WebGLSampler object.",
                "name": "sampler"
            },
            {
                "descr": "A GLenum specifying which information to return. ",
                "name": "pname"
            }
        ],
        "path": "dom/webgl2renderingcontext/getsamplerparameter",
        "syntax": "any gl.getSamplerParameter(sampler, pname);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.getSyncParameter": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.getSyncParameter",
        "params": [
            {
                "descr": "A WebGLSync object.",
                "name": "sync"
            },
            {
                "descr": "A GLenum specifying which information to return. ",
                "name": "pname"
            }
        ],
        "path": "dom/webgl2renderingcontext/getsyncparameter",
        "syntax": "any gl.getSyncParameter(sync, pname);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.getTransformFeedbackVarying": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.getTransformFeedbackVarying",
        "params": [
            {
                "descr": "A WebGLProgram.",
                "name": "program"
            },
            {
                "descr": "A GLuint specifying the index of the varying variable whose information to retrieve.",
                "name": "index"
            }
        ],
        "path": "dom/webgl2renderingcontext/gettransformfeedbackvarying",
        "syntax": "WebGLActiveInfo gl.getTransformFeedbackVarying(program, index);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.getUniformBlockIndex": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.getUniformBlockIndex",
        "params": [
            {
                "descr": "A WebGLProgram containing the uniform block.",
                "name": "program"
            },
            {
                "descr": "A DOMString specifying the name of the uniform block to whose index to retrieve.",
                "name": "uniformName"
            }
        ],
        "path": "dom/webgl2renderingcontext/getuniformblockindex",
        "syntax": "GLuint gl.getUniformBlockIndex(program, uniformBlockName);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.getUniformIndices": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.getUniformIndices",
        "params": [
            {
                "descr": "A WebGLProgram containing uniforms whose indices to query.",
                "name": "program"
            },
            {
                "descr": "An Array of DOMString specifying the names of the uniforms to query.",
                "name": "uniformNames"
            }
        ],
        "path": "dom/webgl2renderingcontext/getuniformindices",
        "syntax": "sequence<GLuint> gl.getUniformIndices(program, uniformNames);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.invalidateFramebuffer": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.invalidateFramebuffer",
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target). ",
                "name": "target"
            },
            {
                "descr": "An Array of GLenum specifying the attachment points to invalidate. ",
                "name": "attachments"
            }
        ],
        "path": "dom/webgl2renderingcontext/invalidateframebuffer",
        "syntax": "void gl.invalidateFramebuffer(target, attachments);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.invalidateSubFramebuffer": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.invalidateSubFramebuffer",
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target). ",
                "name": "target"
            },
            {
                "descr": "An Array of GLenum specifying the attachment points to invalidate. ",
                "name": "attachments"
            },
            {
                "descr": "A GLint specifying the left origin of the pixel rectangle to invalidate.",
                "name": "x"
            },
            {
                "descr": "A GLint specifying the bottom origin of the pixel rectangle to invalidate.",
                "name": "y"
            },
            {
                "descr": "A GLsizei specifying the width of the pixel rectangle to invalidate.",
                "name": "width"
            },
            {
                "descr": "A GLsizei specifying the height of the pixel rectangle to invalidate.",
                "name": "height"
            }
        ],
        "path": "dom/webgl2renderingcontext/invalidatesubframebuffer",
        "syntax": "void gl.invalidateSubFramebuffer(target, attachments, x, y, width, height);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.isQuery": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.isQuery",
        "params": [
            {
                "descr": "A WebGLQuery object to test.",
                "name": "query"
            }
        ],
        "path": "dom/webgl2renderingcontext/isquery",
        "syntax": "GLBoolean gl.isQuery(query);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.isSampler": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.isSampler",
        "params": [
            {
                "descr": "A WebGLSampler object to test.",
                "name": "sampler"
            }
        ],
        "path": "dom/webgl2renderingcontext/issampler",
        "syntax": "GLboolean gl.isSampler(sampler);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.isSync": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.isSync",
        "params": [
            {
                "descr": "A WebGLSync object to test.",
                "name": "sync"
            }
        ],
        "path": "dom/webgl2renderingcontext/issync",
        "syntax": "GLboolean gl.isSync(sync);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.isTransformFeedback": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.isTransformFeedback",
        "params": [
            {
                "descr": "A WebGLTransformFeedback object to test.",
                "name": "transformFeedback"
            }
        ],
        "path": "dom/webgl2renderingcontext/istransformfeedback",
        "syntax": "GLboolean gl.isTransformFeedback(transformFeedback);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.isVertexArray": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.isVertexArray",
        "params": [
            {
                "descr": "A WebGLVertexArrayObject (VAO) object to test.",
                "name": "vertexArray"
            }
        ],
        "path": "dom/webgl2renderingcontext/isvertexarray",
        "syntax": "GLBoolean gl.isVertexArray(vertexArray);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.pauseTransformFeedback": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.pauseTransformFeedback",
        "params": [],
        "path": "dom/webgl2renderingcontext/pausetransformfeedback",
        "syntax": "void gl.pauseTransformFeedback();",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.readBuffer": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.readBuffer",
        "params": [
            {
                "descr": "A GLenum specifying a color buffer. ",
                "name": "src"
            }
        ],
        "path": "dom/webgl2renderingcontext/readbuffer",
        "syntax": "void gl.readBuffer(src);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.renderbufferStorageMultisample": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.renderbufferStorageMultisample",
        "params": [
            {
                "descr": "A GLenum specifying the target renderbuffer object. ",
                "name": "target"
            },
            {
                "descr": "A GLsizei specifying the number of samples to be used for the renderbuffer storage.",
                "name": "samples"
            },
            {
                "descr": "A GLenum specifying the internal format of the renderbuffer. ",
                "name": "internalFormat"
            },
            {
                "descr": "A GLsizei specifying the width of the renderbuffer in pixels.",
                "name": "width"
            },
            {
                "descr": "A GLsizei specifying the height of the renderbuffer in pixels.",
                "name": "height"
            }
        ],
        "path": "dom/webgl2renderingcontext/renderbufferstoragemultisample",
        "syntax": "void gl.renderbufferStorageMultisample(target, samples, internalFormat, width, height);",
        "type": "Storage"
    },
    "WebGL2RenderingContext.resumeTransformFeedback": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.resumeTransformFeedback",
        "params": [],
        "path": "dom/webgl2renderingcontext/resumetransformfeedback",
        "syntax": "void gl.resumeTransformFeedback();",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.samplerParameter": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.samplerParameter",
        "params": [
            {
                "descr": "A WebGLSampler object.",
                "name": "sampler"
            },
            {
                "descr": "A GLenum specifying which parameter to set. ",
                "name": "pname"
            },
            {
                "descr": "A GLint (samplerParameteri) or a GLfloat (samplerParameterf) specifying a value for pname.",
                "name": "param"
            }
        ],
        "path": "dom/webgl2renderingcontext/samplerparameter",
        "syntax": "void gl.samplerParameteri(sampler, pname, param);\n or  void gl.samplerParameterf(sampler, pname, param);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.texImage3D": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.texImage3D",
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target) of the active texture. ",
                "name": "target"
            },
            {
                "descr": "A GLint specifying the level of detail. ",
                "name": "level"
            },
            {
                "descr": "A GLint specifying the color components in the texture. ",
                "name": "internalformat"
            },
            {
                "descr": "A GLsizei specifying the width of the texture.",
                "name": "width"
            },
            {
                "descr": "A GLsizei specifying the height of the texture.",
                "name": "height"
            },
            {
                "descr": "A GLsizei specifying the depth of the texture.",
                "name": "depth"
            },
            {
                "descr": "A GLint specifying the width of the border. ",
                "name": "border"
            },
            {
                "descr": "A GLenum specifying the format of the texel data. ",
                "name": "format"
            },
            {
                "descr": "A GLenum specifying the data type of the texel data. ",
                "name": "type"
            },
            {
                "descr": "One of the following objects can be used as a pixel source for the texture:   ArrayBufferView,  ImageBitmap,  ImageData,  HTMLImageElement,  HTMLCanvasElement,  HTMLVideoElement.",
                "name": "source"
            },
            {
                "descr": "A GLintptr byte offset into the WebGLBuffer's data store. ",
                "name": "offset"
            }
        ],
        "path": "dom/webgl2renderingcontext/teximage3d",
        "syntax": "void gl.texImage3D(target, level, internalformat, width, height, depth, border, format, type, GLintptr offset);\n or  void gl.texImage3D(target, level, internalformat, width, height, depth, border, format, type, HTMLCanvasElement source);\n or  void gl.texImage3D(target, level, internalformat, width, height, depth, border, format, type, HTMLImageElement source);\n or  void gl.texImage3D(target, level, internalformat, width, height, depth, border, format, type, HTMLVideoElement source);\n or  void gl.texImage3D(target, level, internalformat, width, height, depth, border, format, type, ImageBitmap source);\n or  void gl.texImage3D(target, level, internalformat, width, height, depth, border, format, type, ImageData source);\n or  void gl.texImage3D(target, level, internalformat, width, height, depth, border, format, type, ArrayBufferView? srcData);\n or  void gl.texImage3D(target, level, internalformat, width, height, depth, border, format, type, ArrayBufferView srcData, srcOffset);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.texStorage2D": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.texStorage2D",
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target) of the active texture. ",
                "name": "target"
            },
            {
                "descr": "A GLint specifying the number of texture levels.",
                "name": "level"
            },
            {
                "descr": "A GLenum specifying the texture store format. ",
                "name": "internalformat"
            },
            {
                "descr": "A GLsizei specifying the width of the texture.",
                "name": "width"
            },
            {
                "descr": "A GLsizei specifying the height of the texture.",
                "name": "height"
            }
        ],
        "path": "dom/webgl2renderingcontext/texstorage2d",
        "syntax": "void gl.texStorage2D(target, levels, internalformat, width, height);",
        "type": "Storage"
    },
    "WebGL2RenderingContext.texStorage3D": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.texStorage3D",
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target) of the active texture. ",
                "name": "target"
            },
            {
                "descr": "A GLint specifying the number of texture levels.",
                "name": "level"
            },
            {
                "descr": "A GLenum specifying the texture store format. ",
                "name": "internalformat"
            },
            {
                "descr": "A GLsizei specifying the width of the texture.",
                "name": "width"
            },
            {
                "descr": "A GLsizei specifying the height of the texture.",
                "name": "height"
            },
            {
                "descr": "A GLsizei specifying the depth of the texture.",
                "name": "depth"
            }
        ],
        "path": "dom/webgl2renderingcontext/texstorage3d",
        "syntax": "void gl.texStorage3D(target, levels, internalformat, width, height, depth);",
        "type": "Storage"
    },
    "WebGL2RenderingContext.texSubImage3D": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.texSubImage3D",
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target) of the active texture. ",
                "name": "target"
            },
            {
                "descr": "A GLint specifying the level of detail. ",
                "name": "level"
            },
            {
                "descr": "A GLint specifying the x offset within the texture image.",
                "name": "xoffset"
            },
            {
                "descr": "A GLint specifying the y offset within the texture image.",
                "name": "yoffset"
            },
            {
                "descr": "A GLint specifying the z offset within the texture image.",
                "name": "zoffset"
            },
            {
                "descr": "A GLsizei specifying the width of the texture.",
                "name": "width"
            },
            {
                "descr": "A GLsizei specifying the height of the texture.",
                "name": "height"
            },
            {
                "descr": "A GLsizei specifying the depth of the texture.",
                "name": "depth"
            },
            {
                "descr": "A GLenum specifying the format of the texel data. ",
                "name": "format"
            },
            {
                "descr": "A GLenum specifying the data type of the texel data. ",
                "name": "type"
            },
            {
                "descr": "One of the following objects can be used as a pixel source for the texture:   ArrayBufferView,  A Uint8Array must be used if type is gl.UNSIGNED_BYTE. ",
                "name": "pixels"
            },
            {
                "descr": "A GLintptr byte offset into the WebGLBuffer's data store. ",
                "name": "offset"
            }
        ],
        "path": "dom/webgl2renderingcontext/texsubimage3d",
        "syntax": "void gl.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ArrayBufferView? srcData, optional srcOffset);\n or  void gl.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ImageBitmap? pixels);\n or  void gl.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ImageData? pixels);\n or  void gl.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, HTMLImageElement? pixels);\n or  void gl.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, HTMLCanvasElement? pixels);\n or  void gl.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, HTMLVideoElement? pixels);\n or  void gl.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, GLintptr offset);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.transformFeedbackVaryings": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.transformFeedbackVaryings",
        "params": [
            {
                "descr": "A WebGLProgram.",
                "name": "program"
            },
            {
                "descr": "An Array of DOMString specifying the the names of the varying variables to use.",
                "name": "varyings"
            },
            {
                "descr": "A GLenum specifying the mode to use when capturing the varying variables. ",
                "name": "bufferMode"
            }
        ],
        "path": "dom/webgl2renderingcontext/transformfeedbackvaryings",
        "syntax": "void gl.transformFeedbackVaryings(program, varyings, bufferMode);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.uniform": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.uniform",
        "params": [
            {
                "descr": "A WebGLUniformLocation object containing the location of the uniform attribute to modify.",
                "name": "location"
            },
            {
                "descr": "A new value to be used for the uniform variable. ",
                "name": "value, v0, v1, v2, v3"
            }
        ],
        "path": "dom/webgl2renderingcontext/uniform",
        "syntax": "uniform[1234](u?i|f)v?",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.uniformBlockBinding": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.uniformBlockBinding",
        "params": [
            {
                "descr": "A WebGLProgram containing the active uniform block whose binding to assign.",
                "name": "program"
            },
            {
                "descr": "A GLuint specifying the index of the active uniform block within the program.",
                "name": "uniformBlockIndex"
            },
            {
                "descr": "A GLuint specifying the binding point to which to bind the uniform block.",
                "name": "uniformBlockBinding"
            }
        ],
        "path": "dom/webgl2renderingcontext/uniformblockbinding",
        "syntax": "void gl.uniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.uniformMatrix": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.uniformMatrix",
        "params": [
            {
                "descr": "A WebGLUniformLocation object containing the location of the uniform attribute to modify.",
                "name": "location"
            },
            {
                "descr": "A GLboolean specifying whether to transpose the matrix. ",
                "name": "transpose"
            },
            {
                "descr": "A Float32Array of float values.",
                "name": "data"
            }
        ],
        "path": "dom/webgl2renderingcontext/uniformmatrix",
        "syntax": "void gl.uniformMatrix2fv(location, transpose, data, optional srcOffset, optional srcLength);\n or  void gl.uniformMatrix3x2fv(location, transpose, data, optional srcOffset, optional srcLength);\n or  void gl.uniformMatrix4x2fv(location, transpose, data, optional srcOffset, optional srcLength);\n or  void gl.uniformMatrix2x3fv(location, transpose, data, optional srcOffset, optional srcLength);\n or  void gl.uniformMatrix3fv(location, transpose, data, optional srcOffset, optional srcLength);\n or  void gl.uniformMatrix4x3fv(location, transpose, data, optional srcOffset, optional srcLength);\n or  void gl.uniformMatrix2x4fv(location, transpose, data, optional srcOffset, optional srcLength);\n or  void gl.uniformMatrix3x4fv(location, transpose, data, optional srcOffset, optional srcLength);\n or  void gl.uniformMatrix4fv(location, transpose, data, optional srcOffset, optional srcLength);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.vertexAttribDivisor": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.vertexAttribDivisor",
        "params": [
            {
                "descr": "A GLuint specifying the index of the generic vertex attributes.",
                "name": "index"
            },
            {
                "descr": "A GLuint specifying the number of instances that will pass between updates of the generic attribute.",
                "name": "divisor"
            }
        ],
        "path": "dom/webgl2renderingcontext/vertexattribdivisor",
        "syntax": "void gl.vertexAttribDivisor(index, divisor);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.vertexAttribI": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.vertexAttribI",
        "params": [
            {
                "descr": "A GLuint specifying the position of the vertex attribute to be modified.",
                "name": "index"
            },
            {
                "descr": "An integer Number for the vertex attribute value.",
                "name": "v0, v1, v2, v3"
            },
            {
                "descr": "A Uint32Array/Int32Array or sequences of GLuint/ GLint for integer vector vertex attribute values.",
                "name": "value"
            }
        ],
        "path": "dom/webgl2renderingcontext/vertexattribi",
        "syntax": "void gl.vertexAttribI4i(index, v0, v1, v2, v3);\n or  void gl.vertexAttribI4ui(index, v0, v1, v2, v3);\n or  void gl.vertexAttribI4iv(index, value);\n or  void gl.vertexAttribI4uiv(index, value);",
        "type": "WebGL"
    },
    "WebGL2RenderingContext.vertexAttribIPointer": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.vertexAttribIPointer",
        "params": [
            {
                "descr": "A GLuint specifying the index of the vertex attribute that is to be modified.",
                "name": "index"
            },
            {
                "descr": "A GLint specifying the number of components per vertex attribute. ",
                "name": "size"
            },
            {
                "descr": "A GLenum specifying the data type of each component in the array. ",
                "name": "type"
            },
            {
                "descr": "A GLsizei specifying the offset in bytes between the beginning of consecutive vertex attributes.",
                "name": "stride"
            },
            {
                "descr": "A GLintptr specifying an offset in bytes of the first component in the vertex attribute array. ",
                "name": "offset"
            }
        ],
        "path": "dom/webgl2renderingcontext/vertexattribipointer",
        "syntax": "void gl.vertexAttribIPointer(index, size, type, stride, offset);",
        "type": "Pointer Events"
    },
    "WebGL2RenderingContext.waitSync": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGL2RenderingContext.waitSync",
        "params": [
            {
                "descr": "A WebGLSync object on which to wait on.",
                "name": "sync"
            },
            {
                "descr": "A GLbitfield specifying a bitwise combination of flags controlling the flushing behavior. ",
                "name": "flags"
            },
            {
                "descr": "A GLint64 specifying a timeout the server should wait before continuing. ",
                "name": "timeout"
            }
        ],
        "path": "dom/webgl2renderingcontext/waitsync",
        "syntax": "void gl.waitSync(sync, flags, timeout);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.activeTexture": {
        "descr": "The WebGLRenderingContext.activeTexture() method of the WebGL API specifies which texture unit to make active.",
        "name": "WebGLRenderingContext.activeTexture",
        "params": [
            {
                "descr": "The texture unit to make active. ",
                "name": "texture"
            }
        ],
        "path": "dom/webglrenderingcontext/activetexture",
        "syntax": "void gl.activeTexture(texture);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.attachShader": {
        "descr": "The WebGLRenderingContext.attachShader() method of the WebGL API attaches either a fragment or vertex WebGLShader to a WebGLProgram.",
        "name": "WebGLRenderingContext.attachShader",
        "params": [
            {
                "descr": "A WebGLProgram.",
                "name": "program"
            },
            {
                "descr": "A fragment or vertex WebGLShader.",
                "name": "shader"
            }
        ],
        "path": "dom/webglrenderingcontext/attachshader",
        "syntax": "void gl.attachShader(program, shader);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.bindAttribLocation": {
        "descr": "The WebGLRenderingContext.bindAttribLocation() method of the WebGL API binds a generic vertex index to an attribute variable.",
        "name": "WebGLRenderingContext.bindAttribLocation",
        "params": [
            {
                "descr": "A WebGLProgram object to bind.",
                "name": "program"
            },
            {
                "descr": "A GLuint specifying the index of the generic vertex to bind.",
                "name": "index"
            },
            {
                "descr": "A DOMString specifying the name of the variable to bind to the generic vertex index. ",
                "name": "name"
            }
        ],
        "path": "dom/webglrenderingcontext/bindattriblocation",
        "syntax": "void gl.bindAttribLocation(program, index, name);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.bindBuffer": {
        "descr": "The WebGLRenderingContext.bindBuffer() method of the WebGL API binds a given WebGLBuffer to a target.",
        "name": "WebGLRenderingContext.bindBuffer",
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target). ",
                "name": "target"
            },
            {
                "descr": "A WebGLBuffer to bind.",
                "name": "buffer"
            }
        ],
        "path": "dom/webglrenderingcontext/bindbuffer",
        "syntax": "void gl.bindBuffer(target, buffer);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.bindFramebuffer": {
        "descr": "The WebGLRenderingContext.bindFramebuffer() method of the WebGL API binds a given WebGLFramebuffer to a target.",
        "name": "WebGLRenderingContext.bindFramebuffer",
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target). ",
                "name": "target"
            },
            {
                "descr": "A WebGLFramebuffer object to bind.",
                "name": "framebuffer"
            }
        ],
        "path": "dom/webglrenderingcontext/bindframebuffer",
        "syntax": "void gl.bindFramebuffer(target, framebuffer);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.bindRenderbuffer": {
        "descr": "The WebGLRenderingContext.bindRenderbuffer() method of the WebGL API binds a given WebGLRenderbuffer to a target, which must be gl.RENDERBUFFER.",
        "name": "WebGLRenderingContext.bindRenderbuffer",
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target). ",
                "name": "target"
            },
            {
                "descr": "A WebGLRenderbuffer object to bind.",
                "name": "renderbuffer"
            }
        ],
        "path": "dom/webglrenderingcontext/bindrenderbuffer",
        "syntax": "void gl.bindRenderbuffer(target, renderbuffer);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.bindTexture": {
        "descr": "The WebGLRenderingContext.bindTexture() method of the WebGL API binds a given WebGLTexture to a target (binding point).",
        "name": "WebGLRenderingContext.bindTexture",
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target). ",
                "name": "target"
            },
            {
                "descr": "A WebGLTexture object to bind.",
                "name": "texture"
            }
        ],
        "path": "dom/webglrenderingcontext/bindtexture",
        "syntax": "void gl.bindTexture(target, texture);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.blendColor": {
        "descr": "The WebGLRenderingContext.blendColor() method of the WebGL API is used to set the source and destination blending factors.",
        "name": "WebGLRenderingContext.blendColor",
        "params": [
            {
                "descr": "A GLclampf for the red component in the range of 0 to 1.",
                "name": "red"
            },
            {
                "descr": "A GLclampf for the green component in the range of 0 to 1.",
                "name": "green"
            },
            {
                "descr": "A GLclampf for the blue component in the range of 0 to 1.",
                "name": "blue"
            },
            {
                "descr": "A GLclampf for the alpha component (transparency) in the range of 0 to 1.",
                "name": "alpha"
            }
        ],
        "path": "dom/webglrenderingcontext/blendcolor",
        "syntax": "void gl.blendColor(red, green, blue, alpha);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.blendEquation": {
        "descr": "The WebGLRenderingContext.blendEquation() method of the WebGL API is used to set both the RGB blend equation and alpha blend equation to a single equation.",
        "name": "WebGLRenderingContext.blendEquation",
        "params": [
            {
                "descr": "A GLenum specifying how source and destination colors are combined. ",
                "name": "mode"
            }
        ],
        "path": "dom/webglrenderingcontext/blendequation",
        "syntax": "void gl.blendEquation(mode);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.blendEquationSeparate": {
        "descr": "The WebGLRenderingContext.blendEquationSeparate() method of the WebGL API is used to set the RGB blend equation and alpha blend equation separately.",
        "name": "WebGLRenderingContext.blendEquationSeparate",
        "params": [
            {
                "descr": "A GLenum specifying how the red, green and blue components of source and destination colors are combined. ",
                "name": "modeRGB"
            },
            {
                "descr": "A GLenum specifying how the alpha component (transparency) of source and destination colors are combined. ",
                "name": "modeAlpha"
            }
        ],
        "path": "dom/webglrenderingcontext/blendequationseparate",
        "syntax": "void gl.blendEquationSeparate(modeRGB, modeAlpha);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.blendFunc": {
        "descr": "The WebGLRenderingContext.blendFunc() method of the WebGL API defines which function is used for blending pixel arithmetic.",
        "name": "WebGLRenderingContext.blendFunc",
        "params": [
            {
                "descr": "A GLenum specifying a multiplier for the source blending factors. ",
                "name": "sfactor"
            },
            {
                "descr": "A GLenum specifying a multiplier for the destination blending factors. ",
                "name": "dfactor"
            }
        ],
        "path": "dom/webglrenderingcontext/blendfunc",
        "syntax": "void gl.blendFunc(sfactor, dfactor);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.blendFuncSeparate": {
        "descr": "The WebGLRenderingContext.blendFuncSeparate() method of the WebGL API defines which function is used for blending pixel arithmetic for RGB and alpha components separately.",
        "name": "WebGLRenderingContext.blendFuncSeparate",
        "params": [
            {
                "descr": "A GLenum specifying a multiplier for the red, green and blue (RGB) source blending factors. ",
                "name": "srcRGB"
            },
            {
                "descr": "A GLenum specifying a multiplier for the red, green and blue (RGB) destination blending factors. ",
                "name": "dstRGB"
            },
            {
                "descr": "A GLenum specifying a multiplier for the alpha source blending factor. ",
                "name": "srcAlpha"
            },
            {
                "descr": "A GLenum specifying a multiplier for the alpha destination blending factor. ",
                "name": "dstAlpha"
            }
        ],
        "path": "dom/webglrenderingcontext/blendfuncseparate",
        "syntax": "void gl.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.bufferData": {
        "descr": "The WebGLRenderingContext.bufferData() method of the WebGL API initializes and creates the buffer object's data store.",
        "name": "WebGLRenderingContext.bufferData",
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target). ",
                "name": "target"
            },
            {
                "descr": "A GLsizeiptr setting the size of the buffer object's data store.",
                "name": "size"
            },
            {
                "descr": "An ArrayBuffer, SharedArrayBuffer or one of the ArrayBufferView typed array types that will be copied into the data store. ",
                "name": "srcData Optional"
            },
            {
                "descr": "A GLenum specifying the usage pattern of the data store. ",
                "name": "usage"
            },
            {
                "descr": "A GLuint specifying the element index offset where to start reading the buffer.",
                "name": "srcOffset"
            },
            {
                "descr": "A GLuint defaulting to 0.",
                "name": "length Optional"
            }
        ],
        "path": "dom/webglrenderingcontext/bufferdata",
        "syntax": "// WebGL1: void gl.bufferData(target, size, usage);\n or  void gl.bufferData(target, ArrayBuffer? srcData, usage);\n or  void gl.bufferData(target, ArrayBufferView srcData, usage);\n or  // WebGL2: void gl.bufferData(target, ArrayBufferView srcData, usage, srcOffset, length);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.bufferSubData": {
        "descr": "The WebGLRenderingContext.bufferSubData() method of the WebGL API updates a subset of a buffer object's data store.",
        "name": "WebGLRenderingContext.bufferSubData",
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target). ",
                "name": "target"
            },
            {
                "descr": "A GLintptr specifying an offset in bytes where the data replacement will start.",
                "name": "dstByteOffset"
            },
            {
                "descr": "An ArrayBuffer, SharedArrayBuffer or one of the ArrayBufferView typed array types that will be copied into the data store.",
                "name": "srcData Optional"
            },
            {
                "descr": "A GLuint specifying the element index offset where to start reading the buffer.",
                "name": "srcOffset"
            },
            {
                "descr": "A GLuint defaulting to 0.",
                "name": "length Optional"
            }
        ],
        "path": "dom/webglrenderingcontext/buffersubdata",
        "syntax": "// WebGL1: void gl.bufferSubData(target, offset, ArrayBuffer srcData);\n or  void gl.bufferSubData(target, offset, ArrayBufferView srcData);\n or  // WebGL2: void gl.bufferSubData(target, dstByteOffset, ArrayBufferView srcData, srcOffset, length);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.canvas": {
        "descr": "The WebGLRenderingContext.canvas property is a read-only reference to the HTMLCanvasElement or OffscreenCanvas object that is associated with the context. It might be null if it is not associated with a <canvas> element or an OffscreenCanvas object.",
        "name": "WebGLRenderingContext.canvas",
        "params": [],
        "path": "dom/webglrenderingcontext/canvas",
        "syntax": "gl.canvas; Return value Either a HTMLCanvasElement or OffscreenCanvas object or null. Examples Canvas element Given this <canvas> element: <canvas id=\"canvas\"></canvas>  You can get back a reference to it from the WebGLRenderingContext using the canvas property: var canvas = document.getElementById('canvas');\n or  var gl = canvas.getContext('webgl');\n or  gl.canvas; // HTMLCanvasElement);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.checkFramebufferStatus": {
        "descr": "The WebGLRenderingContext.checkFramebufferStatus() method of the WebGL API returns the completeness status of the WebGLFramebuffer object.",
        "name": "WebGLRenderingContext.checkFramebufferStatus",
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target). ",
                "name": "target"
            }
        ],
        "path": "dom/webglrenderingcontext/checkframebufferstatus",
        "syntax": "GLenum gl.checkFramebufferStatus(target);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.clear": {
        "descr": "The WebGLRenderingContext.clear() method of the WebGL API clears buffers to preset values.",
        "name": "WebGLRenderingContext.clear",
        "params": [
            {
                "descr": "A GLbitfield bitwise OR mask that indicates the buffers to be cleared. ",
                "name": "mask"
            }
        ],
        "path": "dom/webglrenderingcontext/clear",
        "syntax": "void gl.clear(mask);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.clearColor": {
        "descr": "The WebGLRenderingContext.clearColor() method of the WebGL API specifies the color values used when clearing color buffers.",
        "name": "WebGLRenderingContext.clearColor",
        "params": [
            {
                "descr": "A GLclampf specifying the red color value used when the color buffers are cleared. ",
                "name": "red"
            },
            {
                "descr": "A GLclampf specifying the green color value used when the color buffers are cleared. ",
                "name": "green"
            },
            {
                "descr": "A GLclampf specifying the blue color value used when the color buffers are cleared. ",
                "name": "blue"
            },
            {
                "descr": "A GLclampf specifying the alpha (transparency) value used when the color buffers are cleared. ",
                "name": "alpha"
            }
        ],
        "path": "dom/webglrenderingcontext/clearcolor",
        "syntax": "void gl.clearColor(red, green, blue, alpha);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.clearDepth": {
        "descr": "The WebGLRenderingContext.clearDepth() method of the WebGL API specifies the clear value for the depth buffer.",
        "name": "WebGLRenderingContext.clearDepth",
        "params": [
            {
                "descr": "A GLclampf specifying the depth value used when the depth buffer is cleared. ",
                "name": "depth"
            }
        ],
        "path": "dom/webglrenderingcontext/cleardepth",
        "syntax": "void gl.clearDepth(depth);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.clearStencil": {
        "descr": "The WebGLRenderingContext.clearStencil() method of the WebGL API specifies the clear value for the stencil buffer.",
        "name": "WebGLRenderingContext.clearStencil",
        "params": [
            {
                "descr": "A GLint specifying the index used when the stencil buffer is cleared. ",
                "name": "s"
            }
        ],
        "path": "dom/webglrenderingcontext/clearstencil",
        "syntax": "void gl.clearStencil(s);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.colorMask": {
        "descr": "The WebGLRenderingContext.colorMask() method of the WebGL API sets which color components to enable or to disable when drawing or rendering to a WebGLFramebuffer.",
        "name": "WebGLRenderingContext.colorMask",
        "params": [
            {
                "descr": "A GLboolean specifying whether or not the red color component can be written into the frame buffer. ",
                "name": "red"
            },
            {
                "descr": "A GLboolean specifying whether or not the green color component can be written into the frame buffer. ",
                "name": "green"
            },
            {
                "descr": "A GLboolean specifying whether or not the blue color component can be written into the frame buffer. ",
                "name": "blue"
            },
            {
                "descr": "A GLboolean specifying whether or not the alpha (transparency) component can be written into the frame buffer. ",
                "name": "alpha"
            }
        ],
        "path": "dom/webglrenderingcontext/colormask",
        "syntax": "void gl.colorMask(red, green, blue, alpha);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.commit": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WebGLRenderingContext.commit",
        "params": [],
        "path": "dom/webglrenderingcontext/commit",
        "syntax": "void WebGLRenderingContext.commit()",
        "type": "WebGL"
    },
    "WebGLRenderingContext.compileShader": {
        "descr": "The WebGLRenderingContext.compileShader() method of the WebGL API compiles a GLSL shader into binary data so that it can be used by a WebGLProgram.",
        "name": "WebGLRenderingContext.compileShader",
        "params": [
            {
                "descr": "A fragment or vertex WebGLShader.",
                "name": "shader"
            }
        ],
        "path": "dom/webglrenderingcontext/compileshader",
        "syntax": "void gl.compileShader(shader);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.compressedTexImage2D": {
        "descr": "The WebGLRenderingContext.compressedTexImage2D() and WebGL2RenderingContext.compressedTexImage3D() methods of the WebGL API specify a two- or three-dimensional texture image in a compressed format.",
        "name": "WebGLRenderingContext.compressedTexImage2D",
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target) of the active texture. ",
                "name": "target"
            },
            {
                "descr": "A GLint specifying the level of detail. ",
                "name": "level"
            },
            {
                "descr": "A GLenum specifying the compressed image format. ",
                "name": "internalformat"
            },
            {
                "descr": "A GLsizei specifying the width of the texture.",
                "name": "width"
            },
            {
                "descr": "A GLsizei specifying the height of the texture.",
                "name": "height"
            },
            {
                "descr": "A GLsizei specifying the depth of the texture/the number of textures in a TEXTURE_2D_ARRAY.",
                "name": "depth"
            },
            {
                "descr": "A GLint specifying the width of the border. ",
                "name": "border"
            },
            {
                "descr": "A GLsizei specifying the number of bytes to read from the buffer bound to gl.PIXEL_UNPACK_BUFFER.",
                "name": "imageSize"
            },
            {
                "descr": "A GLintptr specifying the offset in bytes from which to read from the buffer bound to gl.PIXEL_UNPACK_BUFFER.",
                "name": "offset"
            },
            {
                "descr": "An ArrayBufferView that be used as a data store for the compressed image data in memory.",
                "name": "pixels"
            }
        ],
        "path": "dom/webglrenderingcontext/compressedteximage2d",
        "syntax": "// WebGL 1: void gl.compressedTexImage2D(target, level, internalformat, width, height, border, ArrayBufferView? pixels);\n or  // Additionally available in WebGL 2: // read from buffer bound to gl.PIXEL_UNPACK_BUFFER void gl.compressedTexImage2D(target, level, internalformat, width, height, border, GLsizei imageSize, GLintptr offset);\n or  void gl.compressedTexImage2D(target, level, internalformat, width, height, border, ArrayBufferView srcData, optional srcOffset, optional srcLengthOverride);\n or  // read from buffer bound to gl.PIXEL_UNPACK_BUFFER void gl.compressedTexImage3D(target, level, internalformat, width, height, depth, border, GLsizei imageSize, GLintptr offset);\n or  void gl.compressedTexImage3D(target, level, internalformat, width, height, depth, border, ArrayBufferView srcData, optional srcOffset, optional srcLengthOverride);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.compressedTexSubImage2D": {
        "descr": "The WebGLRenderingContext.compressedTexSubImage2D() method of the WebGL API specifies a two-dimensional sub-rectangle for a texture image in a compressed format.",
        "name": "WebGLRenderingContext.compressedTexSubImage2D",
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target) of the active compressed texture. ",
                "name": "target"
            },
            {
                "descr": "A GLint specifying the level of detail. ",
                "name": "level"
            },
            {
                "descr": "A GLint specifying the horizontal offset within the compressed texture image.",
                "name": "xoffset"
            },
            {
                "descr": "A GLint specifying the vertical offset within the compressed texture image.",
                "name": "yoffset"
            },
            {
                "descr": "A GLsizei specifying the width of the compressed texture.",
                "name": "width"
            },
            {
                "descr": "A GLsizei specifying the height of the compressed texture.",
                "name": "height"
            },
            {
                "descr": "A GLenum specifying the compressed image format. ",
                "name": "format"
            },
            {
                "descr": "A GLsizei specifying the number of bytes to read from the buffer bound to gl.PIXEL_UNPACK_BUFFER.",
                "name": "imageSize"
            },
            {
                "descr": "A GLintptr specifying the offset in bytes from which to read from the buffer bound to gl.PIXEL_UNPACK_BUFFER.",
                "name": "offset"
            },
            {
                "descr": "An ArrayBufferView that be used as a data store for the compressed image data in memory.",
                "name": "pixels"
            }
        ],
        "path": "dom/webglrenderingcontext/compressedtexsubimage2d",
        "syntax": "// WebGL 1: void gl.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, ArrayBufferView? pixels);\n or  // Additionally available in WebGL 2: void gl.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, offset);\n or  void gl.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, ArrayBufferView srcData, optional srcOffset, optional srcLengthOverride);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.copyTexImage2D": {
        "descr": "The WebGLRenderingContext.copyTexImage2D() method of the WebGL API copies pixels from the current WebGLFramebuffer into a 2D texture image.",
        "name": "WebGLRenderingContext.copyTexImage2D",
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target) of the active texture. ",
                "name": "target"
            },
            {
                "descr": "A GLint specifying the level of detail. ",
                "name": "level"
            },
            {
                "descr": "A GLenum specifying the color components in the texture. ",
                "name": "internalformat"
            },
            {
                "descr": "A GLint specifying the x coordinate of the lower left corner where to start copying.",
                "name": "x"
            },
            {
                "descr": "A GLint specifying the y coordinate of the lower left corner where to start copying.",
                "name": "y"
            },
            {
                "descr": "A GLsizei specifying the width of the texture.",
                "name": "width"
            },
            {
                "descr": "A GLsizei specifying the height of the texture.",
                "name": "height"
            },
            {
                "descr": "A GLint specifying the width of the border. ",
                "name": "border"
            }
        ],
        "path": "dom/webglrenderingcontext/copyteximage2d",
        "syntax": "void gl.copyTexImage2D(target, level, internalformat, x, y, width, height, border);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.copyTexSubImage2D": {
        "descr": "The WebGLRenderingContext.copyTexSubImage2D() method of the WebGL API copies pixels from the current WebGLFramebuffer into an existing 2D texture sub-image.",
        "name": "WebGLRenderingContext.copyTexSubImage2D",
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target) of the active texture. ",
                "name": "target"
            },
            {
                "descr": "A GLint specifying the level of detail. ",
                "name": "level"
            },
            {
                "descr": "A GLint specifying the horizontal offset within the texture image.",
                "name": "xoffset"
            },
            {
                "descr": "A GLint specifying the vertical offset within the texture image.",
                "name": "yoffset"
            },
            {
                "descr": "A GLint specifying the x coordinate of the lower left corner where to start copying.",
                "name": "x"
            },
            {
                "descr": "A GLint specifying the y coordinate of the lower left corner where to start copying.",
                "name": "y"
            },
            {
                "descr": "A GLsizei specifying the width of the texture.",
                "name": "width"
            },
            {
                "descr": "A GLsizei specifying the height of the texture.",
                "name": "height"
            }
        ],
        "path": "dom/webglrenderingcontext/copytexsubimage2d",
        "syntax": "void gl.copyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.createBuffer": {
        "descr": "The WebGLRenderingContext.createBuffer() method of the WebGL API creates and initializes a WebGLBuffer storing data such as vertices or colors.",
        "name": "WebGLRenderingContext.createBuffer",
        "params": [],
        "path": "dom/webglrenderingcontext/createbuffer",
        "syntax": "WebGLBuffer gl.createBuffer();",
        "type": "WebGL"
    },
    "WebGLRenderingContext.createFramebuffer": {
        "descr": "The WebGLRenderingContext.creatFramebuffer() method of the WebGL API creates and initializes a WebGLFramebuffer object.",
        "name": "WebGLRenderingContext.createFramebuffer",
        "params": [],
        "path": "dom/webglrenderingcontext/createframebuffer",
        "syntax": "WebGLFramebuffer gl.createFramebuffer();",
        "type": "WebGL"
    },
    "WebGLRenderingContext.createProgram": {
        "descr": "The WebGLRenderingContext.createProgram() method of the WebGL API creates and initializes a WebGLProgram object.",
        "name": "WebGLRenderingContext.createProgram",
        "params": [],
        "path": "dom/webglrenderingcontext/createprogram",
        "syntax": "WebGLProgram gl.createProgram();",
        "type": "WebGL"
    },
    "WebGLRenderingContext.createRenderbuffer": {
        "descr": "The WebGLRenderingContext.createRenderbuffer() method of the WebGL API creates and initializes a WebGLRenderbuffer object.",
        "name": "WebGLRenderingContext.createRenderbuffer",
        "params": [],
        "path": "dom/webglrenderingcontext/createrenderbuffer",
        "syntax": "WebGLRenderbuffer gl.createRenderbuffer();",
        "type": "WebGL"
    },
    "WebGLRenderingContext.createShader": {
        "descr": "The WebGLRenderingContext.createShader() method of the WebGL API creates a WebGLShader that can then be configured further using WebGLRenderingContext.shaderSource() and WebGLRenderingContext.compileShader().",
        "name": "WebGLRenderingContext.createShader",
        "params": [
            {
                "descr": "Either gl.VERTEX_SHADER or gl.FRAGMENT_SHADER",
                "name": "type"
            }
        ],
        "path": "dom/webglrenderingcontext/createshader",
        "syntax": "WebGLShader gl.createShader(type);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.createTexture": {
        "descr": "The WebGLRenderingContext.createTexture() method of the WebGL API creates and initializes a WebGLTexture object.",
        "name": "WebGLRenderingContext.createTexture",
        "params": [],
        "path": "dom/webglrenderingcontext/createtexture",
        "syntax": "WebGLTexture gl.createTexture();",
        "type": "WebGL"
    },
    "WebGLRenderingContext.cullFace": {
        "descr": "The WebGLRenderingContext.cullFace() method of the WebGL API specifies whether or not front- and/or back-facing polygons can be culled.",
        "name": "WebGLRenderingContext.cullFace",
        "params": [
            {
                "descr": "A GLenum specifying whether front- or back-facing polygons are candidates for culling. ",
                "name": "mode"
            }
        ],
        "path": "dom/webglrenderingcontext/cullface",
        "syntax": "void gl.cullFace(mode);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.deleteBuffer": {
        "descr": "The WebGLRenderingContext.deleteBuffer() method of the WebGL API deletes a given WebGLBuffer. This method has no effect if the buffer has already been deleted.",
        "name": "WebGLRenderingContext.deleteBuffer",
        "params": [
            {
                "descr": "A WebGLBuffer object to delete.",
                "name": "buffer"
            }
        ],
        "path": "dom/webglrenderingcontext/deletebuffer",
        "syntax": "void gl.deleteBuffer(buffer);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.deleteFramebuffer": {
        "descr": "The WebGLRenderingContext.deleteFramebuffer() method of the WebGL API deletes a given WebGLFramebuffer object. This method has no effect if the frame buffer has already been deleted.",
        "name": "WebGLRenderingContext.deleteFramebuffer",
        "params": [
            {
                "descr": "A WebGLFramebuffer object to delete.",
                "name": "framebuffer"
            }
        ],
        "path": "dom/webglrenderingcontext/deleteframebuffer",
        "syntax": "void gl.deleteFramebuffer(framebuffer);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.deleteProgram": {
        "descr": "The WebGLRenderingContext.deleteProgram() method of the WebGL API deletes a given WebGLProgram object. This method has no effect if the program has already been deleted.",
        "name": "WebGLRenderingContext.deleteProgram",
        "params": [
            {
                "descr": "A WebGLProgram object to delete.",
                "name": "program"
            }
        ],
        "path": "dom/webglrenderingcontext/deleteprogram",
        "syntax": "void gl.deleteProgram(program);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.deleteRenderbuffer": {
        "descr": "The WebGLRenderingContext.deleteRenderbuffer() method of the WebGL API deletes a given WebGLRenderbuffer object. This method has no effect if the render buffer has already been deleted.",
        "name": "WebGLRenderingContext.deleteRenderbuffer",
        "params": [
            {
                "descr": "A WebGLRenderbuffer object to delete.",
                "name": "renderbuffer"
            }
        ],
        "path": "dom/webglrenderingcontext/deleterenderbuffer",
        "syntax": "void gl.deleteRenderbuffer(renderbuffer);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.deleteShader": {
        "descr": "The WebGLRenderingContext.deleteShader() method of the WebGL API marks a given WebGLShader object for deletion. It will then be deleted whenever the shader is no longer in use. This method has no effect if the shader has already been deleted, and the WebGLShader is automatically marked for deletion when it is destroyed by the garbage collector.",
        "name": "WebGLRenderingContext.deleteShader",
        "params": [
            {
                "descr": "A WebGLShader object to delete.",
                "name": "shader"
            }
        ],
        "path": "dom/webglrenderingcontext/deleteshader",
        "syntax": "void gl.deleteShader(shader);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.deleteTexture": {
        "descr": "The WebGLRenderingContext.deleteTexture() method of the WebGL API deletes a given WebGLTexture object. This method has no effect if the texture has already been deleted.",
        "name": "WebGLRenderingContext.deleteTexture",
        "params": [
            {
                "descr": "A WebGLTexture object to delete.",
                "name": "texture"
            }
        ],
        "path": "dom/webglrenderingcontext/deletetexture",
        "syntax": "void gl.deleteTexture(texture);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.depthFunc": {
        "descr": "The WebGLRenderingContext.depthFunc() method of the WebGL API specifies a function that compares incoming pixel depth to the current depth buffer value.",
        "name": "WebGLRenderingContext.depthFunc",
        "params": [
            {
                "descr": "A GLenum specifying the depth comparison function, which sets the conditions under which the pixel will be drawn. ",
                "name": "func"
            }
        ],
        "path": "dom/webglrenderingcontext/depthfunc",
        "syntax": "void gl.depthFunc(func);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.depthMask": {
        "descr": "The WebGLRenderingContext.depthMask() method of the WebGL API sets whether writing into the depth buffer is enabled or disabled.",
        "name": "WebGLRenderingContext.depthMask",
        "params": [
            {
                "descr": "A GLboolean specifying whether or not writing into the depth buffer is enabled. ",
                "name": "flag"
            }
        ],
        "path": "dom/webglrenderingcontext/depthmask",
        "syntax": "void gl.depthMask(flag);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.depthRange": {
        "descr": "The WebGLRenderingContext.depthRange() method of the WebGL API specifies the depth range mapping from normalized device coordinates to window or viewport coordinates.",
        "name": "WebGLRenderingContext.depthRange",
        "params": [
            {
                "descr": "A GLclampf specifying the mapping of the near clipping plane to window or viewport coordinates. ",
                "name": "zNear"
            },
            {
                "descr": "A GLclampf specifying the mapping of the far clipping plane to window or viewport coordinates. ",
                "name": "zFar"
            }
        ],
        "path": "dom/webglrenderingcontext/depthrange",
        "syntax": "void gl.depthRange(zNear, zFar);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.detachShader": {
        "descr": "The WebGLRenderingContext.detachShader() method of the WebGL API detaches a previously attached WebGLShader from a WebGLProgram.",
        "name": "WebGLRenderingContext.detachShader",
        "params": [
            {
                "descr": "A WebGLProgram.",
                "name": "program"
            },
            {
                "descr": "A fragment or vertex WebGLShader.",
                "name": "shader"
            }
        ],
        "path": "dom/webglrenderingcontext/detachshader",
        "syntax": "void gl.detachShader(program, shader);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.disable": {
        "descr": "The WebGLRenderingContext.disable() method of the WebGL API disables specific WebGL capabilities for this context.",
        "name": "WebGLRenderingContext.disable",
        "params": [
            {
                "descr": "A GLenum specifying which WebGL capability to disable. ",
                "name": "cap"
            }
        ],
        "path": "dom/webglrenderingcontext/disable",
        "syntax": "void gl.disable(cap);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.disableVertexAttribArray": {
        "descr": "The WebGLRenderingContext.disableVertexAttribArray() method of the WebGL API turns the generic vertex attribute array off at a given index position.",
        "name": "WebGLRenderingContext.disableVertexAttribArray",
        "params": [
            {
                "descr": "A GLuint specifying the index of the vertex attribute to disable.",
                "name": "index"
            }
        ],
        "path": "dom/webglrenderingcontext/disablevertexattribarray",
        "syntax": "void gl.disableVertexAttribArray(index);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.drawArrays": {
        "descr": "The WebGLRenderingContext.drawArrays() method of the WebGL API renders primitives from array data.",
        "name": "WebGLRenderingContext.drawArrays",
        "params": [
            {
                "descr": "A GLenum specifying the type primitive to render. ",
                "name": "mode"
            },
            {
                "descr": "A GLint specifying the starting index in the array of vector points.",
                "name": "first"
            },
            {
                "descr": "A GLsizei specifying the number of indices to be rendered.",
                "name": "count"
            }
        ],
        "path": "dom/webglrenderingcontext/drawarrays",
        "syntax": "void gl.drawArrays(mode, first, count);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.drawElements": {
        "descr": "The WebGLRenderingContext.drawElements() method of the WebGL API renders primitives from array data.",
        "name": "WebGLRenderingContext.drawElements",
        "params": [
            {
                "descr": "A GLenum specifying the type primitive to render. ",
                "name": "mode"
            },
            {
                "descr": "A GLsizei specifying the number of elements to be rendered.",
                "name": "count"
            },
            {
                "descr": "A GLenum specifying the type of the values in the element array buffer. ",
                "name": "type"
            },
            {
                "descr": "A GLintptr specifying a byte offset in the element array buffer. ",
                "name": "offset"
            }
        ],
        "path": "dom/webglrenderingcontext/drawelements",
        "syntax": "void gl.drawElements(mode, count, type, offset);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.drawingBufferHeight": {
        "descr": "The read-only WebGLRenderingContext.drawingBufferHeight property represents the actual height of the current drawing buffer. It should match the height attribute of the <canvas> element associated with this context, but might differ if the implementation is not able to provide the requested height.",
        "name": "WebGLRenderingContext.drawingBufferHeight",
        "params": [],
        "path": "dom/webglrenderingcontext/drawingbufferheight",
        "syntax": "gl.drawingBufferHeight; Examples Given this <canvas> element: <canvas id=\"canvas\"></canvas>  You can get the height of the drawing buffer with the following lines: var canvas = document.getElementById('canvas');\n or  var gl = canvas.getContext('webgl');\n or  gl.drawingBufferHeight; // 150);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.drawingBufferWidth": {
        "descr": "The read-only WebGLRenderingContext.drawingBufferWidth property represents the actual width of the current drawing buffer. It should match the width attribute of the <canvas> element associated with this context, but might differ if the implementation is not able to provide the requested width.",
        "name": "WebGLRenderingContext.drawingBufferWidth",
        "params": [],
        "path": "dom/webglrenderingcontext/drawingbufferwidth",
        "syntax": "gl.drawingBufferWidth; Examples Given this <canvas> element: <canvas id=\"canvas\"></canvas>  You can get the width of the drawing buffer with the following lines: var canvas = document.getElementById('canvas');\n or  var gl = canvas.getContext('webgl');\n or  gl.drawingBufferWidth; // 300);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.enable": {
        "descr": "The WebGLRenderingContext.enable() method of the WebGL API enables specific WebGL capabilities for this context.",
        "name": "WebGLRenderingContext.enable",
        "params": [
            {
                "descr": "A GLenum specifying which WebGL capability to enable. ",
                "name": "cap"
            }
        ],
        "path": "dom/webglrenderingcontext/enable",
        "syntax": "void gl.enable(cap);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.enableVertexAttribArray": {
        "descr": "The WebGLRenderingContext method enableVertexAttribArray(), part of the WebGL API, turns on the generic vertex attribute array at the specified index into the list of attribute arrays.",
        "name": "WebGLRenderingContext.enableVertexAttribArray",
        "params": [
            {
                "descr": "A GLuint specifying the index number that uniquely identifies the vertex attribute to enable. ",
                "name": "index"
            },
            {
                "descr": "The specified index is invalid; that is, it's greater than or equal to the maximum number of entries permitted in the context's vertex attribute list, as indicated by the value of WebGLRenderingContext.MAX_VERTEX_ATTRIBS.",
                "name": "WebGLRenderingContext.INVALID_VALUE"
            }
        ],
        "path": "dom/webglrenderingcontext/enablevertexattribarray",
        "syntax": "void gl.enableVertexAttribArray(index);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.finish": {
        "descr": "The WebGLRenderingContext.finish() method of the WebGL API blocks execution until all previously called commands are finished.",
        "name": "WebGLRenderingContext.finish",
        "params": [],
        "path": "dom/webglrenderingcontext/finish",
        "syntax": "void gl.finish();",
        "type": "WebGL"
    },
    "WebGLRenderingContext.flush": {
        "descr": "The WebGLRenderingContext.flush() method of the WebGL API empties different buffer commands, causing all commands to be executed as quickly as possible.",
        "name": "WebGLRenderingContext.flush",
        "params": [],
        "path": "dom/webglrenderingcontext/flush",
        "syntax": "void gl.flush();",
        "type": "WebGL"
    },
    "WebGLRenderingContext.framebufferRenderbuffer": {
        "descr": "The WebGLRenderingContext.framebufferRenderbuffer() method of the WebGL API attaches a WebGLRenderbuffer object to a WebGLFramebuffer object.",
        "name": "WebGLRenderingContext.framebufferRenderbuffer",
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target) for the framebuffer. ",
                "name": "target"
            },
            {
                "descr": "A GLenum specifying the attachment point for the render buffer. ",
                "name": "attachment"
            },
            {
                "descr": "A GLenum specifying the binding point (target) for the render buffer. ",
                "name": "renderbuffertarget"
            },
            {
                "descr": "A WebGLRenderbuffer object to attach.",
                "name": "renderbuffer"
            }
        ],
        "path": "dom/webglrenderingcontext/framebufferrenderbuffer",
        "syntax": "void gl.framebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.framebufferTexture2D": {
        "descr": "The WebGLRenderingContext.framebufferTexture2D() method of the WebGL API attaches a texture to a WebGLFramebuffer.",
        "name": "WebGLRenderingContext.framebufferTexture2D",
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target). ",
                "name": "target"
            },
            {
                "descr": "A GLenum specifying the attachment point for the texture. ",
                "name": "attachment"
            },
            {
                "descr": "A GLenum specifying the texture target. ",
                "name": "textarget"
            },
            {
                "descr": "A WebGLTexture object whose image to attach.",
                "name": "texture"
            },
            {
                "descr": "A GLint specifying the mipmap level of the texture image to be attached. ",
                "name": "level"
            }
        ],
        "path": "dom/webglrenderingcontext/framebuffertexture2d",
        "syntax": "void gl.framebufferTexture2D(target, attachment, textarget, texture, level);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.frontFace": {
        "descr": "The WebGLRenderingContext.frontFace() method of the WebGL API specifies whether polygons are front- or back-facing by setting a winding orientation.",
        "name": "WebGLRenderingContext.frontFace",
        "params": [
            {
                "descr": "A GLenum type winding orientation. ",
                "name": "mode"
            }
        ],
        "path": "dom/webglrenderingcontext/frontface",
        "syntax": "void gl.frontFace(mode);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.generateMipmap": {
        "descr": "The WebGLRenderingContext.generateMipmap() method of the WebGL API generates a set of mipmaps for a WebGLTexture object.",
        "name": "WebGLRenderingContext.generateMipmap",
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target) of the active texture whose mipmaps will be generated. ",
                "name": "target"
            }
        ],
        "path": "dom/webglrenderingcontext/generatemipmap",
        "syntax": "void gl.generateMipmap(target);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.getActiveAttrib": {
        "descr": "The WebGLRenderingContext.getActiveAttrib() method of the WebGL API returns a WebGLActiveInfo object containing size, type, and name of a vertex attribute. It is generally used when querying unknown uniforms either for debugging or generic library creation.",
        "name": "WebGLRenderingContext.getActiveAttrib",
        "params": [
            {
                "descr": "A WebGLProgram containing the vertex attribute.",
                "name": "program"
            },
            {
                "descr": "A GLuint specifying the index of the vertex attribute to get. ",
                "name": "index"
            }
        ],
        "path": "dom/webglrenderingcontext/getactiveattrib",
        "syntax": "WebGLActiveInfo gl.getActiveAttrib(program,index);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.getActiveUniform": {
        "descr": "The WebGLRenderingContext.getActiveUniform() method of the WebGL API returns a WebGLActiveInfo object containing size, type, and name of a uniform attribute. It is generally used when querying unknown uniforms either for debugging or generic library creation.",
        "name": "WebGLRenderingContext.getActiveUniform",
        "params": [
            {
                "descr": "A WebGLProgram specifying the WebGL shader program from which to obtain the uniform variable's information.",
                "name": "program"
            },
            {
                "descr": "A GLuint specifying the index of the uniform attribute to get. ",
                "name": "index"
            }
        ],
        "path": "dom/webglrenderingcontext/getactiveuniform",
        "syntax": "WebGLActiveInfo WebGLRenderingContext.getActiveUniform(program, index);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.getAttachedShaders": {
        "descr": "The WebGLRenderingContext.getAttachedShaders() method of the WebGL API returns a list of WebGLShader objects attached to a WebGLProgram.",
        "name": "WebGLRenderingContext.getAttachedShaders",
        "params": [
            {
                "descr": "A WebGLProgram object to get attached shaders for.",
                "name": "program"
            }
        ],
        "path": "dom/webglrenderingcontext/getattachedshaders",
        "syntax": "sequence<WebGLShader> gl.getAttachedShaders(program);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.getAttribLocation": {
        "descr": "The WebGLRenderingContext.getAttribLocation() method of the WebGL API returns the location of an attribute variable in a given WebGLProgram.",
        "name": "WebGLRenderingContext.getAttribLocation",
        "params": [
            {
                "descr": "A WebGLProgram containing the attribute variable.",
                "name": "program"
            },
            {
                "descr": "A DOMString specifying the name of the attribute variable whose location to get.",
                "name": "name"
            }
        ],
        "path": "dom/webglrenderingcontext/getattriblocation",
        "syntax": "GLint gl.getAttribLocation(program, name);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.getBufferParameter": {
        "descr": "The WebGLRenderingContext.getBufferParameter() method of the WebGL API returns information about the buffer.",
        "name": "WebGLRenderingContext.getBufferParameter",
        "params": [
            {
                "descr": "A Glenum specifying the target buffer object. ",
                "name": "target"
            },
            {
                "descr": "A Glenum specifying information to query. ",
                "name": "pname"
            }
        ],
        "path": "dom/webglrenderingcontext/getbufferparameter",
        "syntax": "any gl.getBufferParameter(target, pname);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.getContextAttributes": {
        "descr": "The WebGLRenderingContext.getContextAttributes() method returns a WebGLContextAttributes object that contains the actual context parameters. Might return null, if the context is lost.",
        "name": "WebGLRenderingContext.getContextAttributes",
        "params": [],
        "path": "dom/webglrenderingcontext/getcontextattributes",
        "syntax": "gl.getContextAttributes();",
        "type": "WebGL"
    },
    "WebGLRenderingContext.getError": {
        "descr": "The WebGLRenderingContext.getError() method of the WebGL API returns error information.",
        "name": "WebGLRenderingContext.getError",
        "params": [],
        "path": "dom/webglrenderingcontext/geterror",
        "syntax": "GLenum gl.getError();",
        "type": "WebGL"
    },
    "WebGLRenderingContext.getExtension": {
        "descr": "The WebGLRenderingContext.getExtension() method enables a WebGL extension.",
        "name": "WebGLRenderingContext.getExtension",
        "params": [
            {
                "descr": "A String for the name of the WebGL extension to enable.",
                "name": "name"
            }
        ],
        "path": "dom/webglrenderingcontext/getextension",
        "syntax": "gl.getExtension(name);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.getFramebufferAttachmentParameter": {
        "descr": "The WebGLRenderingContext.getFramebufferAttachmentParameter() method of the WebGL API returns information about a framebuffer's attachment.",
        "name": "WebGLRenderingContext.getFramebufferAttachmentParameter",
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target). ",
                "name": "target"
            },
            {
                "descr": "A GLenum specifying the attachment point for the texture. ",
                "name": "attachment"
            },
            {
                "descr": "A GLenum specifying information to query. ",
                "name": "pname"
            }
        ],
        "path": "dom/webglrenderingcontext/getframebufferattachmentparameter",
        "syntax": "any gl.getFramebufferAttachmentParameter(target, attachment, pname);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.getParameter": {
        "descr": "The WebGLRenderingContext.getParameter() method of the WebGL API returns a value for the passed parameter name.",
        "name": "WebGLRenderingContext.getParameter",
        "params": [
            {
                "descr": "A GLenum specifying which parameter value to return. ",
                "name": "pname"
            }
        ],
        "path": "dom/webglrenderingcontext/getparameter",
        "syntax": "any gl.getParameter(pname);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.getProgramInfoLog": {
        "descr": "The WebGLRenderingContext.getProgramInfoLog returns the information log for the specified WebGLProgram object. It contains errors that occurred during failed linking or validation of WebGLProgram objects.",
        "name": "WebGLRenderingContext.getProgramInfoLog",
        "params": [
            {
                "descr": "A WebGLProgram to query.",
                "name": "program"
            }
        ],
        "path": "dom/webglrenderingcontext/getprograminfolog",
        "syntax": "gl.getProgramInfoLog(program);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.getProgramParameter": {
        "descr": "The WebGLRenderingContext.getProgramParameter() method of the WebGL API returns information about the given program.",
        "name": "WebGLRenderingContext.getProgramParameter",
        "params": [
            {
                "descr": "A WebGLProgram to get parameter information from.",
                "name": "program"
            },
            {
                "descr": "A Glenum specifying the information to query. ",
                "name": "pname"
            }
        ],
        "path": "dom/webglrenderingcontext/getprogramparameter",
        "syntax": "any gl.getProgramParameter(program, pname);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.getRenderbufferParameter": {
        "descr": "The WebGLRenderingContext.getRenderbufferParameter() method of the WebGL API returns information about the renderbuffer.",
        "name": "WebGLRenderingContext.getRenderbufferParameter",
        "params": [
            {
                "descr": "A Glenum specifying the target renderbuffer object. ",
                "name": "target"
            },
            {
                "descr": "A Glenum specifying the information to query. ",
                "name": "pname"
            }
        ],
        "path": "dom/webglrenderingcontext/getrenderbufferparameter",
        "syntax": "any gl.getRenderbufferParameter(target, pname);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.getShaderInfoLog": {
        "descr": "The WebGLRenderingContext.getShaderInfoLog returns the information log for the specified WebGLShader object. It contains warnings, debugging and compile information.",
        "name": "WebGLRenderingContext.getShaderInfoLog",
        "params": [
            {
                "descr": "A WebGLShader to query.",
                "name": "shader"
            }
        ],
        "path": "dom/webglrenderingcontext/getshaderinfolog",
        "syntax": "gl.getShaderInfoLog(shader);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.getShaderParameter": {
        "descr": "The WebGLRenderingContext.getShaderParameter() method of the WebGL API returns information about the given shader.",
        "name": "WebGLRenderingContext.getShaderParameter",
        "params": [
            {
                "descr": "A WebGLShader to get parameter information from.",
                "name": "shader"
            },
            {
                "descr": "A Glenum specifying the information to query. ",
                "name": "pname"
            }
        ],
        "path": "dom/webglrenderingcontext/getshaderparameter",
        "syntax": "any gl.getShaderParameter(shader, pname);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.getShaderPrecisionFormat": {
        "descr": "A WebGLShaderPrecisionFormat object or null, if an error occurs.",
        "name": "WebGLRenderingContext.getShaderPrecisionFormat",
        "params": [
            {
                "descr": "Either a gl.FRAGMENT_SHADER or a gl.VERTEX_SHADER.",
                "name": "shaderType"
            },
            {
                "descr": "A precision type value. Either gl.LOW_FLOAT, gl.MEDIUM_FLOAT, gl.HIGH_FLOAT, gl.LOW_INT, gl.MEDIUM_INT, or gl.HIGH_INT.",
                "name": "precisionType"
            }
        ],
        "path": "dom/webglrenderingcontext/getshaderprecisionformat",
        "syntax": "WebGLShaderPrecisionFormat gl.getShaderPrecisionFormat(shaderType, precisionType);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.getShaderSource": {
        "descr": "The WebGLRenderingContext.getShaderSource() method of the WebGL API returns the source code of a WebGLShader as a DOMString.",
        "name": "WebGLRenderingContext.getShaderSource",
        "params": [
            {
                "descr": "A WebGLShader object to get the source code from.",
                "name": "shader"
            }
        ],
        "path": "dom/webglrenderingcontext/getshadersource",
        "syntax": "DOMString gl.getShaderSource(shader);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.getSupportedExtensions": {
        "descr": "The WebGLRenderingContext.getSupportedExtensions() method returns a list of all the supported WebGL extensions.",
        "name": "WebGLRenderingContext.getSupportedExtensions",
        "params": [],
        "path": "dom/webglrenderingcontext/getsupportedextensions",
        "syntax": "gl.getSupportedExtensions();",
        "type": "WebGL"
    },
    "WebGLRenderingContext.getTexParameter": {
        "descr": "The WebGLRenderingContext.getTexParameter() method of the WebGL API returns information about the given texture.",
        "name": "WebGLRenderingContext.getTexParameter",
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target). ",
                "name": "target"
            },
            {
                "descr": "A Glenum specifying the information to query. ",
                "name": "pname"
            }
        ],
        "path": "dom/webglrenderingcontext/gettexparameter",
        "syntax": "any gl.getTexParameter(target, pname);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.getUniform": {
        "descr": "The WebGLRenderingContext.getUniform() method of the WebGL API returns the value of a uniform variable at a given location.",
        "name": "WebGLRenderingContext.getUniform",
        "params": [
            {
                "descr": "A WebGLProgram containing the uniform attribute.",
                "name": "program"
            },
            {
                "descr": "A WebGLUniformLocation object containing the location of the uniform attribute to get.",
                "name": "location"
            }
        ],
        "path": "dom/webglrenderingcontext/getuniform",
        "syntax": "any gl.getUniform(program, location);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.getUniformLocation": {
        "descr": "Part of the WebGL API, the WebGLRenderingContext method getUniformLocation() returns the location of a specific uniform variable which is part of a given WebGLProgram. The uniform variable is returned as a WebGLUniformLocation object, which is an opaque identifier used to specify where in the GPU's memory that uniform variable is located.",
        "name": "WebGLRenderingContext.getUniformLocation",
        "params": [
            {
                "descr": "Returns the value of the uniform at the given location.",
                "name": "getUniform()"
            },
            {
                "descr": "Sets the uniform's value to the specified value, which may be a single floating point or integer number, or a 2-4 component vector specified either as a list of values or as a Float32Array or Int32Array.",
                "name": "uniform[1234][fi][v]()"
            },
            {
                "descr": "Sets the uniform's value to the specified matrix, possibly with transposition. ",
                "name": "uniformMatrix[234][fv]()"
            },
            {
                "descr": "The WebGLProgram in which to locate the specified uniform variable.",
                "name": "program"
            },
            {
                "descr": "A DOMString specifying the name of the uniform variable whose location is to be returned. ",
                "name": "name"
            },
            {
                "descr": "The program parameter is not a value or object generated by WebGL.",
                "name": "GL_INVALID_VALUE"
            },
            {
                "descr": "The program parameter doesn't correspond to a GLSL program generated by WebGL, or the specified program hasn't been linked successfully.",
                "name": "GL_INVALID_OPERATION"
            }
        ],
        "path": "dom/webglrenderingcontext/getuniformlocation",
        "syntax": "WebGLUniformLocation = WebGLRenderingContext.getUniformLocation(program, name);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.getVertexAttrib": {
        "descr": "The WebGLRenderingContext.getVertexAttrib() method of the WebGL API returns information about a vertex attribute at a given position.",
        "name": "WebGLRenderingContext.getVertexAttrib",
        "params": [
            {
                "descr": "A GLuint specifying the index of the vertex attribute.",
                "name": "index"
            },
            {
                "descr": "A GLenum specifying the information to query. ",
                "name": "pname"
            }
        ],
        "path": "dom/webglrenderingcontext/getvertexattrib",
        "syntax": "any gl.getVertexAttrib(index, pname);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.getVertexAttribOffset": {
        "descr": "The WebGLRenderingContext.getVertexAttribOffset() method of the WebGL API returns the address of a specified vertex attribute.",
        "name": "WebGLRenderingContext.getVertexAttribOffset",
        "params": [
            {
                "descr": "A GLuint specifying the index of the vertex attribute.",
                "name": "index"
            },
            {
                "descr": "A GLenum which must be gl.VERTEX_ATTRIB_ARRAY_POINTER.",
                "name": "pname"
            }
        ],
        "path": "dom/webglrenderingcontext/getvertexattriboffset",
        "syntax": "GLintptr gl.getVertexAttribOffset(index, pname);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.hint": {
        "descr": "The WebGLRenderingContext.hint() method of the WebGL API specifies hints for certain behaviors. The interpretation of these hints depend on the implementation.",
        "name": "WebGLRenderingContext.hint",
        "params": [
            {
                "descr": "Sets which behavior to be controlled. ",
                "name": "target"
            },
            {
                "descr": "Sets the behavior. The default value is gl.DONT_CARE. ",
                "name": "mode"
            }
        ],
        "path": "dom/webglrenderingcontext/hint",
        "syntax": "void gl.hint(target, mode);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.isBuffer": {
        "descr": "The WebGLRenderingContext.isBuffer() method of the WebGL API returns true if the passed WebGLBuffer is valid and false otherwise.",
        "name": "WebGLRenderingContext.isBuffer",
        "params": [
            {
                "descr": "A WebGLBuffer to check.",
                "name": "buffer"
            }
        ],
        "path": "dom/webglrenderingcontext/isbuffer",
        "syntax": "GLboolean gl.isBuffer(buffer);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.isContextLost": {
        "descr": "The WebGLRenderingContext.isContextLost() method returns a Boolean indicating whether or not the WebGL context has been lost.",
        "name": "WebGLRenderingContext.isContextLost",
        "params": [],
        "path": "dom/webglrenderingcontext/iscontextlost",
        "syntax": "gl.isContextLost();",
        "type": "WebGL"
    },
    "WebGLRenderingContext.isEnabled": {
        "descr": "The WebGLRenderingContext.isEnabled() method of the WebGL API tests whether a specific WebGL capability is enabled or not for this context.",
        "name": "WebGLRenderingContext.isEnabled",
        "params": [
            {
                "descr": "A GLenum specifying which WebGL capability to test. ",
                "name": "cap"
            }
        ],
        "path": "dom/webglrenderingcontext/isenabled",
        "syntax": "GLboolean gl.isEnabled(cap);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.isFramebuffer": {
        "descr": "The WebGLRenderingContext.isFramebuffer() method of the WebGL API returns true if the passed WebGLFramebuffer is valid and false otherwise.",
        "name": "WebGLRenderingContext.isFramebuffer",
        "params": [
            {
                "descr": "A WebGLFramebuffer to check.",
                "name": "framebuffer"
            }
        ],
        "path": "dom/webglrenderingcontext/isframebuffer",
        "syntax": "GLboolean gl.isFramebuffer(framebuffer);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.isProgram": {
        "descr": "The WebGLRenderingContext.isProgram() method of the WebGL API returns true if the passed WebGLProgram is valid, false otherwise.",
        "name": "WebGLRenderingContext.isProgram",
        "params": [
            {
                "descr": "A WebGLProgram to check.",
                "name": "program"
            }
        ],
        "path": "dom/webglrenderingcontext/isprogram",
        "syntax": "GLboolean gl.isProgram(program);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.isRenderbuffer": {
        "descr": "The WebGLRenderingContext.isRenderbuffer() method of the WebGL API returns true if the passed WebGLRenderbuffer is valid and false otherwise.",
        "name": "WebGLRenderingContext.isRenderbuffer",
        "params": [
            {
                "descr": "A WebGLRenderbuffer to check.",
                "name": "renderbuffer"
            }
        ],
        "path": "dom/webglrenderingcontext/isrenderbuffer",
        "syntax": "GLboolean gl.isRenderbuffer(renderbuffer);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.isShader": {
        "descr": "The WebGLRenderingContext.isShader() method of the WebGL API returns true if the passed WebGLShader is valid, false otherwise.",
        "name": "WebGLRenderingContext.isShader",
        "params": [
            {
                "descr": "A WebGLShader to check.",
                "name": "shader"
            }
        ],
        "path": "dom/webglrenderingcontext/isshader",
        "syntax": "GLboolean gl.isShader(shader);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.isTexture": {
        "descr": "The WebGLRenderingContext.isTexture() method of the WebGL API returns true if the passed WebGLTexture is valid and false otherwise.",
        "name": "WebGLRenderingContext.isTexture",
        "params": [
            {
                "descr": "A WebGLTexture to check.",
                "name": "texture"
            }
        ],
        "path": "dom/webglrenderingcontext/istexture",
        "syntax": "GLboolean gl.isTexture(texture);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.lineWidth": {
        "descr": "The WebGLRenderingContext.lineWidth() method of the WebGL API sets the line width of rasterized lines.",
        "name": "WebGLRenderingContext.lineWidth",
        "params": [
            {
                "descr": "A GLfloat specifying the width of rasterized lines. ",
                "name": "width"
            }
        ],
        "path": "dom/webglrenderingcontext/linewidth",
        "syntax": "void gl.lineWidth(width);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.linkProgram": {
        "descr": "The WebGLRenderingContext.linkProgram() method of the WebGL API links a given WebGLProgram to the attached vertex and fragment shaders.",
        "name": "WebGLRenderingContext.linkProgram",
        "params": [
            {
                "descr": "A WebGLProgram to link.",
                "name": "program"
            }
        ],
        "path": "dom/webglrenderingcontext/linkprogram",
        "syntax": "void gl.linkProgram(program);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.pixelStorei": {
        "descr": "The WebGLRenderingContext.pixelStorei() method of the WebGL API specifies the pixel storage modes.",
        "name": "WebGLRenderingContext.pixelStorei",
        "params": [
            {
                "descr": "A Glenum specifying which parameter to set. ",
                "name": "pname"
            },
            {
                "descr": "A GLint specifying a value to set the pname parameter to. ",
                "name": "param"
            }
        ],
        "path": "dom/webglrenderingcontext/pixelstorei",
        "syntax": "void gl.pixelStorei(pname, param);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.polygonOffset": {
        "descr": "The WebGLRenderingContext.polygonOffset() method of the WebGL API specifies the scale factors and units to calculate depth values.",
        "name": "WebGLRenderingContext.polygonOffset",
        "params": [
            {
                "descr": "A GLfloat which sets the scale factor for the variable depth offset for each polygon. ",
                "name": "factor"
            },
            {
                "descr": "A GLfloat which sets the multiplier by which an implementation-specific value is multiplied with to create a constant depth offset. ",
                "name": "units"
            }
        ],
        "path": "dom/webglrenderingcontext/polygonoffset",
        "syntax": "void gl.polygonOffset(factor, units);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.readPixels": {
        "descr": "The WebGLRenderingContext.readPixels() method of the WebGL API reads a block of pixels from a specified rectangle of the current color framebuffer into an ArrayBufferView object.",
        "name": "WebGLRenderingContext.readPixels",
        "params": [
            {
                "descr": "A GLint specifying the first horizontal pixel that is read from the lower left corner of a rectangular block of pixels.",
                "name": "x"
            },
            {
                "descr": "A GLint specifying the first vertical pixel that is read from the lower left corner of a rectangular block of pixels.",
                "name": "y"
            },
            {
                "descr": "A GLsizei specifying the width of the rectangle.",
                "name": "width"
            },
            {
                "descr": "A GLsizei specifying the height of the rectangle.",
                "name": "height"
            },
            {
                "descr": "A GLenum specifying the format of the pixel data. ",
                "name": "format"
            },
            {
                "descr": "A GLenum specifying the data type of the pixel data. ",
                "name": "type"
            },
            {
                "descr": "An ArrayBufferView object to read data into. ",
                "name": "pixels"
            },
            {
                "descr": "Offset. Defaults to 0.",
                "name": "dstOffset Optional"
            }
        ],
        "path": "dom/webglrenderingcontext/readpixels",
        "syntax": "// WebGL1: void gl.readPixels(x, y, width, height, format, type, pixels);\n or  // WebGL2: void gl.readPixels(x, y, width, height, format, type, GLintptr offset);\n or  void gl.readPixels(x, y, width, height, format, type, ArrayBufferView pixels, GLuint dstOffset);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.renderbufferStorage": {
        "descr": "The WebGLRenderingContext.renderbufferStorage() method of the WebGL API creates and initializes a renderbuffer object's data store.",
        "name": "WebGLRenderingContext.renderbufferStorage",
        "params": [
            {
                "descr": "A Glenum specifying the target renderbuffer object. ",
                "name": "target"
            },
            {
                "descr": "A Glenum specifying the internal format of the renderbuffer. ",
                "name": "internalFormat"
            },
            {
                "descr": "A GLsizei specifying the width of the renderbuffer in pixels.",
                "name": "width"
            },
            {
                "descr": "A GLsizei specifying the height of the renderbuffer in pixels.",
                "name": "height"
            }
        ],
        "path": "dom/webglrenderingcontext/renderbufferstorage",
        "syntax": "void gl.renderbufferStorage(target, internalFormat, width, height);",
        "type": "Storage"
    },
    "WebGLRenderingContext.sampleCoverage": {
        "descr": "The WebGLRenderingContext.sampleCoverage() method of the WebGL API specifies multi-sample coverage parameters for anti-aliasing effects.",
        "name": "WebGLRenderingContext.sampleCoverage",
        "params": [
            {
                "descr": "A GLclampf which sets a single floating-point coverage value clamped to the range [0,1]. ",
                "name": "value"
            },
            {
                "descr": "A GLboolean which sets whether or not the coverage masks should be inverted. ",
                "name": "invert"
            }
        ],
        "path": "dom/webglrenderingcontext/samplecoverage",
        "syntax": "void gl.sampleCoverage(value, invert);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.scissor": {
        "descr": "The WebGLRenderingContext.scissor() method of the WebGL API sets a scissor box, which limits the drawing to a specified rectangle.",
        "name": "WebGLRenderingContext.scissor",
        "params": [
            {
                "descr": "A GLint specifying the horizontal coordinate for the lower left corner of the box. ",
                "name": "x"
            },
            {
                "descr": "A GLint specifying the vertical coordinate for the lower left corner of the box. ",
                "name": "y"
            },
            {
                "descr": "A non-negative Glsizei specifying the width of the scissor box. ",
                "name": "width"
            },
            {
                "descr": "A non-negative Glsizei specifying the height of the scissor box. ",
                "name": "height"
            }
        ],
        "path": "dom/webglrenderingcontext/scissor",
        "syntax": "void gl.scissor(x, y, width, height);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.shaderSource": {
        "descr": "The WebGLRenderingContext.shaderSource() method of the WebGL API sets the source code of a WebGLShader.",
        "name": "WebGLRenderingContext.shaderSource",
        "params": [
            {
                "descr": "A WebGLShader object in which to set the source code.",
                "name": "shader"
            },
            {
                "descr": "A DOMString containing the GLSL source code to set.",
                "name": "source"
            }
        ],
        "path": "dom/webglrenderingcontext/shadersource",
        "syntax": "void gl.shaderSource(shader, source);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.stencilFunc": {
        "descr": "The WebGLRenderingContext.stencilFunc() method of the WebGL API sets the front and back function and reference value for stencil testing.",
        "name": "WebGLRenderingContext.stencilFunc",
        "params": [
            {
                "descr": "A GLenum specifying the test function. ",
                "name": "func"
            },
            {
                "descr": "A GLint specifying the reference value for the stencil test. ",
                "name": "ref"
            },
            {
                "descr": "A GLuint specifying a bit-wise mask that is used to AND the reference value and the stored stencil value when the test is done. ",
                "name": "mask"
            }
        ],
        "path": "dom/webglrenderingcontext/stencilfunc",
        "syntax": "void gl.stencilFunc(func, ref, mask);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.stencilFuncSeparate": {
        "descr": "The WebGLRenderingContext.stencilFuncSeparate() method of the WebGL API sets the front and/or back function and reference value for stencil testing.",
        "name": "WebGLRenderingContext.stencilFuncSeparate",
        "params": [
            {
                "descr": "A GLenum specifying whether the front and/or back stencil state is updated. ",
                "name": "face"
            },
            {
                "descr": "A GLenum specifying the test function. ",
                "name": "func"
            },
            {
                "descr": "A GLint specifying the reference value for the stencil test. ",
                "name": "ref"
            },
            {
                "descr": "A GLuint specifying a bit-wise mask that is used to AND the reference value and the stored stencil value when the test is done. ",
                "name": "mask"
            }
        ],
        "path": "dom/webglrenderingcontext/stencilfuncseparate",
        "syntax": "void gl.stencilFuncSeparate(face, func, ref, mask);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.stencilMask": {
        "descr": "The WebGLRenderingContext.stencilMask() method of the WebGL API controls enabling and disabling of both the front and back writing of individual bits in the stencil planes.",
        "name": "WebGLRenderingContext.stencilMask",
        "params": [
            {
                "descr": "A GLuint specifying a bit mask to enable or disable writing of individual bits in the stencil planes. ",
                "name": "mask"
            }
        ],
        "path": "dom/webglrenderingcontext/stencilmask",
        "syntax": "void gl.stencilMask(mask);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.stencilMaskSeparate": {
        "descr": "The WebGLRenderingContext.stencilMaskSeparate() method of the WebGL API controls enabling and disabling of front and/or back writing of individual bits in the stencil planes.",
        "name": "WebGLRenderingContext.stencilMaskSeparate",
        "params": [
            {
                "descr": "A GLenum specifying whether the front and/or back stencil writemask is updated. ",
                "name": "face"
            },
            {
                "descr": "A GLuint specifying a bit mask to enable or disable writing of individual bits in the stencil planes. ",
                "name": "mask"
            }
        ],
        "path": "dom/webglrenderingcontext/stencilmaskseparate",
        "syntax": "void gl.stencilMaskSeparate(face, mask);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.stencilOp": {
        "descr": "The WebGLRenderingContext.stencilOp() method of the WebGL API sets both the front and back-facing stencil test actions.",
        "name": "WebGLRenderingContext.stencilOp",
        "params": [
            {
                "descr": "A GLenum specifying the function to use when the stencil test fails. ",
                "name": "fail"
            },
            {
                "descr": "A GLenum specifying the function to use when the stencil test passes, but the depth test fails. ",
                "name": "zfail"
            },
            {
                "descr": "A GLenum specifying the function to use when both the stencil test and the depth test pass, or when the stencil test passes and there is no depth buffer or depth testing is disabled. ",
                "name": "zpass"
            },
            {
                "descr": "Keeps the current value.",
                "name": "gl.KEEP"
            },
            {
                "descr": "Sets the stencil buffer value to 0.",
                "name": "gl.ZERO"
            },
            {
                "descr": "Sets the stencil buffer value to the reference value as specified by WebGLRenderingContext.stencilFunc().",
                "name": "gl.REPLACE"
            },
            {
                "descr": "Increments the current stencil buffer value. ",
                "name": "gl.INCR"
            },
            {
                "descr": "Increments the current stencil buffer value. ",
                "name": "gl.INCR_WRAP"
            },
            {
                "descr": "Decrements the current stencil buffer value. ",
                "name": "gl.DECR"
            },
            {
                "descr": "Decrements the current stencil buffer value. ",
                "name": "gl.DECR_WRAP"
            },
            {
                "descr": "Inverts the current stencil buffer value bitwise.",
                "name": "gl.INVERT"
            }
        ],
        "path": "dom/webglrenderingcontext/stencilop",
        "syntax": "void gl.stencilOp(fail, zfail, zpass);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.stencilOpSeparate": {
        "descr": "The WebGLRenderingContext.stencilOpSeparate() method of the WebGL API sets the front and/or back-facing stencil test actions.",
        "name": "WebGLRenderingContext.stencilOpSeparate",
        "params": [
            {
                "descr": "A GLenum specifying whether the front and/or back stencil state is updated. ",
                "name": "face"
            },
            {
                "descr": "A GLenum specifying the function to use when the stencil test fails. ",
                "name": "fail"
            },
            {
                "descr": "A GLenum specifying the function to use when the stencil test passes, but the depth test fails. ",
                "name": "zfail"
            },
            {
                "descr": "A GLenum specifying the function to use when both the stencil test and the depth test pass, or when the stencil test passes and there is no depth buffer or depth testing is disabled. ",
                "name": "zpass"
            },
            {
                "descr": "Keeps the current value.",
                "name": "gl.KEEP"
            },
            {
                "descr": "Sets the stencil buffer value to 0.",
                "name": "gl.ZERO"
            },
            {
                "descr": "Sets the stencil buffer value to the reference value as specified by WebGLRenderingContext.stencilFunc().",
                "name": "gl.REPLACE"
            },
            {
                "descr": "Increments the current stencil buffer value. ",
                "name": "gl.INCR"
            },
            {
                "descr": "Increments the current stencil buffer value. ",
                "name": "gl.INCR_WRAP"
            },
            {
                "descr": "Decrements the current stencil buffer value. ",
                "name": "gl.DECR"
            },
            {
                "descr": "Decrements the current stencil buffer value. ",
                "name": "gl.DECR_WRAP"
            },
            {
                "descr": "Inverts the current stencil buffer value bitwise.",
                "name": "gl.INVERT"
            }
        ],
        "path": "dom/webglrenderingcontext/stencilopseparate",
        "syntax": "void gl.stencilOpSeparate(face, fail, zfail, zpass);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.texImage2D": {
        "descr": "The WebGLRenderingContext.texImage2D() method of the WebGL API specifies a two-dimensional texture image.",
        "name": "WebGLRenderingContext.texImage2D",
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target) of the active texture. ",
                "name": "target"
            },
            {
                "descr": "A GLint specifying the level of detail. ",
                "name": "level"
            },
            {
                "descr": "A GLenum specifying the color components in the texture. ",
                "name": "internalformat"
            },
            {
                "descr": "A GLsizei specifying the width of the texture.",
                "name": "width"
            },
            {
                "descr": "A GLsizei specifying the height of the texture.",
                "name": "height"
            },
            {
                "descr": "A GLint specifying the width of the border. ",
                "name": "border"
            },
            {
                "descr": "A GLenum specifying the format of the texel data. ",
                "name": "format"
            },
            {
                "descr": "A GLenum specifying the data type of the texel data. ",
                "name": "type"
            },
            {
                "descr": "One of the following objects can be used as a pixel source for the texture:   ArrayBufferView,  A Uint8Array must be used if type is gl.UNSIGNED_BYTE. ",
                "name": "pixels"
            },
            {
                "descr": "(WebGL 2 only) A GLintptr byte offset into the WebGLBuffer's data store. ",
                "name": "offset"
            }
        ],
        "path": "dom/webglrenderingcontext/teximage2d",
        "syntax": "// WebGL1: void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ArrayBufferView? pixels);\n or  void gl.texImage2D(target, level, internalformat, format, type, ImageData? pixels);\n or  void gl.texImage2D(target, level, internalformat, format, type, HTMLImageElement? pixels);\n or  void gl.texImage2D(target, level, internalformat, format, type, HTMLCanvasElement? pixels);\n or  void gl.texImage2D(target, level, internalformat, format, type, HTMLVideoElement? pixels);\n or  void gl.texImage2D(target, level, internalformat, format, type, ImageBitmap? pixels);\n or  // WebGL2: void gl.texImage2D(target, level, internalformat, width, height, border, format, type, GLintptr offset);\n or  void gl.texImage2D(target, level, internalformat, width, height, border, format, type, HTMLCanvasElement source);\n or  void gl.texImage2D(target, level, internalformat, width, height, border, format, type, HTMLImageElement source);\n or  void gl.texImage2D(target, level, internalformat, width, height, border, format, type, HTMLVideoElement source);\n or  void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ImageBitmap source);\n or  void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ImageData source);\n or  void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ArrayBufferView srcData, srcOffset);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.texParameter": {
        "descr": "The WebGLRenderingContext.texParameter[fi]() methods of the WebGL API set texture parameters.",
        "name": "WebGLRenderingContext.texParameter",
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target). ",
                "name": "target"
            }
        ],
        "path": "dom/webglrenderingcontext/texparameter",
        "syntax": "void gl.texParameterf(GLenum target, GLenum pname, GLfloat param);\n or  void gl.texParameteri(GLenum target, GLenum pname, GLint param);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.texSubImage2D": {
        "descr": "The WebGLRenderingContext.texSubImage2D() method of the WebGL API specifies a sub-rectangle of the current texture.",
        "name": "WebGLRenderingContext.texSubImage2D",
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target) of the active texture. ",
                "name": "target"
            },
            {
                "descr": "A GLint specifying the level of detail. ",
                "name": "level"
            },
            {
                "descr": "A GLint specifying the lower left texel x coordinate of a width-wide by height-wide rectangular subregion of the texture array.",
                "name": "xoffset"
            },
            {
                "descr": "A GLint specifying the lower left texel y coordinate of a width-wide by height-wide rectangular subregion of the texture array..",
                "name": "yoffset"
            },
            {
                "descr": "A GLsizei specifying the width of the texture in texels.",
                "name": "width"
            },
            {
                "descr": "A GLsizei specifying the height of the texture in texels.",
                "name": "height"
            },
            {
                "descr": "A GLenum specifying the format of the texel data. ",
                "name": "format"
            },
            {
                "descr": "A GLenum specifying the data type of the texel data. ",
                "name": "type"
            },
            {
                "descr": "One of the following objects can be used as a pixel source for the texture:   ArrayBufferView,  A Uint8Array must be used if type is gl.UNSIGNED_BYTE. ",
                "name": "pixels"
            },
            {
                "descr": "(WebGL 2 only) A GLintptr byte offset into the WebGLBuffer's data store. ",
                "name": "offset"
            }
        ],
        "path": "dom/webglrenderingcontext/texsubimage2d",
        "syntax": "// WebGL 1: void gl.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, ArrayBufferView? pixels);\n or  void gl.texSubImage2D(target, level, xoffset, yoffset, format, type, ImageData? pixels);\n or  void gl.texSubImage2D(target, level, xoffset, yoffset, format, type, HTMLImageElement? pixels);\n or  void gl.texSubImage2D(target, level, xoffset, yoffset, format, type, HTMLCanvasElement? pixels);\n or  void gl.texSubImage2D(target, level, xoffset, yoffset, format, type, HTMLVideoElement? pixels);\n or  void gl.texSubImage2D(target, level, xoffset, yoffset, format, type, ImageBitmap? pixels);\n or  // WebGL 2: void gl.texSubImage2D(target, level, xoffset, yoffset, format, type, GLintptr offset);\n or  void gl.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, HTMLCanvasElement source);\n or  void gl.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, HTMLImageElement source);\n or  void gl.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, HTMLVideoElement source);\n or  void gl.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, ImageBitmap source);\n or  void gl.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, ImageData source);\n or  void gl.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, ArrayBufferView srcData, srcOffset);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.uniform": {
        "descr": "The WebGLRenderingContext.uniform[1234][fi][v]() methods of the WebGL API specify values of uniform variables.",
        "name": "WebGLRenderingContext.uniform",
        "params": [
            {
                "descr": "A WebGLUniformLocation object containing the location of the uniform attribute to modify.",
                "name": "location"
            },
            {
                "descr": "A new value to be used for the uniform variable. ",
                "name": "value, v0, v1, v2, v3"
            }
        ],
        "path": "dom/webglrenderingcontext/uniform",
        "syntax": "void gl.uniform1f(location, v0);\n or  void gl.uniform1fv(location, value);\n or  void gl.uniform1i(location, v0);\n or  void gl.uniform1iv(location, value);\n or  void gl.uniform2f(location, v0, v1);\n or  void gl.uniform2fv(location, value);\n or  void gl.uniform2i(location, v0, v1);\n or  void gl.uniform2iv(location, value);\n or  void gl.uniform3f(location, v0, v1, v2);\n or  void gl.uniform3fv(location, value);\n or  void gl.uniform3i(location, v0, v1, v2);\n or  void gl.uniform3iv(location, value);\n or  void gl.uniform4f(location, v0, v1, v2, v3);\n or  void gl.uniform4fv(location, value);\n or  void gl.uniform4i(location, v0, v1, v2, v3);\n or  void gl.uniform4iv(location, value);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.uniformMatrix": {
        "descr": "The WebGLRenderingContext.uniformMatrix[234]fv() methods of the WebGL API specify matrix values for uniform variables.",
        "name": "WebGLRenderingContext.uniformMatrix",
        "params": [
            {
                "descr": "A WebGLUniformLocation object containing the location of the uniform attribute to modify. ",
                "name": "location"
            },
            {
                "descr": "A GLboolean specifying whether to transpose the matrix. ",
                "name": "transpose"
            },
            {
                "descr": "A Float32Array or sequence of GLfloat values.",
                "name": "value"
            }
        ],
        "path": "dom/webglrenderingcontext/uniformmatrix",
        "syntax": "WebGLRenderingContext.uniformMatrix2fv(location, transpose, value);\n or  WebGLRenderingContext.uniformMatrix3fv(location, transpose, value);\n or  WebGLRenderingContext.uniformMatrix4fv(location, transpose, value);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.useProgram": {
        "descr": "The WebGLRenderingContext.useProgram() method of the WebGL API sets the specified WebGLProgram as part of the current rendering state.",
        "name": "WebGLRenderingContext.useProgram",
        "params": [
            {
                "descr": "A WebGLProgram to use.",
                "name": "program"
            }
        ],
        "path": "dom/webglrenderingcontext/useprogram",
        "syntax": "void gl.useProgram(program);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.validateProgram": {
        "descr": "The WebGLRenderingContext.validateProgram() method of the WebGL API validates a WebGLProgram. It checks if it is successfully linked and if it can be used in the current WebGL state.",
        "name": "WebGLRenderingContext.validateProgram",
        "params": [
            {
                "descr": "A WebGLProgram to validate.",
                "name": "program"
            }
        ],
        "path": "dom/webglrenderingcontext/validateprogram",
        "syntax": "void gl.validateProgram(program);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.vertexAttrib": {
        "descr": "The WebGLRenderingContext.vertexAttrib[1234]f[v]() methods of the WebGL API specify constant values for generic vertex attributes.",
        "name": "WebGLRenderingContext.vertexAttrib",
        "params": [
            {
                "descr": "A GLuint specifying the position of the vertex attribute to be modified.",
                "name": "index"
            },
            {
                "descr": "A floating point Number for the vertex attribute value.",
                "name": "v0, v1, v2, v3"
            },
            {
                "descr": "A Float32Array for floating point vector vertex attribute values.",
                "name": "value"
            }
        ],
        "path": "dom/webglrenderingcontext/vertexattrib",
        "syntax": "void gl.vertexAttrib1f(index, v0);\n or  void gl.vertexAttrib2f(index, v0, v1);\n or  void gl.vertexAttrib3f(index, v0, v1, v2);\n or  void gl.vertexAttrib4f(index, v0, v1, v2, v3);\n or  void gl.vertexAttrib1fv(index, value);\n or  void gl.vertexAttrib2fv(index, value);\n or  void gl.vertexAttrib3fv(index, value);\n or  void gl.vertexAttrib4fv(index, value);",
        "type": "WebGL"
    },
    "WebGLRenderingContext.vertexAttribPointer": {
        "descr": "None.",
        "name": "WebGLRenderingContext.vertexAttribPointer",
        "params": [
            {
                "descr": "A GLuint specifying the index of the vertex attribute that is to be modified.",
                "name": "index"
            },
            {
                "descr": "A GLint specifying the number of components per vertex attribute. ",
                "name": "size"
            },
            {
                "descr": "A GLenum specifying the data type of each component in the array. ",
                "name": "type"
            },
            {
                "descr": "A GLboolean specifying whether integer data values should be normalized into a certain range when being casted to a float. ",
                "name": "normalized"
            },
            {
                "descr": "A GLsizei specifying the offset in bytes between the beginning of consecutive vertex attributes. ",
                "name": "stride"
            },
            {
                "descr": "A GLintptr specifying an offset in bytes of the first component in the vertex attribute array. ",
                "name": "offset"
            }
        ],
        "path": "dom/webglrenderingcontext/vertexattribpointer",
        "syntax": "void gl.vertexAttribPointer(index, size, type, normalized, stride, offset);",
        "type": "Pointer Events"
    },
    "WebGLRenderingContext.viewport": {
        "descr": "The WebGLRenderingContext.viewport() method of the WebGL API sets the viewport, which specifies the affine transformation of x and y from normalized device coordinates to window coordinates.",
        "name": "WebGLRenderingContext.viewport",
        "params": [
            {
                "descr": "A GLint specifying the horizontal coordinate for the lower left corner of the viewport origin. ",
                "name": "x"
            },
            {
                "descr": "A GLint specifying the vertical coordinate for the lower left corner of the viewport origin. ",
                "name": "y"
            },
            {
                "descr": "A non-negative Glsizei specifying the width of the viewport. ",
                "name": "width"
            },
            {
                "descr": "A non-negative Glsizei specifying the height of the viewport. ",
                "name": "height"
            }
        ],
        "path": "dom/webglrenderingcontext/viewport",
        "syntax": "void gl.viewport(x, y, width, height);",
        "type": "WebGL"
    },
    "WebRTC API: Intro to RTP": {
        "descr": "Draft This page is not complete.",
        "name": "WebRTC API: Intro to RTP",
        "params": [
            {
                "descr": "RTCRtpSenders handle the encoding and transmission of MediaStreamTrack data to a remote peer. ",
                "name": "RTCRtpSender"
            },
            {
                "descr": "RTCRtpReceivers provide the ability to inspect and obtain information about incoming MediaStreamTrack data. ",
                "name": "RTCRtpReceiver"
            },
            {
                "descr": "An RTCRtpTransceiver is a pair of one RTP sender and one RTP receiver which share an SDP mid attribute, which means they share the same SDP media m-line (representing a bidirectional SRTP stream). ",
                "name": "RTCRtpTransceiver"
            }
        ],
        "path": "dom/webrtc_api/intro_to_rtp",
        "syntax": "RTCPeerConnection has methods which provide access to the list of RTP transports that service the peer connection. These correspond to the following three types of transport supported by RTCPeerConnection:  RTCRtpSender  RTCRtpSenders handle the encoding and transmission of MediaStreamTrack data to a remote peer. The senders for a given connection can be obtained by calling RTCPeerConnection.getSenders()",
        "type": "WebRTC"
    },
    "WebRTC API: Signaling and video calling": {
        "descr": "WebRTC allows real-time, peer-to-peer, media exchange between two devices. A connection is established through a discovery and negotiation process called signaling. This tutorial will guide you through building a two-way video-call.",
        "name": "WebRTC API: Signaling and video calling",
        "params": [
            {
                "descr": "The message type; either \"video-offer\" or \"video-answer\".",
                "name": "type"
            },
            {
                "descr": "The sender's username.",
                "name": "name"
            },
            {
                "descr": "The username of the person to receive the description (if the caller is sending the message, this specifies the callee, and vice-versa).",
                "name": "target"
            },
            {
                "descr": "The SDP (Session Description Protocol) string describing the local end of the connection from the perspective of the sender (or the remote end of the conection from the receiver's point of view).",
                "name": "sdp"
            },
            {
                "descr": "The message type: \"new-ice-candidate\".",
                "name": "type"
            },
            {
                "descr": "The username of the person with whom negotiation is underway; the server will direct the message to this user only.",
                "name": "target"
            },
            {
                "descr": "The SDP candidate string, describing the proposed connection method. ",
                "name": "candidate"
            },
            {
                "descr": "The local ICE layer calls your icecandidate event handler, when it needs you to transmit an ICE candidate to the other peer, through your signaling server. ",
                "name": "RTCPeerConnection.onicecandidate"
            },
            {
                "descr": "This handler for the track event is called by the local WebRTC layer when a track is added to the connection. ",
                "name": "RTCPeerConnection.ontrack"
            },
            {
                "descr": "This function is called whenever the WebRTC infrastructure needs you to start the session negotiation process anew. ",
                "name": "RTCPeerConnection.onnegotiationneeded"
            },
            {
                "descr": "This counterpart to ontrack is called to handle the removetrack event; it's sent to the RTCPeerConnection when the remote peer removes a track from the media being sent. ",
                "name": "RTCPeerConnection.onremovetrack"
            },
            {
                "descr": "The iceconnectionstatechange event is sent by the ICE layer to let you know about changes to the state of the ICE connection. ",
                "name": "RTCPeerConnection.oniceconnectionstatechange"
            },
            {
                "descr": "The ICE layer sends you the icegatheringstatechange event, when the ICE agent's process of collecting candidates shifts, from one state to another (such as starting to gather candidates or completing negotiation). See ICE gathering state below.",
                "name": "RTCPeerConnection.onicegatheringstatechange"
            },
            {
                "descr": "The WebRTC infrastructure sends you the signalingstatechange message when the state of the signaling process changes (or if the connection to the signaling server changes). ",
                "name": "RTCPeerConnection.onsignalingstatechange"
            },
            {
                "descr": "The message type: \"video-offer\".",
                "name": "type"
            },
            {
                "descr": "The caller's username.",
                "name": "name"
            },
            {
                "descr": "The name of the user we wish to call.",
                "name": "target"
            },
            {
                "descr": "The SDP string describing the offer.",
                "name": "sdp"
            },
            {
                "descr": "The message type: \"new-ice-candidate\".",
                "name": "type"
            },
            {
                "descr": "The username the ICE candidate needs to be delivered to. ",
                "name": "target"
            },
            {
                "descr": "The SDP representing the candidate the ICE layer wants to transmit to the other peer.",
                "name": "candidate"
            }
        ],
        "path": "dom/webrtc_api/signaling_and_video_calling",
        "syntax": "<div class=\"flexChild\" id=\"camera-container\"> <div class=\"camera-box\"> <video id=\"received_video\" autoplay></video> <video id=\"local_video\" autoplay muted></video> <button id=\"hangup-button\" onclick=\"hangUpCall();\n or \" disabled> Hang Up </button> </div> </div>);",
        "type": "WebRTC"
    },
    "WebRTC API: Simple RTCDataChannel sample": {
        "descr": "The RTCDataChannel interface is a feature of the WebRTC API which lets you open a channel between two peers over which you may send and receive arbitrary data. The API is intentionally similar to the WebSocket API, so that the same programming model can be used for each.",
        "name": "WebRTC API: Simple RTCDataChannel sample",
        "params": [],
        "path": "dom/webrtc_api/simple_rtcdatachannel_sample",
        "syntax": "load event listener, so that once the page is fully loaded, our startup()",
        "type": "WebRTC"
    },
    "WebRTC API: Taking still photos": {
        "descr": "This article shows how to use WebRTC to access the camera on a computer or mobile phone with WebRTC support and take a photo with it. Try this sample then read on to learn how it works.",
        "name": "WebRTC API: Taking still photos",
        "params": [
            {
                "descr": "Whatever size the incoming video is, we're going to scale the resulting image to be 320 pixels wide.",
                "name": "width"
            },
            {
                "descr": "The output height of the image will be computed given the width and the aspect ratio of the stream.",
                "name": "height"
            },
            {
                "descr": "Indicates whether or not there is currently an active stream of video running.",
                "name": "streaming"
            },
            {
                "descr": "This will be a reference to the <video> element after the page is done loading.",
                "name": "video"
            },
            {
                "descr": "This will be a reference to the <canvas> element after the page is done loading.",
                "name": "canvas"
            },
            {
                "descr": "This will be a reference to the <img> element after the page is done loading.",
                "name": "photo"
            },
            {
                "descr": "This will be a reference to the <button> element that's used to trigger capture. ",
                "name": "startbutton"
            }
        ],
        "path": "dom/webrtc_api/taking_still_photos",
        "syntax": "<div> to facilitate styling and control. The first panel on the left contains two components: a <video> element, which will receive the stream from WebRTC, and a <button> the user clicks to capture a video frame.  <div class=\"camera\"> <video id=\"video\">Video stream not available.</video> <button id=\"startbutton\">Take photo</button> </div> This is straightforward, and we'll see how it ties together when we get into the JavaScript code. Next, we have a <canvas> element into which the captured frames are stored, potentially manipulated in some way, and then converted into an output image file. This canvas is kept hidden by styling the canvas with display:none, to avoid cluttering up the screen — the user does not need to see this intermediate stage. We also have an <img> element into which we will draw the image — this is the final display shown to the user.  <canvas id=\"canvas\"> </canvas> <div class=\"output\"> <img id=\"photo\" alt=\"The screen capture will appear in this box.\"> </div> That's all of the relevant HTML. The rest is just some page layout fluff and a bit of text offering a link back to this page. The JavaScript code Now let's take a look at the JavaScript code. We'll break it up into a few bite-sized pieces to make it easier to explain. Initialization We start by wrapping the whole script in an anonymous function to avoid global variables, then setting up various variables we'll be using. (function() { var width = 320; // We will scale the photo width to this var height = 0; // This will be computed based on the input stream var streaming = false; var video = null; var canvas = null; var photo = null; var startbutton = null;",
        "type": "WebRTC"
    },
    "WebRTC API: Using data channels": {
        "descr": "Draft This page is not complete.",
        "name": "WebRTC API: Using data channels",
        "params": [],
        "path": "dom/webrtc_api/using_data_channels",
        "syntax": "RTCDataChannel, the encryption used is Datagram Transport Layer Security (DTLS), which is based on Transport Layer Security (TLS). Since TLS is used to secure every HTTPS connection, any data you send on a data channel is as secure as any other data sent or received by the user's browser.",
        "type": "WebRTC"
    },
    "WebSocket.close": {
        "descr": "The WebSocket.close() method closes the WebSocket connection or connection attempt, if any. If the connection is already CLOSED, this method does nothing.",
        "name": "WebSocket.close",
        "params": [
            {
                "descr": "A numeric value indicating the status code explaining why the connection is being closed. ",
                "name": "code Optional"
            },
            {
                "descr": "A human-readable string explaining why the connection is closing. ",
                "name": "reason Optional"
            },
            {
                "descr": "An invalid code was specified.",
                "name": "INVALID_ACCESS_ERR"
            },
            {
                "descr": "The reason string is too long or contains unpaired surrogates.",
                "name": "SYNTAX_ERR"
            }
        ],
        "path": "dom/websocket/close",
        "syntax": "WebSocket.close();",
        "type": "Web Sockets"
    },
    "WebSocket.constructor": {
        "descr": "The WebSocket() constructor returns a new WebSocket object.",
        "name": "WebSocket.constructor",
        "params": [
            {
                "descr": "The URL to which to connect; this should be the URL to which the WebSocket server will respond.",
                "name": "url"
            },
            {
                "descr": "Either a single protocol string or an array of protocol strings. ",
                "name": "protocols Optional"
            },
            {
                "descr": "The port to which the connection is being attempted is being blocked.",
                "name": "SECURITY_ERR"
            }
        ],
        "path": "dom/websocket/websocket",
        "syntax": "var ws = new WebSocket(\"ws://localhost:8080\");",
        "type": "Web Sockets"
    },
    "WebSocket.onclose": {
        "descr": "The WebSocket.onclose property returns the event listener to be called when the WebSocket connection's readyState changes to CLOSED. The listener receives a CloseEvent named \"close\".",
        "name": "WebSocket.onclose",
        "params": [],
        "path": "dom/websocket/onclose",
        "syntax": "aWebSocket.onclose = function(event) { console.log(\"WebSocket is closed now.\");\n or  };);",
        "type": "Web Sockets"
    },
    "WebSocket.onerror": {
        "descr": "The WebSocket.onerror property returns the event listener to be called when an error occurs. This is a simple event named \"error\".",
        "name": "WebSocket.onerror",
        "params": [],
        "path": "dom/websocket/onerror",
        "syntax": "aWebSocket.onerror = function(event) { console.error(\"WebSocket error observed:\", event);\n or  };);",
        "type": "Web Sockets"
    },
    "WebSocket.onmessage": {
        "descr": "The WebSocket.onmessage property returns the event listener to be called when a message is received from the server. The listener receives a MessageEvent named \"message\".",
        "name": "WebSocket.onmessage",
        "params": [],
        "path": "dom/websocket/onmessage",
        "syntax": "aWebSocket.onmessage = function(event) { console.debug(\"WebSocket message received:\", event);\n or  };);",
        "type": "Web Sockets"
    },
    "WebSocket.onopen": {
        "descr": "The WebSocket.onopen property returns the event listener to be called when the WebSocket connection's readyState changes to OPEN; this indicates that the connection is ready to send and receive data. The event is a simple one with the name \"open\".",
        "name": "WebSocket.onopen",
        "params": [],
        "path": "dom/websocket/onopen",
        "syntax": "aWebSocket.onopen = function(event) { console.log(\"WebSocket is open now.\");\n or  };);",
        "type": "Web Sockets"
    },
    "WebSocket.readyState": {
        "descr": "The WebSocket.readyState read-only property returns the current state of the WebSocket connection.",
        "name": "WebSocket.readyState",
        "params": [
            {
                "descr": "The connection is not yet open.",
                "name": "0 (CONNECTING)"
            },
            {
                "descr": "The connection is open and ready to communicate.",
                "name": "1 (OPEN)"
            },
            {
                "descr": "The connection is in the process of closing.",
                "name": "2 (CLOSING)"
            },
            {
                "descr": "The connection is closed or couldn't be opened.",
                "name": "3 (CLOSED)"
            }
        ],
        "path": "dom/websocket/readystate",
        "syntax": "var readyState = aWebSocket.readyState; Value One of the following unsigned short values:  0 (CONNECTING) The connection is not yet open. 1 (OPEN",
        "type": "Web Sockets"
    },
    "WebSocket.send": {
        "descr": "The WebSocket.send() method enqueues the specified data to be transmitted to the server over the WebSocket connection, increasing the value of bufferedAmount by the number of bytes needed to contain the data. If the data can't be sent (for example, because it needs to be buffered but the buffer is full), the socket is closed automatically.",
        "name": "WebSocket.send",
        "params": [
            {
                "descr": "The data to send to the server. ",
                "name": "data"
            },
            {
                "descr": "You can send the underlying binary data used by a typed array object; its binary data contents are queued in the buffer, increasing the value of bufferedAmount by the requisite number of bytes.",
                "name": "ArrayBuffer"
            },
            {
                "descr": "Specifying a Blob enqueues the blob's raw data to be transmitted in a binary frame. ",
                "name": "Blob"
            },
            {
                "descr": "You can send any JavaScript typed array object as a binary frame; its binary data contents are queued in the buffer, increasing the value of bufferedAmount by the requisite number of bytes.",
                "name": "ArrayBufferView"
            },
            {
                "descr": "The connection is not currently OPEN.",
                "name": "INVALID_STATE_ERR"
            },
            {
                "descr": "The data is a string that has unpaired surrogates.",
                "name": "SYNTAX_ERR"
            }
        ],
        "path": "dom/websocket/send",
        "syntax": "aWebSocket.send(\"Hello server!\");",
        "type": "Web Sockets"
    },
    "WebSockets API: Writing WebSocket client applications": {
        "descr": "WebSocket client applications use the WebSocket API to communicate with WebSocket servers over the WebSocket protocol.",
        "name": "WebSockets API: Writing WebSocket client applications",
        "params": [
            {
                "descr": "The URL to which to connect; this should be the URL to which the WebSocket server will respond.",
                "name": "url"
            },
            {
                "descr": "Either a single protocol string or an array of protocol strings. ",
                "name": "protocols Optional"
            },
            {
                "descr": "The port to which the connection is being attempted is being blocked.",
                "name": "SECURITY_ERR"
            }
        ],
        "path": "dom/websockets_api/writing_websocket_client_applications",
        "syntax": "CloseEvent. Examples This simple example creates a new WebSocket, connecting to the server at ws://www.example.com/socketserver. A custom protocol of \"protocolOne\" is named in the request for the socket in this example, though this can be omitted. var exampleSocket = new WebSocket(\"ws://www.example.com/socketserver\", \"protocolOne\");",
        "type": "Web Sockets"
    },
    "WebSockets API: Writing WebSocket server": {
        "descr": "If you would like to use the WebSocket API, it is useful if you have a server. In this article I will show you how to write one in C#. You can do it in any server-side language, but to keep things simple and more understandable, I chose Microsoft's language.",
        "name": "WebSockets API: Writing WebSocket server",
        "params": [],
        "path": "dom/websockets_api/writing_websocket_server",
        "syntax": "if (new System.Text.RegularExpressions.Regex(\"^GET\").IsMatch(data)) { const string eol = \"\\r\\n\"; // HTTP/1.1 defines the sequence CR LF as the end-of-line marker Byte[] response = Encoding.UTF8.GetBytes(\"HTTP/1.1 101 Switching Protocols\" + eol + \"Connection: Upgrade\" + eol + \"Upgrade: websocket\" + eol + \"Sec-WebSocket-Accept: \" + Convert.ToBase64String( System.Security.Cryptography.SHA1.Create().ComputeHash( Encoding.UTF8.GetBytes( new System.Text.RegularExpressions.Regex(\"Sec-WebSocket-Key: (.*)\").Match(data).Groups[1].Value.Trim() + \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\" ) ) ) + eol + eol);\n or  stream.Write(response, 0, response.Length);\n or  });",
        "type": "Web Sockets"
    },
    "WebSockets API: Writing WebSocket servers": {
        "descr": "A WebSocket server is a TCP application listening on any port of a server that follows a specific protocol, simple as that. The task of creating a custom server tends to scare people; however, it can be easy to implement a simple WebSocket server on your platform of choice.",
        "name": "WebSockets API: Writing WebSocket servers",
        "params": [],
        "path": "dom/websockets_api/writing_websocket_servers",
        "syntax": "\\r\\n and put an extra \\r\\n after the last one):",
        "type": "Web Sockets"
    },
    "WebSockets API: Writing a WebSocket server in Java": {
        "descr": "This example shows you how to create a WebSocket API server using Oracle Java.  Although other server-side languages can be used to create a WebSocket server, this example uses Oracle Java to simplify the example code.",
        "name": "WebSockets API: Writing a WebSocket server in Java",
        "params": [],
        "path": "dom/websockets_api/writing_a_websocket_server_in_java",
        "syntax": "message. Decoding algorithm decoded byte = encoded byte XOR (position of encoded byte BITWISE AND 0x3)th byte of key",
        "type": "Web Sockets"
    },
    "WebVR API: Concepts": {
        "descr": "Virtual reality is nothing new — the concept goes way further back than the Oculus Rift Kickstarter campaign of 2012. People have been experimenting with it for decades.",
        "name": "WebVR API: Concepts",
        "params": [],
        "path": "dom/webvr_api/concepts",
        "syntax": "the perception of two slightly differing images (one from each eye) as a single image. This results in depth perception, helping us to see the world in glorious 3D. To recreate this in VR apps, you need to render two very slightly different views side by side, which will be taken in by the left and right eyes when the user is using the HMD.",
        "type": "WebVR"
    },
    "WebVR API: Using VR controllers with WebVR": {
        "descr": "The WebVR API is a nascent, but very interesting new feature of the web platform that allows developers to create web-based virtual reality experiences. It does this by providing access to VR headsets connected to your computer as VRDisplay objects, which can be manipulated to start and stop presentation to the display, queried for movement data (e.g. orientation and position) that can be used to update the display on each frame of the animation loop, and more.",
        "name": "WebVR API: Using VR controllers with WebVR",
        "params": [],
        "path": "dom/webvr_api/using_vr_controllers_with_webvr",
        "syntax": "gamepadconnected and gamepaddisconnected — and it is fairly obvious what they do. At the end of our example we first include the removeGamepads()",
        "type": "WebVR"
    },
    "WebVR API: Using the WebVR API": {
        "descr": "Note: The WebVR API's most stable version — 1.1 — has recently been implemented in Firefox 55 (Windows in release version, and Mac OS X on Nightly only) and is also available in Chrome when used with Google Daydream hardware. There is also a later evolution of the spec — 2.0 — but this is at an early stage right now. You can find information on the latest state of the specs at WebVR Spec Version List.",
        "name": "WebVR API: Using the WebVR API",
        "params": [],
        "path": "dom/webvr_api/using_the_webvr_api",
        "syntax": "// WebVR variables var frameData = new VRFrameData();\n or  var vrDisplay; var btn = document.querySelector('.stop-start');\n or  var normalSceneFrame; var vrSceneFrame; var poseStatsBtn = document.querySelector('.pose-stats');\n or  var poseStatsSection = document.querySelector('section');\n or  poseStatsSection.style.visibility = 'hidden'; // hide it initially var posStats = document.querySelector('.pos');\n or  var orientStats = document.querySelector('.orient');\n or  var linVelStats = document.querySelector('.lin-vel');\n or  var linAccStats = document.querySelector('.lin-acc');\n or  var angVelStats = document.querySelector('.ang-vel');\n or  var angAccStats = document.querySelector('.ang-acc');\n or  var poseStatsDisplayed = false;);",
        "type": "WebVR"
    },
    "WebVTT API": {
        "descr": "Web Video Text Tracks Format (WebVTT) is a format for displaying timed text tracks (such as subtitles or captions) using the <track> element. The primary purpose of WebVTT files is to add text overlays to a <video>. WebVTT is a text based format, which must be encoded using UTF-8. Where you can use spaces you can also use tabs. There is also a small API available to represent and manage these tracks and the data needed to perform the playback of the text at the correct times.",
        "name": "WebVTT API",
        "params": [],
        "path": "dom/webvtt_api",
        "syntax": "-->\", the ampersand character (&), or the less-than sign (<). If you wish to use such characters, you need to escape them using for example &amp;",
        "type": "WebVTT"
    },
    "WheelEvent.constructor": {
        "descr": "The WheelEvent() constructor returns a newly created WheelEvent object.",
        "name": "WheelEvent.constructor",
        "params": [
            {
                "descr": "Is a DOMString representing the name of the event.",
                "name": "typeArg"
            },
            {
                "descr": "Is a WheelEventInit dictionary, having the following fields:   \"deltaX\", optional and defaulting to 0.0, is a double representing the horizontal scroll amount in the deltaMode unit. ",
                "name": "wheelEventInitOptional"
            }
        ],
        "path": "dom/wheelevent/wheelevent",
        "syntax": "var wheelEvent = new WheelEvent(typeArg, wheelEventInit);",
        "type": "Events"
    },
    "WheelEvent.deltaMode": {
        "descr": "The WheelEvent.deltaMode read-only property returns an unsigned long representing the unit of the delta values scroll amount. Permitted values are:",
        "name": "WheelEvent.deltaMode",
        "params": [],
        "path": "dom/wheelevent/deltamode",
        "syntax": "var unit = event.deltaMode; Example var syntheticEvent = new WheelEvent(\"syntheticWheel\", {\"deltaX\": 4, \"deltaMode\": 0});\n or  console.log(syntheticEvent.deltaMode);",
        "type": "Events"
    },
    "WheelEvent.deltaX": {
        "descr": "The WheelEvent.deltaX read-only property is a double representing the horizontal scroll amount in the WheelEvent.deltaMode unit.",
        "name": "WheelEvent.deltaX",
        "params": [],
        "path": "dom/wheelevent/deltax",
        "syntax": "var dX = event.deltaX; Example var syntheticEvent = new WheelEvent(\"syntheticWheel\", {\"deltaX\": 4, \"deltaMode\": 0});\n or  console.log(syntheticEvent.deltaX);",
        "type": "Events"
    },
    "WheelEvent.deltaY": {
        "descr": "The WheelEvent.deltaY read-only property is a double representing the vertical scroll amount in the WheelEvent.deltaMode unit.",
        "name": "WheelEvent.deltaY",
        "params": [],
        "path": "dom/wheelevent/deltay",
        "syntax": "var dY = event.deltaY; Example var syntheticEvent = new WheelEvent(\"syntheticWheel\", {\"deltaY\": 4, \"deltaMode\": 0});\n or  console.log(syntheticEvent.deltaY);",
        "type": "Events"
    },
    "WheelEvent.deltaZ": {
        "descr": "The WheelEvent.deltaZ read-only property is a double representing the scroll amount along the z-axis, in the WheelEvent.deltaMode unit.",
        "name": "WheelEvent.deltaZ",
        "params": [],
        "path": "dom/wheelevent/deltaz",
        "syntax": "var dZ = event.deltaZ; Example var syntheticEvent = new WheelEvent(\"syntheticWheel\", {\"deltaZ\": 4, \"deltaMode\": 0});\n or  console.log(syntheticEvent.deltaZ);",
        "type": "Events"
    },
    "Window": {
        "descr": "The Window interface represents a window containing a DOM document; the document property points to the DOM document loaded in that window. A window for a given document can be obtained using the document.defaultView property.",
        "name": "Window",
        "params": [
            {
                "descr": "This property indicates whether the current window is closed or not.",
                "name": "Window.closed Read only"
            },
            {
                "descr": "Returns a reference to the console object which provides access to the browser's debugging console.",
                "name": "Window.console Read only"
            },
            {
                "descr": "Returns a reference to the content element in the current window. ",
                "name": "Window.content and Window._content Read only"
            },
            {
                "descr": "Returns the XUL controller objects for the current chrome window.",
                "name": "Window.controllers Read only"
            },
            {
                "descr": "returns a reference to the CustomElementRegistry object, which can be used to register new custom elements and get information about previously registered custom elements.",
                "name": "Window.customElements Read only"
            },
            {
                "descr": "Returns the browser crypto object.",
                "name": "Window.crypto Read only"
            },
            {
                "descr": "Gets/sets the status bar text for the given window.",
                "name": "Window.defaultStatus Obsolete since Gecko 23"
            },
            {
                "descr": "Returns the ratio between physical pixels and device independent pixels in the current display.",
                "name": "Window.devicePixelRatio Read only"
            },
            {
                "descr": "Gets the arguments passed to the window (if it's a dialog box) at the time window.showModalDialog() was called. ",
                "name": "Window.dialogArguments Read only"
            },
            {
                "descr": "Synonym of window.personalbar",
                "name": "Window.directories"
            },
            {
                "descr": "Returns a reference to the document that the window contains.",
                "name": "Window.document Read only"
            },
            {
                "descr": "Returns a reference to a DOMMatrix object, which represents 4x4 matrices, suitable for 2D and 3D operations.",
                "name": "Window.DOMMatrix Read only"
            },
            {
                "descr": "Returns a reference to a DOMMatrixReadOnly object, which represents 4x4 matrices, suitable for 2D and 3D operations.",
                "name": "Window.DOMMatrixReadOnly Read only"
            },
            {
                "descr": "Returns a reference to a DOMPoint object, which represents a 2D or 3D point in a coordinate system.",
                "name": "Window.DOMPoint Read only"
            },
            {
                "descr": "Returns a reference to a DOMPointReadOnly object, which represents a 2D or 3D point in a coordinate system.",
                "name": "Window.DOMPointReadOnly Read only"
            },
            {
                "descr": "Returns a reference to a DOMQuad object, which provides represents a quadrilaterial object, that is one having four corners and four sides.",
                "name": "Window.DOMQuad Read only"
            },
            {
                "descr": "Returns a reference to a DOMRect object, which represents a rectangle.",
                "name": "Window.DOMRect Read only"
            },
            {
                "descr": "Returns a reference to a DOMRectReadOnly object, which represents a rectangle.",
                "name": "Window.DOMRectReadOnly Read only"
            },
            {
                "descr": "Returns the current event, which is the event currently being handled by the JavaScript code's context, or undefined if no event is currently being handled. ",
                "name": "Window.event Read only"
            },
            {
                "descr": "Returns the element in which the window is embedded, or null if the window is not embedded.",
                "name": "Window.frameElement Read only"
            },
            {
                "descr": "Returns an array of the subframes in the current window.",
                "name": "Window.frames Read only"
            },
            {
                "descr": "This property indicates whether the window is displayed in full screen or not.",
                "name": "Window.fullScreen"
            },
            {
                "descr": "Unsupported since Gecko 13 (Firefox 13). ",
                "name": "Window.globalStorage Obsolete since Gecko 13"
            },
            {
                "descr": "Returns a reference to the history object.",
                "name": "Window.history Read only"
            },
            {
                "descr": "Gets the height of the content area of the browser window including, if rendered, the horizontal scrollbar.",
                "name": "Window.innerHeight Read only"
            },
            {
                "descr": "Gets the width of the content area of the browser window including, if rendered, the vertical scrollbar.",
                "name": "Window.innerWidth Read only"
            },
            {
                "descr": "Indicates whether a context is capable of using features that require secure contexts.",
                "name": "Window.isSecureContext Read only"
            },
            {
                "descr": "Returns the number of frames in the window. ",
                "name": "Window.length Read only"
            },
            {
                "descr": "Gets/sets the location, or current URL, of the window object.",
                "name": "Window.location"
            },
            {
                "descr": "Returns the locationbar object, whose visibility can be toggled in the window.",
                "name": "Window.locationbar Read only"
            },
            {
                "descr": "Returns a reference to the local storage object used to store data that may only be accessed by the origin that created it.",
                "name": "Window.localStorage Read only"
            },
            {
                "descr": "Returns the menubar object, whose visibility can be toggled in the window.",
                "name": "Window.menubar Read only"
            },
            {
                "descr": "Returns the message manager object for this window.",
                "name": "Window.messageManager"
            },
            {
                "descr": "The time in milliseconds since epoch at which the current animation cycle began. ",
                "name": "Window.mozAnimationStartTime Read only"
            },
            {
                "descr": "Returns the horizontal (X) coordinate of the top-left corner of the window's viewport, in screen coordinates. ",
                "name": "Window.mozInnerScreenX Read only"
            },
            {
                "descr": "Returns the vertical (Y) coordinate of the top-left corner of the window's viewport, in screen coordinates. ",
                "name": "Window.mozInnerScreenY Read only"
            },
            {
                "descr": "Returns the number of times the current document has been rendered to the screen in this window. ",
                "name": "Window.mozPaintCount Read only"
            },
            {
                "descr": "Gets/sets the name of the window.",
                "name": "Window.name"
            },
            {
                "descr": "Returns a reference to the navigator object.",
                "name": "Window.navigator Read only"
            },
            {
                "descr": "Returns a reference to the window that opened this current window.",
                "name": "Window.opener"
            },
            {
                "descr": "Returns the orientation in degrees (in 90 degree increments) of the viewport relative to the device's natural orientation.",
                "name": "Window.orientation Read only"
            },
            {
                "descr": "Gets the height of the outside of the browser window.",
                "name": "Window.outerHeight Read only"
            },
            {
                "descr": "Gets the width of the outside of the browser window.",
                "name": "Window.outerWidth Read only"
            },
            {
                "descr": "An alias for window.scrollX.",
                "name": "Window.pageXOffset Read only"
            },
            {
                "descr": "An alias for window.scrollY",
                "name": "Window.pageYOffset Read only"
            },
            {
                "descr": "Returns a reference to the parent of the current window or subframe.",
                "name": "Window.parent Read only"
            },
            {
                "descr": "Returns a Performance object, which includes the timing and navigation attributes, each of which is an object providing performance-related data. ",
                "name": "Window.performance Read only"
            },
            {
                "descr": "Returns the personalbar object, whose visibility can be toggled in the window.",
                "name": "Window.personalbar Read only"
            },
            {
                "descr": "Formerly provided access to install and remove PKCS11 modules.",
                "name": "Window.pkcs11 Obsolete since Gecko 29"
            },
            {
                "descr": "The return value to be returned to the function that called window.showModalDialog() to display the window as a modal dialog.",
                "name": "Window.returnValue"
            },
            {
                "descr": "Returns a reference to the screen object associated with the window.",
                "name": "Window.screen Read only"
            },
            {
                "descr": "Both properties return the horizontal distance from the left border of the user's browser viewport to the left side of the screen.",
                "name": "Window.screenX and Window.screenLeft Read only"
            },
            {
                "descr": "Both properties return the vertical distance from the top border of the user's browser viewport to the top side of the screen.",
                "name": "Window.screenY and Window.screenTop Read only"
            },
            {
                "descr": "Returns the scrollbars object, whose visibility can be toggled in the window.",
                "name": "Window.scrollbars Read only"
            },
            {
                "descr": "The maximum offset that the window can be scrolled to horizontally, that is the document width minus the viewport width.",
                "name": "Window.scrollMaxX Read only"
            },
            {
                "descr": "The maximum offset that the window can be scrolled to vertically (i.e., the document height minus the viewport height).",
                "name": "Window.scrollMaxY Read only"
            },
            {
                "descr": "Returns the number of pixels that the document has already been scrolled horizontally.",
                "name": "Window.scrollX Read only"
            },
            {
                "descr": "Returns the number of pixels that the document has already been scrolled vertically.",
                "name": "Window.scrollY Read only"
            },
            {
                "descr": "Returns an object reference to the window object itself.",
                "name": "Window.self Read only"
            },
            {
                "descr": "Returns a reference to the session storage object used to store data that may only be accessed by the origin that created it.",
                "name": "Window.sessionStorage"
            },
            {
                "descr": "Returns a reference to the window object of the sidebar.",
                "name": "Window.sidebar Read only"
            },
            {
                "descr": "Returns a SpeechSynthesis object, which is the entry point into using Web Speech API speech synthesis functionality.",
                "name": "Window.speechSynthesis Read only"
            },
            {
                "descr": "Gets/sets the text in the statusbar at the bottom of the browser.",
                "name": "Window.status"
            },
            {
                "descr": "Returns the statusbar object, whose visibility can be toggled in the window.",
                "name": "Window.statusbar Read only"
            },
            {
                "descr": "Returns the toolbar object, whose visibility can be toggled in the window.",
                "name": "Window.toolbar Read only"
            },
            {
                "descr": "Returns a reference to the topmost window in the window hierarchy. ",
                "name": "Window.top Read only"
            },
            {
                "descr": "Returns a VisualViewport object which represents the visual viewport for a given window.",
                "name": "Window.visualViewport Read only"
            },
            {
                "descr": "Returns a reference to the current window.",
                "name": "Window.window Read only"
            },
            {
                "descr": "Returns a reference to the window object in the frames. ",
                "name": "window[0], window[1], etc."
            },
            {
                "descr": "Returns the CacheStorage object associated with the current context. ",
                "name": "WindowOrWorkerGlobalScope.caches Read only"
            },
            {
                "descr": "Provides a mechanism for applications to asynchronously access capabilities of indexed databases; returns an IDBFactory object.",
                "name": "WindowOrWorkerGlobalScope.indexedDB Read only"
            },
            {
                "descr": "Returns a boolean indicating whether the current context is secure (true) or not (false).",
                "name": "WindowOrWorkerGlobalScope.isSecureContext Read only"
            },
            {
                "descr": "Returns the global object's origin, serialized as a string. ",
                "name": "WindowOrWorkerGlobalScope.origin Read only"
            },
            {
                "descr": "Displays an alert dialog.",
                "name": "Window.alert()"
            },
            {
                "descr": "Moves back one in the window history. ",
                "name": "Window.back()"
            },
            {
                "descr": "Sets focus away from the window.",
                "name": "Window.blur()"
            },
            {
                "descr": "Enables you to cancel a callback previously scheduled with Window.requestAnimationFrame.",
                "name": "Window.cancelAnimationFrame()"
            },
            {
                "descr": "Enables you to cancel a callback previously scheduled with Window.requestIdleCallback.",
                "name": "Window.cancelIdleCallback()"
            },
            {
                "descr": "Registers the window to capture all events of the specified type.",
                "name": "Window.captureEvents()"
            },
            {
                "descr": "Cancels the repeated execution set using setImmediate.",
                "name": "Window.clearImmediate()"
            },
            {
                "descr": "Closes the current window.",
                "name": "Window.close()"
            },
            {
                "descr": "Displays a dialog with a message that the user needs to respond to.",
                "name": "Window.confirm()"
            },
            {
                "descr": "Used to trigger an event.",
                "name": "Window.disableExternalCapture() Obsolete since Gecko 24  Window.dispatchEvent()"
            },
            {
                "descr": "Writes a message to the console.",
                "name": "Window.dump()"
            },
            {
                "descr": "Searches for a given string in a window.",
                "name": "Window.enableExternalCapture() Obsolete since Gecko 24  Window.find()"
            },
            {
                "descr": "Sets focus on the current window.",
                "name": "Window.focus()"
            },
            {
                "descr": "Moves the window one document forward in the history. ",
                "name": "Window.forward()"
            },
            {
                "descr": "Flashes the application icon.",
                "name": "Window.getAttention()"
            },
            {
                "descr": "Gets computed style for the specified element. ",
                "name": "Window.getAttentionWithCycleCount() Window.getComputedStyle()"
            },
            {
                "descr": "Gets default computed style for the specified element, ignoring author stylesheets.",
                "name": "Window.getDefaultComputedStyle()"
            },
            {
                "descr": "Returns the selection object representing the selected item(s).",
                "name": "Window.getSelection()"
            },
            {
                "descr": "Returns the browser to the home page.",
                "name": "Window.home()"
            },
            {
                "descr": "Returns a MediaQueryList object representing the specified media query string.",
                "name": "Window.matchMedia()"
            },
            {
                "descr": "Minimizes the window.",
                "name": "Window.maximize()  Window.minimize() (top-level XUL windows only)"
            },
            {
                "descr": "Moves the current window by a specified amount.",
                "name": "Window.moveBy()"
            },
            {
                "descr": "Moves the window to the specified coordinates.",
                "name": "Window.moveTo()"
            },
            {
                "descr": "Opens a new window.",
                "name": "Window.open()"
            },
            {
                "descr": "Opens a new dialog window.",
                "name": "Window.openDialog()"
            },
            {
                "descr": "Provides a secure means for one window to send a string of data to another window, which need not be within the same domain as the first.",
                "name": "Window.postMessage()"
            },
            {
                "descr": "Opens the Print Dialog to print the current document.",
                "name": "Window.print()"
            },
            {
                "descr": "Returns the text entered by the user in a prompt dialog.",
                "name": "Window.prompt()"
            },
            {
                "descr": "Releases the window from trapping events of a specific type.",
                "name": "Window.releaseEvents()"
            },
            {
                "descr": "Tells the browser that an animation is in progress, requesting that the browser schedule a repaint of the window for the next animation frame.",
                "name": "Window.requestAnimationFrame()"
            },
            {
                "descr": "Enables the scheduling of tasks during a browser's idle periods.",
                "name": "Window.requestIdleCallback()"
            },
            {
                "descr": "Resizes the current window by a certain amount.",
                "name": "Window.resizeBy()"
            },
            {
                "descr": "Dynamically resizes window.",
                "name": "Window.resizeTo()"
            },
            {
                "descr": "Scrolls the window to a particular place in the document.",
                "name": "Window.restore()   Window.routeEvent() Obsolete since Gecko 24  Window.scroll()"
            },
            {
                "descr": "Scrolls the document in the window by the given amount.",
                "name": "Window.scrollBy()"
            },
            {
                "descr": "Scrolls the document by the given number of lines.",
                "name": "Window.scrollByLines()"
            },
            {
                "descr": "Scrolls the current document by the specified number of pages.",
                "name": "Window.scrollByPages()"
            },
            {
                "descr": "Scrolls to a particular set of coordinates in the document.",
                "name": "Window.scrollTo()"
            },
            {
                "descr": "Changes the cursor for the current window",
                "name": "Window.setCursor() (top-level XUL windows only)"
            },
            {
                "descr": "Executes a function after the browser has finished other heavy tasks",
                "name": "Window.setImmediate()"
            },
            {
                "descr": "Toggles a user's ability to resize a window.",
                "name": "Window.setResizable()"
            },
            {
                "descr": "Sizes the window according to its content.",
                "name": "Window.sizeToContent()"
            },
            {
                "descr": "This method stops window loading.",
                "name": "Window.stop()"
            },
            {
                "descr": "Updates the state of commands of the current chrome window (UI).",
                "name": "Window.updateCommands()"
            },
            {
                "descr": "Register an event handler to a specific event type on the window.",
                "name": "EventTarget.addEventListener()"
            },
            {
                "descr": "Decodes a string of data which has been encoded using base-64 encoding.",
                "name": "WindowOrWorkerGlobalScope.atob()"
            },
            {
                "descr": "Creates a base-64 encoded ASCII string from a string of binary data.",
                "name": "WindowOrWorkerGlobalScope.btoa()"
            },
            {
                "descr": "Cancels the repeated execution set using WindowOrWorkerGlobalScope.setInterval().",
                "name": "WindowOrWorkerGlobalScope.clearInterval()"
            },
            {
                "descr": "Cancels the delayed execution set using WindowOrWorkerGlobalScope.setTimeout().",
                "name": "WindowOrWorkerGlobalScope.clearTimeout()"
            },
            {
                "descr": "Accepts a variety of different image sources, and returns a Promise which resolves to an ImageBitmap. ",
                "name": "WindowOrWorkerGlobalScope.createImageBitmap()"
            },
            {
                "descr": "Starts the process of fetching a resource from the network.",
                "name": "WindowOrWorkerGlobalScope.fetch()"
            },
            {
                "descr": "Removes an event listener from the window.",
                "name": "EventTarget.removeEventListener"
            },
            {
                "descr": "Schedules a function to execute every time a given number of milliseconds elapses.",
                "name": "WindowOrWorkerGlobalScope.setInterval()"
            },
            {
                "descr": "Schedules a function to execute in a given amount of time.",
                "name": "WindowOrWorkerGlobalScope.setTimeout()"
            },
            {
                "descr": "Displays a modal dialog. This method was removed completely in Chrome 43, and Firefox 55.",
                "name": "Window.showModalDialog()"
            },
            {
                "descr": "Called when the page is installed as a webapp. ",
                "name": "Window.onappinstalled"
            },
            {
                "descr": "An event handler property dispatched before a user is prompted to save a web site to a home screen on mobile.",
                "name": "Window.onbeforeinstallprompt"
            },
            {
                "descr": "An event handler property for any ambient light levels changes",
                "name": "Window.ondevicelight"
            },
            {
                "descr": "Called if accelerometer detects a change (For mobile devices)",
                "name": "Window.ondevicemotion"
            },
            {
                "descr": "Called when the orientation is changed (For mobile devices)",
                "name": "Window.ondeviceorientation"
            },
            {
                "descr": "An event handler property for any device orientation changes.",
                "name": "Window.ondeviceorientationabsolute Chrome only"
            },
            {
                "descr": "An event handler property for device proximity event",
                "name": "Window.ondeviceproximity"
            },
            {
                "descr": "Represents an event handler that will run when a gamepad is connected (when the gamepadconnected event fires).",
                "name": "Window.ongamepadconnected"
            },
            {
                "descr": "Represents an event handler that will run when a gamepad is disconnected (when the gamepaddisconnected event fires).",
                "name": "Window.ongamepaddisconnected"
            },
            {
                "descr": "An event handler property for the MozBeforePaint event, which is sent before repainting the window if the event has been requested by a call to the Window.mozRequestAnimationFrame() method.",
                "name": "Window.onmozbeforepaint"
            },
            {
                "descr": "An event handler property for paint events on the window.",
                "name": "Window.onpaint"
            },
            {
                "descr": "An event handler for handled Promise rejection events.",
                "name": "Window.onrejectionhandled"
            },
            {
                "descr": "An event handler property for user proximity events.",
                "name": "Window.onuserproximity"
            },
            {
                "descr": "Represents an event handler that will run when a compatible VR device has been connected to the computer (when the vrdisplayconnected event fires).",
                "name": "Window.onvrdisplayconnect"
            },
            {
                "descr": "Represents an event handler that will run when a compatible VR device has been disconnected from the computer (when the vrdisplaydisconnected event fires).",
                "name": "Window.onvrdisplaydisconnect"
            },
            {
                "descr": "Represents an event handler that will run when a display is able to be presented to (when the vrdisplayactivate event fires), for example if an HMD has been moved to bring it out of standby, or woken up by being put on.",
                "name": "Window.onvrdisplayactivate"
            },
            {
                "descr": "Represents an event handler that will run when a display can no longer be presented to (when the vrdisplaydeactivate event fires), for example if an HMD has gone into standby or sleep mode due to a period of inactivity.",
                "name": "Window.onvrdisplaydeactivate"
            },
            {
                "descr": "Represents an event handler that will run when presentation to a display has been paused for some reason by the browser, OS, or VR hardware (when the vrdisplayblur event fires) — for example, while the user is interacting with a system menu or browser, to prevent tracking or loss of experience.",
                "name": "Window.onvrdisplayblur"
            },
            {
                "descr": "Represents an event handler that will run when presentation to a display has resumed after being blurred (when the vrdisplayfocus event fires).",
                "name": "Window.onvrdisplayfocus"
            },
            {
                "descr": "represents an event handler that will run when the presenting state of a VR device changes — i.e. ",
                "name": "Window.onvrdisplaypresentchange"
            },
            {
                "descr": "Called when the loading of a resource has been aborted, such as by a user canceling the load while it is still in progress",
                "name": "GlobalEventHandlers.onabort"
            },
            {
                "descr": "Called when the print dialog box is closed. ",
                "name": "WindowEventHandlers.onafterprint"
            },
            {
                "descr": "Called when the print dialog box is opened. ",
                "name": "WindowEventHandlers.onbeforeprint"
            },
            {
                "descr": "An event handler property for before-unload events on the window.",
                "name": "WindowEventHandlers.onbeforeunload"
            },
            {
                "descr": "Called after the window loses focus, such as due to a popup.",
                "name": "GlobalEventHandlers.onblur"
            },
            {
                "descr": "An event handler property for change events on the window.",
                "name": "GlobalEventHandlers.onchange"
            },
            {
                "descr": "Called after the ANY mouse button is pressed & released",
                "name": "GlobalEventHandlers.onclick"
            },
            {
                "descr": "Called when a double click is made with ANY mouse button.",
                "name": "GlobalEventHandlers.ondblclick"
            },
            {
                "descr": "Called after the window is closed",
                "name": "GlobalEventHandlers.onclose"
            },
            {
                "descr": "Called when the RIGHT mouse button is pressed",
                "name": "GlobalEventHandlers.oncontextmenu"
            },
            {
                "descr": "Called when a resource fails to load OR when an error occurs at runtime. ",
                "name": "GlobalEventHandlers.onerror"
            },
            {
                "descr": "Called after the window receives or regains focus. ",
                "name": "GlobalEventHandlers.onfocus"
            },
            {
                "descr": "An event handler property for hashchange events on the window; called when the part of the URL after the hash mark (\"#\") changes.",
                "name": "WindowEventHandlers.onhashchange"
            },
            {
                "descr": "Called when the value of an <input> element changes",
                "name": "GlobalEventHandlers.oninput"
            },
            {
                "descr": "Called when you begin pressing ANY key. ",
                "name": "GlobalEventHandlers.onkeydown"
            },
            {
                "descr": "Called when a key (except Shift, Fn, and CapsLock) is in pressed position. ",
                "name": "GlobalEventHandlers.onkeypress"
            },
            {
                "descr": "Called when you finish releasing ANY key. ",
                "name": "GlobalEventHandlers.onkeyup"
            },
            {
                "descr": "An event handler property for languagechange events on the window.",
                "name": "WindowEventHandlers.onlanguagechange"
            },
            {
                "descr": "Called after all resources and the DOM are fully loaded. ",
                "name": "GlobalEventHandlers.onload"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the message event is raised.",
                "name": "WindowEventHandlers.onmessage"
            },
            {
                "descr": "Called when ANY mouse button is pressed.",
                "name": "GlobalEventHandlers.onmousedown"
            },
            {
                "descr": "Called continously when the mouse is moved inside the window.",
                "name": "GlobalEventHandlers.onmousemove"
            },
            {
                "descr": "Called when the pointer leaves the window.",
                "name": "GlobalEventHandlers.onmouseout"
            },
            {
                "descr": "Called when the pointer enters the window",
                "name": "GlobalEventHandlers.onmouseover"
            },
            {
                "descr": "Called when ANY mouse button is released",
                "name": "GlobalEventHandlers.onmouseup"
            },
            {
                "descr": "Called when network connection is lost. ",
                "name": "WindowEventHandlers.onoffline"
            },
            {
                "descr": "Called when network connection is established. ",
                "name": "WindowEventHandlers.ononline"
            },
            {
                "descr": "Called when the user navigates away from the page, before the onunload event. ",
                "name": "WindowEventHandlers.onpagehide"
            },
            {
                "descr": "Called after all resources and the DOM are fully loaded. ",
                "name": "WindowEventHandlers.onpageshow"
            },
            {
                "descr": "Called when a back button is pressed.",
                "name": "WindowEventHandlers.onpopstate"
            },
            {
                "descr": "Called when a form is reset",
                "name": "GlobalEventHandlers.onreset"
            },
            {
                "descr": "Called continuously as you are resizing the window.",
                "name": "GlobalEventHandlers.onresize"
            },
            {
                "descr": "Called when the scroll bar is moved via ANY means. ",
                "name": "GlobalEventHandlers.onscroll"
            },
            {
                "descr": "Called when the mouse wheel is rotated around any axis",
                "name": "GlobalEventHandlers.onwheel"
            },
            {
                "descr": "Called after text in an input field is selected",
                "name": "GlobalEventHandlers.onselect"
            },
            {
                "descr": "Is an EventHandler representing the code to be called when the selectionchange event is raised.",
                "name": "GlobalEventHandlers.onselectionchange"
            },
            {
                "descr": "Called when there is a change in session storage or local storage. ",
                "name": "WindowEventHandlers.onstorage"
            },
            {
                "descr": "Called when a form is submitted",
                "name": "GlobalEventHandlers.onsubmit"
            },
            {
                "descr": "An event handler for unhandled Promise rejection events.",
                "name": "WindowEventHandlers.onunhandledrejection"
            },
            {
                "descr": "Called when the user navigates away from the page.",
                "name": "WindowEventHandlers.onunload"
            },
            {
                "descr": "DOMParser can parse XML or HTML source stored in a string into a DOM Document. ",
                "name": "DOMParser"
            },
            {
                "descr": "Used for creating an HTMLImageElement.",
                "name": "Window.GeckoActiveXObject Image"
            },
            {
                "descr": "Used for creating an HTMLOptionElement",
                "name": "Option"
            },
            {
                "descr": "Returns a StaticRange() constructor which creates a StaticRange object.",
                "name": "Window.QueryInterface  Window.StaticRange Read only"
            },
            {
                "descr": "Used for creating a Web worker",
                "name": "Worker"
            },
            {
                "descr": "Starting with Chrome 46, this method is blocked inside an <iframe> unless its sandbox attribute has the value allow-modals.",
                "name": "Window.XMLSerializer Window.XPCNativeWrapper Window.XPCSafeJSObjectWrapper  Interfaces See DOM Reference Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari     Basic support  1  12  1  Yes  Yes  Yes   alert  Yes   Yes"
            },
            {
                "descr": "Uses the non-standard name: pageXOffset",
                "name": "?   ?"
            },
            {
                "descr": "Uses the non-standard name: pageXOffset",
                "name": "?   ?"
            },
            {
                "descr": "Uses the non-standard name: pageXOffset",
                "name": "?   ?"
            },
            {
                "descr": "Uses the non-standard name: pageYOffset",
                "name": "?   ?"
            },
            {
                "descr": "Uses the non-standard name: pageYOffset",
                "name": "?"
            },
            {
                "descr": "Uses the non-standard name: pageYOffset",
                "name": "?   ?"
            }
        ],
        "path": "dom/window",
        "syntax": "Window.closed Read only   This property indicates whether the current window is closed or not.  Window.console Read only   Returns a reference to the console object which provides access to the browser's debugging console.  Window.content and Window._content Read only   Returns a reference to the content element in the current window. Since Firefox 57 (initially Nightly-only), both versions are only available from chrome (privileged) code, and not available to the web anymore.  Window.controllers",
        "type": "Window"
    },
    "WindowBase64.Base64 encoding and decoding": {
        "descr": "Base64 is a group of similar binary-to-text encoding schemes that represent binary data in an ASCII string format by translating it into a radix-64 representation. The term Base64 originates from a specific MIME content transfer encoding.",
        "name": "WindowBase64.Base64 encoding and decoding",
        "params": [
            {
                "descr": "data URIs, defined by RFC 2397, allow content creators to embed small files inline in documents.",
                "name": "data URIs"
            },
            {
                "descr": "Wikipedia article about Base64 encoding.",
                "name": "Base64"
            },
            {
                "descr": "Specifies the atob and btoa methods and states that they encode to base64 as specified by RFC 4648.",
                "name": "WindowOrWorkerGlobalScope mixin"
            },
            {
                "descr": "Specifies the base64 algorithm in section 4, and also defines an alternate base64url algorithm for URLs in section 5 (which is not the one used by atob/btoa).",
                "name": "RFC 4648"
            },
            {
                "descr": "Decodes a string of data which has been encoded using base-64 encoding.",
                "name": "atob()"
            },
            {
                "descr": "Creates a base-64 encoded ASCII string from a \"string\" of binary data.",
                "name": "btoa()"
            },
            {
                "descr": "In most browsers, calling btoa() on a Unicode string will cause a Character Out Of Range exception. ",
                "name": "The \"Unicode Problem\""
            },
            {
                "descr": "List of Mozilla supported URI schemes",
                "name": "URIScheme"
            },
            {
                "descr": "In this article is published a library of ours whose aims are:  creating a C-like interface for strings (i.e. ",
                "name": "StringView"
            }
        ],
        "path": "dom/windowbase64/base64_encoding_and_decoding",
        "syntax": "atob/btoa). atob()",
        "type": "Window"
    },
    "WindowClient.focus": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WindowClient.focus",
        "params": [],
        "path": "dom/windowclient/focus",
        "syntax": "Client.focus().then(function(WindowClient) { // do something with your WindowClient once it has been focused });",
        "type": "Window"
    },
    "WindowClient.focused": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WindowClient.focused",
        "params": [],
        "path": "dom/windowclient/focused",
        "syntax": "myFocused = WindowClient.focused; Value A Boolean. Example self.addEventListener('notificationclick', function(event) { console.log('On notification click: ', event.notification.tag);\n or  event.notification.close();\n or  // This looks to see if the current is already open and // focuses if it is event.waitUntil(clients.matchAll({ type: \"window\" }).then(function(clientList) { for (var i = 0; i < clientList.length; i++) { var client = clientList[i]; if (client.url == '/' && 'focus' in client) { if(!client.focused) return client.focus();\n or  } } } if (clients.openWindow) return clients.openWindow('/');\n or  }));\n or  });",
        "type": "Window"
    },
    "WindowClient.navigate": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WindowClient.navigate",
        "params": [
            {
                "descr": "The location to navigate to.",
                "name": "url"
            }
        ],
        "path": "dom/windowclient/navigate",
        "syntax": "WindowClient.navigate(url).then(function(WindowClient) { // do something with your WindowClient after navigation });",
        "type": "Window"
    },
    "WindowClient.visibilityState": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WindowClient.visibilityState",
        "params": [],
        "path": "dom/windowclient/visibilitystate",
        "syntax": "myVisState = WindowClient.visibilityState; Value A DOMString. Example  event.waitUntil(clients.matchAll({ type: \"window\" }).then(function(clientList) { for (var i = 0; i < clientList.length; i++) { var client = clientList[i]; if (client.url == '/' && 'focus' in client) { if(client.visibilityState === 'hidden') return client.focus();\n or  } } } if (clients.openWindow) return clients.openWindow('/');\n or  }));\n or  });",
        "type": "Window"
    },
    "WindowEventHandlers.onafterprint": {
        "descr": "The WindowEventHandlers.onafterprint property sets and returns the afterprint EventHandler for the current window.",
        "name": "WindowEventHandlers.onafterprint",
        "params": [],
        "path": "dom/windoweventhandlers/onafterprint",
        "syntax": "window.onafterprint = event handling code  Notes The beforeprint and afterprint events allow pages to change their content before printing starts (perhaps to remove a banner, for example) and then revert those changes after printing has completed. In general content authors should prefer the use of an @media print CSS at-rule, but it may be necessary to use these events in some cases.",
        "type": "Window"
    },
    "WindowEventHandlers.onbeforeprint": {
        "descr": "The property onbeforeprint sets and returns the onbeforeprint event handler code for the current window.",
        "name": "WindowEventHandlers.onbeforeprint",
        "params": [],
        "path": "dom/windoweventhandlers/onbeforeprint",
        "syntax": "window.onbeforeprint = event handling code  Notes The beforeprint and afterprint events allow pages to change their content before printing starts (perhaps to remove a banner, for example) and then revert those changes after printing has completed. In general content authors should prefer the use of an @media print CSS at-rule, but it may be necessary to use these events in some cases.",
        "type": "Window"
    },
    "WindowEventHandlers.onbeforeunload": {
        "descr": "The WindowEventHandlers.onbeforeunload event handler property contains the code executed when the beforeunload is sent. This event fires when a window is about to unload its resources. The document is still visible and the event is still cancelable.",
        "name": "WindowEventHandlers.onbeforeunload",
        "params": [],
        "path": "dom/windoweventhandlers/onbeforeunload",
        "syntax": "window.onbeforeunload = funcRef   funcRef is a reference to a function or a function expression. The HTML specification states that authors should use the Event.preventDefault()",
        "type": "Window"
    },
    "WindowEventHandlers.onhashchange": {
        "descr": "The hashchange event fires when a window's hash changes (see location.hash).",
        "name": "WindowEventHandlers.onhashchange",
        "params": [
            {
                "descr": "A reference to a function.",
                "name": "funcRef"
            }
        ],
        "path": "dom/windoweventhandlers/onhashchange",
        "syntax": "window.onhashchange = funcRef;  or <body onhashchange=\"funcRef();\n or \">);",
        "type": "Window"
    },
    "WindowEventHandlers.onlanguagechange": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WindowEventHandlers.onlanguagechange",
        "params": [],
        "path": "dom/windoweventhandlers/onlanguagechange",
        "syntax": "object.onlanguagechange = function;  Values   function is the name of a user-defined function, without the ()",
        "type": "Window"
    },
    "WindowEventHandlers.onmessage": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WindowEventHandlers.onmessage",
        "params": [],
        "path": "dom/windoweventhandlers/onmessage",
        "syntax": "window.addEventListener('message', function(event) { ... }) window.onmessage = function(event) { ... }",
        "type": "Window"
    },
    "WindowEventHandlers.onmessageerror": {
        "descr": "The onmessageerror event handler of the WindowEventHandlers interface is an EventListener, called whenever an MessageEvent of type messageerror is fired on a window—that is, when it receives a message that cannot be deserialized.",
        "name": "WindowEventHandlers.onmessageerror",
        "params": [],
        "path": "dom/windoweventhandlers/onmessageerror",
        "syntax": "window.onmessageerror = function() { ... };",
        "type": "Window"
    },
    "WindowEventHandlers.onpopstate": {
        "descr": "onpopstate is an event handler for the popstate event on the window.",
        "name": "WindowEventHandlers.onpopstate",
        "params": [],
        "path": "dom/windoweventhandlers/onpopstate",
        "syntax": "window.onpopstate = funcRef;    funcRef is a handler function.  The popstate event For example, a page at http://example.com/example.html running the following code will generate alerts as indicated: window.onpopstate = function(event) { alert(\"location: \" + document.location + \", state: \" + JSON.stringify(event.state));\n or  }; history.pushState({page: 1}, \"title 1\", \"?page=1\");\n or  history.pushState({page: 2}, \"title 2\", \"?page=2\");\n or  history.replaceState({page: 3}, \"title 3\", \"?page=3\");\n or  history.back();\n or  // alerts \"location: http://example.com/example.html?page=1, state: {\"page\":1}\" history.back();\n or  // alerts \"location: http://example.com/example.html, state: null history.go(2);\n or  // alerts \"location: http://example.com/example.html?page=3, state: {\"page\":3});",
        "type": "Window"
    },
    "WindowEventHandlers.onrejectionhandled": {
        "descr": "The Window.onrejectionhandled property is an event handler for processing rejectionhandled events, which are raised when Promises are rejected.",
        "name": "WindowEventHandlers.onrejectionhandled",
        "params": [],
        "path": "dom/windoweventhandlers/onrejectionhandled",
        "syntax": "window.addEventListener(\"rejectionhandled\", function(event) { ... });\n or  window.onrejectionhandled = function(event) { ...};);",
        "type": "Window"
    },
    "WindowEventHandlers.onstorage": {
        "descr": "The WindowEventHandlers.onstorage property contains an event handler that runs when the storage event fires. This occurs when a storage area is changed (e.g. a new item is stored.)",
        "name": "WindowEventHandlers.onstorage",
        "params": [],
        "path": "dom/windoweventhandlers/onstorage",
        "syntax": "windowObj.onstorage = function() { ... };",
        "type": "Window"
    },
    "WindowEventHandlers.onunhandledrejection": {
        "descr": "The Window.onunhandledrejection property is an event handler for processing unhandledrejection events, which are raised for unhandled Promise rejections.",
        "name": "WindowEventHandlers.onunhandledrejection",
        "params": [],
        "path": "dom/windoweventhandlers/onunhandledrejection",
        "syntax": "window.onunhandledrejection = EventHandler; Value An EventHandler or function to call when unhandledrejection events are received by the window. The event handler receives as an input parameter a PromiseRejectionEvent. Examples This example simply logs unhandled rejections' reason values to the console. window.onunhandledrejection = function(e) { console.log(e.reason);\n or  });",
        "type": "Window"
    },
    "WindowEventHandlers.onunload": {
        "descr": "The unload event is raised when the window is unloading its content and resources. The resources removal is processed after the unload event occurs.",
        "name": "WindowEventHandlers.onunload",
        "params": [],
        "path": "dom/windoweventhandlers/onunload",
        "syntax": "window.onunload = funcRef;    funcRef is a reference to a function.  Notes Using this event handler in your page prevents Firefox 1.5 from caching the page in the in-memory bfcache. See Using Firefox 1.5 caching for details. Browsers equipped with pop-up window blockers will ignore all window.open()",
        "type": "Window"
    },
    "WindowOrWorkerGlobalScope.atob": {
        "descr": "The WindowOrWorkerGlobalScope.atob() function decodes a string of data which has been encoded using base-64 encoding. You can use the btoa() method to encode and transmit data which may otherwise cause communication problems, then transmit it and use the atob() method to decode the data again. For example, you can encode, transmit, and decode control characters such as ASCII values 0 through 31.",
        "name": "WindowOrWorkerGlobalScope.atob",
        "params": [],
        "path": "dom/windoworworkerglobalscope/atob",
        "syntax": "var decodedData = scope.atob(encodedData);",
        "type": "Window"
    },
    "WindowOrWorkerGlobalScope.btoa": {
        "descr": "The WindowOrWorkerGlobalScope.btoa() method creates a base-64 encoded ASCII string from a String object in which each character in the string is treated as a byte of binary data.",
        "name": "WindowOrWorkerGlobalScope.btoa",
        "params": [
            {
                "descr": "A string whose characters each represent a single byte of binary data to be encoded into ASCII.",
                "name": "stringToEncode"
            }
        ],
        "path": "dom/windoworworkerglobalscope/btoa",
        "syntax": "var encodedData = scope.btoa(stringToEncode);",
        "type": "Window"
    },
    "WindowOrWorkerGlobalScope.caches": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WindowOrWorkerGlobalScope.caches",
        "params": [],
        "path": "dom/windoworworkerglobalscope/caches",
        "syntax": "var myCacheStorage = self.caches; // or just caches  Value A CacheStorage object. Example the following example shows how you'd use a cache in a service worker context to store assets offline. this.addEventListener('install', function(event) { event.waitUntil( caches.open('v1').then(function(cache) { return cache.addAll([ '/sw-test/', '/sw-test/index.html', '/sw-test/style.css', '/sw-test/app.js', '/sw-test/image-list.js', '/sw-test/star-wars-logo.jpg', '/sw-test/gallery/', '/sw-test/gallery/bountyHunters.jpg', '/sw-test/gallery/myLittleVader.jpg', '/sw-test/gallery/snowTroopers.jpg' ]);\n or  }) );\n or  });",
        "type": "Window"
    },
    "WindowOrWorkerGlobalScope.clearInterval": {
        "descr": "The clearInterval() method of the WindowOrWorkerGlobalScope mixin cancels a timed, repeating action which was previously established by a call to setInterval().",
        "name": "WindowOrWorkerGlobalScope.clearInterval",
        "params": [
            {
                "descr": "The identifier of the repeated action you want to cancel. ",
                "name": "intervalID"
            }
        ],
        "path": "dom/windoworworkerglobalscope/clearinterval",
        "syntax": "scope.clearInterval(intervalID)",
        "type": "Window"
    },
    "WindowOrWorkerGlobalScope.clearTimeout": {
        "descr": "The clearTimeout() method of the WindowOrWorkerGlobalScope mixin cancels a timeout previously established by calling setTimeout().",
        "name": "WindowOrWorkerGlobalScope.clearTimeout",
        "params": [
            {
                "descr": "The identifier of the timeout you want to cancel. ",
                "name": "timeoutID"
            }
        ],
        "path": "dom/windoworworkerglobalscope/cleartimeout",
        "syntax": "scope.clearTimeout(timeoutID)",
        "type": "Window"
    },
    "WindowOrWorkerGlobalScope.createImageBitmap": {
        "descr": "The createImageBitmap() method creates a bitmap from a given source, optionally cropped to contain only a portion of that source. The method exists on the global scope in both windows and workers. It accepts a variety of different image sources, and returns a Promise which resolves to an ImageBitmap.",
        "name": "WindowOrWorkerGlobalScope.createImageBitmap",
        "params": [
            {
                "descr": "An image source, which can be an <img>, SVG <image>, <video>, <canvas>, HTMLImageElement, SVGImageElement, HTMLVideoElement, HTMLCanvasElement, Blob, ImageData, ImageBitmap, or OffscreenCanvas object.",
                "name": "image"
            },
            {
                "descr": "The x coordinate of the reference point of the rectangle from which the ImageBitmap will be extracted.",
                "name": "sx"
            },
            {
                "descr": "The y coordinate of the reference point of the rectangle from which the ImageBitmap will be extracted.",
                "name": "sy"
            },
            {
                "descr": "The width of the rectangle from which the ImageBitmap will be extracted. ",
                "name": "sw"
            },
            {
                "descr": "The height of the rectangle from which the ImageBitmap will be extracted. ",
                "name": "sh"
            },
            {
                "descr": "An object that sets options for the image's extraction. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/windoworworkerglobalscope/createimagebitmap",
        "syntax": "createImageBitmap(image[, options]).then(function(response) { ... });\n or  createImageBitmap(image, sx, sy, sw, sh[, options]).then(function(response) { ... });",
        "type": "Window"
    },
    "WindowOrWorkerGlobalScope.fetch": {
        "descr": "The fetch() method of the WindowOrWorkerGlobalScope mixin starts the process of fetching a resource from the network. This returns a promise that resolves to the Response object representing the response to your request. The promise does not reject on HTTP errors — instead it only rejects only network errors; then handlers must check for HTTP errors.",
        "name": "WindowOrWorkerGlobalScope.fetch",
        "params": [
            {
                "descr": "This defines the resource that you wish to fetch. ",
                "name": "input"
            },
            {
                "descr": "An options object containing any custom settings that you want to apply to the request. ",
                "name": "init Optional"
            }
        ],
        "path": "dom/windoworworkerglobalscope/fetch",
        "syntax": "Promise<Response> fetch(input[, init]);",
        "type": "Window"
    },
    "WindowOrWorkerGlobalScope.indexedDB": {
        "descr": "The indexedDB read-only property of the WindowOrWorkerGlobalScope mixin provides a mechanism for applications to asynchronously access the capabilities of indexed databases.",
        "name": "WindowOrWorkerGlobalScope.indexedDB",
        "params": [],
        "path": "dom/windoworworkerglobalscope/indexeddb",
        "syntax": "var IDBFactory = self.indexedDB; Value An IDBFactory object. Example var db; function openDB() { var DBOpenRequest = window.indexedDB.open('toDoList');\n or  DBOpenRequest.onsuccess = function(e) { db = DBOpenRequest.result; } });",
        "type": "Window"
    },
    "WindowOrWorkerGlobalScope.origin": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WindowOrWorkerGlobalScope.origin",
        "params": [],
        "path": "dom/windoworworkerglobalscope/origin",
        "syntax": "var myOrigin = self.origin; // or just origin  Value A USVString. Examples Executed from inside a worker script, the following snippet will log the worker's global scope's origin to the console each time it receives a message onmessage = function() { console.log(self.origin);\n or  };);",
        "type": "Window"
    },
    "WindowOrWorkerGlobalScope.setInterval": {
        "descr": "The setInterval() method of the WindowOrWorkerGlobalScope mixin repeatedly calls a function or executes a code snippet, with a fixed time delay between each call. It returns an interval ID which uniquely identifies the interval, so you can remove it later by calling clearInterval(). This method is offered on the Window and Worker interfaces.",
        "name": "WindowOrWorkerGlobalScope.setInterval",
        "params": [
            {
                "descr": "A function to be executed every delay milliseconds. ",
                "name": "func"
            },
            {
                "descr": "An optional syntax allows you to include a string instead of a function, which is compiled and executed every delay milliseconds. ",
                "name": "code"
            },
            {
                "descr": "The time, in milliseconds (thousandths of a second), the timer should delay in between executions of the specified function or code. ",
                "name": "delay"
            },
            {
                "descr": "Additional parameters which are passed through to the function specified by func once the timer expires.",
                "name": "param1, ..., paramN Optional"
            },
            {
                "descr": "The this object on which the callback function is called. ",
                "name": "thisObject"
            },
            {
                "descr": "The function that is repeatedly invoked . ",
                "name": "callback"
            },
            {
                "descr": "The time lapse (in number of milliseconds) between each invocation. ",
                "name": "rate (optional)"
            },
            {
                "descr": "The total number of invocations. ",
                "name": "length (optional)"
            },
            {
                "descr": "The this object on which is executed the daemon (read/write). ",
                "name": "myDaemon.owner"
            },
            {
                "descr": "The function that is repeatedly invoked (read/write). ",
                "name": "myDaemon.task"
            },
            {
                "descr": "The time lapse (in number of milliseconds) between each invocation (read/write).",
                "name": "myDaemon.rate"
            },
            {
                "descr": "The total number of invocations. ",
                "name": "myDaemon.length"
            },
            {
                "descr": "Returns a boolean expressing whether the daemon is at the start/end position or not.",
                "name": "myDaemon.isAtEnd()"
            },
            {
                "descr": "Synchronize the timer of a started daemon with the time of its invocation.",
                "name": "myDaemon.synchronize()"
            },
            {
                "descr": "Pauses the daemon.",
                "name": "myDaemon.pause()"
            },
            {
                "descr": "Starts the daemon forward (index of each invocation increasing) or backwards (index decreasing).",
                "name": "myDaemon.start([reverse])"
            },
            {
                "descr": "Forces a single callback to the minidaemon.task function regardless of the fact that the end has been reached or not. ",
                "name": "MiniDaemon.forceCall(minidaemon)"
            }
        ],
        "path": "dom/windoworworkerglobalscope/setinterval",
        "syntax": "var intervalID = scope.setInterval(func, delay[, param1, param2, ...]);\n or  var intervalID = scope.setInterval(code, delay);",
        "type": "Window"
    },
    "WindowOrWorkerGlobalScope.setTimeout": {
        "descr": "The setTimeout() method of the WindowOrWorkerGlobalScope mixin (and successor to window.setTimeout) sets a timer which executes a function or specified piece of code once after the timer expires.",
        "name": "WindowOrWorkerGlobalScope.setTimeout",
        "params": [
            {
                "descr": "A function to be executed after the timer expires.",
                "name": "function"
            },
            {
                "descr": "An alternative syntax that allows you to include a string instead of a function, which is compiled and executed when the timer expires. ",
                "name": "code"
            },
            {
                "descr": "The time, in milliseconds (thousandths of a second), the timer should wait before the specified function or code is executed. ",
                "name": "delay Optional"
            },
            {
                "descr": "Additional parameters which are passed through to the function specified by function or code once the timer expires.",
                "name": "param1, ..., paramN Optional"
            }
        ],
        "path": "dom/windoworworkerglobalscope/settimeout",
        "syntax": "var timeoutID = scope.setTimeout(function[, delay, param1, param2, ...]);\n or  var timeoutID = scope.setTimeout(function[, delay]);\n or  var timeoutID = scope.setTimeout(code[, delay]);",
        "type": "Window"
    },
    "Worker.constructor": {
        "descr": "The Worker() constructor creates a Worker object that executes the script at the specified URL. This script must obey the same-origin policy.",
        "name": "Worker.constructor",
        "params": [
            {
                "descr": "A USVString representing the URL of the script the worker will execute. ",
                "name": "aURL"
            },
            {
                "descr": "An object containing option properties that can be set when creating the object instance. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/worker/worker",
        "syntax": "DOMException of type SECURITY_ERR is thrown.  Note: that there is a disagreement among browser manufacturers about whether a data URI is of the same origin or not. Though Gecko 10.0 (Firefox 10.0 / Thunderbird 10.0 / SeaMonkey 2.7) and later accept data URIs, that's not the case in all other browsers.",
        "type": "Web Workers"
    },
    "Worker.onmessage": {
        "descr": "The onmessage property of the Worker interface represents an EventHandler, that is a function to be called when the message event occurs. These events are of type MessageEvent and will be called when the worker's parent receives a message (i.e. from the DedicatedWorkerGlobalScope.postMessage method.",
        "name": "Worker.onmessage",
        "params": [],
        "path": "dom/worker/onmessage",
        "syntax": "myWorker.onmessage = function(e) { ... }",
        "type": "Web Workers"
    },
    "Worker.onmessageerror": {
        "descr": "The onmessageerror event handler of the Worker interface is an EventListener, called whenever an MessageEvent of type messageerror is fired on the Worker instance — that is, when it receives a message that cannot be deserialized.",
        "name": "Worker.onmessageerror",
        "params": [],
        "path": "dom/worker/onmessageerror",
        "syntax": "Worker.onmessageerror = function() { ... };",
        "type": "Web Workers"
    },
    "Worker.postMessage": {
        "descr": "The postMessage() method of the Worker interface sends a message to the worker's inner scope. This accepts a single parameter, which is the data to send to the worker. The data may be any value or JavaScript object handled by the structured clone algorithm, which includes cyclical references.",
        "name": "Worker.postMessage",
        "params": [
            {
                "descr": "The object to deliver to the worker; this will be in the data field in the event delivered to the DedicatedWorkerGlobalScope.onmessage handler. ",
                "name": "message"
            },
            {
                "descr": "An optional array of Transferable objects to transfer ownership of. ",
                "name": "transfer Optional"
            }
        ],
        "path": "dom/worker/postmessage",
        "syntax": "worker.postMessage(message, [transfer]);",
        "type": "Web Workers"
    },
    "Worker.terminate": {
        "descr": "The terminate() method of the Worker interface immediately terminates the Worker. This does not offer the worker an opportunity to finish its operations; it is simply stopped at once.",
        "name": "Worker.terminate",
        "params": [],
        "path": "dom/worker/terminate",
        "syntax": "myWorker.terminate();",
        "type": "Web Workers"
    },
    "WorkerGlobalScope.importScripts": {
        "descr": "The importScripts() method of the WorkerGlobalScope interface synchronously imports one or more scripts into the worker's scope.",
        "name": "WorkerGlobalScope.importScripts",
        "params": [],
        "path": "dom/workerglobalscope/importscripts",
        "syntax": "self.importScripts('foo.js');\n or  self.importScripts('foo.js', 'bar.js', ...);",
        "type": "Web Workers"
    },
    "WorkerGlobalScope.location": {
        "descr": "The location read-only property of the WorkerGlobalScope interface returns the WorkerLocation associated with the worker. It is a specific location object, mostly a subset of the Location for browsing scopes, but adapted to workers.",
        "name": "WorkerGlobalScope.location",
        "params": [],
        "path": "dom/workerglobalscope/location",
        "syntax": "var locationObj = self.location; Value A WorkerLocation object. Example If you called the following in a document served at localhost:8000 console.log(location);",
        "type": "Web Workers"
    },
    "WorkerGlobalScope.navigator": {
        "descr": "The navigator read-only property of the WorkerGlobalScope interface returns the WorkerNavigator associated with the worker. It is a specific navigator object, mostly a subset of the Navigator for browsing scopes, but adapted to workers.",
        "name": "WorkerGlobalScope.navigator",
        "params": [],
        "path": "dom/workerglobalscope/navigator",
        "syntax": "var navigatorObj = self.navigator; Value A WorkerNavigator object. Example If you called console.log(navigator);",
        "type": "Web Workers"
    },
    "WorkerGlobalScope.onclose": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "WorkerGlobalScope.onclose",
        "params": [],
        "path": "dom/workerglobalscope/onclose",
        "syntax": "self.onclose = function() { ... };",
        "type": "Web Workers"
    },
    "WorkerGlobalScope.onerror": {
        "descr": "The onerror property of the WorkerGlobalScope interface represents an EventHandler to be called when the error event occurs and bubbles through the Worker.",
        "name": "WorkerGlobalScope.onerror",
        "params": [],
        "path": "dom/workerglobalscope/onerror",
        "syntax": "self.onerror = function() { ... };",
        "type": "Web Workers"
    },
    "WorkerGlobalScope.onlanguagechange": {
        "descr": "The onlanguagechange property of the WorkerGlobalScope interface represents an EventHandler to be called when the languagechange event occurs and bubbles through the Worker.",
        "name": "WorkerGlobalScope.onlanguagechange",
        "params": [],
        "path": "dom/workerglobalscope/onlanguagechange",
        "syntax": "self.onlanguagechange = function() { ... };",
        "type": "Web Workers"
    },
    "WorkerGlobalScope.onoffline": {
        "descr": "The onoffline property of the WorkerGlobalScope interface represents an EventHandler to be called when the offline event occurs and bubbles through the Worker.",
        "name": "WorkerGlobalScope.onoffline",
        "params": [],
        "path": "dom/workerglobalscope/onoffline",
        "syntax": "self.onoffline = function() { ... };",
        "type": "Web Workers"
    },
    "WorkerGlobalScope.ononline": {
        "descr": "The ononline property of the WorkerGlobalScope interface represents an EventHandler to be called when the online event occurs and bubbles through the Worker.",
        "name": "WorkerGlobalScope.ononline",
        "params": [],
        "path": "dom/workerglobalscope/ononline",
        "syntax": "self.ononline = function() { ... };",
        "type": "Web Workers"
    },
    "WorkerGlobalScope.performance": {
        "descr": "The performance read-only property of the WorkerGlobalScope interface returns a Performance object to be used on the worker.",
        "name": "WorkerGlobalScope.performance",
        "params": [],
        "path": "dom/workerglobalscope/performance",
        "syntax": "var perfObj = self.performance;  Return Value A Performance object. Example If you called console.log(performance);",
        "type": "Web Workers"
    },
    "WorkerGlobalScope.self": {
        "descr": "The self read-only property of the WorkerGlobalScope interface returns a reference to the WorkerGlobalScope itself. Most of the time it is a specific scope like DedicatedWorkerGlobalScope, SharedWorkerGlobalScope, or ServiceWorkerGlobalScope.",
        "name": "WorkerGlobalScope.self",
        "params": [],
        "path": "dom/workerglobalscope/self",
        "syntax": "var selfRef = self; Value A global scope object (differs depending on the type of worker you are dealing with, as indicated above).",
        "type": "Web Workers"
    },
    "WorkerNavigator.locks": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WorkerNavigator.locks",
        "params": [],
        "path": "dom/workernavigator/locks",
        "syntax": "var lockManager = Navigator.locks Value A LockManager object. Specifications    Specification Status Comment   Web Locks APIThe definition of 'locks' in that specification. Draft Initial definition.    Browser compatibility No compatibility data found. Please contribute data for \"api.WorkerNavigator.locks\" (depth: 1) to the MDN compatibility data repository.",
        "type": "Web Workers"
    },
    "WorkerNavigator.permissions": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WorkerNavigator.permissions",
        "params": [],
        "path": "dom/workernavigator/permissions",
        "syntax": "permissionsObj = self.permissions  Value A Permissions object. Examples self.permissions.query({name:'notifications'}).then(function(result) { if (result.state === 'granted') { showNotification();\n or  } else if (result.state === 'prompt') { requestNotificationPermission() } });",
        "type": "Web Workers"
    },
    "Worklet.addModule": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "Worklet.addModule",
        "params": [
            {
                "descr": "A String containing the URL of a JavaScript file with the module to add.",
                "name": "moduleURL"
            },
            {
                "descr": "An object with any of the following options:   credentials: A RequestCredentials value that indicates whether to send credentials (e.g. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/worklet/addmodule",
        "syntax": "addPromise = worklet.addModule(moduleURL);\n or  addPromise = worklet.addModule(moduleURL, options);",
        "type": "Miscellaneous"
    },
    "WritableStream.abort": {
        "descr": "Draft This page is not complete.",
        "name": "WritableStream.abort",
        "params": [
            {
                "descr": "A DOMString providing a human-readable reason for the abort.",
                "name": "reason"
            },
            {
                "descr": "The stream you are trying to abort is not a WritableStream, or it is locked.",
                "name": "TypeError"
            }
        ],
        "path": "dom/writablestream/abort",
        "syntax": "Promise<reason> writableStreamInstance.abort(reason);",
        "type": "Media Streams"
    },
    "WritableStream.constructor": {
        "descr": "Draft This page is not complete.",
        "name": "WritableStream.constructor",
        "params": [
            {
                "descr": "An object containing methods and properties that define how the constructed stream instance will behave. ",
                "name": "underlyingSink"
            },
            {
                "descr": "This method, also defined by the developer, will be called when a new chunk of data (specified in the chunk parameter) is ready to be written to the underlying sink. ",
                "name": "write(chunk, controller) Optional"
            },
            {
                "descr": "This method, also defined by the developer, will be called if the app signals that it has finished writing chunks to the stream. ",
                "name": "close(controller) Optional"
            },
            {
                "descr": "This method, also defined by the developer, will be called if the app signals that it wishes to abruptly close the stream and put it in an errored state. ",
                "name": "abort(reason) Optional"
            },
            {
                "descr": "An object that optionally defines a queueing strategy for the stream. ",
                "name": "queuingStrategy Optional"
            },
            {
                "descr": "A method containing a parameter chunk — this indicates the size to use for each chunk, in bytes.",
                "name": "size(chunk)"
            }
        ],
        "path": "dom/writablestream/writablestream",
        "syntax": "var writableStream = new WritableStream(underlyingSink[, queuingStrategy]);",
        "type": "Media Streams"
    },
    "WritableStream.getWriter": {
        "descr": "Draft This page is not complete.",
        "name": "WritableStream.getWriter",
        "params": [
            {
                "descr": "The stream you are trying to create a reader for is not a WritableStream.",
                "name": "TypeError"
            }
        ],
        "path": "dom/writablestream/getwriter",
        "syntax": "var writer = writableStreamInstance.getWriter();",
        "type": "Media Streams"
    },
    "WritableStream.locked": {
        "descr": "Draft This page is not complete.",
        "name": "WritableStream.locked",
        "params": [],
        "path": "dom/writablestream/locked",
        "syntax": "var locked = writableStreamInstance.locked; Value A Boolean indicating whether or not the writable stream is locked. Examples const writableStream = new WritableStream({ write(chunk) { ... }, close() { ... }, abort(err) { ... } }, queuingStrategy);\n or  ... const writer = writableStream.getWriter();\n or  writableStream.locked // should return true, as the stream has been locked to a writer);",
        "type": "Media Streams"
    },
    "WritableStreamDefaultController.constructor": {
        "descr": "Draft This page is not complete.",
        "name": "WritableStreamDefaultController.constructor",
        "params": [
            {
                "descr": "The WritableStream to be controlled.",
                "name": "stream"
            },
            {
                "descr": "An object containing methods and properties that define how the constructed stream instance will behave. ",
                "name": "underlyingSink"
            },
            {
                "descr": "A method containing a parameter chunk — this indicates the size to use for each chunk, in bytes.",
                "name": "size"
            },
            {
                "descr": "A non-negative integer — this defines the total number of chunks that can be contained in the internal queue before backpressure is applied.",
                "name": "highWaterMark"
            },
            {
                "descr": "The supplied stream parameter is not a WritableStream, or it already has an associated controller.",
                "name": "TypeError"
            }
        ],
        "path": "dom/writablestreamdefaultcontroller/writablestreamdefaultcontroller",
        "syntax": "var writableStreamController = new WritableStreamDefaultController(stream, underlyingSink, size, highWaterMark);",
        "type": "Media Streams"
    },
    "WritableStreamDefaultController.error": {
        "descr": "Draft This page is not complete.",
        "name": "WritableStreamDefaultController.error",
        "params": [
            {
                "descr": "A DOMString representing the error you want future interactions to fail with.",
                "name": "e"
            },
            {
                "descr": "The stream you are trying to error is not a WritableStream.",
                "name": "TypeError"
            }
        ],
        "path": "dom/writablestreamdefaultcontroller/error",
        "syntax": "writableStreamDefaultControllerInstance.error(e);",
        "type": "Media Streams"
    },
    "WritableStreamDefaultWriter.abort": {
        "descr": "Draft This page is not complete.",
        "name": "WritableStreamDefaultWriter.abort",
        "params": [
            {
                "descr": "A DOMString representing a human-readable reason for the abort.",
                "name": "reason Optional"
            },
            {
                "descr": "The stream you are trying to abort is not a WritableStream, or it is locked.",
                "name": "TypeError"
            }
        ],
        "path": "dom/writablestreamdefaultwriter/abort",
        "syntax": "Promise<reason> writableStreamDefaultWriterInstance.abort(reason);",
        "type": "Media Streams"
    },
    "WritableStreamDefaultWriter.close": {
        "descr": "Draft This page is not complete.",
        "name": "WritableStreamDefaultWriter.close",
        "params": [
            {
                "descr": "The stream you are trying to close is not a WritableStream.",
                "name": "TypeError"
            }
        ],
        "path": "dom/writablestreamdefaultwriter/close",
        "syntax": "Promise<undefined> writableStreamDefaultWriterInstance.close();",
        "type": "Media Streams"
    },
    "WritableStreamDefaultWriter.closed": {
        "descr": "Draft This page is not complete.",
        "name": "WritableStreamDefaultWriter.closed",
        "params": [],
        "path": "dom/writablestreamdefaultwriter/closed",
        "syntax": "var closed = writableStreamDefaultWriterInstance.closed; Value A Promise. Examples const writableStream = new WritableStream({ start(controller) { }, write(chunk, controller) { ... }, close(controller) { ... }, abort(err) { ... } }, queuingStrategy);\n or  ... const writer = writableStream.getWriter();\n or  .. // check if the stream is closed writer.closed.then(() => { console.log('writer closed');\n or  }));",
        "type": "Media Streams"
    },
    "WritableStreamDefaultWriter.constructor": {
        "descr": "Draft This page is not complete.",
        "name": "WritableStreamDefaultWriter.constructor",
        "params": [
            {
                "descr": "The WritableStream to be written to.",
                "name": "stream"
            }
        ],
        "path": "dom/writablestreamdefaultwriter/writablestreamdefaultwriter",
        "syntax": "var writableStreamWriter = new WritableStreamDefaultWriter(stream);",
        "type": "Media Streams"
    },
    "WritableStreamDefaultWriter.desiredSize": {
        "descr": "Draft This page is not complete.",
        "name": "WritableStreamDefaultWriter.desiredSize",
        "params": [
            {
                "descr": "The writer’s lock is released.",
                "name": "TypeError"
            }
        ],
        "path": "dom/writablestreamdefaultwriter/desiredsize",
        "syntax": "var desiredSize = writableStreamDefaultWriterInstance.desiredSize; Value An integer. Note that this can be negative if the queue is over-full. The value will be null if the stream cannot be successfully written to (due to either being errored, or having an abort queued up), and zero if the stream is closed.",
        "type": "Media Streams"
    },
    "WritableStreamDefaultWriter.ready": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WritableStreamDefaultWriter.ready",
        "params": [],
        "path": "dom/writablestreamdefaultwriter/ready",
        "syntax": "var promise = defaultWriter.ready Value A Promise. Example The following example shows two uses of the ready property. The first uses ready to ensure that the WritableStream is done writing and thus able to receive data before sending a binary chunk. The second also checks whether the the WritableStream is done writing, but this time because the writing must be finished before the writer can be closed. function sendMessage(message, writableStream) { // defaultWriter is of type WritableStreamDefaultWriter var defaultWriter = writableStream.getWriter();\n or  var encoder = new TextEncoder();\n or  var encoded = encoder.encode(message, {stream: true});\n or  encoded.forEach(function(chunk) { // Make sure the stream and its writer are able to // receive data. defaultWriter.ready .then(function() { defaultWriter.write(chunk) .then(function() { console.log(\"Chunk written to sink.);\n or  }) .catch(function(err) { console.log(\"Chunk error: \" + err);\n or  });\n or  });\n or  // Call ready again to ensure that all chunks are written // before closing the writer. defaultWriter.ready .then(function() { defaultWriter.close() .then(function() { console.log(\"All chunks written\");\n or  }) .catch(function(err) { console.log(\"Stream error: \" + err);\n or  });\n or  });\n or  });\n or  });",
        "type": "Media Streams"
    },
    "WritableStreamDefaultWriter.releaseLock": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WritableStreamDefaultWriter.releaseLock",
        "params": [],
        "path": "dom/writablestreamdefaultwriter/releaselock",
        "syntax": "writableStreamDefaultWriterInstance.releaseLock()",
        "type": "Media Streams"
    },
    "WritableStreamDefaultWriter.write": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "WritableStreamDefaultWriter.write",
        "params": [
            {
                "descr": "A block of binary data to pass to the WritableStream.",
                "name": "chunk"
            },
            {
                "descr": "The target stream is not a writable stream, or it does not have an owner.",
                "name": "TypeError"
            }
        ],
        "path": "dom/writablestreamdefaultwriter/write",
        "syntax": "Promise<> = defaultWriter.write(chunk)",
        "type": "Media Streams"
    },
    "XMLHttpRequest": {
        "descr": "Use XMLHttpRequest (XHR) objects to interact with servers. You can retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just part of a page without disrupting what the user is doing. XMLHttpRequest is used heavily in Ajax programming.",
        "name": "XMLHttpRequest",
        "params": [
            {
                "descr": "The constructor initializes an XMLHttpRequest. ",
                "name": "XMLHttpRequest()"
            },
            {
                "descr": "Returns an ArrayBuffer, Blob, Document, JavaScript object, or a DOMString, depending on the value of XMLHttpRequest.responseType. ",
                "name": "XMLHttpRequest.response Read only"
            },
            {
                "descr": "Is a nsIChannel. The channel used by the object when performing the request.",
                "name": "XMLHttpRequest.channelRead only"
            },
            {
                "descr": "Is a boolean. If true, the request will be sent without cookie and authentication headers.",
                "name": "XMLHttpRequest.mozAnonRead only"
            },
            {
                "descr": "Is a boolean. If true, the same origin policy will not be enforced on the request.",
                "name": "XMLHttpRequest.mozSystemRead only"
            },
            {
                "descr": "Is a boolean. It indicates whether or not the object represents a background service request.",
                "name": "XMLHttpRequest.mozBackgroundRequest"
            },
            {
                "descr": "Is an ArrayBuffer. The response to the request, as a JavaScript typed array.",
                "name": "XMLHttpRequest.mozResponseArrayBuffer Obsolete since Gecko 6 Read only"
            },
            {
                "descr": "This Gecko-only feature, a boolean, was removed in Firefox/Gecko 22. ",
                "name": "XMLHttpRequest.multipartObsolete since Gecko 22"
            },
            {
                "descr": "Aborts the request if it has already been sent.",
                "name": "XMLHttpRequest.abort()"
            },
            {
                "descr": "Returns all the response headers, separated by CRLF, as a string, or null if no response has been received.",
                "name": "XMLHttpRequest.getAllResponseHeaders()"
            },
            {
                "descr": "Returns the string containing the text of the specified header, or null if either the response has not yet been received or the header doesn't exist in the response.",
                "name": "XMLHttpRequest.getResponseHeader()"
            },
            {
                "descr": "Initializes a request. This method is to be used from JavaScript code; to initialize a request from native code, use openRequest() instead.",
                "name": "XMLHttpRequest.open()"
            },
            {
                "descr": "Overrides the MIME type returned by the server.",
                "name": "XMLHttpRequest.overrideMimeType()"
            },
            {
                "descr": "Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.",
                "name": "XMLHttpRequest.send()"
            },
            {
                "descr": "Sets the value of an HTTP request header. ",
                "name": "XMLHttpRequest.setRequestHeader()"
            },
            {
                "descr": "A variant of the send() method that sends binary data.",
                "name": "XMLHttpRequest.sendAsBinary()"
            },
            {
                "descr": "Before IE 10, the value of XMLHttpRequest.responseText could be read only once the request was complete.",
                "name": "?"
            }
        ],
        "path": "dom/xmlhttprequest",
        "syntax": "XMLHttpRequest.timeout Is an unsigned long representing the number of milliseconds a request can take before automatically being terminated. XMLHttpRequestEventTarget.ontimeout Is an EventHandler that is called whenever the request times out.   XMLHttpRequest.upload Read only   Is an XMLHttpRequestUpload, representing the upload process. XMLHttpRequest.withCredentials Is a Boolean that indicates whether or not cross-site Access-Control requests should be made using credentials such as cookies or authorization headers.  Non-standard properties   XMLHttpRequest.channelRead only   Is a nsIChannel. The channel used by the object when performing the request.  XMLHttpRequest.mozAnonRead only   Is a boolean. If true, the request will be sent without cookie and authentication headers.  XMLHttpRequest.mozSystemRead only   Is a boolean. If true, the same origin policy will not be enforced on the request. XMLHttpRequest.mozBackgroundRequest Is a boolean. It indicates whether or not the object represents a background service request.  XMLHttpRequest.mozResponseArrayBuffer Obsolete since Gecko 6 Read only   Is an ArrayBuffer. The response to the request, as a JavaScript typed array.  XMLHttpRequest.multipartObsolete since Gecko 22   This Gecko-only feature, a boolean, was removed in Firefox/Gecko 22. Please use Server-Sent Events, Web Sockets, or responseText from progress events instead.  Event handlers onreadystatechange as a property of the XMLHttpRequest instance is supported in all browsers. Since then, a number of additional event handlers have been implemented in various browsers (onload, onerror, onprogress, etc.). See Using XMLHttpRequest.",
        "type": "XMLHTTPRequest"
    },
    "XMLHttpRequest.Using XMLHttpRequest": {
        "descr": "In this guide, we'll take a look at how to use XMLHttpRequest to issue HTTP requests in order to exchange data between the web site and a server. Examples of both common and more obscure use cases for XMLHttpRequest are included.",
        "name": "XMLHttpRequest.Using XMLHttpRequest",
        "params": [
            {
                "descr": "The amount of data that has been retrieved has changed.",
                "name": "progress"
            },
            {
                "descr": "The transfer is complete; all data is now in the response",
                "name": "load"
            },
            {
                "descr": "Before IE 10, the value of XMLHttpRequest.responseText could be read only once the request was complete.",
                "name": "?"
            }
        ],
        "path": "dom/xmlhttprequest/using_xmlhttprequest",
        "syntax": "responseXML property If you use XMLHttpRequest to get the content of a remote XML document, the responseXML property will be a DOM object containing a parsed XML document. This could prove difficult to manipulate and analyze. There are four primary ways of analyzing this XML document:  Using XPath to address (or point to) parts of it. Manually Parsing and serializing XML to strings or objects. Using XMLSerializer",
        "type": "XMLHTTPRequest"
    },
    "XMLHttpRequest.abort": {
        "descr": "The XMLHttpRequest.abort() method aborts the request if it has already been sent. When a request is aborted, its readyState is changed to XMLHttpRequest.UNSENT (0) and the request's status code is set to 0.",
        "name": "XMLHttpRequest.abort",
        "params": [],
        "path": "dom/xmlhttprequest/abort",
        "syntax": "XMLHttpRequest.abort()",
        "type": "XMLHTTPRequest"
    },
    "XMLHttpRequest.getAllResponseHeaders": {
        "descr": "The XMLHttpRequest method getAllResponseHeaders() returns all the response headers, separated by CRLF, as a string, or returns null if no response has been received. If a network error happened, an empty string is returned.",
        "name": "XMLHttpRequest.getAllResponseHeaders",
        "params": [],
        "path": "dom/xmlhttprequest/getallresponseheaders",
        "syntax": "var headers = XMLHttpRequest.getAllResponseHeaders();",
        "type": "XMLHTTPRequest"
    },
    "XMLHttpRequest.getResponseHeader": {
        "descr": "The XMLHttpRequest method getResponseHeader() returns the string containing the text of of a particular header's value. If there are multiple response headers with the same name, then their values are returned as a single concatenated string, where each value is separated from the previous one by a pair of comma and space. The getResponseHeader() method returns the value as a UTF byte sequence.",
        "name": "XMLHttpRequest.getResponseHeader",
        "params": [
            {
                "descr": "A ByteString indicating the name of the header you want to return the text value of.",
                "name": "name"
            }
        ],
        "path": "dom/xmlhttprequest/getresponseheader",
        "syntax": "var myHeader = XMLHttpRequest.getResponseHeader(headerName);",
        "type": "XMLHTTPRequest"
    },
    "XMLHttpRequest.init": {
        "descr": "Use XMLHttpRequest (XHR) objects to interact with servers. You can retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just part of a page without disrupting what the user is doing. XMLHttpRequest is used heavily in Ajax programming.",
        "name": "XMLHttpRequest.init",
        "params": [
            {
                "descr": "The constructor initializes an XMLHttpRequest. ",
                "name": "XMLHttpRequest()"
            },
            {
                "descr": "Returns an ArrayBuffer, Blob, Document, JavaScript object, or a DOMString, depending on the value of XMLHttpRequest.responseType. ",
                "name": "XMLHttpRequest.response Read only"
            },
            {
                "descr": "Is a nsIChannel. The channel used by the object when performing the request.",
                "name": "XMLHttpRequest.channelRead only"
            },
            {
                "descr": "Is a boolean. If true, the request will be sent without cookie and authentication headers.",
                "name": "XMLHttpRequest.mozAnonRead only"
            },
            {
                "descr": "Is a boolean. If true, the same origin policy will not be enforced on the request.",
                "name": "XMLHttpRequest.mozSystemRead only"
            },
            {
                "descr": "Is a boolean. It indicates whether or not the object represents a background service request.",
                "name": "XMLHttpRequest.mozBackgroundRequest"
            },
            {
                "descr": "Is an ArrayBuffer. The response to the request, as a JavaScript typed array.",
                "name": "XMLHttpRequest.mozResponseArrayBuffer Obsolete since Gecko 6 Read only"
            },
            {
                "descr": "This Gecko-only feature, a boolean, was removed in Firefox/Gecko 22. ",
                "name": "XMLHttpRequest.multipartObsolete since Gecko 22"
            },
            {
                "descr": "Aborts the request if it has already been sent.",
                "name": "XMLHttpRequest.abort()"
            },
            {
                "descr": "Returns all the response headers, separated by CRLF, as a string, or null if no response has been received.",
                "name": "XMLHttpRequest.getAllResponseHeaders()"
            },
            {
                "descr": "Returns the string containing the text of the specified header, or null if either the response has not yet been received or the header doesn't exist in the response.",
                "name": "XMLHttpRequest.getResponseHeader()"
            },
            {
                "descr": "Initializes a request. This method is to be used from JavaScript code; to initialize a request from native code, use openRequest() instead.",
                "name": "XMLHttpRequest.open()"
            },
            {
                "descr": "Overrides the MIME type returned by the server.",
                "name": "XMLHttpRequest.overrideMimeType()"
            },
            {
                "descr": "Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.",
                "name": "XMLHttpRequest.send()"
            },
            {
                "descr": "Sets the value of an HTTP request header. ",
                "name": "XMLHttpRequest.setRequestHeader()"
            },
            {
                "descr": "A variant of the send() method that sends binary data.",
                "name": "XMLHttpRequest.sendAsBinary()"
            },
            {
                "descr": "Before IE 10, the value of XMLHttpRequest.responseText could be read only once the request was complete.",
                "name": "?"
            }
        ],
        "path": "dom/xmlhttprequest#xmlhttprequest-init",
        "syntax": "XMLHttpRequest.timeout Is an unsigned long representing the number of milliseconds a request can take before automatically being terminated. XMLHttpRequestEventTarget.ontimeout Is an EventHandler that is called whenever the request times out.   XMLHttpRequest.upload Read only   Is an XMLHttpRequestUpload, representing the upload process. XMLHttpRequest.withCredentials Is a Boolean that indicates whether or not cross-site Access-Control requests should be made using credentials such as cookies or authorization headers.  Non-standard properties   XMLHttpRequest.channelRead only   Is a nsIChannel. The channel used by the object when performing the request.  XMLHttpRequest.mozAnonRead only   Is a boolean. If true, the request will be sent without cookie and authentication headers.  XMLHttpRequest.mozSystemRead only   Is a boolean. If true, the same origin policy will not be enforced on the request. XMLHttpRequest.mozBackgroundRequest Is a boolean. It indicates whether or not the object represents a background service request.  XMLHttpRequest.mozResponseArrayBuffer Obsolete since Gecko 6 Read only   Is an ArrayBuffer. The response to the request, as a JavaScript typed array.  XMLHttpRequest.multipartObsolete since Gecko 22   This Gecko-only feature, a boolean, was removed in Firefox/Gecko 22. Please use Server-Sent Events, Web Sockets, or responseText from progress events instead.  Event handlers onreadystatechange as a property of the XMLHttpRequest instance is supported in all browsers. Since then, a number of additional event handlers have been implemented in various browsers (onload, onerror, onprogress, etc.). See Using XMLHttpRequest.",
        "type": "XMLHTTPRequest"
    },
    "XMLHttpRequest.onreadystatechange": {
        "descr": "An EventHandler that is called whenever the readyState attribute changes. The callback is called from the user interface thread. The XMLHttpRequest.onreadystatechange property contains the event handler to be called when the readystatechange event is fired, that is every time the readyState property of the XMLHttpRequest changes.",
        "name": "XMLHttpRequest.onreadystatechange",
        "params": [],
        "path": "dom/xmlhttprequest/onreadystatechange",
        "syntax": "XMLHttpRequest.onreadystatechange = callback; Values   callback is the function to be executed when the readyState changes.  Example var xhr = new XMLHttpRequest(), method = \"GET\", url = \"https://developer.mozilla.org/\"; xhr.open(method, url, true);\n or  xhr.onreadystatechange = function () { if(xhr.readyState === 4 && xhr.status === 200) { console.log(xhr.responseText);\n or  } }; xhr.send();",
        "type": "XMLHTTPRequest"
    },
    "XMLHttpRequest.open": {
        "descr": "The XMLHttpRequest method open() initializes a newly-created request, or re-initializes an existing one.",
        "name": "XMLHttpRequest.open",
        "params": [
            {
                "descr": "The HTTP request method to use, such as \"GET\", \"POST\", \"PUT\", \"DELETE\", etc. ",
                "name": "method"
            },
            {
                "descr": "A DOMString representing the URL to send the request to.",
                "name": "url"
            },
            {
                "descr": "An optional Boolean parameter, defaulting to true, indicating whether or not to perform the operation asynchronously. ",
                "name": "async Optional"
            },
            {
                "descr": "The optional user name to use for authentication purposes; by default, this is the null value.",
                "name": "user Optional"
            },
            {
                "descr": "The optional password to use for authentication purposes; by default, this is the null value.",
                "name": "password Optional"
            }
        ],
        "path": "dom/xmlhttprequest/open",
        "syntax": "XMLHttpRequest.open(method, url) XMLHttpRequest.open(method, url, async) XMLHttpRequest.open(method, url, async, user) XMLHttpRequest.open(method, url, async, user, password)",
        "type": "XMLHTTPRequest"
    },
    "XMLHttpRequest.openRequest": {
        "descr": "Use XMLHttpRequest (XHR) objects to interact with servers. You can retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just part of a page without disrupting what the user is doing. XMLHttpRequest is used heavily in Ajax programming.",
        "name": "XMLHttpRequest.openRequest",
        "params": [
            {
                "descr": "The constructor initializes an XMLHttpRequest. ",
                "name": "XMLHttpRequest()"
            },
            {
                "descr": "Returns an ArrayBuffer, Blob, Document, JavaScript object, or a DOMString, depending on the value of XMLHttpRequest.responseType. ",
                "name": "XMLHttpRequest.response Read only"
            },
            {
                "descr": "Is a nsIChannel. The channel used by the object when performing the request.",
                "name": "XMLHttpRequest.channelRead only"
            },
            {
                "descr": "Is a boolean. If true, the request will be sent without cookie and authentication headers.",
                "name": "XMLHttpRequest.mozAnonRead only"
            },
            {
                "descr": "Is a boolean. If true, the same origin policy will not be enforced on the request.",
                "name": "XMLHttpRequest.mozSystemRead only"
            },
            {
                "descr": "Is a boolean. It indicates whether or not the object represents a background service request.",
                "name": "XMLHttpRequest.mozBackgroundRequest"
            },
            {
                "descr": "Is an ArrayBuffer. The response to the request, as a JavaScript typed array.",
                "name": "XMLHttpRequest.mozResponseArrayBuffer Obsolete since Gecko 6 Read only"
            },
            {
                "descr": "This Gecko-only feature, a boolean, was removed in Firefox/Gecko 22. ",
                "name": "XMLHttpRequest.multipartObsolete since Gecko 22"
            },
            {
                "descr": "Aborts the request if it has already been sent.",
                "name": "XMLHttpRequest.abort()"
            },
            {
                "descr": "Returns all the response headers, separated by CRLF, as a string, or null if no response has been received.",
                "name": "XMLHttpRequest.getAllResponseHeaders()"
            },
            {
                "descr": "Returns the string containing the text of the specified header, or null if either the response has not yet been received or the header doesn't exist in the response.",
                "name": "XMLHttpRequest.getResponseHeader()"
            },
            {
                "descr": "Initializes a request. This method is to be used from JavaScript code; to initialize a request from native code, use openRequest() instead.",
                "name": "XMLHttpRequest.open()"
            },
            {
                "descr": "Overrides the MIME type returned by the server.",
                "name": "XMLHttpRequest.overrideMimeType()"
            },
            {
                "descr": "Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.",
                "name": "XMLHttpRequest.send()"
            },
            {
                "descr": "Sets the value of an HTTP request header. ",
                "name": "XMLHttpRequest.setRequestHeader()"
            },
            {
                "descr": "A variant of the send() method that sends binary data.",
                "name": "XMLHttpRequest.sendAsBinary()"
            },
            {
                "descr": "Before IE 10, the value of XMLHttpRequest.responseText could be read only once the request was complete.",
                "name": "?"
            }
        ],
        "path": "dom/xmlhttprequest#xmlhttprequest-openrequest",
        "syntax": "XMLHttpRequest.timeout Is an unsigned long representing the number of milliseconds a request can take before automatically being terminated. XMLHttpRequestEventTarget.ontimeout Is an EventHandler that is called whenever the request times out.   XMLHttpRequest.upload Read only   Is an XMLHttpRequestUpload, representing the upload process. XMLHttpRequest.withCredentials Is a Boolean that indicates whether or not cross-site Access-Control requests should be made using credentials such as cookies or authorization headers.  Non-standard properties   XMLHttpRequest.channelRead only   Is a nsIChannel. The channel used by the object when performing the request.  XMLHttpRequest.mozAnonRead only   Is a boolean. If true, the request will be sent without cookie and authentication headers.  XMLHttpRequest.mozSystemRead only   Is a boolean. If true, the same origin policy will not be enforced on the request. XMLHttpRequest.mozBackgroundRequest Is a boolean. It indicates whether or not the object represents a background service request.  XMLHttpRequest.mozResponseArrayBuffer Obsolete since Gecko 6 Read only   Is an ArrayBuffer. The response to the request, as a JavaScript typed array.  XMLHttpRequest.multipartObsolete since Gecko 22   This Gecko-only feature, a boolean, was removed in Firefox/Gecko 22. Please use Server-Sent Events, Web Sockets, or responseText from progress events instead.  Event handlers onreadystatechange as a property of the XMLHttpRequest instance is supported in all browsers. Since then, a number of additional event handlers have been implemented in various browsers (onload, onerror, onprogress, etc.). See Using XMLHttpRequest.",
        "type": "XMLHTTPRequest"
    },
    "XMLHttpRequest.overrideMimeType": {
        "descr": "Draft This page is not complete.",
        "name": "XMLHttpRequest.overrideMimeType",
        "params": [
            {
                "descr": "A DOMString specifying the MIME type to use instead of the one specified by the server. ",
                "name": "mimeType"
            }
        ],
        "path": "dom/xmlhttprequest/overridemimetype",
        "syntax": "XMLHttpRequest.overrideMimeType(mimeType)",
        "type": "XMLHTTPRequest"
    },
    "XMLHttpRequest.response": {
        "descr": "The XMLHttpRequest response property returns the response's body content as an ArrayBuffer, Blob, Document, JavaScript Object, or DOMString, depending on the value of the request's responseType property.",
        "name": "XMLHttpRequest.response",
        "params": [],
        "path": "dom/xmlhttprequest/response",
        "syntax": "var body = XMLHttpRequest.response;  Value An appropriate object based on the value of responseType. You may attempt to request the data be provided in a specific format by setting the value of responseType after calling open()",
        "type": "XMLHTTPRequest"
    },
    "XMLHttpRequest.responseText": {
        "descr": "Draft This page is not complete.",
        "name": "XMLHttpRequest.responseText",
        "params": [
            {
                "descr": "The XMLHttpRequest.responseType is not set to either the empty string or \"text\". ",
                "name": "InvalidStateError"
            },
            {
                "descr": "Before IE 10, the value of XMLHttpRequest.responseText could be read only once the request was complete.",
                "name": "?"
            }
        ],
        "path": "dom/xmlhttprequest/responsetext",
        "syntax": "var resultText = XMLHttpRequest.responseText; Value A DOMString which contains either the textual data received using the XMLHttpRequest or null if the request failed or has not yet been sent by calling send()",
        "type": "XMLHTTPRequest"
    },
    "XMLHttpRequest.responseType": {
        "descr": "The XMLHttpRequest property responseType is an enumerated string value specifying the type of data contained in the response. It also lets the author change the response type. If an empty string is set as the value of responseType, the default value of \"text\" is used.",
        "name": "XMLHttpRequest.responseType",
        "params": [
            {
                "descr": "An attempt was made to change the value of responseType on anXMLHttpRequest which is in synchronous mode but not in a Worker. ",
                "name": "InvalidAccessError"
            }
        ],
        "path": "dom/xmlhttprequest/responsetype",
        "syntax": "var type = XMLHttpRequest.responseType; XMLHttpRequest.responseType = type; Value A string taken from the XMLHttpRequestResponseType enum which specifies what type of data the response contains.  When setting responseType to a particular value, the author should make sure that the server is actually sending a response compatible with that format. If the server returns data that is not compatible with the responseType that was set, the value of response will be null.  The values supported by responseType are the following:    Value Description     \"\" An empty responseType string is treated the same as \"text\", the default type (therefore, as a DOMString.   \"arraybuffer\" The response is a JavaScript ArrayBuffer containing binary data.   \"blob\" The response is a Blob object containing the binary data.   \"document\" The response is an HTML Document or XML XMLDocument, as appropriate based on the MIME type of the received data. See HTML in XMLHttpRequest to learn more about using XHR to fetch HTML content.   \"json\" The response is a JavaScript object created by parsing the contents of received data as JSON.   \"text\" The response is text in a DOMString object.    \"moz-chunked-arraybuffer\"   Similar to \"arraybuffer\", but the data is received in a stream. When using this response type, the value in response is only available in the handler for the progress event, and only contains the data received since the last progress event, rather than the cumulative data received since the request was sent. Accessing response during a progress event returns the data received so far. Outside the progress event handler, the value of response is always null.     \"ms-stream\"  The response is part of a streaming download; this response type is only allowed for download requests, and is only supported by Internet Explorer.    Exceptions  InvalidAccessError An attempt was made to change the value of responseType on anXMLHttpRequest which is in synchronous mode but not in a Worker. For additional details, see Synchronous XHR restrictions below.  Usage notes Synchronous XHR restrictions You cannot change the value of responseType in a synchronous XMLHttpRequest except when the request belongs to a Worker. This restriction is designed in part to help ensure that synchronous operations aren't used for large transactions that block the browser's main thread, thereby bogging down the user experience. XMLHttpRequests are asynchronous by default; they are only placed in synchronous mode by passing false as the value of the optional async parameter when calling open()",
        "type": "XMLHTTPRequest"
    },
    "XMLHttpRequest.responseXML": {
        "descr": "The XMLHttpRequest.responseXML property is a read-only value which returns a Document containing the HTML or XML retrieved by the request, or null if the request was unsuccessful, has not yet been sent, or if the retrieved data can't be correctly parsed as XML or HTML. The response is parsed as if it were a \"text/xml\" stream. When the responseType is set to \"document\" and the request has been made asynchronously, the response is parsed as a \"text/html\" stream. responseXML is null for any other types of data, as well as for data: URLs.",
        "name": "XMLHttpRequest.responseXML",
        "params": [
            {
                "descr": "The responseType isn't either \"document\" or an empty string (either of which indicates that the received data is XML or HTML).",
                "name": "InvalidStateError"
            }
        ],
        "path": "dom/xmlhttprequest/responsexml",
        "syntax": "var data = XMLHttpRequest.responseXML;  Value A Document containing the nodes resulting from parsing XML or HTML received using XMLHttpRequest, or null if no data has been received or the data is not of the correct type. Exceptions  InvalidStateError The responseType isn't either \"document\" or an empty string (either of which indicates that the received data is XML or HTML).  Example",
        "type": "XMLHTTPRequest"
    },
    "XMLHttpRequest.send": {
        "descr": "The XMLHttpRequest method send() sends the request to the server. If the request is asynchronous (which is the default), this method returns as soon as the request is sent and the result is delivered using events. If the request is synchronous, this method doesn't return until the response has arrived.",
        "name": "XMLHttpRequest.send",
        "params": [
            {
                "descr": "A body of data to be sent in the XHR request. ",
                "name": "body Optional"
            }
        ],
        "path": "dom/xmlhttprequest/send",
        "syntax": "XMLHttpRequest.send(body)",
        "type": "XMLHTTPRequest"
    },
    "XMLHttpRequest.sendAsBinary": {
        "descr": "The obsolete XMLHttpRequest method sendAsBinary() is a variant of the send() method that sends binary data. The send() method now supports binary data and should now be used instead.",
        "name": "XMLHttpRequest.sendAsBinary",
        "params": [
            {
                "descr": "A DOMString which encodes the binary content to be sent. ",
                "name": "binaryString"
            }
        ],
        "path": "dom/xmlhttprequest/sendasbinary",
        "syntax": "XMLHttpRequest.sendAsBinary(binaryString);",
        "type": "XMLHTTPRequest"
    },
    "XMLHttpRequest.setRequestHeader": {
        "descr": "The XMLHttpRequest method setRequestHeader() sets the value of an HTTP request header. When using setRequestHeader(), you must call it after calling open(), but before calling send(). If this method is called several times with the same header, the values are merged into one single request header.",
        "name": "XMLHttpRequest.setRequestHeader",
        "params": [
            {
                "descr": "The name of the header whose value is to be set.",
                "name": "header"
            },
            {
                "descr": "The value to set as the body of the header.",
                "name": "value"
            }
        ],
        "path": "dom/xmlhttprequest/setrequestheader",
        "syntax": "XMLHttpRequest.setRequestHeader(header, value)",
        "type": "XMLHTTPRequest"
    },
    "XMLHttpRequestEventTarget.onabort": {
        "descr": "The XMLHttpRequestEventTarget.onabort is the function called when an XMLHttpRequest transaction is aborted, such as when the XMLHttpRequest.abort() function is called.",
        "name": "XMLHttpRequestEventTarget.onabort",
        "params": [],
        "path": "dom/xmlhttprequesteventtarget/onabort",
        "syntax": "XMLHttpRequest.onabort = callback; Values   callback is the function to be executed when the transaction is aborted.  Example var xmlhttp = new XMLHttpRequest(), method = 'GET', url = 'https://developer.mozilla.org/'; xmlhttp.open(method, url, true);\n or  xmlhttp.onabort = function () { console.log('** The request was aborted');\n or  }; xmlhttp.send();\n or  //.. xmlhttp.abort();\n or  // This will invoke our onabort handler above);",
        "type": "XMLHTTPRequest"
    },
    "XMLHttpRequestEventTarget.onerror": {
        "descr": "The XMLHttpRequestEventTarget.onerror is the function called when an XMLHttpRequest transaction fails due to an error.",
        "name": "XMLHttpRequestEventTarget.onerror",
        "params": [],
        "path": "dom/xmlhttprequesteventtarget/onerror",
        "syntax": "XMLHttpRequest.onerror = callback; Values   callback is the function to be executed when the request fails.  Example var xmlhttp = new XMLHttpRequest(), method = 'GET', url = 'https://developer.mozilla.org/'; xmlhttp.open(method, url, true);\n or  xmlhttp.onerror = function () { console.log(\"** An error occurred during the transaction\");\n or  }; xmlhttp.send();",
        "type": "XMLHTTPRequest"
    },
    "XMLHttpRequestEventTarget.onload": {
        "descr": "The XMLHttpRequestEventTarget.onload is the function called when an XMLHttpRequest transaction completes successfully.",
        "name": "XMLHttpRequestEventTarget.onload",
        "params": [],
        "path": "dom/xmlhttprequesteventtarget/onload",
        "syntax": "XMLHttpRequest.onload = callback; Values   callback is the function to be executed when the request completes successfully. It receives a ProgressEvent object as its first argument. The value of this (i.e. the context) is the same XMLHttpRequest",
        "type": "XMLHTTPRequest"
    },
    "XMLHttpRequestEventTarget.onloadstart": {
        "descr": "The XMLHttpRequestEventTarget.onloadstart is the function called when an XMLHttpRequest transaction starts transferring data.",
        "name": "XMLHttpRequestEventTarget.onloadstart",
        "params": [],
        "path": "dom/xmlhttprequesteventtarget/onloadstart",
        "syntax": "XMLHttpRequest.onloadstart = callback; Values   callback is the function to be called when the transaction begins to transfer data.  Example var xmlhttp = new XMLHttpRequest(), method = 'GET', url = 'https://developer.mozilla.org/'; xmlhttp.open(method, url, true);\n or  xmlhttp.onloadstart = function () { console.log(\"Download underway\");\n or  }; xmlhttp.send();",
        "type": "XMLHTTPRequest"
    },
    "XMLHttpRequestEventTarget.onprogress": {
        "descr": "The XMLHttpRequestEventTarget.onprogress is the function called periodically with information when an XMLHttpRequest before success completely .",
        "name": "XMLHttpRequestEventTarget.onprogress",
        "params": [],
        "path": "dom/xmlhttprequesteventtarget/onprogress",
        "syntax": "XMLHttpRequest.onprogress = callback; Values   callback is the function to be called periodically before the request is completed.  Event   event.loaded the amount of data currently transfered.  event.total the total amount of data to be transferred.  XMLHttpRequest.onprogress = function (event) { event.loaded; event.total; };",
        "type": "XMLHTTPRequest"
    },
    "XMLHttpRequestEventTarget.ontimeout": {
        "descr": "Use XMLHttpRequest (XHR) objects to interact with servers. You can retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just part of a page without disrupting what the user is doing. XMLHttpRequest is used heavily in Ajax programming.",
        "name": "XMLHttpRequestEventTarget.ontimeout",
        "params": [
            {
                "descr": "The constructor initializes an XMLHttpRequest. ",
                "name": "XMLHttpRequest()"
            },
            {
                "descr": "Returns an ArrayBuffer, Blob, Document, JavaScript object, or a DOMString, depending on the value of XMLHttpRequest.responseType. ",
                "name": "XMLHttpRequest.response Read only"
            },
            {
                "descr": "Is a nsIChannel. The channel used by the object when performing the request.",
                "name": "XMLHttpRequest.channelRead only"
            },
            {
                "descr": "Is a boolean. If true, the request will be sent without cookie and authentication headers.",
                "name": "XMLHttpRequest.mozAnonRead only"
            },
            {
                "descr": "Is a boolean. If true, the same origin policy will not be enforced on the request.",
                "name": "XMLHttpRequest.mozSystemRead only"
            },
            {
                "descr": "Is a boolean. It indicates whether or not the object represents a background service request.",
                "name": "XMLHttpRequest.mozBackgroundRequest"
            },
            {
                "descr": "Is an ArrayBuffer. The response to the request, as a JavaScript typed array.",
                "name": "XMLHttpRequest.mozResponseArrayBuffer Obsolete since Gecko 6 Read only"
            },
            {
                "descr": "This Gecko-only feature, a boolean, was removed in Firefox/Gecko 22. ",
                "name": "XMLHttpRequest.multipartObsolete since Gecko 22"
            },
            {
                "descr": "Aborts the request if it has already been sent.",
                "name": "XMLHttpRequest.abort()"
            },
            {
                "descr": "Returns all the response headers, separated by CRLF, as a string, or null if no response has been received.",
                "name": "XMLHttpRequest.getAllResponseHeaders()"
            },
            {
                "descr": "Returns the string containing the text of the specified header, or null if either the response has not yet been received or the header doesn't exist in the response.",
                "name": "XMLHttpRequest.getResponseHeader()"
            },
            {
                "descr": "Initializes a request. This method is to be used from JavaScript code; to initialize a request from native code, use openRequest() instead.",
                "name": "XMLHttpRequest.open()"
            },
            {
                "descr": "Overrides the MIME type returned by the server.",
                "name": "XMLHttpRequest.overrideMimeType()"
            },
            {
                "descr": "Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent.",
                "name": "XMLHttpRequest.send()"
            },
            {
                "descr": "Sets the value of an HTTP request header. ",
                "name": "XMLHttpRequest.setRequestHeader()"
            },
            {
                "descr": "A variant of the send() method that sends binary data.",
                "name": "XMLHttpRequest.sendAsBinary()"
            },
            {
                "descr": "Before IE 10, the value of XMLHttpRequest.responseText could be read only once the request was complete.",
                "name": "?"
            }
        ],
        "path": "dom/xmlhttprequest#xmlhttprequesteventtarget-ontimeout",
        "syntax": "XMLHttpRequest.timeout Is an unsigned long representing the number of milliseconds a request can take before automatically being terminated. XMLHttpRequestEventTarget.ontimeout Is an EventHandler that is called whenever the request times out.   XMLHttpRequest.upload Read only   Is an XMLHttpRequestUpload, representing the upload process. XMLHttpRequest.withCredentials Is a Boolean that indicates whether or not cross-site Access-Control requests should be made using credentials such as cookies or authorization headers.  Non-standard properties   XMLHttpRequest.channelRead only   Is a nsIChannel. The channel used by the object when performing the request.  XMLHttpRequest.mozAnonRead only   Is a boolean. If true, the request will be sent without cookie and authentication headers.  XMLHttpRequest.mozSystemRead only   Is a boolean. If true, the same origin policy will not be enforced on the request. XMLHttpRequest.mozBackgroundRequest Is a boolean. It indicates whether or not the object represents a background service request.  XMLHttpRequest.mozResponseArrayBuffer Obsolete since Gecko 6 Read only   Is an ArrayBuffer. The response to the request, as a JavaScript typed array.  XMLHttpRequest.multipartObsolete since Gecko 22   This Gecko-only feature, a boolean, was removed in Firefox/Gecko 22. Please use Server-Sent Events, Web Sockets, or responseText from progress events instead.  Event handlers onreadystatechange as a property of the XMLHttpRequest instance is supported in all browsers. Since then, a number of additional event handlers have been implemented in various browsers (onload, onerror, onprogress, etc.). See Using XMLHttpRequest.",
        "type": "XMLHTTPRequest"
    },
    "XMLSerializer.serializeToString": {
        "descr": "The XMLSerializer method serializeToString() constructs a string representing the specified DOM tree in XML form.",
        "name": "XMLSerializer.serializeToString",
        "params": [
            {
                "descr": "The Node to use as the root of the DOM tree or subtree for which to construct an XML representation.",
                "name": "rootNode"
            },
            {
                "descr": "The specified rootNode is not a compatible node type. ",
                "name": "TypeError"
            },
            {
                "descr": "The tree could not be successfully serialized, probably due to issues with the content's compatibility with XML serialization.",
                "name": "InvalidStateError"
            },
            {
                "descr": "A serialization of HTML was requested but could not succeed due to the content not being well-formed.",
                "name": "SyntaxError"
            }
        ],
        "path": "dom/xmlserializer/serializetostring",
        "syntax": "xmlString = anXMLSerializer.serializeToString(rootNode);",
        "type": "Miscellaneous"
    },
    "^": {
        "descr": "Bitwise operators treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.",
        "name": "^",
        "params": [],
        "path": "javascript/operators/bitwise_operators#Bitwise_XOR",
        "syntax": "Standard Defined in several sections of the specification: Bitwise NOT operator, Bitwise shift operators, Binary bitwise operators    ECMAScript Latest Draft (ECMA-262) Draft Defined in several sections of the specification: Bitwise NOT operator, Bitwise shift operators, Binary bitwise operators     Browser compatibilityUpdate compatibility data on GitHub",
        "type": "Operators"
    },
    "^=": {
        "descr": "An assignment operator assigns a value to its left operand based on the value of its right operand.",
        "name": "^=",
        "params": [],
        "path": "javascript/operators/assignment_operators#Bitwise_XOR_assignment",
        "syntax": "Operator: x = y  Examples // Assuming the following variables // x = 5 // y = 10 // z = 25 x = y // x is 10 x = y = z // x, y and z are all 25  Addition assignment The addition assignment operator adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible. See the addition operator for more details. Syntax Operator: x += y Meaning: x = x + y  Examples // Assuming the following variables // foo = 'foo' // bar = 5 // baz = true // Number + Number -> addition bar += 2 // 7 // Boolean + Number -> addition baz += 1 // 2 // Boolean + Boolean -> addition baz += false // 1 // Number + String -> concatenation bar += 'foo' // \"5foo\" // String + Boolean -> concatenation foo += false // \"foofalse\" // String + String -> concatenation foo += 'bar' // \"foobar\"  Subtraction assignment The subtraction assignment operator subtracts the value of the right operand from a variable and assigns the result to the variable. See the subtraction operator for more details. Syntax Operator: x -= y Meaning: x = x - y  Examples // Assuming the following variable // bar = 5 bar -= 2 // 3 bar -= 'foo' // NaN  Multiplication assignment The multiplication assignment operator multiplies a variable by the value of the right operand and assigns the result to the variable. See the multiplication operator for more details. Syntax Operator: x *= y Meaning: x = x * y  Examples // Assuming the following variable // bar = 5 bar *= 2 // 10 bar *= 'foo' // NaN  Division assignment The division assignment operator divides a variable by the value of the right operand and assigns the result to the variable. See the division operator for more details. Syntax Operator: x /= y Meaning: x = x / y  Examples // Assuming the following variable // bar = 5 bar /= 2 // 2.5 bar /= 'foo' // NaN bar /= 0 // Infinity  Remainder assignment The remainder assignment operator divides a variable by the value of the right operand and assigns the remainder to the variable. See the remainder operator for more details. Syntax Operator: x %= y Meaning: x = x % y  Examples // Assuming the following variable // bar = 5 bar %= 2 // 1 bar %= 'foo' // NaN bar %= 0 // NaN  Exponentiation assignment The exponentiation assignment operator evaluates to the result of raising first operand to the power second operand. See the exponentiation operator for more details. Syntax Operator: x **= y Meaning: x = x ** y  Examples // Assuming the following variable // bar = 5 bar **= 2 // 25 bar **= 'foo' // NaN Left shift assignment The left shift assignment operator moves the specified amount of bits to the left and assigns the result to the variable. See the left shift operator for more details. Syntax Operator: x <<= y Meaning: x = x << y  Examples var bar = 5; // (00000000000000000000000000000101) bar <<= 2; // 20 (00000000000000000000000000010100)",
        "type": "Operators"
    },
    "__defineGetter__": {
        "descr": "This feature is deprecated in favor of defining getters using the object initializer syntax or the Object.defineProperty() API. While this feature is widely implemented, it is only described in the ECMAScript specification because of legacy usage. This method should not be used since better alternatives exist.",
        "name": "object.__defineGetter__",
        "params": [
            {
                "descr": "A string containing the name of the property to bind to the given function.",
                "name": "prop"
            },
            {
                "descr": "A function to be bound to a lookup of the specified property.",
                "name": "func"
            }
        ],
        "path": "javascript/global_objects/object/__definegetter__",
        "syntax": "Object.defineProperty()",
        "type": "Object"
    },
    "__defineSetter__": {
        "descr": "This feature is deprecated in favor of defining setters using the object initializer syntax or the Object.defineProperty() API.",
        "name": "object.__defineSetter__",
        "params": [
            {
                "descr": "A string containing the name of the property to be bound to the given function.",
                "name": "prop"
            },
            {
                "descr": "A function to be called when there is an attempt to set the specified property. ",
                "name": "fun"
            }
        ],
        "path": "javascript/global_objects/object/__definesetter__",
        "syntax": "Object.defineProperty()",
        "type": "Object"
    },
    "add": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .add() method constructs a new jQuery object from the union of those elements and the ones passed into the method. The argument to .add() can be pretty much anything that $() accepts, including a jQuery selector expression, references to DOM elements, or an HTML snippet.",
        "name": "add",
        "params": [
            {
                "descr": "Type: Selector  A string representing a selector expression to find additional elements to add to the set of matched elements.",
                "name": "selector"
            },
            {
                "descr": "Type: Element  One or more elements to add to the set of matched elements.",
                "name": "elements"
            },
            {
                "descr": "Type: htmlString  An HTML fragment to add to the set of matched elements.",
                "name": "html"
            },
            {
                "descr": "Type: jQuery  An existing jQuery object to add to the set of matched elements.",
                "name": "selection"
            },
            {
                "descr": "Type: Selector  A string representing a selector expression to find additional elements to add to the set of matched elements.",
                "name": "selector"
            },
            {
                "descr": "Type: Element  The point in the document at which the selector should begin matching; similar to the context argument of the $(selector, context) method.",
                "name": "context"
            }
        ],
        "path": "jquery/add",
        "syntax": ".add( selector ) Returns: jQuery",
        "type": "Traversing"
    },
    "addBack": {
        "descr": "As described in the discussion for .end(), jQuery objects maintain an internal stack that keeps track of changes to the matched set of elements. When one of the DOM traversal methods is called, the new set of elements is pushed onto the stack. If the previous set of elements is desired as well, .addBack() can help.",
        "name": "addBack",
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to match the current set of elements against.",
                "name": "selector"
            }
        ],
        "path": "jquery/addback",
        "syntax": ".addBack( [selector ] ) Returns: jQuery",
        "type": "Traversing"
    },
    "addClass": {
        "descr": "It's important to note that this method does not replace a class. It simply adds the class, appending it to any which may already be assigned to the elements.",
        "name": "addClass",
        "params": [
            {
                "descr": "Type: String  One or more space-separated classes to be added to the class attribute of each matched element.",
                "name": "className"
            },
            {
                "descr": "Type: Function( Integer index, String currentClassName ) => String  A function returning one or more space-separated class names to be added to the existing class name(s). ",
                "name": "function"
            }
        ],
        "path": "jquery/addclass",
        "syntax": ".addClass( className ) Returns: jQuery",
        "type": "Manipulation"
    },
    "after": {
        "descr": "The .after() and .insertAfter() methods perform the same task. The major difference is in the syntax—specifically, in the placement of the content and target. With .after(), the content to be inserted comes from the method's argument: $(target).after(contentToBeInserted). With .insertAfter(), on the other hand, the content precedes the method and is inserted after the target, which in turn is passed as the .insertAfter() method's argument: $(contentToBeInserted).insertAfter(target).",
        "name": "after",
        "params": [
            {
                "descr": "Type: htmlString or Element or Text or Array or jQuery  HTML string, DOM element, text node, array of elements and text nodes, or jQuery object to insert after each element in the set of matched elements.",
                "name": "content"
            },
            {
                "descr": "Type: htmlString or Element or Text or Array or jQuery  One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or jQuery objects to insert after each element in the set of matched elements.",
                "name": "content"
            },
            {
                "descr": "Type: Function( Integer index ) => htmlString or Element or Text or jQuery  A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert after each element in the set of matched elements. Receives the index position of the element in the set as an argument. Within the function, this refers to the current element in the set.",
                "name": "function"
            },
            {
                "descr": "Type: Function( Integer index, String html ) => htmlString or Element or Text or jQuery  A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert after each element in the set of matched elements. Receives the index position of the element in the set and the old HTML value of the element as arguments. Within the function, this refers to the current element in the set.",
                "name": "function-html"
            }
        ],
        "path": "jquery/after",
        "syntax": ".after( content [, content ] ) Returns: jQuery",
        "type": "Manipulation"
    },
    "ajaxComplete": {
        "descr": "Whenever an Ajax request completes, jQuery triggers the ajaxComplete event. Any and all handlers that have been registered with the .ajaxComplete() method are executed at this time.",
        "name": "ajaxComplete",
        "params": [
            {
                "descr": "Type: Function( Event event, jqXHR jqXHR, PlainObject ajaxOptions ) The function to be invoked.",
                "name": "handler"
            }
        ],
        "path": "jquery/ajaxcomplete",
        "syntax": ".ajaxComplete( handler ) Returns: jQuery",
        "type": "Ajax"
    },
    "ajaxError": {
        "descr": "Whenever an Ajax request completes with an error, jQuery triggers the ajaxError event. Any and all handlers that have been registered with the .ajaxError() method are executed at this time. Note: This handler is not called for cross-domain script and cross-domain JSONP requests.",
        "name": "ajaxError",
        "params": [
            {
                "descr": "Type: Function( Event event, jqXHR jqXHR, PlainObject ajaxSettings, String thrownError ) The function to be invoked.",
                "name": "handler"
            }
        ],
        "path": "jquery/ajaxerror",
        "syntax": ".ajaxError( handler ) Returns: jQuery",
        "type": "Ajax"
    },
    "ajaxSend": {
        "descr": "Whenever an Ajax request is about to be sent, jQuery triggers the ajaxSend event. Any and all handlers that have been registered with the .ajaxSend() method are executed at this time.",
        "name": "ajaxSend",
        "params": [
            {
                "descr": "Type: Function( Event event, jqXHR jqXHR, PlainObject ajaxOptions ) The function to be invoked.",
                "name": "handler"
            }
        ],
        "path": "jquery/ajaxsend",
        "syntax": ".ajaxSend( handler ) Returns: jQuery",
        "type": "Ajax"
    },
    "ajaxStart": {
        "descr": "Whenever an Ajax request is about to be sent, jQuery checks whether there are any other outstanding Ajax requests. If none are in progress, jQuery triggers the ajaxStart event. Any and all handlers that have been registered with the .ajaxStart() method are executed at this time.",
        "name": "ajaxStart",
        "params": [
            {
                "descr": "Type: Function() The function to be invoked.",
                "name": "handler"
            }
        ],
        "path": "jquery/ajaxstart",
        "syntax": ".ajaxStart( handler ) Returns: jQuery",
        "type": "Ajax"
    },
    "ajaxStop": {
        "descr": "Whenever an Ajax request completes, jQuery checks whether there are any other outstanding Ajax requests. If none remain, jQuery triggers the ajaxStop event. Any and all handlers that have been registered with the .ajaxStop() method are executed at this time. The ajaxStop event is also triggered if the last outstanding Ajax request is cancelled by returning false within the beforeSend callback function.",
        "name": "ajaxStop",
        "params": [
            {
                "descr": "Type: Function() The function to be invoked.",
                "name": "handler"
            }
        ],
        "path": "jquery/ajaxstop",
        "syntax": ".ajaxStop( handler ) Returns: jQuery",
        "type": "Ajax"
    },
    "ajaxSuccess": {
        "descr": "Whenever an Ajax request completes successfully, jQuery triggers the ajaxSuccess event. Any and all handlers that have been registered with the .ajaxSuccess() method are executed at this time.",
        "name": "ajaxSuccess",
        "params": [
            {
                "descr": "Type: Function( Event event, jqXHR jqXHR, PlainObject ajaxOptions, PlainObject data ) The function to be invoked.",
                "name": "handler"
            }
        ],
        "path": "jquery/ajaxsuccess",
        "syntax": ".ajaxSuccess( handler ) Returns: jQuery",
        "type": "Ajax"
    },
    "alert": {
        "descr": "The Window.alert() method displays an alert dialog with the optional specified content and an OK button.",
        "name": "window.alert",
        "params": [
            {
                "descr": "A string you want to display in the alert dialog, or, alternatively, an object that is converted into a string and displayed.",
                "name": "message Optional"
            }
        ],
        "path": "dom/window/alert",
        "syntax": "window.alert(message);",
        "type": "Window"
    },
    "anchor": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "string.anchor",
        "params": [
            {
                "descr": "A string representing the name attribute of the a tag to be created.",
                "name": "name"
            }
        ],
        "path": "javascript/global_objects/string/anchor",
        "syntax": "str.anchor(name)",
        "type": "String"
    },
    "andSelf": {
        "descr": "Note: This function has been deprecated and is now an alias for .addBack(), which should be used with jQuery 1.8 and later.",
        "name": "andSelf",
        "params": [],
        "path": "jquery/andself",
        "syntax": ".andSelf() Returns: jQueryversion deprecated: 1.8, removed: 3.0",
        "type": "Traversing"
    },
    "animate": {
        "descr": "The .animate() method allows us to create animation effects on any numeric CSS property. The only required parameter is a plain object of CSS properties. This object is similar to the one that can be sent to the .css() method, except that the range of properties is more restrictive.",
        "name": "animate",
        "params": [
            {
                "descr": "Type: PlainObject  An object of CSS properties and values that the animation will move toward.",
                "name": "properties"
            },
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.",
                "name": "duration"
            },
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.",
                "name": "easing"
            },
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.",
                "name": "complete"
            },
            {
                "descr": "Type: PlainObject  An object of CSS properties and values that the animation will move toward.",
                "name": "properties"
            },
            {
                "descr": "Type: PlainObject  A map of additional options to pass to the method. ",
                "name": "options"
            },
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.",
                "name": "easing"
            },
            {
                "descr": "(default: true) Type: Boolean or String  A Boolean indicating whether to place the animation in the effects queue. ",
                "name": "queue"
            },
            {
                "descr": "Type: PlainObject  An object containing one or more of the CSS properties defined by the properties argument and their corresponding easing functions. ",
                "name": "specialEasing"
            },
            {
                "descr": "Type: Function( Number now, Tween tween ) A function to be called for each animated property of each animated element. ",
                "name": "step"
            },
            {
                "descr": "Type: Function( Promise animation, Number progress, Number remainingMs ) A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties. (version added: 1.8)",
                "name": "progress"
            },
            {
                "descr": "Type: Function() A function that is called once the animation on an element is complete.",
                "name": "complete"
            },
            {
                "descr": "Type: Function( Promise animation ) A function to call when the animation on an element begins. ",
                "name": "start"
            },
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes (its Promise object is resolved). ",
                "name": "done"
            },
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element fails to complete (its Promise object is rejected). ",
                "name": "fail"
            },
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes or stops without completing (its Promise object is either resolved or rejected). (version added: 1.8)",
                "name": "always"
            }
        ],
        "path": "jquery/animate",
        "syntax": ".animate( properties [, duration ] [, easing ] [, complete ] ) Returns: jQuery",
        "type": "Effects"
    },
    "append": {
        "descr": "The .append() method inserts the specified content as the last child of each element in the jQuery collection (To insert it as the first child, use .prepend()).",
        "name": "append",
        "params": [
            {
                "descr": "Type: htmlString or Element or Text or Array or jQuery  DOM element, text node, array of elements and text nodes, HTML string, or jQuery object to insert at the end of each element in the set of matched elements.",
                "name": "content"
            },
            {
                "descr": "Type: htmlString or Element or Text or Array or jQuery  One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or jQuery objects to insert at the end of each element in the set of matched elements.",
                "name": "content"
            },
            {
                "descr": "Type: Function( Integer index, String html ) => htmlString or Element or Text or jQuery  A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert at the end of each element in the set of matched elements. Receives the index position of the element in the set and the old HTML value of the element as arguments. Within the function, this refers to the current element in the set.",
                "name": "function"
            }
        ],
        "path": "jquery/append",
        "syntax": ".append( content [, content ] ) Returns: jQuery",
        "type": "Manipulation"
    },
    "appendTo": {
        "descr": "The .append() and .appendTo() methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With .append(), the selector expression preceding the method is the container into which the content is inserted. With .appendTo(), on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.",
        "name": "appendTo",
        "params": [
            {
                "descr": "Type: Selector or htmlString or Element or Array or jQuery  A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements will be inserted at the end of the element(s) specified by this parameter.",
                "name": "target"
            }
        ],
        "path": "jquery/appendto",
        "syntax": ".appendTo( target ) Returns: jQuery",
        "type": "Manipulation"
    },
    "apply": {
        "descr": "The apply() method calls a function with a given this value, and arguments provided as an array (or an array-like object).",
        "name": "function.apply",
        "params": [
            {
                "descr": "Optional. The value of this provided for the call to func. ",
                "name": "thisArg"
            },
            {
                "descr": "Optional. An array-like object, specifying the arguments with which func should be called, or null or undefined if no arguments should be provided to the function. ",
                "name": "argsArray"
            }
        ],
        "path": "javascript/global_objects/function/apply",
        "syntax": "call()",
        "type": "Function"
    },
    "arguments": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "function.arguments",
        "params": [],
        "path": "javascript/global_objects/function/arguments",
        "syntax": "function.arguments is deprecated. The recommended way to access the arguments object available within functions is simply to refer to the variable arguments. In the case of recursion, i.e. if function f appears several times on the call stack, the value of f.arguments represents the arguments corresponding to the most recent invocation of the function. The value of the arguments property is normally null if there is no outstanding invocation of the function in progress (that is, the function has been called but has not yet returned. Examples function f(n) { g(n - 1);\n or  } function g(n) { console.log('before: ' + g.arguments[0]);\n or  if (n > 0) { f(n);\n or  } console.log('after: ' + g.arguments[0]);\n or  } f(2);\n or  console.log('returned: ' + g.arguments);\n or  // Output // before: 1 // before: 0 // after: 0 // after: 1 // returned: null);",
        "type": "Function"
    },
    "arguments.@@iterator": {
        "descr": "The initial value of the @@iterator property is the same function object as the initial value of the Array.prototype.values property.",
        "name": "arguments.@@iterator",
        "params": [],
        "path": "javascript/functions/arguments/@@iterator",
        "syntax": "arguments[Symbol.iterator]()",
        "type": "Function"
    },
    "arguments.callee": {
        "descr": "The arguments.callee property contains the currently executing function.",
        "name": "arguments.callee",
        "params": [],
        "path": "javascript/functions/arguments/callee",
        "syntax": "function factorial (n) { return !(n > 1) ? 1 : factorial(n - 1) * n; } [1, 2, 3, 4, 5].map(factorial);",
        "type": "Function"
    },
    "arguments.length": {
        "descr": "The arguments.length property contains the number of arguments passed to the function.",
        "name": "arguments.length",
        "params": [],
        "path": "javascript/functions/arguments/length",
        "syntax": "arguments.length Description The arguments.length property provides the number of arguments actually passed to a function. This can be more or less than the defined parameter's count (see Function.length).",
        "type": "Function"
    },
    "array.@@iterator": {
        "descr": "The initial value of the @@iterator property is the same function object as the initial value of the values() property.",
        "name": "array.@@iterator",
        "params": [],
        "path": "javascript/global_objects/array/@@iterator",
        "syntax": "arr[Symbol.iterator]()",
        "type": "Array"
    },
    "array.@@unscopables": {
        "descr": "The @@unscopable symbol property contains property names that were not included in the ECMAScript standard prior to the ES2015 version. These properties are excluded from with statement bindings.",
        "name": "array.@@unscopables",
        "params": [],
        "path": "javascript/global_objects/array/@@unscopables",
        "syntax": "arr[Symbol.unscopables] Description The default array properties that are excluded from with bindings are: copyWithin, entries, fill, find, findIndex, includes, keys, and values. See Symbol.unscopables for how to set unscopables for your own objects.    Property attributes of Array.prototype[@@unscopables]      Writable no   Enumerable no   Configurable yes    Examples The following code works fine in ES5 and below. However, in ECMAScript 2015 and later, the Array.prototype.keys()",
        "type": "Array"
    },
    "array.concat": {
        "descr": "The concat() method is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array.",
        "name": "array.concat",
        "params": [
            {
                "descr": "Arrays and/or values to concatenate into a new array. ",
                "name": "valueN Optional"
            }
        ],
        "path": "javascript/global_objects/array/concat",
        "syntax": "var new_array = old_array.concat([value1[, value2[, ...[, valueN]]]])",
        "type": "Array"
    },
    "array.copyWithin": {
        "descr": "The copyWithin() method shallow copies part of an array to another location in the same array and returns it, without modifying its size.",
        "name": "array.copyWithin",
        "params": [
            {
                "descr": "Zero based index at which to copy the sequence to. ",
                "name": "target"
            },
            {
                "descr": "Zero based index at which to start copying elements from. ",
                "name": "start Optional"
            },
            {
                "descr": "Zero based index at which to end copying elements from. ",
                "name": "end Optional"
            }
        ],
        "path": "javascript/global_objects/array/copywithin",
        "syntax": "arr.copyWithin(target[, start[, end]])",
        "type": "Array"
    },
    "array.entries": {
        "descr": "The entries() method returns a new Array Iterator object that contains the key/value pairs for each index in the array.",
        "name": "array.entries",
        "params": [],
        "path": "javascript/global_objects/array/entries",
        "syntax": "array.entries()",
        "type": "Array"
    },
    "array.every": {
        "descr": "The every() method tests whether all elements in the array pass the test implemented by the provided function.",
        "name": "array.every",
        "params": [
            {
                "descr": "Function to test for each element, taking three arguments:  element The current element being processed in the array.",
                "name": "callback"
            },
            {
                "descr": "The index of the current element being processed in the array.",
                "name": "indexOptional"
            },
            {
                "descr": "The array every was called upon.",
                "name": "arrayOptional"
            },
            {
                "descr": "Optional. Value to use as this when executing callback.",
                "name": "thisArgOptional"
            }
        ],
        "path": "javascript/global_objects/array/every",
        "syntax": "arr.every(callback(element[, index[, array]])[, thisArg])",
        "type": "Array"
    },
    "array.fill": {
        "descr": "The fill() method fills all the elements of an array from a start index to an end index with a static value. The end index is not included.",
        "name": "array.fill",
        "params": [
            {
                "descr": "Value to fill an array.",
                "name": "value"
            },
            {
                "descr": "Start index, defaults to 0.",
                "name": "start Optional"
            },
            {
                "descr": "End index, defaults to this.length.",
                "name": "end Optional"
            }
        ],
        "path": "javascript/global_objects/array/fill",
        "syntax": "arr.fill(value[, start[, end]])",
        "type": "Array"
    },
    "array.filter": {
        "descr": "The filter() method creates a new array with all elements that pass the test implemented by the provided function.",
        "name": "array.filter",
        "params": [
            {
                "descr": "Function is a predicate, to test each element of the array. ",
                "name": "callback"
            },
            {
                "descr": "The current element being processed in the array.",
                "name": "element"
            },
            {
                "descr": "The index of the current element being processed in the array.",
                "name": "indexOptional"
            },
            {
                "descr": "The array filter was called upon.",
                "name": "arrayOptional"
            },
            {
                "descr": "Optional. Value to use as this when executing callback.",
                "name": "thisArgOptional"
            }
        ],
        "path": "javascript/global_objects/array/filter",
        "syntax": "var newArray = arr.filter(callback(element[, index[, array]])[, thisArg])",
        "type": "Array"
    },
    "array.find": {
        "descr": "The find() method returns the value of the first element in the array that satisfies the provided testing function. Otherwise undefined is returned.",
        "name": "array.find",
        "params": [
            {
                "descr": "Function to execute on each value in the array, taking three arguments:  element The current element being processed in the array.",
                "name": "callback"
            },
            {
                "descr": "The index of the current element being processed in the array.",
                "name": "indexOptional"
            },
            {
                "descr": "The array find was called upon.",
                "name": "arrayOptional"
            },
            {
                "descr": "Object to use as this when executing callback.",
                "name": "thisArg Optional"
            }
        ],
        "path": "javascript/global_objects/array/find",
        "syntax": "arr.find(callback(element[, index[, array]])[, thisArg])",
        "type": "Array"
    },
    "array.findIndex": {
        "descr": "The findIndex() method returns the index of the first element in the array that satisfies the provided testing function. Otherwise, it returns -1, indicating no element passed the test.",
        "name": "array.findIndex",
        "params": [
            {
                "descr": "A function to execute on each value in the array until the function returns true, indicating the desired element was found. ",
                "name": "callback"
            },
            {
                "descr": "The index of the current element being processed in the array.",
                "name": "indexOptional"
            },
            {
                "descr": "The array findIndex was called upon.",
                "name": "arrayOptional"
            },
            {
                "descr": "Optional. Object to use as this when executing callback.",
                "name": "thisArgOptional"
            }
        ],
        "path": "javascript/global_objects/array/findindex",
        "syntax": "arr.findIndex(callback(element[, index[, array]])[, thisArg])",
        "type": "Array"
    },
    "array.flat": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "array.flat",
        "params": [
            {
                "descr": "The depth level specifying how deep a nested array structure should be flattened. ",
                "name": "depth Optional"
            }
        ],
        "path": "javascript/global_objects/array/flat",
        "syntax": "var newArray = arr.flat([depth]);",
        "type": "Array"
    },
    "array.flatMap": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "array.flatMap",
        "params": [
            {
                "descr": "Function that produces an element of the new Array, taking three arguments:  currentValue The current element being processed in the array.",
                "name": "callback"
            },
            {
                "descr": "The index of the current element being processed in the array.",
                "name": "indexOptional"
            },
            {
                "descr": "The array map was called upon.",
                "name": "arrayOptional"
            },
            {
                "descr": "Value to use as this when executing callback.",
                "name": "thisArgOptional"
            }
        ],
        "path": "javascript/global_objects/array/flatmap",
        "syntax": "var new_array = arr.flatMap(function callback(currentValue[, index[, array]]) { // return element for new_array }[, thisArg])",
        "type": "Array"
    },
    "array.forEach": {
        "descr": "The forEach() method executes a provided function once for each array element.",
        "name": "array.forEach",
        "params": [
            {
                "descr": "Function to execute for each element, taking three arguments:  currentValue The value of the current element being processed in the array.",
                "name": "callback"
            },
            {
                "descr": "The index of the current element being processed in the array.",
                "name": "indexOptional"
            },
            {
                "descr": "The array that forEach() is being applied to.",
                "name": "arrayOptional"
            },
            {
                "descr": "Value to use as this (i.e the reference Object) when executing callback.",
                "name": "thisArg Optional"
            }
        ],
        "path": "javascript/global_objects/array/foreach",
        "syntax": "arr.forEach(function callback(currentValue[, index[, array]]) { //your iterator }[, thisArg]);",
        "type": "Array"
    },
    "array.includes": {
        "descr": "The includes() method determines whether an array includes a certain element, returning true or false as appropriate.",
        "name": "array.includes",
        "params": [
            {
                "descr": "The element to search for.",
                "name": "searchElement"
            },
            {
                "descr": "The position in this array at which to begin searching for searchElement. ",
                "name": "fromIndex Optional"
            }
        ],
        "path": "javascript/global_objects/array/includes",
        "syntax": "arr.includes(searchElement[, fromIndex])",
        "type": "Array"
    },
    "array.indexOf": {
        "descr": "The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.",
        "name": "array.indexOf",
        "params": [
            {
                "descr": "Element to locate in the array.",
                "name": "searchElement"
            },
            {
                "descr": "The index to start the search at. ",
                "name": "fromIndex Optional"
            }
        ],
        "path": "javascript/global_objects/array/indexof",
        "syntax": "arr.indexOf(searchElement[, fromIndex])",
        "type": "Array"
    },
    "array.join": {
        "descr": "The join() method creates and returns a new string by concatenating all of the elements in an array (or an array-like object), separated by commas or a specified separator string.",
        "name": "array.join",
        "params": [
            {
                "descr": "Specifies a string to separate each pair of adjacent elements of the array. ",
                "name": "separator Optional"
            }
        ],
        "path": "javascript/global_objects/array/join",
        "syntax": "arr.join([separator])",
        "type": "Array"
    },
    "array.keys": {
        "descr": "The keys() method returns a new Array Iterator object that contains the keys for each index in the array.",
        "name": "array.keys",
        "params": [],
        "path": "javascript/global_objects/array/keys",
        "syntax": "arr.keys()",
        "type": "Array"
    },
    "array.lastIndexOf": {
        "descr": "The lastIndexOf() method returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex.",
        "name": "array.lastIndexOf",
        "params": [
            {
                "descr": "Element to locate in the array.",
                "name": "searchElement"
            },
            {
                "descr": "The index at which to start searching backwards. ",
                "name": "fromIndex Optional"
            }
        ],
        "path": "javascript/global_objects/array/lastindexof",
        "syntax": "arr.lastIndexOf(searchElement) arr.lastIndexOf(searchElement, fromIndex)",
        "type": "Array"
    },
    "array.map": {
        "descr": "The map() method creates a new array with the results of calling a provided function on every element in the calling array.",
        "name": "array.map",
        "params": [
            {
                "descr": "Function that produces an element of the new Array, taking three arguments:  currentValue The current element being processed in the array.",
                "name": "callback"
            },
            {
                "descr": "The index of the current element being processed in the array.",
                "name": "indexOptional"
            },
            {
                "descr": "The array map was called upon.",
                "name": "arrayOptional"
            },
            {
                "descr": "Value to use as this when executing callback.",
                "name": "thisArgOptional"
            }
        ],
        "path": "javascript/global_objects/array/map",
        "syntax": "var new_array = arr.map(function callback(currentValue[, index[, array]]) { // Return element for new_array }[, thisArg])",
        "type": "Array"
    },
    "array.pop": {
        "descr": "The pop() method removes the last element from an array and returns that element. This method changes the length of the array.",
        "name": "array.pop",
        "params": [],
        "path": "javascript/global_objects/array/pop",
        "syntax": "arr.pop()",
        "type": "Array"
    },
    "array.push": {
        "descr": "The push() method adds one or more elements to the end of an array and returns the new length of the array.",
        "name": "array.push",
        "params": [
            {
                "descr": "The elements to add to the end of the array.",
                "name": "elementN"
            }
        ],
        "path": "javascript/global_objects/array/push",
        "syntax": "arr.push(element1[, ...[, elementN]])",
        "type": "Array"
    },
    "array.reduce": {
        "descr": "The reduce() method executes a reducer function (that you provide) on each member of the array resulting in a single output value.",
        "name": "array.reduce",
        "params": [
            {
                "descr": "Function to execute on each element in the array, taking four arguments:  accumulator The accumulator accumulates the callback's return values; it is the accumulated value previously returned in the last invocation of the callback, or initialValue, if supplied (see below).",
                "name": "callback"
            },
            {
                "descr": "The current element being processed in the array.",
                "name": "currentValue"
            },
            {
                "descr": "The index of the current element being processed in the array. ",
                "name": "currentIndexOptional"
            },
            {
                "descr": "The array reduce() was called upon.",
                "name": "arrayOptional"
            },
            {
                "descr": "Value to use as the first argument to the first call of the callback. ",
                "name": "initialValueOptional"
            }
        ],
        "path": "javascript/global_objects/array/reduce",
        "syntax": "arr.reduce(callback[, initialValue])",
        "type": "Array"
    },
    "array.reduceRight": {
        "descr": "The reduceRight() method applies a function against an accumulator and each value of the array (from right-to-left) to reduce it to a single value.",
        "name": "array.reduceRight",
        "params": [
            {
                "descr": "Function to execute on each value in the array, taking four arguments:  accumulator The value previously returned in the last invocation of the callback, or initialValue, if supplied. ",
                "name": "callback"
            },
            {
                "descr": "The current element being processed in the array.",
                "name": "currentValue"
            },
            {
                "descr": "The index of the current element being processed in the array.",
                "name": "indexOptional"
            },
            {
                "descr": "The array reduce was called upon.",
                "name": "arrayOptional"
            },
            {
                "descr": "Object to use as the first argument to the first call of the callback. ",
                "name": "initialValueOptional"
            }
        ],
        "path": "javascript/global_objects/array/reduceright",
        "syntax": "arr.reduceRight(callback[, initialValue])",
        "type": "Array"
    },
    "array.reverse": {
        "descr": "The reverse() method reverses an array in place. The first array element becomes the last, and the last array element becomes the first.",
        "name": "array.reverse",
        "params": [],
        "path": "javascript/global_objects/array/reverse",
        "syntax": "a.reverse()",
        "type": "Array"
    },
    "array.shift": {
        "descr": "The shift() method removes the first element from an array and returns that removed element. This method changes the length of the array.",
        "name": "array.shift",
        "params": [],
        "path": "javascript/global_objects/array/shift",
        "syntax": "arr.shift()",
        "type": "Array"
    },
    "array.slice": {
        "descr": "The slice() method returns a shallow copy of a portion of an array into a new array object selected from begin to end (end not included). The original array will not be modified.",
        "name": "array.slice",
        "params": [
            {
                "descr": "Zero-based index at which to begin extraction.",
                "name": "begin Optional"
            },
            {
                "descr": "Zero-based index before which to end extraction. ",
                "name": "end Optional"
            }
        ],
        "path": "javascript/global_objects/array/slice",
        "syntax": "arr.slice([begin[, end]])",
        "type": "Array"
    },
    "array.some": {
        "descr": "The some() method tests whether at least one element in the array passes the test implemented by the provided function.",
        "name": "array.some",
        "params": [
            {
                "descr": "Function to test for each element, taking three arguments:  element The current element being processed in the array.",
                "name": "callback"
            },
            {
                "descr": "The index of the current element being processed in the array.",
                "name": "index Optional"
            },
            {
                "descr": "The array some() was called upon.",
                "name": "arrayOptional"
            },
            {
                "descr": "Value to use as this when executing callback.",
                "name": "thisArgOptional"
            }
        ],
        "path": "javascript/global_objects/array/some",
        "syntax": "arr.some(callback(element[, index[, array]])[, thisArg])",
        "type": "Array"
    },
    "array.sort": {
        "descr": "The sort() method sorts the elements of an array in place and returns the array. The default sort order is built upon converting the elements into strings, then comparing their sequences of UTF-16 code units values.",
        "name": "array.sort",
        "params": [
            {
                "descr": "Specifies a function that defines the sort order. ",
                "name": "compareFunction Optional"
            }
        ],
        "path": "javascript/global_objects/array/sort",
        "syntax": "arr.sort([compareFunction])",
        "type": "Array"
    },
    "array.splice": {
        "descr": "The splice() method changes the contents of an array by removing existing elements and/or adding new elements.",
        "name": "array.splice",
        "params": [
            {
                "descr": "Index at which to start changing the array (with origin 0). ",
                "name": "start"
            },
            {
                "descr": "An integer indicating the number of old array elements to remove.",
                "name": "deleteCount Optional"
            },
            {
                "descr": "The elements to add to the array, beginning at the start index. ",
                "name": "item1, item2, ... Optional"
            }
        ],
        "path": "javascript/global_objects/array/splice",
        "syntax": "array.splice(start[, deleteCount[, item1[, item2[, ...]]]])",
        "type": "Array"
    },
    "array.toLocaleString": {
        "descr": "The toLocaleString() method returns a string representing the elements of the array. The elements are converted to Strings using their toLocaleString methods and these Strings are separated by a locale-specific String (such as a comma “,”).",
        "name": "array.toLocaleString",
        "params": [
            {
                "descr": "A string with a BCP 47 language tag, or an array of such strings. ",
                "name": "locales Optional"
            },
            {
                "descr": "An object with configuration properties, for numbers see Number.prototype.toLocaleString(), and for dates see Date.prototype.toLocaleString().",
                "name": "options Optional"
            }
        ],
        "path": "javascript/global_objects/array/tolocalestring",
        "syntax": "arr.toLocaleString([locales[, options]]);",
        "type": "Array"
    },
    "array.toString": {
        "descr": "The toString() method returns a string representing the specified array and its elements.",
        "name": "array.toString",
        "params": [],
        "path": "javascript/global_objects/array/tostring",
        "syntax": "arr.toString()",
        "type": "Array"
    },
    "array.unshift": {
        "descr": "The unshift() method adds one or more elements to the beginning of an array and returns the new length of the array.",
        "name": "array.unshift",
        "params": [
            {
                "descr": "The elements to add to the front of the array.",
                "name": "elementN"
            }
        ],
        "path": "javascript/global_objects/array/unshift",
        "syntax": "arr.unshift(element1[, ...[, elementN]])",
        "type": "Array"
    },
    "array.values": {
        "descr": "The values() method returns a new Array Iterator object that contains the values for each index in the array.",
        "name": "array.values",
        "params": [],
        "path": "javascript/global_objects/array/values",
        "syntax": "arr.values()",
        "type": "Array"
    },
    "arrayBuffer.byteLength": {
        "descr": "The byteLength accessor property represents the length of an ArrayBuffer in bytes.",
        "name": "arrayBuffer.byteLength",
        "params": [],
        "path": "javascript/global_objects/arraybuffer/bytelength",
        "syntax": "arraybuffer.byteLength Description The byteLength property is an accessor property whose set accessor function is undefined, meaning that you can only read this property. The value is established when the array is constructed and cannot be changed. This property returns 0 if this ArrayBuffer has been detached. Examples var buffer = new ArrayBuffer(8);\n or  buffer.byteLength; // 8);",
        "type": "ArrayBuffer"
    },
    "arrayBuffer.slice": {
        "descr": "The slice() method returns a new ArrayBuffer whose contents are a copy of this ArrayBuffer's bytes from begin, inclusive, up to end, exclusive.",
        "name": "arrayBuffer.slice",
        "params": [
            {
                "descr": "Zero-based byte index at which to begin slicing.",
                "name": "begin"
            },
            {
                "descr": "Byte index before which to end slicing. ",
                "name": "end"
            }
        ],
        "path": "javascript/global_objects/arraybuffer/slice",
        "syntax": "arraybuffer.slice(begin[, end])",
        "type": "ArrayBuffer"
    },
    "arrayBuffer.transfer": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "arrayBuffer.transfer",
        "params": [
            {
                "descr": "An ArrayBuffer object from which to transfer.",
                "name": "oldBuffer"
            },
            {
                "descr": "The byte length of the new ArrayBuffer object.",
                "name": "newByteLength"
            }
        ],
        "path": "javascript/global_objects/arraybuffer/transfer",
        "syntax": "ArrayBuffer.transfer(oldBuffer [, newByteLength]);",
        "type": "ArrayBuffer"
    },
    "assign": {
        "descr": "The Object.assign() method is used to copy the values of all enumerable own properties from one or more source objects to a target object. It will return the target object.",
        "name": "Object.assign",
        "params": [
            {
                "descr": "The target object.",
                "name": "target"
            },
            {
                "descr": "The source object(s).",
                "name": "sources"
            }
        ],
        "path": "javascript/global_objects/object/assign",
        "syntax": "Object.assign(target, ...sources)",
        "type": "Object"
    },
    "async function": {
        "descr": "The async function declaration defines an asynchronous function, which returns an AsyncFunction object. An asynchronous function is a function which operates asynchronously via the event loop, using an implicit Promise to return its result. But the syntax and structure of your code using async functions is much more like using standard synchronous functions.",
        "name": "async function",
        "params": [
            {
                "descr": "The function name.",
                "name": "name"
            },
            {
                "descr": "The name of an argument to be passed to the function.",
                "name": "param"
            },
            {
                "descr": "The statements comprising the body of the function.",
                "name": "statements"
            }
        ],
        "path": "javascript/statements/async_function",
        "syntax": "async function name([param[, param[, ... param]]]) { statements }",
        "type": "Statements"
    },
    "attr": {
        "descr": "The .attr() method gets the attribute value for only the first element in the matched set. To get the value for each element individually, use a looping construct such as jQuery's .each() or .map() method.",
        "name": "attr",
        "params": [
            {
                "descr": "Type: String  The name of the attribute to get.",
                "name": "attributeName"
            },
            {
                "descr": "Type: String  The name of the attribute to set.",
                "name": "attributeName"
            },
            {
                "descr": "Type: String or Number or Null  A value to set for the attribute. ",
                "name": "value"
            },
            {
                "descr": "Type: PlainObject  An object of attribute-value pairs to set.",
                "name": "attributes"
            },
            {
                "descr": "Type: String  The name of the attribute to set.",
                "name": "attributeName"
            },
            {
                "descr": "Type: Function( Integer index, String attr ) => String or Number  A function returning the value to set. ",
                "name": "function"
            }
        ],
        "path": "jquery/attr",
        "syntax": ".attr( attributeName ) Returns: String",
        "type": "Manipulation"
    },
    "await": {
        "descr": "The await operator is used to wait for a Promise. It can only be used inside an async function.",
        "name": "await",
        "params": [
            {
                "descr": "A Promise or any value to wait for.",
                "name": "expression"
            },
            {
                "descr": "Returns the fulfilled value of the promise, or the value itself if it's not a Promise.",
                "name": "rv"
            }
        ],
        "path": "javascript/operators/await",
        "syntax": "[rv] = await expression;  expression A Promise or any value to wait for. rv  Returns the fulfilled value of the promise, or the value itself if it's not a Promise.   Description The await expression causes async function execution to pause until a Promise is resolved, that is fulfilled or rejected, and to resume execution of the async function after fulfillment. When resumed, the value of the await expression is that of the fulfilled Promise. If the Promise is rejected, the await expression throws the rejected value. If the value of the expression following the await operator is not a Promise, it's converted to a resolved Promise. Examples If a Promise is passed to an await expression, it waits for the Promise to be fulfilled and returns the fulfilled value. function resolveAfter2Seconds(x) { return new Promise(resolve => { setTimeout(() => { resolve(x);\n or  }, 2000);\n or  });\n or  } async function f1() { var x = await resolveAfter2Seconds(10);\n or  console.log(x);\n or  // 10 } f1();",
        "type": "Operators"
    },
    "before": {
        "descr": "The .before() and .insertBefore() methods perform the same task. The major difference is in the syntax—specifically, in the placement of the content and target. With .before(), the content to be inserted comes from the method's argument: $(target).before(contentToBeInserted). With .insertBefore(), on the other hand, the content precedes the method and is inserted before the target, which in turn is passed as the .insertBefore() method's argument: $(contentToBeInserted).insertBefore(target).",
        "name": "before",
        "params": [
            {
                "descr": "Type: htmlString or Element or Text or Array or jQuery  HTML string, DOM element, text node, array of elements and text nodes, or jQuery object to insert before each element in the set of matched elements.",
                "name": "content"
            },
            {
                "descr": "Type: htmlString or Element or Text or Array or jQuery  One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or jQuery objects to insert before each element in the set of matched elements.",
                "name": "content"
            },
            {
                "descr": "Type: Function( Integer index ) => htmlString or Element or Text or jQuery  A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert before each element in the set of matched elements. Receives the index position of the element in the set as an argument. Within the function, this refers to the current element in the set.",
                "name": "function"
            },
            {
                "descr": "Type: Function( Integer index, String html ) => htmlString or Element or Text or jQuery  A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert before each element in the set of matched elements. Receives the index position of the element in the set and the old HTML value of the element as arguments. Within the function, this refers to the current element in the set.",
                "name": "function-html"
            }
        ],
        "path": "jquery/before",
        "syntax": ".before( content [, content ] ) Returns: jQuery",
        "type": "Manipulation"
    },
    "big": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "string.big",
        "params": [],
        "path": "javascript/global_objects/string/big",
        "syntax": "str.big()",
        "type": "String"
    },
    "bind": {
        "descr": "As of jQuery 3.0, .bind() has been deprecated. It was superseded by the .on() method for attaching event handlers to a document since jQuery 1.7, so its use was already discouraged. For earlier versions, the .bind() method is used for attaching an event handler directly to elements. Handlers are attached to the currently selected elements in the jQuery object, so those elements must exist at the point the call to .bind() occurs. For more flexible event binding, see the discussion of event delegation in .on().",
        "name": "bind",
        "params": [
            {
                "descr": "Type: String  A string containing one or more DOM event types, such as \"click\" or \"submit,\" or custom event names.",
                "name": "eventType"
            },
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.",
                "name": "eventData"
            },
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            },
            {
                "descr": "Type: String  A string containing one or more DOM event types, such as \"click\" or \"submit,\" or custom event names.",
                "name": "eventType"
            },
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.",
                "name": "eventData"
            },
            {
                "descr": "Type: Boolean  Setting the third argument to false will attach a function that prevents the default action from occurring and stops the event from bubbling. ",
                "name": "preventBubble"
            },
            {
                "descr": "Type: Object  An object containing one or more DOM event types and functions to execute for them.",
                "name": "events"
            }
        ],
        "path": "jquery/bind",
        "syntax": ".bind( eventType [, eventData ], handler ) Returns: jQueryversion deprecated: 3.0",
        "type": "Events"
    },
    "blink": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "string.blink",
        "params": [],
        "path": "javascript/global_objects/string/blink",
        "syntax": "str.blink()",
        "type": "String"
    },
    "block": {
        "descr": "A block statement (or compound statement in other languages) is used to group zero or more statements. The block is delimited by a pair of curly brackets and may optionally be labelled:",
        "name": "block",
        "params": [
            {
                "descr": "Statements grouped within the block statement.",
                "name": "StatementList"
            },
            {
                "descr": "An optional label for visual identification or as a target for break.",
                "name": "LabelIdentifier"
            }
        ],
        "path": "javascript/statements/block",
        "syntax": "{ StatementList }  Labelled Block Statement LabelIdentifier: { StatementList }   StatementList Statements grouped within the block statement. LabelIdentifier An optional label for visual identification or as a target for break.  Description The block statement is often called compound statement in other languages. It allows you to use multiple statements where JavaScript expects only one statement. Combining statements into blocks is a common practice in JavaScript. The opposite behavior is possible using an empty statement, where you provide no statement, although one is required. Block Scoping Rules With var  Variables declared with var do not have block scope. Variables introduced with a block are scoped to the containing function or script, and the effects of setting them persist beyond the block itself. In other words, block statements do not introduce a scope. Although \"standalone\" blocks are valid syntax, you do not want to use standalone blocks in JavaScript, because they don't do what you think they do, if you think they do anything like such blocks in C or Java. For example: var x = 1; { var x = 2; } console.log(x);\n or  // logs 2);",
        "type": "Statements"
    },
    "blur": {
        "descr": "This method is a shortcut for .on( \"blur\", handler ) in the first two variations, and .trigger( \"blur\" ) in the third.",
        "name": "blur",
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            },
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.",
                "name": "eventData"
            },
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            }
        ],
        "path": "jquery/blur",
        "syntax": ".blur( handler ) Returns: jQuery",
        "type": "Events"
    },
    "bold": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "string.bold",
        "params": [],
        "path": "javascript/global_objects/string/bold",
        "syntax": "str.bold()",
        "type": "String"
    },
    "boolean.toString": {
        "descr": "The toString() method returns a string representing the specified Boolean object.",
        "name": "boolean.toString",
        "params": [],
        "path": "javascript/global_objects/boolean/tostring",
        "syntax": "bool.toString()",
        "type": "Boolean"
    },
    "boolean.valueOf": {
        "descr": "The valueOf() method returns the primitive value of a Boolean object.",
        "name": "boolean.valueOf",
        "params": [],
        "path": "javascript/global_objects/boolean/valueof",
        "syntax": "bool.valueOf()",
        "type": "Boolean"
    },
    "break": {
        "descr": "The break statement terminates the current loop, switch, or label statement and transfers program control to the statement following the terminated statement.",
        "name": "break",
        "params": [
            {
                "descr": "Optional. Identifier associated with the label of the statement. ",
                "name": "label"
            }
        ],
        "path": "javascript/statements/break",
        "syntax": "break [label];  label Optional. Identifier associated with the label of the statement. If the statement is not a loop or switch, this is required.  Description The break statement includes an optional label that allows the program to break out of a labeled statement. The break statement needs to be nested within the referenced label. The labeled statement can be any block statement; it does not have to be preceded by a loop statement. A break statement, with or without a following label, cannot be used within the body of a function that is itself nested within the current loop, switch, or label statement that the break statement is intended to break out of. Examples The following function has a break statement that terminates the while loop when i is 3, and then returns the value 3 * x. function testBreak(x) { var i = 0; while (i < 6) { if (i == 3) { break; } i += 1; } return i * x; }",
        "type": "Statements"
    },
    "call": {
        "descr": "The call() method calls a function with a given this value and arguments provided individually.",
        "name": "function.call",
        "params": [
            {
                "descr": "Optional. The value of this provided for the call to a function. ",
                "name": "thisArg"
            },
            {
                "descr": "Optional. Arguments for the function.",
                "name": "arg1, arg2, ..."
            }
        ],
        "path": "javascript/global_objects/function/call",
        "syntax": "apply()",
        "type": "Function"
    },
    "callbacks.add": {
        "descr": "This method returns the Callbacks object onto which it is attached (this).",
        "name": "callbacks.add",
        "params": [
            {
                "descr": "Type: Function() or Array  A function, or array of functions, that are to be added to the callback list.",
                "name": "callbacks"
            }
        ],
        "path": "jquery/callbacks.add",
        "syntax": "callbacks.add( callbacks ) Returns: Callbacks",
        "type": "Callbacks Object"
    },
    "callbacks.disable": {
        "descr": "This method returns the Callbacks object onto which it is attached (this).",
        "name": "callbacks.disable",
        "params": [],
        "path": "jquery/callbacks.disable",
        "syntax": "callbacks.disable() Returns: Callbacks",
        "type": "Callbacks Object"
    },
    "callbacks.disabled": {
        "descr": "Use callbacks.disabled() to determine if the callbacks list has been disabled:",
        "name": "callbacks.disabled",
        "params": [],
        "path": "jquery/callbacks.disabled",
        "syntax": "callbacks.disabled() Returns: Boolean",
        "type": "Callbacks Object"
    },
    "callbacks.empty": {
        "descr": "This method returns the Callbacks object onto which it is attached (this).",
        "name": "callbacks.empty",
        "params": [],
        "path": "jquery/callbacks.empty",
        "syntax": "callbacks.empty() Returns: Callbacks",
        "type": "Callbacks Object"
    },
    "callbacks.fire": {
        "descr": "This method returns the Callbacks object onto which it is attached (this).",
        "name": "callbacks.fire",
        "params": [
            {
                "descr": "Type: Anything  The argument or list of arguments to pass back to the callback list.",
                "name": "arguments"
            }
        ],
        "path": "jquery/callbacks.fire",
        "syntax": "callbacks.fire( arguments ) Returns: Callbacks",
        "type": "Callbacks Object"
    },
    "callbacks.fireWith": {
        "descr": "This method returns the Callbacks object onto which it is attached (this).",
        "name": "callbacks.fireWith",
        "params": [
            {
                "descr": "Type: Anything  A reference to the context in which the callbacks in the list should be fired.",
                "name": "context"
            },
            {
                "descr": "Type: ArrayLikeObject  An array or array-like object of arguments to pass to the callbacks in the list. ",
                "name": "args"
            }
        ],
        "path": "jquery/callbacks.firewith",
        "syntax": "callbacks.fireWith( [context ] [, args ] ) Returns: Callbacks",
        "type": "Callbacks Object"
    },
    "callbacks.fired": {
        "descr": "Use callbacks.fired() to determine if the callbacks in a list have been called at least once:",
        "name": "callbacks.fired",
        "params": [],
        "path": "jquery/callbacks.fired",
        "syntax": "callbacks.fired() Returns: Boolean",
        "type": "Callbacks Object"
    },
    "callbacks.has": {
        "descr": "Use callbacks.has() to check if a callback list contains a specific callback:",
        "name": "callbacks.has",
        "params": [
            {
                "descr": "Type: Function() The callback to search for.",
                "name": "callback"
            }
        ],
        "path": "jquery/callbacks.has",
        "syntax": "callbacks.has( [callback ] ) Returns: Boolean",
        "type": "Callbacks Object"
    },
    "callbacks.lock": {
        "descr": "This method returns the Callbacks object onto which it is attached (this).",
        "name": "callbacks.lock",
        "params": [],
        "path": "jquery/callbacks.lock",
        "syntax": "callbacks.lock() Returns: Callbacks",
        "type": "Callbacks Object"
    },
    "callbacks.locked": {
        "descr": "Use callbacks.locked() to determine the lock-state of a callback list:",
        "name": "callbacks.locked",
        "params": [],
        "path": "jquery/callbacks.locked",
        "syntax": "callbacks.locked() Returns: Boolean",
        "type": "Callbacks Object"
    },
    "callbacks.remove": {
        "descr": "This method returns the Callbacks object onto which it is attached (this).",
        "name": "callbacks.remove",
        "params": [
            {
                "descr": "Type: Function() or Array  A function, or array of functions, that are to be removed from the callback list.",
                "name": "callbacks"
            }
        ],
        "path": "jquery/callbacks.remove",
        "syntax": "callbacks.remove( callbacks ) Returns: Callbacks",
        "type": "Callbacks Object"
    },
    "cancelAnimationFrame": {
        "descr": "Cancels an animation frame request previously scheduled through a call to window.requestAnimationFrame().",
        "name": "window.cancelAnimationFrame",
        "params": [
            {
                "descr": "The ID value returned by the call to window.requestAnimationFrame() that requested the callback.",
                "name": "requestID"
            }
        ],
        "path": "dom/window/cancelanimationframe",
        "syntax": "window.cancelAnimationFrame(requestID);",
        "type": "Window"
    },
    "cancelIdleCallback": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "window.cancelIdleCallback",
        "params": [
            {
                "descr": "The ID value returned by window.requestIdleCallback() when the callback was established.",
                "name": "handle"
            }
        ],
        "path": "dom/window/cancelidlecallback",
        "syntax": "window.cancelIdleCallback(handle);",
        "type": "Window"
    },
    "change": {
        "descr": "This method is a shortcut for .on( \"change\", handler ) in the first two variations, and .trigger( \"change\" ) in the third.",
        "name": "change",
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            },
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.",
                "name": "eventData"
            },
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            }
        ],
        "path": "jquery/change",
        "syntax": ".change( handler ) Returns: jQuery",
        "type": "Events"
    },
    "charAt": {
        "descr": "The String object's charAt() method returns a new string consisting of the single UTF-16 code unit located at the specified offset into the string.",
        "name": "string.charAt",
        "params": [
            {
                "descr": "An integer between 0 and 1-less-than the length of the string. ",
                "name": "index"
            }
        ],
        "path": "javascript/global_objects/string/charat",
        "syntax": "character = str.charAt(index)",
        "type": "String"
    },
    "charCodeAt": {
        "descr": "The charCodeAt() method returns an integer between 0 and 65535 representing the UTF-16 code unit at the given index.",
        "name": "string.charCodeAt",
        "params": [
            {
                "descr": "An integer greater than or equal to 0 and less than the length of the string; if it is not a number, it defaults to 0.",
                "name": "index"
            }
        ],
        "path": "javascript/global_objects/string/charcodeat",
        "syntax": "str.charCodeAt(index)",
        "type": "String"
    },
    "children": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .children() method allows us to search through the children of these elements in the DOM tree and construct a new jQuery object from the matching elements. The .children() method differs from .find() in that .children() only travels a single level down the DOM tree while .find() can traverse down multiple levels to select descendant elements (grandchildren, etc.) as well. Note also that like most jQuery methods, .children() does not return text nodes; to get all children including text and comment nodes, use .contents().",
        "name": "children",
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.",
                "name": "selector"
            }
        ],
        "path": "jquery/children",
        "syntax": ".children( [selector ] ) Returns: jQuery",
        "type": "Traversing"
    },
    "class": {
        "descr": "The class expression is one way to define a class in ECMAScript 2015. Similar to function expressions, class expressions can be named or unnamed. If named, the name of the class is local to the class body only. JavaScript classes use prototype-based inheritance.",
        "name": "class",
        "params": [],
        "path": "javascript/operators/class",
        "syntax": "var MyClass = class [className] [extends] { // class body }; Description A class expression has a similar syntax to a class statement (declaration). However, with class expressions, you are able to omit the class name (\"binding identifier\"), which you can't with class statements. Additionally, class expressions allow you to redefine/re-declare classes and don't throw any type errors like class declaration. The constructor property is optional. And, typeof the classes generated using this keyword will always be \"function\".",
        "type": "Operators"
    },
    "clearImmediate": {
        "descr": "This method clears the action specified by window.setImmediate.",
        "name": "window.clearImmediate",
        "params": [],
        "path": "dom/window/clearimmediate",
        "syntax": "window.clearImmediate(immediateID)",
        "type": "Window"
    },
    "clearQueue": {
        "descr": "When the .clearQueue() method is called, all functions on the queue that have not been executed are removed from the queue. When used without an argument, .clearQueue() removes the remaining functions from fx, the standard effects queue. In this way it is similar to .stop(true). However, while the .stop() method is meant to be used only with animations, .clearQueue() can also be used to remove any function that has been added to a generic jQuery queue with the .queue() method.",
        "name": "clearQueue",
        "params": [
            {
                "descr": "Type: String  A string containing the name of the queue. ",
                "name": "queueName"
            }
        ],
        "path": "jquery/clearqueue",
        "syntax": ".clearQueue( [queueName ] ) Returns: jQuery",
        "type": "Data"
    },
    "click": {
        "descr": "This method is a shortcut for .on( \"click\", handler ) in the first two variations, and .trigger( \"click\" ) in the third. The click event is sent to an element when the mouse pointer is over the element, and the mouse button is pressed and released. Any HTML element can receive this event. For example, consider the HTML:",
        "name": "click",
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            },
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.",
                "name": "eventData"
            },
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            }
        ],
        "path": "jquery/click",
        "syntax": ".click( handler ) Returns: jQuery",
        "type": "Events"
    },
    "clone": {
        "descr": "The .clone() method performs a deep copy of the set of matched elements, meaning that it copies the matched elements as well as all of their descendant elements and text nodes.",
        "name": "clone",
        "params": [
            {
                "descr": "(default: false) Type: Boolean  A Boolean indicating whether event handlers should be copied along with the elements. ",
                "name": "withDataAndEvents"
            },
            {
                "descr": "(default: false) Type: Boolean  A Boolean indicating whether event handlers and data should be copied along with the elements. ",
                "name": "withDataAndEvents"
            },
            {
                "descr": "(default: value of withDataAndEvents) Type: Boolean  A Boolean indicating whether event handlers and data for all children of the cloned element should be copied. ",
                "name": "deepWithDataAndEvents"
            }
        ],
        "path": "jquery/clone",
        "syntax": ".clone( [withDataAndEvents ] ) Returns: jQuery",
        "type": "Manipulation"
    },
    "close": {
        "descr": "The Window.close() method closes the current window, or the window on which it was called.",
        "name": "window.close",
        "params": [],
        "path": "dom/window/close",
        "syntax": "window.close();",
        "type": "Window"
    },
    "closed": {
        "descr": "This read-only property indicates whether the referenced window is closed or not.",
        "name": "window.closed",
        "params": [
            {
                "descr": "A boolean. Possible Values:   true: The window has been closed. ",
                "name": "isClosed"
            }
        ],
        "path": "dom/window/closed",
        "syntax": "isClosed = windowRef.closed;   isClosed A boolean. Possible Values:   true: The window has been closed.  false: The window is open.    Examples Change the URL of a window from a popup The following example demonstrates how a popup window can change the URL of the window that opened it. Before attempting to change the URL, it checks that the current window has an opener using the window.opener property and that the opener isn't closed: // Check that an opener exists and is not closed if (window.opener && !window.opener.closed) { window.opener.location.href = \"http://www.mozilla.org\"; }",
        "type": "Window"
    },
    "closest": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .closest() method searches through these elements and their ancestors in the DOM tree and constructs a new jQuery object from the matching elements. The .parents() and .closest() methods are similar in that they both traverse up the DOM tree. The differences between the two, though subtle, are significant:",
        "name": "closest",
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.",
                "name": "selector"
            },
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.",
                "name": "selector"
            },
            {
                "descr": "Type: Element  A DOM element within which a matching element may be found.",
                "name": "context"
            },
            {
                "descr": "Type: jQuery  A jQuery object to match elements against.",
                "name": "selection"
            },
            {
                "descr": "Type: Element  An element to match elements against.",
                "name": "element"
            },
            {
                "descr": "Type: Array  An array or string containing a selector expression to match elements against (can also be a jQuery object).",
                "name": "selectors"
            },
            {
                "descr": "Type: Element  A DOM element within which a matching element may be found.",
                "name": "context"
            }
        ],
        "path": "jquery/closest",
        "syntax": ".closest( selector ) Returns: jQuery",
        "type": "Traversing"
    },
    "codePointAt": {
        "descr": "The codePointAt() method returns a non-negative integer that is the Unicode code point value.",
        "name": "string.codePointAt",
        "params": [
            {
                "descr": "Position of an element in the String to return the code point value from.",
                "name": "pos"
            }
        ],
        "path": "javascript/global_objects/string/codepointat",
        "syntax": "str.codePointAt(pos)",
        "type": "String"
    },
    "compile": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "regExp.compile",
        "params": [
            {
                "descr": "The text of the regular expression.",
                "name": "pattern"
            },
            {
                "descr": "If specified, flags can have any combination of the following values:  g global match",
                "name": "flags"
            },
            {
                "descr": "ignore case",
                "name": "i"
            },
            {
                "descr": "multiline; treat beginning and end characters (^ and $) as working over multiple lines (i.e., match the beginning or end of each line (delimited by \\n or \\r), not only the very beginning or end of the whole input string)",
                "name": "m"
            },
            {
                "descr": "sticky; matches only from the index indicated by the lastIndex property of this regular expression in the target string (and does not attempt to match from any later indexes).",
                "name": "y"
            }
        ],
        "path": "javascript/global_objects/regexp/compile",
        "syntax": "regexObj.compile(pattern, flags)",
        "type": "RegExp"
    },
    "concat": {
        "descr": "The concat() method concatenates the string arguments to the calling string and returns a new string.",
        "name": "string.concat",
        "params": [
            {
                "descr": "Strings to concatenate to this string.",
                "name": "string2...stringN"
            }
        ],
        "path": "javascript/global_objects/string/concat",
        "syntax": "str.concat(string2[, string3, ..., stringN])",
        "type": "String"
    },
    "confirm": {
        "descr": "The Window.confirm() method displays a modal dialog with an optional message and two buttons, OK and Cancel.",
        "name": "window.confirm",
        "params": [],
        "path": "dom/window/confirm",
        "syntax": "result = window.confirm(message);",
        "type": "Window"
    },
    "console": {
        "descr": "The Window.console read-only property returns a reference to the Console object, which provides methods for logging information to the browser's console. These methods are intended for debugging purposes only and should not be relied on for presenting information to end users.",
        "name": "window.console",
        "params": [],
        "path": "dom/window/console",
        "syntax": "var consoleObj = window.console;  Examples Logging to console The first example logs text to the console. console.log(\"An error occurred while loading the content\");",
        "type": "Window"
    },
    "console.assert": {
        "descr": "Writes an error message to the console if the assertion is false. If the assertion is true, nothing happens.",
        "name": "console.assert",
        "params": [
            {
                "descr": "Any boolean expression. If the assertion is false, the message is written to the console.",
                "name": "assertion"
            },
            {
                "descr": "A list of JavaScript objects to output. ",
                "name": "obj1 ... objN"
            },
            {
                "descr": "A JavaScript string containing zero or more substitution strings.",
                "name": "msg"
            },
            {
                "descr": "JavaScript objects with which to replace substitution strings within msg. ",
                "name": "subst1 ... substN"
            }
        ],
        "path": "dom/console/assert",
        "syntax": "console.assert(assertion, obj1 [, obj2, ..., objN]);\n or  console.assert(assertion, msg [, subst1, ..., substN]);\n or  // c-like message formatting);",
        "type": "Console"
    },
    "console.clear": {
        "descr": "Clears the console.",
        "name": "console.clear",
        "params": [],
        "path": "dom/console/clear",
        "syntax": "console.clear();",
        "type": "Console"
    },
    "console.count": {
        "descr": "Logs the number of times that this particular call to count() has been called. This function takes an optional argument label.",
        "name": "console.count",
        "params": [
            {
                "descr": "A string. If supplied, count() outputs the number of times it has been called with that label. ",
                "name": "label"
            }
        ],
        "path": "dom/console/count",
        "syntax": "console.count([label]);",
        "type": "Console"
    },
    "console.countReset": {
        "descr": "Resets the counter. This function takes an optional argument label.",
        "name": "console.countReset",
        "params": [
            {
                "descr": "A string. If supplied, countReset() resets the count for that label to 0. ",
                "name": "label"
            }
        ],
        "path": "dom/console/countreset",
        "syntax": "console.countReset([label]);",
        "type": "Console"
    },
    "console.dir": {
        "descr": "Displays an interactive list of the properties of the specified JavaScript object. The output is presented as a hierarchical listing with disclosure triangles that let you see the contents of child objects.",
        "name": "console.dir",
        "params": [
            {
                "descr": "A JavaScript object whose properties should be output.",
                "name": "object"
            }
        ],
        "path": "dom/console/dir",
        "syntax": "console.dir(object);",
        "type": "Console"
    },
    "console.dirxml": {
        "descr": "Displays an interactive tree of the descendant elements of the specified XML/HTML element. If it is not possible to display as an element the JavaScript Object view is shown instead. The output is presented as a hierarchical listing of expandable nodes that let you see the contents of child nodes.",
        "name": "console.dirxml",
        "params": [
            {
                "descr": "A JavaScript object whose properties should be output.",
                "name": "object"
            }
        ],
        "path": "dom/console/dirxml",
        "syntax": "console.dirxml(object);",
        "type": "Console"
    },
    "console.error": {
        "descr": "Outputs an error message to the Web Console.",
        "name": "console.error",
        "params": [
            {
                "descr": "A list of JavaScript objects to output. ",
                "name": "obj1 ... objN"
            },
            {
                "descr": "A JavaScript string containing zero or more substitution strings.",
                "name": "msg"
            },
            {
                "descr": "JavaScript objects with which to replace substitution strings within msg. ",
                "name": "subst1 ... substN"
            }
        ],
        "path": "dom/console/error",
        "syntax": "console.error(obj1 [, obj2, ..., objN]);\n or  console.error(msg [, subst1, ..., substN]);\n or  console.exception(obj1 [, obj2, ..., objN]);\n or  console.exception(msg [, subst1, ..., substN]);",
        "type": "Console"
    },
    "console.group": {
        "descr": "Creates a new inline group in the Web Console log. This indents following console messages by an additional level, until console.groupEnd() is called.",
        "name": "console.group",
        "params": [
            {
                "descr": "Label for the group. Optional. (Chrome 59 tested) Does not work with console.groupEnd().",
                "name": "label"
            }
        ],
        "path": "dom/console/group",
        "syntax": "console.group([label]);",
        "type": "Console"
    },
    "console.groupCollapsed": {
        "descr": "Creates a new inline group in the Web Console. Unlike console.group(), however, the new group is created collapsed. The user will need to use the disclosure button next to it to expand it, revealing the entries created in the group.",
        "name": "console.groupCollapsed",
        "params": [
            {
                "descr": "Label for the group. Optional.",
                "name": "label"
            }
        ],
        "path": "dom/console/groupcollapsed",
        "syntax": "console.groupCollapsed([label]);",
        "type": "Console"
    },
    "console.groupEnd": {
        "descr": "Exits the current inline group in the Web Console. See Using groups in the console in the console documentation for details and examples.",
        "name": "console.groupEnd",
        "params": [],
        "path": "dom/console/groupend",
        "syntax": "console.groupEnd();",
        "type": "Console"
    },
    "console.info": {
        "descr": "Outputs an informational message to the Web Console. In Firefox and Chrome, a small \"i\" icon is displayed next to these items in the Web Console's log.",
        "name": "console.info",
        "params": [
            {
                "descr": "A list of JavaScript objects to output. ",
                "name": "obj1 ... objN"
            },
            {
                "descr": "A JavaScript string containing zero or more substitution strings.",
                "name": "msg"
            },
            {
                "descr": "JavaScript objects with which to replace substitution strings within msg. ",
                "name": "subst1 ... substN"
            }
        ],
        "path": "dom/console/info",
        "syntax": "console.info(obj1 [, obj2, ..., objN]);\n or  console.info(msg [, subst1, ..., substN]);",
        "type": "Console"
    },
    "console.log": {
        "descr": "Outputs a message to the Web Console.",
        "name": "console.log",
        "params": [
            {
                "descr": "A list of JavaScript objects to output. ",
                "name": "obj1 ... objN"
            },
            {
                "descr": "A JavaScript string containing zero or more substitution strings.",
                "name": "msg"
            },
            {
                "descr": "JavaScript objects with which to replace substitution strings within msg. ",
                "name": "subst1 ... substN"
            }
        ],
        "path": "dom/console/log",
        "syntax": "console.log(obj1 [, obj2, ..., objN]);\n or  console.log(msg [, subst1, ..., substN]);",
        "type": "Console"
    },
    "console.profile": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.",
        "name": "console.profile",
        "params": [
            {
                "descr": "The name to give the profile. Optional.",
                "name": "profileName"
            }
        ],
        "path": "dom/console/profile",
        "syntax": "console.profile(profileName);",
        "type": "Console"
    },
    "console.profileEnd": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.",
        "name": "console.profileEnd",
        "params": [
            {
                "descr": "The name to give the profile. This parameter is optional.",
                "name": "profileName"
            }
        ],
        "path": "dom/console/profileend",
        "syntax": "console.profileEnd(profileName);",
        "type": "Console"
    },
    "console.table": {
        "descr": "Displays tabular data as a table.",
        "name": "console.table",
        "params": [
            {
                "descr": "The data to display. This must be either an array or an object.",
                "name": "data"
            },
            {
                "descr": "An array containing the names of columns to include in the output.",
                "name": "columns"
            }
        ],
        "path": "dom/console/table",
        "syntax": "console.table(data [, columns]);",
        "type": "Console"
    },
    "console.time": {
        "descr": "Starts a timer you can use to track how long an operation takes. You give each timer a unique name, and may have up to 10,000 timers running on a given page. When you call console.timeEnd() with the same name, the browser will output the time, in milliseconds, that elapsed since the timer was started.",
        "name": "console.time",
        "params": [
            {
                "descr": "The name to give the new timer. ",
                "name": "label"
            }
        ],
        "path": "dom/console/time",
        "syntax": "console.time(label);",
        "type": "Console"
    },
    "console.timeEnd": {
        "descr": "Stops a timer that was previously started by calling console.time().",
        "name": "console.timeEnd",
        "params": [
            {
                "descr": "The name of the timer to stop. Once stopped, the elapsed time is automatically displayed in the Web Console.",
                "name": "label"
            }
        ],
        "path": "dom/console/timeend",
        "syntax": "console.timeEnd(label);",
        "type": "Console"
    },
    "console.timeLog": {
        "descr": "Logs the current value of a timer that was previously started by calling console.time() to the console.",
        "name": "console.timeLog",
        "params": [
            {
                "descr": "The name of the timer to log to the console.",
                "name": "label"
            }
        ],
        "path": "dom/console/timelog",
        "syntax": "console.timeLog(label);",
        "type": "Console"
    },
    "console.timeStamp": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.",
        "name": "console.timeStamp",
        "params": [
            {
                "descr": "Label for the timestamp. Optional.",
                "name": "label"
            }
        ],
        "path": "dom/console/timestamp",
        "syntax": "console.timeStamp(label);",
        "type": "Console"
    },
    "console.trace": {
        "descr": "Outputs a stack trace to the Web Console.",
        "name": "console.trace",
        "params": [],
        "path": "dom/console/trace",
        "syntax": "console.trace();",
        "type": "Console"
    },
    "console.warn": {
        "descr": "Outputs a warning message to the Web Console.",
        "name": "console.warn",
        "params": [
            {
                "descr": "A list of JavaScript objects to output. ",
                "name": "obj1 ... objN"
            },
            {
                "descr": "A JavaScript string containing zero or more substitution strings.",
                "name": "msg"
            },
            {
                "descr": "JavaScript objects with which to replace substitution strings within msg. ",
                "name": "subst1 ... substN"
            }
        ],
        "path": "dom/console/warn",
        "syntax": "console.warn(obj1 [, obj2, ..., objN]);\n or  console.warn(msg [, subst1, ..., substN]);",
        "type": "Console"
    },
    "const": {
        "descr": "This declaration creates a constant whose scope can be either global or local to the block in which it is declared. Global constants do not become properties of the window object, unlike var variables. An initializer for a constant is required; that is, you must specify its value in the same statement in which it's declared (which makes sense, given that it can't be changed later).",
        "name": "const",
        "params": [
            {
                "descr": "The constant's name, which can be any legal identifier.",
                "name": "nameN"
            },
            {
                "descr": "The constant's value; this can be any legal expression, including a function expression.",
                "name": "valueN"
            }
        ],
        "path": "javascript/statements/const",
        "syntax": "const name1 = value1 [, name2 = value2 [, ... [, nameN = valueN]]];  nameN The constant's name, which can be any legal identifier. valueN The constant's value; this can be any legal expression, including a function expression.  Description This declaration creates a constant whose scope can be either global or local to the block in which it is declared. Global constants do not become properties of the window object, unlike var variables. An initializer for a constant is required; that is, you must specify its value in the same statement in which it's declared (which makes sense, given that it can't be changed later).",
        "type": "Statements"
    },
    "constructor": {
        "descr": "The constructor method is a special method for creating and initializing an object created within a class.",
        "name": "constructor",
        "params": [],
        "path": "javascript/classes/constructor",
        "syntax": "constructor([arguments]) { ... }",
        "type": "Classes"
    },
    "contents": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .contents() method allows us to search through the immediate children of these elements in the DOM tree and construct a new jQuery object from the matching elements. The .contents() and .children() methods are similar, except that the former includes text nodes and comment nodes as well as HTML elements in the resulting jQuery object. Please note that most jQuery operations don't support text nodes and comment nodes. The few that do will have an explicit note on their API documentation page.",
        "name": "contents",
        "params": [],
        "path": "jquery/contents",
        "syntax": ".contents() Returns: jQuery",
        "type": "Traversing"
    },
    "context": {
        "descr": "The .context property was deprecated in jQuery 1.10 and is only maintained to the extent needed for supporting .live() in the jQuery Migrate plugin. It may be removed without notice in a future version.",
        "name": "context",
        "params": [],
        "path": "jquery/context",
        "syntax": "contextReturns: Elementversion deprecated: 1.10, removed: 3.0   Description: The DOM node context originally passed to jQuery()",
        "type": "Miscellaneous"
    },
    "contextmenu": {
        "descr": "This method is a shortcut for .on( \"contextmenu\", handler ) in the first two variations, and .trigger( \"contextmenu\" ) in the third. The contextmenu event is sent to an element when the right button of the mouse is clicked on it, but before the context menu is displayed. In case the context menu key is pressed, the event is triggered on the html element or the currently focused element. Any HTML element can receive this event. For example, consider the HTML:",
        "name": "contextmenu",
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            },
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.",
                "name": "eventData"
            },
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            }
        ],
        "path": "jquery/contextmenu",
        "syntax": ".contextmenu( handler ) Returns: jQuery",
        "type": "Events"
    },
    "continue": {
        "descr": "The continue statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration.",
        "name": "continue",
        "params": [
            {
                "descr": "Identifier associated with the label of the statement.",
                "name": "label"
            }
        ],
        "path": "javascript/statements/continue",
        "syntax": "continue [label];  label Identifier associated with the label of the statement.  Description In contrast to the break statement, continue does not terminate the execution of the loop entirely: instead,  In a while loop, it jumps back to the condition.   In a for loop, it jumps to the update expression.  The continue statement can include an optional label that allows the program to jump to the next iteration of a labeled loop statement instead of the current loop. In this case, the continue statement needs to be nested within this labeled statement. Examples Using continue with while The following example shows a while loop that has a continue statement that executes when the value of i is 3. Thus, n takes on the values 1, 3, 7, and 12. var i = 0; var n = 0; while (i < 5) { i++; if (i === 3) { continue; } n += i; }",
        "type": "Statements"
    },
    "copyWithin": {
        "descr": "The copyWithin() method shallow copies part of an array to another location in the same array and returns it, without modifying its size.",
        "name": "array.copyWithin",
        "params": [
            {
                "descr": "Zero based index at which to copy the sequence to. ",
                "name": "target"
            },
            {
                "descr": "Zero based index at which to start copying elements from. ",
                "name": "start Optional"
            },
            {
                "descr": "Zero based index at which to end copying elements from. ",
                "name": "end Optional"
            }
        ],
        "path": "javascript/global_objects/array/copywithin",
        "syntax": "arr.copyWithin(target[, start[, end]])",
        "type": "Array"
    },
    "create": {
        "descr": "The Object.create() method creates a new object, using an existing object as the prototype of the newly created object.",
        "name": "Object.create",
        "params": [
            {
                "descr": "The object which should be the prototype of the newly-created object.",
                "name": "proto"
            },
            {
                "descr": "Optional. If specified and not undefined, an object whose enumerable own properties (that is, those properties defined upon itself and not enumerable properties along its prototype chain) specify property descriptors to be added to the newly-created object, with the corresponding property names. These properties correspond to the second argument of Object.defineProperties().",
                "name": "propertiesObject"
            }
        ],
        "path": "javascript/global_objects/object/create",
        "syntax": "Object.create(proto[, propertiesObject])",
        "type": "Object"
    },
    "crypto": {
        "descr": "The Window.crypto read-only property returns the Crypto object associated to the global object. This object allows web pages access to certain cryptographic related services.",
        "name": "window.crypto",
        "params": [],
        "path": "dom/window/crypto",
        "syntax": "var cryptoObj = window.crypto || window.msCrypto; // for IE 11  Example Using the Window.crypto",
        "type": "Window"
    },
    "css": {
        "descr": "The .css() method is a convenient way to get a computed style property from the first matched element, especially in light of the different ways browsers access most of those properties (the getComputedStyle() method in standards-based browsers versus the currentStyle and runtimeStyle properties in Internet Explorer prior to version 9) and the different terms browsers use for certain properties. For example, Internet Explorer's DOM implementation refers to the float property as styleFloat, while W3C standards-compliant browsers refer to it as cssFloat. For consistency, you can simply use \"float\", and jQuery will translate it to the correct value for each browser.",
        "name": "css",
        "params": [
            {
                "descr": "Type: String  A CSS property.",
                "name": "propertyName"
            },
            {
                "descr": "Type: Array  An array of one or more CSS properties.",
                "name": "propertyNames"
            },
            {
                "descr": "Type: String  A CSS property name.",
                "name": "propertyName"
            },
            {
                "descr": "Type: String or Number  A value to set for the property.",
                "name": "value"
            },
            {
                "descr": "Type: String  A CSS property name.",
                "name": "propertyName"
            },
            {
                "descr": "Type: Function( Integer index, String value ) => String or Number  A function returning the value to set. ",
                "name": "function"
            },
            {
                "descr": "Type: PlainObject  An object of property-value pairs to set.",
                "name": "properties"
            }
        ],
        "path": "jquery/css",
        "syntax": ".css( propertyName ) Returns: String",
        "type": "Manipulation"
    },
    "customElements": {
        "descr": "The customElements read-only property of the Window interface returns a reference to the CustomElementRegistry object, which can be used to register new custom elements and get information about previously registered custom elements.",
        "name": "window.customElements",
        "params": [],
        "path": "dom/window/customelements",
        "syntax": "let customElementRegistry = window.customElements; Return value A CustomElementRegistry object instance representing the custom element registry for the current window. Examples The most common example you'll see of this property being used is to get access to the CustomElementRegistry.define()",
        "type": "Window"
    },
    "data": {
        "descr": "The .data() method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore from memory leaks.",
        "name": "data",
        "params": [
            {
                "descr": "Type: String  A string naming the piece of data to set.",
                "name": "key"
            },
            {
                "descr": "Type: Anything  The new data value; this can be any Javascript type except undefined.",
                "name": "value"
            },
            {
                "descr": "Type: Object  An object of key-value pairs of data to update.",
                "name": "obj"
            },
            {
                "descr": "Type: String  Name of the data stored.",
                "name": "key"
            }
        ],
        "path": "jquery/data",
        "syntax": ".data( key, value ) Returns: jQuery",
        "type": "Data"
    },
    "dataView.buffer": {
        "descr": "The buffer accessor property represents the ArrayBuffer or SharedArrayBuffer referenced by the DataView at construction time.",
        "name": "dataView.buffer",
        "params": [],
        "path": "javascript/global_objects/dataview/buffer",
        "syntax": "dataview.buffer Description The buffer property is an accessor property whose set accessor function is undefined, meaning that you can only read this property. The value is established when the DataView is constructed and cannot be changed. Examples Using the buffer property var buffer = new ArrayBuffer(8);\n or  var dataview = new DataView(buffer);\n or  dataview.buffer; // ArrayBuffer { byteLength: 8 });",
        "type": "DataView"
    },
    "dataView.byteLength": {
        "descr": "The byteLength accessor property represents the length (in bytes) of this view from the start of its ArrayBuffer or SharedArrayBuffer.",
        "name": "dataView.byteLength",
        "params": [],
        "path": "javascript/global_objects/dataview/bytelength",
        "syntax": "dataview.byteLength Description The byteLength property is an accessor property whose set accessor function is undefined, meaning that you can only read this property. The value is established when an DataView is constructed and cannot be changed. If the DataView is not specifying an offset or a byteLength, the byteLength of the referenced ArrayBuffer or SharedArrayBuffer will be returned. Examples Using the byteLength property var buffer = new ArrayBuffer(8);\n or  var dataview = new DataView(buffer);\n or  dataview.byteLength; // 8 (matches the byteLength of the buffer) var dataview2 = new DataView(buffer, 1, 5);\n or  dataview2.byteLength; // 5 (as specified when constructing the DataView) var dataview3 = new DataView(buffer, 2);\n or  dataview3.byteLength; // 6 (due to the offset of the constructed DataView));",
        "type": "DataView"
    },
    "dataView.byteOffset": {
        "descr": "The byteOffset accessor property represents the offset (in bytes) of this view from the start of its ArrayBuffer or SharedArrayBuffer.",
        "name": "dataView.byteOffset",
        "params": [],
        "path": "javascript/global_objects/dataview/byteoffset",
        "syntax": "dataview.byteOffset Description The byteOffset property is an accessor property whose set accessor function is undefined, meaning that you can only read this property. The value is established when an DataView is constructed and cannot be changed. Examples Using the byteOffset property var buffer = new ArrayBuffer(8);\n or  var dataview = new DataView(buffer);\n or  dataview.byteOffset; // 0 (no offset specified) var dataview2 = new DataView(buffer, 3);\n or  dataview2.byteOffset; // 3 (as specified when constructing the DataView));",
        "type": "DataView"
    },
    "dataView.getFloat32": {
        "descr": "The getFloat32() method gets a signed 32-bit float (float) at the specified byte offset from the start of the DataView.",
        "name": "dataView.getFloat32",
        "params": [
            {
                "descr": "The offset, in byte, from the start of the view where to read the data.",
                "name": "byteOffset"
            },
            {
                "descr": "Optional Indicates whether the 32-bit float is stored in little- or big-endian format. ",
                "name": "littleEndian"
            },
            {
                "descr": "Thrown if the byteOffset is set such as it would read beyond the end of the view.",
                "name": "RangeError"
            }
        ],
        "path": "javascript/global_objects/dataview/getfloat32",
        "syntax": "dataview.getFloat32(byteOffset [, littleEndian])",
        "type": "DataView"
    },
    "dataView.getFloat64": {
        "descr": "The getFloat64() method gets a signed 64-bit float (double) at the specified byte offset from the start of the DataView.",
        "name": "dataView.getFloat64",
        "params": [
            {
                "descr": "The offset, in byte, from the start of the view where to read the data.",
                "name": "byteOffset"
            },
            {
                "descr": "Optional Indicates whether the 64-bit float is stored in little- or big-endian format. ",
                "name": "littleEndian"
            },
            {
                "descr": "Thrown if the byteOffset is set such as it would read beyond the end of the view.",
                "name": "RangeError"
            }
        ],
        "path": "javascript/global_objects/dataview/getfloat64",
        "syntax": "dataview.getFloat64(byteOffset [, littleEndian])",
        "type": "DataView"
    },
    "dataView.getInt16": {
        "descr": "The getInt16() method gets a signed 16-bit integer (short) at the specified byte offset from the start of the DataView.",
        "name": "dataView.getInt16",
        "params": [
            {
                "descr": "The offset, in byte, from the start of the view where to read the data.",
                "name": "byteOffset"
            },
            {
                "descr": "Optional Indicates whether the 16-bit int is stored in little- or big-endian format. ",
                "name": "littleEndian"
            },
            {
                "descr": "Thrown if the byteOffset is set such as it would read beyond the end of the view.",
                "name": "RangeError"
            }
        ],
        "path": "javascript/global_objects/dataview/getint16",
        "syntax": "dataview.getInt16(byteOffset [, littleEndian])",
        "type": "DataView"
    },
    "dataView.getInt32": {
        "descr": "The getInt32() method gets a signed 32-bit integer (long) at the specified byte offset from the start of the DataView.",
        "name": "dataView.getInt32",
        "params": [
            {
                "descr": "The offset, in byte, from the start of the view where to read the data.",
                "name": "byteOffset"
            },
            {
                "descr": "Optional Indicates whether the 32-bit int is stored in little- or big-endian format. ",
                "name": "littleEndian"
            },
            {
                "descr": "Thrown if the byteOffset is set such as it would read beyond the end of the view.",
                "name": "RangeError"
            }
        ],
        "path": "javascript/global_objects/dataview/getint32",
        "syntax": "dataview.getInt32(byteOffset [, littleEndian])",
        "type": "DataView"
    },
    "dataView.getInt8": {
        "descr": "The getInt8() method gets a signed 8-bit integer (byte) at the specified byte offset from the start of the DataView.",
        "name": "dataView.getInt8",
        "params": [
            {
                "descr": "The offset, in byte, from the start of the view where to read the data.",
                "name": "byteOffset"
            },
            {
                "descr": "Thrown if the byteOffset is set such as it would read beyond the end of the view.",
                "name": "RangeError"
            }
        ],
        "path": "javascript/global_objects/dataview/getint8",
        "syntax": "dataview.getInt8(byteOffset)",
        "type": "DataView"
    },
    "dataView.getUint16": {
        "descr": "The getUint16() method gets an unsigned 16-bit integer (unsigned short) at the specified byte offset from the start of the DataView.",
        "name": "dataView.getUint16",
        "params": [
            {
                "descr": "The offset, in byte, from the start of the view where to read the data.",
                "name": "byteOffset"
            },
            {
                "descr": "Optional Indicates whether the 16-bit int is stored in little- or big-endian format. ",
                "name": "littleEndian"
            },
            {
                "descr": "Thrown if the byteOffset is set such as it would read beyond the end of the view.",
                "name": "RangeError"
            }
        ],
        "path": "javascript/global_objects/dataview/getuint16",
        "syntax": "dataview.getUint16(byteOffset [, littleEndian])",
        "type": "DataView"
    },
    "dataView.getUint32": {
        "descr": "The getUint32() method gets an unsigned 32-bit integer (unsigned long) at the specified byte offset from the start of the DataView.",
        "name": "dataView.getUint32",
        "params": [
            {
                "descr": "The offset, in byte, from the start of the view where to read the data.",
                "name": "byteOffset"
            },
            {
                "descr": "Optional Indicates whether the 32-bit int is stored in little- or big-endian format. ",
                "name": "littleEndian"
            },
            {
                "descr": "Thrown if the byteOffset is set such as it would read beyond the end of the view.",
                "name": "RangeError"
            }
        ],
        "path": "javascript/global_objects/dataview/getuint32",
        "syntax": "dataview.getUint32(byteOffset [, littleEndian])",
        "type": "DataView"
    },
    "dataView.getUint8": {
        "descr": "The getUint8() method gets an unsigned 8-bit integer (unsigned byte) at the specified byte offset from the start of the DataView.",
        "name": "dataView.getUint8",
        "params": [
            {
                "descr": "The offset, in byte, from the start of the view where to read the data.",
                "name": "byteOffset"
            },
            {
                "descr": "Thrown if the byteOffset is set such as it would read beyond the end of the view.",
                "name": "RangeError"
            }
        ],
        "path": "javascript/global_objects/dataview/getuint8",
        "syntax": "dataview.getUint8(byteOffset)",
        "type": "DataView"
    },
    "dataView.setFloat32": {
        "descr": "The setFloat32() method stores a signed 32-bit float (float) value at the specified byte offset from the start of the DataView.",
        "name": "dataView.setFloat32",
        "params": [
            {
                "descr": "The offset, in byte, from the start of the view where to store the data.",
                "name": "byteOffset"
            },
            {
                "descr": "The value to set.",
                "name": "value"
            },
            {
                "descr": "Optional Indicates whether the 32-bit float is stored in little- or big-endian format. ",
                "name": "littleEndian"
            },
            {
                "descr": "Thrown if the byteOffset is set such as it would store beyond the end of the view.",
                "name": "RangeError"
            }
        ],
        "path": "javascript/global_objects/dataview/setfloat32",
        "syntax": "dataview.setFloat32(byteOffset, value [, littleEndian])",
        "type": "DataView"
    },
    "dataView.setFloat64": {
        "descr": "The setFloat64() method stores a signed 64-bit float (double) value at the specified byte offset from the start of the DataView.",
        "name": "dataView.setFloat64",
        "params": [
            {
                "descr": "The offset, in byte, from the start of the view where to store the data.",
                "name": "byteOffset"
            },
            {
                "descr": "The value to set.",
                "name": "value"
            },
            {
                "descr": "Optional Indicates whether the 64-bit float is stored in little- or big-endian format. ",
                "name": "littleEndian"
            },
            {
                "descr": "Thrown if the byteOffset is set such as it would store beyond the end of the view.",
                "name": "RangeError"
            }
        ],
        "path": "javascript/global_objects/dataview/setfloat64",
        "syntax": "dataview.setFloat64(byteOffset, value [, littleEndian])",
        "type": "DataView"
    },
    "dataView.setInt16": {
        "descr": "The setInt16() method stores a signed 16-bit integer (short) value at the specified byte offset from the start of the DataView.",
        "name": "dataView.setInt16",
        "params": [
            {
                "descr": "The offset, in byte, from the start of the view where to store the data.",
                "name": "byteOffset"
            },
            {
                "descr": "The value to set.",
                "name": "value"
            },
            {
                "descr": "Optional Indicates whether the 16-bit int is stored in little- or big-endian format. ",
                "name": "littleEndian"
            },
            {
                "descr": "Thrown if the byteOffset is set such as it would store beyond the end of the view.",
                "name": "RangeError"
            }
        ],
        "path": "javascript/global_objects/dataview/setint16",
        "syntax": "dataview.setInt16(byteOffset, value [, littleEndian])",
        "type": "DataView"
    },
    "dataView.setInt32": {
        "descr": "The setInt32() method stores a signed 32-bit integer (long) value at the specified byte offset from the start of the DataView.",
        "name": "dataView.setInt32",
        "params": [
            {
                "descr": "The offset, in byte, from the start of the view where to store the data.",
                "name": "byteOffset"
            },
            {
                "descr": "The value to set.",
                "name": "value"
            },
            {
                "descr": "Optional Indicates whether the 32-bit int is stored in little- or big-endian format. ",
                "name": "littleEndian"
            },
            {
                "descr": "Thrown if the byteOffset is set such as it would store beyond the end of the view.",
                "name": "RangeError"
            }
        ],
        "path": "javascript/global_objects/dataview/setint32",
        "syntax": "dataview.setInt32(byteOffset, value [, littleEndian])",
        "type": "DataView"
    },
    "dataView.setInt8": {
        "descr": "The setInt8() method stores a signed 8-bit integer (byte) value at the specified byte offset from the start of the DataView.",
        "name": "dataView.setInt8",
        "params": [
            {
                "descr": "The offset, in byte, from the start of the view where to store the data.",
                "name": "byteOffset"
            },
            {
                "descr": "The value to set.",
                "name": "value"
            },
            {
                "descr": "Thrown if the byteOffset is set such as it would store beyond the end of the view.",
                "name": "RangeError"
            }
        ],
        "path": "javascript/global_objects/dataview/setint8",
        "syntax": "dataview.setInt8(byteOffset, value)",
        "type": "DataView"
    },
    "dataView.setUint16": {
        "descr": "The setUint16() method stores an unsigned 16-bit integer (unsigned short) value at the specified byte offset from the start of the DataView.",
        "name": "dataView.setUint16",
        "params": [
            {
                "descr": "The offset, in byte, from the start of the view where to store the data.",
                "name": "byteOffset"
            },
            {
                "descr": "The value to set.",
                "name": "value"
            },
            {
                "descr": "Optional Indicates whether the 16-bit int is stored in little- or big-endian format. ",
                "name": "littleEndian"
            },
            {
                "descr": "Thrown if the byteOffset is set such as it would store beyond the end of the view.",
                "name": "RangeError"
            }
        ],
        "path": "javascript/global_objects/dataview/setuint16",
        "syntax": "dataview.setUint16(byteOffset, value [, littleEndian])",
        "type": "DataView"
    },
    "dataView.setUint32": {
        "descr": "The setUint32() method stores an unsigned 32-bit integer (unsigned long) value at the specified byte offset from the start of the DataView.",
        "name": "dataView.setUint32",
        "params": [
            {
                "descr": "The offset, in byte, from the start of the view where to store the data.",
                "name": "byteOffset"
            },
            {
                "descr": "The value to set.",
                "name": "value"
            },
            {
                "descr": "Optional Indicates whether the 32-bit int is stored in little- or big-endian format. ",
                "name": "littleEndian"
            },
            {
                "descr": "Thrown if the byteOffset is set such as it would store beyond the end of the view.",
                "name": "RangeError"
            }
        ],
        "path": "javascript/global_objects/dataview/setuint32",
        "syntax": "dataview.setUint32(byteOffset, value [, littleEndian])",
        "type": "DataView"
    },
    "dataView.setUint8": {
        "descr": "The setUint8() method stores an unsigned 8-bit integer (byte) value at the specified byte offset from the start of the DataView.",
        "name": "dataView.setUint8",
        "params": [
            {
                "descr": "The offset, in byte, from the start of the view where to store the data.",
                "name": "byteOffset"
            },
            {
                "descr": "The value to set.",
                "name": "value"
            },
            {
                "descr": "Thrown if the byteOffset is set such as it would store beyond the end of the view.",
                "name": "RangeError"
            }
        ],
        "path": "javascript/global_objects/dataview/setuint8",
        "syntax": "dataview.setUint8(byteOffset, value)",
        "type": "DataView"
    },
    "date.@@toPrimitive": {
        "descr": "The [@@toPrimitive]() method converts a Date object to a primitive value.",
        "name": "date.@@toPrimitive",
        "params": [],
        "path": "javascript/global_objects/date/@@toprimitive",
        "syntax": "Date()[Symbol.toPrimitive](hint);",
        "type": "Date"
    },
    "date.getDate": {
        "descr": "The getDate() method returns the day of the month for the specified date according to local time.",
        "name": "date.getDate",
        "params": [],
        "path": "javascript/global_objects/date/getdate",
        "syntax": "dateObj.getDate()",
        "type": "Date"
    },
    "date.getDay": {
        "descr": "The getDay() method returns the day of the week for the specified date according to local time, where 0 represents Sunday. For the day of the month see getDate().",
        "name": "date.getDay",
        "params": [],
        "path": "javascript/global_objects/date/getday",
        "syntax": "dateObj.getDay()",
        "type": "Date"
    },
    "date.getFullYear": {
        "descr": "The getFullYear() method returns the year of the specified date according to local time.",
        "name": "date.getFullYear",
        "params": [],
        "path": "javascript/global_objects/date/getfullyear",
        "syntax": "dateObj.getFullYear()",
        "type": "Date"
    },
    "date.getHours": {
        "descr": "The getHours() method returns the hour for the specified date, according to local time.",
        "name": "date.getHours",
        "params": [],
        "path": "javascript/global_objects/date/gethours",
        "syntax": "dateObj.getHours()",
        "type": "Date"
    },
    "date.getMilliseconds": {
        "descr": "The getMilliseconds() method returns the milliseconds in the specified date according to local time.",
        "name": "date.getMilliseconds",
        "params": [],
        "path": "javascript/global_objects/date/getmilliseconds",
        "syntax": "dateObj.getMilliseconds()",
        "type": "Date"
    },
    "date.getMinutes": {
        "descr": "The getMinutes() method returns the minutes in the specified date according to local time.",
        "name": "date.getMinutes",
        "params": [],
        "path": "javascript/global_objects/date/getminutes",
        "syntax": "dateObj.getMinutes()",
        "type": "Date"
    },
    "date.getMonth": {
        "descr": "The getMonth() method returns the month in the specified date according to local time, as a zero-based value (where zero indicates the first month of the year).",
        "name": "date.getMonth",
        "params": [],
        "path": "javascript/global_objects/date/getmonth",
        "syntax": "dateObj.getMonth()",
        "type": "Date"
    },
    "date.getSeconds": {
        "descr": "The getSeconds() method returns the seconds in the specified date according to local time.",
        "name": "date.getSeconds",
        "params": [],
        "path": "javascript/global_objects/date/getseconds",
        "syntax": "dateObj.getSeconds()",
        "type": "Date"
    },
    "date.getTime": {
        "descr": "The getTime() method returns the numeric value corresponding to the time for the specified date according to universal time.",
        "name": "date.getTime",
        "params": [],
        "path": "javascript/global_objects/date/gettime",
        "syntax": "dateObj.getTime()",
        "type": "Date"
    },
    "date.getTimezoneOffset": {
        "descr": "The getTimezoneOffset() method returns the time zone difference, in minutes, from current locale (host system settings) to UTC.",
        "name": "date.getTimezoneOffset",
        "params": [],
        "path": "javascript/global_objects/date/gettimezoneoffset",
        "syntax": "dateObj.getTimezoneOffset()",
        "type": "Date"
    },
    "date.getUTCDate": {
        "descr": "The getUTCDate() method returns the day (date) of the month in the specified date according to universal time.",
        "name": "date.getUTCDate",
        "params": [],
        "path": "javascript/global_objects/date/getutcdate",
        "syntax": "dateObj.getUTCDate()",
        "type": "Date"
    },
    "date.getUTCDay": {
        "descr": "The getUTCDay() method returns the day of the week in the specified date according to universal time, where 0 represents Sunday.",
        "name": "date.getUTCDay",
        "params": [],
        "path": "javascript/global_objects/date/getutcday",
        "syntax": "dateObj.getUTCDay()",
        "type": "Date"
    },
    "date.getUTCFullYear": {
        "descr": "The getUTCFullYear() method returns the year in the specified date according to universal time.",
        "name": "date.getUTCFullYear",
        "params": [],
        "path": "javascript/global_objects/date/getutcfullyear",
        "syntax": "dateObj.getUTCFullYear()",
        "type": "Date"
    },
    "date.getUTCHours": {
        "descr": "The getUTCHours() method returns the hours in the specified date according to universal time.",
        "name": "date.getUTCHours",
        "params": [],
        "path": "javascript/global_objects/date/getutchours",
        "syntax": "dateObj.getUTCHours()",
        "type": "Date"
    },
    "date.getUTCMilliseconds": {
        "descr": "The getUTCMilliseconds() method returns the milliseconds in the specified date according to universal time.",
        "name": "date.getUTCMilliseconds",
        "params": [],
        "path": "javascript/global_objects/date/getutcmilliseconds",
        "syntax": "dateObj.getUTCMilliseconds()",
        "type": "Date"
    },
    "date.getUTCMinutes": {
        "descr": "The getUTCMinutes() method returns the minutes in the specified date according to universal time.",
        "name": "date.getUTCMinutes",
        "params": [],
        "path": "javascript/global_objects/date/getutcminutes",
        "syntax": "dateObj.getUTCMinutes()",
        "type": "Date"
    },
    "date.getUTCMonth": {
        "descr": "The getUTCMonth() returns the month of the specified date according to universal time, as a zero-based value (where zero indicates the first month of the year).",
        "name": "date.getUTCMonth",
        "params": [],
        "path": "javascript/global_objects/date/getutcmonth",
        "syntax": "dateObj.getUTCMonth()",
        "type": "Date"
    },
    "date.getUTCSeconds": {
        "descr": "The getUTCSeconds() method returns the seconds in the specified date according to universal time.",
        "name": "date.getUTCSeconds",
        "params": [],
        "path": "javascript/global_objects/date/getutcseconds",
        "syntax": "dateObj.getUTCSeconds()",
        "type": "Date"
    },
    "date.setDate": {
        "descr": "The setDate() method sets the day of the Date object relative to the beginning of the currently set month.",
        "name": "date.setDate",
        "params": [
            {
                "descr": "An integer representing the day of the month.",
                "name": "dayValue"
            }
        ],
        "path": "javascript/global_objects/date/setdate",
        "syntax": "dateObj.setDate(dayValue)",
        "type": "Date"
    },
    "date.setFullYear": {
        "descr": "The setFullYear() method sets the full year for a specified date according to local time. Returns new timestamp.",
        "name": "date.setFullYear",
        "params": [
            {
                "descr": "An integer specifying the numeric value of the year, for example, 1995.",
                "name": "yearValue"
            },
            {
                "descr": "Optional. An integer between 0 and 11 representing the months January through December.",
                "name": "monthValue"
            },
            {
                "descr": "Optional. An integer between 1 and 31 representing the day of the month. ",
                "name": "dateValue"
            }
        ],
        "path": "javascript/global_objects/date/setfullyear",
        "syntax": "dateObj.setFullYear(yearValue[, monthValue[, dateValue]])",
        "type": "Date"
    },
    "date.setHours": {
        "descr": "The setHours() method sets the hours for a specified date according to local time, and returns the number of milliseconds since January 1, 1970 00:00:00 UTC until the time represented by the updated Date instance.",
        "name": "date.setHours",
        "params": [
            {
                "descr": "Ideally, an integer between 0 and 23, representing the hour. ",
                "name": "hoursValue"
            },
            {
                "descr": "Optional. Ideally, an integer between 0 and 59, representing the minutes. ",
                "name": "minutesValue"
            },
            {
                "descr": "Optional. Ideally, an integer between 0 and 59, representing the seconds. ",
                "name": "secondsValue"
            },
            {
                "descr": "Optional. Ideally, a number between 0 and 999, representing the milliseconds. ",
                "name": "msValue"
            }
        ],
        "path": "javascript/global_objects/date/sethours",
        "syntax": "dateObj.setHours(hoursValue[, minutesValue[, secondsValue[, msValue]]])",
        "type": "Date"
    },
    "date.setMilliseconds": {
        "descr": "The setMilliseconds() method sets the milliseconds for a specified date according to local time.",
        "name": "date.setMilliseconds",
        "params": [
            {
                "descr": "A number between 0 and 999, representing the milliseconds.",
                "name": "millisecondsValue"
            }
        ],
        "path": "javascript/global_objects/date/setmilliseconds",
        "syntax": "dateObj.setMilliseconds(millisecondsValue)",
        "type": "Date"
    },
    "date.setMinutes": {
        "descr": "The setMinutes() method sets the minutes for a specified date according to local time.",
        "name": "date.setMinutes",
        "params": [
            {
                "descr": "An integer between 0 and 59, representing the minutes.",
                "name": "minutesValue"
            },
            {
                "descr": "Optional. An integer between 0 and 59, representing the seconds. ",
                "name": "secondsValue"
            },
            {
                "descr": "Optional. A number between 0 and 999, representing the milliseconds. ",
                "name": "msValue"
            }
        ],
        "path": "javascript/global_objects/date/setminutes",
        "syntax": "dateObj.setMinutes(minutesValue[, secondsValue[, msValue]])",
        "type": "Date"
    },
    "date.setMonth": {
        "descr": "The setMonth() method sets the month for a specified date according to the currently set year.",
        "name": "date.setMonth",
        "params": [
            {
                "descr": "An integer between 0 and 11, representing the months January through December.",
                "name": "monthValue"
            },
            {
                "descr": "Optional. An integer from 1 to 31, representing the day of the month.",
                "name": "dayValue"
            }
        ],
        "path": "javascript/global_objects/date/setmonth",
        "syntax": "dateObj.setMonth(monthValue[, dayValue])",
        "type": "Date"
    },
    "date.setSeconds": {
        "descr": "The setSeconds() method sets the seconds for a specified date according to local time.",
        "name": "date.setSeconds",
        "params": [
            {
                "descr": "An integer between 0 and 59, representing the seconds.",
                "name": "secondsValue"
            },
            {
                "descr": "Optional. A number between 0 and 999, representing the milliseconds.",
                "name": "msValue"
            }
        ],
        "path": "javascript/global_objects/date/setseconds",
        "syntax": "dateObj.setSeconds(secondsValue[, msValue])",
        "type": "Date"
    },
    "date.setTime": {
        "descr": "The setTime() method sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC.",
        "name": "date.setTime",
        "params": [
            {
                "descr": "An integer representing the number of milliseconds since 1 January 1970, 00:00:00 UTC.",
                "name": "timeValue"
            }
        ],
        "path": "javascript/global_objects/date/settime",
        "syntax": "dateObj.setTime(timeValue)",
        "type": "Date"
    },
    "date.setUTCDate": {
        "descr": "The setUTCDate() method sets the day of the month for a specified date according to universal time.",
        "name": "date.setUTCDate",
        "params": [
            {
                "descr": "An integer from 1 to 31, representing the day of the month.",
                "name": "dayValue"
            }
        ],
        "path": "javascript/global_objects/date/setutcdate",
        "syntax": "dateObj.setUTCDate(dayValue)",
        "type": "Date"
    },
    "date.setUTCFullYear": {
        "descr": "The setUTCFullYear() method sets the full year for a specified date according to universal time.",
        "name": "date.setUTCFullYear",
        "params": [
            {
                "descr": "An integer specifying the numeric value of the year, for example, 1995.",
                "name": "yearValue"
            },
            {
                "descr": "Optional. An integer between 0 and 11 representing the months January through December.",
                "name": "monthValue"
            },
            {
                "descr": "Optional. An integer between 1 and 31 representing the day of the month. ",
                "name": "dayValue"
            }
        ],
        "path": "javascript/global_objects/date/setutcfullyear",
        "syntax": "dateObj.setUTCFullYear(yearValue[, monthValue[, dayValue]])",
        "type": "Date"
    },
    "date.setUTCHours": {
        "descr": "The setUTCHours() method sets the hour for a specified date according to universal time, and returns the number of milliseconds since January 1, 1970 00:00:00 UTC until the time represented by the updated Date instance.",
        "name": "date.setUTCHours",
        "params": [
            {
                "descr": "An integer between 0 and 23, representing the hour.",
                "name": "hoursValue"
            },
            {
                "descr": "Optional. An integer between 0 and 59, representing the minutes.",
                "name": "minutesValue"
            },
            {
                "descr": "Optional. An integer between 0 and 59, representing the seconds. ",
                "name": "secondsValue"
            },
            {
                "descr": "Optional. A number between 0 and 999, representing the milliseconds. ",
                "name": "msValue"
            }
        ],
        "path": "javascript/global_objects/date/setutchours",
        "syntax": "dateObj.setUTCHours(hoursValue[, minutesValue[, secondsValue[, msValue]]])",
        "type": "Date"
    },
    "date.setUTCMilliseconds": {
        "descr": "The setUTCMilliseconds() method sets the milliseconds for a specified date according to universal time.",
        "name": "date.setUTCMilliseconds",
        "params": [
            {
                "descr": "A number between 0 and 999, representing the milliseconds.",
                "name": "millisecondsValue"
            }
        ],
        "path": "javascript/global_objects/date/setutcmilliseconds",
        "syntax": "dateObj.setUTCMilliseconds(millisecondsValue)",
        "type": "Date"
    },
    "date.setUTCMinutes": {
        "descr": "The setUTCMinutes() method sets the minutes for a specified date according to universal time.",
        "name": "date.setUTCMinutes",
        "params": [
            {
                "descr": "An integer between 0 and 59, representing the minutes.",
                "name": "minutesValue"
            },
            {
                "descr": "Optional. An integer between 0 and 59, representing the seconds. ",
                "name": "secondsValue"
            },
            {
                "descr": "Optional. A number between 0 and 999, representing the milliseconds. ",
                "name": "msValue"
            }
        ],
        "path": "javascript/global_objects/date/setutcminutes",
        "syntax": "dateObj.setUTCMinutes(minutesValue[, secondsValue[, msValue]])",
        "type": "Date"
    },
    "date.setUTCMonth": {
        "descr": "The setUTCMonth() method sets the month for a specified date according to universal time.",
        "name": "date.setUTCMonth",
        "params": [
            {
                "descr": "An integer between 0 and 11, representing the months January through December.",
                "name": "monthValue"
            },
            {
                "descr": "Optional. An integer from 1 to 31, representing the day of the month.",
                "name": "dayValue"
            }
        ],
        "path": "javascript/global_objects/date/setutcmonth",
        "syntax": "dateObj.setUTCMonth(monthValue[, dayValue])",
        "type": "Date"
    },
    "date.setUTCSeconds": {
        "descr": "The setUTCSeconds() method sets the seconds for a specified date according to universal time.",
        "name": "date.setUTCSeconds",
        "params": [
            {
                "descr": "An integer between 0 and 59, representing the seconds.",
                "name": "secondsValue"
            },
            {
                "descr": "Optional. A number between 0 and 999, representing the milliseconds.",
                "name": "msValue"
            }
        ],
        "path": "javascript/global_objects/date/setutcseconds",
        "syntax": "dateObj.setUTCSeconds(secondsValue[, msValue])",
        "type": "Date"
    },
    "date.toDateString": {
        "descr": "The toDateString() method returns the date portion of a Date object in human readable form in American English.",
        "name": "date.toDateString",
        "params": [],
        "path": "javascript/global_objects/date/todatestring",
        "syntax": "dateObj.toDateString()",
        "type": "Date"
    },
    "date.toISOString": {
        "descr": "The toISOString() method returns a string in simplified extended ISO format (ISO 8601), which is always 24 or 27 characters long (YYYY-MM-DDTHH:mm:ss.sssZ or ±YYYYYY-MM-DDTHH:mm:ss.sssZ, respectively). The timezone is always zero UTC offset, as denoted by the suffix \"Z\".",
        "name": "date.toISOString",
        "params": [],
        "path": "javascript/global_objects/date/toisostring",
        "syntax": "dateObj.toISOString()",
        "type": "Date"
    },
    "date.toJSON": {
        "descr": "The toJSON() method returns a string representation of the Date object.",
        "name": "date.toJSON",
        "params": [],
        "path": "javascript/global_objects/date/tojson",
        "syntax": "dateObj.toJSON()",
        "type": "Date"
    },
    "date.toLocaleDateString": {
        "descr": "The toLocaleDateString() method returns a string with a language sensitive representation of the date portion of this date. The new locales and options arguments let applications specify the language whose formatting conventions should be used and allow to customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale used and the form of the string returned are entirely implementation dependent.",
        "name": "date.toLocaleDateString",
        "params": [
            {
                "descr": "Optional. A string with a BCP 47 language tag, or an array of such strings. ",
                "name": "locales"
            },
            {
                "descr": "Calendar. Possible values include: \"buddhist\", \"chinese\", \"coptic\", \"ethioaa\", \"ethiopic\", \"gregory\", \"hebrew\", \"indian\", \"islamic\", \"islamicc\", \"iso8601\", \"japanese\", \"persian\", \"roc\".",
                "name": "ca"
            },
            {
                "descr": "Hour cycle. Possible values include: \"h11\", \"h12\", \"h23\", \"h24\".",
                "name": "hc"
            },
            {
                "descr": "Optional. An object with some or all of the following properties:  localeMatcher The locale matching algorithm to use. ",
                "name": "options"
            },
            {
                "descr": "The time zone to use. The only value implementations must recognize is \"UTC\"; the default is the runtime's default time zone. ",
                "name": "timeZone"
            },
            {
                "descr": "Whether to use 12-hour time (as opposed to 24-hour time). ",
                "name": "hour12"
            },
            {
                "descr": "The hour cycle to use. Possible values are \"h11\", \"h12\", \"h23\", or \"h24\". ",
                "name": "hourCycle"
            },
            {
                "descr": "The format matching algorithm to use. ",
                "name": "formatMatcher"
            },
            {
                "descr": "The representation of the weekday. ",
                "name": "weekday"
            },
            {
                "descr": "The representation of the era. Possible values are \"narrow\", \"short\", \"long\".",
                "name": "era"
            },
            {
                "descr": "The representation of the year. ",
                "name": "year"
            },
            {
                "descr": "The representation of the month. ",
                "name": "month"
            },
            {
                "descr": "The representation of the day. Possible values are \"numeric\", \"2-digit\".",
                "name": "day"
            },
            {
                "descr": "The representation of the hour. ",
                "name": "hour"
            },
            {
                "descr": "The representation of the minute. ",
                "name": "minute"
            },
            {
                "descr": "The representation of the second. ",
                "name": "second"
            },
            {
                "descr": "The representation of the time zone name. ",
                "name": "timeZoneName"
            }
        ],
        "path": "javascript/global_objects/date/tolocaledatestring",
        "syntax": "dateObj.toLocaleDateString([locales [, options]])",
        "type": "Date"
    },
    "date.toLocaleString": {
        "descr": "The toLocaleString() method returns a string with a language sensitive representation of this date. The new locales and options arguments let applications specify the language whose formatting conventions should be used and customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale used and the form of the string returned are entirely implementation dependent.",
        "name": "date.toLocaleString",
        "params": [
            {
                "descr": "Optional. A string with a BCP 47 language tag, or an array of such strings. ",
                "name": "locales"
            },
            {
                "descr": "Calendar. Possible values include: \"buddhist\", \"chinese\", \"coptic\", \"ethioaa\", \"ethiopic\", \"gregory\", \"hebrew\", \"indian\", \"islamic\", \"islamicc\", \"iso8601\", \"japanese\", \"persian\", \"roc\".",
                "name": "ca"
            },
            {
                "descr": "Hour cycle. Possible values include: \"h11\", \"h12\", \"h23\", \"h24\".",
                "name": "hc"
            },
            {
                "descr": "Optional. An object with some or all of the following properties:  localeMatcher The locale matching algorithm to use. ",
                "name": "options"
            },
            {
                "descr": "The time zone to use. The only value implementations must recognize is \"UTC\"; the default is the runtime's default time zone. ",
                "name": "timeZone"
            },
            {
                "descr": "Whether to use 12-hour time (as opposed to 24-hour time). ",
                "name": "hour12"
            },
            {
                "descr": "The hour cycle to use. Possible values are \"h11\", \"h12\", \"h23\", or \"h24\". ",
                "name": "hourCycle"
            },
            {
                "descr": "The format matching algorithm to use. ",
                "name": "formatMatcher"
            },
            {
                "descr": "The representation of the weekday. ",
                "name": "weekday"
            },
            {
                "descr": "The representation of the era. Possible values are \"narrow\", \"short\", \"long\".",
                "name": "era"
            },
            {
                "descr": "The representation of the year. ",
                "name": "year"
            },
            {
                "descr": "The representation of the month. ",
                "name": "month"
            },
            {
                "descr": "The representation of the day. Possible values are \"numeric\", \"2-digit\".",
                "name": "day"
            },
            {
                "descr": "The representation of the hour. ",
                "name": "hour"
            },
            {
                "descr": "The representation of the minute. ",
                "name": "minute"
            },
            {
                "descr": "The representation of the second. ",
                "name": "second"
            },
            {
                "descr": "The representation of the time zone name. ",
                "name": "timeZoneName"
            }
        ],
        "path": "javascript/global_objects/date/tolocalestring",
        "syntax": "dateObj.toLocaleString([locales[, options]])",
        "type": "Date"
    },
    "date.toLocaleTimeString": {
        "descr": "The toLocaleTimeString() method returns a string with a language sensitive representation of the time portion of this date. The new locales and options arguments let applications specify the language whose formatting conventions should be used and customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale used and the form of the string returned are entirely implementation dependent.",
        "name": "date.toLocaleTimeString",
        "params": [
            {
                "descr": "Optional. A string with a BCP 47 language tag, or an array of such strings. ",
                "name": "locales"
            },
            {
                "descr": "Calendar. Possible values include: \"buddhist\", \"chinese\", \"coptic\", \"ethioaa\", \"ethiopic\", \"gregory\", \"hebrew\", \"indian\", \"islamic\", \"islamicc\", \"iso8601\", \"japanese\", \"persian\", \"roc\".",
                "name": "ca"
            },
            {
                "descr": "Hour cycle. Possible values include: \"h11\", \"h12\", \"h23\", \"h24\".",
                "name": "hc"
            },
            {
                "descr": "Optional. An object with some or all of the following properties:  localeMatcher The locale matching algorithm to use. ",
                "name": "options"
            },
            {
                "descr": "The time zone to use. The only value implementations must recognize is \"UTC\"; the default is the runtime's default time zone. ",
                "name": "timeZone"
            },
            {
                "descr": "Whether to use 12-hour time (as opposed to 24-hour time). ",
                "name": "hour12"
            },
            {
                "descr": "The hour cycle to use. Possible values are \"h11\", \"h12\", \"h23\", or \"h24\". ",
                "name": "hourCycle"
            },
            {
                "descr": "The format matching algorithm to use. ",
                "name": "formatMatcher"
            },
            {
                "descr": "The representation of the weekday. ",
                "name": "weekday"
            },
            {
                "descr": "The representation of the era. Possible values are \"narrow\", \"short\", \"long\".",
                "name": "era"
            },
            {
                "descr": "The representation of the year. ",
                "name": "year"
            },
            {
                "descr": "The representation of the month. ",
                "name": "month"
            },
            {
                "descr": "The representation of the day. Possible values are \"numeric\", \"2-digit\".",
                "name": "day"
            },
            {
                "descr": "The representation of the hour. ",
                "name": "hour"
            },
            {
                "descr": "The representation of the minute. ",
                "name": "minute"
            },
            {
                "descr": "The representation of the second. ",
                "name": "second"
            },
            {
                "descr": "The representation of the time zone name. ",
                "name": "timeZoneName"
            }
        ],
        "path": "javascript/global_objects/date/tolocaletimestring",
        "syntax": "dateObj.toLocaleTimeString([locales[, options]])",
        "type": "Date"
    },
    "date.toString": {
        "descr": "The toString() method returns a string representing the specified Date object.",
        "name": "date.toString",
        "params": [],
        "path": "javascript/global_objects/date/tostring",
        "syntax": "dateObj.toString()",
        "type": "Date"
    },
    "date.toTimeString": {
        "descr": "The toTimeString() method returns the time portion of a Date object in human readable form in American English.",
        "name": "date.toTimeString",
        "params": [],
        "path": "javascript/global_objects/date/totimestring",
        "syntax": "dateObj.toTimeString()",
        "type": "Date"
    },
    "date.toUTCString": {
        "descr": "The toUTCString() method converts a date to a string, using the UTC time zone.",
        "name": "date.toUTCString",
        "params": [],
        "path": "javascript/global_objects/date/toutcstring",
        "syntax": "dateObj.toUTCString()",
        "type": "Date"
    },
    "date.valueOf": {
        "descr": "The valueOf() method returns the primitive value of a Date object.",
        "name": "date.valueOf",
        "params": [],
        "path": "javascript/global_objects/date/valueof",
        "syntax": "dateObj.valueOf()",
        "type": "Date"
    },
    "dblclick": {
        "descr": "This method is a shortcut for .on( \"dblclick\", handler ) in the first two variations, and .trigger( \"dblclick\" ) in the third. The dblclick event is sent to an element when the element is double-clicked. Any HTML element can receive this event. For example, consider the HTML:",
        "name": "dblclick",
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            },
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.",
                "name": "eventData"
            },
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            }
        ],
        "path": "jquery/dblclick",
        "syntax": ".dblclick( handler ) Returns: jQuery",
        "type": "Events"
    },
    "debugger": {
        "descr": "The debugger statement invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect.",
        "name": "debugger",
        "params": [],
        "path": "javascript/statements/debugger",
        "syntax": "debugger; Examples The following example shows code where a debugger statement has been inserted, to invoke a debugger (if one exists) when the function is called.",
        "type": "Statements"
    },
    "decodeURI": {
        "descr": "The decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI() or by a similar routine.",
        "name": "decodeURI",
        "params": [
            {
                "descr": "A complete, encoded Uniform Resource Identifier.",
                "name": "encodedURI"
            }
        ],
        "path": "javascript/global_objects/decodeuri",
        "syntax": "decodeURI(encodedURI)",
        "type": "Global Objects"
    },
    "decodeURIComponent": {
        "descr": "The decodeURIComponent() function decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine.",
        "name": "decodeURIComponent",
        "params": [
            {
                "descr": "An encoded component of a Uniform Resource Identifier.",
                "name": "encodedURI"
            }
        ],
        "path": "javascript/global_objects/decodeuricomponent",
        "syntax": "decodeURIComponent(encodedURI)",
        "type": "Global Objects"
    },
    "default": {
        "descr": "The default keyword can be used in two situations in JavaScript: within a switch statement, or with an export statement.",
        "name": "default",
        "params": [],
        "path": "javascript/statements/default",
        "syntax": "switch statement: switch (expression) { case value1: //Statements executed when the result of expression matches value1 [break;] default: //Statements executed when none of the values match the value of the expression [break;] }",
        "type": "Statements"
    },
    "defaultStatus": {
        "descr": "Obsolete since Gecko 23 (Firefox 23 / Thunderbird 23 / SeaMonkey 2.20)This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "window.defaultStatus",
        "params": [],
        "path": "dom/window/defaultstatus",
        "syntax": "var sMsg = window.defaultStatus; window.defaultStatus = sMsg;  Parameters   sMsg is a string containing the text to be displayed by default in the statusbar.  Example <html> <body onload=\"window.defaultStatus='hello!';\"/> <button onclick=\"window.confirm('Are you sure you want to quit?');\n or \">confirm</button> </body> </html>);",
        "type": "Window"
    },
    "deferred.always": {
        "descr": "The argument can be either a single function or an array of functions. When the Deferred is resolved or rejected, the alwaysCallbacks are called. Since deferred.always() returns the Deferred object, other methods of the Deferred object can be chained to this one, including additional .always() methods. When the Deferred is resolved or rejected, callbacks are executed in the order they were added, using the arguments provided to the resolve, reject, resolveWith or rejectWith method calls. For more information, see the documentation for Deferred object.",
        "name": "deferred.always",
        "params": [
            {
                "descr": "Type: Function()  A function, or array of functions, that is called when the Deferred is resolved or rejected.",
                "name": "alwaysCallbacks"
            },
            {
                "descr": "Type: Function()  Optional additional functions, or arrays of functions, that are called when the Deferred is resolved or rejected.",
                "name": "alwaysCallbacks"
            }
        ],
        "path": "jquery/deferred.always",
        "syntax": "deferred.always( alwaysCallbacks [, alwaysCallbacks ] ) Returns: Deferred",
        "type": "Deferred Object"
    },
    "deferred.catch": {
        "descr": "deferred.catch( fn ) is an alias to deferred.then( null, fn ). Read its page for more information.",
        "name": "deferred.catch",
        "params": [
            {
                "descr": "Type: Function()  A function that is called when the Deferred is rejected.",
                "name": "failFilter"
            }
        ],
        "path": "jquery/deferred.catch",
        "syntax": "deferred.catch( failFilter ) Returns: Promise",
        "type": "Deferred Object"
    },
    "deferred.done": {
        "descr": "The deferred.done() method accepts one or more arguments, all of which can be either a single function or an array of functions. When the Deferred is resolved, the doneCallbacks are called. Callbacks are executed in the order they were added. Since deferred.done() returns the deferred object, other methods of the deferred object can be chained to this one, including additional .done() methods. When the Deferred is resolved, doneCallbacks are executed using the arguments provided to the resolve or resolveWith method call in the order they were added. For more information, see the documentation for Deferred object.",
        "name": "deferred.done",
        "params": [
            {
                "descr": "Type: Function()  A function, or array of functions, that are called when the Deferred is resolved.",
                "name": "doneCallbacks"
            },
            {
                "descr": "Type: Function()  Optional additional functions, or arrays of functions, that are called when the Deferred is resolved.",
                "name": "doneCallbacks"
            }
        ],
        "path": "jquery/deferred.done",
        "syntax": "deferred.done( doneCallbacks [, doneCallbacks ] ) Returns: Deferred",
        "type": "Deferred Object"
    },
    "deferred.fail": {
        "descr": "The deferred.fail() method accepts one or more arguments, all of which can be either a single function or an array of functions. When the Deferred is rejected, the failCallbacks are called. Callbacks are executed in the order they were added. Since deferred.fail() returns the deferred object, other methods of the deferred object can be chained to this one, including additional deferred.fail() methods. The failCallbacks are executed using the arguments provided to the deferred.reject() or deferred.rejectWith() method call in the order they were added. For more information, see the documentation for Deferred object.",
        "name": "deferred.fail",
        "params": [
            {
                "descr": "Type: Function()  A function, or array of functions, that are called when the Deferred is rejected.",
                "name": "failCallbacks"
            },
            {
                "descr": "Type: Function()  Optional additional functions, or arrays of functions, that are called when the Deferred is rejected.",
                "name": "failCallbacks"
            }
        ],
        "path": "jquery/deferred.fail",
        "syntax": "deferred.fail( failCallbacks [, failCallbacks ] ) Returns: Deferred",
        "type": "Deferred Object"
    },
    "deferred.isRejected": {
        "descr": "As of jQuery 1.7 this API has been deprecated; please use deferred.state() instead.",
        "name": "deferred.isRejected",
        "params": [],
        "path": "jquery/deferred.isrejected",
        "syntax": "deferred.isRejected() Returns: Booleanversion deprecated: 1.7, removed: 1.8",
        "type": "Deferred Object"
    },
    "deferred.isResolved": {
        "descr": "This API is deprecated as of jQuery 1.7 and removed as of jQuery 1.8; please use deferred.state() instead.",
        "name": "deferred.isResolved",
        "params": [],
        "path": "jquery/deferred.isresolved",
        "syntax": "deferred.isResolved() Returns: Booleanversion deprecated: 1.7, removed: 1.8",
        "type": "Deferred Object"
    },
    "deferred.notify": {
        "descr": "Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state or reporting status by returning a restricted Promise object through deferred.promise().",
        "name": "deferred.notify",
        "params": [
            {
                "descr": "Type: Object   Optional arguments that are passed to the progressCallbacks.",
                "name": "args"
            }
        ],
        "path": "jquery/deferred.notify",
        "syntax": "deferred.notify( args ) Returns: Deferred",
        "type": "Deferred Object"
    },
    "deferred.notifyWith": {
        "descr": "Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state or reporting status by returning a restricted Promise object through deferred.promise().",
        "name": "deferred.notifyWith",
        "params": [
            {
                "descr": "Type: Object   Context passed to the progressCallbacks as the this object.",
                "name": "context"
            },
            {
                "descr": "Type: Array   An optional array of arguments that are passed to the progressCallbacks.",
                "name": "args"
            }
        ],
        "path": "jquery/deferred.notifywith",
        "syntax": "deferred.notifyWith( context [, args ] ) Returns: Deferred",
        "type": "Deferred Object"
    },
    "deferred.pipe": {
        "descr": "Deprecation Notice:As of jQuery 1.8, the deferred.pipe() method is deprecated. The deferred.then() method, which replaces it, should be used instead.",
        "name": "deferred.pipe",
        "params": [
            {
                "descr": "Type: Function()  An optional function that is called when the Deferred is resolved.",
                "name": "doneFilter"
            },
            {
                "descr": "Type: Function()  An optional function that is called when the Deferred is rejected.",
                "name": "failFilter"
            },
            {
                "descr": "Type: Function()  An optional function that is called when the Deferred is resolved.",
                "name": "doneFilter"
            },
            {
                "descr": "Type: Function()  An optional function that is called when the Deferred is rejected.",
                "name": "failFilter"
            },
            {
                "descr": "Type: Function()  An optional function that is called when progress notifications are sent to the Deferred.",
                "name": "progressFilter"
            }
        ],
        "path": "jquery/deferred.pipe",
        "syntax": "deferred.pipe( [doneFilter ] [, failFilter ] ) Returns: Promiseversion deprecated: 1.8",
        "type": "Deferred Object"
    },
    "deferred.progress": {
        "descr": "The deferred.progress() method accepts one or more arguments, all of which can be either a single function or an array of functions. When the Deferred generates progress notifications by calling notify or notifyWith, the progressCallbacks are called. Since deferred.progress() returns the Deferred object, other methods of the Deferred object can be chained to this one. When the Deferred is resolved or rejected, progress callbacks will no longer be called, with the exception that any progressCallbacks added after the Deferred enters the resolved or rejected state are executed immediately when they are added, using the arguments that were passed to the .notify() or notifyWith() call. For more information, see the documentation for jQuery.Deferred().",
        "name": "deferred.progress",
        "params": [
            {
                "descr": "Type: Function() or Array   A function, or array of functions, to be called when the Deferred generates progress notifications.",
                "name": "progressCallbacks"
            },
            {
                "descr": "Type: Function() or Array   Optional additional functions, or arrays of functions, to be called when the Deferred generates progress notifications.",
                "name": "progressCallbacks"
            }
        ],
        "path": "jquery/deferred.progress",
        "syntax": "deferred.progress( progressCallbacks [, progressCallbacks ] ) Returns: Deferred",
        "type": "Deferred Object"
    },
    "deferred.promise": {
        "descr": "The deferred.promise() method allows an asynchronous function to prevent other code from interfering with the progress or status of its internal request. The Promise exposes only the Deferred methods needed to attach additional handlers or determine the state (then, done, fail, always, pipe, progress, state and promise), but not ones that change the state (resolve, reject, notify, resolveWith, rejectWith, and notifyWith).",
        "name": "deferred.promise",
        "params": [
            {
                "descr": "Type: Object  Object onto which the promise methods have to be attached",
                "name": "target"
            }
        ],
        "path": "jquery/deferred.promise",
        "syntax": "deferred.promise( [target ] ) Returns: Promise",
        "type": "Deferred Object"
    },
    "deferred.reject": {
        "descr": "Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state by returning a restricted Promise object through deferred.promise().",
        "name": "deferred.reject",
        "params": [
            {
                "descr": "Type: Anything   Optional arguments that are passed to the failCallbacks.",
                "name": "args"
            }
        ],
        "path": "jquery/deferred.reject",
        "syntax": "deferred.reject( [args ] ) Returns: Deferred",
        "type": "Deferred Object"
    },
    "deferred.rejectWith": {
        "descr": "Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state by returning a restricted Promise object through deferred.promise().",
        "name": "deferred.rejectWith",
        "params": [
            {
                "descr": "Type: Object   Context passed to the failCallbacks as the this object.",
                "name": "context"
            },
            {
                "descr": "Type: Array   An optional array of arguments that are passed to the failCallbacks.",
                "name": "args"
            }
        ],
        "path": "jquery/deferred.rejectwith",
        "syntax": "deferred.rejectWith( context [, args ] ) Returns: Deferred",
        "type": "Deferred Object"
    },
    "deferred.resolve": {
        "descr": "Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state by returning a restricted Promise object through deferred.promise().",
        "name": "deferred.resolve",
        "params": [
            {
                "descr": "Type: Anything   Optional arguments that are passed to the doneCallbacks.",
                "name": "args"
            }
        ],
        "path": "jquery/deferred.resolve",
        "syntax": "deferred.resolve( [args ] ) Returns: Deferred",
        "type": "Deferred Object"
    },
    "deferred.resolveWith": {
        "descr": "Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state by returning a restricted Promise object through deferred.promise().",
        "name": "deferred.resolveWith",
        "params": [
            {
                "descr": "Type: Object   Context passed to the doneCallbacks as the this object.",
                "name": "context"
            },
            {
                "descr": "Type: Array   An optional array of arguments that are passed to the doneCallbacks.",
                "name": "args"
            }
        ],
        "path": "jquery/deferred.resolvewith",
        "syntax": "deferred.resolveWith( context [, args ] ) Returns: Deferred",
        "type": "Deferred Object"
    },
    "deferred.state": {
        "descr": "The deferred.state() method returns a string representing the current state of the Deferred object. The Deferred object can be in one of three states:",
        "name": "deferred.state",
        "params": [],
        "path": "jquery/deferred.state",
        "syntax": "deferred.state() Returns: String",
        "type": "Deferred Object"
    },
    "deferred.then": {
        "descr": "Prior to jQuery 1.8, the arguments could be a function or an array of functions.",
        "name": "deferred.then",
        "params": [
            {
                "descr": "Type: Function()  A function that is called when the Deferred is resolved.",
                "name": "doneFilter"
            },
            {
                "descr": "Type: Function()  An optional function that is called when the Deferred is rejected.",
                "name": "failFilter"
            },
            {
                "descr": "Type: Function()  An optional function that is called when progress notifications are sent to the Deferred.",
                "name": "progressFilter"
            },
            {
                "descr": "Type: Function()  A function, or array of functions, called when the Deferred is resolved.",
                "name": "doneCallbacks"
            },
            {
                "descr": "Type: Function()  A function, or array of functions, called when the Deferred is rejected.",
                "name": "failCallbacks"
            },
            {
                "descr": "Type: Function()  A function, or array of functions, called when the Deferred is resolved.",
                "name": "doneCallbacks"
            },
            {
                "descr": "Type: Function()  A function, or array of functions, called when the Deferred is rejected.",
                "name": "failCallbacks"
            },
            {
                "descr": "Type: Function()  A function, or array of functions, called when the Deferred notifies progress.",
                "name": "progressCallbacks"
            }
        ],
        "path": "jquery/deferred.then",
        "syntax": "deferred.then( doneFilter [, failFilter ] [, progressFilter ] ) Returns: Promise",
        "type": "Deferred Object"
    },
    "defineProperties": {
        "descr": "The Object.defineProperties() method defines new or modifies existing properties directly on an object, returning the object.",
        "name": "Object.defineProperties",
        "params": [
            {
                "descr": "The object on which to define or modify properties.",
                "name": "obj"
            },
            {
                "descr": "An object whose own enumerable properties constitute descriptors for the properties to be defined or modified. ",
                "name": "props"
            },
            {
                "descr": "true if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object. ",
                "name": "configurable"
            },
            {
                "descr": "true if and only if this property shows up during enumeration of the properties on the corresponding object. ",
                "name": "enumerable"
            },
            {
                "descr": "The value associated with the property. ",
                "name": "value"
            },
            {
                "descr": "true if and only if the value associated with the property may be changed with an assignment operator. ",
                "name": "writable"
            },
            {
                "descr": "A function which serves as a getter for the property, or undefined if there is no getter. ",
                "name": "get"
            },
            {
                "descr": "A function which serves as a setter for the property, or undefined if there is no setter. ",
                "name": "set"
            }
        ],
        "path": "javascript/global_objects/object/defineproperties",
        "syntax": "Object.defineProperties(obj, props)",
        "type": "Object"
    },
    "defineProperty": {
        "descr": "The static method Object.defineProperty() defines a new property directly on an object, or modifies an existing property on an object, and returns the object.",
        "name": "Object.defineProperty",
        "params": [
            {
                "descr": "The object on which to define the property.",
                "name": "obj"
            },
            {
                "descr": "The name or Symbol of the property to be defined or modified.",
                "name": "prop"
            },
            {
                "descr": "The descriptor for the property being defined or modified.",
                "name": "descriptor"
            },
            {
                "descr": "true if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object. ",
                "name": "configurable"
            },
            {
                "descr": "true if and only if this property shows up during enumeration of the properties on the corresponding object. ",
                "name": "enumerable"
            },
            {
                "descr": "The value associated with the property. ",
                "name": "value"
            },
            {
                "descr": "true if and only if the value associated with the property may be changed with an assignment operator. ",
                "name": "writable"
            },
            {
                "descr": "A function which serves as a getter for the property, or undefined if there is no getter. ",
                "name": "get"
            },
            {
                "descr": "A function which serves as a setter for the property, or undefined if there is no setter. ",
                "name": "set"
            }
        ],
        "path": "javascript/global_objects/object/defineproperty",
        "syntax": "Object.defineProperty(obj, prop, descriptor)",
        "type": "Object"
    },
    "delay": {
        "descr": "Added to jQuery in version 1.4, the .delay() method allows us to delay the execution of functions that follow it in the queue. It can be used with the standard effects queue or with a custom queue. Only subsequent events in a queue are delayed; for example this will not delay the no-arguments forms of .show() or .hide() which do not use the effects queue.",
        "name": "delay",
        "params": [
            {
                "descr": "Type: Integer  An integer indicating the number of milliseconds to delay execution of the next item in the queue.",
                "name": "duration"
            },
            {
                "descr": "Type: String  A string containing the name of the queue. ",
                "name": "queueName"
            }
        ],
        "path": "jquery/delay",
        "syntax": ".delay( duration [, queueName ] ) Returns: jQuery",
        "type": "Effects"
    },
    "delegate": {
        "descr": "As of jQuery 3.0, .delegate() has been deprecated. It was superseded by the .on() method since jQuery 1.7, so its use was already discouraged. For earlier versions, however, it remains the most effective means to use event delegation. More information on event binding and delegation is in the .on() method. In general, these are the equivalent templates for the two methods:",
        "name": "delegate",
        "params": [
            {
                "descr": "Type: String  A selector to filter the elements that trigger the event.",
                "name": "selector"
            },
            {
                "descr": "Type: String  A string containing one or more space-separated JavaScript event types, such as \"click\" or \"keydown,\" or custom event names.",
                "name": "eventType"
            },
            {
                "descr": "Type: Function( Event eventObject ) A function to execute at the time the event is triggered.",
                "name": "handler"
            },
            {
                "descr": "Type: String  A selector to filter the elements that trigger the event.",
                "name": "selector"
            },
            {
                "descr": "Type: String  A string containing one or more space-separated JavaScript event types, such as \"click\" or \"keydown,\" or custom event names.",
                "name": "eventType"
            },
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.",
                "name": "eventData"
            },
            {
                "descr": "Type: Function( Event eventObject ) A function to execute at the time the event is triggered.",
                "name": "handler"
            },
            {
                "descr": "Type: String  A selector to filter the elements that trigger the event.",
                "name": "selector"
            },
            {
                "descr": "Type: PlainObject  A plain object of one or more event types and functions to execute for them.",
                "name": "events"
            }
        ],
        "path": "jquery/delegate",
        "syntax": ".delegate( selector, eventType, handler ) Returns: jQueryversion deprecated: 3.0",
        "type": "Events"
    },
    "delete": {
        "descr": "The JavaScript delete removes a property from an object; if no more references to the same property are held, it is eventually released automatically.",
        "name": "delete",
        "params": [
            {
                "descr": "The name of an object, or an expression evaluating to an object.",
                "name": "object"
            },
            {
                "descr": "The property to delete.",
                "name": "property"
            }
        ],
        "path": "javascript/operators/delete",
        "syntax": "delete expression  where expression should evaluate to a property reference, e.g.: delete object.property delete object['property']  Parameters  object The name of an object, or an expression evaluating to an object. property The property to delete.  Return value true for all cases except when the property is an own non-configurable property, in which case, false is returned in non-strict mode. Exceptions Throws Global_objects/SyntaxError in strict mode if the property is an own non-configurable property. Description Unlike what common belief suggests, the delete operator has nothing to do with directly freeing memory. Memory management is done indirectly via breaking references. See the memory management page for more details. The delete operator removes a given property from an object. On successful deletion, it will return true, else false will be returned. However, it is important to consider the following scenarios:  If the property which you are trying to delete does not exist, delete will not have any effect and will return true  If a property with the same name exists on the object's prototype chain, then, after deletion, the object will use the property from the prototype chain (in other words, delete only has an effect on own properties). Any property declared with var",
        "type": "Operators"
    },
    "dequeue": {
        "descr": "When .dequeue() is called, the next function on the queue is removed from the queue, and then executed. This function should in turn (directly or indirectly) cause .dequeue() to be called, so that the sequence can continue.",
        "name": "dequeue",
        "params": [
            {
                "descr": "Type: String  A string containing the name of the queue. ",
                "name": "queueName"
            }
        ],
        "path": "jquery/dequeue",
        "syntax": ".dequeue( [queueName ] ) Returns: jQuery",
        "type": "Data"
    },
    "detach": {
        "descr": "The .detach() method is the same as .remove(), except that .detach() keeps all jQuery data associated with the removed elements. This method is useful when removed elements are to be reinserted into the DOM at a later time.",
        "name": "detach",
        "params": [
            {
                "descr": "Type: Selector  A selector expression that filters the set of matched elements to be removed.",
                "name": "selector"
            }
        ],
        "path": "jquery/detach",
        "syntax": ".detach( [selector ] ) Returns: jQuery",
        "type": "Manipulation"
    },
    "devicePixelRatio": {
        "descr": "The Window property devicePixelRatio returns the ratio of the resolution in physical pixels to the resolution in CSS pixels for the current display device. This value could also be interpreted as the ratio of pixel sizes: the size of one CSS pixel to the size of one physical pixel. In simpler terms, this tells the browser how many of the screen's actual pixels should be used to draw a single CSS pixel.",
        "name": "window.devicePixelRatio",
        "params": [],
        "path": "dom/window/devicepixelratio",
        "syntax": "value = window.devicePixelRatio;  Value A double-precision floating-point value indicating the ratio of the display's resolution in physical pixels to the resolution in CSS pixels. Example A canvas can appear too blurry on retina screens. Use window.devicePixelRatio to determine how much extra pixel density should be added to allow for a sharper image. HTML <canvas id=\"canvas\"></canvas>  JavaScript var canvas = document.getElementById('canvas');\n or  var ctx = canvas.getContext('2d');\n or  // Set display size (css pixels). var size = 200; canvas.style.width = size + \"px\"; canvas.style.height = size + \"px\"; // Set actual size in memory (scaled to account for extra pixel density). var scale = window.devicePixelRatio; // Change to 1 on retina screens to see blurry canvas. canvas.width = size * scale; canvas.height = size * scale; // Normalize coordinate system to use css pixels. ctx.scale(scale, scale);\n or  ctx.fillStyle = \"#bada55\"; ctx.fillRect(10, 10, 300, 300);\n or  ctx.fillStyle = \"#ffffff\"; ctx.font = '18px Arial'; ctx.textAlign = 'center'; ctx.textBaseline = 'middle'; var x = size / 2; var y = size / 2; var textString = \"I love MDN\"; ctx.fillText(textString, x, y);",
        "type": "Window"
    },
    "die": {
        "descr": "Any handler that has been attached with .live() can be removed with .die(). This method is analogous to calling .off() with no arguments, which is used to remove all handlers attached with .on(). See the discussions of .live() and .off() for further details.",
        "name": "die",
        "params": [
            {
                "descr": "Type: String  A string containing a JavaScript event type, such as click or keydown.",
                "name": "eventType"
            },
            {
                "descr": "Type: String  The function that is no longer to be executed.",
                "name": "handler"
            },
            {
                "descr": "Type: PlainObject  A plain object of one or more event types, such as click or keydown and their corresponding functions that are no longer to be executed.",
                "name": "events"
            }
        ],
        "path": "jquery/die",
        "syntax": ".die() Returns: jQueryversion deprecated: 1.7, removed: 1.9",
        "type": "Events"
    },
    "directories": {
        "descr": "Obsolete since Gecko 2.0 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "window.directories",
        "params": [],
        "path": "dom/window/directories",
        "syntax": "var dirBar = window.directories;  Parameters dirBar is an object of the type BarProp. Example <script> function dirs() { alert(window.directories);\n or  } </script>);",
        "type": "Window"
    },
    "do...while": {
        "descr": "The do...while creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.",
        "name": "do...while",
        "params": [
            {
                "descr": "A statement that is executed at least once and is re-executed each time the condition evaluates to true. ",
                "name": "statement"
            },
            {
                "descr": "An expression evaluated after each pass through the loop. ",
                "name": "condition"
            }
        ],
        "path": "javascript/statements/do...while",
        "syntax": "do statement while (condition);",
        "type": "Statements"
    },
    "document": {
        "descr": "window.document returns a reference to the document contained in the window.",
        "name": "window.document",
        "params": [],
        "path": "dom/window/document",
        "syntax": "doc = window.document  Parameters   doc is an object reference to a document.  Example <!DOCTYPE html> <html> <head> <title>Hello, World!</title> </head> <body> <script type=\"text/javascript\"> var doc = window.document; console.log(doc.title);\n or  // Hello, World! </script> </body> </html>);",
        "type": "Window"
    },
    "document.Document": {
        "descr": "The Document constructor creates a new Document object which is a web page loaded in the browser and serving as an entry point into the page's content.",
        "name": "document.Document",
        "params": [],
        "path": "dom/document/document",
        "syntax": "var document = new Document()",
        "type": "Document"
    },
    "document.URL": {
        "descr": "The URL read-only property of the Document interface returns the document location as a string.",
        "name": "document.URL",
        "params": [],
        "path": "dom/document/url",
        "syntax": "var string = document.URL  Example JavaScript document.getElementById(\"url\").textContent = document.URL;",
        "type": "Document"
    },
    "document.adoptNode": {
        "descr": "Document.adoptNode() transfers a node from another document into the method's document. The adopted node and its subtree is removed from its original document (if any), and its ownerDocument is changed to the current document. The node can then be inserted into the current document.",
        "name": "document.adoptNode",
        "params": [
            {
                "descr": "The adopted node that now has this document as its ownerDocument. ",
                "name": "node"
            },
            {
                "descr": "The node from another document to be adopted.",
                "name": "externalNode"
            }
        ],
        "path": "dom/document/adoptnode",
        "syntax": "node = document.adoptNode(externalNode);",
        "type": "Document"
    },
    "document.body": {
        "descr": "The Document.body property represents the <body> or <frameset> node of the current document, or null if no such element exists.",
        "name": "document.body",
        "params": [],
        "path": "dom/document/body",
        "syntax": "var objRef = document.body; document.body = objRef; Example // in HTML: <body id=\"oldBodyElement\"></body> alert(document.body.id);\n or  // \"oldBodyElement\" var aNewBodyElement = document.createElement(\"body\");\n or  aNewBodyElement.id = \"newBodyElement\"; document.body = aNewBodyElement; alert(document.body.id);\n or  // \"newBodyElement\");",
        "type": "Document"
    },
    "document.characterSet": {
        "descr": "The Document.characterSet read-only property returns the character encoding of the document that it's currently rendered with. (A character encoding is a set of characters and how to interpret bytes into those characters.)",
        "name": "document.characterSet",
        "params": [
            {
                "descr": "Uses the non-standard name: inputEncoding",
                "name": "?"
            },
            {
                "descr": "Uses the non-standard name: charset",
                "name": "?   ?"
            },
            {
                "descr": "Uses the non-standard name: inputEncoding",
                "name": "?"
            },
            {
                "descr": "Uses the non-standard name: charset",
                "name": "?   ?"
            },
            {
                "descr": "Uses the non-standard name: inputEncoding",
                "name": "?"
            },
            {
                "descr": "Uses the non-standard name: charset",
                "name": "?   9"
            },
            {
                "descr": "Uses the non-standard name: inputEncoding",
                "name": "?"
            },
            {
                "descr": "Uses the non-standard name: inputEncoding",
                "name": "?"
            },
            {
                "descr": "Uses the non-standard name: charset",
                "name": "?   ?"
            },
            {
                "descr": "Uses the non-standard name: inputEncoding",
                "name": "?"
            },
            {
                "descr": "Uses the non-standard name: charset",
                "name": "?   ?"
            },
            {
                "descr": "Uses the non-standard name: inputEncoding",
                "name": "?"
            }
        ],
        "path": "dom/document/characterset",
        "syntax": "var string = document.characterSet; Examples <button onclick=\"console.log(document.characterSet);\n or \"> Log character encoding </button> <!-- displays document's character encoding in the dev console, such as \"ISO-8859-1\" or \"UTF-8\" -->);",
        "type": "Document"
    },
    "document.close": {
        "descr": "The document.close() method finishes writing to a document, opened with document.open().",
        "name": "document.close",
        "params": [],
        "path": "dom/document/close",
        "syntax": "document.close();",
        "type": "Document"
    },
    "document.compatMode": {
        "descr": "Indicates whether the document is rendered in Quirks mode or Standards mode.",
        "name": "document.compatMode",
        "params": [
            {
                "descr": "Is an enumerated value that can be:   \"BackCompat\" if the document is in quirks mode. ",
                "name": "mode"
            }
        ],
        "path": "dom/document/compatmode",
        "syntax": "mode = document.compatMode;  Values  mode Is an enumerated value that can be:   \"BackCompat\" if the document is in quirks mode.  \"CSS1Compat\" if the document is in no-quirks (also known as \"standards\") mode or limited-quirks (also known as \"almost standards\") mode.     Note: all these modes are now defined in standards, so the older \"standards\" and \"almost standards\" names are nonsensical and no longer used in standards.",
        "type": "Document"
    },
    "document.cookie": {
        "descr": "Get and set the cookies associated with the current document. For a general library see this simple cookie framework.",
        "name": "document.cookie",
        "params": [
            {
                "descr": "The function to be executed (function).",
                "name": "callback"
            },
            {
                "descr": "The this object (Object or null).",
                "name": "thisObject Optional"
            },
            {
                "descr": "The arguments of the callback function.",
                "name": "argumentToPass1, argumentToPass2, argumentToPassN Optional"
            },
            {
                "descr": "The identifier to check, i.e. the name of the cookie (string)",
                "name": "identifier"
            },
            {
                "descr": "A boolean expressing whether the cookie will use the local path (true) instead of the global one (false or undefined) (boolean or undefined)",
                "name": "onlyHere Optional"
            }
        ],
        "path": "dom/document/cookie",
        "syntax": "allCookies = document.cookie; In the code above allCookies is a string containing a semicolon-separated list of all cookies (i.e. key=value pairs). Note that each key and value may be surrounded by whitespace (space and tab characters): in fact RFC 6265 mandates a single space after each semicolon, but some user agents may not abide by this.",
        "type": "Document"
    },
    "document.createAttribute": {
        "descr": "The Document.createAttribute() method creates a new attribute node, and returns it. The object created a node implementing the Attr interface. The DOM does not enforce what sort of attributes can be added to a particular element in this manner.",
        "name": "document.createAttribute",
        "params": [],
        "path": "dom/document/createattribute",
        "syntax": "attribute = document.createAttribute(name)",
        "type": "Document"
    },
    "document.createCDATASection": {
        "descr": "createCDATASection() creates a new CDATA section node, and returns it.",
        "name": "document.createCDATASection",
        "params": [],
        "path": "dom/document/createcdatasection",
        "syntax": "CDATASectionNode = document.createCDATASection(data)",
        "type": "Document"
    },
    "document.createComment": {
        "descr": "createComment() creates a new comment node, and returns it.",
        "name": "document.createComment",
        "params": [
            {
                "descr": "A string containing the data to be added to the Comment.",
                "name": "data"
            }
        ],
        "path": "dom/document/createcomment",
        "syntax": "CommentNode = document.createComment(data)",
        "type": "Document"
    },
    "document.createDocumentFragment": {
        "descr": "Creates a new empty DocumentFragment.",
        "name": "document.createDocumentFragment",
        "params": [],
        "path": "dom/document/createdocumentfragment",
        "syntax": "var fragment = document.createDocumentFragment();",
        "type": "Document"
    },
    "document.createElement": {
        "descr": "In an HTML document, the document.createElement() method creates the HTML element specified by tagName, or an HTMLUnknownElement if tagName isn't recognized.",
        "name": "document.createElement",
        "params": [
            {
                "descr": "A string that specifies the type of element to be created. ",
                "name": "tagName"
            },
            {
                "descr": "An optional ElementCreationOptions object containing a single property named is, whose value is the tag name for a custom element previously defined using customElements.define(). ",
                "name": "optionsOptional"
            }
        ],
        "path": "dom/document/createelement",
        "syntax": "var element = document.createElement(tagName[, options]);",
        "type": "Document"
    },
    "document.createEvent": {
        "descr": "Many methods used with createEvent, such as initCustomEvent, are deprecated. Use event constructors instead.",
        "name": "document.createEvent",
        "params": [],
        "path": "dom/document/createevent",
        "syntax": "var event = document.createEvent(type);",
        "type": "Document"
    },
    "document.createExpression": {
        "descr": "This method compiles an XPathExpression which can then be used for (repeated) evaluations.",
        "name": "document.createExpression",
        "params": [],
        "path": "dom/document/createexpression",
        "syntax": "xpathExpr = document.createExpression(xpathText, namespaceURLMapper);",
        "type": "Document"
    },
    "document.createNodeIterator": {
        "descr": "Returns a new NodeIterator object.",
        "name": "document.createNodeIterator",
        "params": [
            {
                "descr": "The root node at which to begin the NodeIterator's traversal.",
                "name": "root"
            },
            {
                "descr": "Is an optional unsigned long representing a bitmask created by combining the constant properties of NodeFilter. ",
                "name": "whatToShow Optional"
            },
            {
                "descr": "An object implementing the NodeFilter interface; its acceptNode() method will be called for each node in the subtree based at root which is accepted as included by the whatToShow flag to determine whether or not to include it in the list of iterable nodes (a simple callback function may also be used instead). The method should return one of NodeFilter.FILTER_ACCEPT, NodeFilter.FILTER_REJECT, or NodeFilter.FILTER_SKIP. See the Example.",
                "name": "filter Optional"
            }
        ],
        "path": "dom/document/createnodeiterator",
        "syntax": "var nodeIterator = document.createNodeIterator(root, whatToShow, filter);",
        "type": "Document"
    },
    "document.createRange": {
        "descr": "Returns a new Range object.",
        "name": "document.createRange",
        "params": [],
        "path": "dom/document/createrange",
        "syntax": "range = document.createRange();",
        "type": "Document"
    },
    "document.createTextNode": {
        "descr": "Creates a new Text node.",
        "name": "document.createTextNode",
        "params": [],
        "path": "dom/document/createtextnode",
        "syntax": "var text = document.createTextNode(data);",
        "type": "Document"
    },
    "document.createTreeWalker": {
        "descr": "The Document.createTreeWalker() creator method returns a newly created TreeWalker object.",
        "name": "document.createTreeWalker",
        "params": [
            {
                "descr": "Is the root Node of this TreeWalker traversal. ",
                "name": "root"
            },
            {
                "descr": "Is an optional unsigned long representing a bitmask created by combining the constant properties of NodeFilter. ",
                "name": "whatToShow Optional"
            },
            {
                "descr": "Is an optional NodeFilter, that is an object with a method acceptNode, which is called by the TreeWalker to determine whether or not to accept a node that has passed the whatToShow check.",
                "name": "filter Optional"
            },
            {
                "descr": "Is a Boolean flag indicating if when discarding an EntityReference its whole sub-tree must be discarded at the same time.",
                "name": "entityReferenceExpansion Optional"
            }
        ],
        "path": "dom/document/createtreewalker",
        "syntax": "treeWalker = document.createTreeWalker(root, whatToShow, filter, entityReferenceExpansion);",
        "type": "Document"
    },
    "document.currentScript": {
        "descr": "Returns the <script> element whose script is currently being processed.",
        "name": "document.currentScript",
        "params": [],
        "path": "dom/document/currentscript",
        "syntax": "var curScriptElement = document.currentScript;  Example This example checks to see if the script is being executed asynchronously: if (document.currentScript.async) { console.log(\"Executing asynchronously\");\n or  } else { console.log(\"Executing synchronously\");\n or  });",
        "type": "Document"
    },
    "document.designMode": {
        "descr": "document.designMode controls whether the entire document is editable. Valid values are \"on\" and \"off\". According to the specification, this property is meant to default to \"off\". Firefox follows this standard. The earlier versions of Chrome and IE default to \"inherit\". Starting in Chrome 43, the default is \"off\" and \"inherit\" is no longer supported. In IE6-10, the value is capitalized.",
        "name": "document.designMode",
        "params": [],
        "path": "dom/document/designmode",
        "syntax": "var mode = document.designMode; document.designMode = \"on\"; document.designMode = \"off\"; Example Make an <iframe>'s document editable: iframeNode.contentDocument.designMode = \"on\";  Specifications    Specification Status Comment   HTML Living StandardThe definition of 'designMode' in that specification. Living Standard Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  Yes  Yes  Yes  Yes  Yes  Yes       Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support  Yes  Yes  ?   ?   ?   ?   ?     See also  Rich-Text Editing in Mozilla HTMLElement.contentEditable  designMode property on MSDN   Edit this page on MDN",
        "type": "Document"
    },
    "document.doctype": {
        "descr": "Returns the Document Type Declaration (DTD) associated with current document. The returned object implements the DocumentType interface. Use DOMImplementation.createDocumentType() to create a DocumentType.",
        "name": "document.doctype",
        "params": [],
        "path": "dom/document/doctype",
        "syntax": "doctype = document.doctype;    doctype is a read-only property.  Example var doctypeObj = document.doctype; console.log( \"doctypeObj.name: \" + doctypeObj.name + \"\\n\" + \"doctypeObj.internalSubset: \" + doctypeObj.internalSubset + \"\\n\" + \"doctypeObj.publicId: \" + doctypeObj.publicId + \"\\n\" + \"doctypeObj.systemId: \" + doctypeObj.systemId );",
        "type": "Document"
    },
    "document.documentElement": {
        "descr": "Document.documentElement returns the Element that is the root element of the document (for example, the <html> element for HTML documents).",
        "name": "document.documentElement",
        "params": [],
        "path": "dom/document/documentelement",
        "syntax": "var element = document.documentElement;  Example var rootElement = document.documentElement; var firstTier = rootElement.childNodes; // firstTier is the NodeList of the direct children of the root element for (var i = 0; i < firstTier.length; i++) { // do something with each direct kid of the root element // as firstTier[i] }",
        "type": "Document"
    },
    "document.documentURI": {
        "descr": "The documentURI property of the Document interface returns the document location as a string.",
        "name": "document.documentURI",
        "params": [],
        "path": "dom/document/documenturi",
        "syntax": "var string = document.documentURI;  Notes HTML documents have a document.URL property which returns the same value. Unlike URL, documentURI is available on all types of documents. Specifications    Specification Status Comment   DOMThe definition of 'documentURI' in that specification. Living Standard     Document Object Model (DOM) Level 3 Core SpecificationThe definition of 'documentURI' in that specification. Obsolete Initial definition    Browser compatibilityUpdate compatibility data on GitHub",
        "type": "Document"
    },
    "document.domain": {
        "descr": "The domain property of the Document interface gets/sets the domain portion of the origin of the current document, as used by the same origin policy.",
        "name": "document.domain",
        "params": [
            {
                "descr": "An attempt has been made to set domain under one of the following conditions:  the document is inside a sandboxed <iframe>  the document has no browsing context the document's effective domain is null  the given value is not equal to the document's effective domain (or it is not a registerable domain suffix of it) the document-domain Feature-Policy is enabled",
                "name": "SecurityError"
            }
        ],
        "path": "dom/document/domain",
        "syntax": "var domainString = document.domain; document.domain = string; Value The domain portion of the current document's origin. Exceptions  SecurityError An attempt has been made to set domain under one of the following conditions:  the document is inside a sandboxed <iframe>  the document has no browsing context the document's effective domain is null  the given value is not equal to the document's effective domain (or it is not a registerable domain suffix of it) the document-domain",
        "type": "Document"
    },
    "document.enableStyleSheetsForSet": {
        "descr": "Enables the style sheets matching the specified name in the current style sheet set, and disables all other style sheets (except those without a title, which are always enabled).",
        "name": "document.enableStyleSheetsForSet",
        "params": [
            {
                "descr": "The name of the style sheets to enable. ",
                "name": "name"
            }
        ],
        "path": "dom/document/enablestylesheetsforset",
        "syntax": "document.enableStyleSheetsForSet(name)",
        "type": "Document"
    },
    "document.evaluate": {
        "descr": "Returns an XPathResult based on an XPath expression and other given parameters.",
        "name": "document.evaluate",
        "params": [],
        "path": "dom/document/evaluate",
        "syntax": "var xpathResult = document.evaluate( xpathExpression, contextNode, namespaceResolver, resultType, result );",
        "type": "Document"
    },
    "document.execCommand": {
        "descr": "When an HTML document has been switched to designMode, its document object exposes an execCommand method to run commands that manipulate the current editable region, such as form inputs or contentEditable elements.",
        "name": "document.execCommand",
        "params": [
            {
                "descr": "A DOMString specifying the name of the command to execute. ",
                "name": "aCommandName"
            },
            {
                "descr": "A Boolean indicating whether the default user interface should be shown. ",
                "name": "aShowDefaultUI"
            },
            {
                "descr": "For commands which require an input argument, is a DOMString providing that information. ",
                "name": "aValueArgument"
            },
            {
                "descr": "Changes the document background color. ",
                "name": "backColor"
            },
            {
                "descr": "Toggles bold on/off for the selection or at the insertion point. ",
                "name": "bold"
            },
            {
                "descr": "Clears all authentication credentials from the cache.",
                "name": "ClearAuthenticationCache"
            },
            {
                "descr": "Makes the content document either read-only or editable. ",
                "name": "contentReadOnly"
            },
            {
                "descr": "Copies the current selection to the clipboard. ",
                "name": "copy"
            },
            {
                "descr": "Creates an hyperlink from the selection, but only if there is a selection. ",
                "name": "createLink"
            },
            {
                "descr": "Removes the current selection and copies it to the clipboard. ",
                "name": "cut"
            },
            {
                "descr": "Adds a <small> tag around the selection or at the insertion point. ",
                "name": "decreaseFontSize"
            },
            {
                "descr": "Changes the paragraph separator used when new paragraphs are created in editable text regions. ",
                "name": "defaultParagraphSeparator"
            },
            {
                "descr": "Deletes the current selection.",
                "name": "delete"
            },
            {
                "descr": "Enables or disables the grabber that allows absolutely-positioned elements to be moved around. ",
                "name": "enableAbsolutePositionEditor"
            },
            {
                "descr": "Enables or disables the table row/column insertion and deletion controls. ",
                "name": "enableInlineTableEditing"
            },
            {
                "descr": "Enables or disables the resize handles on images, tables, and absolutely-positioned elements and other resizable objects. ",
                "name": "enableObjectResizing"
            },
            {
                "descr": "Changes the font name for the selection or at the insertion point. ",
                "name": "fontName"
            },
            {
                "descr": "Changes the font size for the selection or at the insertion point. ",
                "name": "fontSize"
            },
            {
                "descr": "Changes a font color for the selection or at the insertion point. ",
                "name": "foreColor"
            },
            {
                "descr": "Adds an HTML block-level element around the line containing the current selection, replacing the block element containing the line if one exists (in Firefox, <blockquote> is the exception — it will wrap any containing block element). Requires a tag-name string as a value argument. Virtually all block-level elements can be used. (Internet Explorer and Edge support only heading tags H1–H6, ADDRESS, and PRE, which must be wrapped in angle brackets, such as \"<H1>\".)",
                "name": "formatBlock"
            },
            {
                "descr": "Deletes the character ahead of the cursor's position, identical to hitting the Delete key on a Windows keyboard.",
                "name": "forwardDelete"
            },
            {
                "descr": "Adds a heading element around a selection or insertion point line. ",
                "name": "heading"
            },
            {
                "descr": "Changes the background color for the selection or at the insertion point. ",
                "name": "hiliteColor"
            },
            {
                "descr": "Adds a <big> tag around the selection or at the insertion point. ",
                "name": "increaseFontSize"
            },
            {
                "descr": "Indents the line containing the selection or insertion point. ",
                "name": "indent"
            },
            {
                "descr": "Controls whether the Enter key inserts a <br> element, or splits the current block element into two. ",
                "name": "insertBrOnReturn"
            },
            {
                "descr": "Inserts a <hr> element at the insertion point, or replaces the selection with it.",
                "name": "insertHorizontalRule"
            },
            {
                "descr": "Inserts an HTML string at the insertion point (deletes selection). ",
                "name": "insertHTML"
            },
            {
                "descr": "Inserts an image at the insertion point (deletes selection). ",
                "name": "insertImage"
            },
            {
                "descr": "Creates a numbered ordered list for the selection or at the insertion point.",
                "name": "insertOrderedList"
            },
            {
                "descr": "Creates a bulleted unordered list for the selection or at the insertion point.",
                "name": "insertUnorderedList"
            },
            {
                "descr": "Inserts a paragraph around the selection or the current line. ",
                "name": "insertParagraph"
            },
            {
                "descr": "Inserts the given plain text at the insertion point (deletes selection).",
                "name": "insertText"
            },
            {
                "descr": "Toggles italics on/off for the selection or at the insertion point. ",
                "name": "italic"
            },
            {
                "descr": "Centers the selection or insertion point.",
                "name": "justifyCenter"
            },
            {
                "descr": "Justifies the selection or insertion point.",
                "name": "justifyFull"
            },
            {
                "descr": "Justifies the selection or insertion point to the left.",
                "name": "justifyLeft"
            },
            {
                "descr": "Right-justifies the selection or the insertion point.",
                "name": "justifyRight"
            },
            {
                "descr": "Outdents the line containing the selection or insertion point.",
                "name": "outdent"
            },
            {
                "descr": "Pastes the clipboard contents at the insertion point (replaces current selection). ",
                "name": "paste"
            },
            {
                "descr": "Redoes the previous undo command.",
                "name": "redo"
            },
            {
                "descr": "Removes all formatting from the current selection.",
                "name": "removeFormat"
            },
            {
                "descr": "Selects all of the content of the editable region.",
                "name": "selectAll"
            },
            {
                "descr": "Toggles strikethrough on/off for the selection or at the insertion point.",
                "name": "strikeThrough"
            },
            {
                "descr": "Toggles subscript on/off for the selection or at the insertion point.",
                "name": "subscript"
            },
            {
                "descr": "Toggles superscript on/off for the selection or at the insertion point.",
                "name": "superscript"
            },
            {
                "descr": "Toggles underline on/off for the selection or at the insertion point.",
                "name": "underline"
            },
            {
                "descr": "Undoes the last executed command.",
                "name": "undo"
            },
            {
                "descr": "Removes the anchor element from a selected hyperlink.",
                "name": "unlink"
            },
            {
                "descr": "Toggles the use of HTML tags or CSS for the generated markup. ",
                "name": "useCSS"
            },
            {
                "descr": "Replaces the useCSS command. true modifies/generates style attributes in markup, false generates presentational elements.",
                "name": "styleWithCSS"
            }
        ],
        "path": "dom/document/execcommand",
        "syntax": "bool = document.execCommand(aCommandName, aShowDefaultUI, aValueArgument)",
        "type": "Document"
    },
    "document.exitFullscreen": {
        "descr": "The Document method exitFullscreen() requests that the element on this document which is currently being presented in full-screen mode be taken out of full-screen mode, restoring the previous state of the screen. This usually reverses the effects of a previous call to Element.requestFullscreen().",
        "name": "document.exitFullscreen",
        "params": [],
        "path": "dom/document/exitfullscreen",
        "syntax": "exitPromise = document.exitFullscreen();",
        "type": "Document"
    },
    "document.exitPointerLock": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "document.exitPointerLock",
        "params": [],
        "path": "dom/document/exitpointerlock",
        "syntax": "document.exitPointerLock();",
        "type": "Document"
    },
    "document.fonts": {
        "descr": "The fonts property of the Document interface returns the FontFaceSet interface of the document.",
        "name": "document.fonts",
        "params": [],
        "path": "dom/document/fonts",
        "syntax": "let fontFaceSet = document.fonts; Value The retuned value is the FontFaceSet interface of the document. The FontFaceSet interface is useful for loading new fonts, checking the status of previously loaded fonts etc. Examples Doing operation after all fonts are loaded document.fonts.ready.then(function() { // Any operation that needs to be done only after all the fonts // have finished loading can go here. });",
        "type": "Document"
    },
    "document.forms": {
        "descr": "The forms read-only property of the Document interface returns an HTMLCollection listing all the <form> elements contained in the document.",
        "name": "document.forms",
        "params": [],
        "path": "dom/document/forms",
        "syntax": "collection = document.forms; Value An HTMLCollection object listing all of the document's forms. Each item in the collection is a HTMLFormElement representing a single <form> element. If the document has no forms, the returned collection is empty, with a length of zero. Examples Getting form information <!DOCTYPE html> <html lang=\"en\"> <head> <title>document.forms example</title> </head> <body> <form id=\"robby\"> <input type=\"button\" onclick=\"alert(document.forms[0].id);\n or \" value=\"robby's form\" /> </form> <form id=\"dave\"> <input type=\"button\" onclick=\"alert(document.forms[1].id);\n or \" value=\"dave's form\" /> </form> <form id=\"paul\"> <input type=\"button\" onclick=\"alert(document.forms[2].id);\n or \" value=\"paul's form\" /> </form> </body> </html>);",
        "type": "Document"
    },
    "document.fullscreen": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "document.fullscreen",
        "params": [],
        "path": "dom/document/fullscreen",
        "syntax": "var isFullScreen = document.fullscreen;  Value A Boolean value which is true if the document is currently displaying an element in full-screen mode; otherwise, the value is false. Example This simple function reports whether or not full-screen mode is currently active, using the obsolete fullscreen property. function isDocumentInFullScreenMode() { return document.fullscreen; }",
        "type": "Document"
    },
    "document.fullscreenEnabled": {
        "descr": "The read-only fullscreenEnabled property on the Document interface indicates whether or not full-screen mode is available. Full-screen mode is available only for a page that has no windowed plug-ins in any of its documents, and if all <iframe> elements which contain the document have their allowfullscreen attribute set.",
        "name": "document.fullscreenEnabled",
        "params": [],
        "path": "dom/document/fullscreenenabled",
        "syntax": "var isFullscreenAvailable = document.fullscreenEnabled;  Value A Boolean value which is true if the document and the elements within can be placed into full-screen mode by calling Element.requestFullscreen()",
        "type": "Document"
    },
    "document.getAnimations": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "document.getAnimations",
        "params": [],
        "path": "dom/document/getanimations",
        "syntax": "var allAnimations = Document.getAnimations();",
        "type": "Document"
    },
    "document.getBoxObjectFor": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "document.getBoxObjectFor",
        "params": [],
        "path": "dom/document/getboxobjectfor",
        "syntax": "boxObject = document.getBoxObjectFor(element);",
        "type": "Document"
    },
    "document.getElementById": {
        "descr": "The Document method getElementById() returns an Element object representing the element whose id property matches the specified string. Since element IDs are required to be unique if specified, they're a useful way to get access to a specific element quickly.",
        "name": "document.getElementById",
        "params": [
            {
                "descr": "The ID of the element to locate. ",
                "name": "id"
            }
        ],
        "path": "dom/document/getelementbyid",
        "syntax": "var element = document.getElementById(id);",
        "type": "Document"
    },
    "document.getElementsByClassName": {
        "descr": "Returns an array-like object of all child elements which have all of the given class names. When called on the document object, the complete document is searched, including the root node. You may also call getElementsByClassName() on any element; it will return only elements which are descendants of the specified root element with the given class names.",
        "name": "document.getElementsByClassName",
        "params": [],
        "path": "dom/document/getelementsbyclassname",
        "syntax": "var elements = document.getElementsByClassName(names);\n or  // or: var elements = rootElement.getElementsByClassName(names);",
        "type": "Document"
    },
    "document.getElementsByName": {
        "descr": "The getElementsByName() method of the document object returns a NodeList Collection of elements with a given name in the document.",
        "name": "document.getElementsByName",
        "params": [],
        "path": "dom/document/getelementsbyname",
        "syntax": "elements = document.getElementsByName(name)",
        "type": "Document"
    },
    "document.getElementsByTagName": {
        "descr": "Returns an HTMLCollection of elements with the given tag name. The complete document is searched, including the root node. The returned HTMLCollection is live, meaning that it updates itself automatically to stay in sync with the DOM tree without having to call document.getElementsByTagName() again.",
        "name": "document.getElementsByTagName",
        "params": [],
        "path": "dom/document/getelementsbytagname",
        "syntax": "var elements = document.getElementsByTagName(name);",
        "type": "Document"
    },
    "document.hasFocus": {
        "descr": "When viewing a document, an element with focus is always the active element in the document, but an active element does not necessarily have focus. For example, an active element within a popup window that is not the foreground does not have focus.",
        "name": "document.hasFocus",
        "params": [],
        "path": "dom/document/hasfocus",
        "syntax": "var focused = document.hasFocus();",
        "type": "Document"
    },
    "document.hasStorageAccess": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "document.hasStorageAccess",
        "params": [],
        "path": "dom/document/hasstorageaccess",
        "syntax": "Promise<boolean> hasStorageAccess()",
        "type": "Document"
    },
    "document.head": {
        "descr": "The head read-only property of the Document interface returns the <head> element of the current document.",
        "name": "document.head",
        "params": [],
        "path": "dom/document/head",
        "syntax": "var objRef = document.head;  Value An HTMLHeadElement. Example <!doctype html> <head id=\"my-document-head\"> <title>Example: using document.head</title> </head> <script> var theHead = document.head; console.log(theHead.id);\n or  // \"my-document-head\"; console.log( theHead === document.querySelector(\"head\") );\n or  // true </script>);",
        "type": "Document"
    },
    "document.height": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "document.height",
        "params": [],
        "path": "dom/document/height",
        "syntax": "height_value = document.height  Example // alert document height alert(document.height);",
        "type": "Document"
    },
    "document.hidden": {
        "descr": "The Document.hidden read-only property returns a Boolean value indicating if the page is considered hidden or not.",
        "name": "document.hidden",
        "params": [],
        "path": "dom/document/hidden",
        "syntax": "var boolean = document.hidden Examples document.addEventListener(\"visibilitychange\", function() { console.log( document.hidden );\n or  // Modify behavior... });",
        "type": "Document"
    },
    "document.images": {
        "descr": "The images read-only property of the Document interface returns a collection of the images in the current HTML document.",
        "name": "document.images",
        "params": [],
        "path": "dom/document/images",
        "syntax": "var imageCollection = document.images; Value An HTMLCollection providing a live list of all of the images contained in the current document. Each entry in the collection is an HTMLImageElement representing a single image element. Usage notes You can use either JavaScript array notation or the item()",
        "type": "Document"
    },
    "document.implementation": {
        "descr": "Returns a DOMImplementation object associated with the current document.",
        "name": "document.implementation",
        "params": [],
        "path": "dom/document/implementation",
        "syntax": "DOMImpObj = document.implementation;  Example var modName = \"HTML\"; var modVer = \"2.0\"; var conformTest = document.implementation.hasFeature( modName, modVer );\n or  alert( \"DOM \" + modName + \" \" + modVer + \" supported?: \" + conformTest );\n or  // alerts with: \"DOM HTML 2.0 supported?: true\" if DOM Level 2 HTML module is supported.);",
        "type": "Document"
    },
    "document.importNode": {
        "descr": "The Document object's importNode() method creates a copy of a Node or DocumentFragment from another document, to be inserted into the current document later.",
        "name": "document.importNode",
        "params": [
            {
                "descr": "The copied node in the scope of the importing document. ",
                "name": "node"
            },
            {
                "descr": "The external Node or DocumentFragment to import into the current document.",
                "name": "externalNode"
            },
            {
                "descr": "A Boolean which controls whether or not to import the entire DOM subtree of the externalNode. ",
                "name": "deep"
            }
        ],
        "path": "dom/document/importnode",
        "syntax": "var node = document.importNode(externalNode, deep);",
        "type": "Document"
    },
    "document.lastModified": {
        "descr": "Returns a string containing the date and time on which the current document was last modified.",
        "name": "document.lastModified",
        "params": [],
        "path": "dom/document/lastmodified",
        "syntax": "string = document.lastModified;  Example Example #1: Simple usage alert(document.lastModified);\n or  // returns: Tuesday, July 10, 2001 10:19:42);",
        "type": "Document"
    },
    "document.lastStyleSheetSet": {
        "descr": "Returns the last enabled style sheet set; this property's value changes whenever the document.selectedStyleSheetSet property is changed.",
        "name": "document.lastStyleSheetSet",
        "params": [],
        "path": "dom/document/laststylesheetset",
        "syntax": "lastStyleSheetSet = document.lastStyleSheetSet  On return, lastStyleSheetSet indicates the style sheet set that was most recently set. If the current style sheet set has not been changed by setting document.selectedStyleSheetSet, the returned value is null.  Note: This value doesn't change when document.enableStyleSheetsForSet()",
        "type": "Document"
    },
    "document.links": {
        "descr": "The links read-only property of the Document interface returns a collection of all <area> elements and <a> elements in a document with a value for the href attribute.",
        "name": "document.links",
        "params": [],
        "path": "dom/document/links",
        "syntax": "nodeList = document.links  Value An HTMLCollection. Example var links = document.links; for(var i = 0; i < links.length; i++) { var linkHref = document.createTextNode(links[i].href);\n or  var lineBreak = document.createElement(\"br\");\n or  document.body.appendChild(linkHref);\n or  document.body.appendChild(lineBreak);\n or  });",
        "type": "Document"
    },
    "document.location": {
        "descr": "The Document.location read-only property returns a Location object, which contains information about the URL of the document and provides methods for changing that URL and loading another URL.",
        "name": "document.location",
        "params": [],
        "path": "dom/document/location",
        "syntax": "locationObj = document.location document.location = 'http://www.mozilla.org' // Equivalent to document.location.href = 'http://www.mozilla.org'  Example dump(document.location);\n or  // Prints a string like // \"http://www.example.com/juicybits.html\" to the console);",
        "type": "Document"
    },
    "document.onfullscreenchange": {
        "descr": "The Document.onfullscreenchangeproperty is an event handler for the fullscreenchange event that is fired when a document goes in or out of the fullscreen mode.",
        "name": "document.onfullscreenchange",
        "params": [],
        "path": "dom/document/onfullscreenchange",
        "syntax": "targetDocument.onfullscreenchange = fullscreenChangeHandler;  Example document.onfullscreenchange = function ( event ) { console.log(\"FULL SCREEN CHANGE\") }; document.documentElement.onclick = function () { // requestFullscreen() must be in an event handler or it will fail document.documentElement.requestFullscreen();\n or  });",
        "type": "Document"
    },
    "document.onfullscreenerror": {
        "descr": "The Document.onfullscreenerror property is an event handler for the fullscreenerror event that is sent to the document when it fails to transition into full-screen mode after a prior call to Element.requestFullscreen().",
        "name": "document.onfullscreenerror",
        "params": [],
        "path": "dom/document/onfullscreenerror",
        "syntax": "targetDocument.onfullscreenerror = fullscreenErrorHandler;  Value An event handler for the fullscreenerror event. Example This example attempts to call requestFullscreen()",
        "type": "Document"
    },
    "document.onselectionchange": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "document.onselectionchange",
        "params": [],
        "path": "dom/document/onselectionchange",
        "syntax": "obj.onselectionchange = function;    function is the name of a user-defined function, without the ()",
        "type": "Document"
    },
    "document.onvisibilitychange": {
        "descr": "The Document.onvisibilitychange property represents the event handler that is called when a visibilitychange event reaches this object.",
        "name": "document.onvisibilitychange",
        "params": [],
        "path": "dom/document/onvisibilitychange",
        "syntax": "obj.onvisibilitychange = function;    function is the name of a user-defined function, without the () suffix or any parameters, or an anonymous function declaration.  Example",
        "type": "Document"
    },
    "document.open": {
        "descr": "The Document.open() method opens a document for writing.",
        "name": "document.open",
        "params": [],
        "path": "dom/document/open",
        "syntax": "document.open();",
        "type": "Document"
    },
    "document.plugins": {
        "descr": "The plugins read-only property of the Document interface returns an HTMLCollection object containing one or more HTMLEmbedElements representing the <embed> elements in the current document.",
        "name": "document.plugins",
        "params": [],
        "path": "dom/document/plugins",
        "syntax": "embedArrayObj = document.plugins  Value An HTMLCollection, or null if there are no embeds in the document. Specifications    Specification Status Comment     HTML Living StandardThe definition of 'Document.plugins' in that specification. Living Standard      Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  Yes  ?   Yes  ?   ?   ?        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support  Yes  Yes  ?   Yes  ?   ?   ?     See also  MSDN: plugins Collection   Edit this page on MDN",
        "type": "Document"
    },
    "document.policy": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "document.policy",
        "params": [],
        "path": "dom/document/policy",
        "syntax": "var policy = HTMLIFrameElement.policy Value The Policy interface. Specifications    Specification Status Comment     Unknown Unknown Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   69Disabled    69Disabled   Disabled From version 69: this feature is behind the #enable-experimental-productivity-features preference (needs to be set to Enabled). To change preferences in Chrome, visit chrome://flags.    No  No  No  56Disabled    56Disabled   Disabled From version 56: this feature is behind the #enable-experimental-productivity-features",
        "type": "Document"
    },
    "document.preferredStyleSheetSet": {
        "descr": "Returns the preferred style sheet set as set by the page author.",
        "name": "document.preferredStyleSheetSet",
        "params": [],
        "path": "dom/document/preferredstylesheetset",
        "syntax": "preferredStyleSheetSet = document.preferredStyleSheetSet  On return, preferredStyleSheetSet indicates the author's preferred style sheet set. This is determined from the order of style sheet declarations and the Default-Style HTTP header. If there isn't a preferred style sheet set defined by the author, the empty string (\"\") is returned.",
        "type": "Document"
    },
    "document.queryCommandEnabled": {
        "descr": "The Document.queryCommandEnabled() method reports whether or not the specified editor command is enabled by the browser.",
        "name": "document.queryCommandEnabled",
        "params": [
            {
                "descr": "The command for which to determine support.",
                "name": "Parameters  command"
            }
        ],
        "path": "dom/document/querycommandenabled",
        "syntax": "isEnabled = document.queryCommandEnabled(command);",
        "type": "Document"
    },
    "document.queryCommandState": {
        "descr": "TBD",
        "name": "document.queryCommandState",
        "params": [],
        "path": "dom/document/querycommandstate",
        "syntax": "queryCommandState(String command)",
        "type": "Document"
    },
    "document.queryCommandSupported": {
        "descr": "The Document.queryCommandSupported() method reports whether or not the specified editor command is supported by the browser.",
        "name": "document.queryCommandSupported",
        "params": [
            {
                "descr": "The command for which to determine support.",
                "name": "Parameters  command"
            }
        ],
        "path": "dom/document/querycommandsupported",
        "syntax": "isSupported = document.queryCommandSupported(command);",
        "type": "Document"
    },
    "document.querySelector": {
        "descr": "Note: The matching is done using depth-first pre-order traversal of the document's nodes starting with the first element in the document's markup and iterating through sequential nodes by order of the number of child nodes.",
        "name": "document.querySelector",
        "params": [
            {
                "descr": "A DOMString containing one or more selectors to match. ",
                "name": "selectors"
            },
            {
                "descr": "The syntax of the specified selectors is invalid.",
                "name": "SYNTAX_ERR"
            }
        ],
        "path": "dom/document/queryselector",
        "syntax": "element = document.querySelector(selectors);",
        "type": "Document"
    },
    "document.querySelectorAll": {
        "descr": "The Element method querySelectorAll() returns a static (not live) NodeList representing a list of the document's elements that match the specified group of selectors.",
        "name": "document.querySelectorAll",
        "params": [
            {
                "descr": "A DOMString containing one or more selectors to match against. ",
                "name": "selectors"
            },
            {
                "descr": "The syntax of the specified selectors string is not valid.",
                "name": "SyntaxError"
            }
        ],
        "path": "dom/document/queryselectorall",
        "syntax": "elementList = parentNode.querySelectorAll(selectors);",
        "type": "Document"
    },
    "document.readyState": {
        "descr": "The Document.readyState property of a document describes the loading state of the document.",
        "name": "document.readyState",
        "params": [
            {
                "descr": "The document is still loading.",
                "name": "loading"
            },
            {
                "descr": "The document has finished loading and the document has been parsed but sub-resources such as images, stylesheets and frames are still loading.",
                "name": "interactive"
            },
            {
                "descr": "The document and all sub-resources have finished loading. ",
                "name": "complete"
            }
        ],
        "path": "dom/document/readystate",
        "syntax": "Syntax var string = document.readyState;  Examples Different states of readiness switch (document.readyState) { case \"loading\": // The document is still loading. break; case \"interactive\": // The document has finished loading. We can now access the DOM elements. // But sub-resources such as images, stylesheets and frames are still loading. var span = document.createElement(\"span\");\n or  span.textContent = \"A <span> element.\"; document.body.appendChild(span);\n or  break; case \"complete\": // The page is fully loaded. console.log(\"The first CSS rule is: \" + document.styleSheets[0].cssRules[0].cssText);\n or  break; });",
        "type": "Document"
    },
    "document.referrer": {
        "descr": "Returns the URI of the page that linked to this page.",
        "name": "document.referrer",
        "params": [],
        "path": "dom/document/referrer",
        "syntax": "string = document.referrer;  Notes The value is an empty string if the user navigated to the page directly (not through a link, but, for example, via a bookmark). Since this property returns only a string, it does not give you DOM access to the referring page.",
        "type": "Document"
    },
    "document.releaseCapture": {
        "descr": "Releases mouse capture if it's currently enabled on an element within this document. Enabling mouse capture on an element is done by calling element.setCapture().",
        "name": "document.releaseCapture",
        "params": [],
        "path": "dom/document/releasecapture",
        "syntax": "document.releaseCapture()",
        "type": "Document"
    },
    "document.requestStorageAccess": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "document.requestStorageAccess",
        "params": [],
        "path": "dom/document/requeststorageaccess",
        "syntax": "Promise<boolean> requestStorageAccess()",
        "type": "Document"
    },
    "document.scripts": {
        "descr": "The scripts property of the Document interface returns a list of the <script> elements in the document. The returned object is an HTMLCollection.",
        "name": "document.scripts",
        "params": [],
        "path": "dom/document/scripts",
        "syntax": "var scriptList = document.scripts;  Value An HTMLCollection. You can use this just like an array to get all the elements in the list. Example This example looks to see if the page has any <script> elements. var scripts = document.scripts; if (scripts.length) { alert(\"This page has scripts!\");\n or  });",
        "type": "Document"
    },
    "document.scrollingElement": {
        "descr": "The scrollingElement read-only property of the Document interface returns a reference to the Element that scrolls the document. In standards mode, this is the root element of the document, document.documentElement.",
        "name": "document.scrollingElement",
        "params": [],
        "path": "dom/document/scrollingelement",
        "syntax": "var element = document.scrollingElement; Example var scrollElm = document.scrollingElement; scrollElm.scrollTop = 0;  Specifications    Specification Status Comment   CSS Object Model (CSSOM) View ModuleThe definition of 'scrollingElement' in that specification. Working Draft Initial definition    Browser compatibilityUpdate compatibility data on GitHub",
        "type": "Document"
    },
    "document.selectedStyleSheetSet": {
        "descr": "Indicates the name of the style sheet set that's currently in use.",
        "name": "document.selectedStyleSheetSet",
        "params": [],
        "path": "dom/document/selectedstylesheetset",
        "syntax": "currentStyleSheetSet = document.selectedStyleSheetSet document.selectedStyleSheet = newStyleSheetSet  On return, currentStyleSheetSet indicates the name of the style sheet set currently in use. You can also set the current style sheet set using this property. Setting the value of this property is equivalent to calling document.enableStyleSheetsForSet()",
        "type": "Document"
    },
    "document.styleSheetSets": {
        "descr": "The styleSheetSets read-only property returns a live list of all of the currently-available style sheet sets.",
        "name": "document.styleSheetSets",
        "params": [],
        "path": "dom/document/stylesheetsets",
        "syntax": "sets = document.styleSheetSets  On return, sets is a list of style sheet sets that are available. Example Given an <ul> (list) element with the ID \"sheetList\", you can populate it with the names of all the available style sheet sets with code like this:",
        "type": "Document"
    },
    "document.timeline": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "document.timeline",
        "params": [],
        "path": "dom/document/timeline",
        "syntax": "var pageTimeline = document.timeline; var thisMoment = pageTimeline.currentTime; Value A DocumentTimeline object. Specifications    Specification Status Comment   Web AnimationsThe definition of 'document.timeline' in that specification. Working Draft Editor's draft.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   No  No  No   No   Currently only supported in Firefox Nightly (version 48).    Yes  Yes  Yes       Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   No  No  No  No   No   Currently only supported in Firefox Nightly (version 48).    Yes  Yes  ?     See also",
        "type": "Document"
    },
    "document.title": {
        "descr": "The document.title property gets or sets the current title of the document.",
        "name": "document.title",
        "params": [],
        "path": "dom/document/title",
        "syntax": "var docTitle = document.title;  docTitle is a string containing the document's title. If the title was overridden by setting document.title, it contains that value. Otherwise, it contains the title specified in the markup (see the Notes below).",
        "type": "Document"
    },
    "document.visibilityState": {
        "descr": "The Document.visibilityState read-only property returns the visibility of the document, that is in which context this element is now visible. It is useful to know if the document is in the background or an invisible tab, or only loaded for pre-rendering. Possible values are:",
        "name": "document.visibilityState",
        "params": [
            {
                "descr": "The page content may be at least partially visible. ",
                "name": "'visible'"
            },
            {
                "descr": "The page content is not visible to the user. ",
                "name": "'hidden'"
            },
            {
                "descr": "The page content is being prerendered and is not visible to the user (considered hidden for purposes of document.hidden). ",
                "name": "'prerender'"
            }
        ],
        "path": "dom/document/visibilitystate",
        "syntax": "var string = document.visibilityState Examples document.addEventListener(\"visibilitychange\", function() { console.log( document.visibilityState );\n or  // Modify behavior... });",
        "type": "Document"
    },
    "document.width": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "document.width",
        "params": [],
        "path": "dom/document/width",
        "syntax": "pixels = document.width;  Example function init() { alert(\"The width of the document is \" + document.width + \" pixels.\");\n or  });",
        "type": "Document"
    },
    "document.write": {
        "descr": "The Document.write() method writes a string of text to a document stream opened by document.open().",
        "name": "document.write",
        "params": [
            {
                "descr": "A string containing the text to be written to the document.",
                "name": "markup"
            }
        ],
        "path": "dom/document/write",
        "syntax": "document.write(markup);",
        "type": "Document"
    },
    "document.writeln": {
        "descr": "Writes a string of text followed by a newline character to a document.",
        "name": "document.writeln",
        "params": [],
        "path": "dom/document/writeln",
        "syntax": "document.writeln(line);",
        "type": "Document"
    },
    "drawArraysInstancedANGLE": {
        "descr": "The ANGLE_instanced_arrays.drawArraysInstancedANGLE() method of the WebGL API renders primitives from array data like the gl.drawArrays() method. In addition, it can execute multiple instances of the range of elements.",
        "name": "drawArraysInstancedANGLE",
        "params": [
            {
                "descr": "A GLenum specifying the type primitive to render. ",
                "name": "mode"
            },
            {
                "descr": "A GLint specifying the starting index in the array of vector points.",
                "name": "first"
            },
            {
                "descr": "A GLsizei specifying the number of indices to be rendered.",
                "name": "count"
            },
            {
                "descr": "A GLsizei specifying the number of instances of the range of elements to execute.",
                "name": "primcount"
            }
        ],
        "path": "dom/angle_instanced_arrays/drawarraysinstancedangle",
        "syntax": "void ext.drawArraysInstancedANGLE(mode, first, count, primcount);",
        "type": "WebGL"
    },
    "drawElementsInstancedANGLE": {
        "descr": "The ANGLE_instanced_arrays.drawElementsInstancedANGLE() method of the WebGL API renders primitives from array data like the gl.drawElements() method. In addition, it can execute multiple instances of a set of elements.",
        "name": "drawElementsInstancedANGLE",
        "params": [
            {
                "descr": "A GLenum specifying the type primitive to render. ",
                "name": "mode"
            },
            {
                "descr": "A GLsizei specifying the number of elements to be rendered.",
                "name": "count"
            },
            {
                "descr": "A GLenum specifying the type of the values in the element array buffer. ",
                "name": "type"
            },
            {
                "descr": "A GLintptr specifying an offset in the element array buffer. ",
                "name": "offset"
            },
            {
                "descr": "A GLsizei specifying the number of instances of the set of elements to execute.",
                "name": "primcount"
            }
        ],
        "path": "dom/angle_instanced_arrays/drawelementsinstancedangle",
        "syntax": "void ext.drawElementsInstancedANGLE(mode, count, type, offset, primcount);",
        "type": "WebGL"
    },
    "each": {
        "descr": "The .each() method is designed to make DOM looping constructs concise and less error-prone. When called it iterates over the DOM elements that are part of the jQuery object. Each time the callback runs, it is passed the current loop iteration, beginning from 0. More importantly, the callback is fired in the context of the current DOM element, so the keyword this refers to the element.",
        "name": "each",
        "params": [
            {
                "descr": "Type: Function( Integer index, Element element ) A function to execute for each matched element.",
                "name": "function"
            }
        ],
        "path": "jquery/each",
        "syntax": ".each( function ) Returns: jQuery",
        "type": "Traversing"
    },
    "element.animate": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "element.animate",
        "params": [
            {
                "descr": "Either an array of keyframe objects, or a keyframe object whose property are arrays of values to iterate over. ",
                "name": "keyframes"
            },
            {
                "descr": "Either an integer representing the animation's duration (in milliseconds), or an Object containing one or more timing properties:",
                "name": "options"
            },
            {
                "descr": "A property unique to animate(): a DOMString with which to reference the animation.",
                "name": "id Optional"
            },
            {
                "descr": "The number of milliseconds to delay the start of the animation. ",
                "name": "delay Optional"
            },
            {
                "descr": "Whether the animation runs forwards (normal), backwards (reverse), switches direction after each iteration (alternate), or runs backwards and switches direction after each iteration (alternate-reverse). Defaults to \"normal\".",
                "name": "direction Optional"
            },
            {
                "descr": "The number of milliseconds each iteration of the animation takes to complete. ",
                "name": "duration Optional"
            },
            {
                "descr": "The rate of the animation's change over time. ",
                "name": "easing Optional"
            },
            {
                "descr": "The number of milliseconds to delay after the end of an animation. ",
                "name": "endDelay Optional"
            },
            {
                "descr": "Dictates whether the animation's effects should be reflected by the element(s) prior to playing (\"backwards\"), retained after the animation has completed playing (\"forwards\"), or both. ",
                "name": "fill Optional"
            },
            {
                "descr": "Describes at what point in the iteration the animation should start. ",
                "name": "iterationStart Optional"
            },
            {
                "descr": "The number of times the animation should repeat. ",
                "name": "iterations Optional"
            },
            {
                "descr": "Determines how values are combined between this animation and other, separate animations that do not specify their own specific composite operation. ",
                "name": "composite Optional"
            },
            {
                "descr": "Determines how values build from iteration to iteration in this animation. ",
                "name": "iterationComposite Optional"
            },
            {
                "descr": "Determines how keyframes without temporal offsets should be distributed during the animation's duration. ",
                "name": "spacing Optional"
            }
        ],
        "path": "dom/element/animate",
        "syntax": "var animation = element.animate(keyframes, options);",
        "type": "Element"
    },
    "element.attachShadow": {
        "descr": "The Element.attachShadow() method attaches a shadow DOM tree to the specified element and returns a reference to its ShadowRoot.",
        "name": "element.attachShadow",
        "params": [
            {
                "descr": "A ShadowRootInit dictionary, which can contain the following field:",
                "name": "shadowRootInit"
            }
        ],
        "path": "dom/element/attachshadow",
        "syntax": "<section> <span>  Syntax var shadowroot = element.attachShadow(shadowRootInit);",
        "type": "Element"
    },
    "element.attributes": {
        "descr": "The Element.attributes property returns a live collection of all attribute nodes registered to the specified node. It is a NamedNodeMap, not an Array, so it has no Array methods and the Attr nodes' indexes may differ among browsers. To be more specific, attributes is a key/value pair of strings that represents any information regarding that attribute.",
        "name": "element.attributes",
        "params": [],
        "path": "dom/element/attributes",
        "syntax": "var attr = element.attributes;  Example Basic examples // Get the first <p> element in the document var para = document.getElementsByTagName(\"p\")[0]; var atts = para.attributes;",
        "type": "Element"
    },
    "element.classList": {
        "descr": "The Element.classList is a read-only property that returns a live DOMTokenList collection of the class attributes of the element.",
        "name": "element.classList",
        "params": [
            {
                "descr": "Adds the specified class values. ",
                "name": "add( String [, String [, ...]] )"
            },
            {
                "descr": "Removes the specified class values.",
                "name": "remove( String [, String [, ...]] )"
            },
            {
                "descr": "Returns the class value by index in the collection.",
                "name": "item( Number )"
            },
            {
                "descr": "When only one argument is present: Toggle the class value; i.e., if the class exists then remove it and return false, if not, then add it and return true.",
                "name": "toggle( String [, force] )"
            },
            {
                "descr": "Checks if the specified class value exists in the element's class attribute.",
                "name": "contains( String )"
            },
            {
                "descr": "Replaces an existing class with a new class.",
                "name": "replace( oldClass, newClass )"
            }
        ],
        "path": "dom/element/classlist",
        "syntax": "const elementClasses = elementNodeReference.classList;  elementClasses is a DOMTokenList representing the class attribute of elementNodeReference. If the class attribute was not set or is empty elementClasses.length returns 0. element.classList itself is read-only, although you can modify it using the add()",
        "type": "Element"
    },
    "element.className": {
        "descr": "className gets and sets the value of the class attribute of the specified element.",
        "name": "element.className",
        "params": [],
        "path": "dom/element/classname",
        "syntax": "var cName = elementNodeReference.className; elementNodeReference.className = cName;   cName is a string variable representing the class or space-separated classes of the current element.  Example let el = document.getElementById('item');\n or  if (el.className === 'active'){ el.className = 'inactive'; } else { el.className = 'active'; });",
        "type": "Element"
    },
    "element.clientHeight": {
        "descr": "The Element.clientHeight read-only property is zero for elements with no CSS or inline layout boxes; otherwise, it's the inner height of an element in pixels. It includes padding but excludes borders, margins, and horizontal scrollbars (if present).",
        "name": "element.clientHeight",
        "params": [],
        "path": "dom/element/clientheight",
        "syntax": "var intElemClientHeight = element.clientHeight; intElemClientHeight is an integer corresponding to the clientHeight of element in pixels. The clientHeight property is read–only. Example  Specification    Specification Status Comment     CSS Object Model (CSSOM) View ModuleThe definition of 'clientHeight' in that specification. Working Draft      Notes clientHeight",
        "type": "Element"
    },
    "element.clientLeft": {
        "descr": "The width of the left border of an element in pixels. It includes the width of the vertical scrollbar if the text direction of the element is right–to–left and if there is an overflow causing a left vertical scrollbar to be rendered. clientLeft does not include the left margin or the left padding. clientLeft is read-only.",
        "name": "element.clientLeft",
        "params": [],
        "path": "dom/element/clientleft",
        "syntax": "var left = element.clientLeft;  Example padding-top Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. padding-bottom Left Top Right Bottom margin-top margin-bottom border-top border-bottom Specifications    Specification Status Comment   CSS Object Model (CSSOM) View ModuleThe definition of 'clientLeft' in that specification. Working Draft      Browser compatibilityUpdate compatibility data on GitHub",
        "type": "Element"
    },
    "element.clientTop": {
        "descr": "The width of the top border of an element in pixels. It is a read-only, integer property of element.",
        "name": "element.clientTop",
        "params": [],
        "path": "dom/element/clienttop",
        "syntax": "var top = element.clientTop;  Example In the following illustration, the client area is show in white. (The segments labeled \"Top\", \"Right\", etc. have no significance regarding the client area.) The clientTop value is the distance from where the margin (yellow) area ends and the padding and content areas (white) begin.",
        "type": "Element"
    },
    "element.clientWidth": {
        "descr": "The Element.clientWidth property is zero for elements with no CSS or inline layout boxes; otherwise it's the inner width of an element in pixels. It includes padding but excludes borders, margins, and vertical scrollbars (if present).",
        "name": "element.clientWidth",
        "params": [],
        "path": "dom/element/clientwidth",
        "syntax": "var intElemClientWidth = element.clientWidth; intElemClientWidth is an integer corresponding to the clientWidth of element in pixels. The clientWidth property is read–only. Example  Specification    Specification Status Comment   CSS Object Model (CSSOM) View ModuleThe definition of 'clientWidth' in that specification. Working Draft      Notes clientWidth",
        "type": "Element"
    },
    "element.closest": {
        "descr": "For browsers that do not support Element.closest(), but carry support for element.matches() (or a prefixed equivalent, meaning IE9+), a polyfill exists:",
        "name": "element.closest",
        "params": [],
        "path": "dom/element/closest",
        "syntax": "var elt = element.closest(selectors);",
        "type": "Element"
    },
    "element.computedStyleMap": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "element.computedStyleMap",
        "params": [],
        "path": "dom/element/computedstylemap",
        "syntax": "var stylePropertyMapReadOnly = Element.computedStyleMap()",
        "type": "Element"
    },
    "element.getAttribute": {
        "descr": "getAttribute() returns the value of a specified attribute on the element. If the given attribute does not exist, the value returned will either be null or \"\" (the empty string); see Notes for details.",
        "name": "element.getAttribute",
        "params": [],
        "path": "dom/element/getattribute",
        "syntax": "var attribute = element.getAttribute(attributeName);",
        "type": "Element"
    },
    "element.getAttributeNames": {
        "descr": "Element.getAttributeNames() returns the attribute names of the element as an Array of strings. If the element has no attributes it returns an empty array.",
        "name": "element.getAttributeNames",
        "params": [],
        "path": "dom/element/getattributenames",
        "syntax": "let attributeNames = element.getAttributeNames();",
        "type": "Element"
    },
    "element.getAttributeNode": {
        "descr": "Returns the specified attribute of the specified element, as an Attr node.",
        "name": "element.getAttributeNode",
        "params": [],
        "path": "dom/element/getattributenode",
        "syntax": "var attrNode = element.getAttributeNode(attrName);",
        "type": "Element"
    },
    "element.getBoundingClientRect": {
        "descr": "The Element.getBoundingClientRect() method returns the size of an element and its position relative to the viewport.",
        "name": "element.getBoundingClientRect",
        "params": [],
        "path": "dom/element/getboundingclientrect",
        "syntax": "var domRect = element.getBoundingClientRect();",
        "type": "Element"
    },
    "element.getClientRects": {
        "descr": "The Element.getClientRects() method returns a collection of DOMRect objects that indicate the bounding rectangles for each CSS border box in a client.",
        "name": "element.getClientRects",
        "params": [],
        "path": "dom/element/getclientrects",
        "syntax": "var rectCollection = object.getClientRects();",
        "type": "Element"
    },
    "element.getElementsByClassName": {
        "descr": "The Element method getElementsByClassName() returns a live HTMLCollection which contains every descendant element which has the specified class name or names.",
        "name": "element.getElementsByClassName",
        "params": [
            {
                "descr": "A DOMString containing one or more class names to match on, separated by whitespace.",
                "name": "names"
            }
        ],
        "path": "dom/element/getelementsbyclassname",
        "syntax": "var elements = element.getElementsByClassName(names);",
        "type": "Element"
    },
    "element.getElementsByTagName": {
        "descr": "The Element.getElementsByTagName() method returns a live HTMLCollection of elements with the given tag name. All descendants of the specified element are searched, but not the element itself. The returned list is live, which means it updates itself with the DOM tree automatically. Therefore, there is no need to call Element.getElementsByTagName() with the same element and arguments repeatedly if the DOM changes in between calls.",
        "name": "element.getElementsByTagName",
        "params": [],
        "path": "dom/element/getelementsbytagname",
        "syntax": "elements = element.getElementsByTagName(tagName)",
        "type": "Element"
    },
    "element.hasAttribute": {
        "descr": "The Element.hasAttribute() method returns a Boolean value indicating whether the specified element has the specified attribute or not.",
        "name": "element.hasAttribute",
        "params": [
            {
                "descr": "holds the return value true or false.",
                "name": "result"
            },
            {
                "descr": "is a string representing the name of the attribute.",
                "name": "name"
            }
        ],
        "path": "dom/element/hasattribute",
        "syntax": "var result = element.hasAttribute(name);",
        "type": "Element"
    },
    "element.hasAttributes": {
        "descr": "The Element.hasAttributes() method returns Boolean value, indicating if the current element has any attributes or not.",
        "name": "element.hasAttributes",
        "params": [
            {
                "descr": "holds the return value true or false.",
                "name": "result"
            }
        ],
        "path": "dom/element/hasattributes",
        "syntax": "var result = element.hasAttributes();",
        "type": "Element"
    },
    "element.hasPointerCapture": {
        "descr": "The hasPointerCapture() method of the Element interface indicates whether the element on which it is invoked has pointer capture for the pointer identified by the given pointer ID.",
        "name": "element.hasPointerCapture",
        "params": [
            {
                "descr": "The identifier for a pointer event.",
                "name": "pointerId"
            }
        ],
        "path": "dom/element/haspointercapture",
        "syntax": "targetElement.hasPointerCapture(pointerId);",
        "type": "Element"
    },
    "element.id": {
        "descr": "The Element.id property represents the element's identifier, reflecting the id global attribute.",
        "name": "element.id",
        "params": [],
        "path": "dom/element/id",
        "syntax": "var idStr = elt.id; // Get the id. elt.id = idStr; // Set the id    idStr is the identifier of the element.  Specifications    Specification Status Comment     DOMThe definition of 'id' in that specification. Living Standard No change from Document Object Model (DOM) Level 2 HTML Specification.   Document Object Model (DOM) Level 2 HTML SpecificationThe definition of 'id' in that specification. Obsolete No change from Document Object Model (DOM) Level 1 Specification.   Document Object Model (DOM) Level 1 SpecificationThe definition of 'id' in that specification. Obsolete Initial definition.    Browser compatibilityUpdate compatibility data on GitHub",
        "type": "Element"
    },
    "element.innerHTML": {
        "descr": "The Element property innerHTML gets or sets the HTML or XML markup contained within the element.",
        "name": "element.innerHTML",
        "params": [
            {
                "descr": "An attempt was made to set the value of innerHTML using a string which is not properly-formed HTML.",
                "name": "SyntaxError"
            },
            {
                "descr": "An attempt was made to insert the HTML into a node whose parent is a Document.",
                "name": "NoModificationAllowedError"
            }
        ],
        "path": "dom/element/innerhtml",
        "syntax": "const content = element.innerHTML; element.innerHTML = htmlString;  Value A DOMString containing the HTML serialization of the element's descendants. Setting the value of innerHTML removes all of the element's descendants and replaces them with nodes constructed by parsing the HTML given in the string htmlString. Exceptions  SyntaxError An attempt was made to set the value of innerHTML using a string which is not properly-formed HTML. NoModificationAllowedError An attempt was made to insert the HTML into a node whose parent is a Document.  Usage notes The innerHTML property can be used to examine the current HTML source of the page, including any changes that have been made since the page was initially loaded. Reading the HTML contents of an element Reading innerHTML causes the user agent to serialize the HTML or XML fragment comprised of the elment's descendants. The resulting string is returned. let contents = myElement.innerHTML; This lets you look at the HTML markup of the element's content nodes.  Note: The returned HTML or XML fragment is generated based on the current contents of the element, so the markup and formatting of the returned fragment is likely not to match the original page markup.  Replacing the contents of an element Setting the value of innerHTML lets you easily replace the existing contents of an element with new content. For example, you can erase the entire contents of a document by clearing the contents of the document's body attribute: document.body.innerHTML = \"\"; This example fetches the document's current HTML markup and replaces the \"<\" characters with the HTML entity \"&lt;\", thereby essentially converting the HTML into raw text. This is then wrapped in a <pre> element. Then the value of innerHTML is changed to this new string. As a result, the document contents are replaced with a display of the page's entire source code. document.documentElement.innerHTML = \"<pre>\" + document.documentElement.innerHTML.replace(/</g,\"&lt;\") + \"</pre>\";",
        "type": "Element"
    },
    "element.insertAdjacentElement": {
        "descr": "The insertAdjacentElement() method inserts a given element node at a given position relative to the element it is invoked upon.",
        "name": "element.insertAdjacentElement",
        "params": [
            {
                "descr": "A DOMString representing the position relative to the targetElement; must match (case-insensitively) one of the following strings:   'beforebegin': Before the targetElement itself. ",
                "name": "position"
            },
            {
                "descr": "The element to be inserted into the tree.",
                "name": "element"
            }
        ],
        "path": "dom/element/insertadjacentelement",
        "syntax": "targetElement.insertAdjacentElement(position, element);",
        "type": "Element"
    },
    "element.insertAdjacentHTML": {
        "descr": "The insertAdjacentHTML() method parses the specified text as HTML or XML and inserts the resulting nodes into the DOM tree at a specified position. It does not reparse the element it is being used on, and thus it does not corrupt the existing elements inside that element. This avoids the extra step of serialization, making it much faster than direct innerHTML manipulation.",
        "name": "element.insertAdjacentHTML",
        "params": [
            {
                "descr": "A DOMString representing the position relative to the element; must be one of the following strings:   'beforebegin': Before the element itself. ",
                "name": "position"
            },
            {
                "descr": "text is the string to be parsed as HTML or XML and inserted into the tree.",
                "name": "text"
            }
        ],
        "path": "dom/element/insertadjacenthtml",
        "syntax": "element.insertAdjacentHTML(position, text);",
        "type": "Element"
    },
    "element.insertAdjacentText": {
        "descr": "The insertAdjacentText() method inserts a given text node at a given position relative to the element it is invoked upon.",
        "name": "element.insertAdjacentText",
        "params": [
            {
                "descr": "A DOMString representing the position relative to the element; must be one of the following strings:   'beforebegin': Before the element itself. ",
                "name": "position"
            },
            {
                "descr": "A DOMString representing the text to be inserted into the tree.",
                "name": "element"
            }
        ],
        "path": "dom/element/insertadjacenttext",
        "syntax": "element.insertAdjacentText(position, element);",
        "type": "Element"
    },
    "element.localName": {
        "descr": "The Element.localName read-only property returns the local part of the qualified name of an element.",
        "name": "element.localName",
        "params": [],
        "path": "dom/element/localname",
        "syntax": "name = element.localName  Return value A DOMString representing the local part of the element's qualified name. Example (Must be served with XML content type, such as text/xml or application/xhtml+xml.)",
        "type": "Element"
    },
    "element.matches": {
        "descr": "The Element.matches() method returns true if the element would be selected by the specified selector string; otherwise, returns false.",
        "name": "element.matches",
        "params": [
            {
                "descr": "The specified selector string is invalid.",
                "name": "SYNTAX_ERR"
            }
        ],
        "path": "dom/element/matches",
        "syntax": "var result = element.matches(selectorString);",
        "type": "Element"
    },
    "element.name": {
        "descr": "name gets or sets the name property of an element in the DOM. It only applies to the following elements: <a>, <applet>, <button>, <form>, <frame>, <iframe>, <img>, <input>, <map>, <meta>, <object>, <param>, <select>, and <textarea>.",
        "name": "element.name",
        "params": [],
        "path": "dom/element/name",
        "syntax": "HTMLElement.name = string; var elName = HTMLElement.name; var fControl = HTMLFormElement.elementName; var controlCollection = HTMLFormElement.elements.elementName;  Example <form action=\"\" name=\"formA\"> <input type=\"text\" value=\"foo\"> </form> <script type=\"text/javascript\"> // Get a reference to the first element in the form var formElement = document.forms['formA'].elements[0]; // Give it a name formElement.name = 'inputA'; // Show the value of the input alert(document.forms['formA'].elements['inputA'].value);\n or  </script>);",
        "type": "Element"
    },
    "element.namespaceURI": {
        "descr": "The Element.namespaceURI read-only property returns the namespace URI of the element, or null if the element is not in a namespace.",
        "name": "element.namespaceURI",
        "params": [],
        "path": "dom/element/namespaceuri",
        "syntax": "namespace = element.namespaceURI Example In this snippet, an element is being examined for its localName and its namespaceURI. If the namespaceURI returns the XUL namespace and the localName returns \"browser\", then the node is understood to be a XUL <browser/>. if (element.localName == \"browser\" && element.namespaceURI == \"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\") { // this is a XUL browser }",
        "type": "Element"
    },
    "element.onfullscreenchange": {
        "descr": "The Element interface's onfullscreenchangeproperty is an event handler for the fullscreenchange event that is fired when the element has transitioned into or out of full-screen mode.",
        "name": "element.onfullscreenchange",
        "params": [],
        "path": "dom/element/onfullscreenchange",
        "syntax": "targetDocument.onfullscreenchange = fullscreenChangeHandler;  Value An event handler for the fullscreenchange event, indicating that the element has changed in or out of full-screen mode. Example This example establishes a fullscreenchange event handler, handleFullscreenChange()",
        "type": "Element"
    },
    "element.onfullscreenerror": {
        "descr": "The Element interface's onfullscreenerror property is an event handler for the fullscreenerror event which is sent to the element when an error occurs while attempting to transition into or out of full-screen mode.",
        "name": "element.onfullscreenerror",
        "params": [],
        "path": "dom/element/onfullscreenerror",
        "syntax": "targetElement.onfullscreenerror = fullscreenErrorHandler;  Value An error handler for the fullscreenerror event. Example This example attempts to switch into full-screen mode from outside a handler for a user-initiated event (such as a click or keypress event). SInce full-screen mode changes are only permitted in response to a user input, this causes an error to occur, which triggers the delivery of the fullscreenerror",
        "type": "Element"
    },
    "element.openOrClosedShadowRoot": {
        "descr": "Draft This page is not complete.",
        "name": "element.openOrClosedShadowRoot",
        "params": [],
        "path": "dom/element/openorclosedshadowroot",
        "syntax": "var shadowroot = element.shadowRoot;  Value A ShadowRoot object instance, regardless if its mode is set to open or closed, or null if no shadow root is present. (See Element.attachShadow()",
        "type": "Element"
    },
    "element.outerHTML": {
        "descr": "The outerHTML attribute of the Element DOM interface gets the serialized HTML fragment describing the element including its descendants. It can also be set to replace the element with nodes parsed from the given string.",
        "name": "element.outerHTML",
        "params": [
            {
                "descr": "An attempt was made to set outerHTML using an HTML string which is not valid.",
                "name": "SyntaxError"
            },
            {
                "descr": "An attempt was made to set outerHTML on an element which is a direct child of a Document, such as Document.documentElement.",
                "name": "NoModificationAllowedError"
            }
        ],
        "path": "dom/element/outerhtml",
        "syntax": "var content = element.outerHTML; element.outerHTML = htmlString;  Value Reading the value of outerHTML returns a DOMString containing an HTML serialization of the element and its descendants. Setting the value of outerHTML replaces the element and all of its descendants with a new DOM tree constructed by parsing the specified htmlString. Exceptions  SyntaxError An attempt was made to set outerHTML using an HTML string which is not valid. NoModificationAllowedError An attempt was made to set outerHTML on an element which is a direct child of a Document, such as Document.documentElement.  Examples Getting the value of an element's outerHTML property: // HTML: // <div id=\"d\"><p>Content</p><p>Further Elaborated</p></div> d = document.getElementById(\"d\");\n or  console.log(d.outerHTML);\n or  // the string '<div id=\"d\"><p>Content</p><p>Further Elaborated</p></div>' // is written to the console window);",
        "type": "Element"
    },
    "element.prefix": {
        "descr": "The Element.prefix read-only property returns the namespace prefix of the specified element, or null if no prefix is specified.",
        "name": "element.prefix",
        "params": [],
        "path": "dom/element/prefix",
        "syntax": "string = element.prefix  Examples The following logs \"x\" to the console. <x:div onclick=\"console.log(this.prefix)\"/>",
        "type": "Element"
    },
    "element.querySelector": {
        "descr": "Returns the first element that is a descendant of the element on which it is invoked that matches the specified group of selectors.",
        "name": "element.querySelector",
        "params": [
            {
                "descr": "A group of selectors to match the descendant elements of the Element baseElement against; this must be valid CSS syntax, or a SyntaxError exception will occur. ",
                "name": "selectors"
            },
            {
                "descr": "The specified selectors are invalid.",
                "name": "SyntaxError"
            }
        ],
        "path": "dom/element/queryselector",
        "syntax": "element = baseElement.querySelector(selectors);",
        "type": "Element"
    },
    "element.querySelectorAll": {
        "descr": "The Element method querySelectorAll() returns a static (not live) NodeList representing a list of elements matching the specified group of selectors which are descendants of the element on which the method was called.",
        "name": "element.querySelectorAll",
        "params": [
            {
                "descr": "A DOMString containing one or more selectors to match against. ",
                "name": "selectors"
            },
            {
                "descr": "The syntax of the specified selectors string is not valid.",
                "name": "SyntaxError"
            }
        ],
        "path": "dom/element/queryselectorall",
        "syntax": "elementList = parentNode.querySelectorAll(selectors);",
        "type": "Element"
    },
    "element.releasePointerCapture": {
        "descr": "Releases (stops) pointer capture that was previously set for a specific (PointerEvent) pointer.",
        "name": "element.releasePointerCapture",
        "params": [
            {
                "descr": "The identifier for a pointer event.",
                "name": "pointerId"
            }
        ],
        "path": "dom/element/releasepointercapture",
        "syntax": "targetElement.releasePointerCapture(pointerId);",
        "type": "Element"
    },
    "element.removeAttribute": {
        "descr": "The Element method removeAttribute() removes the attribute with the specified name from the element.",
        "name": "element.removeAttribute",
        "params": [
            {
                "descr": "A DOMString specifying the name of the attribute to remove from the element. ",
                "name": "attrName"
            }
        ],
        "path": "dom/element/removeattribute",
        "syntax": "element.removeAttribute(attrName);",
        "type": "Element"
    },
    "element.removeAttributeNode": {
        "descr": "removeAttributeNode removes the specified attribute from the current element.",
        "name": "element.removeAttributeNode",
        "params": [],
        "path": "dom/element/removeattributenode",
        "syntax": "removedAttr = element.removeAttributeNode(attributeNode)",
        "type": "Element"
    },
    "element.requestFullscreen": {
        "descr": "The Element.requestFullscreen() method issues an asynchronous request to make the element be displayed in full-screen mode.",
        "name": "element.requestFullscreen",
        "params": [
            {
                "descr": "A FullscreenOptions object providing options that control the behavior of the transition to full-screen mode. ",
                "name": "options Optional"
            },
            {
                "descr": "The TypeError exception may be delivered in any of the following situations:  The document containing the element isn't fully active; that is, it's not the current active document. ",
                "name": "TypeError"
            }
        ],
        "path": "dom/element/requestfullscreen",
        "syntax": "var Promise = Element.requestFullscreen(options);",
        "type": "Element"
    },
    "element.requestPointerLock": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "element.requestPointerLock",
        "params": [],
        "path": "dom/element/requestpointerlock",
        "syntax": "instanceOfElement.requestPointerLock();",
        "type": "Element"
    },
    "element.scroll": {
        "descr": "The scroll() method of the Element interface scrolls the element to a particular set of coordinates.",
        "name": "element.scroll",
        "params": [],
        "path": "dom/element/scroll",
        "syntax": "element.scroll(x-coord, y-coord) element.scroll(options)",
        "type": "Element"
    },
    "element.scrollBy": {
        "descr": "The scrollBy() method of the Element interface scrolls an element by the given amount.",
        "name": "element.scrollBy",
        "params": [],
        "path": "dom/element/scrollby",
        "syntax": "element.scrollBy(x-coord, y-coord);\n or  element.scrollBy(options));",
        "type": "Element"
    },
    "element.scrollHeight": {
        "descr": "The Element.scrollHeight read-only property is a measurement of the height of an element's content, including content not visible on the screen due to overflow.",
        "name": "element.scrollHeight",
        "params": [],
        "path": "dom/element/scrollheight",
        "syntax": "var intElemScrollHeight = element.scrollHeight; intElemScrollHeight is a variable storing an integer corresponding to the scrollHeight pixel value of the element. The scrollHeight property is read-only. Example padding-top Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. padding-bottom Left Top Right Bottom margin-top margin-bottom border-top border-bottom  Problems and solutions Determine if an element has been totally scrolled The following equivalence returns true if an element is at the end of its scroll, false if it isn't. element.scrollHeight - element.scrollTop === element.clientHeight  When the container does not scroll, but has overflowing children, these checks determine if the container can scroll: window.getComputedStyle(element).overflowY === 'visible' window.getComputedStyle(element).overflowY !== 'hidden'",
        "type": "Element"
    },
    "element.scrollIntoView": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "element.scrollIntoView",
        "params": [
            {
                "descr": "Is a Boolean value:  If true, the top of the element will be aligned to the top of the visible area of the scrollable ancestor. ",
                "name": "alignToTop Optional"
            },
            {
                "descr": "Is an Object with the following properties:",
                "name": "scrollIntoViewOptions Optional"
            },
            {
                "descr": "Defines the transition animation. ",
                "name": "behavior Optional"
            },
            {
                "descr": "Defines vertical alignment. One of \"start\", \"center\", \"end\", or \"nearest\". ",
                "name": "block Optional"
            },
            {
                "descr": "Defines horizontal alignment. One of \"start\", \"center\", \"end\", or \"nearest\". ",
                "name": "inline Optional"
            }
        ],
        "path": "dom/element/scrollintoview",
        "syntax": "element.scrollIntoView();\n or  element.scrollIntoView(alignToTop);\n or  // Boolean parameter element.scrollIntoView(scrollIntoViewOptions);\n or  // Object parameter);",
        "type": "Element"
    },
    "element.scrollLeft": {
        "descr": "The Element.scrollLeft property gets or sets the number of pixels that an element's content is scrolled to the left.",
        "name": "element.scrollLeft",
        "params": [],
        "path": "dom/element/scrollleft",
        "syntax": "// Get the number of pixels scrolled var sLeft = element.scrollLeft;  sLeft is an integer representing the number of pixels that element has been scrolled to the left. // Set the number of pixels scrolled element.scrollLeft = 10;  scrollLeft can be set to any integer value, however:  If the element can't be scrolled (e.g. it has no overflow), scrollLeft",
        "type": "Element"
    },
    "element.scrollTo": {
        "descr": "The scrollTo() method of the Element interface scrolls to a particular set of coordinates inside a given element.",
        "name": "element.scrollTo",
        "params": [],
        "path": "dom/element/scrollto",
        "syntax": "element.scrollTo(x-coord, y-coord) element.scrollTo(options)",
        "type": "Element"
    },
    "element.scrollTop": {
        "descr": "The Element.scrollTop property gets or sets the number of pixels that an element's content is scrolled vertically.",
        "name": "element.scrollTop",
        "params": [],
        "path": "dom/element/scrolltop",
        "syntax": "// Get the number of pixels scrolled. var intElemScrollTop = someElement.scrollTop;  After running this code, intElemScrollTop is an integer corresponding to the number of pixels that the element's content has been scrolled upwards. // Set the number of pixels scrolled. element.scrollTop = intValue;  scrollTop can be set to any integer value, with certain caveats:  If the element can't be scrolled (e.g. it has no overflow or if the element has a property of \"non-scrollable\"), scrollTop",
        "type": "Element"
    },
    "element.scrollWidth": {
        "descr": "The Element.scrollWidth read-only property is a measurement of the width of an element's content, including content not visible on the screen due to overflow.",
        "name": "element.scrollWidth",
        "params": [],
        "path": "dom/element/scrollwidth",
        "syntax": "var xScrollWidth = element.scrollWidth; xScrollWidth is the width of the content of element in pixels. Example <!DOCTYPE html> <html> <head> <title>Example</title> <style> div { overflow: hidden; white-space: nowrap; text-overflow: ellipsis; } #aDiv { width: 100px; } button { margin-bottom: 2em; } </style> </head> <body> <div id=\"aDiv\"> FooBar-FooBar-FooBar-FooBar </div> <button id=\"aButton\"> Check for overflow </button> <div id=\"anotherDiv\"> FooBar-FooBar-FooBar-FooBar </div> <button id=\"anotherButton\"> Check for overflow </button> </body> <script> var buttonOne = document.getElementById('aButton'), buttonTwo = document.getElementById('anotherButton'), divOne = document.getElementById('aDiv'), divTwo = document.getElementById('anotherDiv');\n or  //check to determine if an overflow is happening function isOverflowing(element) { return (element.scrollWidth > element.offsetWidth);\n or  } function alertOverflow(element) { if (isOverflowing(element)) { alert('Contents are overflowing the container.');\n or  } else { alert('No overflows!');\n or  } } buttonOne.addEventListener('click', function() { alertOverflow(divOne);\n or  });\n or  buttonTwo.addEventListener('click', function() { alertOverflow(divTwo);\n or  });\n or  </script> </html>);",
        "type": "Element"
    },
    "element.setAttribute": {
        "descr": "Sets the value of an attribute on the specified element. If the attribute already exists, the value is updated; otherwise a new attribute is added with the specified name and value.",
        "name": "element.setAttribute",
        "params": [
            {
                "descr": "A DOMString specifying the name of the attribute whose value is to be set. ",
                "name": "name"
            },
            {
                "descr": "A DOMString containing the value to assign to the attribute. ",
                "name": "value"
            },
            {
                "descr": "The specified attribute name contains one or more characters which are not valid in attribute names.",
                "name": "InvalidCharacterError"
            }
        ],
        "path": "dom/element/setattribute",
        "syntax": "Element.setAttribute(name, value);",
        "type": "Element"
    },
    "element.setAttributeNode": {
        "descr": "setAttributeNode() adds a new Attr node to the specified element.",
        "name": "element.setAttributeNode",
        "params": [],
        "path": "dom/element/setattributenode",
        "syntax": "var replacedAttr = element.setAttributeNode(attribute);",
        "type": "Element"
    },
    "element.setCapture": {
        "descr": "Call this method during the handling of a mousedown event to retarget all mouse events to this element until the mouse button is released or document.releaseCapture() is called.",
        "name": "element.setCapture",
        "params": [
            {
                "descr": "If true, all events are targeted directly to this element; if false, events can also fire at descendants of this element.",
                "name": "retargetToElement"
            }
        ],
        "path": "dom/element/setcapture",
        "syntax": "element.setCapture(retargetToElement);",
        "type": "Element"
    },
    "element.setPointerCapture": {
        "descr": "Pointer capture allows events for a particular pointer event (PointerEvent) to be re-targeted to a particular element instead of the normal target (or hit test) at a pointer's location. This can be used to ensure that an element continues to receive pointer events even if the pointer device's contact moves off the element (for example by scrolling).",
        "name": "element.setPointerCapture",
        "params": [
            {
                "descr": "The identifier for a pointer event.",
                "name": "pointerId"
            }
        ],
        "path": "dom/element/setpointercapture",
        "syntax": "targetElement.setPointerCapture(pointerId);",
        "type": "Element"
    },
    "element.shadowRoot": {
        "descr": "The Element.shadowRoot read-only property represents the shadow root hosted by the element. Use Element.attachShadow() to add a shadow root to an existing element.",
        "name": "element.shadowRoot",
        "params": [],
        "path": "dom/element/shadowroot",
        "syntax": "var shadowroot = element.shadowRoot;  Value A ShadowRoot object instance, or null if the associated shadow root was attached with its mode set to closed. (See Element.attachShadow()",
        "type": "Element"
    },
    "element.slot": {
        "descr": "The slot property of the Element interface returns the name of the shadow DOM slot the element is inserted in.",
        "name": "element.slot",
        "params": [],
        "path": "dom/element/slot",
        "syntax": "var aString = element.slot element.slot = aString  Value A DOMString. Examples In our simple-template example (see it live), we create a trivial custom element example called <my-paragraph>",
        "type": "Element"
    },
    "element.tagName": {
        "descr": "Returns the tag name of the element on which it's called. For example, if the element is an <img>, its tagName property is \"IMG\" (for HTML documents; it may be cased differently for XML/XHTML documents).",
        "name": "element.tagName",
        "params": [],
        "path": "dom/element/tagname",
        "syntax": "elementName = Element.tagName;  Value A string indicating the element's tag name. This string's capitalization depends on the document type:  For DOM trees which represent HTML documents, the returned tag name is always in the canonical upper-case form. For example, tagName called on a <div> element returns \"DIV\". The tag names of elements in an XML DOM tree are returned in the same case in which they're written in the original XML file. If an XML document includes a tag \"<SomeTag>\", then the tagName property's value is \"SomeTag\".  For Element objects, the value of tagName is the same as the value of the nodeName property the element object inherits from Node. Example HTML <span id=\"born\">When I was born...</span>  JavaScript var span = document.getElementById(\"born\");\n or  console.log(span.tagName);",
        "type": "Element"
    },
    "element.toggleAttribute": {
        "descr": "Toggle a boolean attribute (removing it if it is present and adding it if it is not present) on the specified element.",
        "name": "element.toggleAttribute",
        "params": [
            {
                "descr": "A DOMString specifying the name of the attribute to be toggled. ",
                "name": "name"
            },
            {
                "descr": "A boolean value to determine whether the attribute should be added or removed, no matter whether the attribute is present or not at the moment.",
                "name": "force Optional"
            },
            {
                "descr": "The specified attribute name contains one or more characters which are not valid in attribute names.",
                "name": "InvalidCharacterError"
            }
        ],
        "path": "dom/element/toggleattribute",
        "syntax": "Element.toggleAttribute(name[, force]);",
        "type": "Element"
    },
    "empty": {
        "descr": "This method removes not only child (and other descendant) elements, but also any text within the set of matched elements. This is because, according to the DOM specification, any string of text within an element is considered a child node of that element. Consider the following HTML:",
        "name": "empty",
        "params": [],
        "path": "jquery/empty",
        "syntax": ".empty() Returns: jQuery",
        "type": "Manipulation"
    },
    "encodeURI": {
        "descr": "The encodeURI() function encodes a Uniform Resource Identifier (URI) by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two \"surrogate\" characters).",
        "name": "encodeURI",
        "params": [
            {
                "descr": "A complete Uniform Resource Identifier.",
                "name": "URI"
            }
        ],
        "path": "javascript/global_objects/encodeuri",
        "syntax": "encodeURI(URI)",
        "type": "Global Objects"
    },
    "encodeURIComponent": {
        "descr": "The encodeURIComponent() function encodes a Uniform Resource Identifier (URI) component by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two \"surrogate\" characters).",
        "name": "encodeURIComponent",
        "params": [
            {
                "descr": "String. A component of a URI.",
                "name": "str"
            }
        ],
        "path": "javascript/global_objects/encodeuricomponent",
        "syntax": "encodeURIComponent(str);",
        "type": "Global Objects"
    },
    "end": {
        "descr": "Most of jQuery's DOM traversal methods operate on a jQuery object instance and produce a new one, matching a different set of DOM elements. When this happens, it is as if the new set of elements is pushed onto a stack that is maintained inside the object. Each successive filtering method pushes a new element set onto the stack. If we need an older element set, we can use end() to pop the sets back off of the stack.",
        "name": "end",
        "params": [],
        "path": "jquery/end",
        "syntax": ".end() Returns: jQuery",
        "type": "Traversing"
    },
    "endsWith": {
        "descr": "The endsWith() method determines whether a string ends with the characters of a specified string, returning true or false as appropriate.",
        "name": "string.endsWith",
        "params": [
            {
                "descr": "The characters to be searched for at the end of this string.",
                "name": "searchString"
            },
            {
                "descr": "Optional. If provided it is used as the length of str. ",
                "name": "length"
            }
        ],
        "path": "javascript/global_objects/string/endswith",
        "syntax": "str.endsWith(searchString[, length])",
        "type": "String"
    },
    "entries": {
        "descr": "The Object.entries() method returns an array of a given object's own enumerable property [key, value] pairs, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well) . The order of the array returned by Object.entries() does not depend on how an object is defined. If there is a need for certain ordering then the array needs to be sorted first like Object.entries(obj).sort((a, b) => a[0] - b[0]);.",
        "name": "Object.entries",
        "params": [
            {
                "descr": "The object whose enumerable own property [key, value] pairs are to be returned.",
                "name": "obj"
            }
        ],
        "path": "javascript/global_objects/object/entries",
        "syntax": "Object.entries(obj)",
        "type": "Object"
    },
    "eq": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .eq() method constructs a new jQuery object from one element within that set. The supplied index identifies the position of this element in the set.",
        "name": "eq",
        "params": [
            {
                "descr": "Type: Integer  An integer indicating the 0-based position of the element.",
                "name": "index"
            },
            {
                "descr": "Type: Integer  An integer indicating the position of the element, counting backwards from the last element in the set.",
                "name": "indexFromEnd"
            }
        ],
        "path": "jquery/eq",
        "syntax": ".eq( index ) Returns: jQuery",
        "type": "Traversing"
    },
    "error": {
        "descr": "This method is a shortcut for .on( \"error\", handler ).",
        "name": "error",
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute when the event is triggered.",
                "name": "handler"
            },
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.",
                "name": "eventData"
            },
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            }
        ],
        "path": "jquery/error",
        "syntax": ".error( handler ) Returns: jQueryversion deprecated: 1.8, removed: 3.0",
        "type": "Events"
    },
    "error.toString": {
        "descr": "The toString() method returns a string representing the specified Error object.",
        "name": "error.toString",
        "params": [],
        "path": "javascript/global_objects/error/tostring",
        "syntax": "e.toString()",
        "type": "Errors"
    },
    "eval": {
        "descr": "The eval() function evaluates JavaScript code represented as a string.",
        "name": "eval",
        "params": [
            {
                "descr": "A string representing a JavaScript expression, statement, or sequence of statements. ",
                "name": "string"
            }
        ],
        "path": "javascript/global_objects/eval",
        "syntax": "eval(string)",
        "type": "Global Objects"
    },
    "event.currentTarget": {
        "descr": "This property will typically be equal to the this of the function.",
        "name": "event.currentTarget",
        "params": [],
        "path": "jquery/event.currenttarget",
        "syntax": "event.currentTargetReturns: Element   Description:  The current DOM element within the event bubbling phase.   version added: 1.3event.currentTarget  This property will typically be equal to the this of the function.  If you are using jQuery.proxy or another form of scope manipulation, this will be equal to whatever context you have provided, not event.currentTarget   Example:  Alert that currentTarget matches the `this` keyword. $( \"p\" ).click(function( event ) { alert( event.currentTarget === this );\n or  // true });",
        "type": "Events"
    },
    "event.data": {
        "descr": "Within a for loop, pass the value of i to the .on() method so that the current iteration's value is preserved.",
        "name": "event.data",
        "params": [],
        "path": "jquery/event.data",
        "syntax": "event.dataReturns: Object   Description: An optional object of data passed to an event method when the current executing handler is bound.   version added: 1.1event.data Example:  Within a for loop, pass the value of i to the .on()",
        "type": "Events"
    },
    "event.delegateTarget": {
        "descr": "This property is most often useful in delegated events attached by .delegate() or .on(), where the event handler is attached at an ancestor of the element being processed. It can be used, for example, to identify and remove event handlers at the delegation point.",
        "name": "event.delegateTarget",
        "params": [],
        "path": "jquery/event.delegatetarget",
        "syntax": "event.delegateTargetReturns: Element   Description: The element where the currently-called jQuery event handler was attached.  version added: 1.7event.delegateTarget  This property is most often useful in delegated events attached by .delegate()",
        "type": "Events"
    },
    "event.isDefaultPrevented": {
        "descr": "Checks whether event.preventDefault() was called.",
        "name": "event.isDefaultPrevented",
        "params": [],
        "path": "jquery/event.isdefaultprevented",
        "syntax": "event.isDefaultPrevented() Returns: Boolean",
        "type": "Events"
    },
    "event.isImmediatePropagationStopped": {
        "descr": "This property was introduced in DOM level 3.",
        "name": "event.isImmediatePropagationStopped",
        "params": [],
        "path": "jquery/event.isimmediatepropagationstopped",
        "syntax": "event.isImmediatePropagationStopped() Returns: Boolean",
        "type": "Events"
    },
    "event.isPropagationStopped": {
        "descr": "This event method is described in the W3C DOM Level 3 specification.",
        "name": "event.isPropagationStopped",
        "params": [],
        "path": "jquery/event.ispropagationstopped",
        "syntax": "event.isPropagationStopped() Returns: Boolean",
        "type": "Events"
    },
    "event.metaKey": {
        "descr": "Returns a boolean value (true or false) that indicates whether or not the META key was pressed at the time the event fired. This key might map to an alternative key name on some platforms.",
        "name": "event.metaKey",
        "params": [],
        "path": "jquery/event.metakey",
        "syntax": "event.metaKeyReturns: Boolean   Description: Indicates whether the META key was pressed when the event fired.  version added: 1.0.4event.metaKey  Returns a boolean value (true or false) that indicates whether or not the META key was pressed at the time the event fired. This key might map to an alternative key name on some platforms.",
        "type": "Events"
    },
    "event.namespace": {
        "descr": "This will likely be used primarily by plugin authors who wish to handle tasks differently depending on the event namespace used.",
        "name": "event.namespace",
        "params": [],
        "path": "jquery/event.namespace",
        "syntax": "event.namespaceReturns: String   Description: The namespace specified when the event was triggered.  version added: 1.4.3event.namespace  This will likely be used primarily by plugin authors who wish to handle tasks differently depending on the event namespace used.  Example:  Determine the event namespace used. <!doctype html> <html lang=\"en\"> <head> <meta charset=\"utf-8\"> <title>event.namespace demo</title> <script src=\"https://code.jquery.com/jquery-1.10.2.js\"></script> </head> <body> <button>display event.namespace</button> <p></p> <script> $( \"p\" ).on( \"test.something\", function( event ) { alert( event.namespace );\n or  });\n or  $( \"button\" ).click(function( event ) { $( \"p\" ).trigger( \"test.something\" );\n or  });\n or  </script> </body> </html>);",
        "type": "Events"
    },
    "event.pageX": {
        "descr": "Show the mouse position relative to the left and top edges of the document (within this iframe).",
        "name": "event.pageX",
        "params": [],
        "path": "jquery/event.pagex",
        "syntax": "event.pageXReturns: Number   Description: The mouse position relative to the left edge of the document.  version added: 1.0.4event.pageX Example:  Show the mouse position relative to the left and top edges of the document (within this iframe).",
        "type": "Events"
    },
    "event.pageY": {
        "descr": "Show the mouse position relative to the left and top edges of the document (within this iframe).",
        "name": "event.pageY",
        "params": [],
        "path": "jquery/event.pagey",
        "syntax": "event.pageYReturns: Number   Description: The mouse position relative to the top edge of the document.  version added: 1.0.4event.pageY Example:  Show the mouse position relative to the left and top edges of the document (within this iframe).",
        "type": "Events"
    },
    "event.preventDefault": {
        "descr": "For example, clicked anchors will not take the browser to a new URL. We can use event.isDefaultPrevented() to determine if this method has been called by an event handler that was triggered by this event.",
        "name": "event.preventDefault",
        "params": [],
        "path": "jquery/event.preventdefault",
        "syntax": "event.preventDefault() Returns: undefined",
        "type": "Events"
    },
    "event.relatedTarget": {
        "descr": "For mouseout, indicates the element being entered; for mouseover, indicates the element being exited.",
        "name": "event.relatedTarget",
        "params": [],
        "path": "jquery/event.relatedtarget",
        "syntax": "event.relatedTargetReturns: Element   Description: The other DOM element involved in the event, if any.  version added: 1.1.4event.relatedTarget  For mouseout, indicates the element being entered; for mouseover, indicates the element being exited.   Example:  On mouseout of anchors, alert the element type being entered. $( \"a\" ).mouseout(function( event ) { alert( event.relatedTarget.nodeName );\n or  // \"DIV\" });",
        "type": "Events"
    },
    "event.result": {
        "descr": "This property can be useful for getting previous return values of custom events.",
        "name": "event.result",
        "params": [],
        "path": "jquery/event.result",
        "syntax": "event.resultReturns: Object   Description: The last value returned by an event handler that was triggered by this event, unless the value was undefined.  version added: 1.3event.result  This property can be useful for getting previous return values of custom events.   Example:  Display previous handler's return value <!doctype html> <html lang=\"en\"> <head> <meta charset=\"utf-8\"> <title>event.result demo</title> <script src=\"https://code.jquery.com/jquery-1.10.2.js\"></script> </head> <body> <button>display event.result</button> <p></p> <script> $( \"button\" ).click(function( event ) { return \"hey\"; });\n or  $( \"button\" ).click(function( event ) { $( \"p\" ).html( event.result );\n or  });\n or  </script> </body> </html>);",
        "type": "Events"
    },
    "event.stopImmediatePropagation": {
        "descr": "In addition to keeping any additional handlers on an element from being executed, this method also stops the bubbling by implicitly calling event.stopPropagation(). To simply prevent the event from bubbling to ancestor elements but allow other event handlers to execute on the same element, we can use event.stopPropagation() instead.",
        "name": "event.stopImmediatePropagation",
        "params": [],
        "path": "jquery/event.stopimmediatepropagation",
        "syntax": "event.stopImmediatePropagation() Returns: undefined",
        "type": "Events"
    },
    "event.stopPropagation": {
        "descr": "We can use event.isPropagationStopped() to determine if this method was ever called (on that event object).",
        "name": "event.stopPropagation",
        "params": [],
        "path": "jquery/event.stoppropagation",
        "syntax": "event.stopPropagation() Returns: undefined",
        "type": "Events"
    },
    "event.target": {
        "descr": "The target property can be the element that registered for the event or a descendant of it. It is often useful to compare event.target to this in order to determine if the event is being handled due to event bubbling. This property is very useful in event delegation, when events bubble.",
        "name": "event.target",
        "params": [],
        "path": "jquery/event.target",
        "syntax": "event.targetReturns: Element   Description:  The DOM element that initiated the event.   version added: 1.0event.target  The target property can be the element that registered for the event or a descendant of it. It is often useful to compare event.target to this in order to determine if the event is being handled due to event bubbling. This property is very useful in event delegation, when events bubble.  Examples:  Display the tag's name on click <!doctype html> <html lang=\"en\"> <head> <meta charset=\"utf-8\"> <title>event.target demo</title> <style> span, strong, p { padding: 8px; display: block; border: 1px solid #999; } </style> <script src=\"https://code.jquery.com/jquery-1.10.2.js\"></script> </head> <body> <div id=\"log\"></div> <div> <p> <strong><span>click</span></strong> </p> </div> <script> $( \"body\" ).click(function( event ) { $( \"#log\" ).html( \"clicked: \" + event.target.nodeName );\n or  });\n or  </script> </body> </html>);",
        "type": "Events"
    },
    "event.timeStamp": {
        "descr": "This property can be useful for profiling event performance by getting the event.timeStamp value at two points in the code and noting the difference. To simply determine the current time inside an event handler, use (new Date).getTime() instead.",
        "name": "event.timeStamp",
        "params": [],
        "path": "jquery/event.timestamp",
        "syntax": "event.timeStampReturns: Number   Description: The difference in milliseconds between the time the browser created the event and January 1, 1970.  version added: 1.2.6event.timeStamp  This property can be useful for profiling event performance by getting the event.timeStamp value at two points in the code and noting the difference. To simply determine the current time inside an event handler, use (new Date).getTime()",
        "type": "Events"
    },
    "event.type": {
        "descr": "On all anchor clicks, alert the event type.",
        "name": "event.type",
        "params": [],
        "path": "jquery/event.type",
        "syntax": "event.typeReturns: String   Description: Describes the nature of the event.  version added: 1.0event.type Example:  On all anchor clicks, alert the event type. $( \"a\" ).click(function( event ) { alert( event.type );\n or  // \"click\" });",
        "type": "Events"
    },
    "event.which": {
        "descr": "The event.which property normalizes event.keyCode and event.charCode. It is recommended to watch event.which for keyboard key input. For more detail, read about event.charCode on the MDN.",
        "name": "event.which",
        "params": [],
        "path": "jquery/event.which",
        "syntax": "event.whichReturns: Number   Description: For key or mouse events, this property indicates the specific key or button that was pressed.  version added: 1.1.3event.which  The event.which property normalizes event.keyCode and event.charCode. It is recommended to watch event.which for keyboard key input. For more detail, read about event.charCode on the MDN.  event.which also normalizes button presses (mousedown and mouseupevents), reporting 1",
        "type": "Events"
    },
    "every": {
        "descr": "The every() method tests whether all elements in the array pass the test implemented by the provided function.",
        "name": "array.every",
        "params": [
            {
                "descr": "Function to test for each element, taking three arguments:  element The current element being processed in the array.",
                "name": "callback"
            },
            {
                "descr": "The index of the current element being processed in the array.",
                "name": "indexOptional"
            },
            {
                "descr": "The array every was called upon.",
                "name": "arrayOptional"
            },
            {
                "descr": "Optional. Value to use as this when executing callback.",
                "name": "thisArgOptional"
            }
        ],
        "path": "javascript/global_objects/array/every",
        "syntax": "arr.every(callback(element[, index[, array]])[, thisArg])",
        "type": "Array"
    },
    "exec": {
        "descr": "The exec() method executes a search for a match in a specified string. Returns a result array, or null.",
        "name": "regExp.exec",
        "params": [
            {
                "descr": "The string against which to match the regular expression.",
                "name": "str"
            }
        ],
        "path": "javascript/global_objects/regexp/exec",
        "syntax": "regexObj.exec(str)",
        "type": "RegExp"
    },
    "export": {
        "descr": "The export statement is used when creating JavaScript modules to export functions, objects, or primitive values from the module so they can be used by other programs with the import statement.",
        "name": "export",
        "params": [
            {
                "descr": "Identifier to be exported (so that it can be imported via import in another script).",
                "name": "nameN"
            }
        ],
        "path": "javascript/statements/export",
        "syntax": "export { name1, name2, …, nameN }; export { variable1 as name1, variable2 as name2, …, nameN }; export let name1, name2, …, nameN; // also var, const export let name1 = …, name2 = …, …, nameN; // also var, const export function FunctionName(){...} export class ClassName {...} export default expression; export default function (…) { … } // also class, function* export default function name1(…) { … } // also class, function* export { name1 as default, … }; export * from …; export { name1, name2, …, nameN } from …; export { import1 as name1, import2 as name2, …, nameN } from …; export { default } from …;",
        "type": "Statements"
    },
    "ext.beginQueryEXT": {
        "descr": "The EXT_disjoint_timer_query.beginQueryEXT() method of the WebGL API starts a timer query.",
        "name": "ext.beginQueryEXT",
        "params": [
            {
                "descr": "A GLenum specifying the target of the time query. ",
                "name": "target"
            },
            {
                "descr": "A WebGLQuery object for which to start the time querying.",
                "name": "query"
            }
        ],
        "path": "dom/ext_disjoint_timer_query/beginqueryext",
        "syntax": "void ext.beginQueryEXT(target, query);",
        "type": "WebGL"
    },
    "ext.bindVertexArrayOES": {
        "descr": "The OES_vertex_array_object.bindVertexArrayOES() method of the WebGL API binds a passed WebGLVertexArrayObject object to the buffer.",
        "name": "ext.bindVertexArrayOES",
        "params": [
            {
                "descr": "A WebGLVertexArrayObject (VAO) object to bind.",
                "name": "arrayObject"
            }
        ],
        "path": "dom/oes_vertex_array_object/bindvertexarrayoes",
        "syntax": "void ext.bindVertexArrayOES(arrayObject);",
        "type": "WebGL"
    },
    "ext.createQueryEXT": {
        "descr": "The EXT_disjoint_timer_query.createQueryEXT() method of the WebGL API creates and initializes WebGLQuery objects, which track the time needed to fully complete a set of GL commands.",
        "name": "ext.createQueryEXT",
        "params": [],
        "path": "dom/ext_disjoint_timer_query/createqueryext",
        "syntax": "WebGLTimerQueryEXT ext.createQueryEXT();",
        "type": "WebGL"
    },
    "ext.createVertexArrayOES": {
        "descr": "The OES_vertex_array_object.createVertexArrayOES() method of the WebGL API creates and initializes a WebGLVertexArrayObject object that represents a vertex array object (VAO) pointing to vertex array data and which provides names for different sets of vertex data.",
        "name": "ext.createVertexArrayOES",
        "params": [],
        "path": "dom/oes_vertex_array_object/createvertexarrayoes",
        "syntax": "WebGLVertexArrayObjectOES ext.createVertexArrayOES();",
        "type": "WebGL"
    },
    "ext.deleteQueryEXT": {
        "descr": "The EXT_disjoint_timer_query.deleteQueryEXT() method of the WebGL API deletes a given WebGLQuery object.",
        "name": "ext.deleteQueryEXT",
        "params": [
            {
                "descr": "A WebGLQuery object to delete.",
                "name": "query"
            }
        ],
        "path": "dom/ext_disjoint_timer_query/deletequeryext",
        "syntax": "void ext.deleteQueryEXT(query);",
        "type": "WebGL"
    },
    "ext.deleteVertexArrayOES": {
        "descr": "The OES_vertex_array_object.deleteVertexArrayOES() method of the WebGL API deletes a given WebGLVertexArrayObject object.",
        "name": "ext.deleteVertexArrayOES",
        "params": [
            {
                "descr": "A WebGLVertexArrayObject (VAO) object to delete.",
                "name": "arrayObject"
            }
        ],
        "path": "dom/oes_vertex_array_object/deletevertexarrayoes",
        "syntax": "void ext.deleteVertexArrayOES(arrayObject);",
        "type": "WebGL"
    },
    "ext.drawBuffersWEBGL": {
        "descr": "The WEBGL_draw_buffers.drawBuffersWEBGL() method is part of the WebGL API and allows you to define the draw buffers to which all fragment colors are written.",
        "name": "ext.drawBuffersWEBGL",
        "params": [
            {
                "descr": "An Array of GLenum constants defining drawing buffers. ",
                "name": "buffers"
            }
        ],
        "path": "dom/webgl_draw_buffers/drawbufferswebgl",
        "syntax": "void gl.getExtension('WEBGL_draw_buffers').drawBuffersWEBGL(buffers);",
        "type": "WebGL"
    },
    "ext.endQueryEXT": {
        "descr": "The EXT_disjoint_timer_query.endQueryEXT() method of the WebGL API ends a timer query.",
        "name": "ext.endQueryEXT",
        "params": [
            {
                "descr": "A GLenum specifying the target of the time query. ",
                "name": "target"
            }
        ],
        "path": "dom/ext_disjoint_timer_query/endqueryext",
        "syntax": "void ext.endQueryEXT(target);",
        "type": "WebGL"
    },
    "ext.getQueryEXT": {
        "descr": "The EXT_disjoint_timer_query.getQueryEXT() method of the WebGL API returns information about a query target.",
        "name": "ext.getQueryEXT",
        "params": [
            {
                "descr": "A GLenum specifying the target of the time query. ",
                "name": "target"
            },
            {
                "descr": "A GLenum specifying which information to return. ",
                "name": "pname"
            }
        ],
        "path": "dom/ext_disjoint_timer_query/getqueryext",
        "syntax": "any ext.getQueryEXT(target, pname);",
        "type": "WebGL"
    },
    "ext.getQueryObjectEXT": {
        "descr": "The EXT_disjoint_timer_query.getQueryObjectEXT() method of the WebGL API returns the state of a query object.",
        "name": "ext.getQueryObjectEXT",
        "params": [
            {
                "descr": "A WebGLQuery object from which to return information.",
                "name": "query"
            },
            {
                "descr": "A GLenum specifying which information to return. ",
                "name": "pname"
            }
        ],
        "path": "dom/ext_disjoint_timer_query/getqueryobjectext",
        "syntax": "any ext.getQueryObjectEXT(query, pname);",
        "type": "WebGL"
    },
    "ext.getSupportedProfiles": {
        "descr": "The WEBGL_compressed_texture_astc.getSupportedProfiles() method returns an array of strings containing the names of the ASTC profiles supported by the implementation.",
        "name": "ext.getSupportedProfiles",
        "params": [],
        "path": "dom/webgl_compressed_texture_astc/getsupportedprofiles",
        "syntax": "sequence<DOMString> ext.getSupportedProfiles();",
        "type": "WebGL"
    },
    "ext.getTranslatedShaderSource": {
        "descr": "The WEBGL_debug_shaders.getTranslatedShaderSource() method is part of the WebGL API and allows you to debug a translated shader.",
        "name": "ext.getTranslatedShaderSource",
        "params": [
            {
                "descr": "A WebGLShader to get the translated source from.",
                "name": "shader"
            }
        ],
        "path": "dom/webgl_debug_shaders/gettranslatedshadersource",
        "syntax": "gl.getExtension('WEBGL_debug_shaders').getTranslatedShaderSource(shader);",
        "type": "WebGL"
    },
    "ext.isQueryEXT": {
        "descr": "The EXT_disjoint_timer_query.isQueryEXT() method of the WebGL API returns true if the passed object is a WebGLQuery object.",
        "name": "ext.isQueryEXT",
        "params": [
            {
                "descr": "A WebGLQuery object to test.",
                "name": "query"
            }
        ],
        "path": "dom/ext_disjoint_timer_query/isqueryext",
        "syntax": "GLBoolean ext.isQueryEXT(query);",
        "type": "WebGL"
    },
    "ext.isVertexArrayOES": {
        "descr": "The OES_vertex_array_object.isVertexArrayOES() method of the WebGL API returns true if the passed object is a WebGLVertexArrayObject object.",
        "name": "ext.isVertexArrayOES",
        "params": [
            {
                "descr": "A WebGLVertexArrayObject (VAO) object to test.",
                "name": "arrayObject"
            }
        ],
        "path": "dom/oes_vertex_array_object/isvertexarrayoes",
        "syntax": "GLBoolean ext.isVertexArrayOES(arrayObject);",
        "type": "WebGL"
    },
    "ext.loseContext": {
        "descr": "The WEBGL_lose_context.loseContext() method is part of the WebGL API and allows you to simulate losing the context of a WebGLRenderingContext context.",
        "name": "ext.loseContext",
        "params": [],
        "path": "dom/webgl_lose_context/losecontext",
        "syntax": "gl.getExtension('WEBGL_lose_context').loseContext();",
        "type": "WebGL"
    },
    "ext.queryCounterEXT": {
        "descr": "The EXT_disjoint_timer_query.queryCounterEXT() method of the WebGL API records the current time into the corresponding query object.",
        "name": "ext.queryCounterEXT",
        "params": [
            {
                "descr": "A WebGLQuery object for which to record the current time.",
                "name": "query"
            },
            {
                "descr": "A GLenum specifying the target of the time query. ",
                "name": "target"
            }
        ],
        "path": "dom/ext_disjoint_timer_query/querycounterext",
        "syntax": "void ext.queryCounterEXT(query, target);",
        "type": "WebGL"
    },
    "ext.restoreContext": {
        "descr": "The WEBGL_lose_context.restoreContext() method is part of the WebGL API and allows you to simulate restoring the context of a WebGLRenderingContext object.",
        "name": "ext.restoreContext",
        "params": [],
        "path": "dom/webgl_lose_context/restorecontext",
        "syntax": "gl.getExtension('WEBGL_lose_context').restoreContext();",
        "type": "WebGL"
    },
    "extends": {
        "descr": "The extends keyword is used in class declarations or class expressions to create a class which is a child of another class.",
        "name": "extends",
        "params": [],
        "path": "javascript/classes/extends",
        "syntax": "class ChildClass extends ParentClass { ... } Description The extends keyword can be used to subclass custom classes as well as built-in objects. The .prototype of the extension must be an Object or null. Examples Using extends  The first example creates a class called Square from a class called Polygon. This example is extracted from this live demo (source).",
        "type": "Classes"
    },
    "fadeIn": {
        "descr": "The .fadeIn() method animates the opacity of the matched elements. It is similar to the .fadeTo() method but that method does not unhide the element and can specify the final opacity level.",
        "name": "fadeIn",
        "params": [
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.",
                "name": "duration"
            },
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.",
                "name": "complete"
            },
            {
                "descr": "Type: PlainObject  A map of additional options to pass to the method. ",
                "name": "options"
            },
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.",
                "name": "easing"
            },
            {
                "descr": "(default: true) Type: Boolean or String  A Boolean indicating whether to place the animation in the effects queue. ",
                "name": "queue"
            },
            {
                "descr": "Type: PlainObject  An object containing one or more of the CSS properties defined by the properties argument and their corresponding easing functions. ",
                "name": "specialEasing"
            },
            {
                "descr": "Type: Function( Number now, Tween tween ) A function to be called for each animated property of each animated element. ",
                "name": "step"
            },
            {
                "descr": "Type: Function( Promise animation, Number progress, Number remainingMs ) A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties. (version added: 1.8)",
                "name": "progress"
            },
            {
                "descr": "Type: Function() A function that is called once the animation on an element is complete.",
                "name": "complete"
            },
            {
                "descr": "Type: Function( Promise animation ) A function to call when the animation on an element begins. ",
                "name": "start"
            },
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes (its Promise object is resolved). ",
                "name": "done"
            },
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element fails to complete (its Promise object is rejected). ",
                "name": "fail"
            },
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes or stops without completing (its Promise object is either resolved or rejected). (version added: 1.8)",
                "name": "always"
            },
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.",
                "name": "duration"
            },
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.",
                "name": "easing"
            },
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.",
                "name": "complete"
            }
        ],
        "path": "jquery/fadein",
        "syntax": ".fadeIn( [duration ] [, complete ] ) Returns: jQuery",
        "type": "Effects"
    },
    "fadeOut": {
        "descr": "The .fadeOut() method animates the opacity of the matched elements. Once the opacity reaches 0, the display style property is set to none, so the element no longer affects the layout of the page.",
        "name": "fadeOut",
        "params": [
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.",
                "name": "duration"
            },
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.",
                "name": "complete"
            },
            {
                "descr": "Type: PlainObject  A map of additional options to pass to the method. ",
                "name": "options"
            },
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.",
                "name": "easing"
            },
            {
                "descr": "(default: true) Type: Boolean or String  A Boolean indicating whether to place the animation in the effects queue. ",
                "name": "queue"
            },
            {
                "descr": "Type: PlainObject  An object containing one or more of the CSS properties defined by the properties argument and their corresponding easing functions. ",
                "name": "specialEasing"
            },
            {
                "descr": "Type: Function( Number now, Tween tween ) A function to be called for each animated property of each animated element. ",
                "name": "step"
            },
            {
                "descr": "Type: Function( Promise animation, Number progress, Number remainingMs ) A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties. (version added: 1.8)",
                "name": "progress"
            },
            {
                "descr": "Type: Function() A function that is called once the animation on an element is complete.",
                "name": "complete"
            },
            {
                "descr": "Type: Function( Promise animation ) A function to call when the animation on an element begins. ",
                "name": "start"
            },
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes (its Promise object is resolved). ",
                "name": "done"
            },
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element fails to complete (its Promise object is rejected). ",
                "name": "fail"
            },
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes or stops without completing (its Promise object is either resolved or rejected). (version added: 1.8)",
                "name": "always"
            },
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.",
                "name": "duration"
            },
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.",
                "name": "easing"
            },
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.",
                "name": "complete"
            }
        ],
        "path": "jquery/fadeout",
        "syntax": ".fadeOut( [duration ] [, complete ] ) Returns: jQuery",
        "type": "Effects"
    },
    "fadeTo": {
        "descr": "The .fadeTo() method animates the opacity of the matched elements. It is similar to the .fadeIn() method but that method unhides the element and always fades to 100% opacity.",
        "name": "fadeTo",
        "params": [
            {
                "descr": "Type: String or Number  A string or number determining how long the animation will run.",
                "name": "duration"
            },
            {
                "descr": "Type: Number  A number between 0 and 1 denoting the target opacity.",
                "name": "opacity"
            },
            {
                "descr": "Type: Function() A function to call once the animation is complete.",
                "name": "complete"
            },
            {
                "descr": "Type: String or Number  A string or number determining how long the animation will run.",
                "name": "duration"
            },
            {
                "descr": "Type: Number  A number between 0 and 1 denoting the target opacity.",
                "name": "opacity"
            },
            {
                "descr": "Type: String  A string indicating which easing function to use for the transition.",
                "name": "easing"
            },
            {
                "descr": "Type: Function() A function to call once the animation is complete.",
                "name": "complete"
            }
        ],
        "path": "jquery/fadeto",
        "syntax": ".fadeTo( duration, opacity [, complete ] ) Returns: jQuery",
        "type": "Effects"
    },
    "fadeToggle": {
        "descr": "The .fadeToggle() method animates the opacity of the matched elements. When called on a visible element, the element's display style property is set to none once the opacity reaches 0, so the element no longer affects the layout of the page.",
        "name": "fadeToggle",
        "params": [
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.",
                "name": "duration"
            },
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.",
                "name": "easing"
            },
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.",
                "name": "complete"
            },
            {
                "descr": "Type: PlainObject  A map of additional options to pass to the method. ",
                "name": "options"
            },
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.",
                "name": "easing"
            },
            {
                "descr": "(default: true) Type: Boolean or String  A Boolean indicating whether to place the animation in the effects queue. ",
                "name": "queue"
            },
            {
                "descr": "Type: PlainObject  An object containing one or more of the CSS properties defined by the properties argument and their corresponding easing functions. ",
                "name": "specialEasing"
            },
            {
                "descr": "Type: Function( Number now, Tween tween ) A function to be called for each animated property of each animated element. ",
                "name": "step"
            },
            {
                "descr": "Type: Function( Promise animation, Number progress, Number remainingMs ) A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties. (version added: 1.8)",
                "name": "progress"
            },
            {
                "descr": "Type: Function() A function that is called once the animation on an element is complete.",
                "name": "complete"
            },
            {
                "descr": "Type: Function( Promise animation ) A function to call when the animation on an element begins. ",
                "name": "start"
            },
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes (its Promise object is resolved). ",
                "name": "done"
            },
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element fails to complete (its Promise object is rejected). ",
                "name": "fail"
            },
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes or stops without completing (its Promise object is either resolved or rejected). (version added: 1.8)",
                "name": "always"
            }
        ],
        "path": "jquery/fadetoggle",
        "syntax": ".fadeToggle( [duration ] [, easing ] [, complete ] ) Returns: jQuery",
        "type": "Effects"
    },
    "fill": {
        "descr": "The fill() method fills all the elements of an array from a start index to an end index with a static value. The end index is not included.",
        "name": "array.fill",
        "params": [
            {
                "descr": "Value to fill an array.",
                "name": "value"
            },
            {
                "descr": "Start index, defaults to 0.",
                "name": "start Optional"
            },
            {
                "descr": "End index, defaults to this.length.",
                "name": "end Optional"
            }
        ],
        "path": "javascript/global_objects/array/fill",
        "syntax": "arr.fill(value[, start[, end]])",
        "type": "Array"
    },
    "filter": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .filter() method constructs a new jQuery object from a subset of the matching elements. The supplied selector is tested against each element; all elements matching the selector will be included in the result.",
        "name": "filter",
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to match the current set of elements against.",
                "name": "selector"
            },
            {
                "descr": "Type: Function( Integer index, Element element ) => Boolean  A function used as a test for each element in the set. ",
                "name": "function"
            },
            {
                "descr": "Type: Element  One or more DOM elements to match the current set of elements against.",
                "name": "elements"
            },
            {
                "descr": "Type: jQuery  An existing jQuery object to match the current set of elements against.",
                "name": "selection"
            }
        ],
        "path": "jquery/filter",
        "syntax": ".filter( selector ) Returns: jQuery",
        "type": "Traversing"
    },
    "find": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .find() method allows us to search through the descendants of these elements in the DOM tree and construct a new jQuery object from the matching elements. The .find() and .children() methods are similar, except that the latter only travels a single level down the DOM tree.",
        "name": "find",
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.",
                "name": "selector"
            },
            {
                "descr": "Type: Element or jQuery  An element or a jQuery object to match elements against.",
                "name": "element"
            }
        ],
        "path": "jquery/find",
        "syntax": ".find( selector ) Returns: jQuery",
        "type": "Traversing"
    },
    "findIndex": {
        "descr": "The findIndex() method returns the index of the first element in the array that satisfies the provided testing function. Otherwise, it returns -1, indicating no element passed the test.",
        "name": "array.findIndex",
        "params": [
            {
                "descr": "A function to execute on each value in the array until the function returns true, indicating the desired element was found. ",
                "name": "callback"
            },
            {
                "descr": "The index of the current element being processed in the array.",
                "name": "indexOptional"
            },
            {
                "descr": "The array findIndex was called upon.",
                "name": "arrayOptional"
            },
            {
                "descr": "Optional. Object to use as this when executing callback.",
                "name": "thisArgOptional"
            }
        ],
        "path": "javascript/global_objects/array/findindex",
        "syntax": "arr.findIndex(callback(element[, index[, array]])[, thisArg])",
        "type": "Array"
    },
    "finish": {
        "descr": "When .finish() is called on an element, the currently-running animation and all queued animations (if any) immediately stop and their CSS properties set to their target values. All queued animations are removed.",
        "name": "finish",
        "params": [
            {
                "descr": "(default: 'fx') Type: String  The name of the queue in which to stop animations.",
                "name": "queue"
            }
        ],
        "path": "jquery/finish",
        "syntax": ".finish( [queue ] ) Returns: jQuery",
        "type": "Effects"
    },
    "first": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .first() method constructs a new jQuery object from the first element in that set.",
        "name": "first",
        "params": [],
        "path": "jquery/first",
        "syntax": ".first() Returns: jQuery",
        "type": "Traversing"
    },
    "fixed": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "string.fixed",
        "params": [],
        "path": "javascript/global_objects/string/fixed",
        "syntax": "str.fixed()",
        "type": "String"
    },
    "flat": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "array.flat",
        "params": [
            {
                "descr": "The depth level specifying how deep a nested array structure should be flattened. ",
                "name": "depth Optional"
            }
        ],
        "path": "javascript/global_objects/array/flat",
        "syntax": "var newArray = arr.flat([depth]);",
        "type": "Array"
    },
    "flatMap": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "array.flatMap",
        "params": [
            {
                "descr": "Function that produces an element of the new Array, taking three arguments:  currentValue The current element being processed in the array.",
                "name": "callback"
            },
            {
                "descr": "The index of the current element being processed in the array.",
                "name": "indexOptional"
            },
            {
                "descr": "The array map was called upon.",
                "name": "arrayOptional"
            },
            {
                "descr": "Value to use as this when executing callback.",
                "name": "thisArgOptional"
            }
        ],
        "path": "javascript/global_objects/array/flatmap",
        "syntax": "var new_array = arr.flatMap(function callback(currentValue[, index[, array]]) { // return element for new_array }[, thisArg])",
        "type": "Array"
    },
    "focus": {
        "descr": "Attempting to set focus to a hidden element causes an error in Internet Explorer. Take care to only use .focus() on elements that are visible. To run an element's focus event handlers without setting focus to the element, use .triggerHandler( \"focus\" ) instead of .focus().",
        "name": "focus",
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            },
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.",
                "name": "eventData"
            },
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            }
        ],
        "path": "jquery/focus",
        "syntax": ".focus( handler ) Returns: jQuery",
        "type": "Events"
    },
    "focusin": {
        "descr": "This method is a shortcut for .on( \"focusin\", handler ) in the first two variations, and .trigger( \"focusin\" ) in the third.",
        "name": "focusin",
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            },
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.",
                "name": "eventData"
            },
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            }
        ],
        "path": "jquery/focusin",
        "syntax": ".focusin( handler ) Returns: jQuery",
        "type": "Events"
    },
    "focusout": {
        "descr": "This method is a shortcut for .on( \"focusout\", handler ) when passed arguments, and .trigger( \"focusout\" ) when no arguments are passed.",
        "name": "focusout",
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            },
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.",
                "name": "eventData"
            },
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            }
        ],
        "path": "jquery/focusout",
        "syntax": ".focusout( handler ) Returns: jQuery",
        "type": "Events"
    },
    "fontcolor": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "string.fontcolor",
        "params": [
            {
                "descr": "A string expressing the color as a hexadecimal RGB triplet or as a string literal. ",
                "name": "color"
            }
        ],
        "path": "javascript/global_objects/string/fontcolor",
        "syntax": "str.fontcolor(color)",
        "type": "String"
    },
    "fontsize": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "string.fontsize",
        "params": [
            {
                "descr": "An integer between 1 and 7, a string representing a signed integer between 1 and 7.",
                "name": "size"
            }
        ],
        "path": "javascript/global_objects/string/fontsize",
        "syntax": "str.fontsize(size)",
        "type": "String"
    },
    "for": {
        "descr": "The for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop.",
        "name": "for",
        "params": [
            {
                "descr": "An expression (including assignment expressions) or variable declaration. ",
                "name": "initialization"
            },
            {
                "descr": "An expression to be evaluated before each loop iteration. ",
                "name": "condition"
            },
            {
                "descr": "An expression to be evaluated at the end of each loop iteration. ",
                "name": "final-expression"
            },
            {
                "descr": "A statement that is executed as long as the condition evaluates to true. ",
                "name": "statement"
            }
        ],
        "path": "javascript/statements/for",
        "syntax": "for ([initialization]; [condition]; [final-expression]) statement",
        "type": "Statements"
    },
    "for each...in": {
        "descr": "The for each...in statement is deprecated as the part of ECMA-357 (E4X) standard. E4X support has been removed. Consider using for...of instead.  Firefox now warns about the usage of for each...in and it no longer works starting with Firefox 57. Please see Warning: JavaScript 1.6's for-each-in loops are deprecated for migration help.",
        "name": "for each...in",
        "params": [
            {
                "descr": "Variable to iterate over property values, optionally declared with the var keyword. ",
                "name": "variable"
            },
            {
                "descr": "Object for which the properties are iterated.",
                "name": "object"
            },
            {
                "descr": "A statement to execute for each property. ",
                "name": "statement"
            }
        ],
        "path": "javascript/statements/for_each...in",
        "syntax": "for each (variable in object) { statement }",
        "type": "Statements"
    },
    "for-await...of": {
        "descr": "The for await...ofcreates a loop iterating over async iterable objects as well as on sync iterables, including: built-in String, Array, Array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined async/sync iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object.",
        "name": "for-await...of",
        "params": [
            {
                "descr": "On each iteration a value of a different property is assigned to variable.",
                "name": "variable"
            },
            {
                "descr": "Object whose iterable properties are iterated.",
                "name": "iterable"
            }
        ],
        "path": "javascript/statements/for-await...of",
        "syntax": "for await (variable of iterable) { statement }",
        "type": "Statements"
    },
    "for...in": {
        "descr": "The for...in iterates over all non-Symbol, enumerable properties of an object.",
        "name": "for...in",
        "params": [
            {
                "descr": "A different property name is assigned to variable on each iteration.",
                "name": "variable"
            },
            {
                "descr": "Object whose non-Symbol enumerable properties are iterated over.",
                "name": "object"
            }
        ],
        "path": "javascript/statements/for...in",
        "syntax": "for (variable in object) { ... }",
        "type": "Statements"
    },
    "for...of": {
        "descr": "The for...ofcreates a loop iterating over iterable objects, including: built-in String, Array, Array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object.",
        "name": "for...of",
        "params": [
            {
                "descr": "On each iteration a value of a different property is assigned to variable.",
                "name": "variable"
            },
            {
                "descr": "Object whose iterable properties are iterated.",
                "name": "iterable"
            }
        ],
        "path": "javascript/statements/for...of",
        "syntax": "for (variable of iterable) { statement }",
        "type": "Statements"
    },
    "forEach": {
        "descr": "The forEach() method executes a provided function once for each array element.",
        "name": "array.forEach",
        "params": [
            {
                "descr": "Function to execute for each element, taking three arguments:  currentValue The value of the current element being processed in the array.",
                "name": "callback"
            },
            {
                "descr": "The index of the current element being processed in the array.",
                "name": "indexOptional"
            },
            {
                "descr": "The array that forEach() is being applied to.",
                "name": "arrayOptional"
            },
            {
                "descr": "Value to use as this (i.e the reference Object) when executing callback.",
                "name": "thisArg Optional"
            }
        ],
        "path": "javascript/global_objects/array/foreach",
        "syntax": "arr.forEach(function callback(currentValue[, index[, array]]) { //your iterator }[, thisArg]);",
        "type": "Array"
    },
    "frameElement": {
        "descr": "Returns the element (such as <iframe> or <object>) in which the window is embedded, or null if the element is either top-level or is embedded into a document with a different script origin; that is, in cross-origin situations.",
        "name": "window.frameElement",
        "params": [],
        "path": "dom/window/frameelement",
        "syntax": "frameEl = window.frameElement;    frameEl is the element which the window is embedded into. If the window isn't embedded into another document, or if the document into which it's embedded has a different origin (such as having been located from a different domain), this is null",
        "type": "Window"
    },
    "frames": {
        "descr": "Returns the window itself, which is an array-like object, listing the direct sub-frames of the current window.",
        "name": "window.frames",
        "params": [],
        "path": "dom/window/frames",
        "syntax": "frameList = window.frames;    frameList is a list of frame objects. It is similar to an array in that it has a length property and its items can be accessed using the [i] notation.  frameList === window evaluates to true. Each item in the window.frames pseudo-array represents the window object corresponding to the given <frame>'s or <iframe>'s content, not the (i)frame DOM element (i.e., window.frames[0]",
        "type": "Window"
    },
    "freeze": {
        "descr": "The Object.freeze() method freezes an object. A frozen object can no longer be changed; freezing an object prevents new properties from being added to it, existing properties from being removed, prevents changing the enumerability, configurability, or writability of existing properties, and prevents the values of existing properties from being changed. In addition, freezing an object also prevents its prototype from being changed. freeze() returns the same object that was passed in.",
        "name": "Object.freeze",
        "params": [
            {
                "descr": "The object to freeze.",
                "name": "obj"
            }
        ],
        "path": "javascript/global_objects/object/freeze",
        "syntax": "Object.freeze(obj)",
        "type": "Object"
    },
    "from": {
        "descr": "The Array.from() method creates a new, shallow-copied Array instance from an array-like or iterable object.",
        "name": "Array.from",
        "params": [
            {
                "descr": "An array-like or iterable object to convert to an array.",
                "name": "arrayLike"
            },
            {
                "descr": "Map function to call on every element of the array.",
                "name": "mapFnOptional"
            },
            {
                "descr": "Value to use as this when executing mapFn.",
                "name": "thisArgOptional"
            }
        ],
        "path": "javascript/global_objects/array/from",
        "syntax": "Array.from(arrayLike[, mapFn[, thisArg]])",
        "type": "Array"
    },
    "fromCharCode": {
        "descr": "The static String.fromCharCode() method returns a string created from the specified sequence of UTF-16 code units.",
        "name": "String.fromCharCode",
        "params": [
            {
                "descr": "A sequence of numbers that are UTF-16 code units. ",
                "name": "num1, ..., numN"
            }
        ],
        "path": "javascript/global_objects/string/fromcharcode",
        "syntax": "String.fromCharCode(num1[, ...[, numN]])",
        "type": "String"
    },
    "fromCodePoint": {
        "descr": "The static String.fromCodePoint() method returns a string created by using the specified sequence of code points.",
        "name": "String.fromCodePoint",
        "params": [
            {
                "descr": "A sequence of code points.",
                "name": "num1, ..., numN"
            }
        ],
        "path": "javascript/global_objects/string/fromcodepoint",
        "syntax": "String.fromCodePoint(num1[, ...[, numN]])",
        "type": "String"
    },
    "fromEntries": {
        "descr": "The Object.fromEntries() method transforms a list of key-value pairs into an object.",
        "name": "Object.fromEntries",
        "params": [
            {
                "descr": "An iterable such as Array or Map or other objects implementing the iterable protocol.",
                "name": "iterable"
            }
        ],
        "path": "javascript/global_objects/object/fromentries",
        "syntax": "Object.fromEntries(iterable);",
        "type": "Object"
    },
    "fullScreen": {
        "descr": "This property indicates whether the window is displayed in full screen mode or not. It is only reliable in Gecko 1.9 (Firefox 3) and later, see the Notes below.",
        "name": "window.fullScreen",
        "params": [
            {
                "descr": "A boolean. Possible Values:",
                "name": "isInFullScreen"
            }
        ],
        "path": "dom/window/fullscreen",
        "syntax": "isInFullScreen = windowRef.fullScreen;  With chrome privileges, the property is read-write, otherwise it is read-only. Bear in mind that if you try to set this property without chrome privileges, it will not throw an exception and instead just silently fail. This is to prevent scripts designed to set this property in Internet Explorer from breaking. Return Value  isInFullScreen A boolean. Possible Values:    true: The window is in full screen mode.  false: The window is not in full screen mode.  Examples if (window.fullScreen) { // it's fullscreen! } else { // not fullscreen! }",
        "type": "Window"
    },
    "function": {
        "descr": "The function declaration (function statement) defines a function with the specified parameters.",
        "name": "function",
        "params": [
            {
                "descr": "The function name.",
                "name": "name"
            },
            {
                "descr": "The name of an argument to be passed to the function. ",
                "name": "param"
            },
            {
                "descr": "The statements which comprise the body of the function.",
                "name": "statements"
            }
        ],
        "path": "javascript/statements/function",
        "syntax": "function name([param[, param,[..., param]]]) { [statements] }",
        "type": "Statements"
    },
    "function*": {
        "descr": "The function* declaration (function keyword followed by an asterisk) defines a generator function, which returns a Generator object.",
        "name": "function*",
        "params": [
            {
                "descr": "The function name.",
                "name": "name"
            },
            {
                "descr": "The name of a formal parameter for the function.",
                "name": "param"
            },
            {
                "descr": "The statements comprising the body of the function.",
                "name": "statements"
            }
        ],
        "path": "javascript/statements/function*",
        "syntax": "function* name([param[, param[, ... param]]]) { statements }",
        "type": "Statements"
    },
    "function.apply": {
        "descr": "The apply() method calls a function with a given this value, and arguments provided as an array (or an array-like object).",
        "name": "function.apply",
        "params": [
            {
                "descr": "Optional. The value of this provided for the call to func. ",
                "name": "thisArg"
            },
            {
                "descr": "Optional. An array-like object, specifying the arguments with which func should be called, or null or undefined if no arguments should be provided to the function. ",
                "name": "argsArray"
            }
        ],
        "path": "javascript/global_objects/function/apply",
        "syntax": "call()",
        "type": "Function"
    },
    "function.arguments": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "function.arguments",
        "params": [],
        "path": "javascript/global_objects/function/arguments",
        "syntax": "function.arguments is deprecated. The recommended way to access the arguments object available within functions is simply to refer to the variable arguments. In the case of recursion, i.e. if function f appears several times on the call stack, the value of f.arguments represents the arguments corresponding to the most recent invocation of the function. The value of the arguments property is normally null if there is no outstanding invocation of the function in progress (that is, the function has been called but has not yet returned. Examples function f(n) { g(n - 1);\n or  } function g(n) { console.log('before: ' + g.arguments[0]);\n or  if (n > 0) { f(n);\n or  } console.log('after: ' + g.arguments[0]);\n or  } f(2);\n or  console.log('returned: ' + g.arguments);\n or  // Output // before: 1 // before: 0 // after: 0 // after: 1 // returned: null);",
        "type": "Function"
    },
    "function.bind": {
        "descr": "The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.",
        "name": "function.bind",
        "params": [
            {
                "descr": "The value to be passed as the this parameter to the target function when the bound function is called. ",
                "name": "thisArg"
            },
            {
                "descr": "Arguments to prepend to arguments provided to the bound function when invoking the target function.",
                "name": "arg1, arg2, ..."
            }
        ],
        "path": "javascript/global_objects/function/bind",
        "syntax": "function.bind(thisArg[, arg1[, arg2[, ...]]])",
        "type": "Function"
    },
    "function.call": {
        "descr": "The call() method calls a function with a given this value and arguments provided individually.",
        "name": "function.call",
        "params": [
            {
                "descr": "Optional. The value of this provided for the call to a function. ",
                "name": "thisArg"
            },
            {
                "descr": "Optional. Arguments for the function.",
                "name": "arg1, arg2, ..."
            }
        ],
        "path": "javascript/global_objects/function/call",
        "syntax": "apply()",
        "type": "Function"
    },
    "function.name": {
        "descr": "A Function object's read-only name property indicates the function's name as specified when it was created, or \"anonymous\" for functions created anonymously.",
        "name": "function.name",
        "params": [],
        "path": "javascript/global_objects/function/name",
        "syntax": "new Function(...)",
        "type": "Function"
    },
    "function.toString": {
        "descr": "The toString() method returns a string representing the source code of the function.",
        "name": "function.toString",
        "params": [],
        "path": "javascript/global_objects/function/tostring",
        "syntax": "function.toString()",
        "type": "Function"
    },
    "generator.next": {
        "descr": "The next() method returns an object with two properties done and value. You can also provide a parameter to the next method to send a value to the generator.",
        "name": "generator.next",
        "params": [
            {
                "descr": "The value to send to the generator. ",
                "name": "value"
            }
        ],
        "path": "javascript/global_objects/generator/next",
        "syntax": "gen.next(value)",
        "type": "Generator"
    },
    "generator.return": {
        "descr": "The return() method returns the given value and finishes the generator.",
        "name": "generator.return",
        "params": [
            {
                "descr": "The value to return.",
                "name": "value"
            }
        ],
        "path": "javascript/global_objects/generator/return",
        "syntax": "gen.return(value)",
        "type": "Generator"
    },
    "generator.throw": {
        "descr": "The throw() method resumes the execution of a generator by throwing an error into it and returns an object with two properties done and value.",
        "name": "generator.throw",
        "params": [
            {
                "descr": "The exception to throw. For debugging purposes, it is useful to make it an instanceof Error.",
                "name": "exception"
            }
        ],
        "path": "javascript/global_objects/generator/throw",
        "syntax": "gen.throw(exception)",
        "type": "Generator"
    },
    "get": {
        "descr": "The .get() method grants access to the DOM nodes underlying each jQuery object. If the value of index is out of bounds — less than the negative number of elements or equal to or greater than the number of elements — it returns undefined. Consider a simple unordered list:",
        "name": "get",
        "params": [
            {
                "descr": "Type: Integer  A zero-based integer indicating which element to retrieve.",
                "name": "index"
            }
        ],
        "path": "jquery/get",
        "syntax": ".get( index ) Returns: Element",
        "type": "Miscellaneous"
    },
    "getComputedStyle": {
        "descr": "The returned style is a live CSSStyleDeclaration object, which updates itself automatically when the element's style is changed.",
        "name": "window.getComputedStyle",
        "params": [
            {
                "descr": "The Element for which to get the computed style.",
                "name": "element"
            },
            {
                "descr": "A string specifying the pseudo-element to match. ",
                "name": "pseudoEltOptional"
            }
        ],
        "path": "dom/window/getcomputedstyle",
        "syntax": "var style = window.getComputedStyle(element[, pseudoElt]);",
        "type": "Window"
    },
    "getDate": {
        "descr": "The getDate() method returns the day of the month for the specified date according to local time.",
        "name": "date.getDate",
        "params": [],
        "path": "javascript/global_objects/date/getdate",
        "syntax": "dateObj.getDate()",
        "type": "Date"
    },
    "getDay": {
        "descr": "The getDay() method returns the day of the week for the specified date according to local time, where 0 represents Sunday. For the day of the month see getDate().",
        "name": "date.getDay",
        "params": [],
        "path": "javascript/global_objects/date/getday",
        "syntax": "dateObj.getDay()",
        "type": "Date"
    },
    "getFullYear": {
        "descr": "The getFullYear() method returns the year of the specified date according to local time.",
        "name": "date.getFullYear",
        "params": [],
        "path": "javascript/global_objects/date/getfullyear",
        "syntax": "dateObj.getFullYear()",
        "type": "Date"
    },
    "getHours": {
        "descr": "The getHours() method returns the hour for the specified date, according to local time.",
        "name": "date.getHours",
        "params": [],
        "path": "javascript/global_objects/date/gethours",
        "syntax": "dateObj.getHours()",
        "type": "Date"
    },
    "getMilliseconds": {
        "descr": "The getMilliseconds() method returns the milliseconds in the specified date according to local time.",
        "name": "date.getMilliseconds",
        "params": [],
        "path": "javascript/global_objects/date/getmilliseconds",
        "syntax": "dateObj.getMilliseconds()",
        "type": "Date"
    },
    "getMinutes": {
        "descr": "The getMinutes() method returns the minutes in the specified date according to local time.",
        "name": "date.getMinutes",
        "params": [],
        "path": "javascript/global_objects/date/getminutes",
        "syntax": "dateObj.getMinutes()",
        "type": "Date"
    },
    "getMonth": {
        "descr": "The getMonth() method returns the month in the specified date according to local time, as a zero-based value (where zero indicates the first month of the year).",
        "name": "date.getMonth",
        "params": [],
        "path": "javascript/global_objects/date/getmonth",
        "syntax": "dateObj.getMonth()",
        "type": "Date"
    },
    "getOwnPropertyDescriptor": {
        "descr": "The Object.getOwnPropertyDescriptor() method returns a property descriptor for an own property (that is, one directly present on an object and not in the object's prototype chain) of a given object.",
        "name": "Object.getOwnPropertyDescriptor",
        "params": [
            {
                "descr": "The object in which to look for the property.",
                "name": "obj"
            },
            {
                "descr": "The name or Symbol of the property whose description is to be retrieved.",
                "name": "prop"
            },
            {
                "descr": "The value associated with the property (data descriptors only).",
                "name": "value"
            },
            {
                "descr": "true if and only if the value associated with the property may be changed (data descriptors only).",
                "name": "writable"
            },
            {
                "descr": "A function which serves as a getter for the property, or undefined if there is no getter (accessor descriptors only).",
                "name": "get"
            },
            {
                "descr": "A function which serves as a setter for the property, or undefined if there is no setter (accessor descriptors only).",
                "name": "set"
            },
            {
                "descr": "true if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.",
                "name": "configurable"
            },
            {
                "descr": "true if and only if this property shows up during enumeration of the properties on the corresponding object.",
                "name": "enumerable"
            }
        ],
        "path": "javascript/global_objects/object/getownpropertydescriptor",
        "syntax": "Object.getOwnPropertyDescriptor(obj, prop)",
        "type": "Object"
    },
    "getOwnPropertyDescriptors": {
        "descr": "The Object.getOwnPropertyDescriptors() method returns all own property descriptors of a given object.",
        "name": "Object.getOwnPropertyDescriptors",
        "params": [
            {
                "descr": "The object for which to get all own property descriptors.",
                "name": "obj"
            },
            {
                "descr": "The value associated with the property (data descriptors only).",
                "name": "value"
            },
            {
                "descr": "true if and only if the value associated with the property may be changed (data descriptors only).",
                "name": "writable"
            },
            {
                "descr": "A function which serves as a getter for the property, or undefined if there is no getter (accessor descriptors only).",
                "name": "get"
            },
            {
                "descr": "A function which serves as a setter for the property, or undefined if there is no setter (accessor descriptors only).",
                "name": "set"
            },
            {
                "descr": "true if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.",
                "name": "configurable"
            },
            {
                "descr": "true if and only if this property shows up during enumeration of the properties on the corresponding object.",
                "name": "enumerable"
            }
        ],
        "path": "javascript/global_objects/object/getownpropertydescriptors",
        "syntax": "Object.getOwnPropertyDescriptors(obj)",
        "type": "Object"
    },
    "getOwnPropertyNames": {
        "descr": "The Object.getOwnPropertyNames() method returns an array of all properties (including non-enumerable properties except for those which use Symbol) found directly upon a given object.",
        "name": "Object.getOwnPropertyNames",
        "params": [
            {
                "descr": "The object whose enumerable and non-enumerable own properties are to be returned.",
                "name": "obj"
            }
        ],
        "path": "javascript/global_objects/object/getownpropertynames",
        "syntax": "Object.getOwnPropertyNames(obj)",
        "type": "Object"
    },
    "getOwnPropertySymbols": {
        "descr": "The Object.getOwnPropertySymbols() method returns an array of all symbol properties found directly upon a given object.",
        "name": "Object.getOwnPropertySymbols",
        "params": [
            {
                "descr": "The object whose symbol properties are to be returned.",
                "name": "obj"
            }
        ],
        "path": "javascript/global_objects/object/getownpropertysymbols",
        "syntax": "Object.getOwnPropertySymbols(obj)",
        "type": "Object"
    },
    "getPrototypeOf": {
        "descr": "The Object.getPrototypeOf() method returns the prototype (i.e. the value of the internal [[Prototype]] property) of the specified object.",
        "name": "Object.getPrototypeOf",
        "params": [
            {
                "descr": "The object whose prototype is to be returned.",
                "name": "obj)"
            }
        ],
        "path": "javascript/global_objects/object/getprototypeof",
        "syntax": "Object.getPrototypeOf(obj)",
        "type": "Object"
    },
    "getSeconds": {
        "descr": "The getSeconds() method returns the seconds in the specified date according to local time.",
        "name": "date.getSeconds",
        "params": [],
        "path": "javascript/global_objects/date/getseconds",
        "syntax": "dateObj.getSeconds()",
        "type": "Date"
    },
    "getSelection": {
        "descr": "Returns a Selection object representing the range of text selected by the user or the current position of the caret.",
        "name": "window.getSelection",
        "params": [],
        "path": "dom/window/getselection",
        "syntax": "selection = window.getSelection();",
        "type": "Window"
    },
    "getTime": {
        "descr": "The getTime() method returns the numeric value corresponding to the time for the specified date according to universal time.",
        "name": "date.getTime",
        "params": [],
        "path": "javascript/global_objects/date/gettime",
        "syntax": "dateObj.getTime()",
        "type": "Date"
    },
    "getTimezoneOffset": {
        "descr": "The getTimezoneOffset() method returns the time zone difference, in minutes, from current locale (host system settings) to UTC.",
        "name": "date.getTimezoneOffset",
        "params": [],
        "path": "javascript/global_objects/date/gettimezoneoffset",
        "syntax": "dateObj.getTimezoneOffset()",
        "type": "Date"
    },
    "getUTCDate": {
        "descr": "The getUTCDate() method returns the day (date) of the month in the specified date according to universal time.",
        "name": "date.getUTCDate",
        "params": [],
        "path": "javascript/global_objects/date/getutcdate",
        "syntax": "dateObj.getUTCDate()",
        "type": "Date"
    },
    "getUTCDay": {
        "descr": "The getUTCDay() method returns the day of the week in the specified date according to universal time, where 0 represents Sunday.",
        "name": "date.getUTCDay",
        "params": [],
        "path": "javascript/global_objects/date/getutcday",
        "syntax": "dateObj.getUTCDay()",
        "type": "Date"
    },
    "getUTCFullYear": {
        "descr": "The getUTCFullYear() method returns the year in the specified date according to universal time.",
        "name": "date.getUTCFullYear",
        "params": [],
        "path": "javascript/global_objects/date/getutcfullyear",
        "syntax": "dateObj.getUTCFullYear()",
        "type": "Date"
    },
    "getUTCHours": {
        "descr": "The getUTCHours() method returns the hours in the specified date according to universal time.",
        "name": "date.getUTCHours",
        "params": [],
        "path": "javascript/global_objects/date/getutchours",
        "syntax": "dateObj.getUTCHours()",
        "type": "Date"
    },
    "getUTCMilliseconds": {
        "descr": "The getUTCMilliseconds() method returns the milliseconds in the specified date according to universal time.",
        "name": "date.getUTCMilliseconds",
        "params": [],
        "path": "javascript/global_objects/date/getutcmilliseconds",
        "syntax": "dateObj.getUTCMilliseconds()",
        "type": "Date"
    },
    "getUTCMinutes": {
        "descr": "The getUTCMinutes() method returns the minutes in the specified date according to universal time.",
        "name": "date.getUTCMinutes",
        "params": [],
        "path": "javascript/global_objects/date/getutcminutes",
        "syntax": "dateObj.getUTCMinutes()",
        "type": "Date"
    },
    "getUTCMonth": {
        "descr": "The getUTCMonth() returns the month of the specified date according to universal time, as a zero-based value (where zero indicates the first month of the year).",
        "name": "date.getUTCMonth",
        "params": [],
        "path": "javascript/global_objects/date/getutcmonth",
        "syntax": "dateObj.getUTCMonth()",
        "type": "Date"
    },
    "getUTCSeconds": {
        "descr": "The getUTCSeconds() method returns the seconds in the specified date according to universal time.",
        "name": "date.getUTCSeconds",
        "params": [],
        "path": "javascript/global_objects/date/getutcseconds",
        "syntax": "dateObj.getUTCSeconds()",
        "type": "Date"
    },
    "has": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .has() method constructs a new jQuery object from a subset of the matching elements. The supplied selector is tested against the descendants of the matching elements; the element will be included in the result if any of its descendant elements matches the selector.",
        "name": "has",
        "params": [
            {
                "descr": "Type: String  A string containing a selector expression to match elements against.",
                "name": "selector"
            },
            {
                "descr": "Type: Element  A DOM element to match elements against.",
                "name": "contained"
            }
        ],
        "path": "jquery/has",
        "syntax": ".has( selector ) Returns: jQuery",
        "type": "Traversing"
    },
    "hasClass": {
        "descr": "Elements may have more than one class assigned to them. In HTML, this is represented by separating the class names with a space:",
        "name": "hasClass",
        "params": [
            {
                "descr": "Type: String  The class name to search for.",
                "name": "className"
            }
        ],
        "path": "jquery/hasclass",
        "syntax": ".hasClass( className ) Returns: Boolean",
        "type": "Manipulation"
    },
    "hasOwnProperty": {
        "descr": "The hasOwnProperty() method returns a boolean indicating whether the object has the specified property as its own property (as opposed to inheriting it).",
        "name": "object.hasOwnProperty",
        "params": [
            {
                "descr": "The String name or symbol of the property to test.",
                "name": "prop"
            }
        ],
        "path": "javascript/global_objects/object/hasownproperty",
        "syntax": "obj.hasOwnProperty(prop)",
        "type": "Object"
    },
    "height": {
        "descr": "The difference between .css( \"height\" ) and .height() is that the latter returns a unit-less pixel value (for example, 400) while the former returns a value with units intact (for example, 400px). The .height() method is recommended when an element's height needs to be used in a mathematical calculation.",
        "name": "height",
        "params": [
            {
                "descr": "Type: String or Number  An integer representing the number of pixels, or an integer with an optional unit of measure appended (as a string).",
                "name": "value"
            },
            {
                "descr": "Type: Function( Integer index, Integer height ) => String or Number  A function returning the height to set. ",
                "name": "function"
            }
        ],
        "path": "jquery/height",
        "syntax": ".height() Returns: Number",
        "type": "Dimensions"
    },
    "hide": {
        "descr": "With no parameters, the .hide() method is the simplest way to hide an element:",
        "name": "hide",
        "params": [
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.",
                "name": "duration"
            },
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.",
                "name": "complete"
            },
            {
                "descr": "Type: PlainObject  A map of additional options to pass to the method. ",
                "name": "options"
            },
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.",
                "name": "easing"
            },
            {
                "descr": "(default: true) Type: Boolean or String  A Boolean indicating whether to place the animation in the effects queue. ",
                "name": "queue"
            },
            {
                "descr": "Type: PlainObject  An object containing one or more of the CSS properties defined by the properties argument and their corresponding easing functions. ",
                "name": "specialEasing"
            },
            {
                "descr": "Type: Function( Number now, Tween tween ) A function to be called for each animated property of each animated element. ",
                "name": "step"
            },
            {
                "descr": "Type: Function( Promise animation, Number progress, Number remainingMs ) A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties. (version added: 1.8)",
                "name": "progress"
            },
            {
                "descr": "Type: Function() A function that is called once the animation on an element is complete.",
                "name": "complete"
            },
            {
                "descr": "Type: Function( Promise animation ) A function to call when the animation on an element begins. ",
                "name": "start"
            },
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes (its Promise object is resolved). ",
                "name": "done"
            },
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element fails to complete (its Promise object is rejected). ",
                "name": "fail"
            },
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes or stops without completing (its Promise object is either resolved or rejected). (version added: 1.8)",
                "name": "always"
            },
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.",
                "name": "duration"
            },
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.",
                "name": "easing"
            },
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.",
                "name": "complete"
            }
        ],
        "path": "jquery/hide",
        "syntax": ".hide() Returns: jQuery",
        "type": "Effects"
    },
    "history": {
        "descr": "The Window.history read-only property returns a reference to the History object, which provides an interface for manipulating the browser session history (pages visited in the tab or frame that the current page is loaded in).",
        "name": "window.history",
        "params": [],
        "path": "dom/window/history",
        "syntax": "var historyObj = window.history;  Example history.back();\n or  // equivalent to clicking back button history.go(-1);\n or  // equivalent to history.back();",
        "type": "Window"
    },
    "history.pushState": {
        "descr": "The DOM window object provides access to the browser's history through the history object. It exposes useful methods and properties that let you move back and forth through the user's history, as well as -- starting with HTML5 -- manipulate the contents of the history stack.",
        "name": "history.pushState",
        "params": [],
        "path": "dom/history_api#The_pushState()_method",
        "syntax": "http://mozilla.org/bar.html executes the following JavaScript: history.replaceState(stateObj, \"page 3\", \"bar2.html\");",
        "type": "History"
    },
    "hover": {
        "descr": "The .hover() method binds handlers for both mouseenter and mouseleave events. You can use it to simply apply behavior to an element during the time the mouse is within the element.",
        "name": "hover",
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute when the mouse pointer enters the element.",
                "name": "handlerIn"
            },
            {
                "descr": "Type: Function( Event eventObject ) A function to execute when the mouse pointer leaves the element.",
                "name": "handlerOut"
            },
            {
                "descr": "Type: Function( Event eventObject ) A function to execute when the mouse pointer enters or leaves the element.",
                "name": "handlerInOut"
            }
        ],
        "path": "jquery/hover",
        "syntax": ".hover( handlerIn, handlerOut ) Returns: jQuery",
        "type": "Events"
    },
    "html": {
        "descr": "This method is not available on XML documents.",
        "name": "html",
        "params": [
            {
                "descr": "Type: htmlString  A string of HTML to set as the content of each matched element.",
                "name": "htmlString"
            },
            {
                "descr": "Type: Function( Integer index, htmlString oldhtml ) => htmlString  A function returning the HTML content to set. ",
                "name": "function"
            }
        ],
        "path": "jquery/html",
        "syntax": ".html() Returns: String",
        "type": "Manipulation"
    },
    "if...else": {
        "descr": "The if statement executes a statement if a specified condition is truthy. If the condition is falsy, another statement can be executed.",
        "name": "if...else",
        "params": [
            {
                "descr": "An expression that is considered to be either truthy or falsy.",
                "name": "condition"
            },
            {
                "descr": "Statement that is executed if condition is truthy. ",
                "name": "statement1"
            },
            {
                "descr": "Statement that is executed if condition is falsy and the else clause exists. ",
                "name": "statement2"
            }
        ],
        "path": "javascript/statements/if...else",
        "syntax": "if (condition) statement1 [else statement2]",
        "type": "Statements"
    },
    "import": {
        "descr": "The static import statement is used to import bindings which are exported by another module. Imported modules are in strict mode whether you declare them as such or not. The import statement cannot be used in embedded scripts unless such script has a type=\"module\".",
        "name": "import",
        "params": [
            {
                "descr": "Name that will refer to the default export from the module.",
                "name": "defaultExport"
            },
            {
                "descr": "The module to import from. This is often a relative or absolute path name to the .js file containing the module. ",
                "name": "module-name"
            },
            {
                "descr": "Name of the module object that will be used as a kind of namespace when referring to the imports.",
                "name": "name"
            },
            {
                "descr": "Name of the exports to be imported.",
                "name": "export, exportN"
            },
            {
                "descr": "Names that will refer to the named imports.",
                "name": "alias, aliasN"
            }
        ],
        "path": "javascript/statements/import",
        "syntax": "import defaultExport from \"module-name\"; import * as name from \"module-name\"; import { export } from \"module-name\"; import { export as alias } from \"module-name\"; import { export1 , export2 } from \"module-name\"; import { foo , bar } from \"module-name/path/to/specific/un-exported/file\"; import { export1 , export2 as alias2 , [...] } from \"module-name\"; import defaultExport, { export [ , [...] ] } from \"module-name\"; import defaultExport, * as name from \"module-name\"; import \"module-name\"; var promise = import(\"module-name\");",
        "type": "Statements"
    },
    "import.meta": {
        "descr": "Theimport.meta object is a meta-property exposing context-specific meta data to a JavaScript module. It contains information about the module, like the module's URL.",
        "name": "import.meta",
        "params": [],
        "path": "javascript/statements/import.meta",
        "syntax": "import.meta Description The import.meta object consists of the keyword import, a dot, and a property name meta. Normally import. serves as the context for a property access, but here import. is not really an object. The import.meta object is created by the ECMAScript implementation, with a null prototype. The object is extensible, and its properties are writable, configurable, and enumerable. Examples Given a module my-module.js <script type=\"module\" src=\"my-module.js\"></script>  you can can access meta information about the module using the import.meta object. console.log(import.meta);\n or  // { url: \"file:///home/user/my-module.mjs\" });",
        "type": "Statements"
    },
    "in": {
        "descr": "The in returns true if the specified property is in the specified object or its prototype chain.",
        "name": "in",
        "params": [
            {
                "descr": "A string or symbol representing a property name or array index (non-symbols will be coerced to strings).",
                "name": "prop"
            },
            {
                "descr": "Object to check if it (or its prototype chain) contains the property with specified name.",
                "name": "object"
            }
        ],
        "path": "javascript/operators/in",
        "syntax": "prop in object Parameters  prop A string or symbol representing a property name or array index (non-symbols will be coerced to strings).   object",
        "type": "Operators"
    },
    "includes": {
        "descr": "The includes() method determines whether one string may be found within another string, returning true or false as appropriate.",
        "name": "string.includes",
        "params": [
            {
                "descr": "A string to be searched for within this string.",
                "name": "searchString"
            },
            {
                "descr": "The position within the string at which to begin searching for searchString. ",
                "name": "position Optional"
            }
        ],
        "path": "javascript/global_objects/string/includes",
        "syntax": "str.includes(searchString[, position])",
        "type": "String"
    },
    "index": {
        "descr": "If no argument is passed to the .index() method, the return value is an integer indicating the position of the first element within the jQuery object relative to its sibling elements.",
        "name": "index",
        "params": [
            {
                "descr": "Type: Selector  A selector representing a jQuery collection in which to look for an element.",
                "name": "selector"
            },
            {
                "descr": "Type: Element or jQuery  The DOM element or first element within the jQuery object to look for.",
                "name": "element"
            }
        ],
        "path": "jquery/index/index",
        "syntax": ".index() Returns: Integer",
        "type": "Miscellaneous"
    },
    "indexOf": {
        "descr": "The indexOf() method returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex. Returns -1 if the value is not found.",
        "name": "string.indexOf",
        "params": [
            {
                "descr": "A string representing the value to search for.",
                "name": "searchValue"
            },
            {
                "descr": "An integer representing the index at which to start the search; the default value is 0. ",
                "name": "fromIndex Optional"
            }
        ],
        "path": "javascript/global_objects/string/indexof",
        "syntax": "str.indexOf(searchValue[, fromIndex])",
        "type": "String"
    },
    "innerHeight": {
        "descr": "This method returns the height of the element, including top and bottom padding, in pixels. If called on an empty set of elements, returns undefined (null before jQuery 3.0).",
        "name": "innerHeight",
        "params": [
            {
                "descr": "Type: String or Number  A number representing the number of pixels, or a number along with an optional unit of measure appended (as a string).",
                "name": "value"
            },
            {
                "descr": "Type: Function( Integer index, Number height ) => String or Number  A function returning the inner height (including padding but not border) to set. ",
                "name": "function"
            }
        ],
        "path": "jquery/innerheight",
        "syntax": ".innerHeight() Returns: Number",
        "type": "Dimensions"
    },
    "innerWidth": {
        "descr": "This method returns the width of the element, including left and right padding, in pixels. If called on an empty set of elements, returns undefined (null before jQuery 3.0).",
        "name": "innerWidth",
        "params": [
            {
                "descr": "Type: String or Number  A number representing the number of pixels, or a number along with an optional unit of measure appended (as a string).",
                "name": "value"
            },
            {
                "descr": "Type: Function( Integer index, Number width ) => String or Number  A function returning the inner width (including padding but not border) to set. ",
                "name": "function"
            }
        ],
        "path": "jquery/innerwidth",
        "syntax": ".innerWidth() Returns: Number",
        "type": "Dimensions"
    },
    "insertAfter": {
        "descr": "The .after() and .insertAfter() methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With .after(), the selector expression preceding the method is the container after which the content is inserted. With .insertAfter(), on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted after the target container.",
        "name": "insertAfter",
        "params": [
            {
                "descr": "Type: Selector or htmlString or Element or Array or jQuery  A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements will be inserted after the element(s) specified by this parameter.",
                "name": "target"
            }
        ],
        "path": "jquery/insertafter",
        "syntax": ".insertAfter( target ) Returns: jQuery",
        "type": "Manipulation"
    },
    "insertBefore": {
        "descr": "The .before() and .insertBefore() methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With .before(), the selector expression preceding the method is the container before which the content is inserted. With .insertBefore(), on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted before the target container.",
        "name": "insertBefore",
        "params": [
            {
                "descr": "Type: Selector or htmlString or Element or Array or jQuery  A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements will be inserted before the element(s) specified by this parameter.",
                "name": "target"
            }
        ],
        "path": "jquery/insertbefore",
        "syntax": ".insertBefore( target ) Returns: jQuery",
        "type": "Manipulation"
    },
    "instanceof": {
        "descr": "The instanceof tests whether the prototype property of a constructor appears anywhere in the prototype chain of an object.",
        "name": "instanceof",
        "params": [
            {
                "descr": "The object to test.",
                "name": "object"
            },
            {
                "descr": "Function to test against",
                "name": "constructor"
            }
        ],
        "path": "javascript/operators/instanceof",
        "syntax": "object instanceof constructor Parameters  object The object to test.   constructor Function to test against  Description The instanceof operator tests the presence of constructor.prototype in object's prototype chain. // defining constructors function C() {} function D() {} var o = new C();\n or  // true, because: Object.getPrototypeOf(o) === C.prototype o instanceof C; // false, because D.prototype is nowhere in o's prototype chain o instanceof D; o instanceof Object; // true, because: C.prototype instanceof Object // true C.prototype = {}; var o2 = new C();\n or  o2 instanceof C; // true // false, because C.prototype is nowhere in // o's prototype chain anymore o instanceof C; D.prototype = new C();\n or  // add C to [[Prototype]] linkage of D var o3 = new D();\n or  o3 instanceof D; // true o3 instanceof C; // true since C.prototype is now in o3's prototype chain);",
        "type": "Operators"
    },
    "is": {
        "descr": "Unlike other filtering methods, .is() does not create a new jQuery object. Instead, it allows you to test the contents of a jQuery object without modification. This is often useful inside callbacks, such as event handlers.",
        "name": "is",
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.",
                "name": "selector"
            },
            {
                "descr": "Type: Function( Integer index, Element element ) => Boolean  A function used as a test for every element in the set. ",
                "name": "function"
            },
            {
                "descr": "Type: jQuery  An existing jQuery object to match the current set of elements against.",
                "name": "selection"
            },
            {
                "descr": "Type: Element  One or more elements to match the current set of elements against.",
                "name": "elements"
            }
        ],
        "path": "jquery/is",
        "syntax": ".is( selector ) Returns: Boolean",
        "type": "Traversing"
    },
    "isArray": {
        "descr": "The Array.isArray() method determines whether the passed value is an Array.",
        "name": "Array.isArray",
        "params": [
            {
                "descr": "The value to be checked.",
                "name": "value"
            }
        ],
        "path": "javascript/global_objects/array/isarray",
        "syntax": "Array.isArray(value)",
        "type": "Array"
    },
    "isExtensible": {
        "descr": "The Object.isExtensible() method determines if an object is extensible (whether it can have new properties added to it).",
        "name": "Object.isExtensible",
        "params": [
            {
                "descr": "The object which should be checked.",
                "name": "obj"
            }
        ],
        "path": "javascript/global_objects/object/isextensible",
        "syntax": "Object.isExtensible(obj)",
        "type": "Object"
    },
    "isFinite": {
        "descr": "The Number.isFinite() method determines whether the passed value is a finite number.",
        "name": "Number.isFinite",
        "params": [
            {
                "descr": "The value to be tested for finiteness.",
                "name": "value"
            }
        ],
        "path": "javascript/global_objects/number/isfinite",
        "syntax": "Number.isFinite(value)",
        "type": "Number"
    },
    "isFrozen": {
        "descr": "The Object.isFrozen() determines if an object is frozen.",
        "name": "Object.isFrozen",
        "params": [
            {
                "descr": "The object which should be checked.",
                "name": "obj"
            }
        ],
        "path": "javascript/global_objects/object/isfrozen",
        "syntax": "Object.isFrozen(obj)",
        "type": "Object"
    },
    "isInteger": {
        "descr": "The Number.isInteger() method determines whether the passed value is an integer.",
        "name": "Number.isInteger",
        "params": [
            {
                "descr": "The value to be tested for being an integer.",
                "name": "value"
            }
        ],
        "path": "javascript/global_objects/number/isinteger",
        "syntax": "Number.isInteger(value)",
        "type": "Number"
    },
    "isNaN": {
        "descr": "The Number.isNaN() method determines whether the passed value is NaN and its type is Number. It is a more robust version of the original, global isNaN().",
        "name": "Number.isNaN",
        "params": [
            {
                "descr": "The value to be tested for NaN.",
                "name": "value"
            }
        ],
        "path": "javascript/global_objects/number/isnan",
        "syntax": "Number.isNaN(value)",
        "type": "Number"
    },
    "isPrototypeOf": {
        "descr": "The isPrototypeOf() method checks if an object exists in another object's prototype chain.",
        "name": "object.isPrototypeOf",
        "params": [
            {
                "descr": "The object whose prototype chain will be searched.",
                "name": "object"
            },
            {
                "descr": "A TypeError is thrown if prototypeObj is undefined or null.",
                "name": "TypeError"
            }
        ],
        "path": "javascript/global_objects/object/isprototypeof",
        "syntax": "prototypeObj.isPrototypeOf(object)",
        "type": "Object"
    },
    "isSafeInteger": {
        "descr": "The Number.isSafeInteger() method determines whether the provided value is a number that is a safe integer.",
        "name": "Number.isSafeInteger",
        "params": [
            {
                "descr": "The value to be tested for being a safe integer.",
                "name": "testValue"
            }
        ],
        "path": "javascript/global_objects/number/issafeinteger",
        "syntax": "Number.isSafeInteger(testValue)",
        "type": "Number"
    },
    "isSealed": {
        "descr": "The Object.isSealed() method determines if an object is sealed.",
        "name": "Object.isSealed",
        "params": [
            {
                "descr": "The object which should be checked.",
                "name": "obj"
            }
        ],
        "path": "javascript/global_objects/object/issealed",
        "syntax": "Object.isSealed(obj)",
        "type": "Object"
    },
    "isSecureContext": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "window.isSecureContext",
        "params": [],
        "path": "dom/window/issecurecontext",
        "syntax": "var isSecure = window.isSecureContext Examples Feature detection You can use feature detection to check whether they are in a secure context or not by using the isSecureContext boolean which is exposed on the global scope. if (window.isSecureContext) { // Page is a secure context so service workers are now available navigator.serviceWorker.register(\"/offline-worker.js\").then(function () { ... });\n or  });",
        "type": "Window"
    },
    "italics": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "string.italics",
        "params": [],
        "path": "javascript/global_objects/string/italics",
        "syntax": "str.italics()",
        "type": "String"
    },
    "jQuery": {
        "descr": "In the first formulation listed above, jQuery() — which can also be written as $() — searches through the DOM for any elements that match the provided selector and creates a new jQuery object that references these elements:",
        "name": "jQuery",
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression",
                "name": "selector"
            },
            {
                "descr": "Type: Element or jQuery  A DOM Element, Document, or jQuery to use as context",
                "name": "context"
            },
            {
                "descr": "Type: Element  A DOM element to wrap in a jQuery object.",
                "name": "element"
            },
            {
                "descr": "Type: Array  An array containing a set of DOM elements to wrap in a jQuery object.",
                "name": "elementArray"
            },
            {
                "descr": "Type: PlainObject  A plain object to wrap in a jQuery object.",
                "name": "object"
            },
            {
                "descr": "Type: jQuery  An existing jQuery object to clone.",
                "name": "selection"
            },
            {
                "descr": "Type: htmlString  A string of HTML to create on the fly. ",
                "name": "html"
            },
            {
                "descr": "Type: document  A document in which the new elements will be created.",
                "name": "ownerDocument"
            },
            {
                "descr": "Type: htmlString  A string defining a single, standalone, HTML element (e.g. ",
                "name": "html"
            },
            {
                "descr": "Type: PlainObject  An object of attributes, events, and methods to call on the newly-created element.",
                "name": "attributes"
            },
            {
                "descr": "Type: Function() The function to execute when the DOM is ready.",
                "name": "callback"
            }
        ],
        "path": "jquery/jquery",
        "syntax": "jQuery( selector [, context ] ) Returns: jQuery",
        "type": "Miscellaneous"
    },
    "jQuery.Callbacks": {
        "descr": "The $.Callbacks() function is internally used to provide the base functionality behind the jQuery $.ajax() and $.Deferred() components. It can be used as a similar base to define functionality for new components.",
        "name": "jQuery.Callbacks",
        "params": [
            {
                "descr": "Type: String  An optional list of space-separated flags that change how the callback list behaves.",
                "name": "flags"
            }
        ],
        "path": "jquery/jquery.callbacks",
        "syntax": "jQuery.Callbacks( flags ) Returns: Callbacks",
        "type": "Callbacks Object"
    },
    "jQuery.Deferred": {
        "descr": "The jQuery.Deferred() factory creates a new deferred object.",
        "name": "jQuery.Deferred",
        "params": [
            {
                "descr": "Type: Function( Deferred deferred )  A function that is called just before the constructor returns.",
                "name": "beforeStart"
            }
        ],
        "path": "jquery/jquery.deferred",
        "syntax": "jQuery.Deferred( [beforeStart ] ) Returns: Deferred",
        "type": "Deferred Object"
    },
    "jQuery.ajax": {
        "descr": "An object of numeric HTTP codes and functions to be called when the response has the corresponding code. For example, the following will alert when the response status is a 404:",
        "name": "jQuery.ajax",
        "params": [
            {
                "descr": "Type: String  A string containing the URL to which the request is sent.",
                "name": "url"
            },
            {
                "descr": "Type: PlainObject  A set of key/value pairs that configure the Ajax request. ",
                "name": "settings"
            },
            {
                "descr": "Type: PlainObject  A set of key/value pairs that configure the Ajax request. ",
                "name": "settings"
            },
            {
                "descr": "(default: true) Type: Boolean  By default, all requests are sent asynchronously (i.e. ",
                "name": "async"
            },
            {
                "descr": "Type: Function( jqXHR jqXHR, PlainObject settings ) A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. ",
                "name": "beforeSend"
            },
            {
                "descr": "(default: true, false for dataType 'script' and 'jsonp') Type: Boolean  If set to false, it will force requested pages not to be cached by the browser. ",
                "name": "cache"
            },
            {
                "descr": "Type: Function( jqXHR jqXHR, String textStatus ) A function to be called when the request finishes (after success and error callbacks are executed). ",
                "name": "complete"
            },
            {
                "descr": "Type: PlainObject  An object of string/regular-expression pairs that determine how jQuery will parse the response, given its content type. ",
                "name": "contents"
            },
            {
                "descr": "(default: 'application/x-www-form-urlencoded; charset=UTF-8') Type: Boolean or String  When sending data to the server, use this content type. ",
                "name": "contentType"
            },
            {
                "descr": "Type: PlainObject  This object will be the context of all Ajax-related callbacks. ",
                "name": "context"
            },
            {
                "descr": "(default: {\"* text\": window.String, \"text html\": true, \"text json\": jQuery.parseJSON, \"text xml\": jQuery.parseXML}) Type: PlainObject  An object containing dataType-to-dataType converters. ",
                "name": "converters"
            },
            {
                "descr": "(default: false for same-domain requests, true for cross-domain requests) Type: Boolean  If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to true. This allows, for example, server-side redirection to another domain. (version added: 1.5)",
                "name": "crossDomain"
            },
            {
                "descr": "Type: PlainObject or String or Array  Data to be sent to the server. ",
                "name": "data"
            },
            {
                "descr": "Type: Function( String data, String type ) => Anything  A function to be used to handle the raw response data of XMLHttpRequest. ",
                "name": "dataFilter"
            },
            {
                "descr": "(default: Intelligent Guess (xml, json, script, or html)) Type: String  The type of data that you're expecting back from the server. ",
                "name": "dataType"
            },
            {
                "descr": "Type: Function( jqXHR jqXHR, String textStatus, String errorThrown ) A function to be called if the request fails. ",
                "name": "error"
            },
            {
                "descr": "(default: true) Type: Boolean  Whether to trigger global Ajax event handlers for this request. ",
                "name": "global"
            },
            {
                "descr": "(default: {}) Type: PlainObject  An object of additional header key/value pairs to send along with requests using the XMLHttpRequest transport. ",
                "name": "headers"
            },
            {
                "descr": "(default: false) Type: Boolean  Allow the request to be successful only if the response has changed since the last request. ",
                "name": "ifModified"
            },
            {
                "descr": "(default: depends on current location protocol) Type: Boolean  Allow the current environment to be recognized as \"local,\" (e.g. ",
                "name": "isLocal"
            },
            {
                "descr": "Type: String or Boolean  Override the callback function name in a JSONP request. ",
                "name": "jsonp"
            },
            {
                "descr": "Type: String or Function() Specify the callback function name for a JSONP request. ",
                "name": "jsonpCallback"
            },
            {
                "descr": "(default: 'GET') Type: String  The HTTP method to use for the request (e.g. ",
                "name": "method"
            },
            {
                "descr": "Type: String  A mime type to override the XHR mime type. ",
                "name": "mimeType"
            },
            {
                "descr": "Type: String  A password to be used with XMLHttpRequest in response to an HTTP access authentication request.",
                "name": "password"
            },
            {
                "descr": "(default: true) Type: Boolean  By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type \"application/x-www-form-urlencoded\". If you want to send a DOMDocument, or other non-processed data, set this option to false.",
                "name": "processData"
            },
            {
                "descr": "Type: String  Only applies when the \"script\" transport is used (e.g., cross-domain requests with \"jsonp\" or \"script\" dataType and \"GET\" type). ",
                "name": "scriptCharset"
            },
            {
                "descr": "(default: {}) Type: PlainObject   An object of numeric HTTP codes and functions to be called when the response has the corresponding code. ",
                "name": "statusCode"
            },
            {
                "descr": "Type: Function( Anything data, String textStatus, jqXHR jqXHR ) A function to be called if the request succeeds. ",
                "name": "success"
            },
            {
                "descr": "Type: Number  Set a timeout (in milliseconds) for the request. ",
                "name": "timeout"
            },
            {
                "descr": "Type: Boolean  Set this to true if you wish to use the traditional style of param serialization.",
                "name": "traditional"
            },
            {
                "descr": "(default: 'GET') Type: String  An alias for method. ",
                "name": "type"
            },
            {
                "descr": "(default: The current page) Type: String   A string containing the URL to which the request is sent.",
                "name": "url"
            },
            {
                "descr": "Type: String  A username to be used with XMLHttpRequest in response to an HTTP access authentication request.",
                "name": "username"
            },
            {
                "descr": "(default: ActiveXObject when available (IE), the XMLHttpRequest otherwise) Type: Function() Callback for creating the XMLHttpRequest object. ",
                "name": "xhr"
            },
            {
                "descr": "Type: PlainObject   An object of fieldName-fieldValue pairs to set on the native XHR object. ",
                "name": "xhrFields"
            }
        ],
        "path": "jquery/jquery.ajax",
        "syntax": "jQuery.ajax( url [, settings ] ) Returns: jqXHR",
        "type": "Ajax"
    },
    "jQuery.ajaxPrefilter": {
        "descr": "A typical prefilter registration using $.ajaxPrefilter() looks like this:",
        "name": "jQuery.ajaxPrefilter",
        "params": [
            {
                "descr": "Type: String  An optional string containing one or more space-separated dataTypes",
                "name": "dataTypes"
            },
            {
                "descr": "Type: Function( PlainObject options, PlainObject originalOptions, jqXHR jqXHR ) A handler to set default values for future Ajax requests.",
                "name": "handler"
            }
        ],
        "path": "jquery/jquery.ajaxprefilter",
        "syntax": "jQuery.ajaxPrefilter( [dataTypes ], handler ) Returns: undefined",
        "type": "Ajax"
    },
    "jQuery.ajaxSetup": {
        "descr": "For details on the settings available for $.ajaxSetup(), see $.ajax().",
        "name": "jQuery.ajaxSetup",
        "params": [
            {
                "descr": "Type: PlainObject  A set of key/value pairs that configure the default Ajax request. ",
                "name": "options"
            }
        ],
        "path": "jquery/jquery.ajaxsetup",
        "syntax": "jQuery.ajaxSetup( options ) Returns: PlainObject",
        "type": "Ajax"
    },
    "jQuery.ajaxTransport": {
        "descr": "A transport is an object that provides two methods, send and abort, that are used internally by $.ajax() to issue requests. A transport is the most advanced way to enhance $.ajax() and should be used only as a last resort when prefilters and converters are insufficient.",
        "name": "jQuery.ajaxTransport",
        "params": [
            {
                "descr": "Type: String  A string identifying the data type to use",
                "name": "dataType"
            },
            {
                "descr": "Type: Function( PlainObject options, PlainObject originalOptions, jqXHR jqXHR ) A handler to return the new transport object to use with the data type provided in the first argument.",
                "name": "handler"
            }
        ],
        "path": "jquery/jquery.ajaxtransport",
        "syntax": "jQuery.ajaxTransport( dataType, handler ) Returns: undefined",
        "type": "Ajax"
    },
    "jQuery.browser": {
        "descr": "The $.browser property provides information about the web browser that is accessing the page, as reported by the browser itself. It contains flags for each of the four most prevalent browser classes (Internet Explorer, Mozilla, Webkit, and Opera) as well as version information.",
        "name": "jQuery.browser",
        "params": [],
        "path": "jquery/jquery.browser",
        "syntax": "jQuery.browserReturns: PlainObjectversion deprecated: 1.3, removed: 1.9   Description: Contains flags for the useragent, read from navigator.userAgent. This property was removed in jQuery 1.9 and is available only through the jQuery.migrate plugin. Please try to use feature detection instead.  version added: 1.0jQuery.browser  The $.browser property provides information about the web browser that is accessing the page, as reported by the browser itself. It contains flags for each of the four most prevalent browser classes (Internet Explorer, Mozilla, Webkit, and Opera) as well as version information.",
        "type": "Utilities"
    },
    "jQuery.contains": {
        "descr": "The $.contains() method returns true if the DOM element provided by the second argument is a descendant of the DOM element provided by the first argument, whether it is a direct child or nested more deeply. Otherwise, it returns false. Only element nodes are supported; if the second argument is a text or comment node, $.contains() will return false.",
        "name": "jQuery.contains",
        "params": [
            {
                "descr": "Type: Element  The DOM element that may contain the other element.",
                "name": "container"
            },
            {
                "descr": "Type: Element  The DOM element that may be contained by (a descendant of) the other element.",
                "name": "contained"
            }
        ],
        "path": "jquery/jquery.contains",
        "syntax": "jQuery.contains( container, contained ) Returns: Boolean",
        "type": "Utilities"
    },
    "jQuery.cssHooks": {
        "descr": "The $.cssHooks object provides a way to define functions for getting and setting particular CSS values. It can also be used to create new cssHooks for normalizing CSS3 features such as box shadows and gradients.",
        "name": "jQuery.cssHooks",
        "params": [],
        "path": "jquery/jquery.csshooks",
        "syntax": "jQuery.cssHooksReturns: Object   Description: Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties.  version added: 1.4.3jQuery.cssHooks  The $.cssHooks object provides a way to define functions for getting and setting particular CSS values. It can also be used to create new cssHooks for normalizing CSS3 features such as box shadows and gradients.  For example, some versions of Webkit-based browsers require -webkit-border-radius to set the border-radius on an element, while earlier Firefox versions require -moz-border-radius. A css hook can normalize these vendor-prefixed properties to let .css()",
        "type": "Miscellaneous"
    },
    "jQuery.cssNumber": {
        "descr": "You can think about jQuery.cssNumber as a list of all CSS properties you might use without a unit. It's used by .css() to determine if it needs to add px to unitless values.",
        "name": "jQuery.cssNumber",
        "params": [],
        "path": "jquery/jquery.cssnumber",
        "syntax": "jQuery.cssNumberReturns: Object   Description: An object containing all CSS properties that may be used without a unit. The .css()",
        "type": "Manipulation"
    },
    "jQuery.data": {
        "descr": "Note: This is a low-level method; a more convenient .data() is also available.",
        "name": "jQuery.data",
        "params": [
            {
                "descr": "Type: Element  The DOM element to associate with the data.",
                "name": "element"
            },
            {
                "descr": "Type: String  A string naming the piece of data to set.",
                "name": "key"
            },
            {
                "descr": "Type: Anything  The new data value; this can be any Javascript type except undefined.",
                "name": "value"
            },
            {
                "descr": "Type: Element  The DOM element to query for the data.",
                "name": "element"
            },
            {
                "descr": "Type: String  Name of the data stored.",
                "name": "key"
            },
            {
                "descr": "Type: Element  The DOM element to query for the data.",
                "name": "element"
            }
        ],
        "path": "jquery/jquery.data",
        "syntax": "jQuery.data( element, key, value ) Returns: Object",
        "type": "Data"
    },
    "jQuery.dequeue": {
        "descr": "Note: This is a low-level method, you should probably use .dequeue() instead.",
        "name": "jQuery.dequeue",
        "params": [
            {
                "descr": "Type: Element  A DOM element from which to remove and execute a queued function.",
                "name": "element"
            },
            {
                "descr": "Type: String  A string containing the name of the queue. ",
                "name": "queueName"
            }
        ],
        "path": "jquery/jquery.dequeue",
        "syntax": "jQuery.dequeue( element [, queueName ] ) Returns: undefined",
        "type": "Data"
    },
    "jQuery.each": {
        "descr": "The $.each() function is not the same as $(selector).each(), which is used to iterate, exclusively, over a jQuery object. The $.each() function can be used to iterate over any collection, whether it is an object or an array. In the case of an array, the callback is passed an array index and a corresponding array value each time. (The value can also be accessed through the this keyword, but Javascript will always wrap the this value as an Object even if it is a simple string or number value.) The method returns its first argument, the object that was iterated.",
        "name": "jQuery.each",
        "params": [
            {
                "descr": "Type: ArrayLikeObject  The array or array-like object to iterate over.",
                "name": "array"
            },
            {
                "descr": "Type: Function( Integer indexInArray, Object value ) The function that will be executed on every value.",
                "name": "callback"
            },
            {
                "descr": "Type: Object  The object to iterate over.",
                "name": "object"
            },
            {
                "descr": "Type: Function( String propertyName, Object valueOfProperty ) The function that will be executed on every value.",
                "name": "callback"
            }
        ],
        "path": "jquery/jquery.each",
        "syntax": "jQuery.each( array, callback ) Returns: Object",
        "type": "Utilities"
    },
    "jQuery.error": {
        "descr": "This method exists primarily for plugin developers who wish to override it and provide a better display (or more information) for the error messages.",
        "name": "jQuery.error",
        "params": [
            {
                "descr": "Type: String  The message to send out.",
                "name": "message"
            }
        ],
        "path": "jquery/jquery.error",
        "syntax": "jQuery.error( message ) Returns:",
        "type": "Miscellaneous"
    },
    "jQuery.escapeSelector": {
        "descr": "This method is useful for situations where a class name or an ID contains characters that have a special meaning in CSS, such as the dot or the semicolon.",
        "name": "jQuery.escapeSelector",
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to escape.",
                "name": "selector"
            }
        ],
        "path": "jquery/jquery.escapeselector",
        "syntax": "jQuery.escapeSelector( selector ) Returns: Selector",
        "type": "Miscellaneous"
    },
    "jQuery.extend": {
        "descr": "When two or more object arguments are supplied to $.extend(), properties from all of the objects are added to the target object. Arguments that are null or undefined are ignored.",
        "name": "jQuery.extend",
        "params": [
            {
                "descr": "Type: Object   An object that will receive the new properties if additional objects are passed in or that will extend the jQuery namespace if it is the sole argument.",
                "name": "target"
            },
            {
                "descr": "Type: Object  An object containing additional properties to merge in.",
                "name": "object1"
            },
            {
                "descr": "Type: Object  Additional objects containing properties to merge in.",
                "name": "objectN"
            },
            {
                "descr": "Type: Boolean  If true, the merge becomes recursive (aka. ",
                "name": "deep"
            },
            {
                "descr": "Type: Object  The object to extend. ",
                "name": "target"
            },
            {
                "descr": "Type: Object  An object containing additional properties to merge in.",
                "name": "object1"
            },
            {
                "descr": "Type: Object  Additional objects containing properties to merge in.",
                "name": "objectN"
            }
        ],
        "path": "jquery/jquery.extend",
        "syntax": "jQuery.extend( target [, object1 ] [, objectN ] ) Returns: Object",
        "type": "Utilities"
    },
    "jQuery.fn.extend": {
        "descr": "Add two methods to the jQuery prototype ($.fn) object and then use one of them.",
        "name": "jQuery.fn.extend",
        "params": [
            {
                "descr": "Type: Object  An object to merge onto the jQuery prototype.",
                "name": "object"
            }
        ],
        "path": "jquery/jquery.fn.extend",
        "syntax": "jQuery.fn.extend( object ) Returns: Object",
        "type": "Utilities"
    },
    "jQuery.fx.interval": {
        "descr": "This property is deprecated as of version 3.0, and has no effect in browsers that support the requestAnimationFrame method.",
        "name": "jQuery.fx.interval",
        "params": [],
        "path": "jquery/jquery.fx.interval",
        "syntax": "jQuery.fx.intervalReturns: Numberversion deprecated: 3.0   Description: The rate (in milliseconds) at which animations fire.",
        "type": "Effects"
    },
    "jQuery.fx.off": {
        "descr": "When this property is set to true, all animation methods will immediately set elements to their final state when called, rather than displaying an effect. This may be desirable for a couple reasons:",
        "name": "jQuery.fx.off",
        "params": [],
        "path": "jquery/jquery.fx.off",
        "syntax": "jQuery.fx.offReturns: Boolean   Description: Globally disable all animations.  version added: 1.3jQuery.fx.off  When this property is set to true, all animation methods will immediately set elements to their final state when called, rather than displaying an effect. This may be desirable for a couple reasons:  jQuery is being used on a low-resource device. Users are encountering accessibility problems with the animations.  Animations can be turned back on by setting the property to false.  Example:  Toggle animation on and off <!doctype html> <html lang=\"en\"> <head> <meta charset=\"utf-8\"> <title>jQuery.fx.off demo</title> <style> div { width: 50px; height: 30px; margin: 5px; float: left; background: green; } </style> <script src=\"https://code.jquery.com/jquery-1.10.2.js\"></script> </head> <body> <input type=\"button\" value=\"Run\"> <button>Toggle fx</button> <div></div> <script> var toggleFx = function() { $.fx.off = !$.fx.off; }; toggleFx();\n or  $( \"button\" ).click( toggleFx );\n or  $( \"input\" ).click(function() { $( \"div\" ).toggle( \"slow\" );\n or  });\n or  </script> </body> </html>);",
        "type": "Effects"
    },
    "jQuery.get": {
        "descr": "This is a shorthand Ajax function, which is equivalent to:",
        "name": "jQuery.get",
        "params": [
            {
                "descr": "Type: String  A string containing the URL to which the request is sent.",
                "name": "url"
            },
            {
                "descr": "Type: PlainObject or String  A plain object or string that is sent to the server with the request.",
                "name": "data"
            },
            {
                "descr": "Type: Function( PlainObject data, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. ",
                "name": "success"
            },
            {
                "descr": "Type: String  The type of data expected from the server. ",
                "name": "dataType"
            },
            {
                "descr": "Type: PlainObject  A set of key/value pairs that configure the Ajax request. ",
                "name": "settings"
            }
        ],
        "path": "jquery/jquery.get",
        "syntax": "jQuery.get( url [, data ] [, success ] [, dataType ] ) Returns: jqXHR",
        "type": "Ajax"
    },
    "jQuery.getJSON": {
        "descr": "This is a shorthand Ajax function, which is equivalent to:",
        "name": "jQuery.getJSON",
        "params": [
            {
                "descr": "Type: String  A string containing the URL to which the request is sent.",
                "name": "url"
            },
            {
                "descr": "Type: PlainObject or String  A plain object or string that is sent to the server with the request.",
                "name": "data"
            },
            {
                "descr": "Type: Function( PlainObject data, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds.",
                "name": "success"
            }
        ],
        "path": "jquery/jquery.getjson",
        "syntax": "jQuery.getJSON( url [, data ] [, success ] ) Returns: jqXHR",
        "type": "Ajax"
    },
    "jQuery.getScript": {
        "descr": "This is a shorthand Ajax function, which is equivalent to:",
        "name": "jQuery.getScript",
        "params": [
            {
                "descr": "Type: String  A string containing the URL to which the request is sent.",
                "name": "url"
            },
            {
                "descr": "Type: Function( String script, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds.",
                "name": "success"
            }
        ],
        "path": "jquery/jquery.getscript",
        "syntax": "jQuery.getScript( url [, success ] ) Returns: jqXHR",
        "type": "Ajax"
    },
    "jQuery.globalEval": {
        "descr": "This method behaves differently from using a normal JavaScript eval() in that it's executed within the global context (which is important for loading external scripts dynamically).",
        "name": "jQuery.globalEval",
        "params": [
            {
                "descr": "Type: String  The JavaScript code to execute.",
                "name": "code"
            }
        ],
        "path": "jquery/jquery.globaleval",
        "syntax": "jQuery.globalEval( code ) Returns: Anything",
        "type": "Utilities"
    },
    "jQuery.grep": {
        "descr": "The $.grep() method removes items from an array as necessary so that all remaining items pass a provided test. The test is a function that is passed an array item and the index of the item within the array. Only if the test returns true will the item be in the result array.",
        "name": "jQuery.grep",
        "params": [
            {
                "descr": "Type: ArrayLikeObject  The array-like object to search through.",
                "name": "array"
            },
            {
                "descr": "Type: Function( Object elementOfArray, Integer indexInArray ) => Boolean  The function to process each item against. ",
                "name": "function"
            },
            {
                "descr": "Type: Boolean  If \"invert\" is false, or not provided, then the function returns an array consisting of all elements for which \"callback\" returns true. ",
                "name": "invert"
            }
        ],
        "path": "jquery/jquery.grep",
        "syntax": "jQuery.grep( array, function [, invert ] ) Returns: Array",
        "type": "Utilities"
    },
    "jQuery.hasData": {
        "descr": "The jQuery.hasData() method provides a way to determine if an element currently has any values that were set using jQuery.data(). If there is no data object associated with an element, the method returns false; otherwise it returns true.",
        "name": "jQuery.hasData",
        "params": [
            {
                "descr": "Type: Element  A DOM element to be checked for data.",
                "name": "element"
            }
        ],
        "path": "jquery/jquery.hasdata",
        "syntax": "jQuery.hasData( element ) Returns: Boolean",
        "type": "Data"
    },
    "jQuery.holdReady": {
        "descr": "The $.holdReady() method allows the caller to delay jQuery's ready event. This advanced feature would typically be used by dynamic script loaders that want to load additional JavaScript such as jQuery plugins before allowing the ready event to occur, even though the DOM may be ready. This method must be called early in the document, such as in the <head> immediately after the jQuery script tag. Calling this method after the ready event has already fired will have no effect.",
        "name": "jQuery.holdReady",
        "params": [
            {
                "descr": "Type: Boolean  Indicates whether the ready hold is being requested or released",
                "name": "hold"
            }
        ],
        "path": "jquery/jquery.holdready",
        "syntax": "jQuery.holdReady( hold ) Returns: undefined",
        "type": "Events"
    },
    "jQuery.htmlPrefilter": {
        "descr": "This method rarely needs to be called directly. Instead, use it as an entry point to modify existing jQuery manipulation methods. For instance, to remove all <del> tags from incoming HTML strings, do this:",
        "name": "jQuery.htmlPrefilter",
        "params": [
            {
                "descr": "Type: String  The HTML string on which to operate.",
                "name": "html"
            }
        ],
        "path": "jquery/jquery.htmlprefilter",
        "syntax": "jQuery.htmlPrefilter( html ) Returns: String",
        "type": "Manipulation"
    },
    "jQuery.inArray": {
        "descr": "The $.inArray() method is similar to JavaScript's native .indexOf() method in that it returns -1 when it doesn't find a match. If the first element within the array matches value, $.inArray() returns 0.",
        "name": "jQuery.inArray",
        "params": [
            {
                "descr": "Type: Anything  The value to search for.",
                "name": "value"
            },
            {
                "descr": "Type: Array  An array through which to search.",
                "name": "array"
            },
            {
                "descr": "Type: Number  The index of the array at which to begin the search. ",
                "name": "fromIndex"
            }
        ],
        "path": "jquery/jquery.inarray",
        "syntax": "jQuery.inArray( value, array [, fromIndex ] ) Returns: Number",
        "type": "Utilities"
    },
    "jQuery.isArray": {
        "descr": "$.isArray() returns a Boolean indicating whether the object is a JavaScript array (not an array-like object, such as a jQuery object).",
        "name": "jQuery.isArray",
        "params": [
            {
                "descr": "Type: Object  Object to test whether or not it is an array.",
                "name": "obj"
            }
        ],
        "path": "jquery/jquery.isarray",
        "syntax": "jQuery.isArray( obj ) Returns: boolean",
        "type": "Utilities"
    },
    "jQuery.isEmptyObject": {
        "descr": "As of jQuery 1.4 this method checks both properties on the object itself and properties inherited from prototypes (in that it doesn't use hasOwnProperty). The argument should always be a plain JavaScript Object as other types of object (DOM elements, primitive strings/numbers, host objects) may not give consistent results across browsers. To determine if an object is a plain JavaScript object, use $.isPlainObject()",
        "name": "jQuery.isEmptyObject",
        "params": [
            {
                "descr": "Type: Object  The object that will be checked to see if it's empty.",
                "name": "object"
            }
        ],
        "path": "jquery/jquery.isemptyobject",
        "syntax": "jQuery.isEmptyObject( object ) Returns: Boolean",
        "type": "Utilities"
    },
    "jQuery.isFunction": {
        "descr": "As of jQuery 3.3, jQuery.isFunction() has been deprecated. In most cases, its use can be replaced by typeof x === \"function\".",
        "name": "jQuery.isFunction",
        "params": [
            {
                "descr": "Type: Anything  The value to be tested.",
                "name": "value"
            }
        ],
        "path": "jquery/jquery.isfunction",
        "syntax": "jQuery.isFunction( value ) Returns: booleanversion deprecated: 3.3",
        "type": "Utilities"
    },
    "jQuery.isNumeric": {
        "descr": "The $.isNumeric() method checks whether its argument represents a numeric value. If so, it returns true. Otherwise it returns false. The argument can be of any type.",
        "name": "jQuery.isNumeric",
        "params": [
            {
                "descr": "Type: Anything  The value to be tested.",
                "name": "value"
            }
        ],
        "path": "jquery/jquery.isnumeric",
        "syntax": "jQuery.isNumeric( value ) Returns: Boolean",
        "type": "Utilities"
    },
    "jQuery.isPlainObject": {
        "descr": "Note: Host objects (or objects used by browser host environments to complete the execution environment of ECMAScript) have a number of inconsistencies which are difficult to robustly feature detect cross-platform. As a result of this, $.isPlainObject() may evaluate inconsistently across browsers in certain instances.",
        "name": "jQuery.isPlainObject",
        "params": [
            {
                "descr": "Type: PlainObject  The object that will be checked to see if it's a plain object.",
                "name": "object"
            }
        ],
        "path": "jquery/jquery.isplainobject",
        "syntax": "jQuery.isPlainObject( object ) Returns: Boolean",
        "type": "Utilities"
    },
    "jQuery.isWindow": {
        "descr": "This is used in a number of places in jQuery to determine if we're operating against a browser window (such as the current window or an iframe).",
        "name": "jQuery.isWindow",
        "params": [
            {
                "descr": "Type: PlainObject  Object to test whether or not it is a window.",
                "name": "obj"
            }
        ],
        "path": "jquery/jquery.iswindow",
        "syntax": "jQuery.isWindow( obj ) Returns: booleanversion deprecated: 3.3",
        "type": "Utilities"
    },
    "jQuery.isXMLDoc": {
        "descr": "Check an object to see if it's in an XML document.",
        "name": "jQuery.isXMLDoc",
        "params": [
            {
                "descr": "Type: Element  The DOM node that will be checked to see if it's in an XML document.",
                "name": "node"
            }
        ],
        "path": "jquery/jquery.isxmldoc",
        "syntax": "jQuery.isXMLDoc( node ) Returns: Boolean",
        "type": "Utilities"
    },
    "jQuery.makeArray": {
        "descr": "Many methods, both in jQuery and in JavaScript in general, return objects that are array-like. For example, the jQuery factory function $() returns a jQuery object that has many of the properties of an array (a length, the [] array access operator, etc.), but is not exactly the same as an array and lacks some of an array's built-in methods (such as .pop() and .reverse()).",
        "name": "jQuery.makeArray",
        "params": [
            {
                "descr": "Type: PlainObject  Any object to turn into a native Array.",
                "name": "obj"
            }
        ],
        "path": "jquery/jquery.makearray",
        "syntax": "jQuery.makeArray( obj ) Returns: Array",
        "type": "Utilities"
    },
    "jQuery.map": {
        "descr": "If you wish to process a jQuery object — for example, $('div').map( callback ); — use .map() instead.",
        "name": "jQuery.map",
        "params": [
            {
                "descr": "Type: Array  The Array to translate.",
                "name": "array"
            },
            {
                "descr": "Type: Function( Object elementOfArray, Integer indexInArray ) => Object  The function to process each item against. ",
                "name": "callback"
            },
            {
                "descr": "Type: Object  The Object to translate.",
                "name": "object"
            },
            {
                "descr": "Type: Function( Object propertyOfObject, String key ) => Object  The function to process each item against. ",
                "name": "callback"
            }
        ],
        "path": "jquery/jquery.map",
        "syntax": "jQuery.map( array, callback ) Returns: Array",
        "type": "Utilities"
    },
    "jQuery.merge": {
        "descr": "The $.merge() operation forms an array that contains all elements from the two arrays. The orders of items in the arrays are preserved, with items from the second array appended. The $.merge() function is destructive. It alters the length and numeric index properties of the first object to include items from the second.",
        "name": "jQuery.merge",
        "params": [
            {
                "descr": "Type: ArrayLikeObject  The first array-like object to merge, the elements of second added.",
                "name": "first"
            },
            {
                "descr": "Type: ArrayLikeObject  The second array-like object to merge into the first, unaltered.",
                "name": "second"
            }
        ],
        "path": "jquery/jquery.merge",
        "syntax": "jQuery.merge( first, second ) Returns: Array",
        "type": "Utilities"
    },
    "jQuery.noConflict": {
        "descr": "Many JavaScript libraries use $ as a function or variable name, just as jQuery does. In jQuery's case, $ is just an alias for jQuery, so all functionality is available without using $. If you need to use another JavaScript library alongside jQuery, return control of $ back to the other library with a call to $.noConflict(). Old references of $ are saved during jQuery initialization; noConflict() simply restores them.",
        "name": "jQuery.noConflict",
        "params": [
            {
                "descr": "Type: Boolean  A Boolean indicating whether to remove all jQuery variables from the global scope (including jQuery itself).",
                "name": "removeAll"
            }
        ],
        "path": "jquery/jquery.noconflict",
        "syntax": "jQuery.noConflict( [removeAll ] ) Returns: Object",
        "type": "Miscellaneous"
    },
    "jQuery.noop": {
        "descr": "You can use this empty function when you wish to pass around a function that will do nothing.",
        "name": "jQuery.noop",
        "params": [],
        "path": "jquery/jquery.noop",
        "syntax": "jQuery.noop() Returns: undefined",
        "type": "Utilities"
    },
    "jQuery.now": {
        "descr": "The $.now() method is a shorthand for the number returned by the expression (new Date).getTime().",
        "name": "jQuery.now",
        "params": [],
        "path": "jquery/jquery.now",
        "syntax": "jQuery.now() Returns: Number",
        "type": "Utilities"
    },
    "jQuery.param": {
        "descr": "This function is used internally to convert form element values into a serialized string representation (See .serialize() for more information).",
        "name": "jQuery.param",
        "params": [
            {
                "descr": "Type: Array or PlainObject or jQuery  An array, a plain object, or a jQuery object to serialize.",
                "name": "obj"
            },
            {
                "descr": "Type: Array or PlainObject or jQuery  An array, a plain object, or a jQuery object to serialize.",
                "name": "obj"
            },
            {
                "descr": "Type: Boolean  A Boolean indicating whether to perform a traditional \"shallow\" serialization.",
                "name": "traditional"
            }
        ],
        "path": "jquery/jquery.param",
        "syntax": "jQuery.param( obj ) Returns: String",
        "type": "Ajax"
    },
    "jQuery.parseHTML": {
        "descr": "jQuery.parseHTML uses native methods to convert the string to a set of DOM nodes, which can then be inserted into the document. These methods do render all trailing or leading text (even if that's just whitespace). To prevent trailing/leading whitespace from being converted to text nodes you can pass the HTML string through jQuery.trim.",
        "name": "jQuery.parseHTML",
        "params": [
            {
                "descr": "Type: String  HTML string to be parsed",
                "name": "data"
            },
            {
                "descr": "(default: document) Type: Element  Document element to serve as the context in which the HTML fragment will be created",
                "name": "context"
            },
            {
                "descr": "(default: false) Type: Boolean  A Boolean indicating whether to include scripts passed in the HTML string",
                "name": "keepScripts"
            }
        ],
        "path": "jquery/jquery.parsehtml",
        "syntax": "jQuery.parseHTML( data [, context ] [, keepScripts ] ) Returns: Array",
        "type": "Utilities"
    },
    "jQuery.parseJSON": {
        "descr": "As of jQuery 3.0, $.parseJSON is deprecated. To parse JSON strings use the native JSON.parse method instead.",
        "name": "jQuery.parseJSON",
        "params": [
            {
                "descr": "Type: String  The JSON string to parse.",
                "name": "json"
            }
        ],
        "path": "jquery/jquery.parsejson",
        "syntax": "jQuery.parseJSON( json ) Returns: String or Number or Object or Array or Booleanversion deprecated: 3.0",
        "type": "Utilities"
    },
    "jQuery.parseXML": {
        "descr": "jQuery.parseXML uses the native parsing function of the browser to create a valid XML Document. This document can then be passed to jQuery to create a typical jQuery object that can be traversed and manipulated.",
        "name": "jQuery.parseXML",
        "params": [
            {
                "descr": "Type: String  a well-formed XML string to be parsed",
                "name": "data"
            }
        ],
        "path": "jquery/jquery.parsexml",
        "syntax": "jQuery.parseXML( data ) Returns: XMLDocument",
        "type": "Utilities"
    },
    "jQuery.post": {
        "descr": "This is a shorthand Ajax function, which is equivalent to:",
        "name": "jQuery.post",
        "params": [
            {
                "descr": "Type: String  A string containing the URL to which the request is sent.",
                "name": "url"
            },
            {
                "descr": "Type: PlainObject or String  A plain object or string that is sent to the server with the request.",
                "name": "data"
            },
            {
                "descr": "Type: Function( PlainObject data, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. ",
                "name": "success"
            },
            {
                "descr": "Type: String  The type of data expected from the server. ",
                "name": "dataType"
            },
            {
                "descr": "Type: PlainObject  A set of key/value pairs that configure the Ajax request. ",
                "name": "settings"
            }
        ],
        "path": "jquery/jquery.post",
        "syntax": "jQuery.post( url [, data ] [, success ] [, dataType ] ) Returns: jqXHR",
        "type": "Ajax"
    },
    "jQuery.proxy": {
        "descr": "This method is most useful for attaching event handlers to an element where the context is pointing back to a different object. Additionally, jQuery makes sure that even if you bind the function returned from jQuery.proxy() it will still unbind the correct function if passed the original.",
        "name": "jQuery.proxy",
        "params": [
            {
                "descr": "Type: Function() The function whose context will be changed.",
                "name": "function"
            },
            {
                "descr": "Type: PlainObject  The object to which the context (this) of the function should be set.",
                "name": "context"
            },
            {
                "descr": "Type: PlainObject  The object to which the context of the function should be set.",
                "name": "context"
            },
            {
                "descr": "Type: String  The name of the function whose context will be changed (should be a property of the context object).",
                "name": "name"
            },
            {
                "descr": "Type: Function() The function whose context will be changed.",
                "name": "function"
            },
            {
                "descr": "Type: PlainObject  The object to which the context (this) of the function should be set.",
                "name": "context"
            },
            {
                "descr": "Type: Anything  Any number of arguments to be passed to the function referenced in the function argument.",
                "name": "additionalArguments"
            },
            {
                "descr": "Type: PlainObject  The object to which the context of the function should be set.",
                "name": "context"
            },
            {
                "descr": "Type: String  The name of the function whose context will be changed (should be a property of the context object).",
                "name": "name"
            },
            {
                "descr": "Type: Anything  Any number of arguments to be passed to the function named in the name argument.",
                "name": "additionalArguments"
            }
        ],
        "path": "jquery/jquery.proxy",
        "syntax": "jQuery.proxy( function, context ) Returns: Function",
        "type": "Utilities"
    },
    "jQuery.queue": {
        "descr": "Note: This is a low-level method, you should probably use .queue() instead.",
        "name": "jQuery.queue",
        "params": [
            {
                "descr": "Type: Element  A DOM element to inspect for an attached queue.",
                "name": "element"
            },
            {
                "descr": "Type: String  A string containing the name of the queue. ",
                "name": "queueName"
            },
            {
                "descr": "Type: Element  A DOM element where the array of queued functions is attached.",
                "name": "element"
            },
            {
                "descr": "Type: String  A string containing the name of the queue. ",
                "name": "queueName"
            },
            {
                "descr": "Type: Array  An array of functions to replace the current queue contents.",
                "name": "newQueue"
            },
            {
                "descr": "Type: Element  A DOM element on which to add a queued function.",
                "name": "element"
            },
            {
                "descr": "Type: String  A string containing the name of the queue. ",
                "name": "queueName"
            },
            {
                "descr": "Type: Function() The new function to add to the queue.",
                "name": "callback"
            }
        ],
        "path": "jquery/jquery.queue",
        "syntax": "jQuery.queue( element [, queueName ] ) Returns: Array",
        "type": "Data"
    },
    "jQuery.ready": {
        "descr": "As of jQuery 3.0, use of this object is supported via jQuery.when or the native Promise.resolve(). Code should not make assumptions about whether this object is a jQuery.Deferred, native Promise, or some other type of promise object.",
        "name": "jQuery.ready",
        "params": [],
        "path": "jquery/jquery.ready",
        "syntax": "jQuery.readyReturns: Thenable   Description: A Promise-like object (or \"thenable\") that resolves when the document is ready.",
        "type": "Events"
    },
    "jQuery.readyException": {
        "descr": "This method is fired when an error is thrown synchronously in a function wrapped in jQuery() or jQuery( document ).ready(), or equivalent. By default it re-throws the error in a timeout so that it's logged in the console and passed to window.onerror instead of being swallowed. Overwrite this method if you want to handle such errors differently.",
        "name": "jQuery.readyException",
        "params": [
            {
                "descr": "Type: Error  An error thrown in the function wrapped in jQuery().",
                "name": "error"
            }
        ],
        "path": "jquery/jquery.readyexception",
        "syntax": "jQuery.readyException( error ) Returns: Selector",
        "type": "Miscellaneous"
    },
    "jQuery.removeData": {
        "descr": "Note: This is a low-level method, you should probably use .removeData() instead.",
        "name": "jQuery.removeData",
        "params": [
            {
                "descr": "Type: Element  A DOM element from which to remove data.",
                "name": "element"
            },
            {
                "descr": "Type: String  A string naming the piece of data to remove.",
                "name": "name"
            }
        ],
        "path": "jquery/jquery.removedata",
        "syntax": "jQuery.removeData( element [, name ] ) Returns: jQuery",
        "type": "Data"
    },
    "jQuery.speed": {
        "descr": "The $.speed() method provides a way to define properties, such as duration, easing, and queue, to use in a custom animation. By using it, you don't have to implement the logic that deals with default values and optional parameters.",
        "name": "jQuery.speed",
        "params": [
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.",
                "name": "duration"
            },
            {
                "descr": "Type: PlainObject     easing (default: swing) Type: String  A string indicating which easing function to use for the transition.",
                "name": "settings"
            },
            {
                "descr": "Type: Function() A function to call once the animation is complete.",
                "name": "complete"
            },
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.",
                "name": "duration"
            },
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.",
                "name": "easing"
            },
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.",
                "name": "complete"
            },
            {
                "descr": "Type: PlainObject     duration (default: 400) Type: Number or String  A string or number determining how long the animation will run.",
                "name": "settings"
            },
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.",
                "name": "easing"
            },
            {
                "descr": "Type: Function() A function to call once the animation is complete.",
                "name": "complete"
            }
        ],
        "path": "jquery/jquery.speed",
        "syntax": "jQuery.speed( [duration ] [, settings ] ) Returns: PlainObject",
        "type": "Effects"
    },
    "jQuery.sub": {
        "descr": "This method is deprecated as of jQuery 1.7 and will be moved to a plugin in jQuery 1.8.",
        "name": "jQuery.sub",
        "params": [],
        "path": "jquery/jquery.sub",
        "syntax": "jQuery.sub() Returns: jQueryversion deprecated: 1.7, removed: 1.9",
        "type": "Miscellaneous"
    },
    "jQuery.trim": {
        "descr": "The $.trim() function removes all newlines, spaces (including non-breaking spaces), and tabs from the beginning and end of the supplied string. If these whitespace characters occur in the middle of the string, they are preserved.",
        "name": "jQuery.trim",
        "params": [
            {
                "descr": "Type: String  The string to trim.",
                "name": "str"
            }
        ],
        "path": "jquery/jquery.trim",
        "syntax": "jQuery.trim( str ) Returns: String",
        "type": "Utilities"
    },
    "jQuery.type": {
        "descr": "A number of techniques are used to determine the exact return value for an object. The [[Class]] is determined as follows:",
        "name": "jQuery.type",
        "params": [
            {
                "descr": "Type: Anything  Object to get the internal JavaScript [[Class]] of.",
                "name": "obj"
            }
        ],
        "path": "jquery/jquery.type",
        "syntax": "jQuery.type( obj ) Returns: String",
        "type": "Utilities"
    },
    "jQuery.unique": {
        "descr": "As of jQuery 3.0, this method is deprecated and just an alias of jQuery.uniqueSort(). Please use that method instead.",
        "name": "jQuery.unique",
        "params": [
            {
                "descr": "Type: Array  The Array of DOM elements.",
                "name": "array"
            }
        ],
        "path": "jquery/jquery.unique",
        "syntax": "jQuery.unique( array ) Returns: Arrayversion deprecated: 3.0",
        "type": "Utilities"
    },
    "jQuery.uniqueSort": {
        "descr": "The $.uniqueSort() function searches through an array of objects, sorting the array, and removing any duplicate nodes. A node is considered a duplicate if it is the exact same node as one already in the array; two different nodes with identical attributes are not considered to be duplicates. This function only works on plain JavaScript arrays of DOM elements, and is chiefly used internally by jQuery. You probably will never need to use it.",
        "name": "jQuery.uniqueSort",
        "params": [
            {
                "descr": "Type: Array  The Array of DOM elements.",
                "name": "array"
            }
        ],
        "path": "jquery/jquery.uniquesort",
        "syntax": "jQuery.uniqueSort( array ) Returns: Array",
        "type": "Utilities"
    },
    "jQuery.when": {
        "descr": "If no arguments are passed to jQuery.when(), it will return a resolved Promise.",
        "name": "jQuery.when",
        "params": [
            {
                "descr": "Type: Deferred or Promise or Thenable  Zero or more Thenable objects.",
                "name": "deferreds"
            }
        ],
        "path": "jquery/jquery.when",
        "syntax": "jQuery.when( deferreds ) Returns: Promise",
        "type": "Deferred Object"
    },
    "join": {
        "descr": "The join() method creates and returns a new string by concatenating all of the elements in an array (or an array-like object), separated by commas or a specified separator string.",
        "name": "array.join",
        "params": [
            {
                "descr": "Specifies a string to separate each pair of adjacent elements of the array. ",
                "name": "separator Optional"
            }
        ],
        "path": "javascript/global_objects/array/join",
        "syntax": "arr.join([separator])",
        "type": "Array"
    },
    "jquery": {
        "descr": "The .jquery property is assigned to the jQuery prototype, commonly referred to by its alias $.fn. It is a string containing the version number of jQuery, such as \"1.5.0\" or \"1.4.4\".",
        "name": "jquery",
        "params": [],
        "path": "jquery/jquery-2",
        "syntax": "jqueryReturns: String   Description: A string containing the jQuery version number.  version added: 1.0jquery  The .jquery property is assigned to the jQuery prototype, commonly referred to by its alias $.fn. It is a string containing the version number of jQuery, such as \"1.5.0\" or \"1.4.4\".  Examples:  Determine if an object is a jQuery object var a = { what: \"A regular JS object\" }, b = $( \"body\" );\n or  if ( a.jquery ) { // Falsy, since it's undefined alert( \"a is a jQuery object!\" );\n or  } if ( b.jquery ) { // Truthy, since it's a string alert( \"b is a jQuery object!\" );\n or  });",
        "type": "Miscellaneous"
    },
    "keydown": {
        "descr": "This method is a shortcut for .on( \"keydown\", handler ) in the first and second variations, and .trigger( \"keydown\" ) in the third.",
        "name": "keydown",
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            },
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.",
                "name": "eventData"
            },
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            }
        ],
        "path": "jquery/keydown",
        "syntax": ".keydown( handler ) Returns: jQuery",
        "type": "Events"
    },
    "keypress": {
        "descr": "Note: as the keypress event isn't covered by any official specification, the actual behavior encountered when using it may differ across browsers, browser versions, and platforms.",
        "name": "keypress",
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            },
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.",
                "name": "eventData"
            },
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            }
        ],
        "path": "jquery/keypress",
        "syntax": ".keypress( handler ) Returns: jQuery",
        "type": "Events"
    },
    "keys": {
        "descr": "The Object.keys() method returns an array of a given object's own property names, in the same order as we get with a normal loop.",
        "name": "Object.keys",
        "params": [
            {
                "descr": "The object of which the enumerable's own properties are to be returned.",
                "name": "obj"
            }
        ],
        "path": "javascript/global_objects/object/keys",
        "syntax": "Object.keys(obj)",
        "type": "Object"
    },
    "keyup": {
        "descr": "This method is a shortcut for .on( \"keyup\", handler ) in the first two variations, and .trigger( \"keyup\" ) in the third.",
        "name": "keyup",
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            },
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.",
                "name": "eventData"
            },
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            }
        ],
        "path": "jquery/keyup",
        "syntax": ".keyup( handler ) Returns: jQuery",
        "type": "Events"
    },
    "label": {
        "descr": "The labeled statement can be used with break or continue statements. It is prefixing a statement with an identifier which you can refer to.",
        "name": "label",
        "params": [
            {
                "descr": "Any JavaScript identifier that is not a reserved word.",
                "name": "label"
            },
            {
                "descr": "A JavaScript statement. break can be used with any labeled statement, and continue can be used with looping labeled statements.",
                "name": "statement"
            }
        ],
        "path": "javascript/statements/label",
        "syntax": "label : statement   label Any JavaScript identifier that is not a reserved word. statement A JavaScript statement. break can be used with any labeled statement, and continue can be used with looping labeled statements.  Description You can use a label to identify a loop, and then use the break or continue statements to indicate whether a program should interrupt the loop or continue its execution. Note that JavaScript has no goto statement, you can only use labels with break or continue. In strict mode code, you can't use \"let\" as a label name. It will throw a SyntaxError (let is a reserved identifier).",
        "type": "Statements"
    },
    "last": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .last() method constructs a new jQuery object from the last element in that set.",
        "name": "last",
        "params": [],
        "path": "jquery/last",
        "syntax": ".last() Returns: jQuery",
        "type": "Traversing"
    },
    "lastIndex": {
        "descr": "The lastIndex is a read/write integer property of regular expression instances that specifies the index at which to start the next match.",
        "name": "regExp.lastIndex",
        "params": [],
        "path": "javascript/global_objects/regexp/lastindex",
        "syntax": "regExpObj.lastIndex Description This property is set only if the regular expression instance used the \"g\" flag to indicate a global search, or the \"y\" flag to indicate a sticky search. The following rules apply:  If lastIndex is greater than the length of the string, test()",
        "type": "RegExp"
    },
    "lastIndexOf": {
        "descr": "The lastIndexOf() method returns the index within the calling String object of the last occurrence of the specified value, searching backwards from fromIndex. Returns -1 if the value is not found.",
        "name": "string.lastIndexOf",
        "params": [
            {
                "descr": "A string representing the value to search for. ",
                "name": "searchValue"
            },
            {
                "descr": "The index of the last character in the string to be considered as the beginning of a match. ",
                "name": "fromIndex Optional"
            }
        ],
        "path": "javascript/global_objects/string/lastindexof",
        "syntax": "str.lastIndexOf(searchValue[, fromIndex])",
        "type": "String"
    },
    "length": {
        "descr": "The number of elements currently matched. The .size() method will return the same value.",
        "name": "length",
        "params": [],
        "path": "jquery/length",
        "syntax": "lengthReturns: Integer   Description: The number of elements in the jQuery object.  version added: 1.0length  The number of elements currently matched. The .size() method will return the same value.",
        "type": "Miscellaneous"
    },
    "let": {
        "descr": "The let statement declares a block scope local variable, optionally initializing it to a value.",
        "name": "let",
        "params": [
            {
                "descr": "The names of the variable or variables to declare. ",
                "name": "var1, var2, …, varN"
            },
            {
                "descr": "For each variable declared, you may optionally specify its initial value to any legal JavaScript expression.",
                "name": "value1, value2, …, valueN Optional"
            }
        ],
        "path": "javascript/statements/let",
        "syntax": "let var1 [= value1] [, var2 [= value2]] [, ..., varN [= valueN]; Parameters   var1, var2, …, varN  The names of the variable or variables to declare. Each must be a legal JavaScript identifier.  value1, value2, …, valueN Optional  For each variable declared, you may optionally specify its initial value to any legal JavaScript expression.  Description let allows you to declare variables that are limited in scope to the block, statement, or expression on which it is used. This is unlike the var keyword, which defines a variable globally, or locally to an entire function regardless of block scope. An explanation of why the name \"let\" was chosen can be found here. Scoping rules Variables declared by let have their scope in the block for which they are defined, as well as in any contained sub-blocks. In this way, let works very much like var. The main difference is that the scope of a var variable is the entire enclosing function: function varTest() { var x = 1; if (true) { var x = 2; // same variable! console.log(x);\n or  // 2 } console.log(x);\n or  // 2 } function letTest() { let x = 1; if (true) { let x = 2; // different variable console.log(x);\n or  // 2 } console.log(x);\n or  // 1 });",
        "type": "Statements"
    },
    "link": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "string.link",
        "params": [
            {
                "descr": "Any string that specifies the href attribute of the <a> tag; it should be a valid URL (relative or absolute), with any & characters escaped as &amp;, and any \" characters escaped as &quot;.",
                "name": "url"
            }
        ],
        "path": "javascript/global_objects/string/link",
        "syntax": "str.link(url)",
        "type": "String"
    },
    "live": {
        "descr": "As of jQuery 1.7, the .live() method is deprecated. Use .on() to attach event handlers. Users of older versions of jQuery should use .delegate() in preference to .live().",
        "name": "live",
        "params": [
            {
                "descr": "Type: String  A string containing a JavaScript event type, such as \"click\" or \"keydown.\" As of jQuery 1.4 the string can contain multiple, space-separated event types or custom event names.",
                "name": "events"
            },
            {
                "descr": "Type: Function( Event eventObject ) A function to execute at the time the event is triggered.",
                "name": "handler"
            },
            {
                "descr": "Type: String  A string containing a JavaScript event type, such as \"click\" or \"keydown.\" As of jQuery 1.4 the string can contain multiple, space-separated event types or custom event names.",
                "name": "events"
            },
            {
                "descr": "Type: PlainObject  An object containing data that will be passed to the event handler.",
                "name": "data"
            },
            {
                "descr": "Type: Function( Event eventObject ) A function to execute at the time the event is triggered.",
                "name": "handler"
            },
            {
                "descr": "Type: PlainObject  A plain object of one or more JavaScript event types and functions to execute for them.",
                "name": "events"
            }
        ],
        "path": "jquery/live",
        "syntax": ".live( events, handler ) Returns: jQueryversion deprecated: 1.7, removed: 1.9",
        "type": "Events"
    },
    "load": {
        "descr": "Note: Prior to jQuery 3.0, the event handling suite also had a method named .load(). Older versions of jQuery determined which method to fire based on the set of arguments passed to it.",
        "name": "load",
        "params": [
            {
                "descr": "Type: String  A string containing the URL to which the request is sent.",
                "name": "url"
            },
            {
                "descr": "Type: PlainObject or String  A plain object or string that is sent to the server with the request.",
                "name": "data"
            },
            {
                "descr": "Type: Function( String responseText, String textStatus, jqXHR jqXHR ) A callback function that is executed when the request completes.",
                "name": "complete"
            }
        ],
        "path": "jquery/load",
        "syntax": ".load( url [, data ] [, complete ] ) Returns: jQuery",
        "type": "Ajax"
    },
    "localStorage": {
        "descr": "The read-only localStorage property allows you to access a Storage object for the Document's origin; the stored data is saved across browser sessions. localStorage is similar to sessionStorage, except that while data stored in localStorage has no expiration time, data stored in sessionStorage gets cleared when the page session ends — that is, when the page is closed.",
        "name": "window.localStorage",
        "params": [
            {
                "descr": "The request violates a policy decision, or the origin is not a valid scheme/host/port tuple (this can happen if the origin uses the file: or data: scheme, for example). ",
                "name": "SecurityError"
            }
        ],
        "path": "dom/window/localstorage",
        "syntax": "myStorage = window.localStorage; Value A Storage object which can be used to access the current origin's local storage space. Exceptions  SecurityError The request violates a policy decision, or the origin is not a valid scheme/host/port tuple (this can happen if the origin uses the file: or data: scheme, for example). For example, the user may have their browser configured to deny permission to persist data for the specified origin.  Example",
        "type": "Window"
    },
    "localeCompare": {
        "descr": "The localeCompare() method returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.",
        "name": "string.localeCompare",
        "params": [
            {
                "descr": "The string against which the referring string is compared",
                "name": "compareString"
            },
            {
                "descr": "Optional. A string with a BCP 47 language tag, or an array of such strings. ",
                "name": "locales"
            },
            {
                "descr": "Whether numeric collation should be used, such that \"1\" < \"2\" < \"10\". ",
                "name": "kn"
            },
            {
                "descr": "Whether upper case or lower case should sort first. ",
                "name": "kf"
            },
            {
                "descr": "Optional. An object with some or all of the following properties:  localeMatcher The locale matching algorithm to use. ",
                "name": "options"
            },
            {
                "descr": "Whether the comparison is for sorting or for searching for matching strings. ",
                "name": "usage"
            },
            {
                "descr": "Which differences in the strings should lead to non-zero result values. ",
                "name": "sensitivity"
            },
            {
                "descr": "Whether punctuation should be ignored. ",
                "name": "ignorePunctuation"
            },
            {
                "descr": "Whether numeric collation should be used, such that \"1\" < \"2\" < \"10\". ",
                "name": "numeric"
            },
            {
                "descr": "Whether upper case or lower case should sort first. ",
                "name": "caseFirst"
            },
            {
                "descr": "occurs before compareStr",
                "name": "referenceStr"
            },
            {
                "descr": "occurs after compareStr",
                "name": "referenceStr"
            }
        ],
        "path": "javascript/global_objects/string/localecompare",
        "syntax": "referenceStr.localeCompare(compareString[, locales[, options]])",
        "type": "String"
    },
    "location": {
        "descr": "The Window.location read-only property returns a Location object with information about the current location of the document.",
        "name": "window.location",
        "params": [],
        "path": "dom/window/location",
        "syntax": "var oldLocation = location; location = newLocation;  Examples Basic Example alert(location);\n or  // alerts \"https://developer.mozilla.org/en-US/docs/Web/API/Window/location\");",
        "type": "Window"
    },
    "location.assign": {
        "descr": "The Location.assign() method causes the window to load and display the document at the URL specified.",
        "name": "location.assign",
        "params": [
            {
                "descr": "Is a DOMString containing the URL of the page to navigate to.",
                "name": "url"
            }
        ],
        "path": "dom/location/assign",
        "syntax": "location.assign(url);",
        "type": "Location"
    },
    "location.reload": {
        "descr": "The Location.reload() method reloads the current resource, like the Refresh button.",
        "name": "location.reload",
        "params": [
            {
                "descr": "A Boolean parameter. If true, the page will always reload from the server. ",
                "name": "forcedReload Optional"
            }
        ],
        "path": "dom/location/reload",
        "syntax": "object.reload(forcedReload);",
        "type": "Location"
    },
    "location.replace": {
        "descr": "The Location.replace() method replaces the current resource with the one at the provided URL. The difference from the assign() method is that after using replace() the current page will not be saved in session History, meaning the user won't be able to use the back button to navigate to it.",
        "name": "location.replace",
        "params": [
            {
                "descr": "Is a DOMString containing the URL of the page to navigate to.",
                "name": "url"
            }
        ],
        "path": "dom/location/replace",
        "syntax": "object.replace(url);",
        "type": "Location"
    },
    "map": {
        "descr": "If you wish to process a plain array or object, use the jQuery.map() instead.",
        "name": "map",
        "params": [
            {
                "descr": "Type: Function( Integer index, Element domElement ) => Object  A function object that will be invoked for each element in the current set.",
                "name": "callback"
            }
        ],
        "path": "jquery/map",
        "syntax": ".map( callback ) Returns: jQuery",
        "type": "Traversing"
    },
    "map.@@iterator": {
        "descr": "The map iterator function, which is the entries() function by default.",
        "name": "map.@@iterator",
        "params": [],
        "path": "javascript/global_objects/map/@@iterator",
        "syntax": "myMap[Symbol.iterator] Return value The map iterator function, which is the entries()",
        "type": "Map"
    },
    "map.@@toStringTag": {
        "descr": "The Map[@@toStringTag] property has an initial value of \"Map\".",
        "name": "map.@@toStringTag",
        "params": [],
        "path": "javascript/global_objects/map/@@tostringtag",
        "syntax": "Map[Symbol.toStringTag] Example Object.prototype.toString.call(new Map()) // \"[object Map]\"",
        "type": "Map"
    },
    "map.clear": {
        "descr": "The clear() method removes all elements from a Map object.",
        "name": "map.clear",
        "params": [],
        "path": "javascript/global_objects/map/clear",
        "syntax": "myMap.clear();",
        "type": "Map"
    },
    "map.delete": {
        "descr": "The delete() method removes the specified element from a Map object.",
        "name": "map.delete",
        "params": [
            {
                "descr": "The key of the element to remove from the Map object.",
                "name": "key"
            }
        ],
        "path": "javascript/global_objects/map/delete",
        "syntax": "myMap.delete(key);",
        "type": "Map"
    },
    "map.entries": {
        "descr": "The entries() method returns a new Iterator object that contains the [key, value] pairs for each element in the Map object in insertion order.",
        "name": "map.entries",
        "params": [],
        "path": "javascript/global_objects/map/entries",
        "syntax": "myMap.entries()",
        "type": "Map"
    },
    "map.forEach": {
        "descr": "The forEach() method executes a provided function once per each key/value pair in the Map object, in insertion order.",
        "name": "map.forEach",
        "params": [
            {
                "descr": "Function to execute for each element.",
                "name": "callback"
            },
            {
                "descr": "Value to use as this when executing callback.",
                "name": "thisArg"
            }
        ],
        "path": "javascript/global_objects/map/foreach",
        "syntax": "myMap.forEach(callback[, thisArg])",
        "type": "Map"
    },
    "map.get": {
        "descr": "The get() method returns a specified element from a Map object.",
        "name": "map.get",
        "params": [
            {
                "descr": "Required. The key of the element to return from the Map object.",
                "name": "key"
            }
        ],
        "path": "javascript/global_objects/map/get",
        "syntax": "myMap.get(key);",
        "type": "Map"
    },
    "map.has": {
        "descr": "The has() method returns a boolean indicating whether an element with the specified key exists or not.",
        "name": "map.has",
        "params": [
            {
                "descr": "Required. The key of the element to test for presence in the Map object.",
                "name": "key"
            },
            {
                "descr": "Returns true if an element with the specified key exists in the Map object; otherwise false.",
                "name": "Boolean"
            }
        ],
        "path": "javascript/global_objects/map/has",
        "syntax": "myMap.has(key);",
        "type": "Map"
    },
    "map.keys": {
        "descr": "The keys() method returns a new Iterator object that contains the keys for each element in the Map object in insertion order.",
        "name": "map.keys",
        "params": [],
        "path": "javascript/global_objects/map/keys",
        "syntax": "myMap.keys()",
        "type": "Map"
    },
    "map.set": {
        "descr": "The set() method adds or updates an element with a specified key and value to a Map object.",
        "name": "map.set",
        "params": [
            {
                "descr": "Required. The key of the element to add to the Map object.",
                "name": "key"
            },
            {
                "descr": "Required. The value of the element to add to the Map object.",
                "name": "value"
            }
        ],
        "path": "javascript/global_objects/map/set",
        "syntax": "myMap.set(key, value);",
        "type": "Map"
    },
    "map.size": {
        "descr": "The size accessor property returns the number of elements in a Map object.",
        "name": "map.size",
        "params": [],
        "path": "javascript/global_objects/map/size",
        "syntax": "size property was implemented as a Map.prototype.size()",
        "type": "Map"
    },
    "map.values": {
        "descr": "The values() method returns a new Iterator object that contains the values for each element in the Map object in insertion order.",
        "name": "map.values",
        "params": [],
        "path": "javascript/global_objects/map/values",
        "syntax": "myMap.values()",
        "type": "Map"
    },
    "match": {
        "descr": "The match() method retrieves the matches when matching a string against a regular expression.",
        "name": "string.match",
        "params": [
            {
                "descr": "A regular expression object. If a non-RegExp object obj is passed, it is implicitly converted to a RegExp by using new RegExp(obj). ",
                "name": "regexp"
            }
        ],
        "path": "javascript/global_objects/string/match",
        "syntax": "str.match(regexp)",
        "type": "String"
    },
    "matchMedia": {
        "descr": "Returns a new MediaQueryList object representing the parsed results of the specified media query string.",
        "name": "window.matchMedia",
        "params": [],
        "path": "dom/window/matchmedia",
        "syntax": "mql = window.matchMedia(mediaQueryString)",
        "type": "Window"
    },
    "mediaCapabilities.decodingInfo": {
        "descr": "The MediaCapabilities.decodingInfo() method, part of the Media Capabilities API, returns a promise with the tested media configuration's mediaCapabilitiesInfo; this contains the three Boolean properties supported, smooth, and powerefficient, which describe whether decoding the media described would be supported, smooth, and powerefficient.",
        "name": "mediaCapabilities.decodingInfo",
        "params": [
            {
                "descr": "A valid MediaDecodingConfiguration dictionary containing a valid media decoding type of file or media-source and a valid media configuration: either an AudioConfiguration or a VideoConfiguration.",
                "name": "MediaDecodingConfiguration"
            }
        ],
        "path": "dom/mediacapabilities/decodinginfo",
        "syntax": "mediaCapabilities.decodingInfo(MediaDecodingConfiguration)",
        "type": "Media"
    },
    "mediaCapabilities.encodingInfo": {
        "descr": "The MediaCapabilities.encodingInfo() method, part of the MediaCapabilities interface of the Media Capabilities API, returns a promise with the tested media configuration's MediaCapabilitiesInfo; this contains the three Boolean properties supported, smooth, and powerefficient, which describe how compatible the device is with the type of media.",
        "name": "mediaCapabilities.encodingInfo",
        "params": [
            {
                "descr": "A valid MediaEncodingConfiguration dictionary containing a valid media encoding type of record or transmission and a valid media configuration: either an AudioConfiguration or VideoConfiguration dictionary.",
                "name": "mediaEncodingConfiguration"
            }
        ],
        "path": "dom/mediacapabilities/encodinginfo",
        "syntax": "mediaCapabilities.encodingInfo(mediaEncodingConfiguration)",
        "type": "Media"
    },
    "mousedown": {
        "descr": "This method is a shortcut for .on( \"mousedown\", handler) in the first variation, and .trigger( \"mousedown\" ) in the second.",
        "name": "mousedown",
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            },
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.",
                "name": "eventData"
            },
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            }
        ],
        "path": "jquery/mousedown",
        "syntax": ".mousedown( handler ) Returns: jQuery",
        "type": "Events"
    },
    "mouseenter": {
        "descr": "This method is a shortcut for .on( \"mouseenter\", handler ) in the first two variations, and .trigger( \"mouseenter\" ) in the third.",
        "name": "mouseenter",
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            },
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.",
                "name": "eventData"
            },
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            }
        ],
        "path": "jquery/mouseenter",
        "syntax": ".mouseenter( handler ) Returns: jQuery",
        "type": "Events"
    },
    "mouseleave": {
        "descr": "This method is a shortcut for .on('mouseleave', handler) in the first two variations, and .trigger('mouseleave') in the third.",
        "name": "mouseleave",
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            },
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.",
                "name": "eventData"
            },
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            }
        ],
        "path": "jquery/mouseleave",
        "syntax": ".mouseleave( handler ) Returns: jQuery",
        "type": "Events"
    },
    "mousemove": {
        "descr": "This method is a shortcut for .on( \"mousemove\", handler ) in the first two variations, and .trigger( \"mousemove\" ) in the third.",
        "name": "mousemove",
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            },
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.",
                "name": "eventData"
            },
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            }
        ],
        "path": "jquery/mousemove",
        "syntax": ".mousemove( handler ) Returns: jQuery",
        "type": "Events"
    },
    "mouseout": {
        "descr": "This method is a shortcut for .on( \"mouseout\", handler ) in the first two variation, and .trigger( \"mouseout\" ) in the third.",
        "name": "mouseout",
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            },
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.",
                "name": "eventData"
            },
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            }
        ],
        "path": "jquery/mouseout",
        "syntax": ".mouseout( handler ) Returns: jQuery",
        "type": "Events"
    },
    "mouseover": {
        "descr": "This method is a shortcut for .on( \"mouseover\", handler ) in the first two variations, and .trigger( \"mouseover\" ) in the third.",
        "name": "mouseover",
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            },
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.",
                "name": "eventData"
            },
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            }
        ],
        "path": "jquery/mouseover",
        "syntax": ".mouseover( handler ) Returns: jQuery",
        "type": "Events"
    },
    "mouseup": {
        "descr": "This method is a shortcut for .on('mouseup', handler) in the first variation, and .trigger('mouseup') in the second.",
        "name": "mouseup",
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            },
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.",
                "name": "eventData"
            },
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            }
        ],
        "path": "jquery/mouseup",
        "syntax": ".mouseup( handler ) Returns: jQuery",
        "type": "Events"
    },
    "moveBy": {
        "descr": "Moves the current window by a specified amount.",
        "name": "window.moveBy",
        "params": [],
        "path": "dom/window/moveby",
        "syntax": "window.moveBy(deltaX, deltaY)",
        "type": "Window"
    },
    "moveTo": {
        "descr": "Moves the window to the specified coordinates.",
        "name": "window.moveTo",
        "params": [],
        "path": "dom/window/moveto",
        "syntax": "window.moveTo(x, y)",
        "type": "Window"
    },
    "name": {
        "descr": "A Function object's read-only name property indicates the function's name as specified when it was created, or \"anonymous\" for functions created anonymously.",
        "name": "function.name",
        "params": [],
        "path": "javascript/global_objects/function/name",
        "syntax": "new Function(...)",
        "type": "Function"
    },
    "navigator": {
        "descr": "The Navigator interface represents the state and the identity of the user agent. It allows scripts to query it and to register themselves to carry on some activities.",
        "name": "navigator",
        "params": [
            {
                "descr": "Returns an array containing every VRDisplay object that is currently presenting (VRDisplay.ispresenting is true).",
                "name": "Navigator.activeVRDisplays Read only"
            },
            {
                "descr": "Returns the internal \"code\" name of the current browser. ",
                "name": "NavigatorID.appCodeName Read only"
            },
            {
                "descr": "Returns a DOMString with the official name of the browser. ",
                "name": "NavigatorID.appName Read only"
            },
            {
                "descr": "Returns the version of the browser as a DOMString. ",
                "name": "NavigatorID.appVersion Read only"
            },
            {
                "descr": "Returns a BatteryManager object you can use to get information about the battery charging status.",
                "name": "Navigator.battery Read only"
            },
            {
                "descr": "Provides a NetworkInformation object containing information about the network connection of a device.",
                "name": "Navigator.connection Read only"
            },
            {
                "descr": "Returns false if setting a cookie will be ignored and true otherwise.",
                "name": "Navigator.cookieEnabled Read only"
            },
            {
                "descr": "Returns a Geolocation object allowing accessing the location of the device.",
                "name": "Navigator.geolocation Read only"
            },
            {
                "descr": "Returns the number of logical processor cores available.",
                "name": "NavigatorConcurrentHardware.hardwareConcurrency Read only"
            },
            {
                "descr": "Returns a Boolean flag indicating whether the host browser is Java-enabled or not.",
                "name": "NavigatorPlugins.javaEnabled Read only"
            },
            {
                "descr": "Returns a Keyboard object which provides access to functions that retrieve keyboard layout maps and toggle capturing of key presses from the physical keyboard.",
                "name": "Navigator.keyboard Read only"
            },
            {
                "descr": "Returns a DOMString representing the preferred language of the user, usually the language of the browser UI. ",
                "name": "NavigatorLanguage.language Read only"
            },
            {
                "descr": "Returns an array of DOMString representing the languages known to the user, by order of preference.",
                "name": "NavigatorLanguage.languages Read only"
            },
            {
                "descr": "Returns a LockManager object which provides methods for requesting a new Lock object and querying for an existing Lock object",
                "name": "Navigator.locks Read only"
            },
            {
                "descr": "Returns a MediaCapabilities object that can expose information about the decoding and encoding capabilities for a given format and output capabilities.",
                "name": "Navigator.mediaCapabilities Read only"
            },
            {
                "descr": "Returns the maximum number of simultaneous touch contact points are supported by the current device.",
                "name": "Navigator.maxTouchPoints Read only"
            },
            {
                "descr": "Returns an MimeTypeArray listing the MIME types supported by the browser.",
                "name": "NavigatorPlugins.mimeTypes Read only"
            },
            {
                "descr": "Returns a Boolean indicating whether the browser is working online.",
                "name": "NavigatorOnLine.onLine Read only"
            },
            {
                "descr": "Returns a string that represents the current operating system.",
                "name": "Navigator.oscpu"
            },
            {
                "descr": "Returns a Permissions object that can be used to query and update permission status of APIs covered by the Permissions API.",
                "name": "Navigator.permissions Read only"
            },
            {
                "descr": "Returns a string representing the platform of the browser. ",
                "name": "NavigatorID.platform Read only"
            },
            {
                "descr": "Returns a PluginArray listing the plugins installed in the browser.",
                "name": "NavigatorPlugins.plugins Read only"
            },
            {
                "descr": "Always returns 'Gecko', on any browser. ",
                "name": "NavigatorID.product Read only"
            },
            {
                "descr": "Returns a ServiceWorkerContainer object, which provides access to registration, removal, upgrade, and communication with the ServiceWorker objects for the associated document.",
                "name": "Navigator.serviceWorker Read only"
            },
            {
                "descr": "Returns the singleton StorageManager object used for managing persistance permissions and estimating available storage on a site-by-site/app-by-app basis.",
                "name": "NavigatorStorage.storage Read only"
            },
            {
                "descr": "Returns the user agent string for the current browser.",
                "name": "NavigatorID.userAgent Read only"
            },
            {
                "descr": "Indicates whether the user agent is controlled by automation.",
                "name": "Navigator.webdriver Read only"
            },
            {
                "descr": "Returns the build identifier of the browser. ",
                "name": "Navigator.buildID"
            },
            {
                "descr": "Returns the CredentialsContainer interface which exposes methods to request credentials and notify the user agent when interesting events occur such as successful sign in or sign out.",
                "name": "Navigator.credentials"
            },
            {
                "descr": "Returns the amount of device memory in gigabytes. ",
                "name": "Navigator.deviceMemory Read only"
            },
            {
                "descr": "Reports the value of the user's do-not-track preference. ",
                "name": "Navigator.doNotTrack"
            },
            {
                "descr": "Returns a reference to a MediaDevices object which can then be used to get information about available media devices (MediaDevices.enumerateDevices()), find out what constrainable properties are supported for media on the user's computer and user agent (MediaDevices.getSupportedConstraints()), and to request access to media using MediaDevices.getUserMedia().",
                "name": "Navigator.mediaDevices"
            },
            {
                "descr": "Returns a notification object you can use to deliver notifications to the user from your web application.",
                "name": "Navigator.mozNotification Deprecated since Gecko 22  Navigator.webkitNotification"
            },
            {
                "descr": "The Object, returned by the navigator.mozSocial property, is available within the social media provider's panel to provide functionality it may need.",
                "name": "Navigator.mozSocial"
            },
            {
                "descr": "Returns a reference to the Presentation API.",
                "name": "Navigator.presentation"
            },
            {
                "descr": "Returns the build number of the current browser (e.g., \"20060909\").",
                "name": "Navigator.productSub"
            },
            {
                "descr": "Returns an empty string. In Netscape 4.7x, returns \"US & CA domestic policy\" or \"Export policy\".",
                "name": "Navigator.securitypolicy"
            },
            {
                "descr": "Returns a boolean indicating whether the browser is running in standalone mode. ",
                "name": "Navigator.standalone"
            },
            {
                "descr": "Returns a StorageQuota interface which provides means to query and request storage usage and quota information.",
                "name": "Navigator.storageQuota Read only"
            },
            {
                "descr": "Returns the vendor name of the current browser (e.g., \"Netscape6\").",
                "name": "Navigator.vendor"
            },
            {
                "descr": "Returns the vendor version number (e.g. ",
                "name": "Navigator.vendorSub"
            },
            {
                "descr": "Returns a PointerLock object for the Mouse Lock API.",
                "name": "Navigator.webkitPointer"
            },
            {
                "descr": "Returns a promise that resolves to an array of VRDisplay objects representing any available VR devices connected to the computer.",
                "name": "Navigator.getVRDisplays()"
            },
            {
                "descr": "After having prompted the user for permission, returns the audio or video stream associated to a camera or microphone on the local computer.",
                "name": "Navigator.getUserMedia()"
            },
            {
                "descr": "Allows web sites to register themselves as a possible handler for a given MIME type.",
                "name": "Navigator.registerContentHandler() Obsolete since Gecko 59"
            },
            {
                "descr": "Allows web sites to register themselves as a possible handler for a given protocol.",
                "name": "Navigator.registerProtocolHandler()"
            },
            {
                "descr": "Returns a Promise for a MediaKeySystemAccess object.",
                "name": "Navigator.requestMediaKeySystemAccess()"
            },
            {
                "descr": "Used to asynchronously transfer a small amount of data using HTTP from the User Agent to a web server.",
                "name": "Navigator.sendBeacon()"
            },
            {
                "descr": "Invokes the native sharing mechanism of the current platform.",
                "name": "Navigator.share()"
            },
            {
                "descr": "Returns false. JavaScript taint/untaint functions removed in JavaScript 1.2.",
                "name": "NavigatorID.taintEnabled() Deprecated since Gecko 1.7.8 Obsolete since Gecko 9.0"
            },
            {
                "descr": "Causes vibration on devices with support for it. ",
                "name": "Navigator.vibrate()"
            },
            {
                "descr": "Lets code check to see if the document at a given URI is available without using the network.",
                "name": "Navigator.mozIsLocallyAvailable()"
            },
            {
                "descr": "Allows in-app payment.",
                "name": "Navigator.mozPay()"
            }
        ],
        "path": "dom/navigator",
        "syntax": "getVRDisplays   No   No   Available on all platforms behind a flag, but currently only works on desktop in an experimental version of Chrome (other builds won't return any devices when Navigator.getVRDisplays()",
        "type": "Navigator"
    },
    "navigator.activeVRDisplays": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "navigator.activeVRDisplays",
        "params": [],
        "path": "dom/navigator/activevrdisplays",
        "syntax": "var myActiveDisplays = navigator.activeVRDisplays; Value An array of VRDisplay objects. Examples function showActive() { var displays = navigator.activeVRDisplays; for(var i = 0; i < displays.length; i++) { console.log('Display ' + displays[i].displayId + ' is active.');\n or  } });",
        "type": "Navigator"
    },
    "navigator.battery": {
        "descr": "Obsolete since Gecko 50 (Firefox 50 / Thunderbird 50 / SeaMonkey 2.47)This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "navigator.battery",
        "params": [],
        "path": "dom/navigator/battery",
        "syntax": "var battery = navigator.battery; Specifications    Specification Status Comment     Battery Status APIThe definition of 'Navigator.battery' in that specification. Candidate Recommendation Initial definition    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   38  ?  16 — 50  16 — 50   Removed in favor of navigator.getBattery()",
        "type": "Navigator"
    },
    "navigator.buildID": {
        "descr": "Returns the build identifier of the browser. In modern browsers this property now returns a fixed timestamp as a privacy measure, e.g. 20181001000000 in Firefox 64 onwards.",
        "name": "navigator.buildID",
        "params": [],
        "path": "dom/navigator/buildid",
        "syntax": "buildID = navigator.buildID;  Value A string representing the build identifier of the application. The build ID is in the form YYYYMMDDHHMMSS. Example console.log(window.navigator.buildID);",
        "type": "Navigator"
    },
    "navigator.clipboard": {
        "descr": "The Clipboard API adds to the Navigator interface the read-only clipboard property, which returns the Clipboard object used to read and write the clipboard's contents. The Clipboard API can be used to implement cut, copy, and paste features within a web application.",
        "name": "navigator.clipboard",
        "params": [],
        "path": "dom/navigator/clipboard",
        "syntax": "theClipboard = navigator.clipboard;  Value The Clipboard object used to access the system clipboard. Examples The following code uses navigator.clipboard to access the system clipboard in order to read the contents of the clipboard. navigator.clipboard.readText().then( clipText => document.queryElementSelector(\".cliptext\").innerText = clipText);",
        "type": "Navigator"
    },
    "navigator.cookieEnabled": {
        "descr": "navigator.cookieEnabled returns a Boolean value that indicates whether cookies are enabled or not. The property is read-only.",
        "name": "navigator.cookieEnabled",
        "params": [],
        "path": "dom/navigator/cookieenabled",
        "syntax": "var cookieEnabled = navigator.cookieEnabled;    cookieEnabled is a Boolean: true or false.  Example if (!navigator.cookieEnabled) { // The browser does not support or is blocking cookies from being set. }",
        "type": "Navigator"
    },
    "navigator.credentials": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "navigator.credentials",
        "params": [],
        "path": "dom/navigator/credentials",
        "syntax": "var credentialsContainer = navigator.credentials Value The CredentialsContainer interface. Example if ('credentials' in navigator) { navigator.credentials.get({password: true}) .then(function(creds) { //Do something with the credentials. });\n or  } else { //Handle sign-in the way you did before. };);",
        "type": "Navigator"
    },
    "navigator.doNotTrack": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "navigator.doNotTrack",
        "params": [],
        "path": "dom/navigator/donottrack",
        "syntax": "dnt = navigator.doNotTrack;  The value reflects that of the do-not-track header, i.e. values of {\"1\", \"0\", \"unspecified\" }. Note: Prior to Gecko 32, Gecko used the values { \"yes\", \"no\", \"unspecified\"} (bug 887703).",
        "type": "Navigator"
    },
    "navigator.getBattery": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "navigator.getBattery",
        "params": [],
        "path": "dom/navigator/getbattery",
        "syntax": "var batteryPromise = navigator.getBattery();",
        "type": "Navigator"
    },
    "navigator.getVRDisplays": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "navigator.getVRDisplays",
        "params": [],
        "path": "dom/navigator/getvrdisplays",
        "syntax": "navigator.getVRDisplays().then(function(displays) { // Do something with the available VR displays });",
        "type": "Navigator"
    },
    "navigator.keyboard": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "navigator.keyboard",
        "params": [],
        "path": "dom/navigator/keyboard",
        "syntax": "var keyboard = navigator.keyboard Value A Keyboard object. Specifications    Specification Status Comment     UnknownThe definition of 'keyboard' in that specification. Unknown Initial definition.    Browser compatibility No compatibility data found. Please contribute data for \"api.navigator.keyboard\" (depth: 1) to the MDN compatibility data repository.",
        "type": "Navigator"
    },
    "navigator.maxTouchPoints": {
        "descr": "The maxTouchPoints read-only property of the Navigator interface returns the maximum number of simultaneous touch contact points are supported by the current device.",
        "name": "navigator.maxTouchPoints",
        "params": [],
        "path": "dom/navigator/maxtouchpoints",
        "syntax": "touchPoints = navigator.maxTouchPoints;  Example if (navigator.maxTouchPoints > 1) { // browser supports multi-touch }",
        "type": "Navigator"
    },
    "navigator.mediaCapabilities": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "navigator.mediaCapabilities",
        "params": [],
        "path": "dom/navigator/mediacapabilities",
        "syntax": "mediaCapabilitiesObj = globalObj.navigator.mediaCapabilities  Value A MediaCapabilities object. Examples navigator.mediaCapabilities.decodingInfo({ type : 'file', audio : { contentType : \"audio/mp3\", channels : 2, bitrate : 132700, samplerate : 5200 } }).then(function(result) { console.log('This configuration is ' + (result.supported ? '' : 'not ') + 'supported, ' + (result.smooth ? '' : 'not ') + 'smooth, and ' + (result.powerEfficient ? '' : 'not ') + 'power efficient.') });",
        "type": "Navigator"
    },
    "navigator.mediaDevices": {
        "descr": "The Navigator.mediaDevices read-only property returns a MediaDevices object, which provides access to connected media input devices like cameras and microphones, as well as screen sharing.",
        "name": "navigator.mediaDevices",
        "params": [],
        "path": "dom/navigator/mediadevices",
        "syntax": "var mediaDevices = navigator.mediaDevices;  Return value The MediaDevices singleton object. Usually, you just use this object's members directly, such as by calling navigator.mediaDevices.getUserMedia()",
        "type": "Navigator"
    },
    "navigator.oscpu": {
        "descr": "Returns a string that identifies the current operating system.",
        "name": "navigator.oscpu",
        "params": [],
        "path": "dom/navigator/oscpu",
        "syntax": "oscpuInfo = window.navigator.oscpu    oscpuInfo is a string that takes the following form:     Operating system  oscpuInfo string format   OS/2 OS/2 Warp x (either 3, 4 or 4.5)   Windows CE WindowsCE x.y1    Windows 64-bit (64-bit build) Windows NT x.y; Win64; x64   Windows 64-bit (32-bit build) Windows NT x.y; WOW64   Windows 32-bit Windows NT x.y   Mac OS X (PPC build) PPC Mac OS X x.y   Mac OS X (i386/x64 build) Intel Mac OS X x.y   Linux 64-bit (32-bit build) Output of uname -s plus \"i686 on x86_64\"   Linux Output of uname -sm    1x.y refers to the version of the operating system",
        "type": "Navigator"
    },
    "navigator.permissions": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "navigator.permissions",
        "params": [],
        "path": "dom/navigator/permissions",
        "syntax": "permissionsObj = globalObj.navigator.permissions  Value A Permissions object. Examples navigator.permissions.query({name:'geolocation'}).then(function(result) { if (result.state === 'granted') { showMap();\n or  } else if (result.state === 'prompt') { showButtonToEnableMap();\n or  } // Don't do anything if the permission was denied. });",
        "type": "Navigator"
    },
    "navigator.productSub": {
        "descr": "The Navigator.productSub read-only property returns the build number of the current browser.",
        "name": "navigator.productSub",
        "params": [],
        "path": "dom/navigator/productsub",
        "syntax": "prodSub = window.navigator.productSub   prodSub is a string.  Example <script> function prodsub() { var dt = document.getElementById(\"d\").childNodes[0]; dt.data = window.navigator.productSub; } </script> <button onclick=\"prodsub();\n or \">productSub</button> // returns: 20010725);",
        "type": "Navigator"
    },
    "navigator.registerContentHandler": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "navigator.registerContentHandler",
        "params": [],
        "path": "dom/navigator/registercontenthandler",
        "syntax": "navigator.registerContentHandler(mimeType, uri, title);",
        "type": "Navigator"
    },
    "navigator.registerProtocolHandler": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "navigator.registerProtocolHandler",
        "params": [
            {
                "descr": "The protocol the site wishes to handle, specified as a string. ",
                "name": "protocol"
            },
            {
                "descr": "The URL of the handler, as a string. ",
                "name": "url"
            },
            {
                "descr": "A user-readable title string for the protocol handler. ",
                "name": "title"
            },
            {
                "descr": "The user agent blocked registration of the protocol handler. ",
                "name": "SecurityError"
            },
            {
                "descr": "The \"%s\" string is missing from the specified protocol handler URL.",
                "name": "SyntaxError"
            }
        ],
        "path": "dom/navigator/registerprotocolhandler",
        "syntax": "navigator.registerProtocolHandler(protocol, url, title);",
        "type": "Navigator"
    },
    "navigator.requestMediaKeySystemAccess": {
        "descr": "The Navigator.requestMediaKeySystemAccess() method returns a Promise which delivers a MediaKeySystemAccess object that can be used to access a particular media key system, which can in turn be used to create keys for decrypting a media stream. This method is part of the Encrypted Media Extensions API, which brings support for encrypted media and DRM-protected video to the web.",
        "name": "navigator.requestMediaKeySystemAccess",
        "params": [
            {
                "descr": "A DOMString identifying the key system. ",
                "name": "keySystem"
            },
            {
                "descr": "A non-empty Array of MediaKeySystemConfiguration objects. ",
                "name": "supportedConfigurations"
            },
            {
                "descr": "A MediaKeySystemAccess object representing the media key system configuration described by keySystem and supportedConfigurations",
                "name": "mediaKeySystemAccess"
            },
            {
                "descr": "Either the specified keySystem isn't supported by the platform or the browser, or none of the configurations specified by supportedConfigurations can be satisfied (if, for example, none of the codecs specified in contentType are available).",
                "name": "NotSupportedError"
            },
            {
                "descr": "Either keySystem is an empty string or the supportedConfigurations array is empty.",
                "name": "TypeError"
            }
        ],
        "path": "dom/navigator/requestmediakeysystemaccess",
        "syntax": "​Promise = Navigator.requestMediaKeySystemAccess(keySystem, supportedConfigurations);",
        "type": "Navigator"
    },
    "navigator.sendBeacon": {
        "descr": "The navigator.sendBeacon() method can be used to asynchronously transfer a small amount of data over HTTP to a web server.",
        "name": "navigator.sendBeacon",
        "params": [
            {
                "descr": "The url parameter indicates the resolved URL to which the data is to be transmitted.",
                "name": "url"
            },
            {
                "descr": "The data parameter is an ArrayBufferView, Blob, DOMString, or FormData object containing the data to be transmitted.",
                "name": "data Optional"
            }
        ],
        "path": "dom/navigator/sendbeacon",
        "syntax": "navigator.sendBeacon(url [, data]);",
        "type": "Navigator"
    },
    "navigator.serviceWorker": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "navigator.serviceWorker",
        "params": [],
        "path": "dom/navigator/serviceworker",
        "syntax": "var workerContainerInstance = navigator.serviceWorker;  Value ServiceWorkerContainer  Examples This code checks if the browser supports service workers. if ('serviceWorker' in navigator) { // Supported! }",
        "type": "Navigator"
    },
    "navigator.share": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "navigator.share",
        "params": [
            {
                "descr": "An object containing data to share. ",
                "name": "data"
            }
        ],
        "path": "dom/navigator/share",
        "syntax": "var sharePromise = window.navigator.share(data);",
        "type": "Navigator"
    },
    "navigator.vendor": {
        "descr": "The value of the Navigator vendor property is always either \"Google Inc.\", \"Apple Computer, Inc.\", or (in Firefox) the empty string.",
        "name": "navigator.vendor",
        "params": [],
        "path": "dom/navigator/vendor",
        "syntax": "venString = window.navigator.vendor  Value  Either \"Google Inc.\", \"Apple Computer, Inc.\", or (in Firefox) the empty string.  Specifications",
        "type": "Navigator"
    },
    "navigator.vibrate": {
        "descr": "The Navigator.vibrate() method pulses the vibration hardware on the device, if such hardware exists. If the device doesn't support vibration, this method has no effect. If a vibration pattern is already in progress when this method is called, the previous pattern is halted and the new one begins instead.",
        "name": "navigator.vibrate",
        "params": [
            {
                "descr": "Provides a pattern of vibration and pause intervals. ",
                "name": "pattern"
            }
        ],
        "path": "dom/navigator/vibrate",
        "syntax": "var successBool = window.navigator.vibrate(pattern);",
        "type": "Navigator"
    },
    "navigatorConcurrentHardware.hardwareConcurrency": {
        "descr": "The navigator.hardwareConcurrency read-only property returns the number of logical processors available to run threads on the user's computer.",
        "name": "navigatorConcurrentHardware.hardwareConcurrency",
        "params": [],
        "path": "dom/navigatorconcurrenthardware/hardwareconcurrency",
        "syntax": "logicalProcessors = window.navigator.hardwareConcurrency  Value A Number indicating the number of logical processor cores. Modern computers have multiple physical processor cores in their CPU (two or four cores is typical), but each physical core is also usually able to run more than one thread at a time using advanced scheduling techniques. So a four-core CPU may offer eight logical processor cores, for example. The number of logical processor cores can be used to measure the number of threads which can effectively be run at once without them having to context switch.",
        "type": "Navigator"
    },
    "navigatorID.appVersion": {
        "descr": "Returns either \"4.0\" or a string representing version information about the browser.",
        "name": "navigatorID.appVersion",
        "params": [],
        "path": "dom/navigatorid/appversion",
        "syntax": "window.navigator.appVersion  Value Either \"4.0\" or a string representing version information about the browser. Example alert('Your browser version is reported as ' + navigator.appVersion);",
        "type": "Navigator"
    },
    "navigatorID.platform": {
        "descr": "Returns a string representing the platform of the browser. The specification allows browsers to always return the empty string, so don't rely on this property to get a reliable answer.",
        "name": "navigatorID.platform",
        "params": [],
        "path": "dom/navigatorid/platform",
        "syntax": "platform = navigator.platform  Value A DOMString identifying the platform on which the browser is running, or an empty string if the browser declines to (or is unable to) identify the platform. platform",
        "type": "Navigator"
    },
    "navigatorID.product": {
        "descr": "The value of the NavigatorID.product property is always \"Gecko\", in any browser.",
        "name": "navigatorID.product",
        "params": [],
        "path": "dom/navigatorid/product",
        "syntax": "productName = window.navigator.product  Value The string \"Gecko\". Example <script> function prod() { dt = document.getElementById('d');\n or  dt.innerHTML = window.navigator.product; } </script> <button onclick=\"prod();\n or \">product</button> <div id=\"d\"> </div> <!-- returns \"Gecko\" -->);",
        "type": "Navigator"
    },
    "navigatorID.userAgent": {
        "descr": "The NavigatorID.userAgent read-only property returns the user agent string for the current browser.",
        "name": "navigatorID.userAgent",
        "params": [],
        "path": "dom/navigatorid/useragent",
        "syntax": "var ua = window.navigator.userAgent;  Value ua stores the user agent string value of the current browser. The user agent string is built on a formal structure which can be decomposed into several pieces of info. Each of these pieces of info comes from other navigator properties which are also settable by the user. Gecko-based browsers comply with the following general structure: userAgent = appCodeName/appVersion number (Platform; Security; OS-or-CPU; Localization; rv: revision-version-number) product/productSub Application-Name Application-Name-version",
        "type": "Navigator"
    },
    "navigatorLanguage.language": {
        "descr": "The NavigatorLanguage.language read-only property returns a string representing the preferred language of the user, usually the language of the browser UI.",
        "name": "navigatorLanguage.language",
        "params": [],
        "path": "dom/navigatorlanguage/language",
        "syntax": "var lang = navigator.language  Value A DOMString. lang stores a string representing the language version as defined in BCP 47. Examples of valid language codes include \"en\", \"en-US\", \"fr\", \"fr-FR\", \"es-ES\", etc. Note that in Safari on macOS and iOS prior to 10.2, the country code returned is lowercase: \"en-us\", \"fr-fr\" etc. Example if (window.navigator.language != 'en') { doLangSelect(window.navigator.language);\n or  });",
        "type": "Navigator"
    },
    "navigatorLanguage.languages": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "navigatorLanguage.languages",
        "params": [],
        "path": "dom/navigatorlanguage/languages",
        "syntax": "preferredLanguages = globalObj.navigator.languages  Examples navigator.language //\"en-US\" navigator.languages //[\"en-US\", \"zh-CN\", \"ja-JP\"]  Specifications    Specification Status Comment     HTML Living StandardThe definition of 'NavigatorLanguage: languages' in that specification. Living Standard Initial definition    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   32   32   In Chrome, navigator.language is the language of the browser UI, and is not guaranteed to be equal to navigator.languages[0].    Yes  32   32   In Firefox, the navigator.languages property's value is taken from the intl.accept_languages preference.    11   11   Closest available (non-standard) properties are userLanguage",
        "type": "Navigator"
    },
    "navigatorOnLine.onLine": {
        "descr": "Returns the online status of the browser. The property returns a boolean value, with true meaning online and false meaning offline. The property sends updates whenever the browser's ability to connect to the network changes. The update occurs when the user follows links or when a script requests a remote page. For example, the property should return false when users click links soon after they lose internet connection.",
        "name": "navigatorOnLine.onLine",
        "params": [],
        "path": "dom/navigatoronline/online",
        "syntax": "online = window.navigator.onLine;  Value online is a boolean true or false. Example View  a live example. To check if you are online, query window.navigator.onLine, as in the following example: if (navigator.onLine) { console.log('online');\n or  } else { console.log('offline');\n or  });",
        "type": "Navigator"
    },
    "navigatorPlugins.javaEnabled": {
        "descr": "This method indicates whether the current browser is Java-enabled or not.",
        "name": "navigatorPlugins.javaEnabled",
        "params": [],
        "path": "dom/navigatorplugins/javaenabled",
        "syntax": "result = window.navigator.javaEnabled()",
        "type": "Navigator"
    },
    "navigatorPlugins.mimeTypes": {
        "descr": "Returns a MimeTypeArray object, which contains a list of MimeType objects representing the MIME types recognized by the browser.",
        "name": "navigatorPlugins.mimeTypes",
        "params": [],
        "path": "dom/navigatorplugins/mimetypes",
        "syntax": "var mimeTypes[] = navigator.mimeTypes;  mimeTypes is a MimeTypeArray object which has a length property as well as item(index)",
        "type": "Navigator"
    },
    "navigatorPlugins.plugins": {
        "descr": "Returns a PluginArray object, listing the Plugin objects describing the plugins installed in the application.",
        "name": "navigatorPlugins.plugins",
        "params": [],
        "path": "dom/navigatorplugins/plugins",
        "syntax": "var plugins = navigator.plugins;  plugins is PluginArray object used to access Plugin objects either by name or as a list of items. The returned value is not a JavaScript array, but has the length property and supports accessing individual items using bracket notation (plugins[2]), as well as via item(index)",
        "type": "Navigator"
    },
    "navigatorStorage.storage": {
        "descr": "Secure contextThis feature is available only in secure contexts (HTTPS), in some or all supporting browsers.",
        "name": "navigatorStorage.storage",
        "params": [],
        "path": "dom/navigatorstorage/storage",
        "syntax": "var storageManager = navigator.storage;  Value A StorageManager object you can use to maintain persistence for stored data, as well as to determine roughly how much room there is for data to be stored. Specifications    Specification Status Comment   StorageThe definition of 'navigator.storage' in that specification. Living Standard Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support  ?   ?   57   57   51Disabled   Disabled From version 51: this feature is behind the dom.storageManager.enabled preference (needs to be set to true). To change preferences in Firefox, visit about:config.    ?   42  ?        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support  ?   ?   Yes  51Disabled    51Disabled   Disabled From version 51: this feature is behind the dom.storageManager.enabled",
        "type": "Navigator"
    },
    "new": {
        "descr": "Thenew creates an instance of a user-defined object type or of one of the built-in object types that has a constructor function.",
        "name": "new",
        "params": [
            {
                "descr": "A class or function that specifies the type of the object instance.",
                "name": "constructor"
            },
            {
                "descr": "A list of values that the constructor will be called with.",
                "name": "arguments"
            }
        ],
        "path": "javascript/operators/new",
        "syntax": "new constructor[([arguments])]",
        "type": "Operators"
    },
    "new.target": {
        "descr": "Thenew.target property lets you detect whether a function or constructor was called using the new operator. In constructors and functions instantiated with the new operator, new.target returns a reference to the constructor or function. In normal function calls, new.target is undefined.",
        "name": "new.target",
        "params": [],
        "path": "javascript/operators/new.target",
        "syntax": "new.target Description The new.target syntax consists of the keyword \"new\", a dot, and a property name \"target\". Normally \"new.\" serves as the context for a property access, but here \"new.\" is not really an object. In constructor calls, however, new.target refers to the constructor invoked by new and so \"new.\" becomes a virtual context. The new.target property is a meta property that is available to all functions. In arrow functions, new.target refers to the new.target of the surrounding function. Examples new.target in function calls In normal function calls (as opposed to constructor function calls), new.target",
        "type": "Operators"
    },
    "next": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .next() method allows us to search through the immediately following sibling of these elements in the DOM tree and construct a new jQuery object from the matching elements.",
        "name": "next",
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.",
                "name": "selector"
            }
        ],
        "path": "jquery/next",
        "syntax": ".next( [selector ] ) Returns: jQuery",
        "type": "Traversing"
    },
    "nextAll": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .nextAll() method allows us to search through the successors of these elements in the DOM tree and construct a new jQuery object from the matching elements.",
        "name": "nextAll",
        "params": [
            {
                "descr": "Type: String  A string containing a selector expression to match elements against.",
                "name": "selector"
            }
        ],
        "path": "jquery/nextall",
        "syntax": ".nextAll( [selector ] ) Returns: jQuery",
        "type": "Traversing"
    },
    "nextUntil": {
        "descr": "Given a selector expression that represents a set of DOM elements, the .nextUntil() method searches through the successors of these elements in the DOM tree, stopping when it reaches an element matched by the method's argument. The new jQuery object that is returned contains all following siblings up to but not including the one matched by the .nextUntil() argument.",
        "name": "nextUntil",
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to indicate where to stop matching following sibling elements.",
                "name": "selector"
            },
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.",
                "name": "filter"
            },
            {
                "descr": "Type: Element or jQuery  A DOM node or jQuery object indicating where to stop matching following sibling elements.",
                "name": "element"
            },
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.",
                "name": "filter"
            }
        ],
        "path": "jquery/nextuntil",
        "syntax": ".nextUntil( [selector ] [, filter ] ) Returns: jQuery",
        "type": "Traversing"
    },
    "normalize": {
        "descr": "The normalize() method returns the Unicode Normalization Form of a given string (if the value isn't a string, it will be converted to one first).",
        "name": "string.normalize",
        "params": [
            {
                "descr": "One of \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", specifying the Unicode Normalization Form. ",
                "name": "form"
            },
            {
                "descr": "A RangeError is thrown if form isn't one of the values specified above.",
                "name": "RangeError"
            }
        ],
        "path": "javascript/global_objects/string/normalize",
        "syntax": "str.normalize([form])",
        "type": "String"
    },
    "not": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .not() method constructs a new jQuery object from a subset of the matching elements. The supplied selector is tested against each element; the elements that don't match the selector will be included in the result.",
        "name": "not",
        "params": [
            {
                "descr": "Type: Selector or Element or Array  A string containing a selector expression, a DOM element, or an array of elements to match against the set.",
                "name": "selector"
            },
            {
                "descr": "Type: Function( Integer index, Element element ) => Boolean  A function used as a test for each element in the set. ",
                "name": "function"
            },
            {
                "descr": "Type: jQuery  An existing jQuery object to match the current set of elements against.",
                "name": "selection"
            }
        ],
        "path": "jquery/not",
        "syntax": ".not( selector ) Returns: jQuery",
        "type": "Traversing"
    },
    "now": {
        "descr": "The Date.now() method returns the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC.",
        "name": "Date.now",
        "params": [],
        "path": "javascript/global_objects/date/now",
        "syntax": "var timeInMs = Date.now();",
        "type": "Date"
    },
    "null": {
        "descr": "The value null represents the intentional absence of any object value. It is one of JavaScript's primitive values.",
        "name": "null",
        "params": [],
        "path": "javascript/global_objects/null",
        "syntax": "null Description The value null is written with a literal: null. null is not an identifier for a property of the global object, like undefined can be. Instead, null expresses a lack of identification, indicating that a variable points to no object. In APIs, null is often retrieved in a place where an object can be expected but no object is relevant.  // foo does not exist. It is not defined and has never been initialized: foo; \"ReferenceError: foo is not defined\" // foo is known to exist now but it has no type or value: var foo = null; foo; \"null\"  Difference between null and undefined  When checking for null or undefined, beware of the differences between equality (==) and identity (===) operators, as the former performs type-conversion.",
        "type": "Global Objects"
    },
    "number.toExponential": {
        "descr": "The toExponential() method returns a string representing the Number object in exponential notation.",
        "name": "number.toExponential",
        "params": [
            {
                "descr": "Optional. An integer specifying the number of digits after the decimal point. ",
                "name": "fractionDigits"
            },
            {
                "descr": "If fractionDigits is too small or too large. ",
                "name": "RangeError"
            },
            {
                "descr": "If this method is invoked on an object that is not a Number.",
                "name": "TypeError"
            }
        ],
        "path": "javascript/global_objects/number/toexponential",
        "syntax": "numObj.toExponential([fractionDigits])",
        "type": "Number"
    },
    "number.toFixed": {
        "descr": "The toFixed() method formats a number using fixed-point notation.",
        "name": "number.toFixed",
        "params": [
            {
                "descr": "Optional. The number of digits to appear after the decimal point; this may be a value between 0 and 20, inclusive, and implementations may optionally support a larger range of values. ",
                "name": "digits"
            },
            {
                "descr": "If digits is too small or too large. ",
                "name": "RangeError"
            },
            {
                "descr": "If this method is invoked on an object that is not a Number.",
                "name": "TypeError"
            }
        ],
        "path": "javascript/global_objects/number/tofixed",
        "syntax": "numObj.toFixed([digits])",
        "type": "Number"
    },
    "number.toLocaleString": {
        "descr": "The toLocaleString() method returns a string with a language-sensitive representation of this number.",
        "name": "number.toLocaleString",
        "params": [
            {
                "descr": "Optional. A string with a BCP 47 language tag, or an array of such strings. ",
                "name": "locales"
            },
            {
                "descr": "Optional. An object with some or all of the following properties:  localeMatcher The locale matching algorithm to use. ",
                "name": "options"
            },
            {
                "descr": "The formatting style to use. Possible values are \"decimal\" for plain number formatting, \"currency\" for currency formatting, and \"percent\" for percent formatting; the default is \"decimal\".",
                "name": "style"
            },
            {
                "descr": "The currency to use in currency formatting. ",
                "name": "currency"
            },
            {
                "descr": "How to display the currency in currency formatting. ",
                "name": "currencyDisplay"
            },
            {
                "descr": "Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators. ",
                "name": "useGrouping"
            },
            {
                "descr": "The minimum number of integer digits to use. ",
                "name": "minimumIntegerDigits"
            },
            {
                "descr": "The minimum number of fraction digits to use. ",
                "name": "minimumFractionDigits"
            },
            {
                "descr": "The maximum number of fraction digits to use. ",
                "name": "maximumFractionDigits"
            },
            {
                "descr": "The minimum number of significant digits to use. ",
                "name": "minimumSignificantDigits"
            },
            {
                "descr": "The maximum number of significant digits to use. ",
                "name": "maximumSignificantDigits"
            }
        ],
        "path": "javascript/global_objects/number/tolocalestring",
        "syntax": "numObj.toLocaleString([locales [, options]])",
        "type": "Number"
    },
    "number.toPrecision": {
        "descr": "The toPrecision() method returns a string representing the Number object to the specified precision.",
        "name": "number.toPrecision",
        "params": [
            {
                "descr": "Optional. An integer specifying the number of significant digits.",
                "name": "precision"
            },
            {
                "descr": "If precision is not between 1 and 100 (inclusive), a RangeError is thrown. ",
                "name": "RangeError"
            }
        ],
        "path": "javascript/global_objects/number/toprecision",
        "syntax": "numObj.toPrecision([precision])",
        "type": "Number"
    },
    "number.toString": {
        "descr": "The toString() method returns a string representing the specified Number object.",
        "name": "number.toString",
        "params": [
            {
                "descr": "Optional. An integer in the range 2 through 36 specifying the base to use for representing numeric values.",
                "name": "radix"
            },
            {
                "descr": "If toString() is given a radix less than 2 or greater than 36, a RangeError is thrown.",
                "name": "RangeError"
            }
        ],
        "path": "javascript/global_objects/number/tostring",
        "syntax": "numObj.toString([radix])",
        "type": "Number"
    },
    "number.valueOf": {
        "descr": "The valueOf() method returns the wrapped primitive value of a Number object.",
        "name": "number.valueOf",
        "params": [],
        "path": "javascript/global_objects/number/valueof",
        "syntax": "numObj.valueOf()",
        "type": "Number"
    },
    "object.__defineGetter__": {
        "descr": "This feature is deprecated in favor of defining getters using the object initializer syntax or the Object.defineProperty() API. While this feature is widely implemented, it is only described in the ECMAScript specification because of legacy usage. This method should not be used since better alternatives exist.",
        "name": "object.__defineGetter__",
        "params": [
            {
                "descr": "A string containing the name of the property to bind to the given function.",
                "name": "prop"
            },
            {
                "descr": "A function to be bound to a lookup of the specified property.",
                "name": "func"
            }
        ],
        "path": "javascript/global_objects/object/__definegetter__",
        "syntax": "Object.defineProperty()",
        "type": "Object"
    },
    "object.__defineSetter__": {
        "descr": "This feature is deprecated in favor of defining setters using the object initializer syntax or the Object.defineProperty() API.",
        "name": "object.__defineSetter__",
        "params": [
            {
                "descr": "A string containing the name of the property to be bound to the given function.",
                "name": "prop"
            },
            {
                "descr": "A function to be called when there is an attempt to set the specified property. ",
                "name": "fun"
            }
        ],
        "path": "javascript/global_objects/object/__definesetter__",
        "syntax": "Object.defineProperty()",
        "type": "Object"
    },
    "object.hasOwnProperty": {
        "descr": "The hasOwnProperty() method returns a boolean indicating whether the object has the specified property as its own property (as opposed to inheriting it).",
        "name": "object.hasOwnProperty",
        "params": [
            {
                "descr": "The String name or symbol of the property to test.",
                "name": "prop"
            }
        ],
        "path": "javascript/global_objects/object/hasownproperty",
        "syntax": "obj.hasOwnProperty(prop)",
        "type": "Object"
    },
    "object.isPrototypeOf": {
        "descr": "The isPrototypeOf() method checks if an object exists in another object's prototype chain.",
        "name": "object.isPrototypeOf",
        "params": [
            {
                "descr": "The object whose prototype chain will be searched.",
                "name": "object"
            },
            {
                "descr": "A TypeError is thrown if prototypeObj is undefined or null.",
                "name": "TypeError"
            }
        ],
        "path": "javascript/global_objects/object/isprototypeof",
        "syntax": "prototypeObj.isPrototypeOf(object)",
        "type": "Object"
    },
    "object.propertyIsEnumerable": {
        "descr": "The propertyIsEnumerable() method returns a Boolean indicating whether the specified property is enumerable.",
        "name": "object.propertyIsEnumerable",
        "params": [
            {
                "descr": "The name of the property to test.",
                "name": "prop"
            }
        ],
        "path": "javascript/global_objects/object/propertyisenumerable",
        "syntax": "obj.propertyIsEnumerable(prop)",
        "type": "Object"
    },
    "object.toLocaleString": {
        "descr": "The toLocaleString() method returns a string representing the object. This method is meant to be overridden by derived objects for locale-specific purposes.",
        "name": "object.toLocaleString",
        "params": [],
        "path": "javascript/global_objects/object/tolocalestring",
        "syntax": "obj.toLocaleString()",
        "type": "Object"
    },
    "object.toString": {
        "descr": "The toString() method returns a string representing the object.",
        "name": "object.toString",
        "params": [],
        "path": "javascript/global_objects/object/tostring",
        "syntax": "obj.toString()",
        "type": "Object"
    },
    "object.unwatch": {
        "descr": "Deprecation warning: Do not use unwatch() and watch()! These two methods were implemented only in Firefox prior to version 58, they're deprecated and removed in Firefox 58+. In addition, using watchpoints has a serious negative impact on performance, which is especially true when used on global objects, such as window. You can usually use setters and getters or proxies instead.",
        "name": "object.unwatch",
        "params": [
            {
                "descr": "The name of a property of the object to stop watching.",
                "name": "prop"
            }
        ],
        "path": "javascript/global_objects/object/unwatch",
        "syntax": "obj.unwatch(prop)",
        "type": "Object"
    },
    "object.valueOf": {
        "descr": "The valueOf() method returns the primitive value of the specified object.",
        "name": "object.valueOf",
        "params": [],
        "path": "javascript/global_objects/object/valueof",
        "syntax": "object.valueOf()",
        "type": "Object"
    },
    "object.watch": {
        "descr": "Deprecation warning: Do not use watch() and unwatch()! These two methods were implemented only in Firefox prior to version 58, they're deprecated and removed in Firefox 58+. In addition, using watchpoints has a serious negative impact on performance, which is especially true when used on global objects, such as window. You can usually use setters and getters or proxies instead.",
        "name": "object.watch",
        "params": [
            {
                "descr": "The name of a property of the object on which you wish to monitor changes.",
                "name": "prop"
            },
            {
                "descr": "A function to call when the specified property's value changes.",
                "name": "handler"
            }
        ],
        "path": "javascript/global_objects/object/watch",
        "syntax": "obj.watch(prop, handler)",
        "type": "Object"
    },
    "of": {
        "descr": "The Array.of() method creates a new Array instance with a variable number of arguments, regardless of number or type of the arguments.",
        "name": "Array.of",
        "params": [
            {
                "descr": "Elements of which to create the array.",
                "name": "elementN"
            }
        ],
        "path": "javascript/global_objects/array/of",
        "syntax": "Array.of(element0[, element1[, ...[, elementN]]])",
        "type": "Array"
    },
    "off": {
        "descr": "The .off() method removes event handlers that were attached with .on(). See the discussion of delegated and directly bound events on that page for more information. Calling .off() with no arguments removes all handlers attached to the elements. Specific event handlers can be removed on elements by providing combinations of event names, namespaces, selectors, or handler function names. When multiple filtering arguments are given, all of the arguments provided must match for the event handler to be removed.",
        "name": "off",
        "params": [
            {
                "descr": "Type: String  One or more space-separated event types and optional namespaces, or just namespaces, such as \"click\", \"keydown.myPlugin\", or \".myPlugin\".",
                "name": "events"
            },
            {
                "descr": "Type: String  A selector which should match the one originally passed to .on() when attaching event handlers.",
                "name": "selector"
            },
            {
                "descr": "Type: Function( Event eventObject ) A handler function previously attached for the event(s), or the special value false.",
                "name": "handler"
            },
            {
                "descr": "Type: PlainObject  An object where the string keys represent one or more space-separated event types and optional namespaces, and the values represent handler functions previously attached for the event(s).",
                "name": "events"
            },
            {
                "descr": "Type: String  A selector which should match the one originally passed to .on() when attaching event handlers.",
                "name": "selector"
            },
            {
                "descr": "Type: Event  A jQuery.Event object.",
                "name": "event"
            }
        ],
        "path": "jquery/off",
        "syntax": ".off( events [, selector ] [, handler ] ) Returns: jQuery",
        "type": "Events"
    },
    "offset": {
        "descr": "The .offset() method allows us to retrieve the current position of an element (specifically its border box, which excludes margins) relative to the document. Contrast this with .position(), which retrieves the current position relative to the offset parent. When positioning a new element on top of an existing one for global manipulation (in particular, for implementing drag-and-drop), .offset() is more useful.",
        "name": "offset",
        "params": [
            {
                "descr": "Type: PlainObject  An object containing the properties top and left, which are numbers indicating the new top and left coordinates for the elements.",
                "name": "coordinates"
            },
            {
                "descr": "Type: Function( Integer index, PlainObject coords ) => PlainObject  A function to return the coordinates to set. ",
                "name": "function"
            }
        ],
        "path": "jquery/offset",
        "syntax": ".offset() Returns: Object",
        "type": "Offset"
    },
    "offsetParent": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .offsetParent() method allows us to search through the ancestors of these elements in the DOM tree and construct a new jQuery object wrapped around the closest positioned ancestor. An element is said to be positioned if it has a CSS position attribute of relative, absolute, or fixed. This information is useful for calculating offsets for performing animations and placing objects on the page.",
        "name": "offsetParent",
        "params": [],
        "path": "jquery/offsetparent",
        "syntax": ".offsetParent() Returns: jQuery",
        "type": "Offset"
    },
    "on": {
        "descr": "The .on() method attaches event handlers to the currently selected set of elements in the jQuery object. As of jQuery 1.7, the .on() method provides all functionality required for attaching event handlers. For help in converting from older jQuery event methods, see .bind(), .delegate(), and .live(). To remove events bound with .on(), see .off(). To attach an event that runs only once and then removes itself, see .one()",
        "name": "on",
        "params": [
            {
                "descr": "Type: String  One or more space-separated event types and optional namespaces, such as \"click\" or \"keydown.myPlugin\".",
                "name": "events"
            },
            {
                "descr": "Type: String  A selector string to filter the descendants of the selected elements that trigger the event. ",
                "name": "selector"
            },
            {
                "descr": "Type: Anything  Data to be passed to the handler in event.data when an event is triggered.",
                "name": "data"
            },
            {
                "descr": "Type: Function( Event eventObject [, Anything extraParameter ] [, ... ",
                "name": "handler"
            },
            {
                "descr": "Type: PlainObject  An object in which the string keys represent one or more space-separated event types and optional namespaces, and the values represent a handler function to be called for the event(s).",
                "name": "events"
            },
            {
                "descr": "Type: String  A selector string to filter the descendants of the selected elements that will call the handler. ",
                "name": "selector"
            },
            {
                "descr": "Type: Anything  Data to be passed to the handler in event.data when an event occurs.",
                "name": "data"
            }
        ],
        "path": "jquery/on",
        "syntax": ".on( events [, selector ] [, data ], handler ) Returns: jQuery",
        "type": "Events"
    },
    "onappinstalled": {
        "descr": "The onappinstalled attribute of the Window object serves as an event handler for the appinstalled event, which is dispatched once the web application is successfully installed as a progressive web app. The event that is fired is a \"simple event\" that implements the Event interface.",
        "name": "window.onappinstalled",
        "params": [],
        "path": "dom/window/onappinstalled",
        "syntax": "window.onappinstalled = function(event) { ... };",
        "type": "Window"
    },
    "onbeforeinstallprompt": {
        "descr": "The Window.onbeforeinstallprompt property is an event handler for processing a beforeinstallprompt, which is dispatched on devices when a user is about to be prompted to \"install\" a web application. Its associated event may be saved for later and used to prompt the user at a more suitable time.",
        "name": "window.onbeforeinstallprompt",
        "params": [],
        "path": "dom/window/onbeforeinstallprompt",
        "syntax": "window.addEventListener(\"beforeinstallprompt\", function(event) { ... });\n or  window.onbeforeinstallprompt = function(event) { ...};);",
        "type": "Window"
    },
    "ondeviceorientation": {
        "descr": "An event handler for the deviceorientation event, which contains information about a relative device orientation change.",
        "name": "window.ondeviceorientation",
        "params": [],
        "path": "dom/window/ondeviceorientation",
        "syntax": "window.ondeviceorientation = function(event) { ... }; window.addEventListener('deviceorientation', function(event) { ... });",
        "type": "Window"
    },
    "ondragdrop": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "window.ondragdrop",
        "params": [
            {
                "descr": "The event handler function to be registered.",
                "name": "funcRef"
            }
        ],
        "path": "dom/window/ondragdrop",
        "syntax": "window.ondragdrop = funcRef; window.addEventListener(\"dragdrop\", funcRef, useCapturing);",
        "type": "Window"
    },
    "one": {
        "descr": "The .one() method is identical to .on(), except that the handler for a given element and event type is unbound after its first invocation. For example:",
        "name": "one",
        "params": [
            {
                "descr": "Type: String  A string containing one or more JavaScript event types, such as \"click\" or \"submit,\" or custom event names.",
                "name": "events"
            },
            {
                "descr": "Type: PlainObject  Data to be passed to the handler in event.data when an event is triggered.",
                "name": "data"
            },
            {
                "descr": "Type: Function( Event eventObject ) A function to execute at the time the event is triggered.",
                "name": "handler"
            },
            {
                "descr": "Type: String  One or more space-separated event types and optional namespaces, such as \"click\" or \"keydown.myPlugin\".",
                "name": "events"
            },
            {
                "descr": "Type: String  A selector string to filter the descendants of the selected elements that trigger the event. ",
                "name": "selector"
            },
            {
                "descr": "Type: Anything  Data to be passed to the handler in event.data when an event is triggered.",
                "name": "data"
            },
            {
                "descr": "Type: Function( Event eventObject ) A function to execute when the event is triggered. ",
                "name": "handler"
            },
            {
                "descr": "Type: PlainObject  An object in which the string keys represent one or more space-separated event types and optional namespaces, and the values represent a handler function to be called for the event(s).",
                "name": "events"
            },
            {
                "descr": "Type: String  A selector string to filter the descendants of the selected elements that will call the handler. ",
                "name": "selector"
            },
            {
                "descr": "Type: Anything  Data to be passed to the handler in event.data when an event occurs.",
                "name": "data"
            }
        ],
        "path": "jquery/one",
        "syntax": ".one( events [, data ], handler ) Returns: jQuery",
        "type": "Events"
    },
    "onvrdisplayactivate": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "window.onvrdisplayactivate",
        "params": [],
        "path": "dom/window/onvrdisplayactivate",
        "syntax": "window.onvrdisplayactivate = function() { ... };",
        "type": "Window"
    },
    "onvrdisplayblur": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "window.onvrdisplayblur",
        "params": [],
        "path": "dom/window/onvrdisplayblur",
        "syntax": "window.onvrdisplayblur = function() { ... };",
        "type": "Window"
    },
    "onvrdisplayconnect": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "window.onvrdisplayconnect",
        "params": [],
        "path": "dom/window/onvrdisplayconnect",
        "syntax": "window.onvrdisplayconnect = function() { ... };",
        "type": "Window"
    },
    "onvrdisplaydeactivate": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "window.onvrdisplaydeactivate",
        "params": [],
        "path": "dom/window/onvrdisplaydeactivate",
        "syntax": "window.onvrdisplaydeactivate = function() { ... };",
        "type": "Window"
    },
    "onvrdisplaydisconnect": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "window.onvrdisplaydisconnect",
        "params": [],
        "path": "dom/window/onvrdisplaydisconnect",
        "syntax": "window.onvrdisplaydisconnect = function() { ... };",
        "type": "Window"
    },
    "onvrdisplayfocus": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "window.onvrdisplayfocus",
        "params": [],
        "path": "dom/window/onvrdisplayfocus",
        "syntax": "window.onvrdisplayfocus = function() { ... };",
        "type": "Window"
    },
    "onvrdisplaypresentchange": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "window.onvrdisplaypresentchange",
        "params": [],
        "path": "dom/window/onvrdisplaypresentchange",
        "syntax": "window.onvrdisplaypresentchange = functionRef;  Examples The presenting state of a VRDisplay can be checked using the VRDisplay.isPresenting property. window.onvrdisplaypresentchange = function() { if(vrDisplay.isPresenting) { info.textContent = 'Display has started presenting.'; } else { info.textContent = 'Display has stopped presenting.'; } };",
        "type": "Window"
    },
    "open": {
        "descr": "The Window interface's open() method loads the specified resource into the browsing context (window, <iframe> or tab) with the specified name. If the name doesn't exist, then a new window is opened and the specified resource is loaded into its browsing context.",
        "name": "window.open",
        "params": [
            {
                "descr": "A DOMString indicating the URL of the resource to be loaded. ",
                "name": "url"
            },
            {
                "descr": "A DOMString specifying the name of the browsing context (window, <iframe> or tab) into which to load the specified resource; if the name doesn't indicate an existing context, a new window is created and is given the name specified by windowName. This name can then be used as the target of links and forms by specifying it as the target attribute of <a> or <form> elements. The name should not contain whitespace. Keep in mind that this will not be used as the window's displayed title. If the string is empty, the browser will create a new window every time (this behaviour doesn't work when the string is replaced with NULL).",
                "name": "windowName"
            },
            {
                "descr": "A DOMString containing a comma-separated list of window features given with their corresponding values in the form \"name=value\". ",
                "name": "windowFeatures Optional"
            },
            {
                "descr": "Deprecated. Same as left but only supported by Netscape and Mozilla-based browsers.",
                "name": "screenX"
            },
            {
                "descr": "Deprecated. Same as top but only supported by Netscape and Mozilla-based browsers.",
                "name": "screenY"
            },
            {
                "descr": "Centers the window in relation to its parent's size and position. ",
                "name": "centerscreen"
            },
            {
                "descr": "Specifies the height of the whole browser window in pixels. ",
                "name": "outerHeight"
            },
            {
                "descr": "Specifies the width of the whole browser window in pixels. ",
                "name": "outerWidth"
            },
            {
                "descr": "Same as height but only supported by Netscape and Mozilla-based browsers. ",
                "name": "innerHeight"
            },
            {
                "descr": "Same as width but only supported by Netscape and Mozilla-based browsers. ",
                "name": "innerWidth"
            },
            {
                "descr": "Example: \"status=yes\", \"status=1\", and \"status\" have identical results.",
                "name": "NOTE: All features can be set to yes or 1, or just be present to be \"on\". Set them to no or 0, or in most cases just omit them, to be \"off\"."
            },
            {
                "descr": "If this feature is on, then the new secondary window renders the menubar.",
                "name": "menubar"
            },
            {
                "descr": "If this feature is on, then the new secondary window renders the Navigation Toolbar (Back, Forward, Reload, Stop buttons). ",
                "name": "toolbar"
            },
            {
                "descr": "If this feature is on, then the new secondary window renders the Location bar in Mozilla-based browsers. ",
                "name": "location"
            },
            {
                "descr": "If this feature is on, then the new secondary window renders the Personal Toolbar in Netscape 6.x, Netscape 7.x and Mozilla browser. ",
                "name": "personalbar"
            },
            {
                "descr": "Obsolete synonym of personalbar. ",
                "name": "directories Obsolete since Gecko 2"
            },
            {
                "descr": "If this feature is on, then the new secondary window has a status bar. ",
                "name": "status"
            },
            {
                "descr": "If this feature is specified, the window is able to open even if another application is already in the foreground. ",
                "name": "attention Non-standard"
            },
            {
                "descr": "If on, the new window is said to be dependent of its parent window. ",
                "name": "dependent"
            },
            {
                "descr": "This setting can only apply to dialog windows; \"minimizable\" requires dialog=yes. ",
                "name": "minimizable"
            },
            {
                "descr": "Do not use. Not implemented in Mozilla. ",
                "name": "fullscreen"
            },
            {
                "descr": "If this feature is on, the new secondary window will be resizable.",
                "name": "resizable"
            },
            {
                "descr": "If this feature is on, the new secondary window will show horizontal and/or vertical scrollbar(s) if the document doesn't fit into the window's viewport. ",
                "name": "scrollbars"
            },
            {
                "descr": "Note: Starting with Mozilla 1.7/Firefox 0.9, this feature requires the UniversalBrowserWrite privilege (bug 244965). ",
                "name": "chrome"
            },
            {
                "descr": "Note: Starting with Firefox 44, this feature can only be used with chrome privileges. ",
                "name": "dialog"
            },
            {
                "descr": "Note: Starting with Mozilla 1.2.1, this feature requires the UniversalBrowserWrite privilege (bug 180048). ",
                "name": "modal"
            },
            {
                "descr": "By default, all new secondary windows have a titlebar. ",
                "name": "titlebar"
            },
            {
                "descr": "If on, the new window will always be displayed on top of other browser windows, regardless of whether it is active or not.",
                "name": "alwaysRaised"
            },
            {
                "descr": "If on, the new created window floats below, under its own parent when the parent window is not minimized. ",
                "name": "alwaysLowered"
            },
            {
                "descr": "Same as alwaysLowered.",
                "name": "z-lock"
            },
            {
                "descr": "When set to no or 0, this feature removes the system close command icon and system close menu item. ",
                "name": "close"
            },
            {
                "descr": "You can not. New windows not opened by javascript can not as a rule be closed by JavaScript. ",
                "name": "How can I prevent the confirmation message asking the user whether they want to close the window?"
            },
            {
                "descr": "First check for the existence of the window object reference of such window and if it exists and if it has not been closed, then use the focus() method. ",
                "name": "How can I bring back the window if it is minimized or behind another window?"
            },
            {
                "descr": "You cannot. All browser manufacturers try to make the opening of new secondary windows noticed by users and noticeable by users to avoid confusion, to avoid disorienting users.",
                "name": "How do I force a maximized window?"
            },
            {
                "descr": "You cannot force this. Users with Mozilla-based browsers have absolute control over window functionalities like resizability, scrollability and toolbars presence via user preferences in about:config. ",
                "name": "How do I turn off window resizability or remove toolbars?"
            },
            {
                "descr": "You can not reliably because the users can prevent the window from being resized by unchecking the Edit/Preferences/Advanced/Scripts & Plug-ins/Allow Scripts to/ Move or resize existing windows checkbox in Mozilla or Tools/Options.../Content tab/Enable Javascript/Advanced button/Move or resize existing windows checkbox in Firefox or by setting dom.disable_window_move_resize to true in about:config or by editing accordingly their user.js file.",
                "name": "How do I resize a window to fit its content?"
            },
            {
                "descr": "To open a resource in a new tab see Tabbed browser. ",
                "name": "How do I open a referenced resource of a link in a new tab? or in a specific tab?"
            },
            {
                "descr": "You can test for the existence of the window object reference which is the returned value in case of success of the window.open() call and then verify that windowObjectReference.closed return value is false.",
                "name": "How do I know whether a window I opened is still open?"
            },
            {
                "descr": "With the built-in popup blockers of Mozilla/Firefox and Internet Explorer 6 SP2, you have to check the return value of window.open(): it will be null if the window wasn't allowed to open. ",
                "name": "How can I tell when my window was blocked by a popup blocker?"
            },
            {
                "descr": "The window.open() method gives a main window a reference to a secondary window; the opener property gives a secondary window a reference to its main window.",
                "name": "What is the JavaScript relationship between the main window and the secondary window?"
            },
            {
                "descr": "It is because of the cross-domain script security restriction (also referred as the \"Same Origin Policy\"). ",
                "name": "I can not access the properties of the new secondary window. I always get an error in the javascript console saying \"Error: uncaught exception: Permission denied to get property <property_name or method_name>. Why is that?"
            },
            {
                "descr": "Terms often used to describe or to identify the same window. ",
                "name": "Opener window, parent window, main window, first window"
            },
            {
                "descr": "Terms often used to describe or to identify the same window. ",
                "name": "Sub-window, child window, secondary window, second window"
            },
            {
                "descr": "Script-initiated windows opening automatically without the user's consent.",
                "name": "Unrequested popup windows"
            }
        ],
        "path": "dom/window/open",
        "syntax": "var window = window.open(url, windowName, [windowFeatures]);",
        "type": "Window"
    },
    "opener": {
        "descr": "The Window interface's opener property returns a reference to the window that opened the window using open().",
        "name": "window.opener",
        "params": [],
        "path": "dom/window/opener",
        "syntax": "openerWindow = window.opener;  Value A Window referring to the window that called open()",
        "type": "Window"
    },
    "outerHeight": {
        "descr": "Returns the height of the element, including top and bottom padding, border, and optionally margin, in pixels. If called on an empty set of elements, returns undefined (null before jQuery 3.0).",
        "name": "outerHeight",
        "params": [
            {
                "descr": "(default: false) Type: Boolean  A Boolean indicating whether to include the element's margin in the calculation.",
                "name": "includeMargin"
            },
            {
                "descr": "Type: String or Number  A number representing the number of pixels, or a number along with an optional unit of measure appended (as a string).",
                "name": "value"
            },
            {
                "descr": "Type: Function( Integer index, Number height ) => String or Number  A function returning the outer height to set. ",
                "name": "function"
            }
        ],
        "path": "jquery/outerheight",
        "syntax": ".outerHeight( [includeMargin ] ) Returns: Number",
        "type": "Dimensions"
    },
    "outerWidth": {
        "descr": "Returns the width of the element, including left and right padding, border, and optionally margin, in pixels. If called on an empty set of elements, returns undefined (null before jQuery 3.0).",
        "name": "outerWidth",
        "params": [
            {
                "descr": "(default: false) Type: Boolean  A Boolean indicating whether to include the element's margin in the calculation.",
                "name": "includeMargin"
            },
            {
                "descr": "Type: String or Number  A number representing the number of pixels, or a number along with an optional unit of measure appended (as a string).",
                "name": "value"
            },
            {
                "descr": "Type: Function( Integer index, Number width ) => String or Number  A function returning the outer width to set. ",
                "name": "function"
            }
        ],
        "path": "jquery/outerwidth",
        "syntax": ".outerWidth( [includeMargin ] ) Returns: Number",
        "type": "Dimensions"
    },
    "padEnd": {
        "descr": "The padEnd() method pads the current string with a given string (repeated, if needed) so that the resulting string reaches a given length. The padding is applied from the end (right) of the current string.",
        "name": "string.padEnd",
        "params": [
            {
                "descr": "The length of the resulting string once the current string has been padded. ",
                "name": "targetLength"
            },
            {
                "descr": "The string to pad the current string with. ",
                "name": "padString Optional"
            }
        ],
        "path": "javascript/global_objects/string/padend",
        "syntax": "str.padEnd(targetLength [, padString])",
        "type": "String"
    },
    "padStart": {
        "descr": "The padStart() method pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length. The padding is applied from the start (left) of the current string.",
        "name": "string.padStart",
        "params": [
            {
                "descr": "The length of the resulting string once the current string has been padded. ",
                "name": "targetLength"
            },
            {
                "descr": "The string to pad the current string with. ",
                "name": "padString Optional"
            }
        ],
        "path": "javascript/global_objects/string/padstart",
        "syntax": "str.padStart(targetLength [, padString])",
        "type": "String"
    },
    "pageYOffset": {
        "descr": "The read-only Window property pageYOffset is an alias for scrollY; as such, it returns the number of pixels the document is currently scrolled along the vertical axis (that is, up or down) with a value of 0.0, indicating that the top edge of the Document is currently aligned with the top edge of the window's content area.",
        "name": "window.pageYOffset",
        "params": [],
        "path": "dom/window/pageyoffset",
        "syntax": "yOffset = window.pageYOffset;  Value A floating-point number specifying the number of pixels the Document is scrolled vertically within its containing Window. This number is subpixel precise, so it may not be an integer. A value of 0.0 indicates that the window is not scrolled vertically, and that the top of the document is located at the top edge of the window's content area. Since this property is an alias for Window.scrollY, see that article for additional details on this value and its use. Example In this example, an <iframe> is created and filled with content, then a specific element within the document is scrolled into view in the frame. Once that's done, the vertical scroll position is checked by looking at the value of pageYOffset in the frame's contentWindow. HTML The HTML is extremely simple and has just two elements: an <iframe> that contains the document we're going to scroll, and a <div> into which we'll output the value of pageYOffset when we've finished the scroll. <iframe id=\"frame\"> </iframe> <div id=\"info\"> </div> JavaScript var frame = document.getElementById(\"frame\");\n or  var frameDoc = frame.contentDocument; var info = document.getElementById(\"info\");\n or  var target = frameDoc.getElementById(\"overview\");\n or  frameDoc.scrollingElement.scrollTop = target.offsetTop; info.innerText = \"Y offset after scrolling: \" + frame.contentWindow.pageYOffset + \" pixels\";);",
        "type": "Window"
    },
    "parent": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the parent() method traverses to the immediate parent of each of these elements in the DOM tree and constructs a new jQuery object from the matching elements.",
        "name": "parent",
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.",
                "name": "selector"
            }
        ],
        "path": "jquery/parent",
        "syntax": ".parent( [selector ] ) Returns: jQuery",
        "type": "Traversing"
    },
    "parents": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .parents() method allows us to search through the ancestors of these elements in the DOM tree and construct a new jQuery object from the matching elements ordered from immediate parent on up; the elements are returned in order from the closest parent to the outer ones. When multiple DOM elements are in the original set, the resulting set will be in reverse order of the original elements as well, with duplicates removed.",
        "name": "parents",
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.",
                "name": "selector"
            }
        ],
        "path": "jquery/parents",
        "syntax": ".parents( [selector ] ) Returns: jQuery",
        "type": "Traversing"
    },
    "parentsUntil": {
        "descr": "Given a selector expression that represents a set of DOM elements, the .parentsUntil() method traverses through the ancestors of these elements until it reaches an element matched by the selector passed in the method's argument. The resulting jQuery object contains all of the ancestors up to but not including the one matched by the .parentsUntil() selector.",
        "name": "parentsUntil",
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to indicate where to stop matching ancestor elements.",
                "name": "selector"
            },
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.",
                "name": "filter"
            },
            {
                "descr": "Type: Element or jQuery  A DOM node or jQuery object indicating where to stop matching ancestor elements.",
                "name": "element"
            },
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.",
                "name": "filter"
            }
        ],
        "path": "jquery/parentsuntil",
        "syntax": ".parentsUntil( [selector ] [, filter ] ) Returns: jQuery",
        "type": "Traversing"
    },
    "parse": {
        "descr": "The Date.parse() method parses a string representation of a date, and returns the number of milliseconds since January 1, 1970, 00:00:00 UTC or NaN if the string is unrecognized or, in some cases, contains illegal date values (e.g. 2015-02-31).",
        "name": "Date.parse",
        "params": [
            {
                "descr": "A string representing an RFC2822 or (a variant of) ISO 8601 date (other formats may be used, but results may be unexpected).",
                "name": "dateString"
            }
        ],
        "path": "javascript/global_objects/date/parse",
        "syntax": "Date.parse(dateString)",
        "type": "Date"
    },
    "parseFloat": {
        "descr": "The parseFloat() function parses an argument and returns a floating point number.",
        "name": "parseFloat",
        "params": [
            {
                "descr": "The value you want to parse.",
                "name": "value"
            }
        ],
        "path": "javascript/global_objects/parsefloat",
        "syntax": "parseFloat(value)",
        "type": "Global Objects"
    },
    "parseInt": {
        "descr": "The parseInt() function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems).",
        "name": "parseInt",
        "params": [
            {
                "descr": "The value to parse. If the string argument is not a string, then it is converted to a string (using the ToString abstract operation). ",
                "name": "string"
            },
            {
                "descr": "An integer between 2 and 36 that represents the radix (the base in mathematical numeral systems) of the above mentioned string.",
                "name": "radix"
            }
        ],
        "path": "javascript/global_objects/parseint",
        "syntax": "parseInt(string, radix);",
        "type": "Global Objects"
    },
    "performance": {
        "descr": "The Window interface's performance property returns a Performance object, which can be used to gather performance information about the current document. It serves as the point of exposure for the Performance Timeline API, the High Resolution Time API, the Navigation Timing API, the User Timing API, and the Resource Timing API.",
        "name": "window.performance",
        "params": [],
        "path": "dom/window/performance",
        "syntax": "performanceData = window.performance; Value A Performance object offering access to the performance and timing-related information offered by the APIs it exposes. Specifications    Specification Status Comment   High Resolution TimeThe definition of 'window.performance' in that specification. Recommendation Defines now()",
        "type": "Window"
    },
    "pluralRules.resolvedOptions": {
        "descr": "The Intl.PluralRules.prototype.resolvedOptions() method returns a new object with properties reflecting the locale and plural formatting options computed during initialization of this PluralRules object.",
        "name": "pluralRules.resolvedOptions",
        "params": [
            {
                "descr": "The BCP 47 language tag for the locale actually used. ",
                "name": "locale"
            },
            {
                "descr": "An Array of plural rules used by the given language.",
                "name": "pluralCategories"
            },
            {
                "descr": "The type used (cardinal or ordinal).",
                "name": "type"
            },
            {
                "descr": "The values provided for these properties in the options argument or filled in as defaults. ",
                "name": "minimumIntegerDigits minimumFractionDigits maximumFractionDigits"
            },
            {
                "descr": "The values provided for these properties in the options argument or filled in as defaults. ",
                "name": "minimumSignificantDigits maximumSignificantDigits"
            }
        ],
        "path": "javascript/global_objects/pluralrules/resolvedoptions",
        "syntax": "pluralRule.resolvedOptions()",
        "type": "PluralRules"
    },
    "pluralRules.select": {
        "descr": "The Intl.PluralRules.prototype.select method returns a String indicating which plural rule to use for locale-aware formatting.",
        "name": "pluralRules.select",
        "params": [
            {
                "descr": "The number to get a plural rule for.",
                "name": "number"
            }
        ],
        "path": "javascript/global_objects/pluralrules/select",
        "syntax": "pluralRule.select(number)",
        "type": "PluralRules"
    },
    "pop": {
        "descr": "The pop() method removes the last element from an array and returns that element. This method changes the length of the array.",
        "name": "array.pop",
        "params": [],
        "path": "javascript/global_objects/array/pop",
        "syntax": "arr.pop()",
        "type": "Array"
    },
    "position": {
        "descr": "The .position() method allows us to retrieve the current position of an element (specifically its margin box) relative to the offset parent (specifically its padding box, which excludes margins and borders). Contrast this with .offset(), which retrieves the current position relative to the document. When positioning a new element near another one and within the same containing DOM element, .position() is the more useful.",
        "name": "position",
        "params": [],
        "path": "jquery/position",
        "syntax": ".position() Returns: Object",
        "type": "Offset"
    },
    "postMessage": {
        "descr": "The window.postMessage() method safely enables cross-origin communication between Window objects; e.g., between a page and a pop-up that it spawned, or between a page and an iframe embedded within it.",
        "name": "window.postMessage",
        "params": [
            {
                "descr": "A reference to the window that will receive the message. ",
                "name": "targetWindow"
            },
            {
                "descr": "Data to be sent to the other window. ",
                "name": "message"
            },
            {
                "descr": "Specifies what the origin of targetWindow must be for the event to be dispatched, either as the literal string \"*\" (indicating no preference) or as a URI. ",
                "name": "targetOrigin"
            },
            {
                "descr": "Is a sequence of Transferable objects that are transferred with the message. ",
                "name": "transfer Optional"
            },
            {
                "descr": "The object passed from the other window.",
                "name": "data"
            },
            {
                "descr": "The origin of the window that sent the message at the time postMessage was called. ",
                "name": "origin"
            },
            {
                "descr": "A reference to the window object that sent the message; you can use this to establish two-way communication between two windows with different origins.",
                "name": "source"
            }
        ],
        "path": "dom/window/postmessage",
        "syntax": "targetWindow.postMessage(message, targetOrigin, [transfer]);",
        "type": "Window"
    },
    "prepend": {
        "descr": "The .prepend() method inserts the specified content as the first child of each element in the jQuery collection (To insert it as the last child, use .append()).",
        "name": "prepend",
        "params": [
            {
                "descr": "Type: htmlString or Element or Text or Array or jQuery  DOM element, text node, array of elements and text nodes, HTML string, or jQuery object to insert at the beginning of each element in the set of matched elements.",
                "name": "content"
            },
            {
                "descr": "Type: htmlString or Element or Text or Array or jQuery  One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or jQuery objects to insert at the beginning of each element in the set of matched elements.",
                "name": "content"
            },
            {
                "descr": "Type: Function( Integer elementOfArray, String html ) => htmlString or Element or Text or jQuery  A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert at the beginning of each element in the set of matched elements. Receives the index position of the element in the set and the old HTML value of the element as arguments. Within the function, this refers to the current element in the set.",
                "name": "function"
            }
        ],
        "path": "jquery/prepend",
        "syntax": ".prepend( content [, content ] ) Returns: jQuery",
        "type": "Manipulation"
    },
    "prependTo": {
        "descr": "The .prepend() and .prependTo() methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With .prepend(), the selector expression preceding the method is the container into which the content is inserted. With .prependTo(), on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.",
        "name": "prependTo",
        "params": [
            {
                "descr": "Type: Selector or htmlString or Element or Array or jQuery  A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements will be inserted at the beginning of the element(s) specified by this parameter.",
                "name": "target"
            }
        ],
        "path": "jquery/prependto",
        "syntax": ".prependTo( target ) Returns: jQuery",
        "type": "Manipulation"
    },
    "prev": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .prev() method searches for the predecessor of each of these elements in the DOM tree and constructs a new jQuery object from the matching elements.",
        "name": "prev",
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.",
                "name": "selector"
            }
        ],
        "path": "jquery/prev",
        "syntax": ".prev( [selector ] ) Returns: jQuery",
        "type": "Traversing"
    },
    "prevAll": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .prevAll() method searches through the predecessors of these elements in the DOM tree and construct a new jQuery object from the matching elements; the elements are returned in order beginning with the closest sibling.",
        "name": "prevAll",
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.",
                "name": "selector"
            }
        ],
        "path": "jquery/prevall",
        "syntax": ".prevAll( [selector ] ) Returns: jQuery",
        "type": "Traversing"
    },
    "prevUntil": {
        "descr": "Given a selector expression that represents a set of DOM elements, the .prevUntil() method searches through the predecessors of these elements in the DOM tree, stopping when it reaches an element matched by the method's argument. The new jQuery object that is returned contains all previous siblings up to but not including the one matched by the .prevUntil() selector; the elements are returned in order from the closest sibling to the farthest.",
        "name": "prevUntil",
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to indicate where to stop matching preceding sibling elements.",
                "name": "selector"
            },
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.",
                "name": "filter"
            },
            {
                "descr": "Type: Element or jQuery  A DOM node or jQuery object indicating where to stop matching preceding sibling elements.",
                "name": "element"
            },
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.",
                "name": "filter"
            }
        ],
        "path": "jquery/prevuntil",
        "syntax": ".prevUntil( [selector ] [, filter ] ) Returns: jQuery",
        "type": "Traversing"
    },
    "preventExtensions": {
        "descr": "The Object.preventExtensions() method prevents new properties from ever being added to an object (i.e. prevents future extensions to the object).",
        "name": "Object.preventExtensions",
        "params": [
            {
                "descr": "The object which should be made non-extensible.",
                "name": "obj"
            }
        ],
        "path": "javascript/global_objects/object/preventextensions",
        "syntax": "Object.preventExtensions(obj)",
        "type": "Object"
    },
    "print": {
        "descr": "Opens the Print Dialog to print the current document.",
        "name": "window.print",
        "params": [],
        "path": "dom/window/print",
        "syntax": "window.print()",
        "type": "Window"
    },
    "promise": {
        "descr": "The .promise() method returns a dynamically generated Promise that is resolved once all actions of a certain type bound to the collection, queued or not, have ended.",
        "name": "promise",
        "params": [
            {
                "descr": "(default: fx) Type: String   The type of queue that needs to be observed.",
                "name": "type"
            },
            {
                "descr": "Type: PlainObject  Object onto which the promise methods have to be attached",
                "name": "target"
            }
        ],
        "path": "jquery/promise",
        "syntax": ".promise( [type ] [, target ] ) Returns: Promise",
        "type": "Deferred Object"
    },
    "promise.catch": {
        "descr": "The catch() method returns a Promise and deals with rejected cases only. It behaves the same as calling Promise.prototype.then(undefined, onRejected) (in fact, calling obj.catch(onRejected) internally calls obj.then(undefined, onRejected)). This means, that you have to provide onRejected function even if you want to fallback to undefined result value - for example obj.catch(() => {}).",
        "name": "promise.catch",
        "params": [
            {
                "descr": "A Function called when the Promise is rejected. ",
                "name": "onRejected"
            }
        ],
        "path": "javascript/global_objects/promise/catch",
        "syntax": "p.catch(onRejected);\n or  p.catch(function(reason) { // rejection });",
        "type": "Promise"
    },
    "promise.finally": {
        "descr": "The finally() method returns a Promise. When the promise is settled, whether fulfilled or rejected, the specified callback function is executed. This provides a way for code that must be executed once the Promise has been dealt with to be run whether the promise was fulfilled successfully or rejected.",
        "name": "promise.finally",
        "params": [
            {
                "descr": "A Function called when the Promise is settled.",
                "name": "onFinally"
            }
        ],
        "path": "javascript/global_objects/promise/finally",
        "syntax": "p.finally(onFinally);\n or  p.finally(function() { // settled (fulfilled or rejected) });",
        "type": "Promise"
    },
    "promise.then": {
        "descr": "The then() method returns a Promise. It takes up to two arguments: callback functions for the success and failure cases of the Promise.",
        "name": "promise.then",
        "params": [
            {
                "descr": "A Function called if the Promise is fulfilled. ",
                "name": "onFulfilled"
            },
            {
                "descr": "A Function called if the Promise is rejected. ",
                "name": "onRejected Optional"
            },
            {
                "descr": "promise object, the resolution/rejection of the promise returned by then will be subsequent to the resolution/rejection of the promise returned by the handler. ",
                "name": "pending"
            }
        ],
        "path": "javascript/global_objects/promise/then",
        "syntax": "p.then(onFulfilled[, onRejected]);\n or  p.then((value) => { // fulfillment }, (reason) => { // rejection });",
        "type": "Promise"
    },
    "prompt": {
        "descr": "The Window.prompt() displays a dialog with an optional message prompting the user to input some text.",
        "name": "window.prompt",
        "params": [
            {
                "descr": "A string of text to display to the user. ",
                "name": "message Optional"
            },
            {
                "descr": "A string containing the default value displayed in the text input field. ",
                "name": "default Optional"
            }
        ],
        "path": "dom/window/prompt",
        "syntax": "result = window.prompt(message, default);",
        "type": "Window"
    },
    "prop": {
        "descr": "The .prop() method gets the property value for only the first element in the matched set. It returns undefined for the value of a property that has not been set, or if the matched set has no elements. To get the value for each element individually, use a looping construct such as jQuery's .each() or .map() method.",
        "name": "prop",
        "params": [
            {
                "descr": "Type: String  The name of the property to get.",
                "name": "propertyName"
            },
            {
                "descr": "Type: String  The name of the property to set.",
                "name": "propertyName"
            },
            {
                "descr": "Type: Anything  A value to set for the property.",
                "name": "value"
            },
            {
                "descr": "Type: PlainObject  An object of property-value pairs to set.",
                "name": "properties"
            },
            {
                "descr": "Type: String  The name of the property to set.",
                "name": "propertyName"
            },
            {
                "descr": "Type: Function( Integer index, Anything oldPropertyValue ) => Anything  A function returning the value to set. ",
                "name": "function"
            }
        ],
        "path": "jquery/prop",
        "syntax": ".prop( propertyName ) Returns: Anything",
        "type": "Manipulation"
    },
    "propertyIsEnumerable": {
        "descr": "The propertyIsEnumerable() method returns a Boolean indicating whether the specified property is enumerable.",
        "name": "object.propertyIsEnumerable",
        "params": [
            {
                "descr": "The name of the property to test.",
                "name": "prop"
            }
        ],
        "path": "javascript/global_objects/object/propertyisenumerable",
        "syntax": "obj.propertyIsEnumerable(prop)",
        "type": "Object"
    },
    "proto": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "Object.proto",
        "params": [],
        "path": "javascript/global_objects/object/proto",
        "syntax": "var Circle = function () {}; var shape = {}; var circle = new Circle();\n or  // Set the object prototype. // DEPRECATED. This is for example purposes only. DO NOT DO THIS in real code. shape.__proto__ = circle; // Get the object prototype console.log(shape.__proto__ === circle);\n or  // true);",
        "type": "Object"
    },
    "prototype": {
        "descr": "The String.prototype property represents the String prototype object.",
        "name": "String.prototype",
        "params": [
            {
                "descr": "Specifies the function that creates an object's prototype.",
                "name": "String.prototype.constructor"
            },
            {
                "descr": "Reflects the length of the string.",
                "name": "String.prototype.length"
            },
            {
                "descr": "Used to access the character in the Nth position where N is an integer between 0 and one less than the value of length. ",
                "name": "N"
            },
            {
                "descr": "Returns the character (exactly one UTF-16 code unit) at the specified index.",
                "name": "String.prototype.charAt()"
            },
            {
                "descr": "Returns a number that is the UTF-16 code unit value at the given index.",
                "name": "String.prototype.charCodeAt()"
            },
            {
                "descr": "Returns a nonnegative integer Number that is the code point value of the UTF-16 encoded code point starting at the specified index.",
                "name": "String.prototype.codePointAt()"
            },
            {
                "descr": "Combines the text of two strings and returns a new string.",
                "name": "String.prototype.concat()"
            },
            {
                "descr": "Determines whether one string may be found within another string.",
                "name": "String.prototype.includes()"
            },
            {
                "descr": "Determines whether a string ends with the characters of another string.",
                "name": "String.prototype.endsWith()"
            },
            {
                "descr": "Returns the index within the calling String object of the first occurrence of the specified value, or -1 if not found.",
                "name": "String.prototype.indexOf()"
            },
            {
                "descr": "Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found.",
                "name": "String.prototype.lastIndexOf()"
            },
            {
                "descr": "Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.",
                "name": "String.prototype.localeCompare()"
            },
            {
                "descr": "Used to match a regular expression against a string.",
                "name": "String.prototype.match()"
            },
            {
                "descr": "Returns the Unicode Normalization Form of the calling string value.",
                "name": "String.prototype.normalize()"
            },
            {
                "descr": "Pads the current string from the end with a given string to create a new string from a given length.",
                "name": "String.prototype.padEnd()"
            },
            {
                "descr": "Pads the current string from the start with a given string to create a new string from a given length.",
                "name": "String.prototype.padStart()"
            },
            {
                "descr": "Wraps the string in double quotes (\"\"\").",
                "name": "String.prototype.quote()"
            },
            {
                "descr": "Returns a string consisting of the elements of the object repeated the given times.",
                "name": "String.prototype.repeat()"
            },
            {
                "descr": "Used to find a match between a regular expression and a string, and to replace the matched substring with a new substring.",
                "name": "String.prototype.replace()"
            },
            {
                "descr": "Executes the search for a match between a regular expression and a specified string.",
                "name": "String.prototype.search()"
            },
            {
                "descr": "Extracts a section of a string and returns a new string.",
                "name": "String.prototype.slice()"
            },
            {
                "descr": "Splits a String object into an array of strings by separating the string into substrings.",
                "name": "String.prototype.split()"
            },
            {
                "descr": "Determines whether a string begins with the characters of another string.",
                "name": "String.prototype.startsWith()"
            },
            {
                "descr": "Returns the characters in a string beginning at the specified location through the specified number of characters.",
                "name": "String.prototype.substr()"
            },
            {
                "descr": "Returns the characters in a string between two indexes into the string.",
                "name": "String.prototype.substring()"
            },
            {
                "descr": "The characters within a string are converted to lower case while respecting the current locale. ",
                "name": "String.prototype.toLocaleLowerCase()"
            },
            {
                "descr": "The characters within a string are converted to upper case while respecting the current locale. ",
                "name": "String.prototype.toLocaleUpperCase()"
            },
            {
                "descr": "Returns the calling string value converted to lower case.",
                "name": "String.prototype.toLowerCase()"
            },
            {
                "descr": "Returns an object literal representing the specified object; you can use this value to create a new object. ",
                "name": "String.prototype.toSource()"
            },
            {
                "descr": "Returns a string representing the specified object. ",
                "name": "String.prototype.toString()"
            },
            {
                "descr": "Returns the calling string value converted to uppercase.",
                "name": "String.prototype.toUpperCase()"
            },
            {
                "descr": "Trims whitespace from the beginning and end of the string. ",
                "name": "String.prototype.trim()"
            },
            {
                "descr": "Trims whitespace from the beginning of the string.",
                "name": "String.prototype.trimStart() String.prototype.trimLeft()"
            },
            {
                "descr": "Trims whitespace from the end of the string.",
                "name": "String.prototype.trimEnd() String.prototype.trimRight()"
            },
            {
                "descr": "Returns the primitive value of the specified object. ",
                "name": "String.prototype.valueOf()"
            },
            {
                "descr": "Returns a new Iterator object that iterates over the code points of a String value, returning each code point as a String value.",
                "name": "String.prototype[@@iterator]()"
            },
            {
                "descr": "<a name=\"name\"> (hypertext target)",
                "name": "String.prototype.anchor()"
            },
            {
                "descr": "<big>",
                "name": "String.prototype.big()"
            },
            {
                "descr": "<blink>",
                "name": "String.prototype.blink()"
            },
            {
                "descr": "<b>",
                "name": "String.prototype.bold()"
            },
            {
                "descr": "<tt>",
                "name": "String.prototype.fixed()"
            },
            {
                "descr": "<font color=\"color\">",
                "name": "String.prototype.fontcolor()"
            },
            {
                "descr": "<font size=\"size\">",
                "name": "String.prototype.fontsize()"
            },
            {
                "descr": "<i>",
                "name": "String.prototype.italics()"
            },
            {
                "descr": "<a href=\"url\"> (link to URL)",
                "name": "String.prototype.link()"
            },
            {
                "descr": "<small>",
                "name": "String.prototype.small()"
            },
            {
                "descr": "<strike>",
                "name": "String.prototype.strike()"
            },
            {
                "descr": "<sub>",
                "name": "String.prototype.sub()"
            },
            {
                "descr": "<sup>",
                "name": "String.prototype.sup()"
            }
        ],
        "path": "javascript/global_objects/string/prototype",
        "syntax": "String.prototype.split()",
        "type": "String"
    },
    "push": {
        "descr": "The push() method adds one or more elements to the end of an array and returns the new length of the array.",
        "name": "array.push",
        "params": [
            {
                "descr": "The elements to add to the end of the array.",
                "name": "elementN"
            }
        ],
        "path": "javascript/global_objects/array/push",
        "syntax": "arr.push(element1[, ...[, elementN]])",
        "type": "Array"
    },
    "pushStack": {
        "descr": "Add some elements onto the jQuery stack, then pop back off again.",
        "name": "pushStack",
        "params": [
            {
                "descr": "Type: Array  An array of elements to push onto the stack and make into a new jQuery object.",
                "name": "elements"
            },
            {
                "descr": "Type: Array  An array of elements to push onto the stack and make into a new jQuery object.",
                "name": "elements"
            },
            {
                "descr": "Type: String  The name of a jQuery method that generated the array of elements.",
                "name": "name"
            },
            {
                "descr": "Type: Array  The arguments that were passed in to the jQuery method (for serialization).",
                "name": "arguments"
            }
        ],
        "path": "jquery/pushstack",
        "syntax": ".pushStack( elements ) Returns: jQuery",
        "type": "Miscellaneous"
    },
    "queue": {
        "descr": "Show the length of the queue.",
        "name": "queue",
        "params": [
            {
                "descr": "Type: String  A string containing the name of the queue. ",
                "name": "queueName"
            },
            {
                "descr": "Type: String  A string containing the name of the queue. ",
                "name": "queueName"
            },
            {
                "descr": "Type: Array  An array of functions to replace the current queue contents.",
                "name": "newQueue"
            },
            {
                "descr": "Type: String  A string containing the name of the queue. ",
                "name": "queueName"
            },
            {
                "descr": "Type: Function( Function next() ) The new function to add to the queue, with a function to call that will dequeue the next item.",
                "name": "callback"
            }
        ],
        "path": "jquery/queue",
        "syntax": ".queue( [queueName ] ) Returns: Array",
        "type": "Data"
    },
    "raw": {
        "descr": "The static String.raw() method is a tag function of template literals, similar to the r prefix in Python or the @ prefix in C# for string literals (yet there is a difference: see explanations in this issue). It's used to get the raw string form of template strings, that is, substitutions (e.g. ${foo}) are processed, but escapes (e.g. \\n) are not.",
        "name": "String.raw",
        "params": [
            {
                "descr": "Well-formed template call site object, like { raw: ['foo', 'bar', 'baz'] }.",
                "name": "callSite"
            },
            {
                "descr": "Contains substitution values.",
                "name": "...substitutions"
            },
            {
                "descr": "A template string, optionally with substitutions (${...}).",
                "name": "templateString"
            },
            {
                "descr": "A TypeError is thrown if the first argument is not a well formed object.",
                "name": "TypeError"
            }
        ],
        "path": "javascript/global_objects/string/raw",
        "syntax": "String.raw(callSite, ...substitutions) String.raw`templateString`",
        "type": "String"
    },
    "ready": {
        "descr": "The .ready() method offers a way to run JavaScript code as soon as the page's Document Object Model (DOM) becomes safe to manipulate. This will often be a good time to perform tasks that are needed before the user views or interacts with the page, for example to add event handlers and initialize plugins. When multiple functions are added via successive calls to this method, they run when the DOM is ready in the order in which they are added. As of jQuery 3.0, jQuery ensures that an exception occuring in one handler does not prevent subsequently added handlers from executing.",
        "name": "ready",
        "params": [
            {
                "descr": "Type: Function() A function to execute after the DOM is ready.",
                "name": "handler"
            }
        ],
        "path": "jquery/ready",
        "syntax": ".ready( handler ) Returns: jQuery",
        "type": "Events"
    },
    "reduce": {
        "descr": "The reduce() method executes a reducer function (that you provide) on each member of the array resulting in a single output value.",
        "name": "array.reduce",
        "params": [
            {
                "descr": "Function to execute on each element in the array, taking four arguments:  accumulator The accumulator accumulates the callback's return values; it is the accumulated value previously returned in the last invocation of the callback, or initialValue, if supplied (see below).",
                "name": "callback"
            },
            {
                "descr": "The current element being processed in the array.",
                "name": "currentValue"
            },
            {
                "descr": "The index of the current element being processed in the array. ",
                "name": "currentIndexOptional"
            },
            {
                "descr": "The array reduce() was called upon.",
                "name": "arrayOptional"
            },
            {
                "descr": "Value to use as the first argument to the first call of the callback. ",
                "name": "initialValueOptional"
            }
        ],
        "path": "javascript/global_objects/array/reduce",
        "syntax": "arr.reduce(callback[, initialValue])",
        "type": "Array"
    },
    "reduceRight": {
        "descr": "The reduceRight() method applies a function against an accumulator and each value of the array (from right-to-left) to reduce it to a single value.",
        "name": "array.reduceRight",
        "params": [
            {
                "descr": "Function to execute on each value in the array, taking four arguments:  accumulator The value previously returned in the last invocation of the callback, or initialValue, if supplied. ",
                "name": "callback"
            },
            {
                "descr": "The current element being processed in the array.",
                "name": "currentValue"
            },
            {
                "descr": "The index of the current element being processed in the array.",
                "name": "indexOptional"
            },
            {
                "descr": "The array reduce was called upon.",
                "name": "arrayOptional"
            },
            {
                "descr": "Object to use as the first argument to the first call of the callback. ",
                "name": "initialValueOptional"
            }
        ],
        "path": "javascript/global_objects/array/reduceright",
        "syntax": "arr.reduceRight(callback[, initialValue])",
        "type": "Array"
    },
    "regExp.@@match": {
        "descr": "The [@@match]() method retrieves the matches when matching a string against a regular expression.",
        "name": "regExp.@@match",
        "params": [
            {
                "descr": "A String that is a target of the match.",
                "name": "str"
            }
        ],
        "path": "javascript/global_objects/regexp/@@match",
        "syntax": "regexp[Symbol.match](str)",
        "type": "RegExp"
    },
    "regExp.@@replace": {
        "descr": "The [@@replace]() method replaces some or all matches of a this pattern in a string by a replacement, and returns the result of the replacement as a new string. The replacement can be a string or a function to be called for each match.",
        "name": "regExp.@@replace",
        "params": [
            {
                "descr": "A String that is a target of the replacement.",
                "name": "str"
            },
            {
                "descr": "The String that replaces the substring. ",
                "name": "newSubStr (replacement)"
            },
            {
                "descr": "A function to be invoked to create the new substring. ",
                "name": "function (replacement)"
            }
        ],
        "path": "javascript/global_objects/regexp/@@replace",
        "syntax": "regexp[Symbol.replace](str, newSubStr|function)",
        "type": "RegExp"
    },
    "regExp.@@search": {
        "descr": "The [@@search]() method executes a search for a match between a this regular expression and a string.",
        "name": "regExp.@@search",
        "params": [
            {
                "descr": "A String that is a target of the search.",
                "name": "str"
            },
            {
                "descr": "If successful, [@@search]() returns the index of the first match of the regular expression inside the string. ",
                "name": "integer"
            }
        ],
        "path": "javascript/global_objects/regexp/@@search",
        "syntax": "regexp[Symbol.search](str)",
        "type": "RegExp"
    },
    "regExp.@@split": {
        "descr": "The [@@split]() method splits a String object into an array of strings by separating the string into substrings.",
        "name": "regExp.@@split",
        "params": [
            {
                "descr": "The target of the split operation.",
                "name": "str"
            },
            {
                "descr": "Optional. Integer specifying a limit on the number of splits to be found. ",
                "name": "limit"
            }
        ],
        "path": "javascript/global_objects/regexp/@@split",
        "syntax": "regexp[Symbol.split](str[, limit])",
        "type": "RegExp"
    },
    "regExp.compile": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "regExp.compile",
        "params": [
            {
                "descr": "The text of the regular expression.",
                "name": "pattern"
            },
            {
                "descr": "If specified, flags can have any combination of the following values:  g global match",
                "name": "flags"
            },
            {
                "descr": "ignore case",
                "name": "i"
            },
            {
                "descr": "multiline; treat beginning and end characters (^ and $) as working over multiple lines (i.e., match the beginning or end of each line (delimited by \\n or \\r), not only the very beginning or end of the whole input string)",
                "name": "m"
            },
            {
                "descr": "sticky; matches only from the index indicated by the lastIndex property of this regular expression in the target string (and does not attempt to match from any later indexes).",
                "name": "y"
            }
        ],
        "path": "javascript/global_objects/regexp/compile",
        "syntax": "regexObj.compile(pattern, flags)",
        "type": "RegExp"
    },
    "regExp.exec": {
        "descr": "The exec() method executes a search for a match in a specified string. Returns a result array, or null.",
        "name": "regExp.exec",
        "params": [
            {
                "descr": "The string against which to match the regular expression.",
                "name": "str"
            }
        ],
        "path": "javascript/global_objects/regexp/exec",
        "syntax": "regexObj.exec(str)",
        "type": "RegExp"
    },
    "regExp.lastIndex": {
        "descr": "The lastIndex is a read/write integer property of regular expression instances that specifies the index at which to start the next match.",
        "name": "regExp.lastIndex",
        "params": [],
        "path": "javascript/global_objects/regexp/lastindex",
        "syntax": "regExpObj.lastIndex Description This property is set only if the regular expression instance used the \"g\" flag to indicate a global search, or the \"y\" flag to indicate a sticky search. The following rules apply:  If lastIndex is greater than the length of the string, test()",
        "type": "RegExp"
    },
    "regExp.test": {
        "descr": "The test() method executes a search for a match between a regular expression and a specified string. Returns true or false.",
        "name": "regExp.test",
        "params": [
            {
                "descr": "The string against which to match the regular expression.",
                "name": "str"
            }
        ],
        "path": "javascript/global_objects/regexp/test",
        "syntax": "regexObj.test(str)",
        "type": "RegExp"
    },
    "regExp.toString": {
        "descr": "The toString() method returns a string representing the regular expression.",
        "name": "regExp.toString",
        "params": [],
        "path": "javascript/global_objects/regexp/tostring",
        "syntax": "regexObj.toString();",
        "type": "RegExp"
    },
    "remove": {
        "descr": "Similar to .empty(), the .remove() method takes elements out of the DOM. Use .remove() when you want to remove the element itself, as well as everything inside it. In addition to the elements themselves, all bound events and jQuery data associated with the elements are removed. To remove the elements without removing data and events, use .detach() instead.",
        "name": "remove",
        "params": [
            {
                "descr": "Type: String  A selector expression that filters the set of matched elements to be removed.",
                "name": "selector"
            }
        ],
        "path": "jquery/remove",
        "syntax": ".remove( [selector ] ) Returns: jQuery",
        "type": "Manipulation"
    },
    "removeAttr": {
        "descr": "The .removeAttr() method uses the JavaScript removeAttribute() function, but it has the advantage of being able to be called directly on a jQuery object and it accounts for different attribute naming across browsers.",
        "name": "removeAttr",
        "params": [
            {
                "descr": "Type: String  An attribute to remove; as of version 1.7, it can be a space-separated list of attributes.",
                "name": "attributeName"
            }
        ],
        "path": "jquery/removeattr",
        "syntax": ".removeAttr( attributeName ) Returns: jQuery",
        "type": "Manipulation"
    },
    "removeClass": {
        "descr": "If a class name is included as a parameter, then only that class will be removed from the set of matched elements. If no class names are specified in the parameter, all classes will be removed.",
        "name": "removeClass",
        "params": [
            {
                "descr": "Type: String  One or more space-separated classes to be removed from the class attribute of each matched element.",
                "name": "className"
            },
            {
                "descr": "Type: Function( Integer index, String className ) => String  A function returning one or more space-separated class names to be removed. ",
                "name": "function"
            }
        ],
        "path": "jquery/removeclass",
        "syntax": ".removeClass( [className ] ) Returns: jQuery",
        "type": "Manipulation"
    },
    "removeData": {
        "descr": "The .removeData() method allows us to remove values that were previously set using .data(). When called with the name of a key, .removeData() deletes that particular value. When called with no arguments, .removeData() removes all values.",
        "name": "removeData",
        "params": [
            {
                "descr": "Type: String  A string naming the piece of data to delete.",
                "name": "name"
            },
            {
                "descr": "Type: Array or String  An array or space-separated string naming the pieces of data to delete.",
                "name": "list"
            }
        ],
        "path": "jquery/removedata",
        "syntax": ".removeData( [name ] ) Returns: jQuery",
        "type": "Data"
    },
    "removeProp": {
        "descr": "The .removeProp() method removes properties set by the .prop() method.",
        "name": "removeProp",
        "params": [
            {
                "descr": "Type: String  The name of the property to remove.",
                "name": "propertyName"
            }
        ],
        "path": "jquery/removeprop",
        "syntax": ".removeProp( propertyName ) Returns: jQuery",
        "type": "Manipulation"
    },
    "repeat": {
        "descr": "The repeat() method constructs and returns a new string which contains the specified number of copies of the string on which it was called, concatenated together.",
        "name": "string.repeat",
        "params": [
            {
                "descr": "An integer between 0 and +∞: [0, +∞), indicating the number of times to repeat the string in the newly-created string that is to be returned.",
                "name": "count"
            }
        ],
        "path": "javascript/global_objects/string/repeat",
        "syntax": "str.repeat(count);",
        "type": "String"
    },
    "replace": {
        "descr": "The replace() method returns a new string with some or all matches of a pattern replaced by a replacement. The pattern can be a string or a RegExp, and the replacement can be a string or a function to be called for each match. If pattern is a string, only the first occurrence will be replaced.",
        "name": "string.replace",
        "params": [
            {
                "descr": "A RegExp object or literal. The match or matches are replaced with newSubStr or the value returned by the specified function.",
                "name": "regexp (pattern)"
            },
            {
                "descr": "A String that is to be replaced by newSubStr. ",
                "name": "substr (pattern)"
            },
            {
                "descr": "The String that replaces the substring specified by the specified regexp or substr parameter. ",
                "name": "newSubStr (replacement)"
            },
            {
                "descr": "A function to be invoked to create the new substring to be used to replace the matches to the given regexp or substr. ",
                "name": "function (replacement)"
            }
        ],
        "path": "javascript/global_objects/string/replace",
        "syntax": "str.replace(regexp|substr, newSubstr|function)",
        "type": "String"
    },
    "replaceAll": {
        "descr": "The .replaceAll() method is similar to .replaceWith(), but with the source and target reversed. Consider this DOM structure:",
        "name": "replaceAll",
        "params": [
            {
                "descr": "Type: Selector or jQuery or Array or Element  A selector string, jQuery object, DOM element, or array of elements indicating which element(s) to replace.",
                "name": "target"
            }
        ],
        "path": "jquery/replaceall",
        "syntax": ".replaceAll( target ) Returns: jQuery",
        "type": "Manipulation"
    },
    "replaceWith": {
        "descr": "The .replaceWith() method removes content from the DOM and inserts new content in its place with a single call. Consider this DOM structure:",
        "name": "replaceWith",
        "params": [
            {
                "descr": "Type: htmlString or Element or Array or jQuery  The content to insert. ",
                "name": "newContent"
            },
            {
                "descr": "Type: Function() A function that returns content with which to replace the set of matched elements.",
                "name": "function"
            }
        ],
        "path": "jquery/replacewith",
        "syntax": ".replaceWith( newContent ) Returns: jQuery",
        "type": "Manipulation"
    },
    "requestAnimationFrame": {
        "descr": "The window.requestAnimationFrame() method tells the browser that you wish to perform an animation and requests that the browser call a specified function to update an animation before the next repaint. The method takes a callback as an argument to be invoked before the repaint.",
        "name": "window.requestAnimationFrame",
        "params": [
            {
                "descr": "The function to call when it's time to update your animation for the next repaint. ",
                "name": "callback"
            }
        ],
        "path": "dom/window/requestanimationframe",
        "syntax": "window.requestAnimationFrame(callback);",
        "type": "Window"
    },
    "requestIdleCallback": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "window.requestIdleCallback",
        "params": [
            {
                "descr": "A reference to a function that should be called in the near future, when the event loop is idle. ",
                "name": "callback"
            },
            {
                "descr": "Contains optional configuration parameters. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/window/requestidlecallback",
        "syntax": "var handle = window.requestIdleCallback(callback[, options])",
        "type": "Window"
    },
    "resize": {
        "descr": "This method is a shortcut for .on('resize', handler) in the first and second variations, and .trigger( \"resize\" ) in the third.",
        "name": "resize",
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            },
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.",
                "name": "eventData"
            },
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            }
        ],
        "path": "jquery/resize",
        "syntax": ".resize( handler ) Returns: jQuery",
        "type": "Events"
    },
    "resizeBy": {
        "descr": "Resizes the current window by a certain amount.",
        "name": "window.resizeBy",
        "params": [],
        "path": "dom/window/resizeby",
        "syntax": "window.resizeBy(xDelta, yDelta)",
        "type": "Window"
    },
    "resizeTo": {
        "descr": "Dynamically resizes window.",
        "name": "window.resizeTo",
        "params": [],
        "path": "dom/window/resizeto",
        "syntax": "window.resizeTo(aWidth, aHeight)",
        "type": "Window"
    },
    "rest parameters": {
        "descr": "The rest parameter syntax allows us to represent an indefinite number of arguments as an array.",
        "name": "rest parameters",
        "params": [],
        "path": "javascript/functions/rest_parameters",
        "syntax": "function f(a, b, ...theArgs) { // ... }",
        "type": "Function"
    },
    "return": {
        "descr": "The return ends function execution and specifies a value to be returned to the function caller.",
        "name": "return",
        "params": [
            {
                "descr": "The expression whose value is to be returned. ",
                "name": "expression"
            }
        ],
        "path": "javascript/statements/return",
        "syntax": "return [[expression]];   expression The expression whose value is to be returned. If omitted, undefined is returned instead.  Description When a return statement is used in a function body, the execution of the function is stopped. If specified, a given value is returned to the function caller. For example, the following function returns the square of its argument, x, where x is a number. function square(x) { return x * x; } var demo = square(3);\n or  // demo will equal 9);",
        "type": "Statements"
    },
    "reverse": {
        "descr": "The reverse() method reverses an array in place. The first array element becomes the last, and the last array element becomes the first.",
        "name": "array.reverse",
        "params": [],
        "path": "javascript/global_objects/array/reverse",
        "syntax": "a.reverse()",
        "type": "Array"
    },
    "screen": {
        "descr": "Returns a reference to the screen object associated with the window. The screen object, implementing the Screen interface, is a special object for inspecting properties of the screen on which the current window is being rendered.",
        "name": "window.screen",
        "params": [],
        "path": "dom/window/screen",
        "syntax": "screenObj = window.screen;  Example if (screen.pixelDepth < 8) { // use low-color version of page } else { // use regular, colorful page }",
        "type": "Window"
    },
    "screen.availHeight": {
        "descr": "The read-only Screen interface's availHeight property returns the height, in CSS pixels, of the space available for Web content on the screen. Since Screen is exposed on the Window interface's window.screen property, you access availHeight using window.screen.availHeight.",
        "name": "screen.availHeight",
        "params": [],
        "path": "dom/screen/availheight",
        "syntax": "availHeight = window.screen.availHeight;  Value A numeric value indicating the number of CSS pixels tall the screen's available space is. This can be no larger than the value of window.screen.height, and will be less if the device or user agent reserves any vertical space for itself. For instance, on a Mac whose Dock is located at the bottom of screen (which is the default), the value of availHeight",
        "type": "Screen"
    },
    "screen.availWidth": {
        "descr": "Returns the amount of horizontal space in pixels available to the window.",
        "name": "screen.availWidth",
        "params": [],
        "path": "dom/screen/availwidth",
        "syntax": "window.screen.availWidth Example var screenAvailWidth = window.screen.availWidth; console.log(screenAvailWidth);",
        "type": "Screen"
    },
    "screen.colorDepth": {
        "descr": "Returns the color depth of the screen. Per the CSSOM, some implementations return 24 for compatibility reasons. See the browser compatibility section for those that don't.",
        "name": "screen.colorDepth",
        "params": [],
        "path": "dom/screen/colordepth",
        "syntax": "bitDepth = window.screen.colorDepth  Example // check the color depth of the screen if ( window.screen.colorDepth < 8) { // use low-color version of page } else { // use regular, colorful page }",
        "type": "Screen"
    },
    "screen.height": {
        "descr": "Returns the height of the screen in pixels.",
        "name": "screen.height",
        "params": [],
        "path": "dom/screen/height",
        "syntax": "iHeight = window.screen.height  Example if (window.screen.availHeight !== window.screen.height) { // something is occupying some screen real estate! }",
        "type": "Screen"
    },
    "screen.lockOrientation": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "screen.lockOrientation",
        "params": [
            {
                "descr": "The orientation into which to lock the screen. ",
                "name": "orientation"
            },
            {
                "descr": "It represents the orientation of the screen when it is in its primary portrait mode. ",
                "name": "portrait-primary"
            },
            {
                "descr": "It represents the orientation of the screen when it is in its secondary portrait mode. ",
                "name": "portrait-secondary"
            },
            {
                "descr": "It represents the orientation of the screen when it is in its primary landscape mode. ",
                "name": "landscape-primary"
            },
            {
                "descr": "It represents the orientation of the screen when it is in its secondary landscape mode. ",
                "name": "landscape-secondary"
            },
            {
                "descr": "It represents both portrait-primary and portrait-secondary.",
                "name": "portrait"
            },
            {
                "descr": "It represents both landscape-primary and landscape-secondary.",
                "name": "landscape"
            },
            {
                "descr": "It represents either portrait-primary and landscape-primary depends on natural orientation of devices. ",
                "name": "default"
            }
        ],
        "path": "dom/screen/lockorientation",
        "syntax": "lockedAllowed = window.screen.lockOrientation(orientation);",
        "type": "Screen"
    },
    "screen.orientation": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "screen.orientation",
        "params": [],
        "path": "dom/screen/orientation",
        "syntax": "var orientation = window.screen.orientation;  Return value An instance of ScreenOrientation representing the orientation of the screen. Example var orientation = screen.msOrientation || (screen.orientation || screen.mozOrientation || {}).type; if (orientation === \"landscape-primary\") { console.log(\"That looks good.\");\n or  } else if (orientation === \"landscape-secondary\") { console.log(\"Mmmh... the screen is upside down!\");\n or  } else if (orientation === \"portrait-secondary\" || orientation === \"portrait-primary\") { console.log(\"Mmmh... you should rotate your device to landscape\");\n or  } else if (orientation === undefined) { console.log(\"The orientation API isn't supported in this browser :(\");\n or  });",
        "type": "Screen"
    },
    "screen.pixelDepth": {
        "descr": "Returns the bit depth of the screen. Per the CSSOM, some implementations return 24 for compatibility reasons. See the browser compatibility section for those that don't.",
        "name": "screen.pixelDepth",
        "params": [],
        "path": "dom/screen/pixeldepth",
        "syntax": "depth = window.screen.pixelDepth  Example // if there is not adequate bit depth // choose a simpler color if ( window.screen.pixelDepth > 8 ) { document.style.color = \"#FAEBD7\"; } else { document.style.color = \"#FFFFFF\"; }",
        "type": "Screen"
    },
    "screen.unlockOrientation": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "screen.unlockOrientation",
        "params": [],
        "path": "dom/screen/unlockorientation",
        "syntax": "var unlocked = window.screen.unlockOrientation();",
        "type": "Screen"
    },
    "screen.width": {
        "descr": "Returns the width of the screen.",
        "name": "screen.width",
        "params": [],
        "path": "dom/screen/width",
        "syntax": "lWidth = window.screen.width  Example // crude way to check that the screen is at least 1024x768 if (window.screen.width >= 1024 && window.screen.height >= 768) { // resolution is 1024x768 or above }",
        "type": "Screen"
    },
    "screenLeft": {
        "descr": "The Window.screenLeft read-only property returns the horizontal distance, in CSS pixels, from the left border of the user's browser viewport to the left side of the screen.",
        "name": "window.screenLeft",
        "params": [],
        "path": "dom/window/screenleft",
        "syntax": "leftWindowPos = window.screenLeft  Returns A number equal to the number of CSS pixels from the left edge of the browser viewport to the left edge of the screen. Examples In our screenleft-screentop example, you'll see a canvas onto which has been drawn a circle. In this example we are using screenLeft/screenTop plus Window.requestAnimationFrame()",
        "type": "Window"
    },
    "screenOrientation.lock": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "screenOrientation.lock",
        "params": [
            {
                "descr": "An orientation lock type. One of the following:",
                "name": "orientation"
            }
        ],
        "path": "dom/screenorientation/lock",
        "syntax": "ScreenOrientation.lock(orientation)",
        "type": "Screen"
    },
    "screenOrientation.onchange": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "screenOrientation.onchange",
        "params": [],
        "path": "dom/screenorientation/onchange",
        "syntax": "ScreenOrientation.addEventListener('change', function(e) { ... }) ScreenOrientation.onchange = function(e) { ... }",
        "type": "Screen"
    },
    "screenOrientation.unlock": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "screenOrientation.unlock",
        "params": [],
        "path": "dom/screenorientation/unlock",
        "syntax": "ScreenOrientation.unlock()",
        "type": "Screen"
    },
    "screenTop": {
        "descr": "The Window.screenTop read-only property returns the vertical distance, in CSS pixels, from the top border of the user's browser viewport to the top side of the screen.",
        "name": "window.screenTop",
        "params": [],
        "path": "dom/window/screentop",
        "syntax": "topWindowPos = window.screenTop  Returns A number equal to the number of CSS pixels from the top edge of the browser viewport to the top edge of the screen. Examples In our screenleft-screentop example, you'll see a canvas onto which has been drawn a circle. In this example we are using screenLeft/screenTop plus Window.requestAnimationFrame()",
        "type": "Window"
    },
    "screenX": {
        "descr": "The Window.screenX read-only property returns the horizontal distance, in CSS pixels, of the left border of the user's browser viewport to the left side of the screen.",
        "name": "window.screenX",
        "params": [],
        "path": "dom/window/screenx",
        "syntax": "leftWindowPos = window.screenX  Returns A number equal to the number of CSS pixels from the left edge of the browser viewport to the left edge of the screen. Examples In our screenleft-screentop example, you'll see a canvas onto which has been drawn a circle. In this example we are using Window.screenLeft/Window.screenTop plus Window.requestAnimationFrame()",
        "type": "Window"
    },
    "screenY": {
        "descr": "The Window.screenY read-only property returns the vertical distance, in CSS pixels, of the top border of the user's browser viewport to the top edge of the screen.",
        "name": "window.screenY",
        "params": [],
        "path": "dom/window/screeny",
        "syntax": "topWindowPos = window.screenY  Returns A number equal to the number of CSS pixels from the top edge of the browser viewport to the top edge of the screen. Examples In our screenleft-screentop example, you'll see a canvas onto which has been drawn a circle. In this example we are using Window.screenLeft/Window.screenTop plus Window.requestAnimationFrame()",
        "type": "Window"
    },
    "scroll": {
        "descr": "This method is a shortcut for .on( \"scroll\", handler ) in the first and second variations, and .trigger( \"scroll\" ) in the third.",
        "name": "scroll",
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            },
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.",
                "name": "eventData"
            },
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            }
        ],
        "path": "jquery/scroll",
        "syntax": ".scroll( handler ) Returns: jQuery",
        "type": "Events"
    },
    "scrollBy": {
        "descr": "Scrolls the document in the window by the given amount.",
        "name": "window.scrollBy",
        "params": [],
        "path": "dom/window/scrollby",
        "syntax": "window.scrollBy(x-coord, y-coord);\n or  window.scrollBy(options));",
        "type": "Window"
    },
    "scrollLeft": {
        "descr": "The horizontal scroll position is the same as the number of pixels that are hidden from view to the left of the scrollable area. If the scroll bar is at the very left, or if the element is not scrollable, this number will be 0.",
        "name": "scrollLeft",
        "params": [
            {
                "descr": "Type: Number  An integer indicating the new position to set the scroll bar to.",
                "name": "value"
            }
        ],
        "path": "jquery/scrollleft",
        "syntax": ".scrollLeft() Returns: Integer",
        "type": "Offset"
    },
    "scrollTo": {
        "descr": "Scrolls to a particular set of coordinates in the document.",
        "name": "window.scrollTo",
        "params": [],
        "path": "dom/window/scrollto",
        "syntax": "window.scrollTo(x-coord, y-coord) window.scrollTo(options)",
        "type": "Window"
    },
    "scrollTop": {
        "descr": "The vertical scroll position is the same as the number of pixels that are hidden from view above the scrollable area. If the scroll bar is at the very top, or if the element is not scrollable, this number will be 0.",
        "name": "scrollTop",
        "params": [
            {
                "descr": "Type: Number  A number indicating the new position to set the scroll bar to.",
                "name": "value"
            }
        ],
        "path": "jquery/scrolltop",
        "syntax": ".scrollTop() Returns: Number",
        "type": "Offset"
    },
    "scrollX": {
        "descr": "The read-only scrollX property of the Window interface returns the number of pixels that the document is currently scrolled horizontally. This value is subpixel precise in modern browsers, meaning that it isn't necessarily a whole number. You can get the number of pixels the document is scrolled vertically from the scrollY property.",
        "name": "window.scrollX",
        "params": [
            {
                "descr": "Uses the non-standard name: pageXOffset",
                "name": "?   ?"
            },
            {
                "descr": "Uses the non-standard name: pageXOffset",
                "name": "?   ?"
            },
            {
                "descr": "Uses the non-standard name: pageXOffset",
                "name": "?   ?"
            }
        ],
        "path": "dom/window/scrollx",
        "syntax": "var x = window.scrollX; Value In practice, the returned value is a double-precision floating-point value indicating the number of pixels the document is currently scrolled horizontally from the origin, where a positive value means the content is scrolled to the left. If the document is rendered on a subpixel-precise device, then the returned value is also subpixel-precise and may contain a decimal component. If the document isn't scrolled at all left or right, then scrollX is 0.  If you need an integer value, you can use Math.round()",
        "type": "Window"
    },
    "scrollY": {
        "descr": "The read-only scrollY property of the Window interface returns the number of pixels that the document is currently scrolled vertically. This value is subpixel precise in modern browsers, meaning that it isn't necessarily a whole number. You can get the number of pixels the document is scrolled horizontally from the scrollX property.",
        "name": "window.scrollY",
        "params": [
            {
                "descr": "Uses the non-standard name: pageYOffset",
                "name": "?   ?"
            },
            {
                "descr": "Uses the non-standard name: pageYOffset",
                "name": "?"
            },
            {
                "descr": "Uses the non-standard name: pageYOffset",
                "name": "?   ?"
            }
        ],
        "path": "dom/window/scrolly",
        "syntax": "var y = window.scrollY Value In practice, the returned value is a double-precision floating-point value indicating the number of pixels the document is currently scrolled vertically from the origin, where a positive value means the content is scrolled to upward. If the document is rendered on a subpixel-precise device, then the returned value is also subpixel-precise and may contain a decimal component. If the document isn't scrolled at all up or down, then scrollY is 0.  If you need an integer value, you can use Math.round()",
        "type": "Window"
    },
    "seal": {
        "descr": "The Object.seal() method seals an object, preventing new properties from being added to it and marking all existing properties as non-configurable. Values of present properties can still be changed as long as they are writable.",
        "name": "Object.seal",
        "params": [
            {
                "descr": "The object which should be sealed. ",
                "name": "obj"
            }
        ],
        "path": "javascript/global_objects/object/seal",
        "syntax": "Object.seal(obj)",
        "type": "Object"
    },
    "search": {
        "descr": "The search() method executes a search for a match between a regular expression and this String object.",
        "name": "string.search",
        "params": [
            {
                "descr": "A regular expression object. If a non-RegExp object obj is passed, it is implicitly converted to a RegExp by using new RegExp(obj).",
                "name": "regexp"
            }
        ],
        "path": "javascript/global_objects/string/search",
        "syntax": "str.search(regexp)",
        "type": "String"
    },
    "select": {
        "descr": "This method is a shortcut for .on( \"select\", handler ) in the first two variations, and .trigger( \"select\" ) in the third.",
        "name": "select",
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            },
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.",
                "name": "eventData"
            },
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            }
        ],
        "path": "jquery/select",
        "syntax": ".select( handler ) Returns: jQuery",
        "type": "Events"
    },
    "selector": {
        "descr": "The .selector property was deprecated in jQuery 1.7 and is only maintained to the extent needed for supporting .live() in the jQuery Migrate plugin. It may be removed without notice in a future version. The property was never a reliable indicator of the selector that could be used to obtain the set of elements currently contained in the jQuery set where it was a property, since subsequent traversal methods may have changed the set. Plugins that need to use a selector string within their plugin can require it as a parameter of the method. For example, a \"foo\" plugin could be written as $.fn.foo = function( selector, options ) { /* plugin code goes here */ };, and the person using the plugin would write $( \"div.bar\" ).foo( \"div.bar\", {dog: \"bark\"} ); with the \"div.bar\" selector repeated as the first argument of .foo().",
        "name": "selector",
        "params": [],
        "path": "jquery/selector",
        "syntax": "selectorReturns: Stringversion deprecated: 1.7, removed: 3.0   Description: A selector representing selector passed to jQuery(), if any, when creating the original set.",
        "type": "Miscellaneous"
    },
    "self": {
        "descr": "The Window.self read-only property returns the window itself, as a WindowProxy. It can be used with dot notation on a window object (that is, window.self) or standalone (self). The advantage of the standalone notation is that a similar notation exists for non-window contexts, such as in Web Workers. By using self, you can refer to the global scope in a way that will work not only in a window context (self will resolve to window.self) but also in a worker context (self will then resolve to WorkerGlobalScope.self).",
        "name": "window.self",
        "params": [],
        "path": "dom/window/self",
        "syntax": "var w = window.self; // w === window  Example Uses of window.self like the following could just as well be replaced by window. if (window.parent.frames[0] != window.self) { // this window is not the first frame in the list }",
        "type": "Window"
    },
    "serialize": {
        "descr": "The .serialize() method creates a text string in standard URL-encoded notation. It can act on a jQuery object that has selected individual form controls, such as <input>, <textarea>, and <select>: $( \"input, textarea, select\" ).serialize();",
        "name": "serialize",
        "params": [],
        "path": "jquery/serialize",
        "syntax": ".serialize() Returns: String",
        "type": "Ajax"
    },
    "serializeArray": {
        "descr": "The .serializeArray() method creates a JavaScript array of objects, ready to be encoded as a JSON string. It operates on a jQuery collection of forms and/or form controls. The controls can be of several types:",
        "name": "serializeArray",
        "params": [],
        "path": "jquery/serializearray",
        "syntax": ".serializeArray() Returns: Array",
        "type": "Ajax"
    },
    "sessionStorage": {
        "descr": "The sessionStorage property allows you to access a session Storage object for the current origin. sessionStorage is similar to Window.localStorage; the only difference is while data stored in localStorage has no expiration set, data stored in sessionStorage gets cleared when the page session ends. A page session lasts for as long as the browser is open and survives over page reloads and restores. Opening a page in a new tab or window will cause a new session to be initiated with the value of the top-level browsing context, which differs from how session cookies work.",
        "name": "window.sessionStorage",
        "params": [],
        "path": "dom/window/sessionstorage",
        "syntax": "// Save data to sessionStorage sessionStorage.setItem('key', 'value');\n or  // Get saved data from sessionStorage var data = sessionStorage.getItem('key');\n or  // Remove saved data from sessionStorage sessionStorage.removeItem('key');\n or  // Remove all saved data from sessionStorage sessionStorage.clear();",
        "type": "Window"
    },
    "set": {
        "descr": "The set syntax binds an object property to a function to be called when there is an attempt to set that property.",
        "name": "set",
        "params": [
            {
                "descr": "The name of the property to bind to the given function.",
                "name": "prop"
            },
            {
                "descr": "An alias for the variable that holds the value attempted to be assigned to prop.",
                "name": "val"
            },
            {
                "descr": "Starting with ECMAScript 2015, you can also use expressions for a computed property name to bind to the given function.",
                "name": "expression"
            }
        ],
        "path": "javascript/functions/set",
        "syntax": "{set prop(val) { . . . }} {set [expression](val) { . . . }}",
        "type": "Function"
    },
    "set.@@iterator": {
        "descr": "The initial value of the @@iterator property is the same function object as the initial value of the values property.",
        "name": "set.@@iterator",
        "params": [],
        "path": "javascript/global_objects/set/@@iterator",
        "syntax": "mySet[Symbol.iterator] Return value The Set iterator function, which is the values()",
        "type": "Set"
    },
    "set.add": {
        "descr": "The add() method appends a new element with a specified value to the end of a Set object.",
        "name": "set.add",
        "params": [
            {
                "descr": "Required. The value of the element to add to the Set object.",
                "name": "value"
            }
        ],
        "path": "javascript/global_objects/set/add",
        "syntax": "mySet.add(value);",
        "type": "Set"
    },
    "set.clear": {
        "descr": "The clear() method removes all elements from a Set object.",
        "name": "set.clear",
        "params": [],
        "path": "javascript/global_objects/set/clear",
        "syntax": "mySet.clear();",
        "type": "Set"
    },
    "set.delete": {
        "descr": "The delete() method removes the specified element from a Set object.",
        "name": "set.delete",
        "params": [
            {
                "descr": "Required. The value of the element to remove from the Set object.",
                "name": "value"
            }
        ],
        "path": "javascript/global_objects/set/delete",
        "syntax": "mySet.delete(value);",
        "type": "Set"
    },
    "set.entries": {
        "descr": "The entries() method returns a new Iterator object that contains[value, value] for each element in the Set object, in insertion order. For Set objects there is no key like in Map objects. However, to keep the API similar to the Map object, each entry has the same value for its key and value here, so that an array [value, value] is returned.",
        "name": "set.entries",
        "params": [],
        "path": "javascript/global_objects/set/entries",
        "syntax": "mySet.entries()",
        "type": "Set"
    },
    "set.forEach": {
        "descr": "The forEach() method executes a provided function once for each value in the Set object, in insertion order.",
        "name": "set.forEach",
        "params": [
            {
                "descr": "Function to execute for each element. ",
                "name": "callback"
            },
            {
                "descr": "Value to use as this when executing callback.",
                "name": "thisArg"
            }
        ],
        "path": "javascript/global_objects/set/foreach",
        "syntax": "mySet.forEach(function callback(value1, value2, Set) { //your iterator }[, thisArg])",
        "type": "Set"
    },
    "set.has": {
        "descr": "The has() method returns a boolean indicating whether an element with the specified value exists in a Set object or not.",
        "name": "set.has",
        "params": [
            {
                "descr": "Required. The value to test for presence in the Set object.",
                "name": "value"
            },
            {
                "descr": "Returns true if an element with the specified value exists in the Set object; otherwise false. ",
                "name": "Boolean"
            }
        ],
        "path": "javascript/global_objects/set/has",
        "syntax": "mySet.has(value);",
        "type": "Set"
    },
    "set.size": {
        "descr": "The size accessor property returns the number of elements in a Set object.",
        "name": "set.size",
        "params": [],
        "path": "javascript/global_objects/set/size",
        "syntax": "size property was implemented as a Set.prototype.size()",
        "type": "Set"
    },
    "set.values": {
        "descr": "The values() method returns a new Iterator object that contains the values for each element in the Set object in insertion order.",
        "name": "set.values",
        "params": [],
        "path": "javascript/global_objects/set/values",
        "syntax": "mySet.values();",
        "type": "Set"
    },
    "setDate": {
        "descr": "The setDate() method sets the day of the Date object relative to the beginning of the currently set month.",
        "name": "date.setDate",
        "params": [
            {
                "descr": "An integer representing the day of the month.",
                "name": "dayValue"
            }
        ],
        "path": "javascript/global_objects/date/setdate",
        "syntax": "dateObj.setDate(dayValue)",
        "type": "Date"
    },
    "setFullYear": {
        "descr": "The setFullYear() method sets the full year for a specified date according to local time. Returns new timestamp.",
        "name": "date.setFullYear",
        "params": [
            {
                "descr": "An integer specifying the numeric value of the year, for example, 1995.",
                "name": "yearValue"
            },
            {
                "descr": "Optional. An integer between 0 and 11 representing the months January through December.",
                "name": "monthValue"
            },
            {
                "descr": "Optional. An integer between 1 and 31 representing the day of the month. ",
                "name": "dateValue"
            }
        ],
        "path": "javascript/global_objects/date/setfullyear",
        "syntax": "dateObj.setFullYear(yearValue[, monthValue[, dateValue]])",
        "type": "Date"
    },
    "setHours": {
        "descr": "The setHours() method sets the hours for a specified date according to local time, and returns the number of milliseconds since January 1, 1970 00:00:00 UTC until the time represented by the updated Date instance.",
        "name": "date.setHours",
        "params": [
            {
                "descr": "Ideally, an integer between 0 and 23, representing the hour. ",
                "name": "hoursValue"
            },
            {
                "descr": "Optional. Ideally, an integer between 0 and 59, representing the minutes. ",
                "name": "minutesValue"
            },
            {
                "descr": "Optional. Ideally, an integer between 0 and 59, representing the seconds. ",
                "name": "secondsValue"
            },
            {
                "descr": "Optional. Ideally, a number between 0 and 999, representing the milliseconds. ",
                "name": "msValue"
            }
        ],
        "path": "javascript/global_objects/date/sethours",
        "syntax": "dateObj.setHours(hoursValue[, minutesValue[, secondsValue[, msValue]]])",
        "type": "Date"
    },
    "setMilliseconds": {
        "descr": "The setMilliseconds() method sets the milliseconds for a specified date according to local time.",
        "name": "date.setMilliseconds",
        "params": [
            {
                "descr": "A number between 0 and 999, representing the milliseconds.",
                "name": "millisecondsValue"
            }
        ],
        "path": "javascript/global_objects/date/setmilliseconds",
        "syntax": "dateObj.setMilliseconds(millisecondsValue)",
        "type": "Date"
    },
    "setMinutes": {
        "descr": "The setMinutes() method sets the minutes for a specified date according to local time.",
        "name": "date.setMinutes",
        "params": [
            {
                "descr": "An integer between 0 and 59, representing the minutes.",
                "name": "minutesValue"
            },
            {
                "descr": "Optional. An integer between 0 and 59, representing the seconds. ",
                "name": "secondsValue"
            },
            {
                "descr": "Optional. A number between 0 and 999, representing the milliseconds. ",
                "name": "msValue"
            }
        ],
        "path": "javascript/global_objects/date/setminutes",
        "syntax": "dateObj.setMinutes(minutesValue[, secondsValue[, msValue]])",
        "type": "Date"
    },
    "setMonth": {
        "descr": "The setMonth() method sets the month for a specified date according to the currently set year.",
        "name": "date.setMonth",
        "params": [
            {
                "descr": "An integer between 0 and 11, representing the months January through December.",
                "name": "monthValue"
            },
            {
                "descr": "Optional. An integer from 1 to 31, representing the day of the month.",
                "name": "dayValue"
            }
        ],
        "path": "javascript/global_objects/date/setmonth",
        "syntax": "dateObj.setMonth(monthValue[, dayValue])",
        "type": "Date"
    },
    "setPrototypeOf": {
        "descr": "The Object.setPrototypeOf() method sets the prototype (i.e., the internal [[Prototype]] property) of a specified object to another object or null.",
        "name": "Object.setPrototypeOf",
        "params": [
            {
                "descr": "The object which is to have its prototype set.",
                "name": "obj"
            },
            {
                "descr": "The object's new prototype (an object or null).",
                "name": "prototype"
            }
        ],
        "path": "javascript/global_objects/object/setprototypeof",
        "syntax": "Object.setPrototypeOf(obj, prototype)",
        "type": "Object"
    },
    "setSeconds": {
        "descr": "The setSeconds() method sets the seconds for a specified date according to local time.",
        "name": "date.setSeconds",
        "params": [
            {
                "descr": "An integer between 0 and 59, representing the seconds.",
                "name": "secondsValue"
            },
            {
                "descr": "Optional. A number between 0 and 999, representing the milliseconds.",
                "name": "msValue"
            }
        ],
        "path": "javascript/global_objects/date/setseconds",
        "syntax": "dateObj.setSeconds(secondsValue[, msValue])",
        "type": "Date"
    },
    "setTime": {
        "descr": "The setTime() method sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC.",
        "name": "date.setTime",
        "params": [
            {
                "descr": "An integer representing the number of milliseconds since 1 January 1970, 00:00:00 UTC.",
                "name": "timeValue"
            }
        ],
        "path": "javascript/global_objects/date/settime",
        "syntax": "dateObj.setTime(timeValue)",
        "type": "Date"
    },
    "setUTCDate": {
        "descr": "The setUTCDate() method sets the day of the month for a specified date according to universal time.",
        "name": "date.setUTCDate",
        "params": [
            {
                "descr": "An integer from 1 to 31, representing the day of the month.",
                "name": "dayValue"
            }
        ],
        "path": "javascript/global_objects/date/setutcdate",
        "syntax": "dateObj.setUTCDate(dayValue)",
        "type": "Date"
    },
    "setUTCFullYear": {
        "descr": "The setUTCFullYear() method sets the full year for a specified date according to universal time.",
        "name": "date.setUTCFullYear",
        "params": [
            {
                "descr": "An integer specifying the numeric value of the year, for example, 1995.",
                "name": "yearValue"
            },
            {
                "descr": "Optional. An integer between 0 and 11 representing the months January through December.",
                "name": "monthValue"
            },
            {
                "descr": "Optional. An integer between 1 and 31 representing the day of the month. ",
                "name": "dayValue"
            }
        ],
        "path": "javascript/global_objects/date/setutcfullyear",
        "syntax": "dateObj.setUTCFullYear(yearValue[, monthValue[, dayValue]])",
        "type": "Date"
    },
    "setUTCHours": {
        "descr": "The setUTCHours() method sets the hour for a specified date according to universal time, and returns the number of milliseconds since January 1, 1970 00:00:00 UTC until the time represented by the updated Date instance.",
        "name": "date.setUTCHours",
        "params": [
            {
                "descr": "An integer between 0 and 23, representing the hour.",
                "name": "hoursValue"
            },
            {
                "descr": "Optional. An integer between 0 and 59, representing the minutes.",
                "name": "minutesValue"
            },
            {
                "descr": "Optional. An integer between 0 and 59, representing the seconds. ",
                "name": "secondsValue"
            },
            {
                "descr": "Optional. A number between 0 and 999, representing the milliseconds. ",
                "name": "msValue"
            }
        ],
        "path": "javascript/global_objects/date/setutchours",
        "syntax": "dateObj.setUTCHours(hoursValue[, minutesValue[, secondsValue[, msValue]]])",
        "type": "Date"
    },
    "setUTCMilliseconds": {
        "descr": "The setUTCMilliseconds() method sets the milliseconds for a specified date according to universal time.",
        "name": "date.setUTCMilliseconds",
        "params": [
            {
                "descr": "A number between 0 and 999, representing the milliseconds.",
                "name": "millisecondsValue"
            }
        ],
        "path": "javascript/global_objects/date/setutcmilliseconds",
        "syntax": "dateObj.setUTCMilliseconds(millisecondsValue)",
        "type": "Date"
    },
    "setUTCMinutes": {
        "descr": "The setUTCMinutes() method sets the minutes for a specified date according to universal time.",
        "name": "date.setUTCMinutes",
        "params": [
            {
                "descr": "An integer between 0 and 59, representing the minutes.",
                "name": "minutesValue"
            },
            {
                "descr": "Optional. An integer between 0 and 59, representing the seconds. ",
                "name": "secondsValue"
            },
            {
                "descr": "Optional. A number between 0 and 999, representing the milliseconds. ",
                "name": "msValue"
            }
        ],
        "path": "javascript/global_objects/date/setutcminutes",
        "syntax": "dateObj.setUTCMinutes(minutesValue[, secondsValue[, msValue]])",
        "type": "Date"
    },
    "setUTCMonth": {
        "descr": "The setUTCMonth() method sets the month for a specified date according to universal time.",
        "name": "date.setUTCMonth",
        "params": [
            {
                "descr": "An integer between 0 and 11, representing the months January through December.",
                "name": "monthValue"
            },
            {
                "descr": "Optional. An integer from 1 to 31, representing the day of the month.",
                "name": "dayValue"
            }
        ],
        "path": "javascript/global_objects/date/setutcmonth",
        "syntax": "dateObj.setUTCMonth(monthValue[, dayValue])",
        "type": "Date"
    },
    "setUTCSeconds": {
        "descr": "The setUTCSeconds() method sets the seconds for a specified date according to universal time.",
        "name": "date.setUTCSeconds",
        "params": [
            {
                "descr": "An integer between 0 and 59, representing the seconds.",
                "name": "secondsValue"
            },
            {
                "descr": "Optional. A number between 0 and 999, representing the milliseconds.",
                "name": "msValue"
            }
        ],
        "path": "javascript/global_objects/date/setutcseconds",
        "syntax": "dateObj.setUTCSeconds(secondsValue[, msValue])",
        "type": "Date"
    },
    "sharedArrayBuffer.byteLength": {
        "descr": "The byteLength accessor property represents the length of an SharedArrayBuffer in bytes.",
        "name": "sharedArrayBuffer.byteLength",
        "params": [],
        "path": "javascript/global_objects/sharedarraybuffer/bytelength",
        "syntax": "sab.byteLength Description The byteLength property is an accessor property whose set accessor function is undefined, meaning that you can only read this property. The value is established when the shared array is constructed and cannot be changed. Examples var sab = new SharedArrayBuffer(1024);\n or  sab.byteLength; // 1024);",
        "type": "SharedArrayBuffer"
    },
    "sharedArrayBuffer.slice": {
        "descr": "The SharedArrayBuffer.prototype.slice() method returns a new SharedArrayBuffer whose contents are a copy of this SharedArrayBuffer's bytes from begin, inclusive, up to end, exclusive. If either begin or end is negative, it refers to an index from the end of the array, as opposed to from the beginning. This method has the same algorithm as Array.prototype.slice().",
        "name": "sharedArrayBuffer.slice",
        "params": [
            {
                "descr": "Zero-based index at which to begin extraction.",
                "name": "begin Optional"
            },
            {
                "descr": "Zero-based index before which to end extraction. ",
                "name": "end Optional"
            }
        ],
        "path": "javascript/global_objects/sharedarraybuffer/slice",
        "syntax": "sab.slice() sab.slice(begin) sab.slice(begin, end)",
        "type": "SharedArrayBuffer"
    },
    "shift": {
        "descr": "The shift() method removes the first element from an array and returns that removed element. This method changes the length of the array.",
        "name": "array.shift",
        "params": [],
        "path": "javascript/global_objects/array/shift",
        "syntax": "arr.shift()",
        "type": "Array"
    },
    "show": {
        "descr": "With no parameters, the .show() method is the simplest way to display an element:",
        "name": "show",
        "params": [
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.",
                "name": "duration"
            },
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.",
                "name": "complete"
            },
            {
                "descr": "Type: PlainObject  A map of additional options to pass to the method. ",
                "name": "options"
            },
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.",
                "name": "easing"
            },
            {
                "descr": "(default: true) Type: Boolean or String  A Boolean indicating whether to place the animation in the effects queue. ",
                "name": "queue"
            },
            {
                "descr": "Type: PlainObject  An object containing one or more of the CSS properties defined by the properties argument and their corresponding easing functions. ",
                "name": "specialEasing"
            },
            {
                "descr": "Type: Function( Number now, Tween tween ) A function to be called for each animated property of each animated element. ",
                "name": "step"
            },
            {
                "descr": "Type: Function( Promise animation, Number progress, Number remainingMs ) A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties. (version added: 1.8)",
                "name": "progress"
            },
            {
                "descr": "Type: Function() A function that is called once the animation on an element is complete.",
                "name": "complete"
            },
            {
                "descr": "Type: Function( Promise animation ) A function to call when the animation on an element begins. ",
                "name": "start"
            },
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes (its Promise object is resolved). ",
                "name": "done"
            },
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element fails to complete (its Promise object is rejected). ",
                "name": "fail"
            },
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes or stops without completing (its Promise object is either resolved or rejected). (version added: 1.8)",
                "name": "always"
            },
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.",
                "name": "duration"
            },
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.",
                "name": "easing"
            },
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.",
                "name": "complete"
            }
        ],
        "path": "jquery/show",
        "syntax": ".show() Returns: jQuery",
        "type": "Effects"
    },
    "showModalDialog": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "window.showModalDialog",
        "params": [],
        "path": "dom/window/showmodaldialog",
        "syntax": "returnVal = window.showModalDialog(uri[, arguments][, options]);",
        "type": "Window"
    },
    "siblings": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .siblings() method allows us to search through the siblings of these elements in the DOM tree and construct a new jQuery object from the matching elements.",
        "name": "siblings",
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.",
                "name": "selector"
            }
        ],
        "path": "jquery/siblings",
        "syntax": ".siblings( [selector ] ) Returns: jQuery",
        "type": "Traversing"
    },
    "size": {
        "descr": "The .size() method is deprecated as of jQuery 1.8. Use the .length property instead.",
        "name": "size",
        "params": [],
        "path": "jquery/size",
        "syntax": ".size() Returns: Integerversion deprecated: 1.8, removed: 3.0",
        "type": "Miscellaneous"
    },
    "slice": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .slice() method constructs a new jQuery object containing a subset of the elements specified by the start and, optionally, end argument. The supplied start index identifies the position of one of the elements in the set; if end is omitted, all elements after this one will be included in the result.",
        "name": "slice",
        "params": [
            {
                "descr": "Type: Integer  An integer indicating the 0-based position at which the elements begin to be selected. ",
                "name": "start"
            },
            {
                "descr": "Type: Integer  An integer indicating the 0-based position at which the elements stop being selected. ",
                "name": "end"
            }
        ],
        "path": "jquery/slice",
        "syntax": ".slice( start [, end ] ) Returns: jQuery",
        "type": "Traversing"
    },
    "slideDown": {
        "descr": "The .slideDown() method animates the height of the matched elements. This causes lower parts of the page to slide down, making way for the revealed items.",
        "name": "slideDown",
        "params": [
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.",
                "name": "duration"
            },
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.",
                "name": "complete"
            },
            {
                "descr": "Type: PlainObject  A map of additional options to pass to the method. ",
                "name": "options"
            },
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.",
                "name": "easing"
            },
            {
                "descr": "(default: true) Type: Boolean or String  A Boolean indicating whether to place the animation in the effects queue. ",
                "name": "queue"
            },
            {
                "descr": "Type: PlainObject  An object containing one or more of the CSS properties defined by the properties argument and their corresponding easing functions. ",
                "name": "specialEasing"
            },
            {
                "descr": "Type: Function( Number now, Tween tween ) A function to be called for each animated property of each animated element. ",
                "name": "step"
            },
            {
                "descr": "Type: Function( Promise animation, Number progress, Number remainingMs ) A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties. (version added: 1.8)",
                "name": "progress"
            },
            {
                "descr": "Type: Function() A function that is called once the animation on an element is complete.",
                "name": "complete"
            },
            {
                "descr": "Type: Function( Promise animation ) A function to call when the animation on an element begins. ",
                "name": "start"
            },
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes (its Promise object is resolved). ",
                "name": "done"
            },
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element fails to complete (its Promise object is rejected). ",
                "name": "fail"
            },
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes or stops without completing (its Promise object is either resolved or rejected). (version added: 1.8)",
                "name": "always"
            },
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.",
                "name": "duration"
            },
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.",
                "name": "easing"
            },
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.",
                "name": "complete"
            }
        ],
        "path": "jquery/slidedown",
        "syntax": ".slideDown( [duration ] [, complete ] ) Returns: jQuery",
        "type": "Effects"
    },
    "slideToggle": {
        "descr": "The .slideToggle() method animates the height of the matched elements. This causes lower parts of the page to slide up or down, appearing to reveal or conceal the items. If the element is initially displayed, it will be hidden; if hidden, it will be shown. The display property is saved and restored as needed. If an element has a display value of inline, then is hidden and shown, it will once again be displayed inline. When the height reaches 0 after a hiding animation, the display style property is set to none to ensure that the element no longer affects the layout of the page.",
        "name": "slideToggle",
        "params": [
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.",
                "name": "duration"
            },
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.",
                "name": "complete"
            },
            {
                "descr": "Type: PlainObject  A map of additional options to pass to the method. ",
                "name": "options"
            },
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.",
                "name": "easing"
            },
            {
                "descr": "(default: true) Type: Boolean or String  A Boolean indicating whether to place the animation in the effects queue. ",
                "name": "queue"
            },
            {
                "descr": "Type: PlainObject  An object containing one or more of the CSS properties defined by the properties argument and their corresponding easing functions. ",
                "name": "specialEasing"
            },
            {
                "descr": "Type: Function( Number now, Tween tween ) A function to be called for each animated property of each animated element. ",
                "name": "step"
            },
            {
                "descr": "Type: Function( Promise animation, Number progress, Number remainingMs ) A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties. (version added: 1.8)",
                "name": "progress"
            },
            {
                "descr": "Type: Function() A function that is called once the animation on an element is complete.",
                "name": "complete"
            },
            {
                "descr": "Type: Function( Promise animation ) A function to call when the animation on an element begins. ",
                "name": "start"
            },
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes (its Promise object is resolved). ",
                "name": "done"
            },
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element fails to complete (its Promise object is rejected). ",
                "name": "fail"
            },
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes or stops without completing (its Promise object is either resolved or rejected). (version added: 1.8)",
                "name": "always"
            },
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.",
                "name": "duration"
            },
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.",
                "name": "easing"
            },
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.",
                "name": "complete"
            }
        ],
        "path": "jquery/slidetoggle",
        "syntax": ".slideToggle( [duration ] [, complete ] ) Returns: jQuery",
        "type": "Effects"
    },
    "slideUp": {
        "descr": "The .slideUp() method animates the height of the matched elements. This causes lower parts of the page to slide up, appearing to conceal the items. Once the height reaches 0 (or, if set, to whatever the CSS min-height property is), the display style property is set to none to ensure that the element no longer affects the layout of the page.",
        "name": "slideUp",
        "params": [
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.",
                "name": "duration"
            },
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.",
                "name": "complete"
            },
            {
                "descr": "Type: PlainObject  A map of additional options to pass to the method. ",
                "name": "options"
            },
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.",
                "name": "easing"
            },
            {
                "descr": "(default: true) Type: Boolean or String  A Boolean indicating whether to place the animation in the effects queue. ",
                "name": "queue"
            },
            {
                "descr": "Type: PlainObject  An object containing one or more of the CSS properties defined by the properties argument and their corresponding easing functions. ",
                "name": "specialEasing"
            },
            {
                "descr": "Type: Function( Number now, Tween tween ) A function to be called for each animated property of each animated element. ",
                "name": "step"
            },
            {
                "descr": "Type: Function( Promise animation, Number progress, Number remainingMs ) A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties. (version added: 1.8)",
                "name": "progress"
            },
            {
                "descr": "Type: Function() A function that is called once the animation on an element is complete.",
                "name": "complete"
            },
            {
                "descr": "Type: Function( Promise animation ) A function to call when the animation on an element begins. ",
                "name": "start"
            },
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes (its Promise object is resolved). ",
                "name": "done"
            },
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element fails to complete (its Promise object is rejected). ",
                "name": "fail"
            },
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes or stops without completing (its Promise object is either resolved or rejected). (version added: 1.8)",
                "name": "always"
            },
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.",
                "name": "duration"
            },
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.",
                "name": "easing"
            },
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.",
                "name": "complete"
            }
        ],
        "path": "jquery/slideup",
        "syntax": ".slideUp( [duration ] [, complete ] ) Returns: jQuery",
        "type": "Effects"
    },
    "small": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "string.small",
        "params": [],
        "path": "javascript/global_objects/string/small",
        "syntax": "str.small()",
        "type": "String"
    },
    "some": {
        "descr": "The some() method tests whether at least one element in the array passes the test implemented by the provided function.",
        "name": "array.some",
        "params": [
            {
                "descr": "Function to test for each element, taking three arguments:  element The current element being processed in the array.",
                "name": "callback"
            },
            {
                "descr": "The index of the current element being processed in the array.",
                "name": "index Optional"
            },
            {
                "descr": "The array some() was called upon.",
                "name": "arrayOptional"
            },
            {
                "descr": "Value to use as this when executing callback.",
                "name": "thisArgOptional"
            }
        ],
        "path": "javascript/global_objects/array/some",
        "syntax": "arr.some(callback(element[, index[, array]])[, thisArg])",
        "type": "Array"
    },
    "sort": {
        "descr": "The sort() method sorts the elements of an array in place and returns the array. The default sort order is built upon converting the elements into strings, then comparing their sequences of UTF-16 code units values.",
        "name": "array.sort",
        "params": [
            {
                "descr": "Specifies a function that defines the sort order. ",
                "name": "compareFunction Optional"
            }
        ],
        "path": "javascript/global_objects/array/sort",
        "syntax": "arr.sort([compareFunction])",
        "type": "Array"
    },
    "speechSynthesis": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "window.speechSynthesis",
        "params": [],
        "path": "dom/window/speechsynthesis",
        "syntax": "var synth = window.speechSynthesis;  Value A SpeechSynthesis object. Examples In our basic Speech synthesiser demo, we first grab a reference to the SpeechSynthesis controller using window.speechSynthesis. After defining some necessary variables, we retrieve a list of the voices available using SpeechSynthesis.getVoices()",
        "type": "Window"
    },
    "splice": {
        "descr": "The splice() method changes the contents of an array by removing existing elements and/or adding new elements.",
        "name": "array.splice",
        "params": [
            {
                "descr": "Index at which to start changing the array (with origin 0). ",
                "name": "start"
            },
            {
                "descr": "An integer indicating the number of old array elements to remove.",
                "name": "deleteCount Optional"
            },
            {
                "descr": "The elements to add to the array, beginning at the start index. ",
                "name": "item1, item2, ... Optional"
            }
        ],
        "path": "javascript/global_objects/array/splice",
        "syntax": "array.splice(start[, deleteCount[, item1[, item2[, ...]]]])",
        "type": "Array"
    },
    "split": {
        "descr": "The split() method splits a String object into an array of strings by separating the string into substrings, using a specified separator string to determine where to make each split.",
        "name": "string.split",
        "params": [
            {
                "descr": "Specifies the string which denotes the points at which each split should occur. ",
                "name": "separator Optional"
            },
            {
                "descr": "Integer specifying a limit on the number of splits to be found. ",
                "name": "limit Optional"
            }
        ],
        "path": "javascript/global_objects/string/split",
        "syntax": "str.split([separator[, limit]])",
        "type": "String"
    },
    "startsWith": {
        "descr": "The startsWith() method determines whether a string begins with the characters of a specified string, returning true or false as appropriate.",
        "name": "string.startsWith",
        "params": [
            {
                "descr": "The characters to be searched for at the start of this string.",
                "name": "searchString"
            },
            {
                "descr": "The position in this string at which to begin searching for searchString; defaults to 0.",
                "name": "position Optional"
            }
        ],
        "path": "javascript/global_objects/string/startswith",
        "syntax": "str.startsWith(searchString[, position])",
        "type": "String"
    },
    "static": {
        "descr": "The static keyword defines a static method for a class. Static methods aren't called on instances of the class. Instead, they're called on the class itself. These are often utility functions, such as functions to create or clone objects.",
        "name": "static",
        "params": [],
        "path": "javascript/classes/static",
        "syntax": "static methodName() { ... }",
        "type": "Classes"
    },
    "stop": {
        "descr": "When .stop() is called on an element, the currently-running animation (if any) is immediately stopped. If, for instance, an element is being hidden with .slideUp() when .stop() is called, the element will now still be displayed, but will be a fraction of its previous height. Callback functions are not called.",
        "name": "stop",
        "params": [
            {
                "descr": "(default: false) Type: Boolean  A Boolean indicating whether to remove queued animation as well. ",
                "name": "clearQueue"
            },
            {
                "descr": "(default: false) Type: Boolean  A Boolean indicating whether to complete the current animation immediately. ",
                "name": "jumpToEnd"
            },
            {
                "descr": "Type: String  The name of the queue in which to stop animations.",
                "name": "queue"
            },
            {
                "descr": "(default: false) Type: Boolean  A Boolean indicating whether to remove queued animation as well. ",
                "name": "clearQueue"
            },
            {
                "descr": "(default: false) Type: Boolean  A Boolean indicating whether to complete the current animation immediately. ",
                "name": "jumpToEnd"
            }
        ],
        "path": "jquery/stop",
        "syntax": ".stop( [clearQueue ] [, jumpToEnd ] ) Returns: jQuery",
        "type": "Effects"
    },
    "strike": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "string.strike",
        "params": [],
        "path": "javascript/global_objects/string/strike",
        "syntax": "str.strike()",
        "type": "String"
    },
    "string.@@iterator": {
        "descr": "The [@@iterator]() method returns a new Iterator object that iterates over the code points of a String value, returning each code point as a String value.",
        "name": "string.@@iterator",
        "params": [],
        "path": "javascript/global_objects/string/@@iterator",
        "syntax": "str[Symbol.iterator] Return value A new Iterator object. Examples Using [@@iterator]()",
        "type": "String"
    },
    "string.anchor": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "string.anchor",
        "params": [
            {
                "descr": "A string representing the name attribute of the a tag to be created.",
                "name": "name"
            }
        ],
        "path": "javascript/global_objects/string/anchor",
        "syntax": "str.anchor(name)",
        "type": "String"
    },
    "string.big": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "string.big",
        "params": [],
        "path": "javascript/global_objects/string/big",
        "syntax": "str.big()",
        "type": "String"
    },
    "string.blink": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "string.blink",
        "params": [],
        "path": "javascript/global_objects/string/blink",
        "syntax": "str.blink()",
        "type": "String"
    },
    "string.bold": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "string.bold",
        "params": [],
        "path": "javascript/global_objects/string/bold",
        "syntax": "str.bold()",
        "type": "String"
    },
    "string.charAt": {
        "descr": "The String object's charAt() method returns a new string consisting of the single UTF-16 code unit located at the specified offset into the string.",
        "name": "string.charAt",
        "params": [
            {
                "descr": "An integer between 0 and 1-less-than the length of the string. ",
                "name": "index"
            }
        ],
        "path": "javascript/global_objects/string/charat",
        "syntax": "character = str.charAt(index)",
        "type": "String"
    },
    "string.charCodeAt": {
        "descr": "The charCodeAt() method returns an integer between 0 and 65535 representing the UTF-16 code unit at the given index.",
        "name": "string.charCodeAt",
        "params": [
            {
                "descr": "An integer greater than or equal to 0 and less than the length of the string; if it is not a number, it defaults to 0.",
                "name": "index"
            }
        ],
        "path": "javascript/global_objects/string/charcodeat",
        "syntax": "str.charCodeAt(index)",
        "type": "String"
    },
    "string.codePointAt": {
        "descr": "The codePointAt() method returns a non-negative integer that is the Unicode code point value.",
        "name": "string.codePointAt",
        "params": [
            {
                "descr": "Position of an element in the String to return the code point value from.",
                "name": "pos"
            }
        ],
        "path": "javascript/global_objects/string/codepointat",
        "syntax": "str.codePointAt(pos)",
        "type": "String"
    },
    "string.concat": {
        "descr": "The concat() method concatenates the string arguments to the calling string and returns a new string.",
        "name": "string.concat",
        "params": [
            {
                "descr": "Strings to concatenate to this string.",
                "name": "string2...stringN"
            }
        ],
        "path": "javascript/global_objects/string/concat",
        "syntax": "str.concat(string2[, string3, ..., stringN])",
        "type": "String"
    },
    "string.endsWith": {
        "descr": "The endsWith() method determines whether a string ends with the characters of a specified string, returning true or false as appropriate.",
        "name": "string.endsWith",
        "params": [
            {
                "descr": "The characters to be searched for at the end of this string.",
                "name": "searchString"
            },
            {
                "descr": "Optional. If provided it is used as the length of str. ",
                "name": "length"
            }
        ],
        "path": "javascript/global_objects/string/endswith",
        "syntax": "str.endsWith(searchString[, length])",
        "type": "String"
    },
    "string.fixed": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "string.fixed",
        "params": [],
        "path": "javascript/global_objects/string/fixed",
        "syntax": "str.fixed()",
        "type": "String"
    },
    "string.fontcolor": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "string.fontcolor",
        "params": [
            {
                "descr": "A string expressing the color as a hexadecimal RGB triplet or as a string literal. ",
                "name": "color"
            }
        ],
        "path": "javascript/global_objects/string/fontcolor",
        "syntax": "str.fontcolor(color)",
        "type": "String"
    },
    "string.fontsize": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "string.fontsize",
        "params": [
            {
                "descr": "An integer between 1 and 7, a string representing a signed integer between 1 and 7.",
                "name": "size"
            }
        ],
        "path": "javascript/global_objects/string/fontsize",
        "syntax": "str.fontsize(size)",
        "type": "String"
    },
    "string.includes": {
        "descr": "The includes() method determines whether one string may be found within another string, returning true or false as appropriate.",
        "name": "string.includes",
        "params": [
            {
                "descr": "A string to be searched for within this string.",
                "name": "searchString"
            },
            {
                "descr": "The position within the string at which to begin searching for searchString. ",
                "name": "position Optional"
            }
        ],
        "path": "javascript/global_objects/string/includes",
        "syntax": "str.includes(searchString[, position])",
        "type": "String"
    },
    "string.indexOf": {
        "descr": "The indexOf() method returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex. Returns -1 if the value is not found.",
        "name": "string.indexOf",
        "params": [
            {
                "descr": "A string representing the value to search for.",
                "name": "searchValue"
            },
            {
                "descr": "An integer representing the index at which to start the search; the default value is 0. ",
                "name": "fromIndex Optional"
            }
        ],
        "path": "javascript/global_objects/string/indexof",
        "syntax": "str.indexOf(searchValue[, fromIndex])",
        "type": "String"
    },
    "string.italics": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "string.italics",
        "params": [],
        "path": "javascript/global_objects/string/italics",
        "syntax": "str.italics()",
        "type": "String"
    },
    "string.lastIndexOf": {
        "descr": "The lastIndexOf() method returns the index within the calling String object of the last occurrence of the specified value, searching backwards from fromIndex. Returns -1 if the value is not found.",
        "name": "string.lastIndexOf",
        "params": [
            {
                "descr": "A string representing the value to search for. ",
                "name": "searchValue"
            },
            {
                "descr": "The index of the last character in the string to be considered as the beginning of a match. ",
                "name": "fromIndex Optional"
            }
        ],
        "path": "javascript/global_objects/string/lastindexof",
        "syntax": "str.lastIndexOf(searchValue[, fromIndex])",
        "type": "String"
    },
    "string.length": {
        "descr": "The length property of a String object indicates the length of a string, in UTF-16 code units.",
        "name": "string.length",
        "params": [],
        "path": "javascript/global_objects/string/length",
        "syntax": "str.length Description This property returns the number of code units in the string. UTF-16, the string format used by JavaScript, uses a single 16-bit code unit to represent the most common characters, but needs to use two code units for less commonly-used characters, so it's possible for the value returned by length to not match the actual number of characters in the string. ECMASCript 2016 (ed. 7) established a maximum length of 2^53 - 1",
        "type": "String"
    },
    "string.link": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "string.link",
        "params": [
            {
                "descr": "Any string that specifies the href attribute of the <a> tag; it should be a valid URL (relative or absolute), with any & characters escaped as &amp;, and any \" characters escaped as &quot;.",
                "name": "url"
            }
        ],
        "path": "javascript/global_objects/string/link",
        "syntax": "str.link(url)",
        "type": "String"
    },
    "string.localeCompare": {
        "descr": "The localeCompare() method returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.",
        "name": "string.localeCompare",
        "params": [
            {
                "descr": "The string against which the referring string is compared",
                "name": "compareString"
            },
            {
                "descr": "Optional. A string with a BCP 47 language tag, or an array of such strings. ",
                "name": "locales"
            },
            {
                "descr": "Whether numeric collation should be used, such that \"1\" < \"2\" < \"10\". ",
                "name": "kn"
            },
            {
                "descr": "Whether upper case or lower case should sort first. ",
                "name": "kf"
            },
            {
                "descr": "Optional. An object with some or all of the following properties:  localeMatcher The locale matching algorithm to use. ",
                "name": "options"
            },
            {
                "descr": "Whether the comparison is for sorting or for searching for matching strings. ",
                "name": "usage"
            },
            {
                "descr": "Which differences in the strings should lead to non-zero result values. ",
                "name": "sensitivity"
            },
            {
                "descr": "Whether punctuation should be ignored. ",
                "name": "ignorePunctuation"
            },
            {
                "descr": "Whether numeric collation should be used, such that \"1\" < \"2\" < \"10\". ",
                "name": "numeric"
            },
            {
                "descr": "Whether upper case or lower case should sort first. ",
                "name": "caseFirst"
            },
            {
                "descr": "occurs before compareStr",
                "name": "referenceStr"
            },
            {
                "descr": "occurs after compareStr",
                "name": "referenceStr"
            }
        ],
        "path": "javascript/global_objects/string/localecompare",
        "syntax": "referenceStr.localeCompare(compareString[, locales[, options]])",
        "type": "String"
    },
    "string.match": {
        "descr": "The match() method retrieves the matches when matching a string against a regular expression.",
        "name": "string.match",
        "params": [
            {
                "descr": "A regular expression object. If a non-RegExp object obj is passed, it is implicitly converted to a RegExp by using new RegExp(obj). ",
                "name": "regexp"
            }
        ],
        "path": "javascript/global_objects/string/match",
        "syntax": "str.match(regexp)",
        "type": "String"
    },
    "string.normalize": {
        "descr": "The normalize() method returns the Unicode Normalization Form of a given string (if the value isn't a string, it will be converted to one first).",
        "name": "string.normalize",
        "params": [
            {
                "descr": "One of \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", specifying the Unicode Normalization Form. ",
                "name": "form"
            },
            {
                "descr": "A RangeError is thrown if form isn't one of the values specified above.",
                "name": "RangeError"
            }
        ],
        "path": "javascript/global_objects/string/normalize",
        "syntax": "str.normalize([form])",
        "type": "String"
    },
    "string.padEnd": {
        "descr": "The padEnd() method pads the current string with a given string (repeated, if needed) so that the resulting string reaches a given length. The padding is applied from the end (right) of the current string.",
        "name": "string.padEnd",
        "params": [
            {
                "descr": "The length of the resulting string once the current string has been padded. ",
                "name": "targetLength"
            },
            {
                "descr": "The string to pad the current string with. ",
                "name": "padString Optional"
            }
        ],
        "path": "javascript/global_objects/string/padend",
        "syntax": "str.padEnd(targetLength [, padString])",
        "type": "String"
    },
    "string.padStart": {
        "descr": "The padStart() method pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length. The padding is applied from the start (left) of the current string.",
        "name": "string.padStart",
        "params": [
            {
                "descr": "The length of the resulting string once the current string has been padded. ",
                "name": "targetLength"
            },
            {
                "descr": "The string to pad the current string with. ",
                "name": "padString Optional"
            }
        ],
        "path": "javascript/global_objects/string/padstart",
        "syntax": "str.padStart(targetLength [, padString])",
        "type": "String"
    },
    "string.repeat": {
        "descr": "The repeat() method constructs and returns a new string which contains the specified number of copies of the string on which it was called, concatenated together.",
        "name": "string.repeat",
        "params": [
            {
                "descr": "An integer between 0 and +∞: [0, +∞), indicating the number of times to repeat the string in the newly-created string that is to be returned.",
                "name": "count"
            }
        ],
        "path": "javascript/global_objects/string/repeat",
        "syntax": "str.repeat(count);",
        "type": "String"
    },
    "string.replace": {
        "descr": "The replace() method returns a new string with some or all matches of a pattern replaced by a replacement. The pattern can be a string or a RegExp, and the replacement can be a string or a function to be called for each match. If pattern is a string, only the first occurrence will be replaced.",
        "name": "string.replace",
        "params": [
            {
                "descr": "A RegExp object or literal. The match or matches are replaced with newSubStr or the value returned by the specified function.",
                "name": "regexp (pattern)"
            },
            {
                "descr": "A String that is to be replaced by newSubStr. ",
                "name": "substr (pattern)"
            },
            {
                "descr": "The String that replaces the substring specified by the specified regexp or substr parameter. ",
                "name": "newSubStr (replacement)"
            },
            {
                "descr": "A function to be invoked to create the new substring to be used to replace the matches to the given regexp or substr. ",
                "name": "function (replacement)"
            }
        ],
        "path": "javascript/global_objects/string/replace",
        "syntax": "str.replace(regexp|substr, newSubstr|function)",
        "type": "String"
    },
    "string.search": {
        "descr": "The search() method executes a search for a match between a regular expression and this String object.",
        "name": "string.search",
        "params": [
            {
                "descr": "A regular expression object. If a non-RegExp object obj is passed, it is implicitly converted to a RegExp by using new RegExp(obj).",
                "name": "regexp"
            }
        ],
        "path": "javascript/global_objects/string/search",
        "syntax": "str.search(regexp)",
        "type": "String"
    },
    "string.slice": {
        "descr": "The slice() method extracts a section of a string and returns it as a new string, without modifying the original string.",
        "name": "string.slice",
        "params": [
            {
                "descr": "The zero-based index at which to begin extraction. ",
                "name": "beginIndex"
            },
            {
                "descr": "Optional. The zero-based index before which to end extraction. ",
                "name": "endIndex"
            }
        ],
        "path": "javascript/global_objects/string/slice",
        "syntax": "str.slice(beginIndex[, endIndex])",
        "type": "String"
    },
    "string.small": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "string.small",
        "params": [],
        "path": "javascript/global_objects/string/small",
        "syntax": "str.small()",
        "type": "String"
    },
    "string.split": {
        "descr": "The split() method splits a String object into an array of strings by separating the string into substrings, using a specified separator string to determine where to make each split.",
        "name": "string.split",
        "params": [
            {
                "descr": "Specifies the string which denotes the points at which each split should occur. ",
                "name": "separator Optional"
            },
            {
                "descr": "Integer specifying a limit on the number of splits to be found. ",
                "name": "limit Optional"
            }
        ],
        "path": "javascript/global_objects/string/split",
        "syntax": "str.split([separator[, limit]])",
        "type": "String"
    },
    "string.startsWith": {
        "descr": "The startsWith() method determines whether a string begins with the characters of a specified string, returning true or false as appropriate.",
        "name": "string.startsWith",
        "params": [
            {
                "descr": "The characters to be searched for at the start of this string.",
                "name": "searchString"
            },
            {
                "descr": "The position in this string at which to begin searching for searchString; defaults to 0.",
                "name": "position Optional"
            }
        ],
        "path": "javascript/global_objects/string/startswith",
        "syntax": "str.startsWith(searchString[, position])",
        "type": "String"
    },
    "string.strike": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "string.strike",
        "params": [],
        "path": "javascript/global_objects/string/strike",
        "syntax": "str.strike()",
        "type": "String"
    },
    "string.sub": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "string.sub",
        "params": [],
        "path": "javascript/global_objects/string/sub",
        "syntax": "str.sub()",
        "type": "String"
    },
    "string.substr": {
        "descr": "A new string containing the specified part of the given string.",
        "name": "string.substr",
        "params": [
            {
                "descr": "The index of the first character to include in the returned substring.",
                "name": "start"
            },
            {
                "descr": "Optional. The number of characters to extract.",
                "name": "length"
            }
        ],
        "path": "javascript/global_objects/string/substr",
        "syntax": "str.substr(start[, length])",
        "type": "String"
    },
    "string.substring": {
        "descr": "The substring() method returns the part of the string between the start and end indexes, or to the end of the string.",
        "name": "string.substring",
        "params": [
            {
                "descr": "The index of the first character to include in the returned substring.",
                "name": "indexStart"
            },
            {
                "descr": "Optional. The index of the first character to exclude from the returned substring.",
                "name": "indexEnd"
            }
        ],
        "path": "javascript/global_objects/string/substring",
        "syntax": "str.substring(indexStart[, indexEnd])",
        "type": "String"
    },
    "string.sup": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "string.sup",
        "params": [],
        "path": "javascript/global_objects/string/sup",
        "syntax": "str.sup()",
        "type": "String"
    },
    "string.toLocaleLowerCase": {
        "descr": "The toLocaleLowerCase() method returns the calling string value converted to lower case, according to any locale-specific case mappings.",
        "name": "string.toLocaleLowerCase",
        "params": [
            {
                "descr": "The locale parameter indicates the locale to be used to convert to lower case according to any locale-specific case mappings. ",
                "name": "locale Optional"
            }
        ],
        "path": "javascript/global_objects/string/tolocalelowercase",
        "syntax": "str.toLocaleLowerCase() str.toLocaleLowerCase(locale) str.toLocaleLowerCase([locale, locale, ...])",
        "type": "String"
    },
    "string.toLocaleUpperCase": {
        "descr": "The toLocaleUpperCase() method returns the calling string value converted to upper case, according to any locale-specific case mappings.",
        "name": "string.toLocaleUpperCase",
        "params": [
            {
                "descr": "The locale parameter indicates the locale to be used to convert to upper case according to any locale-specific case mappings. ",
                "name": "locale Optional"
            }
        ],
        "path": "javascript/global_objects/string/tolocaleuppercase",
        "syntax": "str.toLocaleUpperCase() str.toLocaleUpperCase(locale) str.toLocaleUpperCase([locale, locale, ...])",
        "type": "String"
    },
    "string.toLowerCase": {
        "descr": "The toLowerCase() method returns the calling string value converted to lower case.",
        "name": "string.toLowerCase",
        "params": [],
        "path": "javascript/global_objects/string/tolowercase",
        "syntax": "str.toLowerCase()",
        "type": "String"
    },
    "string.toString": {
        "descr": "The toString() method returns a string representing the specified object.",
        "name": "string.toString",
        "params": [],
        "path": "javascript/global_objects/string/tostring",
        "syntax": "str.toString()",
        "type": "String"
    },
    "string.toUpperCase": {
        "descr": "The toUpperCase() method returns the calling string value converted to uppercase (the value will be converted to a string if it isn't one).",
        "name": "string.toUpperCase",
        "params": [],
        "path": "javascript/global_objects/string/touppercase",
        "syntax": "str.toUpperCase()",
        "type": "String"
    },
    "string.trim": {
        "descr": "The trim() method removes whitespace from both ends of a string. Whitespace in this context is all the whitespace characters (space, tab, no-break space, etc.) and all the line terminator characters (LF, CR, etc.).",
        "name": "string.trim",
        "params": [],
        "path": "javascript/global_objects/string/trim",
        "syntax": "str.trim()",
        "type": "String"
    },
    "string.trimEnd": {
        "descr": "The trimEnd() method removes whitespace from the end of a string. trimRight() is an alias of this method.",
        "name": "string.trimEnd",
        "params": [],
        "path": "javascript/global_objects/string/trimend",
        "syntax": "str.trimEnd();\n or  str.trimRight();",
        "type": "String"
    },
    "string.trimStart": {
        "descr": "The trimStart() method removes whitespace from the beginning of a string. trimLeft() is an alias of this method.",
        "name": "string.trimStart",
        "params": [],
        "path": "javascript/global_objects/string/trimstart",
        "syntax": "str.trimStart();\n or  str.trimLeft();",
        "type": "String"
    },
    "string.valueOf": {
        "descr": "The valueOf() method returns the primitive value of a String object.",
        "name": "string.valueOf",
        "params": [],
        "path": "javascript/global_objects/string/valueof",
        "syntax": "str.valueOf()",
        "type": "String"
    },
    "sub": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "string.sub",
        "params": [],
        "path": "javascript/global_objects/string/sub",
        "syntax": "str.sub()",
        "type": "String"
    },
    "submit": {
        "descr": "This method is a shortcut for .on( \"submit\", handler ) in the first variation, and .trigger( \"submit\" ) in the third.",
        "name": "submit",
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            },
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.",
                "name": "eventData"
            },
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            }
        ],
        "path": "jquery/submit",
        "syntax": ".submit( handler ) Returns: jQuery",
        "type": "Events"
    },
    "substr": {
        "descr": "A new string containing the specified part of the given string.",
        "name": "string.substr",
        "params": [
            {
                "descr": "The index of the first character to include in the returned substring.",
                "name": "start"
            },
            {
                "descr": "Optional. The number of characters to extract.",
                "name": "length"
            }
        ],
        "path": "javascript/global_objects/string/substr",
        "syntax": "str.substr(start[, length])",
        "type": "String"
    },
    "substring": {
        "descr": "The substring() method returns the part of the string between the start and end indexes, or to the end of the string.",
        "name": "string.substring",
        "params": [
            {
                "descr": "The index of the first character to include in the returned substring.",
                "name": "indexStart"
            },
            {
                "descr": "Optional. The index of the first character to exclude from the returned substring.",
                "name": "indexEnd"
            }
        ],
        "path": "javascript/global_objects/string/substring",
        "syntax": "str.substring(indexStart[, indexEnd])",
        "type": "String"
    },
    "sup": {
        "descr": "DeprecatedThis feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.",
        "name": "string.sup",
        "params": [],
        "path": "javascript/global_objects/string/sup",
        "syntax": "str.sup()",
        "type": "String"
    },
    "super": {
        "descr": "The super keyword is used to access and call functions on an object's parent.",
        "name": "super",
        "params": [],
        "path": "javascript/operators/super",
        "syntax": "super([arguments]);\n or  // calls the parent constructor. super.functionOnParent([arguments]);",
        "type": "Operators"
    },
    "switch": {
        "descr": "The switch evaluates an expression, matching the expression's value to a case clause, and executes statements associated with that case, as well as statements in cases that follow the matching case.",
        "name": "switch",
        "params": [
            {
                "descr": "An expression whose result is matched against each case clause.",
                "name": "expression"
            },
            {
                "descr": "A case clause used to match against expression. ",
                "name": "case valueN Optional"
            },
            {
                "descr": "A default clause; if provided, this clause is executed if the value of expression doesn't match any of the case clauses.",
                "name": "default Optional"
            }
        ],
        "path": "javascript/statements/switch",
        "syntax": "switch (expression) { case value1: //Statements executed when the //result of expression matches value1 [break;] case value2: //Statements executed when the //result of expression matches value2 [break;] ... case valueN: //Statements executed when the //result of expression matches valueN [break;] [default: //Statements executed when none of //the values match the value of the expression [break;]] }",
        "type": "Statements"
    },
    "symbol.@@toPrimitive": {
        "descr": "The [@@toPrimitive]() method converts a Symbol object to a primitive value.",
        "name": "symbol.@@toPrimitive",
        "params": [],
        "path": "javascript/global_objects/symbol/@@toprimitive",
        "syntax": "Symbol()[Symbol.toPrimitive](hint);",
        "type": "Symbol"
    },
    "symbol.description": {
        "descr": "The read-only description property is a string returning the optional description of Symbol objects.",
        "name": "symbol.description",
        "params": [],
        "path": "javascript/global_objects/symbol/description",
        "syntax": "Symbol('myDescription').description; Symbol.iterator.description; Symbol.for('foo').description;",
        "type": "Symbol"
    },
    "symbol.toString": {
        "descr": "The toString() method returns a string representing the specified Symbol object.",
        "name": "symbol.toString",
        "params": [],
        "path": "javascript/global_objects/symbol/tostring",
        "syntax": "Symbol().toString();",
        "type": "Symbol"
    },
    "symbol.valueOf": {
        "descr": "The valueOf() method returns the primitive value of a Symbol object.",
        "name": "symbol.valueOf",
        "params": [],
        "path": "javascript/global_objects/symbol/valueof",
        "syntax": "Symbol().valueOf();",
        "type": "Symbol"
    },
    "test": {
        "descr": "The test() method executes a search for a match between a regular expression and a specified string. Returns true or false.",
        "name": "regExp.test",
        "params": [
            {
                "descr": "The string against which to match the regular expression.",
                "name": "str"
            }
        ],
        "path": "javascript/global_objects/regexp/test",
        "syntax": "regexObj.test(str)",
        "type": "RegExp"
    },
    "text": {
        "descr": "Unlike the .html() method, .text() can be used in both XML and HTML documents. The result of the .text() method is a string containing the combined text of all matched elements. (Due to variations in the HTML parsers in different browsers, the text returned may vary in newlines and other white space.) Consider the following HTML:",
        "name": "text",
        "params": [
            {
                "descr": "Type: String or Number or Boolean  The text to set as the content of each matched element. ",
                "name": "text"
            },
            {
                "descr": "Type: Function( Integer index, String text ) => String  A function returning the text content to set. ",
                "name": "function"
            }
        ],
        "path": "jquery/text",
        "syntax": ".text() Returns: String",
        "type": "Manipulation"
    },
    "this": {
        "descr": "A this behaves a little differently in JavaScript compared to other languages. It also has some differences between strict mode and non-strict mode.",
        "name": "this",
        "params": [],
        "path": "javascript/operators/this",
        "syntax": "this Global Context In the global execution context (outside of any function), this",
        "type": "Operators"
    },
    "throw": {
        "descr": "The throw throws a user-defined exception. Execution of the current function will stop (the statements after throw won't be executed), and control will be passed to the first catch block in the call stack. If no catch block exists among caller functions, the program will terminate.",
        "name": "throw",
        "params": [
            {
                "descr": "The expression to throw.",
                "name": "expression"
            }
        ],
        "path": "javascript/statements/throw",
        "syntax": "throw expression;   expression The expression to throw.  Description Use the throw statement to throw an exception. When you throw an exception, expression specifies the value of the exception. Each of the following throws an exception: throw 'Error2'; // generates an exception with a string value throw 42; // generates an exception with the value 42 throw true; // generates an exception with the value true throw new Error('Required');\n or  // generates an error object with the message of Required);",
        "type": "Statements"
    },
    "toArray": {
        "descr": ".toArray() returns all of the elements in the jQuery set:",
        "name": "toArray",
        "params": [],
        "path": "jquery/toarray",
        "syntax": ".toArray() Returns: Array",
        "type": "Miscellaneous"
    },
    "toDateString": {
        "descr": "The toDateString() method returns the date portion of a Date object in human readable form in American English.",
        "name": "date.toDateString",
        "params": [],
        "path": "javascript/global_objects/date/todatestring",
        "syntax": "dateObj.toDateString()",
        "type": "Date"
    },
    "toExponential": {
        "descr": "The toExponential() method returns a string representing the Number object in exponential notation.",
        "name": "number.toExponential",
        "params": [
            {
                "descr": "Optional. An integer specifying the number of digits after the decimal point. ",
                "name": "fractionDigits"
            },
            {
                "descr": "If fractionDigits is too small or too large. ",
                "name": "RangeError"
            },
            {
                "descr": "If this method is invoked on an object that is not a Number.",
                "name": "TypeError"
            }
        ],
        "path": "javascript/global_objects/number/toexponential",
        "syntax": "numObj.toExponential([fractionDigits])",
        "type": "Number"
    },
    "toFixed": {
        "descr": "The toFixed() method formats a number using fixed-point notation.",
        "name": "number.toFixed",
        "params": [
            {
                "descr": "Optional. The number of digits to appear after the decimal point; this may be a value between 0 and 20, inclusive, and implementations may optionally support a larger range of values. ",
                "name": "digits"
            },
            {
                "descr": "If digits is too small or too large. ",
                "name": "RangeError"
            },
            {
                "descr": "If this method is invoked on an object that is not a Number.",
                "name": "TypeError"
            }
        ],
        "path": "javascript/global_objects/number/tofixed",
        "syntax": "numObj.toFixed([digits])",
        "type": "Number"
    },
    "toISOString": {
        "descr": "The toISOString() method returns a string in simplified extended ISO format (ISO 8601), which is always 24 or 27 characters long (YYYY-MM-DDTHH:mm:ss.sssZ or ±YYYYYY-MM-DDTHH:mm:ss.sssZ, respectively). The timezone is always zero UTC offset, as denoted by the suffix \"Z\".",
        "name": "date.toISOString",
        "params": [],
        "path": "javascript/global_objects/date/toisostring",
        "syntax": "dateObj.toISOString()",
        "type": "Date"
    },
    "toJSON": {
        "descr": "The toJSON() method returns a string representation of the Date object.",
        "name": "date.toJSON",
        "params": [],
        "path": "javascript/global_objects/date/tojson",
        "syntax": "dateObj.toJSON()",
        "type": "Date"
    },
    "toLocaleDateString": {
        "descr": "The toLocaleDateString() method returns a string with a language sensitive representation of the date portion of this date. The new locales and options arguments let applications specify the language whose formatting conventions should be used and allow to customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale used and the form of the string returned are entirely implementation dependent.",
        "name": "date.toLocaleDateString",
        "params": [
            {
                "descr": "Optional. A string with a BCP 47 language tag, or an array of such strings. ",
                "name": "locales"
            },
            {
                "descr": "Calendar. Possible values include: \"buddhist\", \"chinese\", \"coptic\", \"ethioaa\", \"ethiopic\", \"gregory\", \"hebrew\", \"indian\", \"islamic\", \"islamicc\", \"iso8601\", \"japanese\", \"persian\", \"roc\".",
                "name": "ca"
            },
            {
                "descr": "Hour cycle. Possible values include: \"h11\", \"h12\", \"h23\", \"h24\".",
                "name": "hc"
            },
            {
                "descr": "Optional. An object with some or all of the following properties:  localeMatcher The locale matching algorithm to use. ",
                "name": "options"
            },
            {
                "descr": "The time zone to use. The only value implementations must recognize is \"UTC\"; the default is the runtime's default time zone. ",
                "name": "timeZone"
            },
            {
                "descr": "Whether to use 12-hour time (as opposed to 24-hour time). ",
                "name": "hour12"
            },
            {
                "descr": "The hour cycle to use. Possible values are \"h11\", \"h12\", \"h23\", or \"h24\". ",
                "name": "hourCycle"
            },
            {
                "descr": "The format matching algorithm to use. ",
                "name": "formatMatcher"
            },
            {
                "descr": "The representation of the weekday. ",
                "name": "weekday"
            },
            {
                "descr": "The representation of the era. Possible values are \"narrow\", \"short\", \"long\".",
                "name": "era"
            },
            {
                "descr": "The representation of the year. ",
                "name": "year"
            },
            {
                "descr": "The representation of the month. ",
                "name": "month"
            },
            {
                "descr": "The representation of the day. Possible values are \"numeric\", \"2-digit\".",
                "name": "day"
            },
            {
                "descr": "The representation of the hour. ",
                "name": "hour"
            },
            {
                "descr": "The representation of the minute. ",
                "name": "minute"
            },
            {
                "descr": "The representation of the second. ",
                "name": "second"
            },
            {
                "descr": "The representation of the time zone name. ",
                "name": "timeZoneName"
            }
        ],
        "path": "javascript/global_objects/date/tolocaledatestring",
        "syntax": "dateObj.toLocaleDateString([locales [, options]])",
        "type": "Date"
    },
    "toLocaleLowerCase": {
        "descr": "The toLocaleLowerCase() method returns the calling string value converted to lower case, according to any locale-specific case mappings.",
        "name": "string.toLocaleLowerCase",
        "params": [
            {
                "descr": "The locale parameter indicates the locale to be used to convert to lower case according to any locale-specific case mappings. ",
                "name": "locale Optional"
            }
        ],
        "path": "javascript/global_objects/string/tolocalelowercase",
        "syntax": "str.toLocaleLowerCase() str.toLocaleLowerCase(locale) str.toLocaleLowerCase([locale, locale, ...])",
        "type": "String"
    },
    "toLocaleString": {
        "descr": "The toLocaleString() method returns a string representing the object. This method is meant to be overridden by derived objects for locale-specific purposes.",
        "name": "object.toLocaleString",
        "params": [],
        "path": "javascript/global_objects/object/tolocalestring",
        "syntax": "obj.toLocaleString()",
        "type": "Object"
    },
    "toLocaleTimeString": {
        "descr": "The toLocaleTimeString() method returns a string with a language sensitive representation of the time portion of this date. The new locales and options arguments let applications specify the language whose formatting conventions should be used and customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale used and the form of the string returned are entirely implementation dependent.",
        "name": "date.toLocaleTimeString",
        "params": [
            {
                "descr": "Optional. A string with a BCP 47 language tag, or an array of such strings. ",
                "name": "locales"
            },
            {
                "descr": "Calendar. Possible values include: \"buddhist\", \"chinese\", \"coptic\", \"ethioaa\", \"ethiopic\", \"gregory\", \"hebrew\", \"indian\", \"islamic\", \"islamicc\", \"iso8601\", \"japanese\", \"persian\", \"roc\".",
                "name": "ca"
            },
            {
                "descr": "Hour cycle. Possible values include: \"h11\", \"h12\", \"h23\", \"h24\".",
                "name": "hc"
            },
            {
                "descr": "Optional. An object with some or all of the following properties:  localeMatcher The locale matching algorithm to use. ",
                "name": "options"
            },
            {
                "descr": "The time zone to use. The only value implementations must recognize is \"UTC\"; the default is the runtime's default time zone. ",
                "name": "timeZone"
            },
            {
                "descr": "Whether to use 12-hour time (as opposed to 24-hour time). ",
                "name": "hour12"
            },
            {
                "descr": "The hour cycle to use. Possible values are \"h11\", \"h12\", \"h23\", or \"h24\". ",
                "name": "hourCycle"
            },
            {
                "descr": "The format matching algorithm to use. ",
                "name": "formatMatcher"
            },
            {
                "descr": "The representation of the weekday. ",
                "name": "weekday"
            },
            {
                "descr": "The representation of the era. Possible values are \"narrow\", \"short\", \"long\".",
                "name": "era"
            },
            {
                "descr": "The representation of the year. ",
                "name": "year"
            },
            {
                "descr": "The representation of the month. ",
                "name": "month"
            },
            {
                "descr": "The representation of the day. Possible values are \"numeric\", \"2-digit\".",
                "name": "day"
            },
            {
                "descr": "The representation of the hour. ",
                "name": "hour"
            },
            {
                "descr": "The representation of the minute. ",
                "name": "minute"
            },
            {
                "descr": "The representation of the second. ",
                "name": "second"
            },
            {
                "descr": "The representation of the time zone name. ",
                "name": "timeZoneName"
            }
        ],
        "path": "javascript/global_objects/date/tolocaletimestring",
        "syntax": "dateObj.toLocaleTimeString([locales[, options]])",
        "type": "Date"
    },
    "toLocaleUpperCase": {
        "descr": "The toLocaleUpperCase() method returns the calling string value converted to upper case, according to any locale-specific case mappings.",
        "name": "string.toLocaleUpperCase",
        "params": [
            {
                "descr": "The locale parameter indicates the locale to be used to convert to upper case according to any locale-specific case mappings. ",
                "name": "locale Optional"
            }
        ],
        "path": "javascript/global_objects/string/tolocaleuppercase",
        "syntax": "str.toLocaleUpperCase() str.toLocaleUpperCase(locale) str.toLocaleUpperCase([locale, locale, ...])",
        "type": "String"
    },
    "toLowerCase": {
        "descr": "The toLowerCase() method returns the calling string value converted to lower case.",
        "name": "string.toLowerCase",
        "params": [],
        "path": "javascript/global_objects/string/tolowercase",
        "syntax": "str.toLowerCase()",
        "type": "String"
    },
    "toPrecision": {
        "descr": "The toPrecision() method returns a string representing the Number object to the specified precision.",
        "name": "number.toPrecision",
        "params": [
            {
                "descr": "Optional. An integer specifying the number of significant digits.",
                "name": "precision"
            },
            {
                "descr": "If precision is not between 1 and 100 (inclusive), a RangeError is thrown. ",
                "name": "RangeError"
            }
        ],
        "path": "javascript/global_objects/number/toprecision",
        "syntax": "numObj.toPrecision([precision])",
        "type": "Number"
    },
    "toString": {
        "descr": "The toString() method returns a string representing the specified object.",
        "name": "string.toString",
        "params": [],
        "path": "javascript/global_objects/string/tostring",
        "syntax": "str.toString()",
        "type": "String"
    },
    "toTimeString": {
        "descr": "The toTimeString() method returns the time portion of a Date object in human readable form in American English.",
        "name": "date.toTimeString",
        "params": [],
        "path": "javascript/global_objects/date/totimestring",
        "syntax": "dateObj.toTimeString()",
        "type": "Date"
    },
    "toUTCString": {
        "descr": "The toUTCString() method converts a date to a string, using the UTC time zone.",
        "name": "date.toUTCString",
        "params": [],
        "path": "javascript/global_objects/date/toutcstring",
        "syntax": "dateObj.toUTCString()",
        "type": "Date"
    },
    "toUpperCase": {
        "descr": "The toUpperCase() method returns the calling string value converted to uppercase (the value will be converted to a string if it isn't one).",
        "name": "string.toUpperCase",
        "params": [],
        "path": "javascript/global_objects/string/touppercase",
        "syntax": "str.toUpperCase()",
        "type": "String"
    },
    "toggle": {
        "descr": "Note: The event handling suite also has a method named .toggle(). Which one is fired depends on the set of arguments passed.",
        "name": "toggle",
        "params": [
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.",
                "name": "duration"
            },
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.",
                "name": "complete"
            },
            {
                "descr": "Type: PlainObject  A map of additional options to pass to the method. ",
                "name": "options"
            },
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.",
                "name": "easing"
            },
            {
                "descr": "(default: true) Type: Boolean or String  A Boolean indicating whether to place the animation in the effects queue. ",
                "name": "queue"
            },
            {
                "descr": "Type: PlainObject  An object containing one or more of the CSS properties defined by the properties argument and their corresponding easing functions. ",
                "name": "specialEasing"
            },
            {
                "descr": "Type: Function( Number now, Tween tween ) A function to be called for each animated property of each animated element. ",
                "name": "step"
            },
            {
                "descr": "Type: Function( Promise animation, Number progress, Number remainingMs ) A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties. (version added: 1.8)",
                "name": "progress"
            },
            {
                "descr": "Type: Function() A function that is called once the animation on an element is complete.",
                "name": "complete"
            },
            {
                "descr": "Type: Function( Promise animation ) A function to call when the animation on an element begins. ",
                "name": "start"
            },
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes (its Promise object is resolved). ",
                "name": "done"
            },
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element fails to complete (its Promise object is rejected). ",
                "name": "fail"
            },
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes or stops without completing (its Promise object is either resolved or rejected). (version added: 1.8)",
                "name": "always"
            },
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.",
                "name": "duration"
            },
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.",
                "name": "easing"
            },
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.",
                "name": "complete"
            },
            {
                "descr": "Type: Boolean  Use true to show the element or false to hide it.",
                "name": "display"
            }
        ],
        "path": "jquery/toggle",
        "syntax": ".toggle( [duration ] [, complete ] ) Returns: jQuery",
        "type": "Effects"
    },
    "toggleClass": {
        "descr": "This method takes one or more class names as its parameter. In the first version, if an element in the matched set of elements already has the class, then it is removed; if an element does not have the class, then it is added. For example, we can apply .toggleClass() to a simple <div>:",
        "name": "toggleClass",
        "params": [
            {
                "descr": "Type: String  One or more class names (separated by spaces) to be toggled for each element in the matched set.",
                "name": "className"
            },
            {
                "descr": "Type: String  One or more class names (separated by spaces) to be toggled for each element in the matched set.",
                "name": "className"
            },
            {
                "descr": "Type: Boolean  A Boolean (not just truthy/falsy) value to determine whether the class should be added or removed.",
                "name": "state"
            },
            {
                "descr": "Type: Function( Integer index, String className, Boolean state ) => String  A function that returns class names to be toggled in the class attribute of each element in the matched set. ",
                "name": "function"
            },
            {
                "descr": "Type: Boolean  A boolean value to determine whether the class should be added or removed.",
                "name": "state"
            },
            {
                "descr": "Type: Boolean  A boolean value to determine whether the class should be added or removed.",
                "name": "state"
            }
        ],
        "path": "jquery/toggleclass",
        "syntax": ".toggleClass( className ) Returns: jQuery",
        "type": "Manipulation"
    },
    "trigger": {
        "descr": "Any event handlers attached with .on() or one of its shortcut methods are triggered when the corresponding event occurs. They can be fired manually, however, with the .trigger() method. A call to .trigger() executes the handlers in the same order they would be if the event were triggered naturally by the user:",
        "name": "trigger",
        "params": [
            {
                "descr": "Type: String  A string containing a JavaScript event type, such as click or submit.",
                "name": "eventType"
            },
            {
                "descr": "Type: Array or PlainObject  Additional parameters to pass along to the event handler.",
                "name": "extraParameters"
            },
            {
                "descr": "Type: Event  A jQuery.Event object.",
                "name": "event"
            },
            {
                "descr": "Type: Array or PlainObject  Additional parameters to pass along to the event handler.",
                "name": "extraParameters"
            }
        ],
        "path": "jquery/trigger",
        "syntax": ".trigger( eventType [, extraParameters ] ) Returns: jQuery",
        "type": "Events"
    },
    "triggerHandler": {
        "descr": ".triggerHandler( eventType ) executes all handlers bound with jQuery for the event type. It will also execute any method called on{eventType}() found on the element. The behavior of this method is similar to .trigger(), with the following exceptions:",
        "name": "triggerHandler",
        "params": [
            {
                "descr": "Type: String  A string containing a JavaScript event type, such as click or submit.",
                "name": "eventType"
            },
            {
                "descr": "Type: Array or PlainObject  Additional parameters to pass along to the event handler.",
                "name": "extraParameters"
            },
            {
                "descr": "Type: Event  A jQuery.Event object.",
                "name": "event"
            },
            {
                "descr": "Type: Array or PlainObject  Additional parameters to pass along to the event handler.",
                "name": "extraParameters"
            }
        ],
        "path": "jquery/triggerhandler",
        "syntax": ".triggerHandler( eventType [, extraParameters ] ) Returns: Object",
        "type": "Events"
    },
    "trim": {
        "descr": "The trim() method removes whitespace from both ends of a string. Whitespace in this context is all the whitespace characters (space, tab, no-break space, etc.) and all the line terminator characters (LF, CR, etc.).",
        "name": "string.trim",
        "params": [],
        "path": "javascript/global_objects/string/trim",
        "syntax": "str.trim()",
        "type": "String"
    },
    "trimEnd": {
        "descr": "The trimEnd() method removes whitespace from the end of a string. trimRight() is an alias of this method.",
        "name": "string.trimEnd",
        "params": [],
        "path": "javascript/global_objects/string/trimend",
        "syntax": "str.trimEnd();\n or  str.trimRight();",
        "type": "String"
    },
    "trimStart": {
        "descr": "The trimStart() method removes whitespace from the beginning of a string. trimLeft() is an alias of this method.",
        "name": "string.trimStart",
        "params": [],
        "path": "javascript/global_objects/string/trimstart",
        "syntax": "str.trimStart();\n or  str.trimLeft();",
        "type": "String"
    },
    "try...catch": {
        "descr": "The try...catch statement marks a block of statements to try, and specifies a response, should an exception be thrown.",
        "name": "try...catch",
        "params": [
            {
                "descr": "The statements to be executed.",
                "name": "try_statements"
            },
            {
                "descr": "Statements that are executed if an exception is thrown in the try block.",
                "name": "catch_statements_1, catch_statements_2"
            },
            {
                "descr": "An identifier to hold an exception object for the associated catch clause.",
                "name": "exception_var_1, exception_var_2"
            },
            {
                "descr": "A conditional expression.",
                "name": "condition_1"
            },
            {
                "descr": "Statements that are executed after the try statement completes. ",
                "name": "finally_statements"
            }
        ],
        "path": "javascript/statements/try...catch",
        "syntax": "try { try_statements } [catch (exception_var_1 if condition_1) { // non-standard catch_statements_1 }] ... [catch (exception_var_2) { catch_statements_2 }] [finally { finally_statements }]",
        "type": "Statements"
    },
    "typedArray.@@iterator": {
        "descr": "The initial value of the @@iterator property is the same function object as the initial value of the values property.",
        "name": "typedArray.@@iterator",
        "params": [],
        "path": "javascript/global_objects/typedarray/@@iterator",
        "syntax": "arr[Symbol.iterator]()",
        "type": "TypedArray"
    },
    "typedArray.buffer": {
        "descr": "The buffer accessor property represents the ArrayBuffer referenced by a TypedArray at construction time.",
        "name": "typedArray.buffer",
        "params": [],
        "path": "javascript/global_objects/typedarray/buffer",
        "syntax": "typedArray.buffer Description The buffer property is an accessor property whose set accessor function is undefined, meaning that you can only read this property. The value is established when the TypedArray is constructed and cannot be changed. TypedArray is one of the TypedArray objects. Examples Using the buffer property var buffer = new ArrayBuffer(8);\n or  var uint16 = new Uint16Array(buffer);\n or  uint16.buffer; // ArrayBuffer { byteLength: 8 });",
        "type": "TypedArray"
    },
    "typedArray.byteLength": {
        "descr": "The byteLength accessor property represents the length (in bytes) of a typed array.",
        "name": "typedArray.byteLength",
        "params": [],
        "path": "javascript/global_objects/typedarray/bytelength",
        "syntax": "typedarray.byteLength Description The byteLength property is an accessor property whose set accessor function is undefined, meaning that you can only read this property. The value is established when a TypedArray is constructed and cannot be changed. If the TypedArray is not specifying an byteOffset or a length, the length of the referenced ArrayBuffer will be returned. TypedArray is one of the TypedArray objects. Examples Using the byteLength property var buffer = new ArrayBuffer(8);\n or  var uint8 = new Uint8Array(buffer);\n or  uint8.byteLength; // 8 (matches the byteLength of the buffer) var uint8 = new Uint8Array(buffer, 1, 5);\n or  uint8.byteLength; // 5 (as specified when constructing the Uint8Array) var uint8 = new Uint8Array(buffer, 2);\n or  uint8.byteLength; // 6 (due to the offset of the constructed Uint8Array));",
        "type": "TypedArray"
    },
    "typedArray.byteOffset": {
        "descr": "The byteOffset accessor property represents the offset (in bytes) of a typed array from the start of its ArrayBuffer.",
        "name": "typedArray.byteOffset",
        "params": [],
        "path": "javascript/global_objects/typedarray/byteoffset",
        "syntax": "typedarray.byteOffset Description The byteOffset property is an accessor property whose set accessor function is undefined, meaning that you can only read this property. The value is established when a TypedArray is constructed and cannot be changed. TypedArray is one of the TypedArray objects. Examples Using the byteOffset property var buffer = new ArrayBuffer(8);\n or  var uint8 = new Uint8Array(buffer);\n or  uint8.byteOffset; // 0 (no offset specified) var uint8 = new Uint8Array(buffer, 3);\n or  uint8.byteOffset; // 3 (as specified when constructing Uint8Array));",
        "type": "TypedArray"
    },
    "typedArray.copyWithin": {
        "descr": "The copyWithin() method copies the sequence of array elements within the array to the position starting at target. The copy is taken from the index positions of the second and third arguments start and end. The end argument is optional and defaults to the length of the array. This method has the same algorithm as Array.prototype.copyWithin. TypedArray is one of the typed array types here.",
        "name": "typedArray.copyWithin",
        "params": [
            {
                "descr": "Target start index position where to copy the elements to.",
                "name": "target"
            },
            {
                "descr": "Source start index position where to start copying elements from.",
                "name": "start"
            },
            {
                "descr": "Optional. Source end index position where to end copying elements from.",
                "name": "end Optional"
            }
        ],
        "path": "javascript/global_objects/typedarray/copywithin",
        "syntax": "typedarray.copyWithin(target, start[, end = this.length])",
        "type": "TypedArray"
    },
    "typedArray.entries": {
        "descr": "The entries() method returns a new Array Iterator object that contains the key/value pairs for each index in the array.",
        "name": "typedArray.entries",
        "params": [],
        "path": "javascript/global_objects/typedarray/entries",
        "syntax": "arr.entries()",
        "type": "TypedArray"
    },
    "typedArray.every": {
        "descr": "The every() method tests whether all elements in the typed array pass the test implemented by the provided function. This method has the same algorithm as Array.prototype.every(). TypedArray is one of the typed array types here.",
        "name": "typedArray.every",
        "params": [
            {
                "descr": "Function to test for each element, taking three arguments:  currentValue The current element being processed in the typed array.",
                "name": "callback"
            },
            {
                "descr": "The index of the current element being processed in the typed array.",
                "name": "index"
            },
            {
                "descr": "The typed array every was called upon.",
                "name": "array"
            },
            {
                "descr": "Optional. Value to use as this when executing callback.",
                "name": "thisArg"
            }
        ],
        "path": "javascript/global_objects/typedarray/every",
        "syntax": "typedarray.every(callback[, thisArg])",
        "type": "TypedArray"
    },
    "typedArray.fill": {
        "descr": "The fill() method fills all the elements of a typed array from a start index to an end index with a static value. This method has the same algorithm as Array.prototype.fill(). TypedArray is one of the typed array types here.",
        "name": "typedArray.fill",
        "params": [
            {
                "descr": "Value to fill the typed array with.",
                "name": "value"
            },
            {
                "descr": "Optional. Start index. Defaults to 0.",
                "name": "start"
            },
            {
                "descr": "Optional. End index (not included). ",
                "name": "end"
            }
        ],
        "path": "javascript/global_objects/typedarray/fill",
        "syntax": "typedarray.fill(value[, start = 0[, end = this.length]])",
        "type": "TypedArray"
    },
    "typedArray.filter": {
        "descr": "The filter() method creates a new typed array with all elements that pass the test implemented by the provided function. This method has the same algorithm as Array.prototype.filter(). TypedArray is one of the typed array types here.",
        "name": "typedArray.filter",
        "params": [
            {
                "descr": "Function to test each element of the typed array. ",
                "name": "callback"
            },
            {
                "descr": "Value to use as this when executing callback.",
                "name": "thisArg Optional"
            }
        ],
        "path": "javascript/global_objects/typedarray/filter",
        "syntax": "typedarray.filter(callback[, thisArg])",
        "type": "TypedArray"
    },
    "typedArray.find": {
        "descr": "The find() method returns a value in the typed array, if an element satisfies the provided testing function. Otherwise undefined is returned. TypedArray is one of the typed array types here.",
        "name": "typedArray.find",
        "params": [
            {
                "descr": "Function to execute on each value in the typed array, taking three arguments:  element The current element being processed in the typed array.",
                "name": "callback"
            },
            {
                "descr": "The index of the current element being processed in the typed array.",
                "name": "index"
            },
            {
                "descr": "The array find was called upon.",
                "name": "array"
            },
            {
                "descr": "Optional. Object to use as this when executing callback.",
                "name": "thisArg"
            }
        ],
        "path": "javascript/global_objects/typedarray/find",
        "syntax": "typedarray.find(callback[, thisArg])",
        "type": "TypedArray"
    },
    "typedArray.findIndex": {
        "descr": "The findIndex() method returns an index in the typed array, if an element in the typed array satisfies the provided testing function. Otherwise -1 is returned.",
        "name": "typedArray.findIndex",
        "params": [
            {
                "descr": "Function to execute on each value in the typed array, taking three arguments:  element The current element being processed in the typed array.",
                "name": "callback"
            },
            {
                "descr": "The index of the current element being processed in the typed array.",
                "name": "index"
            },
            {
                "descr": "The typed array findIndex was called upon.",
                "name": "array"
            },
            {
                "descr": "Optional. Object to use as this when executing callback.",
                "name": "thisArg"
            }
        ],
        "path": "javascript/global_objects/typedarray/findindex",
        "syntax": "typedarray.findIndex(callback[, thisArg])",
        "type": "TypedArray"
    },
    "typedArray.forEach": {
        "descr": "The forEach() method executes a provided function once per array element. This method has the same algorithm as Array.prototype.forEach(). TypedArray is one of the typed array types here.",
        "name": "typedArray.forEach",
        "params": [
            {
                "descr": "Function that produces an element of the new typed array, taking three arguments:  currentValue The current element being processed in the typed array.",
                "name": "callback"
            },
            {
                "descr": "The index of the current element being processed in the array.",
                "name": "index"
            },
            {
                "descr": "The array forEach() was called upon.",
                "name": "array"
            },
            {
                "descr": "Optional. Value to use as this when executing callback.",
                "name": "thisArg"
            }
        ],
        "path": "javascript/global_objects/typedarray/foreach",
        "syntax": "typedarray.forEach(callback[, thisArg])",
        "type": "TypedArray"
    },
    "typedArray.includes": {
        "descr": "The includes() method determines whether a typed array includes a certain element, returning true or false as appropriate. This method has the same algorithm as Array.prototype.includes(). TypedArray is one of the typed array types here.",
        "name": "typedArray.includes",
        "params": [
            {
                "descr": "The element to search for.",
                "name": "searchElement"
            },
            {
                "descr": "Optional. The position in this array at which to begin searching for searchElement; defaults to 0.",
                "name": "fromIndex"
            }
        ],
        "path": "javascript/global_objects/typedarray/includes",
        "syntax": "typedarray.includes(searchElement[, fromIndex]);",
        "type": "TypedArray"
    },
    "typedArray.indexOf": {
        "descr": "The indexOf() method returns the first index at which a given element can be found in the typed array, or -1 if it is not present. This method has the same algorithm as Array.prototype.indexOf(). TypedArray is one of the typed array types here.",
        "name": "typedArray.indexOf",
        "params": [
            {
                "descr": "Element to locate in the typed array.",
                "name": "searchElement"
            },
            {
                "descr": "The index to start the search at. ",
                "name": "fromIndex"
            }
        ],
        "path": "javascript/global_objects/typedarray/indexof",
        "syntax": "typedarray.indexOf(searchElement[, fromIndex = 0])",
        "type": "TypedArray"
    },
    "typedArray.join": {
        "descr": "The join() method joins all elements of an array into a string. This method has the same algorithm as Array.prototype.join(). TypedArray is one of the typed array types here.",
        "name": "typedArray.join",
        "params": [
            {
                "descr": "Optional. Specifies a string to separate each element. ",
                "name": "separator"
            }
        ],
        "path": "javascript/global_objects/typedarray/join",
        "syntax": "typedarray.join([separator = ',']);",
        "type": "TypedArray"
    },
    "typedArray.keys": {
        "descr": "The keys() method returns a new Array Iterator object that contains the keys for each index in the array.",
        "name": "typedArray.keys",
        "params": [],
        "path": "javascript/global_objects/typedarray/keys",
        "syntax": "arr.keys()",
        "type": "TypedArray"
    },
    "typedArray.lastIndexOf": {
        "descr": "The lastIndexOf() method returns the last index at which a given element can be found in the typed array, or -1 if it is not present. The typed array is searched backwards, starting at fromIndex. This method has the same algorithm as Array.prototype.lastIndexOf(). TypedArray is one of the typed array types here.",
        "name": "typedArray.lastIndexOf",
        "params": [
            {
                "descr": "Element to locate in the typed array.",
                "name": "searchElement"
            },
            {
                "descr": "Optional. The index at which to start searching backwards. ",
                "name": "fromIndex"
            }
        ],
        "path": "javascript/global_objects/typedarray/lastindexof",
        "syntax": "typedarray.lastIndexOf(searchElement[, fromIndex = typedarray.length])",
        "type": "TypedArray"
    },
    "typedArray.length": {
        "descr": "The length accessor property represents the length (in elements) of a typed array.",
        "name": "typedArray.length",
        "params": [],
        "path": "javascript/global_objects/typedarray/length",
        "syntax": "typedarray.length Description The length property is an accessor property whose set accessor function is undefined, meaning that you can only read this property. The value is established when a TypedArray is constructed and cannot be changed. If the TypedArray is not specifying an byteOffset or a length, the length of the referenced ArrayBuffer will be returned. TypedArray is one of the TypedArray objects. Examples Using the length property var buffer = new ArrayBuffer(8);\n or  var uint8 = new Uint8Array(buffer);\n or  uint8.length; // 8 (matches the length of the buffer) var uint8 = new Uint8Array(buffer, 1, 5);\n or  uint8.length; // 5 (as specified when constructing the Uint8Array) var uint8 = new Uint8Array(buffer, 2);\n or  uint8.length; // 6 (due to the offset of the constructed Uint8Array));",
        "type": "TypedArray"
    },
    "typedArray.map": {
        "descr": "The map() method creates a new typed array with the results of calling a provided function on every element in this typed array. This method has the same algorithm as Array.prototype.map(). TypedArray is one of the typed array types here.",
        "name": "typedArray.map",
        "params": [
            {
                "descr": "Function that produces an element of the new typed array, taking three arguments:  currentValue The current element being processed in the typed array.",
                "name": "callback"
            },
            {
                "descr": "The index of the current element being processed in the typed array.",
                "name": "index"
            },
            {
                "descr": "The typed array map was called upon.",
                "name": "array"
            },
            {
                "descr": "Optional. Value to use as this when executing callback.",
                "name": "thisArg"
            }
        ],
        "path": "javascript/global_objects/typedarray/map",
        "syntax": "typedarray.map(callback[, thisArg])",
        "type": "TypedArray"
    },
    "typedArray.reduce": {
        "descr": "The reduce() method applies a function against an accumulator and each value of the typed array (from left-to-right) has to reduce it to a single value. This method has the same algorithm as Array.prototype.reduce(). TypedArray is one of the typed array types here.",
        "name": "typedArray.reduce",
        "params": [
            {
                "descr": "Function to execute on each value in the typed array, taking four arguments:  previousValue The value previously returned in the last invocation of the callback, or initialValue, if supplied (see below).",
                "name": "callback"
            },
            {
                "descr": "The current element being processed in the typed array.",
                "name": "currentValue"
            },
            {
                "descr": "The index of the current element being processed in the typed array.",
                "name": "index"
            },
            {
                "descr": "The typed array reduce was called upon.",
                "name": "array"
            },
            {
                "descr": "Optional. Object to use as the first argument to the first call of the callback.",
                "name": "initialValue"
            }
        ],
        "path": "javascript/global_objects/typedarray/reduce",
        "syntax": "typedarray.reduce(callback[, initialValue])",
        "type": "TypedArray"
    },
    "typedArray.reduceRight": {
        "descr": "The reduceRight() method applies a function against an accumulator and each value of the typed array (from right-to-left) has to reduce it to a single value. This method has the same algorithm as Array.prototype.reduceRight(). TypedArray is one of the typed array types here.",
        "name": "typedArray.reduceRight",
        "params": [
            {
                "descr": "Function to execute on each value in the typed array, taking four arguments:  previousValue The value previously returned in the last invocation of the callback, or initialValue, if supplied (see below).",
                "name": "callback"
            },
            {
                "descr": "The current element being processed in the typed array.",
                "name": "currentValue"
            },
            {
                "descr": "The index of the current element being processed in the typed array.",
                "name": "index"
            },
            {
                "descr": "The typed array reduce was called upon.",
                "name": "array"
            },
            {
                "descr": "Optional. Object to use as the first argument to the first call of the callback.",
                "name": "initialValue"
            }
        ],
        "path": "javascript/global_objects/typedarray/reduceright",
        "syntax": "typedarray.reduceRight(callback[, initialValue])",
        "type": "TypedArray"
    },
    "typedArray.reverse": {
        "descr": "The reverse() method reverses a typed array in place. The first typed array element becomes the last and the last becomes the first. This method has the same algorithm as Array.prototype.reverse(). TypedArray is one of the typed array types here.",
        "name": "typedArray.reverse",
        "params": [],
        "path": "javascript/global_objects/typedarray/reverse",
        "syntax": "typedarray.reverse();",
        "type": "TypedArray"
    },
    "typedArray.set": {
        "descr": "The set() method stores multiple values in the typed array, reading input values from a specified array.",
        "name": "typedArray.set",
        "params": [
            {
                "descr": "The array from which to copy values. ",
                "name": "array"
            },
            {
                "descr": "If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the JavaScript engine will intelligently copy the source range of the buffer to the destination range.",
                "name": "typedarray"
            },
            {
                "descr": "The offset into the target array at which to begin writing values from the source array. ",
                "name": "offset Optional"
            },
            {
                "descr": "Thrown if the offset is set such as it would store beyond the end of the typed array.",
                "name": "RangeError"
            }
        ],
        "path": "javascript/global_objects/typedarray/set",
        "syntax": "typedarray.set(array[, offset]) typedarray.set(typedarray[, offset])",
        "type": "TypedArray"
    },
    "typedArray.slice": {
        "descr": "The slice() method returns a shallow copy of a portion of a typed array into a new typed array object. This method has the same algorithm as Array.prototype.slice(). TypedArray is one of the typed array types here.",
        "name": "typedArray.slice",
        "params": [
            {
                "descr": "Zero-based index at which to begin extraction.",
                "name": "begin Optional"
            },
            {
                "descr": "Zero-based index before which to end extraction. ",
                "name": "end Optional"
            }
        ],
        "path": "javascript/global_objects/typedarray/slice",
        "syntax": "typedarray.slice([begin[, end]])",
        "type": "TypedArray"
    },
    "typedArray.some": {
        "descr": "The some() method tests whether some element in the typed array passes the test implemented by the provided function. This method has the same algorithm as Array.prototype.some(). TypedArray is one of the typed array types here.",
        "name": "typedArray.some",
        "params": [
            {
                "descr": "Function to test for each element, taking three arguments:  currentValue The current element being processed in the typed array.",
                "name": "callback"
            },
            {
                "descr": "The index of the current element being processed in the typed array.",
                "name": "index"
            },
            {
                "descr": "The typed array every was called upon.",
                "name": "array"
            },
            {
                "descr": "Optional. Value to use as this when executing callback.",
                "name": "thisArg"
            }
        ],
        "path": "javascript/global_objects/typedarray/some",
        "syntax": "typedarray.some(callback[, thisArg])",
        "type": "TypedArray"
    },
    "typedArray.sort": {
        "descr": "The sort() method sorts the elements of a typed array numerically in place and returns the typed array. This method has the same algorithm as Array.prototype.sort(), except that sorts the values numerically instead of as strings. TypedArray is one of the typed array types here.",
        "name": "typedArray.sort",
        "params": [
            {
                "descr": "Specifies a function that defines the sort order.",
                "name": "compareFunction Optional"
            }
        ],
        "path": "javascript/global_objects/typedarray/sort",
        "syntax": "typedarray.sort([compareFunction])",
        "type": "TypedArray"
    },
    "typedArray.subarray": {
        "descr": "The subarray() method returns a new TypedArray on the same ArrayBuffer store and with the same element types as for this TypedArray object. The begin offset is inclusive and the end offset is exclusive. TypedArray is one of the typed array types.",
        "name": "typedArray.subarray",
        "params": [
            {
                "descr": "Element to begin at. The offset is inclusive. ",
                "name": "begin Optional"
            },
            {
                "descr": "Element to end at. The offset is exclusive. ",
                "name": "end Optional"
            }
        ],
        "path": "javascript/global_objects/typedarray/subarray",
        "syntax": "typedarray.subarray([begin [,end]])",
        "type": "TypedArray"
    },
    "typedArray.toLocaleString": {
        "descr": "The toLocaleString() method returns a string representing the elements of the typed array. The elements are converted to strings and are separated by a locale-specific string (such as a comma “,”). This method has the same algorithm as Array.prototype.toLocaleString() and, as the typed array elements are numbers, the same algorithm as Number.prototype.toLocaleString() applies for each element. TypedArray is one of the typed array types here.",
        "name": "typedArray.toLocaleString",
        "params": [
            {
                "descr": "Optional. A string with a BCP 47 language tag, or an array of such strings. ",
                "name": "locales"
            },
            {
                "descr": "Optional. An object with some or all of the following properties:  localeMatcher The locale matching algorithm to use. ",
                "name": "options"
            },
            {
                "descr": "The formatting style to use. Possible values are \"decimal\" for plain number formatting, \"currency\" for currency formatting, and \"percent\" for percent formatting; the default is \"decimal\".",
                "name": "style"
            },
            {
                "descr": "The currency to use in currency formatting. ",
                "name": "currency"
            },
            {
                "descr": "How to display the currency in currency formatting. ",
                "name": "currencyDisplay"
            },
            {
                "descr": "Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators. ",
                "name": "useGrouping"
            },
            {
                "descr": "The minimum number of integer digits to use. ",
                "name": "minimumIntegerDigits"
            },
            {
                "descr": "The minimum number of fraction digits to use. ",
                "name": "minimumFractionDigits"
            },
            {
                "descr": "The maximum number of fraction digits to use. ",
                "name": "maximumFractionDigits"
            },
            {
                "descr": "The minimum number of significant digits to use. ",
                "name": "minimumSignificantDigits"
            },
            {
                "descr": "The maximum number of significant digits to use. ",
                "name": "maximumSignificantDigits"
            }
        ],
        "path": "javascript/global_objects/typedarray/tolocalestring",
        "syntax": "typedarray.toLocaleString([locales [, options]]);",
        "type": "TypedArray"
    },
    "typedArray.toString": {
        "descr": "The toString() method returns a string representing the specified array and its elements. This method has the same algorithm as Array.prototype.toString(). TypedArray is one of the typed array types here.",
        "name": "typedArray.toString",
        "params": [],
        "path": "javascript/global_objects/typedarray/tostring",
        "syntax": "typedarray.toString()",
        "type": "TypedArray"
    },
    "typedArray.values": {
        "descr": "The values() method returns a new Array Iterator object that contains the values for each index in the array.",
        "name": "typedArray.values",
        "params": [],
        "path": "javascript/global_objects/typedarray/values",
        "syntax": "arr.values()",
        "type": "TypedArray"
    },
    "typeof": {
        "descr": "The typeof operator returns a string indicating the type of the unevaluated operand.",
        "name": "typeof",
        "params": [],
        "path": "javascript/operators/typeof",
        "syntax": "typeof operator is followed by its operand: typeof operand  Parameters operand is an expression representing the object or primitive whose type is to be returned. The parentheses are optional. Description The following table summarizes the possible return values of typeof. For more information about types and primitives, see also the JavaScript data structure page.    Type Result     Undefined \"undefined\"   Null  \"object\" (see below)   Boolean \"boolean\"",
        "type": "Operators"
    },
    "unbind": {
        "descr": "As of jQuery 3.0, .unbind() has been deprecated. It was superseded by the .off() method since jQuery 1.7, so its use was already discouraged.",
        "name": "unbind",
        "params": [
            {
                "descr": "Type: String  A string containing one or more DOM event types, such as \"click\" or \"submit,\" or custom event names.",
                "name": "eventType"
            },
            {
                "descr": "Type: Function( Event eventObject ) The function that is to be no longer executed.",
                "name": "handler"
            },
            {
                "descr": "Type: String  A string containing one or more DOM event types, such as \"click\" or \"submit,\" or custom event names.",
                "name": "eventType"
            },
            {
                "descr": "Type: Boolean  Unbinds the corresponding 'return false' function that was bound using .bind( eventType, false ).",
                "name": "false"
            },
            {
                "descr": "Type: Event  A jQuery.Event object.",
                "name": "event"
            }
        ],
        "path": "jquery/unbind",
        "syntax": ".unbind( eventType [, handler ] ) Returns: jQueryversion deprecated: 3.0",
        "type": "Events"
    },
    "undefined": {
        "descr": "The global undefined property represents the primitive value undefined. It is one of JavaScript's primitive types.",
        "name": "undefined",
        "params": [],
        "path": "javascript/global_objects/undefined",
        "syntax": "undefined Description undefined is a property of the global object; i.e., it is a variable in global scope. The initial value of undefined is the primitive value undefined. In modern browsers (JavaScript 1.8.5 / Firefox 4+), undefined",
        "type": "Global Objects"
    },
    "undelegate": {
        "descr": "As of jQuery 3.0, .undelegate() has been deprecated. It was superseded by the .off() method since jQuery 1.7, so its use was already discouraged.",
        "name": "undelegate",
        "params": [
            {
                "descr": "Type: String  A selector which will be used to filter the event results.",
                "name": "selector"
            },
            {
                "descr": "Type: String  A string containing a JavaScript event type, such as \"click\" or \"keydown\"",
                "name": "eventType"
            },
            {
                "descr": "Type: String  A selector which will be used to filter the event results.",
                "name": "selector"
            },
            {
                "descr": "Type: String  A string containing a JavaScript event type, such as \"click\" or \"keydown\"",
                "name": "eventType"
            },
            {
                "descr": "Type: Function( Event eventObject ) A function to execute at the time the event is triggered.",
                "name": "handler"
            },
            {
                "descr": "Type: String  A selector which will be used to filter the event results.",
                "name": "selector"
            },
            {
                "descr": "Type: PlainObject  An object of one or more event types and previously bound functions to unbind from them.",
                "name": "events"
            },
            {
                "descr": "Type: String  A string containing a namespace to unbind all events from.",
                "name": "namespace"
            }
        ],
        "path": "jquery/undelegate",
        "syntax": ".undelegate() Returns: jQueryversion deprecated: 3.0",
        "type": "Events"
    },
    "uneval": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.",
        "name": "uneval",
        "params": [
            {
                "descr": "A JavaScript expression or statement.",
                "name": "object"
            }
        ],
        "path": "javascript/global_objects/uneval",
        "syntax": "uneval(object)",
        "type": "Global Objects"
    },
    "unload": {
        "descr": "This method is a shortcut for .on( \"unload\", handler ).",
        "name": "unload",
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute when the event is triggered.",
                "name": "handler"
            },
            {
                "descr": "Type: Anything  A plain object of data that will be passed to the event handler.",
                "name": "eventData"
            },
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.",
                "name": "handler"
            }
        ],
        "path": "jquery/unload",
        "syntax": ".unload( handler ) Returns: jQueryversion deprecated: 1.8, removed: 3.0",
        "type": "Events"
    },
    "unshift": {
        "descr": "The unshift() method adds one or more elements to the beginning of an array and returns the new length of the array.",
        "name": "array.unshift",
        "params": [
            {
                "descr": "The elements to add to the front of the array.",
                "name": "elementN"
            }
        ],
        "path": "javascript/global_objects/array/unshift",
        "syntax": "arr.unshift(element1[, ...[, elementN]])",
        "type": "Array"
    },
    "unwatch": {
        "descr": "Deprecation warning: Do not use unwatch() and watch()! These two methods were implemented only in Firefox prior to version 58, they're deprecated and removed in Firefox 58+. In addition, using watchpoints has a serious negative impact on performance, which is especially true when used on global objects, such as window. You can usually use setters and getters or proxies instead.",
        "name": "object.unwatch",
        "params": [
            {
                "descr": "The name of a property of the object to stop watching.",
                "name": "prop"
            }
        ],
        "path": "javascript/global_objects/object/unwatch",
        "syntax": "obj.unwatch(prop)",
        "type": "Object"
    },
    "unwrap": {
        "descr": "The .unwrap() method removes the element's parent and returns the unwrapped content. This is effectively the inverse of the .wrap() method. The matched elements (and their siblings, if any) replace their parents within the DOM structure.",
        "name": "unwrap",
        "params": [
            {
                "descr": "Type: String  A selector to check the parent element against. ",
                "name": "selector"
            }
        ],
        "path": "jquery/unwrap",
        "syntax": ".unwrap() Returns: jQuery",
        "type": "Manipulation"
    },
    "val": {
        "descr": "The .val() method is primarily used to get the values of form elements such as input, select and textarea. When called on an empty collection, it returns undefined.",
        "name": "val",
        "params": [
            {
                "descr": "Type: String or Number or Array  A string of text, a number, or an array of strings corresponding to the value of each matched element to set as selected/checked.",
                "name": "value"
            },
            {
                "descr": "Type: Function( Integer index, String value ) => String  A function returning the value to set. ",
                "name": "function"
            }
        ],
        "path": "jquery/val",
        "syntax": ".val() Returns: String or Number or Array",
        "type": "Manipulation"
    },
    "valueOf": {
        "descr": "The valueOf() method returns the primitive value of a String object.",
        "name": "string.valueOf",
        "params": [],
        "path": "javascript/global_objects/string/valueof",
        "syntax": "str.valueOf()",
        "type": "String"
    },
    "values": {
        "descr": "The Object.values() method returns an array of a given object's own enumerable property values, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).",
        "name": "Object.values",
        "params": [
            {
                "descr": "The object whose enumerable own property values are to be returned.",
                "name": "obj"
            }
        ],
        "path": "javascript/global_objects/object/values",
        "syntax": "Object.values(obj)",
        "type": "Object"
    },
    "var": {
        "descr": "The var declares a variable, optionally initializing it to a value.",
        "name": "var",
        "params": [
            {
                "descr": "Variable name. It can be any legal identifier.",
                "name": "varnameN"
            },
            {
                "descr": "Initial value of the variable. It can be any legal expression. ",
                "name": "valueN"
            }
        ],
        "path": "javascript/statements/var",
        "syntax": "var varname1 [= value1] [, varname2 [= value2] ... [, varnameN [= valueN]]];  varnameN Variable name. It can be any legal identifier.   valueN Initial value of the variable. It can be any legal expression. Default value is undefined.  Description var declarations, wherever they occur, are processed before any code is executed. This is called hoisting, and is discussed further below. The scope of a variable declared with var is its current execution context, which is either the enclosing function or, for variables declared outside any function, global. If you re-declare a JavaScript variable, it will not lose its value. Assigning a value to an undeclared variable implicitly creates it as a global variable (it becomes a property of the global object) when the assignment is executed. The differences between declared and undeclared variables are:",
        "type": "Statements"
    },
    "vertexAttribDivisorANGLE": {
        "descr": "The ANGLE_instanced_arrays.vertexAttribDivisorANGLE() method of the WebGL API modifies the rate at which generic vertex attributes advance when rendering multiple instances of primitives with ext.drawArraysInstancedANGLE() and ext.drawElementsInstancedANGLE().",
        "name": "vertexAttribDivisorANGLE",
        "params": [
            {
                "descr": "A GLuint specifying the index of the generic vertex attributes.",
                "name": "index"
            },
            {
                "descr": "A GLuint specifying the number of instances that will pass between updates of the generic attribute.",
                "name": "divisor"
            }
        ],
        "path": "dom/angle_instanced_arrays/vertexattribdivisorangle",
        "syntax": "void ext.vertexAttribDivisorANGLE(index, divisor);",
        "type": "WebGL"
    },
    "visualViewport": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "window.visualViewport",
        "params": [],
        "path": "dom/window/visualviewport",
        "syntax": "var visualViewport = Window.visualViewport Value A VisualViewport object. Specifications    Specification Status Comment   Visual Viewport APIThe definition of 'visualViewport' in that specification. Draft Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   60  ?   63Disabled    63Disabled   Disabled From version 63: this feature is behind the dom.visualviewport.enabled preference (needs to be set to true). To change preferences in Firefox, visit about:config.    ?   47  ?        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   60  60  ?   63Disabled    63Disabled   Disabled From version 63: this feature is behind the dom.visualviewport.enabled",
        "type": "Window"
    },
    "void": {
        "descr": "The void evaluates the given expression and then returns undefined.",
        "name": "void",
        "params": [],
        "path": "javascript/operators/void",
        "syntax": "void expression Description This operator allows evaluating expressions that produce a value into places where an expression that evaluates to undefined is desired. The void operator is often used merely to obtain the undefined primitive value, usually using \"void(0)",
        "type": "Operators"
    },
    "watch": {
        "descr": "Deprecation warning: Do not use watch() and unwatch()! These two methods were implemented only in Firefox prior to version 58, they're deprecated and removed in Firefox 58+. In addition, using watchpoints has a serious negative impact on performance, which is especially true when used on global objects, such as window. You can usually use setters and getters or proxies instead.",
        "name": "object.watch",
        "params": [
            {
                "descr": "The name of a property of the object on which you wish to monitor changes.",
                "name": "prop"
            },
            {
                "descr": "A function to call when the specified property's value changes.",
                "name": "handler"
            }
        ],
        "path": "javascript/global_objects/object/watch",
        "syntax": "obj.watch(prop, handler)",
        "type": "Object"
    },
    "weakMap.delete": {
        "descr": "The delete() method removes the specified element from a WeakMap object.",
        "name": "weakMap.delete",
        "params": [
            {
                "descr": "Required. The key of the element to remove from the WeakMap object.",
                "name": "key"
            }
        ],
        "path": "javascript/global_objects/weakmap/delete",
        "syntax": "wm.delete(key);",
        "type": "WeakMap"
    },
    "weakMap.get": {
        "descr": "The get() method returns a specified element from a WeakMap object.",
        "name": "weakMap.get",
        "params": [
            {
                "descr": "Required. The key of the element to return from the WeakMap object.",
                "name": "key"
            }
        ],
        "path": "javascript/global_objects/weakmap/get",
        "syntax": "wm.get(key);",
        "type": "WeakMap"
    },
    "weakMap.has": {
        "descr": "The has() method returns a boolean indicating whether an element with the specified key exists in the WeakMap object or not.",
        "name": "weakMap.has",
        "params": [
            {
                "descr": "Required. The key of the element to test for presence in the WeakMap object.",
                "name": "key"
            },
            {
                "descr": "Returns true if an element with the specified key exists in the WeakMap object; otherwise false.",
                "name": "Boolean"
            }
        ],
        "path": "javascript/global_objects/weakmap/has",
        "syntax": "wm.has(key);",
        "type": "WeakMap"
    },
    "weakMap.set": {
        "descr": "The set() method adds a new element with a specified key and value to a WeakMap object.",
        "name": "weakMap.set",
        "params": [
            {
                "descr": "Required. The key of the element to add to the WeakMap object.",
                "name": "key"
            },
            {
                "descr": "Required. The value of the element to add to the WeakMap object.",
                "name": "value"
            }
        ],
        "path": "javascript/global_objects/weakmap/set",
        "syntax": "wm.set(key, value);",
        "type": "WeakMap"
    },
    "weakSet.add": {
        "descr": "The add() method appends a new object to the end of a WeakSet object.",
        "name": "weakSet.add",
        "params": [
            {
                "descr": "Required. The object to add to the WeakSet collection.",
                "name": "value"
            }
        ],
        "path": "javascript/global_objects/weakset/add",
        "syntax": "ws.add(value);",
        "type": "WeakSet"
    },
    "weakSet.delete": {
        "descr": "The delete() method removes the specified element from a WeakSet object.",
        "name": "weakSet.delete",
        "params": [
            {
                "descr": "Required. The object remove from the WeakSet object.",
                "name": "value"
            }
        ],
        "path": "javascript/global_objects/weakset/delete",
        "syntax": "ws.delete(value);",
        "type": "WeakSet"
    },
    "weakSet.has": {
        "descr": "The has() method returns a boolean indicating whether an object exists in a WeakSet or not.",
        "name": "weakSet.has",
        "params": [
            {
                "descr": "Required. The object to test for presence in the WeakSet.",
                "name": "value"
            },
            {
                "descr": "Returns true if an element with the specified value exists in the WeakSet object; otherwise false.",
                "name": "Boolean"
            }
        ],
        "path": "javascript/global_objects/weakset/has",
        "syntax": "ws.has(value);",
        "type": "WeakSet"
    },
    "while": {
        "descr": "The while statement creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.",
        "name": "while",
        "params": [
            {
                "descr": "An expression evaluated before each pass through the loop. ",
                "name": "condition"
            },
            {
                "descr": "An optional statement that is executed as long as the condition evaluates to true. ",
                "name": "statement"
            }
        ],
        "path": "javascript/statements/while",
        "syntax": "while (condition) statement",
        "type": "Statements"
    },
    "width": {
        "descr": "The difference between .css(width) and .width() is that the latter returns a unit-less pixel value (for example, 400) while the former returns a value with units intact (for example, 400px). The .width() method is recommended when an element's width needs to be used in a mathematical calculation.",
        "name": "width",
        "params": [
            {
                "descr": "Type: String or Number  An integer representing the number of pixels, or an integer along with an optional unit of measure appended (as a string).",
                "name": "value"
            },
            {
                "descr": "Type: Function( Integer index, Integer value ) => String or Number  A function returning the width to set. ",
                "name": "function"
            }
        ],
        "path": "jquery/width",
        "syntax": ".width() Returns: Number",
        "type": "Dimensions"
    },
    "window": {
        "descr": "The window property of a window object points to the window object itself. Thus the following expressions all return the same window object:",
        "name": "window.window",
        "params": [],
        "path": "dom/window/window",
        "syntax": "window: var global = {data: 0}; alert(global === window.global);\n or  // displays \"true\");",
        "type": "Window"
    },
    "window.alert": {
        "descr": "The Window.alert() method displays an alert dialog with the optional specified content and an OK button.",
        "name": "window.alert",
        "params": [
            {
                "descr": "A string you want to display in the alert dialog, or, alternatively, an object that is converted into a string and displayed.",
                "name": "message Optional"
            }
        ],
        "path": "dom/window/alert",
        "syntax": "window.alert(message);",
        "type": "Window"
    },
    "window.blur": {
        "descr": "Shifts focus away from the window.",
        "name": "window.blur",
        "params": [],
        "path": "dom/window/blur",
        "syntax": "window.blur()",
        "type": "Window"
    },
    "window.cancelAnimationFrame": {
        "descr": "Cancels an animation frame request previously scheduled through a call to window.requestAnimationFrame().",
        "name": "window.cancelAnimationFrame",
        "params": [
            {
                "descr": "The ID value returned by the call to window.requestAnimationFrame() that requested the callback.",
                "name": "requestID"
            }
        ],
        "path": "dom/window/cancelanimationframe",
        "syntax": "window.cancelAnimationFrame(requestID);",
        "type": "Window"
    },
    "window.cancelIdleCallback": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "window.cancelIdleCallback",
        "params": [
            {
                "descr": "The ID value returned by window.requestIdleCallback() when the callback was established.",
                "name": "handle"
            }
        ],
        "path": "dom/window/cancelidlecallback",
        "syntax": "window.cancelIdleCallback(handle);",
        "type": "Window"
    },
    "window.clearImmediate": {
        "descr": "This method clears the action specified by window.setImmediate.",
        "name": "window.clearImmediate",
        "params": [],
        "path": "dom/window/clearimmediate",
        "syntax": "window.clearImmediate(immediateID)",
        "type": "Window"
    },
    "window.close": {
        "descr": "The Window.close() method closes the current window, or the window on which it was called.",
        "name": "window.close",
        "params": [],
        "path": "dom/window/close",
        "syntax": "window.close();",
        "type": "Window"
    },
    "window.closed": {
        "descr": "This read-only property indicates whether the referenced window is closed or not.",
        "name": "window.closed",
        "params": [
            {
                "descr": "A boolean. Possible Values:   true: The window has been closed. ",
                "name": "isClosed"
            }
        ],
        "path": "dom/window/closed",
        "syntax": "isClosed = windowRef.closed;   isClosed A boolean. Possible Values:   true: The window has been closed.  false: The window is open.    Examples Change the URL of a window from a popup The following example demonstrates how a popup window can change the URL of the window that opened it. Before attempting to change the URL, it checks that the current window has an opener using the window.opener property and that the opener isn't closed: // Check that an opener exists and is not closed if (window.opener && !window.opener.closed) { window.opener.location.href = \"http://www.mozilla.org\"; }",
        "type": "Window"
    },
    "window.confirm": {
        "descr": "The Window.confirm() method displays a modal dialog with an optional message and two buttons, OK and Cancel.",
        "name": "window.confirm",
        "params": [],
        "path": "dom/window/confirm",
        "syntax": "result = window.confirm(message);",
        "type": "Window"
    },
    "window.console": {
        "descr": "The Window.console read-only property returns a reference to the Console object, which provides methods for logging information to the browser's console. These methods are intended for debugging purposes only and should not be relied on for presenting information to end users.",
        "name": "window.console",
        "params": [],
        "path": "dom/window/console",
        "syntax": "var consoleObj = window.console;  Examples Logging to console The first example logs text to the console. console.log(\"An error occurred while loading the content\");",
        "type": "Window"
    },
    "window.crypto": {
        "descr": "The Window.crypto read-only property returns the Crypto object associated to the global object. This object allows web pages access to certain cryptographic related services.",
        "name": "window.crypto",
        "params": [],
        "path": "dom/window/crypto",
        "syntax": "var cryptoObj = window.crypto || window.msCrypto; // for IE 11  Example Using the Window.crypto",
        "type": "Window"
    },
    "window.customElements": {
        "descr": "The customElements read-only property of the Window interface returns a reference to the CustomElementRegistry object, which can be used to register new custom elements and get information about previously registered custom elements.",
        "name": "window.customElements",
        "params": [],
        "path": "dom/window/customelements",
        "syntax": "let customElementRegistry = window.customElements; Return value A CustomElementRegistry object instance representing the custom element registry for the current window. Examples The most common example you'll see of this property being used is to get access to the CustomElementRegistry.define()",
        "type": "Window"
    },
    "window.defaultStatus": {
        "descr": "Obsolete since Gecko 23 (Firefox 23 / Thunderbird 23 / SeaMonkey 2.20)This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "window.defaultStatus",
        "params": [],
        "path": "dom/window/defaultstatus",
        "syntax": "var sMsg = window.defaultStatus; window.defaultStatus = sMsg;  Parameters   sMsg is a string containing the text to be displayed by default in the statusbar.  Example <html> <body onload=\"window.defaultStatus='hello!';\"/> <button onclick=\"window.confirm('Are you sure you want to quit?');\n or \">confirm</button> </body> </html>);",
        "type": "Window"
    },
    "window.devicePixelRatio": {
        "descr": "The Window property devicePixelRatio returns the ratio of the resolution in physical pixels to the resolution in CSS pixels for the current display device. This value could also be interpreted as the ratio of pixel sizes: the size of one CSS pixel to the size of one physical pixel. In simpler terms, this tells the browser how many of the screen's actual pixels should be used to draw a single CSS pixel.",
        "name": "window.devicePixelRatio",
        "params": [],
        "path": "dom/window/devicepixelratio",
        "syntax": "value = window.devicePixelRatio;  Value A double-precision floating-point value indicating the ratio of the display's resolution in physical pixels to the resolution in CSS pixels. Example A canvas can appear too blurry on retina screens. Use window.devicePixelRatio to determine how much extra pixel density should be added to allow for a sharper image. HTML <canvas id=\"canvas\"></canvas>  JavaScript var canvas = document.getElementById('canvas');\n or  var ctx = canvas.getContext('2d');\n or  // Set display size (css pixels). var size = 200; canvas.style.width = size + \"px\"; canvas.style.height = size + \"px\"; // Set actual size in memory (scaled to account for extra pixel density). var scale = window.devicePixelRatio; // Change to 1 on retina screens to see blurry canvas. canvas.width = size * scale; canvas.height = size * scale; // Normalize coordinate system to use css pixels. ctx.scale(scale, scale);\n or  ctx.fillStyle = \"#bada55\"; ctx.fillRect(10, 10, 300, 300);\n or  ctx.fillStyle = \"#ffffff\"; ctx.font = '18px Arial'; ctx.textAlign = 'center'; ctx.textBaseline = 'middle'; var x = size / 2; var y = size / 2; var textString = \"I love MDN\"; ctx.fillText(textString, x, y);",
        "type": "Window"
    },
    "window.directories": {
        "descr": "Obsolete since Gecko 2.0 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "window.directories",
        "params": [],
        "path": "dom/window/directories",
        "syntax": "var dirBar = window.directories;  Parameters dirBar is an object of the type BarProp. Example <script> function dirs() { alert(window.directories);\n or  } </script>);",
        "type": "Window"
    },
    "window.document": {
        "descr": "window.document returns a reference to the document contained in the window.",
        "name": "window.document",
        "params": [],
        "path": "dom/window/document",
        "syntax": "doc = window.document  Parameters   doc is an object reference to a document.  Example <!DOCTYPE html> <html> <head> <title>Hello, World!</title> </head> <body> <script type=\"text/javascript\"> var doc = window.document; console.log(doc.title);\n or  // Hello, World! </script> </body> </html>);",
        "type": "Window"
    },
    "window.focus": {
        "descr": "Makes a request to bring the window to the front. It may fail due to user settings and the window isn't guaranteed to be frontmost before this method returns.",
        "name": "window.focus",
        "params": [],
        "path": "dom/window/focus",
        "syntax": "window.focus()",
        "type": "Window"
    },
    "window.frameElement": {
        "descr": "Returns the element (such as <iframe> or <object>) in which the window is embedded, or null if the element is either top-level or is embedded into a document with a different script origin; that is, in cross-origin situations.",
        "name": "window.frameElement",
        "params": [],
        "path": "dom/window/frameelement",
        "syntax": "frameEl = window.frameElement;    frameEl is the element which the window is embedded into. If the window isn't embedded into another document, or if the document into which it's embedded has a different origin (such as having been located from a different domain), this is null",
        "type": "Window"
    },
    "window.frames": {
        "descr": "Returns the window itself, which is an array-like object, listing the direct sub-frames of the current window.",
        "name": "window.frames",
        "params": [],
        "path": "dom/window/frames",
        "syntax": "frameList = window.frames;    frameList is a list of frame objects. It is similar to an array in that it has a length property and its items can be accessed using the [i] notation.  frameList === window evaluates to true. Each item in the window.frames pseudo-array represents the window object corresponding to the given <frame>'s or <iframe>'s content, not the (i)frame DOM element (i.e., window.frames[0]",
        "type": "Window"
    },
    "window.fullScreen": {
        "descr": "This property indicates whether the window is displayed in full screen mode or not. It is only reliable in Gecko 1.9 (Firefox 3) and later, see the Notes below.",
        "name": "window.fullScreen",
        "params": [
            {
                "descr": "A boolean. Possible Values:",
                "name": "isInFullScreen"
            }
        ],
        "path": "dom/window/fullscreen",
        "syntax": "isInFullScreen = windowRef.fullScreen;  With chrome privileges, the property is read-write, otherwise it is read-only. Bear in mind that if you try to set this property without chrome privileges, it will not throw an exception and instead just silently fail. This is to prevent scripts designed to set this property in Internet Explorer from breaking. Return Value  isInFullScreen A boolean. Possible Values:    true: The window is in full screen mode.  false: The window is not in full screen mode.  Examples if (window.fullScreen) { // it's fullscreen! } else { // not fullscreen! }",
        "type": "Window"
    },
    "window.getComputedStyle": {
        "descr": "The returned style is a live CSSStyleDeclaration object, which updates itself automatically when the element's style is changed.",
        "name": "window.getComputedStyle",
        "params": [
            {
                "descr": "The Element for which to get the computed style.",
                "name": "element"
            },
            {
                "descr": "A string specifying the pseudo-element to match. ",
                "name": "pseudoEltOptional"
            }
        ],
        "path": "dom/window/getcomputedstyle",
        "syntax": "var style = window.getComputedStyle(element[, pseudoElt]);",
        "type": "Window"
    },
    "window.getSelection": {
        "descr": "Returns a Selection object representing the range of text selected by the user or the current position of the caret.",
        "name": "window.getSelection",
        "params": [],
        "path": "dom/window/getselection",
        "syntax": "selection = window.getSelection();",
        "type": "Window"
    },
    "window.history": {
        "descr": "The Window.history read-only property returns a reference to the History object, which provides an interface for manipulating the browser session history (pages visited in the tab or frame that the current page is loaded in).",
        "name": "window.history",
        "params": [],
        "path": "dom/window/history",
        "syntax": "var historyObj = window.history;  Example history.back();\n or  // equivalent to clicking back button history.go(-1);\n or  // equivalent to history.back();",
        "type": "Window"
    },
    "window.innerHeight": {
        "descr": "Height (in pixels) of the browser window viewport including, if rendered, the horizontal scrollbar.",
        "name": "window.innerHeight",
        "params": [],
        "path": "dom/window/innerheight",
        "syntax": "var intViewportHeight = window.innerHeight; Value On return, intViewportHeight is the height of the browser window's viewport. The window.innerHeight property is read only; it has no default value. Notes The innerHeight property is supported in any window object like a window, a frame, a frameset, or a secondary window. There is an algorithm to obtain the height of the viewport excluding, if rendered, the horizontal scrollbar. Example Assuming a frameset var intFrameHeight = window.innerHeight; // or var intFrameHeight = self.innerHeight; // will return the height of the frame viewport within the frameset var intFramesetHeight = parent.innerHeight; // will return the height of the viewport of the closest frameset var intOuterFramesetHeight = top.innerHeight; // will return the height of the viewport of the outermost frameset  To change the size of a window, see window.resizeBy()",
        "type": "Window"
    },
    "window.innerWidth": {
        "descr": "Width (in pixels) of the browser window viewport including, if rendered, the vertical scrollbar.",
        "name": "window.innerWidth",
        "params": [],
        "path": "dom/window/innerwidth",
        "syntax": "var intViewportWidth = window.innerWidth; Value intViewportWidth stores the window.innerWidth property value. The window.innerWidth property is read only; it has no default value. Notes The innerWidth property is supported in any window object like a window, a frame, a frameset, or a secondary window. There is an algorithm to obtain the width of the viewport excluding, if rendered, the vertical scrollbar. Example // This will return the width of the viewport var intFrameWidth = window.innerWidth; // This will return the width of the frame viewport within a frameset var intFrameWidth = self.innerWidth; // This will return the width of the viewport of the closest frameset var intFramesetWidth = parent.innerWidth; // This will return the width of the viewport of the outermost frameset var intOuterFramesetWidth = top.innerWidth; To change the size of a window, see window.resizeBy and window.resizeTo. Specification    Specification Status Comment     CSS Object Model (CSSOM) View ModuleThe definition of 'window.innerWidth' in that specification. Working Draft Initial definition    Browser compatibilityUpdate compatibility data on GitHub",
        "type": "Window"
    },
    "window.isSecureContext": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "window.isSecureContext",
        "params": [],
        "path": "dom/window/issecurecontext",
        "syntax": "var isSecure = window.isSecureContext Examples Feature detection You can use feature detection to check whether they are in a secure context or not by using the isSecureContext boolean which is exposed on the global scope. if (window.isSecureContext) { // Page is a secure context so service workers are now available navigator.serviceWorker.register(\"/offline-worker.js\").then(function () { ... });\n or  });",
        "type": "Window"
    },
    "window.length": {
        "descr": "Returns the number of frames (either <frame> or <iframe> elements) in the window.",
        "name": "window.length",
        "params": [],
        "path": "dom/window/length",
        "syntax": "framesCount = window.length;    framesCount is the number of frames.  Example if (window.length) { // this is a document with subframes }",
        "type": "Window"
    },
    "window.localStorage": {
        "descr": "The read-only localStorage property allows you to access a Storage object for the Document's origin; the stored data is saved across browser sessions. localStorage is similar to sessionStorage, except that while data stored in localStorage has no expiration time, data stored in sessionStorage gets cleared when the page session ends — that is, when the page is closed.",
        "name": "window.localStorage",
        "params": [
            {
                "descr": "The request violates a policy decision, or the origin is not a valid scheme/host/port tuple (this can happen if the origin uses the file: or data: scheme, for example). ",
                "name": "SecurityError"
            }
        ],
        "path": "dom/window/localstorage",
        "syntax": "myStorage = window.localStorage; Value A Storage object which can be used to access the current origin's local storage space. Exceptions  SecurityError The request violates a policy decision, or the origin is not a valid scheme/host/port tuple (this can happen if the origin uses the file: or data: scheme, for example). For example, the user may have their browser configured to deny permission to persist data for the specified origin.  Example",
        "type": "Window"
    },
    "window.location": {
        "descr": "The Window.location read-only property returns a Location object with information about the current location of the document.",
        "name": "window.location",
        "params": [],
        "path": "dom/window/location",
        "syntax": "var oldLocation = location; location = newLocation;  Examples Basic Example alert(location);\n or  // alerts \"https://developer.mozilla.org/en-US/docs/Web/API/Window/location\");",
        "type": "Window"
    },
    "window.matchMedia": {
        "descr": "Returns a new MediaQueryList object representing the parsed results of the specified media query string.",
        "name": "window.matchMedia",
        "params": [],
        "path": "dom/window/matchmedia",
        "syntax": "mql = window.matchMedia(mediaQueryString)",
        "type": "Window"
    },
    "window.moveBy": {
        "descr": "Moves the current window by a specified amount.",
        "name": "window.moveBy",
        "params": [],
        "path": "dom/window/moveby",
        "syntax": "window.moveBy(deltaX, deltaY)",
        "type": "Window"
    },
    "window.moveTo": {
        "descr": "Moves the window to the specified coordinates.",
        "name": "window.moveTo",
        "params": [],
        "path": "dom/window/moveto",
        "syntax": "window.moveTo(x, y)",
        "type": "Window"
    },
    "window.name": {
        "descr": "The name of the window is used primarily for setting targets for hyperlinks and forms. Windows do not need to have names.",
        "name": "window.name",
        "params": [],
        "path": "dom/window/name",
        "syntax": "string = window.name; window.name = string;  Example window.name = \"lab_view\";  Notes The name of the window is used primarily for setting targets for hyperlinks and forms. Windows do not need to have names. It has also been used in some frameworks for providing cross-domain messaging (e.g., SessionVars and Dojo's dojox.io.windowName) as a more secure alternative to JSONP. Modern web applications hosting sensitive data should, however, not rely on window.name",
        "type": "Window"
    },
    "window.onappinstalled": {
        "descr": "The onappinstalled attribute of the Window object serves as an event handler for the appinstalled event, which is dispatched once the web application is successfully installed as a progressive web app. The event that is fired is a \"simple event\" that implements the Event interface.",
        "name": "window.onappinstalled",
        "params": [],
        "path": "dom/window/onappinstalled",
        "syntax": "window.onappinstalled = function(event) { ... };",
        "type": "Window"
    },
    "window.onbeforeinstallprompt": {
        "descr": "The Window.onbeforeinstallprompt property is an event handler for processing a beforeinstallprompt, which is dispatched on devices when a user is about to be prompted to \"install\" a web application. Its associated event may be saved for later and used to prompt the user at a more suitable time.",
        "name": "window.onbeforeinstallprompt",
        "params": [],
        "path": "dom/window/onbeforeinstallprompt",
        "syntax": "window.addEventListener(\"beforeinstallprompt\", function(event) { ... });\n or  window.onbeforeinstallprompt = function(event) { ...};);",
        "type": "Window"
    },
    "window.ondeviceorientation": {
        "descr": "An event handler for the deviceorientation event, which contains information about a relative device orientation change.",
        "name": "window.ondeviceorientation",
        "params": [],
        "path": "dom/window/ondeviceorientation",
        "syntax": "window.ondeviceorientation = function(event) { ... }; window.addEventListener('deviceorientation', function(event) { ... });",
        "type": "Window"
    },
    "window.ondragdrop": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "window.ondragdrop",
        "params": [
            {
                "descr": "The event handler function to be registered.",
                "name": "funcRef"
            }
        ],
        "path": "dom/window/ondragdrop",
        "syntax": "window.ondragdrop = funcRef; window.addEventListener(\"dragdrop\", funcRef, useCapturing);",
        "type": "Window"
    },
    "window.onvrdisplayactivate": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "window.onvrdisplayactivate",
        "params": [],
        "path": "dom/window/onvrdisplayactivate",
        "syntax": "window.onvrdisplayactivate = function() { ... };",
        "type": "Window"
    },
    "window.onvrdisplayblur": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "window.onvrdisplayblur",
        "params": [],
        "path": "dom/window/onvrdisplayblur",
        "syntax": "window.onvrdisplayblur = function() { ... };",
        "type": "Window"
    },
    "window.onvrdisplayconnect": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "window.onvrdisplayconnect",
        "params": [],
        "path": "dom/window/onvrdisplayconnect",
        "syntax": "window.onvrdisplayconnect = function() { ... };",
        "type": "Window"
    },
    "window.onvrdisplaydeactivate": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "window.onvrdisplaydeactivate",
        "params": [],
        "path": "dom/window/onvrdisplaydeactivate",
        "syntax": "window.onvrdisplaydeactivate = function() { ... };",
        "type": "Window"
    },
    "window.onvrdisplaydisconnect": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "window.onvrdisplaydisconnect",
        "params": [],
        "path": "dom/window/onvrdisplaydisconnect",
        "syntax": "window.onvrdisplaydisconnect = function() { ... };",
        "type": "Window"
    },
    "window.onvrdisplayfocus": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "window.onvrdisplayfocus",
        "params": [],
        "path": "dom/window/onvrdisplayfocus",
        "syntax": "window.onvrdisplayfocus = function() { ... };",
        "type": "Window"
    },
    "window.onvrdisplaypresentchange": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "window.onvrdisplaypresentchange",
        "params": [],
        "path": "dom/window/onvrdisplaypresentchange",
        "syntax": "window.onvrdisplaypresentchange = functionRef;  Examples The presenting state of a VRDisplay can be checked using the VRDisplay.isPresenting property. window.onvrdisplaypresentchange = function() { if(vrDisplay.isPresenting) { info.textContent = 'Display has started presenting.'; } else { info.textContent = 'Display has stopped presenting.'; } };",
        "type": "Window"
    },
    "window.open": {
        "descr": "The Window interface's open() method loads the specified resource into the browsing context (window, <iframe> or tab) with the specified name. If the name doesn't exist, then a new window is opened and the specified resource is loaded into its browsing context.",
        "name": "window.open",
        "params": [
            {
                "descr": "A DOMString indicating the URL of the resource to be loaded. ",
                "name": "url"
            },
            {
                "descr": "A DOMString specifying the name of the browsing context (window, <iframe> or tab) into which to load the specified resource; if the name doesn't indicate an existing context, a new window is created and is given the name specified by windowName. This name can then be used as the target of links and forms by specifying it as the target attribute of <a> or <form> elements. The name should not contain whitespace. Keep in mind that this will not be used as the window's displayed title. If the string is empty, the browser will create a new window every time (this behaviour doesn't work when the string is replaced with NULL).",
                "name": "windowName"
            },
            {
                "descr": "A DOMString containing a comma-separated list of window features given with their corresponding values in the form \"name=value\". ",
                "name": "windowFeatures Optional"
            },
            {
                "descr": "Deprecated. Same as left but only supported by Netscape and Mozilla-based browsers.",
                "name": "screenX"
            },
            {
                "descr": "Deprecated. Same as top but only supported by Netscape and Mozilla-based browsers.",
                "name": "screenY"
            },
            {
                "descr": "Centers the window in relation to its parent's size and position. ",
                "name": "centerscreen"
            },
            {
                "descr": "Specifies the height of the whole browser window in pixels. ",
                "name": "outerHeight"
            },
            {
                "descr": "Specifies the width of the whole browser window in pixels. ",
                "name": "outerWidth"
            },
            {
                "descr": "Same as height but only supported by Netscape and Mozilla-based browsers. ",
                "name": "innerHeight"
            },
            {
                "descr": "Same as width but only supported by Netscape and Mozilla-based browsers. ",
                "name": "innerWidth"
            },
            {
                "descr": "Example: \"status=yes\", \"status=1\", and \"status\" have identical results.",
                "name": "NOTE: All features can be set to yes or 1, or just be present to be \"on\". Set them to no or 0, or in most cases just omit them, to be \"off\"."
            },
            {
                "descr": "If this feature is on, then the new secondary window renders the menubar.",
                "name": "menubar"
            },
            {
                "descr": "If this feature is on, then the new secondary window renders the Navigation Toolbar (Back, Forward, Reload, Stop buttons). ",
                "name": "toolbar"
            },
            {
                "descr": "If this feature is on, then the new secondary window renders the Location bar in Mozilla-based browsers. ",
                "name": "location"
            },
            {
                "descr": "If this feature is on, then the new secondary window renders the Personal Toolbar in Netscape 6.x, Netscape 7.x and Mozilla browser. ",
                "name": "personalbar"
            },
            {
                "descr": "Obsolete synonym of personalbar. ",
                "name": "directories Obsolete since Gecko 2"
            },
            {
                "descr": "If this feature is on, then the new secondary window has a status bar. ",
                "name": "status"
            },
            {
                "descr": "If this feature is specified, the window is able to open even if another application is already in the foreground. ",
                "name": "attention Non-standard"
            },
            {
                "descr": "If on, the new window is said to be dependent of its parent window. ",
                "name": "dependent"
            },
            {
                "descr": "This setting can only apply to dialog windows; \"minimizable\" requires dialog=yes. ",
                "name": "minimizable"
            },
            {
                "descr": "Do not use. Not implemented in Mozilla. ",
                "name": "fullscreen"
            },
            {
                "descr": "If this feature is on, the new secondary window will be resizable.",
                "name": "resizable"
            },
            {
                "descr": "If this feature is on, the new secondary window will show horizontal and/or vertical scrollbar(s) if the document doesn't fit into the window's viewport. ",
                "name": "scrollbars"
            },
            {
                "descr": "Note: Starting with Mozilla 1.7/Firefox 0.9, this feature requires the UniversalBrowserWrite privilege (bug 244965). ",
                "name": "chrome"
            },
            {
                "descr": "Note: Starting with Firefox 44, this feature can only be used with chrome privileges. ",
                "name": "dialog"
            },
            {
                "descr": "Note: Starting with Mozilla 1.2.1, this feature requires the UniversalBrowserWrite privilege (bug 180048). ",
                "name": "modal"
            },
            {
                "descr": "By default, all new secondary windows have a titlebar. ",
                "name": "titlebar"
            },
            {
                "descr": "If on, the new window will always be displayed on top of other browser windows, regardless of whether it is active or not.",
                "name": "alwaysRaised"
            },
            {
                "descr": "If on, the new created window floats below, under its own parent when the parent window is not minimized. ",
                "name": "alwaysLowered"
            },
            {
                "descr": "Same as alwaysLowered.",
                "name": "z-lock"
            },
            {
                "descr": "When set to no or 0, this feature removes the system close command icon and system close menu item. ",
                "name": "close"
            },
            {
                "descr": "You can not. New windows not opened by javascript can not as a rule be closed by JavaScript. ",
                "name": "How can I prevent the confirmation message asking the user whether they want to close the window?"
            },
            {
                "descr": "First check for the existence of the window object reference of such window and if it exists and if it has not been closed, then use the focus() method. ",
                "name": "How can I bring back the window if it is minimized or behind another window?"
            },
            {
                "descr": "You cannot. All browser manufacturers try to make the opening of new secondary windows noticed by users and noticeable by users to avoid confusion, to avoid disorienting users.",
                "name": "How do I force a maximized window?"
            },
            {
                "descr": "You cannot force this. Users with Mozilla-based browsers have absolute control over window functionalities like resizability, scrollability and toolbars presence via user preferences in about:config. ",
                "name": "How do I turn off window resizability or remove toolbars?"
            },
            {
                "descr": "You can not reliably because the users can prevent the window from being resized by unchecking the Edit/Preferences/Advanced/Scripts & Plug-ins/Allow Scripts to/ Move or resize existing windows checkbox in Mozilla or Tools/Options.../Content tab/Enable Javascript/Advanced button/Move or resize existing windows checkbox in Firefox or by setting dom.disable_window_move_resize to true in about:config or by editing accordingly their user.js file.",
                "name": "How do I resize a window to fit its content?"
            },
            {
                "descr": "To open a resource in a new tab see Tabbed browser. ",
                "name": "How do I open a referenced resource of a link in a new tab? or in a specific tab?"
            },
            {
                "descr": "You can test for the existence of the window object reference which is the returned value in case of success of the window.open() call and then verify that windowObjectReference.closed return value is false.",
                "name": "How do I know whether a window I opened is still open?"
            },
            {
                "descr": "With the built-in popup blockers of Mozilla/Firefox and Internet Explorer 6 SP2, you have to check the return value of window.open(): it will be null if the window wasn't allowed to open. ",
                "name": "How can I tell when my window was blocked by a popup blocker?"
            },
            {
                "descr": "The window.open() method gives a main window a reference to a secondary window; the opener property gives a secondary window a reference to its main window.",
                "name": "What is the JavaScript relationship between the main window and the secondary window?"
            },
            {
                "descr": "It is because of the cross-domain script security restriction (also referred as the \"Same Origin Policy\"). ",
                "name": "I can not access the properties of the new secondary window. I always get an error in the javascript console saying \"Error: uncaught exception: Permission denied to get property <property_name or method_name>. Why is that?"
            },
            {
                "descr": "Terms often used to describe or to identify the same window. ",
                "name": "Opener window, parent window, main window, first window"
            },
            {
                "descr": "Terms often used to describe or to identify the same window. ",
                "name": "Sub-window, child window, secondary window, second window"
            },
            {
                "descr": "Script-initiated windows opening automatically without the user's consent.",
                "name": "Unrequested popup windows"
            }
        ],
        "path": "dom/window/open",
        "syntax": "var window = window.open(url, windowName, [windowFeatures]);",
        "type": "Window"
    },
    "window.opener": {
        "descr": "The Window interface's opener property returns a reference to the window that opened the window using open().",
        "name": "window.opener",
        "params": [],
        "path": "dom/window/opener",
        "syntax": "openerWindow = window.opener;  Value A Window referring to the window that called open()",
        "type": "Window"
    },
    "window.outerHeight": {
        "descr": "Window.outerHeight gets the height in pixels of the whole browser window. It represents the height of the whole browser window including sidebar (if expanded), window chrome and window resizing borders/handles.",
        "name": "window.outerHeight",
        "params": [],
        "path": "dom/window/outerheight",
        "syntax": "outWindowHeight = window.outerHeight;  On return, outWindowHeight contains the height of the outside of the window. Notes To change the size of a window, see window.resizeBy()",
        "type": "Window"
    },
    "window.outerWidth": {
        "descr": "Window.outerWidth gets the width of the outside of the browser window. It represents the width of the whole browser window including sidebar (if expanded), window chrome and window resizing borders/handles.",
        "name": "window.outerWidth",
        "params": [],
        "path": "dom/window/outerwidth",
        "syntax": "outWindowWidth = window.outerWidth;  On return, outWindowWidth is the width of the outside of the window. Notes To change the size of a window, see window.resizeBy()",
        "type": "Window"
    },
    "window.pageYOffset": {
        "descr": "The read-only Window property pageYOffset is an alias for scrollY; as such, it returns the number of pixels the document is currently scrolled along the vertical axis (that is, up or down) with a value of 0.0, indicating that the top edge of the Document is currently aligned with the top edge of the window's content area.",
        "name": "window.pageYOffset",
        "params": [],
        "path": "dom/window/pageyoffset",
        "syntax": "yOffset = window.pageYOffset;  Value A floating-point number specifying the number of pixels the Document is scrolled vertically within its containing Window. This number is subpixel precise, so it may not be an integer. A value of 0.0 indicates that the window is not scrolled vertically, and that the top of the document is located at the top edge of the window's content area. Since this property is an alias for Window.scrollY, see that article for additional details on this value and its use. Example In this example, an <iframe> is created and filled with content, then a specific element within the document is scrolled into view in the frame. Once that's done, the vertical scroll position is checked by looking at the value of pageYOffset in the frame's contentWindow. HTML The HTML is extremely simple and has just two elements: an <iframe> that contains the document we're going to scroll, and a <div> into which we'll output the value of pageYOffset when we've finished the scroll. <iframe id=\"frame\"> </iframe> <div id=\"info\"> </div> JavaScript var frame = document.getElementById(\"frame\");\n or  var frameDoc = frame.contentDocument; var info = document.getElementById(\"info\");\n or  var target = frameDoc.getElementById(\"overview\");\n or  frameDoc.scrollingElement.scrollTop = target.offsetTop; info.innerText = \"Y offset after scrolling: \" + frame.contentWindow.pageYOffset + \" pixels\";);",
        "type": "Window"
    },
    "window.parent": {
        "descr": "A reference to the parent of the current window or subframe.",
        "name": "window.parent",
        "params": [],
        "path": "dom/window/parent",
        "syntax": "parentWindow = window.parent;  Example if (window.parent != window.top) { // we're deeper than one down }",
        "type": "Window"
    },
    "window.performance": {
        "descr": "The Window interface's performance property returns a Performance object, which can be used to gather performance information about the current document. It serves as the point of exposure for the Performance Timeline API, the High Resolution Time API, the Navigation Timing API, the User Timing API, and the Resource Timing API.",
        "name": "window.performance",
        "params": [],
        "path": "dom/window/performance",
        "syntax": "performanceData = window.performance; Value A Performance object offering access to the performance and timing-related information offered by the APIs it exposes. Specifications    Specification Status Comment   High Resolution TimeThe definition of 'window.performance' in that specification. Recommendation Defines now()",
        "type": "Window"
    },
    "window.postMessage": {
        "descr": "The window.postMessage() method safely enables cross-origin communication between Window objects; e.g., between a page and a pop-up that it spawned, or between a page and an iframe embedded within it.",
        "name": "window.postMessage",
        "params": [
            {
                "descr": "A reference to the window that will receive the message. ",
                "name": "targetWindow"
            },
            {
                "descr": "Data to be sent to the other window. ",
                "name": "message"
            },
            {
                "descr": "Specifies what the origin of targetWindow must be for the event to be dispatched, either as the literal string \"*\" (indicating no preference) or as a URI. ",
                "name": "targetOrigin"
            },
            {
                "descr": "Is a sequence of Transferable objects that are transferred with the message. ",
                "name": "transfer Optional"
            },
            {
                "descr": "The object passed from the other window.",
                "name": "data"
            },
            {
                "descr": "The origin of the window that sent the message at the time postMessage was called. ",
                "name": "origin"
            },
            {
                "descr": "A reference to the window object that sent the message; you can use this to establish two-way communication between two windows with different origins.",
                "name": "source"
            }
        ],
        "path": "dom/window/postmessage",
        "syntax": "targetWindow.postMessage(message, targetOrigin, [transfer]);",
        "type": "Window"
    },
    "window.print": {
        "descr": "Opens the Print Dialog to print the current document.",
        "name": "window.print",
        "params": [],
        "path": "dom/window/print",
        "syntax": "window.print()",
        "type": "Window"
    },
    "window.prompt": {
        "descr": "The Window.prompt() displays a dialog with an optional message prompting the user to input some text.",
        "name": "window.prompt",
        "params": [
            {
                "descr": "A string of text to display to the user. ",
                "name": "message Optional"
            },
            {
                "descr": "A string containing the default value displayed in the text input field. ",
                "name": "default Optional"
            }
        ],
        "path": "dom/window/prompt",
        "syntax": "result = window.prompt(message, default);",
        "type": "Window"
    },
    "window.requestAnimationFrame": {
        "descr": "The window.requestAnimationFrame() method tells the browser that you wish to perform an animation and requests that the browser call a specified function to update an animation before the next repaint. The method takes a callback as an argument to be invoked before the repaint.",
        "name": "window.requestAnimationFrame",
        "params": [
            {
                "descr": "The function to call when it's time to update your animation for the next repaint. ",
                "name": "callback"
            }
        ],
        "path": "dom/window/requestanimationframe",
        "syntax": "window.requestAnimationFrame(callback);",
        "type": "Window"
    },
    "window.requestIdleCallback": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "window.requestIdleCallback",
        "params": [
            {
                "descr": "A reference to a function that should be called in the near future, when the event loop is idle. ",
                "name": "callback"
            },
            {
                "descr": "Contains optional configuration parameters. ",
                "name": "options Optional"
            }
        ],
        "path": "dom/window/requestidlecallback",
        "syntax": "var handle = window.requestIdleCallback(callback[, options])",
        "type": "Window"
    },
    "window.resizeBy": {
        "descr": "Resizes the current window by a certain amount.",
        "name": "window.resizeBy",
        "params": [],
        "path": "dom/window/resizeby",
        "syntax": "window.resizeBy(xDelta, yDelta)",
        "type": "Window"
    },
    "window.resizeTo": {
        "descr": "Dynamically resizes window.",
        "name": "window.resizeTo",
        "params": [],
        "path": "dom/window/resizeto",
        "syntax": "window.resizeTo(aWidth, aHeight)",
        "type": "Window"
    },
    "window.screen": {
        "descr": "Returns a reference to the screen object associated with the window. The screen object, implementing the Screen interface, is a special object for inspecting properties of the screen on which the current window is being rendered.",
        "name": "window.screen",
        "params": [],
        "path": "dom/window/screen",
        "syntax": "screenObj = window.screen;  Example if (screen.pixelDepth < 8) { // use low-color version of page } else { // use regular, colorful page }",
        "type": "Window"
    },
    "window.screenLeft": {
        "descr": "The Window.screenLeft read-only property returns the horizontal distance, in CSS pixels, from the left border of the user's browser viewport to the left side of the screen.",
        "name": "window.screenLeft",
        "params": [],
        "path": "dom/window/screenleft",
        "syntax": "leftWindowPos = window.screenLeft  Returns A number equal to the number of CSS pixels from the left edge of the browser viewport to the left edge of the screen. Examples In our screenleft-screentop example, you'll see a canvas onto which has been drawn a circle. In this example we are using screenLeft/screenTop plus Window.requestAnimationFrame()",
        "type": "Window"
    },
    "window.screenTop": {
        "descr": "The Window.screenTop read-only property returns the vertical distance, in CSS pixels, from the top border of the user's browser viewport to the top side of the screen.",
        "name": "window.screenTop",
        "params": [],
        "path": "dom/window/screentop",
        "syntax": "topWindowPos = window.screenTop  Returns A number equal to the number of CSS pixels from the top edge of the browser viewport to the top edge of the screen. Examples In our screenleft-screentop example, you'll see a canvas onto which has been drawn a circle. In this example we are using screenLeft/screenTop plus Window.requestAnimationFrame()",
        "type": "Window"
    },
    "window.screenX": {
        "descr": "The Window.screenX read-only property returns the horizontal distance, in CSS pixels, of the left border of the user's browser viewport to the left side of the screen.",
        "name": "window.screenX",
        "params": [],
        "path": "dom/window/screenx",
        "syntax": "leftWindowPos = window.screenX  Returns A number equal to the number of CSS pixels from the left edge of the browser viewport to the left edge of the screen. Examples In our screenleft-screentop example, you'll see a canvas onto which has been drawn a circle. In this example we are using Window.screenLeft/Window.screenTop plus Window.requestAnimationFrame()",
        "type": "Window"
    },
    "window.screenY": {
        "descr": "The Window.screenY read-only property returns the vertical distance, in CSS pixels, of the top border of the user's browser viewport to the top edge of the screen.",
        "name": "window.screenY",
        "params": [],
        "path": "dom/window/screeny",
        "syntax": "topWindowPos = window.screenY  Returns A number equal to the number of CSS pixels from the top edge of the browser viewport to the top edge of the screen. Examples In our screenleft-screentop example, you'll see a canvas onto which has been drawn a circle. In this example we are using Window.screenLeft/Window.screenTop plus Window.requestAnimationFrame()",
        "type": "Window"
    },
    "window.scroll": {
        "descr": "Scrolls the window to a particular place in the document.",
        "name": "window.scroll",
        "params": [],
        "path": "dom/window/scroll",
        "syntax": "window.scroll(x-coord, y-coord) window.scroll(options)",
        "type": "Window"
    },
    "window.scrollBy": {
        "descr": "Scrolls the document in the window by the given amount.",
        "name": "window.scrollBy",
        "params": [],
        "path": "dom/window/scrollby",
        "syntax": "window.scrollBy(x-coord, y-coord);\n or  window.scrollBy(options));",
        "type": "Window"
    },
    "window.scrollTo": {
        "descr": "Scrolls to a particular set of coordinates in the document.",
        "name": "window.scrollTo",
        "params": [],
        "path": "dom/window/scrollto",
        "syntax": "window.scrollTo(x-coord, y-coord) window.scrollTo(options)",
        "type": "Window"
    },
    "window.scrollX": {
        "descr": "The read-only scrollX property of the Window interface returns the number of pixels that the document is currently scrolled horizontally. This value is subpixel precise in modern browsers, meaning that it isn't necessarily a whole number. You can get the number of pixels the document is scrolled vertically from the scrollY property.",
        "name": "window.scrollX",
        "params": [
            {
                "descr": "Uses the non-standard name: pageXOffset",
                "name": "?   ?"
            },
            {
                "descr": "Uses the non-standard name: pageXOffset",
                "name": "?   ?"
            },
            {
                "descr": "Uses the non-standard name: pageXOffset",
                "name": "?   ?"
            }
        ],
        "path": "dom/window/scrollx",
        "syntax": "var x = window.scrollX; Value In practice, the returned value is a double-precision floating-point value indicating the number of pixels the document is currently scrolled horizontally from the origin, where a positive value means the content is scrolled to the left. If the document is rendered on a subpixel-precise device, then the returned value is also subpixel-precise and may contain a decimal component. If the document isn't scrolled at all left or right, then scrollX is 0.  If you need an integer value, you can use Math.round()",
        "type": "Window"
    },
    "window.scrollY": {
        "descr": "The read-only scrollY property of the Window interface returns the number of pixels that the document is currently scrolled vertically. This value is subpixel precise in modern browsers, meaning that it isn't necessarily a whole number. You can get the number of pixels the document is scrolled horizontally from the scrollX property.",
        "name": "window.scrollY",
        "params": [
            {
                "descr": "Uses the non-standard name: pageYOffset",
                "name": "?   ?"
            },
            {
                "descr": "Uses the non-standard name: pageYOffset",
                "name": "?"
            },
            {
                "descr": "Uses the non-standard name: pageYOffset",
                "name": "?   ?"
            }
        ],
        "path": "dom/window/scrolly",
        "syntax": "var y = window.scrollY Value In practice, the returned value is a double-precision floating-point value indicating the number of pixels the document is currently scrolled vertically from the origin, where a positive value means the content is scrolled to upward. If the document is rendered on a subpixel-precise device, then the returned value is also subpixel-precise and may contain a decimal component. If the document isn't scrolled at all up or down, then scrollY is 0.  If you need an integer value, you can use Math.round()",
        "type": "Window"
    },
    "window.self": {
        "descr": "The Window.self read-only property returns the window itself, as a WindowProxy. It can be used with dot notation on a window object (that is, window.self) or standalone (self). The advantage of the standalone notation is that a similar notation exists for non-window contexts, such as in Web Workers. By using self, you can refer to the global scope in a way that will work not only in a window context (self will resolve to window.self) but also in a worker context (self will then resolve to WorkerGlobalScope.self).",
        "name": "window.self",
        "params": [],
        "path": "dom/window/self",
        "syntax": "var w = window.self; // w === window  Example Uses of window.self like the following could just as well be replaced by window. if (window.parent.frames[0] != window.self) { // this window is not the first frame in the list }",
        "type": "Window"
    },
    "window.sessionStorage": {
        "descr": "The sessionStorage property allows you to access a session Storage object for the current origin. sessionStorage is similar to Window.localStorage; the only difference is while data stored in localStorage has no expiration set, data stored in sessionStorage gets cleared when the page session ends. A page session lasts for as long as the browser is open and survives over page reloads and restores. Opening a page in a new tab or window will cause a new session to be initiated with the value of the top-level browsing context, which differs from how session cookies work.",
        "name": "window.sessionStorage",
        "params": [],
        "path": "dom/window/sessionstorage",
        "syntax": "// Save data to sessionStorage sessionStorage.setItem('key', 'value');\n or  // Get saved data from sessionStorage var data = sessionStorage.getItem('key');\n or  // Remove saved data from sessionStorage sessionStorage.removeItem('key');\n or  // Remove all saved data from sessionStorage sessionStorage.clear();",
        "type": "Window"
    },
    "window.showModalDialog": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.",
        "name": "window.showModalDialog",
        "params": [],
        "path": "dom/window/showmodaldialog",
        "syntax": "returnVal = window.showModalDialog(uri[, arguments][, options]);",
        "type": "Window"
    },
    "window.speechSynthesis": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "window.speechSynthesis",
        "params": [],
        "path": "dom/window/speechsynthesis",
        "syntax": "var synth = window.speechSynthesis;  Value A SpeechSynthesis object. Examples In our basic Speech synthesiser demo, we first grab a reference to the SpeechSynthesis controller using window.speechSynthesis. After defining some necessary variables, we retrieve a list of the voices available using SpeechSynthesis.getVoices()",
        "type": "Window"
    },
    "window.stop": {
        "descr": "",
        "name": "window.stop",
        "params": [],
        "path": "dom/window/stop",
        "syntax": "window.stop()",
        "type": "Window"
    },
    "window.visualViewport": {
        "descr": "This is an experimental technologyCheck the Browser compatibility table carefully before using this in production.",
        "name": "window.visualViewport",
        "params": [],
        "path": "dom/window/visualviewport",
        "syntax": "var visualViewport = Window.visualViewport Value A VisualViewport object. Specifications    Specification Status Comment   Visual Viewport APIThe definition of 'visualViewport' in that specification. Draft Initial definition.    Browser compatibilityUpdate compatibility data on GitHub       Desktop    Chrome Edge Firefox Internet Explorer Opera Safari    Basic support   60  ?   63Disabled    63Disabled   Disabled From version 63: this feature is behind the dom.visualviewport.enabled preference (needs to be set to true). To change preferences in Firefox, visit about:config.    ?   47  ?        Mobile    Android webview Chrome for Android Edge Mobile Firefox for Android Opera for Android iOS Safari Samsung Internet    Basic support   60  60  ?   63Disabled    63Disabled   Disabled From version 63: this feature is behind the dom.visualviewport.enabled",
        "type": "Window"
    },
    "window.window": {
        "descr": "The window property of a window object points to the window object itself. Thus the following expressions all return the same window object:",
        "name": "window.window",
        "params": [],
        "path": "dom/window/window",
        "syntax": "window: var global = {data: 0}; alert(global === window.global);\n or  // displays \"true\");",
        "type": "Window"
    },
    "with": {
        "descr": "The with statement extends the scope chain for a statement.",
        "name": "with",
        "params": [
            {
                "descr": "Adds the given expression to the scope chain used when evaluating the statement. ",
                "name": "expression"
            },
            {
                "descr": "Any statement. To execute multiple statements, use a block statement ({ ... ",
                "name": "statement"
            }
        ],
        "path": "javascript/statements/with",
        "syntax": "with (expression) statement",
        "type": "Statements"
    },
    "wrap": {
        "descr": "The .wrap() function can take any string or object that could be passed to the $() factory function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. A copy of this structure will be wrapped around each of the elements in the set of matched elements. This method returns the original set of elements for chaining purposes.",
        "name": "wrap",
        "params": [
            {
                "descr": "Type: Selector or htmlString or Element or jQuery  A selector, element, HTML string, or jQuery object specifying the structure to wrap around the matched elements. ",
                "name": "wrappingElement"
            },
            {
                "descr": "Type: Function( Integer index ) => String or jQuery  A callback function returning the HTML content or jQuery object to wrap around the matched elements. ",
                "name": "function"
            }
        ],
        "path": "jquery/wrap",
        "syntax": ".wrap( wrappingElement ) Returns: jQuery",
        "type": "Manipulation"
    },
    "wrapAll": {
        "descr": "The .wrapAll() function can take any string or object that could be passed to the $() function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. The structure will be wrapped around all of the elements in the set of matched elements, as a single group.",
        "name": "wrapAll",
        "params": [
            {
                "descr": "Type: Selector or htmlString or Element or jQuery  A selector, element, HTML string, or jQuery object specifying the structure to wrap around the matched elements.",
                "name": "wrappingElement"
            },
            {
                "descr": "Type: Function() => String or jQuery  A callback function returning the HTML content or jQuery object to wrap around all the matched elements. ",
                "name": "function"
            }
        ],
        "path": "jquery/wrapall",
        "syntax": ".wrapAll( wrappingElement ) Returns: jQuery",
        "type": "Manipulation"
    },
    "wrapInner": {
        "descr": "The .wrapInner() function can take any string or object that could be passed to the $() factory function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. The structure will be wrapped around the content of each of the elements in the set of matched elements.",
        "name": "wrapInner",
        "params": [
            {
                "descr": "Type: htmlString or Selector or jQuery or Element  An HTML snippet, selector expression, jQuery object, or DOM element specifying the structure to wrap around the content of the matched elements.",
                "name": "wrappingElement"
            },
            {
                "descr": "Type: Function( Integer index ) => String  A callback function which generates a structure to wrap around the content of the matched elements. ",
                "name": "function"
            }
        ],
        "path": "jquery/wrapinner",
        "syntax": ".wrapInner( wrappingElement ) Returns: jQuery",
        "type": "Manipulation"
    },
    "yield": {
        "descr": "The yield keyword is used to pause and resume a generator function (function* or legacy generator function).",
        "name": "yield",
        "params": [
            {
                "descr": "Defines the value to return from the generator function via the iterator protocol. ",
                "name": "expression"
            },
            {
                "descr": "Returns the optional value passed to the generator's next() method to resume its execution.",
                "name": "rv"
            }
        ],
        "path": "javascript/operators/yield",
        "syntax": "[rv] = yield [expression];  expression Defines the value to return from the generator function via the iterator protocol. If omitted, undefined is returned instead. rv  Returns the optional value passed to the generator's next()",
        "type": "Operators"
    },
    "yield*": {
        "descr": "The yield* is used to delegate to another generator or iterable object.",
        "name": "yield*",
        "params": [
            {
                "descr": "The expression which returns an iterable object.",
                "name": "expression"
            }
        ],
        "path": "javascript/operators/yield*",
        "syntax": "yield* [[expression]];  expression The expression which returns an iterable object.  Description The yield* expression iterates over the operand and yields each value returned by it. The value of yield* expression itself is the value returned by that iterator when it's closed (i.e., when done is true).",
        "type": "Operators"
    },
    "|": {
        "descr": "Bitwise operators treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.",
        "name": "|",
        "params": [],
        "path": "javascript/operators/bitwise_operators#Bitwise_OR",
        "syntax": "Standard Defined in several sections of the specification: Bitwise NOT operator, Bitwise shift operators, Binary bitwise operators    ECMAScript Latest Draft (ECMA-262) Draft Defined in several sections of the specification: Bitwise NOT operator, Bitwise shift operators, Binary bitwise operators     Browser compatibilityUpdate compatibility data on GitHub",
        "type": "Operators"
    },
    "|=": {
        "descr": "An assignment operator assigns a value to its left operand based on the value of its right operand.",
        "name": "|=",
        "params": [],
        "path": "javascript/operators/assignment_operators#Bitwise_OR_assignment",
        "syntax": "Operator: x = y  Examples // Assuming the following variables // x = 5 // y = 10 // z = 25 x = y // x is 10 x = y = z // x, y and z are all 25  Addition assignment The addition assignment operator adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible. See the addition operator for more details. Syntax Operator: x += y Meaning: x = x + y  Examples // Assuming the following variables // foo = 'foo' // bar = 5 // baz = true // Number + Number -> addition bar += 2 // 7 // Boolean + Number -> addition baz += 1 // 2 // Boolean + Boolean -> addition baz += false // 1 // Number + String -> concatenation bar += 'foo' // \"5foo\" // String + Boolean -> concatenation foo += false // \"foofalse\" // String + String -> concatenation foo += 'bar' // \"foobar\"  Subtraction assignment The subtraction assignment operator subtracts the value of the right operand from a variable and assigns the result to the variable. See the subtraction operator for more details. Syntax Operator: x -= y Meaning: x = x - y  Examples // Assuming the following variable // bar = 5 bar -= 2 // 3 bar -= 'foo' // NaN  Multiplication assignment The multiplication assignment operator multiplies a variable by the value of the right operand and assigns the result to the variable. See the multiplication operator for more details. Syntax Operator: x *= y Meaning: x = x * y  Examples // Assuming the following variable // bar = 5 bar *= 2 // 10 bar *= 'foo' // NaN  Division assignment The division assignment operator divides a variable by the value of the right operand and assigns the result to the variable. See the division operator for more details. Syntax Operator: x /= y Meaning: x = x / y  Examples // Assuming the following variable // bar = 5 bar /= 2 // 2.5 bar /= 'foo' // NaN bar /= 0 // Infinity  Remainder assignment The remainder assignment operator divides a variable by the value of the right operand and assigns the remainder to the variable. See the remainder operator for more details. Syntax Operator: x %= y Meaning: x = x % y  Examples // Assuming the following variable // bar = 5 bar %= 2 // 1 bar %= 'foo' // NaN bar %= 0 // NaN  Exponentiation assignment The exponentiation assignment operator evaluates to the result of raising first operand to the power second operand. See the exponentiation operator for more details. Syntax Operator: x **= y Meaning: x = x ** y  Examples // Assuming the following variable // bar = 5 bar **= 2 // 25 bar **= 'foo' // NaN Left shift assignment The left shift assignment operator moves the specified amount of bits to the left and assigns the result to the variable. See the left shift operator for more details. Syntax Operator: x <<= y Meaning: x = x << y  Examples var bar = 5; // (00000000000000000000000000000101) bar <<= 2; // 20 (00000000000000000000000000010100)",
        "type": "Operators"
    },
    "||": {
        "descr": "Logical operators are typically used with Boolean (logical) values. When they are, they return a Boolean value. However, the && and || operators actually return the value of one of the specified operands, so if these operators are used with non-Boolean values, they may return a non-Boolean value.",
        "name": "||",
        "params": [],
        "path": "javascript/operators/logical_operators#Logical_OR",
        "syntax": "Standard Defined in several sections of the specification: Logical NOT Operator, Binary Logical Operators    ECMAScript Latest Draft (ECMA-262) Draft Defined in several sections of the specification: Logical NOT Operator, Binary Logical Operators     Browser compatibilityUpdate compatibility data on GitHub",
        "type": "Operators"
    },
    "~": {
        "descr": "Bitwise operators treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.",
        "name": "~",
        "params": [],
        "path": "javascript/operators/bitwise_operators#Bitwise_NOT",
        "syntax": "Standard Defined in several sections of the specification: Bitwise NOT operator, Bitwise shift operators, Binary bitwise operators    ECMAScript Latest Draft (ECMA-262) Draft Defined in several sections of the specification: Bitwise NOT operator, Bitwise shift operators, Binary bitwise operators     Browser compatibilityUpdate compatibility data on GitHub",
        "type": "Operators"
    }
}